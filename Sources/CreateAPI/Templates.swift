// The MIT License (MIT)
//
// Copyright (c) 2021 Alexander Grebenyuk (github.com/kean).

import OpenAPIKit30
import Foundation

final class Templates {
    let options: GenerateOptions
    
    init(options: GenerateOptions) {
        self.options = options
    }

    var fileHeader: String {
        if let header = options.fileHeader.header {
            return header
        }
        
        var output = """
        // Generated by Create API
        // https://github.com/kean/CreateAPI
        """
        
        if options.fileHeader.addSwiftLintDisabled {
            output += "\n"
            output += """
            //
            // swiftlint:disable all
            """
        }

        output += "\n\nimport Foundation"
        
        return output
    }
    
    /// Generates inline comments for a declaration containing a title, description, and examples.
    func comments(for context: JSONSchemaContext) -> String {
        let options = options.comments
        guard options.isEnabled else {
            return ""
        }
        var output = ""
        if options.addTitle, let title = context.title, !title.isEmpty {
            let title = options.capitilizeTitle ? title.capitalizingFirstLetter() : title
            output += "/// \(title)\n"
        }
        if options.addDescription, let description = context.description, !description.isEmpty, description != context.title {
            if !output.isEmpty {
                output += "///\n"
            }
            let description = options.capitilizeDescription ? description.capitalizingFirstLetter() : description
            for line in description.split(separator: "\n") {
                output += "/// \(line)\n"
            }
        }
        if options.addExamples, let example = context.example?.value {
            let value: String
            func format(dictionary: [String: Any]) -> String {
                let values = dictionary.keys.sorted().map { "  \"\($0)\": \"\(dictionary[$0]!)\"" }
                return "{\n\(values.joined(separator: ",\n"))\n}"
            }
            
            if JSONSerialization.isValidJSONObject(example) {
                let data = try? JSONSerialization.data(withJSONObject: example, options: [.prettyPrinted, .sortedKeys])
                value = String(data: data ?? Data(), encoding: .utf8) ?? ""
            } else {
                value = "\(example)"
            }
            if value.count > 1 { // Only display if it's something substantial
                if !output.isEmpty {
                    output += "///\n"
                }
                let lines = value.split(separator: "\n")
                if lines.count == 1 {
                    output += "/// Example: \(value)\n"
                } else {
                    output += "/// Example:\n\n"
                    for line in lines {
                        output += "/// \(line)\n"
                    }
                }
            }
        }
        return output
    }
}
