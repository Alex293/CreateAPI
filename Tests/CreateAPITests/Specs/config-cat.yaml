{
  "openapi": "3.0.1",
  "info": {
    "title": "ConfigCat Public Management API",
    "description": "**Base API URL**: https://api.configcat.com\n\nIf you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).\n\nThe purpose of this API is to access the ConfigCat platform programmatically. \nYou can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat. \n\nThe API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON \nand JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).\n\n\n# OpenAPI Specification\n\nThe complete specification is publicly available here: [swagger.json](v1/swagger.json). \nYou can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or\n[Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.\n\n# Authentication\nThis API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication). \n\n<!-- ReDoc-Inject: <security-definitions> -->\n\n# Throttling and rate limits\nAll the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:\n\n| Header | Description |\n| :- | :- |\n| X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. |\n| X-Rate-Limit-Reset     | The time\twhen the current rate limit period resets.\t\t\t\t\t\t  |\n\nWhen the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header.\n",
    "termsOfService": "https://configcat.com/termsofserviceagreement",
    "contact": {
      "name": "ConfigCat",
      "url": "https://configcat.com",
      "email": "support@configcat.com"
    },
    "version": "v1",
    "x-logo": {
      "url": "https://api.configcat.com/resources/configcat-logo-horiz.svg"
    }
  },
  "servers": [
    {
      "url": "https://api.configcat.com"
    }
  ],
  "paths": {
    "/v1/products/{productId}/auditlogs": {
      "get": {
        "tags": [
          "Audit logs"
        ],
        "summary": "List Audit log items for Product",
        "description": "This endpoint returns the list of Audit log items for a given Product \nand the result can be optionally filtered by Config and/or Environment.",
        "operationId": "get-auditlogs",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "configId",
            "in": "query",
            "description": "The identifier of the Config.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "environmentId",
            "in": "query",
            "description": "The identifier of the Environment.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "auditLogType",
            "in": "query",
            "description": "Filter Audit logs by Audit log type.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AuditLogType"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "fromUtcDateTime",
            "in": "query",
            "description": "Filter Audit logs by starting UTC date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toUtcDateTime",
            "in": "query",
            "description": "Filter Audit logs by ending UTC date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditLogItemModel"
                  }
                }
              },
              "application/hal+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditLogItemModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/organizations/{organizationId}/auditlogs": {
      "get": {
        "tags": [
          "Audit logs"
        ],
        "summary": "List Audit log items for Organization",
        "description": "This endpoint returns the list of Audit log items for a given Organization \nand the result can be optionally filtered by Product and/or Config and/or Environment.",
        "operationId": "get-organization-auditlogs",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The identifier of the Organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "productId",
            "in": "query",
            "description": "The identifier of the Product.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "configId",
            "in": "query",
            "description": "The identifier of the Config.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "environmentId",
            "in": "query",
            "description": "The identifier of the Environment.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "auditLogType",
            "in": "query",
            "description": "Filter Audit logs by Audit log type.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AuditLogType"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "fromUtcDateTime",
            "in": "query",
            "description": "Filter Audit logs by starting UTC date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toUtcDateTime",
            "in": "query",
            "description": "Filter Audit logs by ending UTC date.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditLogItemModel"
                  }
                }
              },
              "application/hal+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditLogItemModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/configs/{configId}/deleted-settings": {
      "get": {
        "tags": [
          "Audit logs"
        ],
        "summary": "List Deleted Settings",
        "description": "This endpoint returns the list of Feature Flags and Settings that were deleted from the given Config.",
        "operationId": "get-deleted-settings",
        "parameters": [
          {
            "name": "configId",
            "in": "path",
            "description": "The identifier of the Config.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingModel"
                  }
                }
              },
              "application/hal+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingModel-haljson"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/products/{productId}/configs": {
      "get": {
        "tags": [
          "Configs"
        ],
        "summary": "List Configs",
        "description": "This endpoint returns the list of the Configs that belongs to the given Product identified by the\n`productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.",
        "operationId": "get-configs",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConfigModel"
                  }
                }
              },
              "application/hal+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConfigModel-haljson"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "post": {
        "tags": [
          "Configs"
        ],
        "summary": "Create Config",
        "description": "This endpoint creates a new Config in a specified Product \nidentified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.",
        "operationId": "create-config",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConfigRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConfigRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "When the creation was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigModel-haljson"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/configs/{configId}": {
      "get": {
        "tags": [
          "Configs"
        ],
        "summary": "Get Config",
        "description": "This endpoint returns the metadata of a Config\nidentified by the `configId`.",
        "operationId": "get-config",
        "parameters": [
          {
            "name": "configId",
            "in": "path",
            "description": "The identifier of the Config.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the config data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigModel-haljson"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "put": {
        "tags": [
          "Configs"
        ],
        "summary": "Update Config",
        "description": "This endpoint updates a Config identified by the `configId` parameter.",
        "operationId": "update-config",
        "parameters": [
          {
            "name": "configId",
            "in": "path",
            "description": "The identifier of the Config.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConfigRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConfigRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigModel-haljson"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "delete": {
        "tags": [
          "Configs"
        ],
        "summary": "Delete Config",
        "description": "This endpoint removes a Config identified by the `configId` parameter.",
        "operationId": "delete-config",
        "parameters": [
          {
            "name": "configId",
            "in": "path",
            "description": "The identifier of the Config.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the delete was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/products/{productId}/environments": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "List Environments",
        "description": "This endpoint returns the list of the Environments that belongs to the given Product identified by the\n`productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.",
        "operationId": "get-environments",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnvironmentModel"
                  }
                }
              },
              "application/hal+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnvironmentModel-haljson"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "post": {
        "tags": [
          "Environments"
        ],
        "summary": "Create Environment",
        "description": "This endpoint creates a new Environment in a specified Product \nidentified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.",
        "operationId": "create-environment",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEnvironmentModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEnvironmentModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEnvironmentModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "When the creation was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentModel-haljson"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/environments/{environmentId}": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Get Environment",
        "description": "This endpoint returns the metadata of an Environment \nidentified by the `environmentId`.",
        "operationId": "get-environment",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the environment data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentModel-haljson"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "put": {
        "tags": [
          "Environments"
        ],
        "summary": "Update Environment",
        "description": "This endpoint updates an Environment identified by the `environmentId` parameter.",
        "operationId": "update-environment",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEnvironmentModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEnvironmentModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEnvironmentModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentModel-haljson"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "delete": {
        "tags": [
          "Environments"
        ],
        "summary": "Delete Environment",
        "description": "This endpoint removes an Environment identified by the `environmentId` parameter.",
        "operationId": "delete-environment",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the delete was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/environments/{environmentId}/settings/{settingId}/value": {
      "get": {
        "tags": [
          "Feature Flag & Setting values"
        ],
        "summary": "Get value",
        "description": "This endpoint returns the value of a Feature Flag or Setting \nin a specified Environment identified by the `environmentId` parameter.\n\nThe most important attributes in the response are the `value`, `rolloutRules` and `percentageRules`.\nThe `value` represents what the clients will get when the evaluation requests of our SDKs \nare not matching to any of the defined Targeting or Percentage Rules, or when there are no additional rules to evaluate.\n\nThe `rolloutRules` and `percentageRules` attributes are representing the current \nTargeting and Percentage Rules configuration of the actual Feature Flag or Setting \nin an **ordered** collection, which means the order of the returned rules is matching to the\nevaluation order. You can read more about these rules [here](https://configcat.com/docs/advanced/targeting/).",
        "operationId": "get-setting-value",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "settingId",
            "in": "path",
            "description": "The id of the Setting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the setting value data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingValueModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingValueModel-haljson"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "put": {
        "tags": [
          "Feature Flag & Setting values"
        ],
        "summary": "Replace value",
        "description": "This endpoint replaces the whole value of a Feature Flag or Setting in a specified Environment.\n\nOnly the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.\n\n**Important:** As this endpoint is doing a complete replace, it's important to set every other attribute that you don't \nwant to change in its original state. Not listing one means that it will reset.\n\nFor example: We have the following resource.\n```\n{\n\t\"rolloutPercentageItems\": [\n\t\t{\n\t\t\t\"percentage\": 30,\n\t\t\t\"value\": true\n\t\t},\n\t\t{\n\t\t\t\"percentage\": 70,\n\t\t\t\"value\": false\n\t\t}\n\t],\n\t\"rolloutRules\": [],\n\t\"value\": false\n}\n```\nIf we send a replace request body as below:\n```\n{\n\t\"value\": true\n}\n```\nThen besides that the default value is set to `true`, all the Percentage Rules are deleted. \nSo we get a response like this:\n```\n{\n\t\"rolloutPercentageItems\": [],\n\t\"rolloutRules\": [],\n\t\"value\": true\n}\n```",
        "operationId": "replace-setting-value",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "settingId",
            "in": "path",
            "description": "The id of the Setting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "description": "The reason note for the Audit Log if the Product's \"Config changes require a reason\" preference is turned on.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingValueModel"
              },
              "examples": {
                "simple": {
                  "description": "This example turns on a feature flag.",
                  "value": {
                    "value": true
                  }
                },
                "advanced": {
                  "description": "This example turns on a feature flag and adds two items to its percentage evaluation rules.",
                  "value": {
                    "value": true,
                    "rolloutPercentageItems": [
                      {
                        "percentage": 30,
                        "value": true
                      },
                      {
                        "percentage": 70,
                        "value": false
                      }
                    ]
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingValueModel"
              },
              "examples": {
                "simple": {
                  "description": "This example turns on a feature flag.",
                  "value": {
                    "value": true
                  }
                },
                "advanced": {
                  "description": "This example turns on a feature flag and adds two items to its percentage evaluation rules.",
                  "value": {
                    "value": true,
                    "rolloutPercentageItems": [
                      {
                        "percentage": 30,
                        "value": true
                      },
                      {
                        "percentage": 70,
                        "value": false
                      }
                    ]
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingValueModel"
              },
              "examples": {
                "simple": {
                  "description": "This example turns on a feature flag.",
                  "value": {
                    "value": true
                  }
                },
                "advanced": {
                  "description": "This example turns on a feature flag and adds two items to its percentage evaluation rules.",
                  "value": {
                    "value": true,
                    "rolloutPercentageItems": [
                      {
                        "percentage": 30,
                        "value": true
                      },
                      {
                        "percentage": 70,
                        "value": false
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingValueModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingValueModel-haljson"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "patch": {
        "tags": [
          "Feature Flag & Setting values"
        ],
        "summary": "Update value",
        "description": "This endpoint updates the value of a Feature Flag or Setting \nwith a collection of [JSON Patch](http://jsonpatch.com) operations in a specified Environment.\n\nOnly the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.\n\nThe advantage of using JSON Patch is that you can describe individual update operations on a resource\nwithout touching attributes that you don't want to change. It supports collection reordering, so it also \ncan be used for reordering the targeting rules of a Feature Flag or Setting.\n\nFor example: We have the following resource.\n```\n{\n\t\"rolloutPercentageItems\": [\n\t\t{\n\t\t\t\"percentage\": 30,\n\t\t\t\"value\": true\n\t\t},\n\t\t{\n\t\t\t\"percentage\": 70,\n\t\t\t\"value\": false\n\t\t}\n\t],\n\t\"rolloutRules\": [],\n\t\"value\": false\n}\n```\nIf we send an update request body as below:\n```\n[\n\t{\n\t\t\"op\": \"replace\",\n\t\t\"path\": \"/value\",\n\t\t\"value\": true\n\t}\n]\n```\nOnly the default value is going to be set to `true` and all the Percentage Rules are remaining unchanged.\nSo we get a response like this:\n```\n{\n\t\"rolloutPercentageItems\": [\n\t\t{\n\t\t\t\"percentage\": 30,\n\t\t\t\"value\": true\n\t\t},\n\t\t{\n\t\t\t\"percentage\": 70,\n\t\t\t\"value\": false\n\t\t}\n\t],\n\t\"rolloutRules\": [],\n\t\"value\": true\n}\n```",
        "operationId": "update-setting-value",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "settingId",
            "in": "path",
            "description": "The id of the Setting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "description": "The reason note for the Audit Log if the Product's \"Config changes require a reason\" preference is turned on.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "examples": {
                "turn on a feature flag": {
                  "description": "This example turns on a feature flag.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/value",
                      "value": true
                    }
                  ]
                },
                "add percentage rules": {
                  "description": "This example adds two items to the percentage evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 30,
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 70,
                        "value": false
                      }
                    }
                  ]
                },
                "add targeting rules": {
                  "description": "This example adds two items to the targeting evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "contains",
                        "comparisonValue": "@example.com",
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "isOneOf",
                        "comparisonValue": "@blacklist.com",
                        "value": false
                      }
                    }
                  ]
                },
                "reorder targeting rules": {
                  "description": "This example swaps the first and the second targeting evaluation rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/rolloutRules/1",
                      "from": "/rolloutRules/0"
                    }
                  ]
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "examples": {
                "turn on a feature flag": {
                  "description": "This example turns on a feature flag.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/value",
                      "value": true
                    }
                  ]
                },
                "add percentage rules": {
                  "description": "This example adds two items to the percentage evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 30,
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 70,
                        "value": false
                      }
                    }
                  ]
                },
                "add targeting rules": {
                  "description": "This example adds two items to the targeting evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "contains",
                        "comparisonValue": "@example.com",
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "isOneOf",
                        "comparisonValue": "@blacklist.com",
                        "value": false
                      }
                    }
                  ]
                },
                "reorder targeting rules": {
                  "description": "This example swaps the first and the second targeting evaluation rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/rolloutRules/1",
                      "from": "/rolloutRules/0"
                    }
                  ]
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "examples": {
                "turn on a feature flag": {
                  "description": "This example turns on a feature flag.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/value",
                      "value": true
                    }
                  ]
                },
                "add percentage rules": {
                  "description": "This example adds two items to the percentage evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 30,
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 70,
                        "value": false
                      }
                    }
                  ]
                },
                "add targeting rules": {
                  "description": "This example adds two items to the targeting evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "contains",
                        "comparisonValue": "@example.com",
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "isOneOf",
                        "comparisonValue": "@blacklist.com",
                        "value": false
                      }
                    }
                  ]
                },
                "reorder targeting rules": {
                  "description": "This example swaps the first and the second targeting evaluation rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/rolloutRules/1",
                      "from": "/rolloutRules/0"
                    }
                  ]
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "examples": {
                "turn on a feature flag": {
                  "description": "This example turns on a feature flag.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/value",
                      "value": true
                    }
                  ]
                },
                "add percentage rules": {
                  "description": "This example adds two items to the percentage evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 30,
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 70,
                        "value": false
                      }
                    }
                  ]
                },
                "add targeting rules": {
                  "description": "This example adds two items to the targeting evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "contains",
                        "comparisonValue": "@example.com",
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "isOneOf",
                        "comparisonValue": "@blacklist.com",
                        "value": false
                      }
                    }
                  ]
                },
                "reorder targeting rules": {
                  "description": "This example swaps the first and the second targeting evaluation rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/rolloutRules/1",
                      "from": "/rolloutRules/0"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "When the patch was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingValueModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingValueModel-haljson"
                }
              }
            }
          },
          "204": {
            "description": "When no change applied on the resource."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/configs/{configId}/environments/{environmentId}/values": {
      "get": {
        "tags": [
          "Feature Flag & Setting values"
        ],
        "summary": "Get values",
        "description": "This endpoint returns the value of a specified Config's Feature Flags or Settings identified by the `configId` parameter\nin a specified Environment identified by the `environmentId` parameter.\n\nThe most important attributes in the response are the `value`, `rolloutRules` and `percentageRules`.\nThe `value` represents what the clients will get when the evaluation requests of our SDKs \nare not matching to any of the defined Targeting or Percentage Rules, or when there are no additional rules to evaluate.\n\nThe `rolloutRules` and `percentageRules` attributes are representing the current \nTargeting and Percentage Rules configuration of the actual Feature Flag or Setting \nin an **ordered** collection, which means the order of the returned rules is matching to the\nevaluation order. You can read more about these rules [here](https://configcat.com/docs/advanced/targeting/).",
        "operationId": "get-setting-values",
        "parameters": [
          {
            "name": "configId",
            "in": "path",
            "description": "The identifier of the Config.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the setting values returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigSettingValuesModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigSettingValuesModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/settings/{settingKeyOrId}/value": {
      "get": {
        "tags": [
          "Feature Flag & Setting values using SDK Key"
        ],
        "summary": "Get value",
        "description": "This endpoint returns the value of a Feature Flag or Setting \nin a specified Environment identified by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.\n\nThe most important attributes in the response are the `value`, `rolloutRules` and `percentageRules`.\nThe `value` represents what the clients will get when the evaluation requests of our SDKs \nare not matching to any of the defined Targeting or Percentage Rules, or when there are no additional rules to evaluate.\n\nThe `rolloutRules` and `percentageRules` attributes are representing the current \nTargeting and Percentage Rules configuration of the actual Feature Flag or Setting \nin an **ordered** collection, which means the order of the returned rules is matching to the\nevaluation order. You can read more about these rules [here](https://configcat.com/docs/advanced/targeting/).",
        "operationId": "get-setting-value-by-sdkkey",
        "parameters": [
          {
            "name": "settingKeyOrId",
            "in": "path",
            "description": "The key or id of the Setting.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-CONFIGCAT-SDKKEY",
            "in": "header",
            "description": "The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingValueModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingValueModel-haljson"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "put": {
        "tags": [
          "Feature Flag & Setting values using SDK Key"
        ],
        "summary": "Replace value",
        "description": "This endpoint replaces the value of a Feature Flag or Setting \nin a specified Environment identified by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.\n\nOnly the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.\n\n**Important:** As this endpoint is doing a complete replace, it's important to set every other attribute that you don't \nwant to change to its original state. Not listing one means that it will reset.\n\nFor example: We have the following resource.\n```\n{\n\t\"rolloutPercentageItems\": [\n\t\t{\n\t\t\t\"percentage\": 30,\n\t\t\t\"value\": true\n\t\t},\n\t\t{\n\t\t\t\"percentage\": 70,\n\t\t\t\"value\": false\n\t\t}\n\t],\n\t\"rolloutRules\": [],\n\t\"value\": false\n}\n```\nIf we send a replace request body as below:\n```\n{\n\t\"value\": true\n}\n```\nThen besides that the default served value is set to `true`, all the Percentage Rules are deleted. \nSo we get a response like this:\n```\n{\n\t\"rolloutPercentageItems\": [],\n\t\"rolloutRules\": [],\n\t\"value\": true\n}\n```",
        "operationId": "replace-setting-value-by-sdkkey",
        "parameters": [
          {
            "name": "settingKeyOrId",
            "in": "path",
            "description": "The key or id of the Setting.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "description": "The reason note for the Audit Log if the Product's \"Config changes require a reason\" preference is turned on.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-CONFIGCAT-SDKKEY",
            "in": "header",
            "description": "The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingValueModel"
              },
              "examples": {
                "simple": {
                  "description": "This example turns on a feature flag.",
                  "value": {
                    "value": true
                  }
                },
                "advanced": {
                  "description": "This example turns on a feature flag and adds two items to its percentage evaluation rules.",
                  "value": {
                    "value": true,
                    "rolloutPercentageItems": [
                      {
                        "percentage": 30,
                        "value": true
                      },
                      {
                        "percentage": 70,
                        "value": false
                      }
                    ]
                  }
                }
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingValueModel"
              },
              "examples": {
                "simple": {
                  "description": "This example turns on a feature flag.",
                  "value": {
                    "value": true
                  }
                },
                "advanced": {
                  "description": "This example turns on a feature flag and adds two items to its percentage evaluation rules.",
                  "value": {
                    "value": true,
                    "rolloutPercentageItems": [
                      {
                        "percentage": 30,
                        "value": true
                      },
                      {
                        "percentage": 70,
                        "value": false
                      }
                    ]
                  }
                }
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSettingValueModel"
              },
              "examples": {
                "simple": {
                  "description": "This example turns on a feature flag.",
                  "value": {
                    "value": true
                  }
                },
                "advanced": {
                  "description": "This example turns on a feature flag and adds two items to its percentage evaluation rules.",
                  "value": {
                    "value": true,
                    "rolloutPercentageItems": [
                      {
                        "percentage": 30,
                        "value": true
                      },
                      {
                        "percentage": 70,
                        "value": false
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingValueModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingValueModel-haljson"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "patch": {
        "tags": [
          "Feature Flag & Setting values using SDK Key"
        ],
        "summary": "Update value",
        "description": "This endpoint updates the value of a Feature Flag or Setting \nwith a collection of [JSON Patch](http://jsonpatch.com) operations in a specified Environment\nidentified by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.\n\nOnly the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.\n\nThe advantage of using JSON Patch is that you can describe individual update operations on a resource\nwithout touching attributes that you don't want to change. It supports collection reordering, so it also \ncan be used for reordering the targeting rules of a Feature Flag or Setting.\n\nFor example: We have the following resource.\n```\n{\n\t\"rolloutPercentageItems\": [\n\t\t{\n\t\t\t\"percentage\": 30,\n\t\t\t\"value\": true\n\t\t},\n\t\t{\n\t\t\t\"percentage\": 70,\n\t\t\t\"value\": false\n\t\t}\n\t],\n\t\"rolloutRules\": [],\n\t\"value\": false\n}\n```\nIf we send an update request body as below:\n```\n[\n\t{\n\t\t\"op\": \"replace\",\n\t\t\"path\": \"/value\",\n\t\t\"value\": true\n\t}\n]\n```\nOnly the default served value is going to be set to `true` and all the Percentage Rules are remaining unchanged.\nSo we get a response like this:\n```\n{\n\t\"rolloutPercentageItems\": [\n\t\t{\n\t\t\t\"percentage\": 30,\n\t\t\t\"value\": true\n\t\t},\n\t\t{\n\t\t\t\"percentage\": 70,\n\t\t\t\"value\": false\n\t\t}\n\t],\n\t\"rolloutRules\": [],\n\t\"value\": true\n}\n```",
        "operationId": "update-setting-value-by-sdkkey",
        "parameters": [
          {
            "name": "settingKeyOrId",
            "in": "path",
            "description": "The key or id of the Setting.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "description": "The reason note for the Audit Log if the Product's \"Config changes require a reason\" preference is turned on.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-CONFIGCAT-SDKKEY",
            "in": "header",
            "description": "The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "examples": {
                "turn on a feature flag": {
                  "description": "This example turns on a feature flag.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/value",
                      "value": true
                    }
                  ]
                },
                "add percentage rules": {
                  "description": "This example adds two items to the percentage evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 30,
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 70,
                        "value": false
                      }
                    }
                  ]
                },
                "add targeting rules": {
                  "description": "This example adds two items to the targeting evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "contains",
                        "comparisonValue": "@example.com",
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "isOneOf",
                        "comparisonValue": "@blacklist.com",
                        "value": false
                      }
                    }
                  ]
                },
                "reorder targeting rules": {
                  "description": "This example swaps the first and the second targeting evaluation rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/rolloutRules/1",
                      "from": "/rolloutRules/0"
                    }
                  ]
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "examples": {
                "turn on a feature flag": {
                  "description": "This example turns on a feature flag.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/value",
                      "value": true
                    }
                  ]
                },
                "add percentage rules": {
                  "description": "This example adds two items to the percentage evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 30,
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 70,
                        "value": false
                      }
                    }
                  ]
                },
                "add targeting rules": {
                  "description": "This example adds two items to the targeting evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "contains",
                        "comparisonValue": "@example.com",
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "isOneOf",
                        "comparisonValue": "@blacklist.com",
                        "value": false
                      }
                    }
                  ]
                },
                "reorder targeting rules": {
                  "description": "This example swaps the first and the second targeting evaluation rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/rolloutRules/1",
                      "from": "/rolloutRules/0"
                    }
                  ]
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "examples": {
                "turn on a feature flag": {
                  "description": "This example turns on a feature flag.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/value",
                      "value": true
                    }
                  ]
                },
                "add percentage rules": {
                  "description": "This example adds two items to the percentage evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 30,
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 70,
                        "value": false
                      }
                    }
                  ]
                },
                "add targeting rules": {
                  "description": "This example adds two items to the targeting evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "contains",
                        "comparisonValue": "@example.com",
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "isOneOf",
                        "comparisonValue": "@blacklist.com",
                        "value": false
                      }
                    }
                  ]
                },
                "reorder targeting rules": {
                  "description": "This example swaps the first and the second targeting evaluation rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/rolloutRules/1",
                      "from": "/rolloutRules/0"
                    }
                  ]
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "examples": {
                "turn on a feature flag": {
                  "description": "This example turns on a feature flag.",
                  "value": [
                    {
                      "op": "replace",
                      "path": "/value",
                      "value": true
                    }
                  ]
                },
                "add percentage rules": {
                  "description": "This example adds two items to the percentage evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 30,
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutPercentageItems/-",
                      "value": {
                        "percentage": 70,
                        "value": false
                      }
                    }
                  ]
                },
                "add targeting rules": {
                  "description": "This example adds two items to the targeting evaluation rules.",
                  "value": [
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "contains",
                        "comparisonValue": "@example.com",
                        "value": true
                      }
                    },
                    {
                      "op": "add",
                      "path": "/rolloutRules/-",
                      "value": {
                        "comparisonAttribute": "Identifier",
                        "comparator": "isOneOf",
                        "comparisonValue": "@blacklist.com",
                        "value": false
                      }
                    }
                  ]
                },
                "reorder targeting rules": {
                  "description": "This example swaps the first and the second targeting evaluation rule.",
                  "value": [
                    {
                      "op": "move",
                      "path": "/rolloutRules/1",
                      "from": "/rolloutRules/0"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingValueModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingValueModel-haljson"
                }
              }
            }
          },
          "204": {
            "description": "When no change applied on the resource."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/configs/{configId}/settings": {
      "get": {
        "tags": [
          "Feature Flags & Settings"
        ],
        "summary": "List Flags",
        "description": "This endpoint returns the list of the Feature Flags and Settings defined in a \nspecified Config, identified by the `configId` parameter.",
        "operationId": "get-settings",
        "parameters": [
          {
            "name": "configId",
            "in": "path",
            "description": "The identifier of the Config.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingModel"
                  }
                }
              },
              "application/hal+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingModel-haljson"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "post": {
        "tags": [
          "Feature Flags & Settings"
        ],
        "summary": "Create Flag",
        "description": "This endpoint creates a new Feature Flag or Setting in a specified Config\nidentified by the `configId` parameter.\n\n**Important:** The `key` attribute must be unique within the given Config.",
        "operationId": "create-setting",
        "parameters": [
          {
            "name": "configId",
            "in": "path",
            "description": "The identifier of the Config.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSettingModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSettingModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSettingModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "When the creation was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingModel-haljson"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/settings/{settingId}": {
      "get": {
        "tags": [
          "Feature Flags & Settings"
        ],
        "summary": "Get Flag",
        "description": "This endpoint returns the metadata attributes of a Feature Flag or Setting \nidentified by the `settingId` parameter.",
        "operationId": "get-setting",
        "parameters": [
          {
            "name": "settingId",
            "in": "path",
            "description": "The identifier of the Setting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the setting data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingModel-haljson"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "patch": {
        "tags": [
          "Feature Flags & Settings"
        ],
        "summary": "Update Flag",
        "description": "This endpoint updates the metadata of a Feature Flag or Setting \nwith a collection of [JSON Patch](http://jsonpatch.com) operations in a specified Config.\n\nOnly the `name`, `hint` and `tags` attributes are modifiable by this endpoint.\nThe `tags` attribute is a simple collection of the [tag IDs](#operation/get-tags) attached to the given setting.\n\nThe advantage of using JSON Patch is that you can describe individual update operations on a resource\nwithout touching attributes that you don't want to change.\n\nFor example: We have the following resource.\n```\n{\n\t\"settingId\": 5345,\n\t\"key\": \"myGrandFeature\",\n\t\"name\": \"Tihs is a naem with soem typos.\",\n\t\"hint\": \"This flag controls my grandioso feature.\",\n\t\"settingType\": \"boolean\",\n\t\"tags\": [\n\t\t{\n\t\t\t\"tagId\": 0,\n\t\t\t\"name\": \"sample tag\",\n\t\t\t\"color\": \"whale\"\n\t\t}\n\t]\n}\n```\nIf we send an update request body as below (it changes the name and adds the already existing tag with the id 2):\n```\n[\n\t{\n\t\t\"op\": \"replace\",\n\t\t\"path\": \"/name\",\n\t\t\"value\": \"This is the name without typos.\"\n\t},\n\t{\n\t\t\"op\": \"add\",\n\t\t\"path\": \"/tags/-\",\n\t\t\"value\": 2\n\t}\n]\n```\nOnly the `name` and `tags` are going to be updated and all the other attributes are remaining unchanged.\nSo we get a response like this:\n```\n{\n\t\"settingId\": 5345,\n\t\"key\": \"myGrandFeature\",\n\t\"name\": \"This is the name without typos.\",\n\t\"hint\": \"This flag controls my grandioso feature.\",\n\t\"settingType\": \"boolean\",\n\t\"tags\": [\n\t\t{\n\t\t\t\"tagId\": 0,\n\t\t\t\"name\": \"sample tag\",\n\t\t\t\"color\": \"whale\"\n\t\t},\n\t\t{\n\t\t\t\"tagId\": 2,\n\t\t\t\"name\": \"another tag\",\n\t\t\t\"color\": \"koala\"\n\t\t}\n\t]\n}\n```",
        "operationId": "update-setting",
        "parameters": [
          {
            "name": "settingId",
            "in": "path",
            "description": "The identifier of the Setting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "When the update was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingModel-haljson"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "delete": {
        "tags": [
          "Feature Flags & Settings"
        ],
        "summary": "Delete Flag",
        "description": "This endpoint removes a Feature Flag or Setting from a specified Config, \nidentified by the `configId` parameter.",
        "operationId": "delete-setting",
        "parameters": [
          {
            "name": "settingId",
            "in": "path",
            "description": "The identifier of the Setting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the delete was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/integrationLink/{integrationLinkType}/{key}/details": {
      "get": {
        "tags": [
          "Integration links"
        ],
        "summary": "Get Integration link",
        "description": "",
        "operationId": "get-integration-link-details",
        "parameters": [
          {
            "name": "integrationLinkType",
            "in": "path",
            "description": "The integration link's type.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/IntegrationLinkType"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "The key of the integration link.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the details for the integration link returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationLinkDetailsModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationLinkDetailsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/environments/{environmentId}/settings/{settingId}/integrationLinks/{integrationLinkType}/{key}": {
      "post": {
        "tags": [
          "Integration links"
        ],
        "summary": "Add or update Integration link",
        "description": "",
        "operationId": "add-or-update-integration-link",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "settingId",
            "in": "path",
            "description": "The id of the Setting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "integrationLinkType",
            "in": "path",
            "description": "The integration link's type.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/IntegrationLinkType"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "The key of the integration link.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOrUpdateIntegrationLinkModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOrUpdateIntegrationLinkModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddOrUpdateIntegrationLinkModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When everything is ok, the integration link data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationLinkModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationLinkModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "delete": {
        "tags": [
          "Integration links"
        ],
        "summary": "Delete Integration link",
        "description": "",
        "operationId": "delete-integration-link",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "settingId",
            "in": "path",
            "description": "The id of the Setting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "integrationLinkType",
            "in": "path",
            "description": "The integration's type.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/IntegrationLinkType"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "The key of the integration link.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteIntegrationLinkModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteIntegrationLinkModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/jira/Connect": {
      "post": {
        "tags": [
          "Integration links"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/jira/environments/{environmentId}/settings/{settingId}/integrationLinks/{key}": {
      "post": {
        "tags": [
          "Integration links"
        ],
        "operationId": "jira-add-or-update-integration-link",
        "parameters": [
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "settingId",
            "in": "path",
            "description": "The id of the Setting.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "The key of the integration link.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOrUpdateJiraIntegrationLinkModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOrUpdateJiraIntegrationLinkModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddOrUpdateJiraIntegrationLinkModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When everything is ok, the integration link data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationLinkModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationLinkModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/me": {
      "get": {
        "tags": [
          "Me"
        ],
        "summary": "Get authenticated user details",
        "description": "",
        "operationId": "get-me",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/MeModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/organizations/{organizationId}/members": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "List Organization Members",
        "description": "This endpoint returns the list of Members that belongs \nto the given Organization, identified by the `organizationId` parameter.",
        "operationId": "get-organization-members",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The identifier of the Organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserModel"
                  }
                }
              },
              "application/hal+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/products/{productId}/members": {
      "get": {
        "tags": [
          "Members"
        ],
        "summary": "List Product Members",
        "description": "This endpoint returns the list of Members that belongs \nto the given Product, identified by the `productId` parameter.",
        "operationId": "get-product-members",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberModel"
                  }
                }
              },
              "application/hal+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MemberModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/organizations/{organizationId}/members/{userId}": {
      "delete": {
        "tags": [
          "Members"
        ],
        "summary": "Delete Member from Organization",
        "description": "This endpoint removes a Member identified by the `userId` from the \ngiven Organization identified by the `organizationId` parameter.",
        "operationId": "delete-organization-member",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The identifier of the Organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The identifier of the Member.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the delete was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/products/{productId}/members/{userId}": {
      "delete": {
        "tags": [
          "Members"
        ],
        "summary": "Delete Member from Product",
        "description": "This endpoint removes a Member identified by the `userId` from the \ngiven Product identified by the `productId` parameter.",
        "operationId": "delete-product-member",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The identifier of the Member.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the delete was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/products/{productId}/members/invite": {
      "post": {
        "tags": [
          "Members"
        ],
        "summary": "Invite Member",
        "description": "This endpoint invites a Member into the given Product identified by the `productId` parameter.",
        "operationId": "invite-member",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteMembersRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteMembersRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InviteMembersRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "When the invite was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/organizations": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "List Organizations",
        "description": "This endpoint returns the list of the Organizations that belongs to the user.",
        "operationId": "get-organizations",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationModel"
                  }
                }
              },
              "application/hal+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationModel-haljson"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/products/{productId}/permissions": {
      "get": {
        "tags": [
          "Permission Groups"
        ],
        "summary": "List Permission Groups",
        "description": "This endpoint returns the list of the Permission Groups that belongs to the given Product identified by the\n`productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.",
        "operationId": "get-permission-groups",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionGroupModel"
                  }
                }
              },
              "application/hal+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionGroupModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "post": {
        "tags": [
          "Permission Groups"
        ],
        "summary": "Create Permission Group",
        "description": "This endpoint creates a new Permission Group in a specified Product \nidentified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.",
        "operationId": "create-permission-group",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePermissionGroupRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePermissionGroupRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePermissionGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "When the creation was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionGroupModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionGroupModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/permissions/{permissionGroupId}": {
      "get": {
        "tags": [
          "Permission Groups"
        ],
        "summary": "Get Permission Group",
        "description": "This endpoint returns the metadata of a Permission Group \nidentified by the `permissionGroupId`.",
        "operationId": "get-permission-group",
        "parameters": [
          {
            "name": "permissionGroupId",
            "in": "path",
            "description": "The identifier of the Permission Group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the permission group data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionGroupModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionGroupModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "put": {
        "tags": [
          "Permission Groups"
        ],
        "summary": "Update Permission Group",
        "description": "This endpoint updates a Permission Group identified by the `permissionGroupId` parameter.",
        "operationId": "update-permission-group",
        "parameters": [
          {
            "name": "permissionGroupId",
            "in": "path",
            "description": "The identifier of the Permission Group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePermissionGroupRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePermissionGroupRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePermissionGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionGroupModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionGroupModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "delete": {
        "tags": [
          "Permission Groups"
        ],
        "summary": "Delete Permission Group",
        "description": "This endpoint removes a Permission Group identified by the `permissionGroupId` parameter.",
        "operationId": "delete-permission-group",
        "parameters": [
          {
            "name": "permissionGroupId",
            "in": "path",
            "description": "The identifier of the Permission Group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the delete was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "List Products",
        "description": "This endpoint returns the list of the Products that belongs to the user.",
        "operationId": "get-products",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductModel"
                  }
                }
              },
              "application/hal+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductModel-haljson"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/organizations/{organizationId}/products": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Create Product",
        "description": "This endpoint creates a new Product in a specified Organization \nidentified by the `organizationId` parameter, which can be obtained from the [List Organizations](#operation/get-organizations) endpoint.",
        "operationId": "create-product",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The identifier of the Organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "When the creation was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductModel-haljson"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/products/{productId}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get Product",
        "description": "This endpoint returns the metadata of a Product \nidentified by the `productId`.",
        "operationId": "get-product",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the product data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductModel-haljson"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Update Product",
        "description": "This endpoint updates a Product identified by the `productId` parameter.",
        "operationId": "update-product",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductModel-haljson"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Delete Product",
        "description": "This endpoint removes a Product identified by the `productId` parameter.",
        "operationId": "delete-product",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the delete was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/configs/{configId}/environments/{environmentId}": {
      "get": {
        "tags": [
          "SDK Keys"
        ],
        "summary": "Get SDK Key",
        "description": "This endpoint returns the SDK Key for your Config in a specified Environment.",
        "operationId": "get-sdk-keys",
        "parameters": [
          {
            "name": "configId",
            "in": "path",
            "description": "The identifier of the Config.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "environmentId",
            "in": "path",
            "description": "The identifier of the Environment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SdkKeysModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/SdkKeysModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/products/{productId}/tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "List Tags",
        "description": "This endpoint returns the list of the Tags in a \nspecified Product, identified by the `productId` parameter.",
        "operationId": "get-tags",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Product.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagModel"
                  }
                }
              },
              "application/hal+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagModel-haljson"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Create Tag",
        "description": "This endpoint creates a new Tag in a specified Product \nidentified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.",
        "operationId": "create-tag",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The identifier of the Organization.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTagModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTagModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTagModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "When the creation was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel-haljson"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/tags/{tagId}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Get Tag",
        "description": "This endpoint returns the metadata of a Tag \nidentified by the `tagId`.",
        "operationId": "get-tag",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "The identifier of the Tag.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the tag data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel-haljson"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "put": {
        "tags": [
          "Tags"
        ],
        "summary": "Update Tag",
        "description": "This endpoint updates a Tag identified by the `tagId` parameter.",
        "operationId": "update-tag",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "The identifier of the Tag.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTagModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTagModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTagModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel"
                }
              },
              "application/hal+json": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel-haljson"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Delete Tag",
        "description": "This endpoint deletes a Tag identified by the `tagId` parameter. To remove a Tag from a Feature Flag or Setting use the [Update Flag](#operation/update-setting) endpoint.",
        "operationId": "delete-tag",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "The identifier of the Tag.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the delete was successful."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    },
    "/v1/tags/{tagId}/settings": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "List Settings by Tag",
        "description": "This endpoint returns the list of the Settings that \nhas the specified Tag, identified by the `tagId` parameter.",
        "operationId": "get-settings-by-tag",
        "parameters": [
          {
            "name": "tagId",
            "in": "path",
            "description": "The identifier of the Tag.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "When everything is ok, the settings data returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingModel"
                  }
                }
              },
              "application/hal+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingModel-haljson"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Not found."
          },
          "401": {
            "description": "Unauthorized. In case of the Public Management API credentials are invalid."
          },
          "429": {
            "description": "Too many requests. In case of the request rate exceeds the rate limits."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccessType": {
        "enum": [
          "readOnly",
          "full",
          "custom"
        ],
        "type": "string"
      },
      "AddOrUpdateIntegrationLinkModel": {
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "url": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddOrUpdateJiraIntegrationLinkModel": {
        "required": [
          "clientKey",
          "jiraJwtToken"
        ],
        "type": "object",
        "properties": {
          "jiraJwtToken": {
            "maxLength": 15000,
            "minLength": 0,
            "type": "string"
          },
          "clientKey": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "url": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuditLogItemModel": {
        "type": "object",
        "properties": {
          "auditLogId": {
            "type": "integer",
            "format": "int64"
          },
          "auditLogDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "auditLogType": {
            "type": "string",
            "nullable": true
          },
          "userEmail": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "where": {
            "type": "string",
            "nullable": true
          },
          "why": {
            "type": "string",
            "nullable": true
          },
          "actionTarget": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuditLogType": {
        "enum": [
          "productCreated",
          "productChanged",
          "productOwnershipTransferred",
          "productDeleted",
          "teamMemberInvited",
          "teamMemberInvitationRevoked",
          "teamMemberJoined",
          "teamMemberPermissionGroupChanged",
          "teamMemberRemoved",
          "teamMemberLeft",
          "teamMemberInvitationChanged",
          "teamMemberInvitationResent",
          "teamMemberInvitationRejected",
          "configCreated",
          "configChanged",
          "configDeleted",
          "environmentCreated",
          "environmentChanged",
          "environmentDeleted",
          "settingCreated",
          "settingChanged",
          "settingDeleted",
          "settingValueChanged",
          "webHookCreated",
          "webHookChanged",
          "webHookDeleted",
          "subscriptionChanged",
          "permissionGroupCreated",
          "permissionGroupChanged",
          "permissionGroupDeleted",
          "permissionGroupDefault",
          "apiKeyAdded",
          "apiKeyRemoved",
          "integrationAdded",
          "integrationChanged",
          "integrationRemoved",
          "apiKeyConnected",
          "integrationLinkAdded",
          "integrationLinkRemoved",
          "organizationAdded",
          "organizationRemoved",
          "organizationChanged",
          "organizationSubscriptionTypeChanged",
          "organizationAdminAdded",
          "organizationAdminChanged",
          "organizationAdminRemoved",
          "organizationAdminLeft",
          "organizationAdminDisabled2FA",
          "tagAdded",
          "tagChanged",
          "tagRemoved",
          "settingTagAdded",
          "settingTagRemoved",
          "publicApiAccessTokenAdded",
          "publicApiAccessTokenRemoved",
          "domainAdded",
          "domainVerified",
          "domainRemoved",
          "domainSamlConfigured",
          "domainSamlDeleted",
          "autoProvisioningConfigurationChanged",
          "organizationMemberJoined",
          "organizationMemberProductJoinRequested",
          "organizationMemberProductJoinRequestRejected",
          "organizationMemberProductJoinRequestApproved",
          "codeReferencesUploaded",
          "codeReferenceDeleted",
          "codeReferenceStaleBrancheDeleted"
        ],
        "type": "string"
      },
      "ConfigModel": {
        "type": "object",
        "properties": {
          "product": {
            "$ref": "#/components/schemas/ProductModel"
          },
          "configId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConfigModel-haljson": {
        "type": "object",
        "properties": {
          "_embedded": {
            "type": "object",
            "properties": {
              "product": {
                "type": "object",
                "properties": {
                  "_embedded": {
                    "type": "object",
                    "properties": {
                      "organization": {
                        "type": "object",
                        "properties": {
                          "organizationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "name": {
                            "type": "string",
                            "nullable": true
                          },
                          "_links": {
                            "type": "object",
                            "properties": {
                              "products": {
                                "type": "string"
                              },
                              "members": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "productId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string",
                    "nullable": true
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "_links": {
                    "type": "object",
                    "properties": {
                      "self": {
                        "type": "string"
                      },
                      "configs": {
                        "type": "string"
                      },
                      "environments": {
                        "type": "string"
                      },
                      "tags": {
                        "type": "string"
                      },
                      "permission-groups": {
                        "type": "string"
                      },
                      "members": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "configId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              },
              "settings": {
                "type": "string"
              }
            }
          }
        }
      },
      "ConfigSettingValueModel": {
        "type": "object",
        "properties": {
          "setting": {
            "$ref": "#/components/schemas/SettingDataModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastUpdaterUserEmail": {
            "type": "string",
            "nullable": true
          },
          "lastUpdaterUserFullName": {
            "type": "string",
            "nullable": true
          },
          "integrationLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IntegrationLinkModel"
            },
            "nullable": true
          },
          "settingTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SettingTagModel"
            },
            "nullable": true
          },
          "rolloutRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RolloutRuleModel"
            },
            "description": "The targeting rule collection.",
            "nullable": true
          },
          "rolloutPercentageItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RolloutPercentageItemModel"
            },
            "description": "The percentage rule collection.",
            "nullable": true
          },
          "value": {
            "description": "The value to serve. It must respect the setting type.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConfigSettingValuesModel": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/ConfigModel"
          },
          "environment": {
            "$ref": "#/components/schemas/EnvironmentModel"
          },
          "readOnly": {
            "type": "boolean"
          },
          "settingValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigSettingValueModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConnectRequest": {
        "required": [
          "clientKey",
          "jiraJwtToken"
        ],
        "type": "object",
        "properties": {
          "clientKey": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "jiraJwtToken": {
            "maxLength": 15000,
            "minLength": 0,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateConfigRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateEnvironmentModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "color": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreatePermissionGroupRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "canManageMembers": {
            "type": "boolean"
          },
          "canCreateOrUpdateConfig": {
            "type": "boolean"
          },
          "canDeleteConfig": {
            "type": "boolean"
          },
          "canCreateOrUpdateEnvironment": {
            "type": "boolean"
          },
          "canDeleteEnvironment": {
            "type": "boolean"
          },
          "canCreateOrUpdateSetting": {
            "type": "boolean"
          },
          "canTagSetting": {
            "type": "boolean"
          },
          "canDeleteSetting": {
            "type": "boolean"
          },
          "canCreateOrUpdateTag": {
            "type": "boolean"
          },
          "canDeleteTag": {
            "type": "boolean"
          },
          "canManageWebhook": {
            "type": "boolean"
          },
          "canUseExportImport": {
            "type": "boolean"
          },
          "canManageProductPreferences": {
            "type": "boolean"
          },
          "canManageIntegrations": {
            "type": "boolean"
          },
          "canViewSdkKey": {
            "type": "boolean"
          },
          "canRotateSdkKey": {
            "type": "boolean"
          },
          "canViewProductStatistics": {
            "type": "boolean"
          },
          "canViewProductAuditLog": {
            "type": "boolean"
          },
          "accessType": {
            "$ref": "#/components/schemas/AccessType"
          },
          "newEnvironmentAccessType": {
            "$ref": "#/components/schemas/EnvironmentAccessType"
          },
          "environmentAccesses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentAccessModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateProductRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateSettingModel": {
        "required": [
          "key",
          "name",
          "settingType"
        ],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^[a-zA-Z]+[a-zA-Z0-9_]*",
            "type": "string",
            "description": "The key of the setting."
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The name of the setting, shown on the Dashboard UI."
          },
          "settingType": {
            "$ref": "#/components/schemas/SettingType"
          },
          "hint": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "A short description for the setting, shown on the Dashboard UI.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The IDs of the tags which are attached to the setting.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateTagModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "color": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeleteIntegrationLinkModel": {
        "type": "object",
        "properties": {
          "hasRemainingIntegrationLink": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EnvironmentAccessModel": {
        "type": "object",
        "properties": {
          "environmentId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "environmentAccessType": {
            "$ref": "#/components/schemas/EnvironmentAccessType"
          }
        },
        "additionalProperties": false
      },
      "EnvironmentAccessType": {
        "enum": [
          "full",
          "readOnly",
          "none"
        ],
        "type": "string"
      },
      "EnvironmentModel": {
        "type": "object",
        "properties": {
          "product": {
            "$ref": "#/components/schemas/ProductModel"
          },
          "environmentId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EnvironmentModel-haljson": {
        "type": "object",
        "properties": {
          "_embedded": {
            "type": "object",
            "properties": {
              "product": {
                "type": "object",
                "properties": {
                  "_embedded": {
                    "type": "object",
                    "properties": {
                      "organization": {
                        "type": "object",
                        "properties": {
                          "organizationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "name": {
                            "type": "string",
                            "nullable": true
                          },
                          "_links": {
                            "type": "object",
                            "properties": {
                              "products": {
                                "type": "string"
                              },
                              "members": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "productId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string",
                    "nullable": true
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "_links": {
                    "type": "object",
                    "properties": {
                      "self": {
                        "type": "string"
                      },
                      "configs": {
                        "type": "string"
                      },
                      "environments": {
                        "type": "string"
                      },
                      "tags": {
                        "type": "string"
                      },
                      "permission-groups": {
                        "type": "string"
                      },
                      "members": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "environmentId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "IntegrationLinkDetail": {
        "type": "object",
        "properties": {
          "product": {
            "$ref": "#/components/schemas/ProductModel"
          },
          "config": {
            "$ref": "#/components/schemas/ConfigModel"
          },
          "environment": {
            "$ref": "#/components/schemas/EnvironmentModel"
          },
          "setting": {
            "$ref": "#/components/schemas/SettingDataModel"
          },
          "readOnly": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IntegrationLinkDetailsModel": {
        "type": "object",
        "properties": {
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IntegrationLinkDetail"
            },
            "nullable": true,
            "readOnly": true
          },
          "allIntegrationLinkCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "IntegrationLinkModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "integrationLinkType": {
            "$ref": "#/components/schemas/IntegrationLinkType"
          },
          "url": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IntegrationLinkType": {
        "enum": [
          "trello",
          "jira"
        ],
        "type": "string"
      },
      "InviteMembersRequest": {
        "required": [
          "emails",
          "permissionGroupId"
        ],
        "type": "object",
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "permissionGroupId": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "MemberModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "permissionGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MeModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Operation": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationModel": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrganizationModel-haljson": {
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "_links": {
            "type": "object",
            "properties": {
              "products": {
                "type": "string"
              },
              "members": {
                "type": "string"
              }
            }
          }
        }
      },
      "PermissionGroupModel": {
        "type": "object",
        "properties": {
          "permissionGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "canManageMembers": {
            "type": "boolean"
          },
          "canCreateOrUpdateConfig": {
            "type": "boolean",
            "readOnly": true
          },
          "canDeleteConfig": {
            "type": "boolean",
            "readOnly": true
          },
          "canCreateOrUpdateEnvironment": {
            "type": "boolean",
            "readOnly": true
          },
          "canDeleteEnvironment": {
            "type": "boolean",
            "readOnly": true
          },
          "canCreateOrUpdateSetting": {
            "type": "boolean",
            "readOnly": true
          },
          "canTagSetting": {
            "type": "boolean",
            "readOnly": true
          },
          "canDeleteSetting": {
            "type": "boolean",
            "readOnly": true
          },
          "canCreateOrUpdateTag": {
            "type": "boolean",
            "readOnly": true
          },
          "canDeleteTag": {
            "type": "boolean",
            "readOnly": true
          },
          "canManageWebhook": {
            "type": "boolean",
            "readOnly": true
          },
          "canUseExportImport": {
            "type": "boolean",
            "readOnly": true
          },
          "canManageProductPreferences": {
            "type": "boolean",
            "readOnly": true
          },
          "canManageIntegrations": {
            "type": "boolean",
            "readOnly": true
          },
          "canViewSdkKey": {
            "type": "boolean",
            "readOnly": true
          },
          "canRotateSdkKey": {
            "type": "boolean",
            "readOnly": true
          },
          "accessType": {
            "$ref": "#/components/schemas/AccessType"
          },
          "newEnvironmentAccessType": {
            "$ref": "#/components/schemas/EnvironmentAccessType"
          },
          "environmentAccesses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentAccessModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductModel": {
        "type": "object",
        "properties": {
          "organization": {
            "$ref": "#/components/schemas/OrganizationModel"
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductModel-haljson": {
        "type": "object",
        "properties": {
          "_embedded": {
            "type": "object",
            "properties": {
              "organization": {
                "type": "object",
                "properties": {
                  "organizationId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string",
                    "nullable": true
                  },
                  "_links": {
                    "type": "object",
                    "properties": {
                      "products": {
                        "type": "string"
                      },
                      "members": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              },
              "configs": {
                "type": "string"
              },
              "environments": {
                "type": "string"
              },
              "tags": {
                "type": "string"
              },
              "permission-groups": {
                "type": "string"
              },
              "members": {
                "type": "string"
              }
            }
          }
        }
      },
      "RolloutPercentageItemModel": {
        "required": [
          "percentage"
        ],
        "type": "object",
        "properties": {
          "percentage": {
            "type": "integer",
            "description": "The percentage value for the rule.",
            "format": "int64"
          },
          "value": {
            "description": "The value to serve when the user falls in the percentage rule. It must respect the setting type.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RolloutRuleComparator": {
        "enum": [
          "isOneOf",
          "isNotOneOf",
          "contains",
          "doesNotContain",
          "semVerIsOneOf",
          "semVerIsNotOneOf",
          "semVerLess",
          "semVerLessOrEquals",
          "semVerGreater",
          "semVerGreaterOrEquals",
          "numberEquals",
          "numberDoesNotEqual",
          "numberLess",
          "numberLessOrEquals",
          "numberGreater",
          "numberGreaterOrEquals",
          "sensitiveIsOneOf",
          "sensitiveIsNotOneOf"
        ],
        "type": "string"
      },
      "RolloutRuleModel": {
        "required": [
          "comparisonAttribute",
          "comparisonValue"
        ],
        "type": "object",
        "properties": {
          "comparisonAttribute": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The user attribute to compare."
          },
          "comparator": {
            "$ref": "#/components/schemas/RolloutRuleComparator"
          },
          "comparisonValue": {
            "maxLength": 65535,
            "minLength": 0,
            "type": "string",
            "description": "The value to compare against."
          },
          "value": {
            "description": "The value to serve when the comparison matches. It must respect the setting type.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SdkKeysModel": {
        "type": "object",
        "properties": {
          "primary": {
            "type": "string",
            "nullable": true
          },
          "secondary": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SettingDataModel": {
        "type": "object",
        "properties": {
          "settingId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "key": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "hint": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "settingType": {
            "$ref": "#/components/schemas/SettingType"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "creatorEmail": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "creatorFullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ownerFullName": {
            "type": "string",
            "nullable": true
          },
          "ownerEmail": {
            "type": "string",
            "nullable": true
          },
          "isWatching": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SettingModel": {
        "type": "object",
        "properties": {
          "settingId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "key": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "hint": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "settingType": {
            "$ref": "#/components/schemas/SettingType"
          },
          "ownerUserEmail": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ownerUserFullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "configId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "configName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SettingModel-haljson": {
        "type": "object",
        "properties": {
          "settingId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "key": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "hint": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "settingType": {
            "$ref": "#/components/schemas/SettingType"
          },
          "ownerUserEmail": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ownerUserFullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "configId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "configName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "_embedded": {
            "type": "object",
            "properties": {
              "tags": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "_embedded": {
                      "type": "object",
                      "properties": {
                        "product": {
                          "type": "object",
                          "properties": {
                            "_embedded": {
                              "type": "object",
                              "properties": {
                                "organization": {
                                  "type": "object",
                                  "properties": {
                                    "organizationId": {
                                      "type": "string",
                                      "format": "uuid"
                                    },
                                    "name": {
                                      "type": "string",
                                      "nullable": true
                                    },
                                    "_links": {
                                      "type": "object",
                                      "properties": {
                                        "products": {
                                          "type": "string"
                                        },
                                        "members": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "productId": {
                              "type": "string",
                              "format": "uuid"
                            },
                            "name": {
                              "type": "string",
                              "nullable": true
                            },
                            "description": {
                              "type": "string",
                              "nullable": true
                            },
                            "_links": {
                              "type": "object",
                              "properties": {
                                "self": {
                                  "type": "string"
                                },
                                "configs": {
                                  "type": "string"
                                },
                                "environments": {
                                  "type": "string"
                                },
                                "tags": {
                                  "type": "string"
                                },
                                "permission-groups": {
                                  "type": "string"
                                },
                                "members": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "tagId": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string",
                      "nullable": true
                    },
                    "color": {
                      "type": "string",
                      "nullable": true
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "self": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "SettingTagModel": {
        "type": "object",
        "properties": {
          "settingTagId": {
            "type": "integer",
            "format": "int64"
          },
          "tagId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SettingType": {
        "enum": [
          "boolean",
          "string",
          "int",
          "double"
        ],
        "type": "string"
      },
      "SettingValueModel": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/ConfigModel"
          },
          "environment": {
            "$ref": "#/components/schemas/EnvironmentModel"
          },
          "readOnly": {
            "type": "boolean"
          },
          "setting": {
            "$ref": "#/components/schemas/SettingDataModel"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastUpdaterUserEmail": {
            "type": "string",
            "nullable": true
          },
          "lastUpdaterUserFullName": {
            "type": "string",
            "nullable": true
          },
          "integrationLinks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IntegrationLinkModel"
            },
            "nullable": true
          },
          "settingTags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SettingTagModel"
            },
            "nullable": true
          },
          "rolloutRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RolloutRuleModel"
            },
            "description": "The targeting rule collection.",
            "nullable": true
          },
          "rolloutPercentageItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RolloutPercentageItemModel"
            },
            "description": "The percentage rule collection.",
            "nullable": true
          },
          "value": {
            "description": "The value to serve. It must respect the setting type.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SettingValueModel-haljson": {
        "type": "object",
        "properties": {
          "readOnly": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastUpdaterUserEmail": {
            "type": "string",
            "nullable": true
          },
          "lastUpdaterUserFullName": {
            "type": "string",
            "nullable": true
          },
          "_embedded": {
            "type": "object",
            "properties": {
              "setting": {
                "type": "object",
                "properties": {
                  "settingId": {
                    "type": "integer",
                    "format": "int32",
                    "readOnly": true
                  },
                  "key": {
                    "type": "string",
                    "nullable": true,
                    "readOnly": true
                  },
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "readOnly": true
                  },
                  "hint": {
                    "type": "string",
                    "nullable": true,
                    "readOnly": true
                  },
                  "settingType": {
                    "$ref": "#/components/schemas/SettingType"
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "nullable": true,
                    "readOnly": true
                  },
                  "creatorEmail": {
                    "type": "string",
                    "nullable": true,
                    "readOnly": true
                  },
                  "creatorFullName": {
                    "type": "string",
                    "nullable": true,
                    "readOnly": true
                  },
                  "ownerFullName": {
                    "type": "string",
                    "nullable": true
                  },
                  "ownerEmail": {
                    "type": "string",
                    "nullable": true
                  },
                  "isWatching": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              },
              "config": {
                "type": "object",
                "properties": {
                  "_embedded": {
                    "type": "object",
                    "properties": {
                      "product": {
                        "type": "object",
                        "properties": {
                          "_embedded": {
                            "type": "object",
                            "properties": {
                              "organization": {
                                "type": "object",
                                "properties": {
                                  "organizationId": {
                                    "type": "string",
                                    "format": "uuid"
                                  },
                                  "name": {
                                    "type": "string",
                                    "nullable": true
                                  },
                                  "_links": {
                                    "type": "object",
                                    "properties": {
                                      "products": {
                                        "type": "string"
                                      },
                                      "members": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "productId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "name": {
                            "type": "string",
                            "nullable": true
                          },
                          "description": {
                            "type": "string",
                            "nullable": true
                          },
                          "_links": {
                            "type": "object",
                            "properties": {
                              "self": {
                                "type": "string"
                              },
                              "configs": {
                                "type": "string"
                              },
                              "environments": {
                                "type": "string"
                              },
                              "tags": {
                                "type": "string"
                              },
                              "permission-groups": {
                                "type": "string"
                              },
                              "members": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "configId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string",
                    "nullable": true
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "_links": {
                    "type": "object",
                    "properties": {
                      "self": {
                        "type": "string"
                      },
                      "settings": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "environment": {
                "type": "object",
                "properties": {
                  "_embedded": {
                    "type": "object",
                    "properties": {
                      "product": {
                        "type": "object",
                        "properties": {
                          "_embedded": {
                            "type": "object",
                            "properties": {
                              "organization": {
                                "type": "object",
                                "properties": {
                                  "organizationId": {
                                    "type": "string",
                                    "format": "uuid"
                                  },
                                  "name": {
                                    "type": "string",
                                    "nullable": true
                                  },
                                  "_links": {
                                    "type": "object",
                                    "properties": {
                                      "products": {
                                        "type": "string"
                                      },
                                      "members": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "productId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "name": {
                            "type": "string",
                            "nullable": true
                          },
                          "description": {
                            "type": "string",
                            "nullable": true
                          },
                          "_links": {
                            "type": "object",
                            "properties": {
                              "self": {
                                "type": "string"
                              },
                              "configs": {
                                "type": "string"
                              },
                              "environments": {
                                "type": "string"
                              },
                              "tags": {
                                "type": "string"
                              },
                              "permission-groups": {
                                "type": "string"
                              },
                              "members": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "environmentId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string",
                    "nullable": true
                  },
                  "color": {
                    "type": "string",
                    "nullable": true
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "_links": {
                    "type": "object",
                    "properties": {
                      "self": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "integrationLinks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "nullable": true
                    },
                    "description": {
                      "type": "string",
                      "nullable": true
                    },
                    "integrationLinkType": {
                      "$ref": "#/components/schemas/IntegrationLinkType"
                    },
                    "url": {
                      "type": "string",
                      "nullable": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "settingTags": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "settingTagId": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "tagId": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string",
                      "nullable": true
                    },
                    "color": {
                      "type": "string",
                      "nullable": true
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          },
          "rolloutRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RolloutRuleModel"
            },
            "description": "The targeting rule collection.",
            "nullable": true
          },
          "rolloutPercentageItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RolloutPercentageItemModel"
            },
            "description": "The percentage rule collection.",
            "nullable": true
          },
          "value": {
            "description": "The value to serve. It must respect the setting type.",
            "nullable": true
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "TagModel": {
        "type": "object",
        "properties": {
          "product": {
            "$ref": "#/components/schemas/ProductModel"
          },
          "tagId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TagModel-haljson": {
        "type": "object",
        "properties": {
          "_embedded": {
            "type": "object",
            "properties": {
              "product": {
                "type": "object",
                "properties": {
                  "_embedded": {
                    "type": "object",
                    "properties": {
                      "organization": {
                        "type": "object",
                        "properties": {
                          "organizationId": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "name": {
                            "type": "string",
                            "nullable": true
                          },
                          "_links": {
                            "type": "object",
                            "properties": {
                              "products": {
                                "type": "string"
                              },
                              "members": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "productId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string",
                    "nullable": true
                  },
                  "description": {
                    "type": "string",
                    "nullable": true
                  },
                  "_links": {
                    "type": "object",
                    "properties": {
                      "self": {
                        "type": "string"
                      },
                      "configs": {
                        "type": "string"
                      },
                      "environments": {
                        "type": "string"
                      },
                      "tags": {
                        "type": "string"
                      },
                      "permission-groups": {
                        "type": "string"
                      },
                      "members": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "tagId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "_links": {
            "type": "object",
            "properties": {
              "self": {
                "type": "string"
              }
            }
          }
        }
      },
      "UpdateConfigRequest": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateEnvironmentModel": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "color": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatePermissionGroupRequest": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "canManageMembers": {
            "type": "boolean",
            "nullable": true
          },
          "canCreateOrUpdateConfig": {
            "type": "boolean",
            "nullable": true
          },
          "canDeleteConfig": {
            "type": "boolean",
            "nullable": true
          },
          "canCreateOrUpdateEnvironment": {
            "type": "boolean",
            "nullable": true
          },
          "canDeleteEnvironment": {
            "type": "boolean",
            "nullable": true
          },
          "canCreateOrUpdateSetting": {
            "type": "boolean",
            "nullable": true
          },
          "canTagSetting": {
            "type": "boolean",
            "nullable": true
          },
          "canDeleteSetting": {
            "type": "boolean",
            "nullable": true
          },
          "canCreateOrUpdateTag": {
            "type": "boolean",
            "nullable": true
          },
          "canDeleteTag": {
            "type": "boolean",
            "nullable": true
          },
          "canManageWebhook": {
            "type": "boolean",
            "nullable": true
          },
          "canUseExportImport": {
            "type": "boolean",
            "nullable": true
          },
          "canManageProductPreferences": {
            "type": "boolean",
            "nullable": true
          },
          "canManageIntegrations": {
            "type": "boolean",
            "nullable": true
          },
          "canViewSdkKey": {
            "type": "boolean",
            "nullable": true
          },
          "canRotateSdkKey": {
            "type": "boolean",
            "nullable": true
          },
          "canViewProductStatistics": {
            "type": "boolean",
            "nullable": true
          },
          "canViewProductAuditLog": {
            "type": "boolean",
            "nullable": true
          },
          "accessType": {
            "$ref": "#/components/schemas/AccessType"
          },
          "newEnvironmentAccessType": {
            "$ref": "#/components/schemas/EnvironmentAccessType"
          },
          "environmentAccesses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentAccessModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateProductRequest": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateSettingValueModel": {
        "type": "object",
        "properties": {
          "rolloutRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RolloutRuleModel"
            },
            "description": "The targeting rule collection.",
            "nullable": true
          },
          "rolloutPercentageItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RolloutPercentageItemModel"
            },
            "description": "The percentage rule collection.",
            "nullable": true
          },
          "value": {
            "description": "The value to serve. It must respect the setting type.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateTagModel": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "color": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Basic": {
        "type": "http",
        "description": "To authenticate with the API you have to fill the `Authorization` HTTP request header with your Public API credentials.\n\nYou can create your credentials on the <a target=\"_blank\" href=\"https://app.configcat.com/my-account/public-api-credentials\">Public API credentials management page</a>.",
        "scheme": "basic"
      }
    }
  },
  "security": [
    {
      "Basic": [ ]
    }
  ],
  "tags": [
    {
      "name": "Feature Flag & Setting values using SDK Key",
      "description": "With these endpoints you can control how your existing Feature Flags and Settings should serve their values. \nYou can turn Feature Flags on or off, update Setting values and also add, remove or change the order of Percentage and Targeting Rules.\n\nThese endpoints are determining the Environment and Config by the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://app.configcat.com/sdkkey\">SDK key</a> passed in\nthe `X-CONFIGCAT-SDKKEY` request header. To identify the desired Feature Flag or Setting to change, \nyou can use either its `settingId` or `key` attribute. You can get those attributes \nfrom the [Feature Flag & Setting](#tag/Feature-Flags-and-Settings) endpoints."
    },
    {
      "name": "Feature Flag & Setting values",
      "description": "With these endpoints you can control how your existing Feature Flags and Settings should serve their values. \nYou can turn Feature Flags on or off, update Setting values and also add, remove or reorder Percentage and Targeting Rules.\n\nTo determine which Feature Flag or Setting you want to work with you have to pass its `settingId`. It can be\nobtained from the [Feature Flag & Setting](#tag/Feature-Flags-and-Settings) endpoints.\n\nYou also have to specify in which Environment you want to change the served value configuration by its\n`environmentId` which can be obtained from the [List Environments](#operation/get-environments) endpoint."
    },
    {
      "name": "Feature Flags & Settings",
      "description": "With these endpoints you can manage your Feature Flags or Settings within a Config. \nHowever you can't use them for manipulating the values of your Feature Flags and Settings,\nto do that please visit the [Feature Flag & Setting values using SDK Key](#tag/Feature-Flag-and-Setting-values-using-SDK-Key)\nand [Feature Flag & Setting values](#tag/Feature-Flag-and-Setting-values) sections of the API.\n\nFor using these endpoints, first you have to select which Config you want to work with by its `configId` \nwhich can be obtained from the [List Configs](#operation/get-configs) endpoint. \nThen you can use it to create new Feature Flags or to get information about existing ones.\n\nThen you can obtain the `settingId` or `key` of your desired Feature Flag or Setting \nto use them for further operations in this API. \n\n<a href=\"https://configcat.com/docs/main-concepts/#setting\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about the concept of Settings."
    },
    {
      "name": "Organizations",
      "description": "With these endpoints you can get useful information about your Organizations.\nThis also can be used to manage your [Products](#tag/Products).\n\n<a href=\"https://configcat.com/docs/organization/\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about the Organizations."
    },
    {
      "name": "Members",
      "description": "With these endpoints you can manage your Members.\n\n<a href=\"https://configcat.com/docs/advanced/team-collaboration\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about Team Collaboration."
    },
    {
      "name": "Permission Groups",
      "description": "With these endpoints you can manage your Permission Groups.\n\n<a href=\"https://configcat.com/docs/advanced/team-collaboration#permissions--groups\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about Permissions."
    },
    {
      "name": "Products",
      "description": "With these endpoints you can manage your Products.\nThis also can be used to manage [Environments](#tag/Environments), [Configs](#tag/Configs), [Tags](#tag/Tags) and [Permission Groups](#tag/Permission-Groups) through this API.\n\n<a href=\"https://configcat.com/docs/main-concepts/#product\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about the concept of Products."
    },
    {
      "name": "Configs",
      "description": "With these endpoints you can manage your Configs.\nThis also can be used to manage [Feature Flags and Settings](#tag/Feature-Flags-and-Settings) and their \n[served values](#tag/Feature-Flag-and-Setting-values) through this API.\n\n<a href=\"https://configcat.com/docs/main-concepts/#config\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about the concept of Configs."
    },
    {
      "name": "Environments",
      "description": "With these endpoints you can update existing Environments or add new ones into your selected [Product](#tag/Products). \n\n<a href=\"https://configcat.com/docs/main-concepts/#environment\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about the concept of Environments."
    },
    {
      "name": "SDK Keys",
      "description": "With these endpoints you can manage your SDK Keys."
    },
    {
      "name": "Tags",
      "description": "With these endpoints you can manage Tags. Tags are stored under a Product. You can  and add a Tag to a Feature Flag or Setting using the [Update Flag](#operation/update-setting) endpoint."
    },
    {
      "name": "Audit logs",
      "description": "Access audit log entries."
    },
    {
      "name": "Me",
      "description": "Information about the current user."
    }
  ],
  "x-tagGroups": [
    {
      "name": "Feature Flag values",
      "tags": [
        "Feature Flag & Setting values using SDK Key",
        "Feature Flag & Setting values"
      ]
    },
    {
      "name": "Feature Flag metadata",
      "tags": [
        "Feature Flags & Settings",
        "Tags"
      ]
    },
    {
      "name": "General",
      "tags": [
        "Products",
        "Configs",
        "Environments",
        "SDK Keys"
      ]
    },
    {
      "name": "Membership",
      "tags": [
        "Organizations",
        "Members",
        "Permission Groups"
      ]
    },
    {
      "name": "Diagnostics",
      "tags": [
        "Audit logs",
        "Me"
      ]
    }
  ]
}
