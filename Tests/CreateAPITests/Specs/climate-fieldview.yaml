openapi: 3.0.0
info:
  title: Climate FieldView Platform APIs
  description: |
    **Last Modified**: Thu Oct 21 13:34:10 PDT 2021


    All endpoints are only accessible via HTTPS.

    * All API endpoints are located at `https://platform.climate.com` (e.g.
    `https://platform.climate.com/v4/fields`).

    * The authorization token endpoint is located at
    `https://api.climate.com/api/oauth/token`.

    ## Troubleshooting

    `X-Http-Request-Id` response header will be returned on every call,
    successful or not. If you experience an issue with our api and need
    to contact technical support, please supply the value of the `X-Http-Request-Id`
    header along with an approximate time of when the request was made.

    ## Request Limits

    When you’re onboarded to Climate’s API platform, your `x-api-key` is assigned a custom usage plan. Usage plans are unique to each partner and have the following key attributes: 
    
    1. Throttling information
        * burstLimit: Maximum rate limit over a period ranging from 1 second to a few seconds
        * rateLimit: A steady-state rate limit
    
    2. Quota information
        * Limit: The maximum number of requests that can be made in a given month
    
    When the request rate threshold is exceeded, a `429` response code is returned. Optionally, the [`Retry-After`](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.37) header may be returned: 
    
    Following are examples of rate limit errors:
    
    1. Rate limit exceeded:

    <br>HTTP/1.1 429 
    <br>Content-Type: application/json
    <br>Content-Length: 32

       {"message":"Too Many Requests"}

    2. Quota exhausted:
    <br>HTTP/1.1 429 
    <br>Content-Type: application/json
    <br>Content-Length: 29

        {"message":"Limit Exceeded"}

    ## Pagination

    Pagination is performed via headers. Any request which returns a `"results"`
    array may be paginated. The following figure shows how query results are laid out with
    X-Limit=4 and no filter applied.

    <img style="width:70%;height:auto;" src="https://s3-us-west-2.amazonaws.com/climate-com/images/svg_upload_tests/paging.png">

    * If there are no results, a response code of `304` will be returned.

    * If the response is the last set of results, a response code of `200` or
    `206` will be returned.

    * If there are more results, a response code of `206` will be returned.

    * If `X-Next-Token` is provided in the request headers but the token has
    expired, a response code of `409` will be returned. This is only applicable
    for some endpoints; see specific endpoint documentation below.

    #### X-Limit

    The page size can be controlled with the `X-Limit` header. Valid values are
    `1-100` and defaults to `100`.

    #### X-Next-Token

    If the results are paginated, a response header of `X-Next-Token` will be
    returned. Use the associated value in the subsequent request (via the `X-Next-Token`
    request header) to retrieve the next page. The following sequence diagram shows how to
    use `X-Next-Token` to fetch all the records.

    <img src="https://s3-us-west-2.amazonaws.com/climate-com/images/svg_upload_tests/x-next-token.svg">


    ## Chunked Uploads

    Uploads larger than `5MiB` (`5242880 bytes`) must be done in `5MiB` chunks
    (with the exception of the final chunk). Each chunk request MUST contain a
    `Content-Range` header specifying the portion of the upload, and a `Content-Type`
    header specifying binary content type (`application/octet-stream`). Range
    uploads must be contiguous. The maximum upload size is capped at `500MiB` (`524288000 bytes`).

    ## Chunked Downloads

    Downloads larger than `5MiB` (`5242880 bytes`) must be done in `1-5MiB`
    chunks (with the exception of the final chunk, which may be less than `1MiB`).
    Each chunk request MUST contain a `Range` header specifying the requested portion of the download,
    and an `Accept` header specifying binary and json content types  (`application/octet-stream,application/json`)
    or all content types (`*/*`).

    ## Drivers

    If you need drivers to process agronomic data, download the ADAPT plugin below. We only support the plugin in the Windows environment, minimum is Windows 7 SP1.

    For asPlanted, asHarvested and asApplied data:
    * [ADAPT Plugin](https://dev.fieldview.com/drivers/ClimateADAPTPlugin_latest.exe)
    <br>Release notes can be found [here](https://dev.fieldview.com/drivers/adapt-release-notes.txt).
    <br>Download and use of the ADAPT plugin means that you agree to the EULA for use of the ADAPT plugin. 
    <br>Please review the [EULA](https://dev.fieldview.com/EULA/ADAPT%20Plugin%20EULA-06-19.pdf) (last updated on June 6th, 2019) before download and use of the ADAPT plugin.
    <br>For more information, please refer to:
      * [ADAPT Resources](https://adaptframework.org/)
      * [ADAPT Overview](https://aggateway.atlassian.net/wiki/spaces/ADM/overview)
      * [ADAPT FAQ](https://aggateway.atlassian.net/wiki/spaces/ADM/pages/165942474/ADAPT+Frequently-Asked+Questions+FAQ)
      * [ADAPT Videos](https://adaptframework.org/adapt-videos/)

    ## Sample Test Data

    Sample agronomic data:
    * [asPlanted and asHarvested data](https://dev.fieldview.com/sample-agronomic-data/Planting_Harvesting_data_04_18_2018_21_46_18.zip)
    * [asApplied data set 1](https://dev.fieldview.com/sample-agronomic-data/as-applied-data1.zip)
    * [asApplied data set 2](https://dev.fieldview.com/sample-agronomic-data/as-applied-data2.zip)
    <br>To upload the sample data to your account, please follow the instructions in this [link](https://support.climate.com/kt#/kA02A000000AaxzSAC/en_US).

    Sample soil data:
    * [Sample soil data](https://dev.fieldview.com/sample-soil-data/soil-sample.xml)
    ---
  contact:
    name: Climate FieldView Support
    email: developer@climate.com
  version: 4.0.11
tags:
  - name: Boundaries
    description: Field Boundary data endpoints.
  - name: Fields
    description: Field data endpoints.
  - name: Uploads
    description: General data upload endpoints.
  - name: Layers
    description: General data retrieval endpoints.
  - name: ResourceOwners
    description: Resource Owner data endpoints.
  - name: FarmOrganizations
    description: Farm organization data endpoints.
paths:
  /v4/fields:
    get:
      summary: Retrieve list of Fields
      description: >-
        Retrieve list of **Fields**.
        Filter the results by field name if the `fieldName` query parameter is specified.
      operationId: fetchFields
      tags:
        - Fields
      security:
        - api_key: []
        - oauth2_authorization_code:
            - 'platform'
            - 'fields:read'
      parameters:
        - $ref: '#/components/parameters/X-Next-Token'
        - $ref: '#/components/parameters/X-Limit'
        - $ref: '#/components/parameters/OptionalFieldNamePrefix'
      responses:
        '200':
          $ref: '#/components/responses/FetchFieldsOk'
        '206':
          $ref: '#/components/responses/FetchFieldsPartial'
        '304':
          $ref: '#/components/responses/304'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  '/v4/fields/{fieldId}':
    get:
      summary: Retrieve a specific Field by ID
      description: Retrieve a given **Field** by ID.
      operationId: fetchFieldById
      tags:
        - Fields
      security:
        - api_key: []
        - oauth2_authorization_code:
            - 'platform'
            - 'fields:read'
      parameters:
        - $ref: '#/components/parameters/FieldId'
      responses:
        '200':
          $ref: '#/components/responses/FetchFieldByIdOk'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  '/v4/farmOrganizations/{farmOrganizationType}/{farmOrganizationId}':
    get:
      summary: Retrieve a specific farm organization by organization type and ID
      description: Retrieve a given **farm organization** by organization type and ID.
      operationId: fetchFarmOrganizationByTypeAndId
      tags:
        - FarmOrganizations
      security:
        - api_key: []
        - oauth2_authorization_code:
            - 'farmOrganizations:read'
      parameters:
        - $ref: '#/components/parameters/FarmOrganizationType'
        - $ref: '#/components/parameters/FarmOrganizationId'
      responses:
        '200':
          $ref: '#/components/responses/FetchFarmOrganizationByTypeAndIdOk'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  '/v4/resourceOwners/{resourceOwnerId}':
    get:
      operationId: getResourceOwner
      tags:
        - ResourceOwners
      security:
        - api_key: []
        - oauth2_authorization_code:
            - 'platform'
            - 'resourceOwners:read'
      summary: Retrieve a resource owner by ID
      description: Retrieve a resource owner for the given `resourceOwnerId`.
      parameters:
        - $ref: '#/components/parameters/ResourceOwnerId'
      responses:
        '200':
          $ref: '#/components/responses/FetchResourceOwnerOk'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/v4/boundaries/{boundaryId}':
    get:
      summary: Retrieve a Boundary by ID
      description: Retrieve a **Boundary** by ID.
      operationId: fetchBoundaryById
      tags:
        - Boundaries
      security:
        - api_key: []
        - oauth2_authorization_code:
            - 'platform'
            - 'fields:read'
      parameters:
        - in: path
          required: true
          name: boundaryId
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/FetchBoundaryByIdOk'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v4/boundaries/query:
    post:
      summary: Retrieve Boundaries in batch
      description: Retrieve multiple **Boundaries** (up to 10 per request).
      operationId: fetchBoundaries
      tags:
        - Boundaries
      security:
        - api_key: []
        - oauth2_authorization_code:
            - 'fields:read'
      responses:
        '200':
          $ref: '#/components/responses/FetchBoundariesOk'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoundariesQuery'
  /v4/boundaries:
    post:
      summary: Upload a boundary
      description: >-
        Upload a **Boundary** entry by passing the geometry of the boundary. This will store the boundary but will not create field in Climate FieldView and will not link to an existing field in Climate FieldView.

        This is restricted to callers with **boundaries:write** scope.

        To upload a field boundary for field creation in Climate FieldView, please use **POST /v4/uploads**.

      operationId: uploadBoundary
      tags:
        - Boundaries
      security:
        - api_key: []
        - oauth2_authorization_code:
            - 'boundaries:write'
      responses:
        '200':
          $ref: '#/components/responses/UploadBoundaryOk'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoundaryUpload'
  /v4/uploads:
    post:
      summary: Initiate a new upload
      description: >-
        Step one in uploading a data product. The method will return an
        **Upload** ID which the caller will use in subsequent `PUT` requests.

        The following `contentTypes` may be uploaded:
            <details><summary>__image/vnd.climate.thermal.geotiff__</summary>

            Allows for the upload of a thermal image. The image is a single band geotiff with 64 bit signed floating point values in degrees Celsius. The Coordinate Reference System (CRS) must be UTM with WGS84 datum.

            The following metadata entries are required to be embedded in the geotiff:
              * acquisitionStartDate - ISO8601 date
              * acquisitionEndDate - ISO8601 date
              * isCalibrated - boolean

            The following metadata entries are optional:
              * sourceId - uuid referencing the asset in the partner's system
              * fieldId - uuid referencing a field in the Climate system
              * boundaryId - uuid referencing a boundary in the Climate system
              * brandId - uuid referencing a partner's branding in the Climate system
              * name - name of the layer. The maximum number of characters that will be accepted as input is 20.

            Requires either imagery:write or platform scope.
          </details>
          <details><summary>__image/vnd.climate.ndvi.geotiff__</summary>

            Allows for the upload of a NDVI image. The image is a single band geotiff with 64 bit signed floating point values in the range of -1 to 1 inclusive. The Coordinate Reference System (CRS) must be UTM with WGS84 datum.

            The following metadata entries are required to be embedded in the geotiff:
              * acquisitionStartDate - ISO8601 date
              * acquisitionEndDate - ISO8601 date

            The following metadata entries are optional:
              * sourceId - uuid referencing the asset in the partner's system
              * fieldId - uuid referencing a field in the Climate system
              * boundaryId - uuid referencing a boundary in the Climate system
              * brandId - uuid referencing a partner's branding in the Climate system
              * name - name of the layer. The maximum number of characters that will be accepted as input is 20.

            Requires either imagery:write or platform scope.
          </details>
          <details><summary> __image/vnd.climate.rgb.geotiff__</summary>

            Allows for the upload of a true color image. The image is a multi band geotiff with 24-bit composite values. Each band is 8 bits with values in the range of 0 to 255. The Coordinate Reference System (CRS) must be UTM with WGS84 datum. The geotiff must contain 3 bands in the order Red, Green, Blue.

            The following metadata entries are required to be embedded in the geotiff:
              * acquisitionStartDate - ISO8601 date
              * acquisitionEndDate - ISO8601 date
              * isCalibrated - boolean

            The following metadata entries are optional:
              * sourceId - uuid referencing the asset in the partner's system
              * fieldId - uuid referencing a field in the Climate system
              * boundaryId - uuid referencing a boundary in the Climate system
              * brandId - uuid referencing a partner's branding in the Climate system
              * reflectanceComputeMethod - either TOA or GROUND
              * name - name of the layer. The maximum number of characters that will be accepted as input is 20.

            Requires either imagery:write or platform scope.
          </details>
          <details><summary> __image/vnd.climate.rgb-nir.geotiff__</summary>

            Allows for the upload of a Near Infrared (NIR) image. The Coordinate Reference System (CRS) must be UTM with WGS84 datum.

            The following metadata entries are required to be embedded in the geotiff:
              * acquisitionStartDate - ISO8601 date
              * acquisitionEndDate - ISO8601 date
              * isCalibrated - boolean

            The following metadata entries are optional:
              * sourceId - uuid referencing the asset in the partner's system
              * fieldId - uuid referencing a field in the Climate system
              * boundaryId - uuid referencing a boundary in the Climate system
              * brandId - uuid referencing a partner's branding in the Climate system
              * reflectanceComputeMethod - either TOA or GROUND
              * name - name of the layer. The maximum number of characters that will be accepted as input is 20.

            Requires either imagery:write or platform scope.
          </details>
          <details><summary>__image/vnd.climate.rgb-cir.geotiff__</summary>

            Allows for the upload of a Color Infrared (CIR) image. The Coordinate Reference System (CRS) must be UTM with WGS84 datum.

            The following metadata entries are required to be embedded in the geotiff:
              * acquisitionStartDate - ISO8601 date
              * acquisitionEndDate - ISO8601 date
              * isCalibrated - boolean

            The following metadata entries are optional:
              * sourceId - uuid referencing the asset in the partner's system
              * fieldId - uuid referencing a field in the Climate system
              * boundaryId - uuid referencing a boundary in the Climate system
              * brandId - uuid referencing a partner's branding in the Climate system
              * reflectanceComputeMethod - either TOA or GROUND
              * name - name of the layer. The maximum number of characters that will be accepted as input is 20.

            Requires either imagery:write or platform scope.
          </details>
          <details><summary> __application/vnd.climate.field.geojson__</summary>

            Allows for the upload of a valid geojson feature (https://tools.ietf.org/html/rfc7946#section-3.2).

            The feature must contain the following entry in the properties section:
              * fieldName

            Optionally, the feature may contain the following entries in the properties properties:
              * farmName - defaults to *default*
              * clientName - defaults to *default*

            Additionally, the type field of the geometry field must one of the following:
              * Polygon
              * MultiPolygon

            The coordinates field of the geometry field must contain no more than 10,000 points.
            The total area of the field may not be larger than 20,000 acres in size.

            Requires either fields:write or platform scope.
          </details>
          <details><summary> __application/vnd.climate.rx.planting.shp__</summary>

            Allows for the upload of a planting prescription in shapefile format.  The upload must be an archive in the zip format.  It should contain one and only one of each of the following file types:
              * .shp
              * .shx
              * .dbf

            All files with the above suffixes must have the same prefix, ie Back40.shp, Back40.shx and Back40.dbf.

            Requires either rx:write or platform scope.
          </details>
          <details><summary> __application/vnd.climate.modus.xml__</summary>

            Allows for the upload of a soil sampling file in the modus 1.0 format with some restrictions.  The upload must be a single xml file.

            The following elements are required to be present in the modus file.
              * EventCode - Max length of 64 bytes
              * EventDate - Must be in ISO8601
              * SoilSample - Has a maxOccurs of 20k
              * Depth - Has a maxOccurs of 50
              * LabName - Must be non-empty.
              * StartingDepth - 0 to 36 inclusive, default 0
              * EndingDepth - 1 - 36 inclusive, default 1
              * ColumnDepth
              * DepthUnit - must be inches
              * Geometry - point in wgs84
            
            Requires the soil:write scope.
           </details>
           <details><summary> __application/vnd.climate.stand-count.geojson__</summary>

            Allows for the upload of a valid [geojson feature collection](https://tools.ietf.org/html/rfc7946#section-3.3).

            Each feature in the collection must contain the following entry in its properties section:
              * StandPPA - A count of the number of plants per acre:

            Additionally, the type field of each feature's geometry field must be:
              * Point

            Requires `imagery:write` scope.
           </details>
           <details><summary> __application/vnd.climate.weed-count.geojson__</summary>

            Allows for the upload of a valid [geojson feature collection](https://tools.ietf.org/html/rfc7946#section-3.3).

            Each feature in the collection must contain the following entry in its properties section:
              * StandPPA - A count of the number of plants per acre:

            Additionally, the type field of each feature's geometry field must be:
              * Point

            Requires `imagery:write` scope.
           </details>
           <details><summary> __application/vnd.climate.as-applied.zip__</summary>

            Allows for the upload of a valid application data [supported formats](https://support.climate.com/kt#/kA02A000000DjvOSAS/en_US).

            The following metadata entries are required:
            * fileName - name of the file being uploaded.

            Requires `asApplied:write` scope.
           </details>
      operationId: postUpload
      tags:
        - Uploads
      security:
        - api_key: []
        - oauth2_authorization_code:
            - 'platform'
            - 'fields:write'
            - 'imagery:write'
            - 'rx:write'
            - 'standCount:write'
            - 'weedCount:write'
      parameters:
        - $ref: '#/components/parameters/X-Recipient-Email'
      responses:
        '201':
          $ref: '#/components/responses/PostUploadOk'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Upload'
  '/v4/uploads/{uploadId}':
    put:
      summary: Chunked upload of data
      description: Send chunked data for an **Upload**.
      operationId: chunkedUpload
      tags:
        - Uploads
      security:
        - api_key: []
        - oauth2_authorization_code:
            - 'platform'
            - 'fields:write'
            - 'imagery:write'
            - 'rx:write'
            - 'soil:write'
      parameters:
        - $ref: '#/components/parameters/ContentRange'
        - $ref: '#/components/parameters/UploadId'
        - $ref: '#/components/parameters/BinaryContentType'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  '/v4/uploads/{uploadId}/status':
    get:
      summary: Retrieve Upload status
      description: Check the status of an **Upload** by ID.
      operationId: fetchUploadStatusById
      tags:
        - Uploads
      security:
        - api_key: []
        - oauth2_authorization_code:
            - 'platform'
            - 'fields:write'
            - 'imagery:write'
            - 'rx:write'
      parameters:
        - $ref: '#/components/parameters/UploadId'
      responses:
        '200':
          $ref: '#/components/responses/FetchUploadStatusByIdOk'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v4/uploads/status/query:
    post:
      summary: Retrieve Upload statuses in batch
      description: Check the status of multiple **Uploads** (up to 100 per request).
      operationId: fetchUploadStatuses
      tags:
        - Uploads
      security:
        - api_key: []
        - oauth2_authorization_code:
            - 'platform'
            - 'fields:write'
            - 'imagery:write'
            - 'rx:write'
      responses:
        '200':
          $ref: '#/components/responses/FetchUploadStatusesOk'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadStatusQuery'
  /v4/layers/scoutingObservations:
    get:
      summary: Retrieve a list of scouting observations
      description: >-
        Retrieve a list of scouting observations created or updated by the user
        identified by the Authorization header.
      tags:
        - Layers
      security:
        - api_key: []
        - oauth2_authorization_code:
            - 'platform'
            - 'scouting:read'
      parameters:
        - $ref: '#/components/parameters/X-Next-Token'
        - $ref: '#/components/parameters/X-Limit'
        - $ref: '#/components/parameters/OccurredAfter'
        - $ref: '#/components/parameters/OccurredBefore'
      responses:
        '200':
          $ref: '#/components/responses/FetchScoutingObservationsOk'
        '206':
          $ref: '#/components/responses/FetchScoutingObservationsPartial'
        '304':
          $ref: '#/components/responses/304'
        '400':
          $ref: '#/components/responses/400'
  '/v4/layers/scoutingObservations/{scoutingObservationId}':
    get:
      summary: Retrieve individual scouting observation
      description: >-
        Retrieve an individual scouting observation by id.  Ids are retrieved
        via the /layers/scoutingObservations route.
      tags:
        - Layers
      security:
        - api_key: []
        - oauth2_authorization_code:
            - 'platform'
            - 'scouting:read'
      parameters:
        - $ref: '#/components/parameters/ScoutingObservationId'
      responses:
        '200':
          $ref: '#/components/responses/FetchScoutingObservationByIdOk'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  '/v4/layers/scoutingObservations/{scoutingObservationId}/attachments':
    get:
      summary: Retrieve attachments associated with a given scouting observation.
      description: >-
        Retrieve attachments associated with a given scouting observation.
        Photos added to scouting notes in the FieldView app are capped to 20MB,
        and we won’t store photos larger than that in a scouting note.
      tags:
        - Layers
      security:
        - api_key: []
        - oauth2_authorization_code:
            - 'platform'
            - 'scouting:read'
      parameters:
        - $ref: '#/components/parameters/ScoutingObservationId'
        - $ref: '#/components/parameters/X-Next-Token'
        - $ref: '#/components/parameters/X-Limit'
      responses:
        '200':
          $ref: '#/components/responses/FetchScoutingObservationAttachmentsOk'
        '206':
          $ref: '#/components/responses/FetchScoutingObservationAttachmentsPartial'
        '304':
          $ref: '#/components/responses/304'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
  '/v4/layers/scoutingObservations/{scoutingObservationId}/attachments/{attachmentId}/contents':
    get:
      summary: Retrieve the binary contents of a scouting observation’s attachment.
      description: >-
        Photos added to scouting notes in the FieldView app are capped to
        `20MiB` (`20971520 bytes`), and we won’t store photos larger than that
        in a scouting note. Downloads larger than `5MiB` (`5242880 bytes`) in
        size, must be downloaded in chunks no larger than `5MiB` (`5242880
        bytes`) and no smaller than `1MiB` (`1048576 bytes`). The last chunk
        could be less than `1MiB` (`1048576 bytes`).
      tags:
        - Layers
      security:
        - api_key: []
        - oauth2_authorization_code:
            - 'platform'
            - 'scouting:read'
      parameters:
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/ScoutingObservationId'
        - $ref: '#/components/parameters/ScoutingObservationAttachmentId'
        - $ref: '#/components/parameters/Range'
      responses:
        '200':
          $ref: '#/components/responses/FetchScoutingObservationAttachmentContentsOk'
        '206':
          $ref: >-
            #/components/responses/FetchScoutingObservationAttachmentContentsPartial
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '416':
          $ref: '#/components/responses/416'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v4/layers/asPlanted:
    get:
      summary: Retrieve a list of planting activities
      description: >-
        Retrieve a list of planting activities. The id in the response is used
        for  GET /v4/layers/asPlanted/{activityId}/contents.
      tags:
        - Layers
      security:
        - api_key: []
        - oauth2_authorization_code:
            - 'platform'
            - 'asPlanted:read'
      parameters:
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/X-Next-Token'
        - $ref: '#/components/parameters/X-Limit'
        - $ref: '#/components/parameters/OptionalResourceOwnerId'
        - $ref: '#/components/parameters/OccurredAfter'
        - $ref: '#/components/parameters/OccurredBefore'
        - $ref: '#/components/parameters/UpdatedAfter'
      responses:
        '200':
          $ref: '#/components/responses/FetchPlantingActivitiesOk'
        '206':
          $ref: '#/components/responses/FetchPlantingActivitiesPartial'
        '304':
          $ref: '#/components/responses/304'
        '400':
          $ref: '#/components/responses/400'
  '/v4/layers/asPlanted/{activityId}/contents':
    get:
      summary: Retrieve the raw planting activity
      description: >-
        Retrieve an individual planting activity by id.  Ids are retrieved via
        the  /layers/asPlanted route. Downloads larger than `5MiB` (`5242880
        bytes`) in size, must be downloaded in chunks no larger than `5MiB`
        (`5242880 bytes`) and no smaller than `1MiB`  (`1048576 bytes`). The
        last chunk could be less than `1MiB` (`1048576 bytes`).  The data is
        compressed using .zip format.
      tags:
        - Layers
      security:
        - api_key: []
        - oauth2_authorization_code:
            - 'asPlanted:read'
      parameters:
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/PlantingActivityId'
        - $ref: '#/components/parameters/Range'
      responses:
        '200':
          $ref: '#/components/responses/FetchPlantingActivityOk'
        '206':
          $ref: '#/components/responses/FetchPlantingActivityPartial'
        '304':
          $ref: '#/components/responses/304'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '416':
          $ref: '#/components/responses/416'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v4/layers/asApplied:
    get:
      summary: Retrieve a list of application activities
      description: >-
        Retrieve a list of application activities. The id in the response is
        used for  GET /v4/layers/asApplied/{activityId}/contents.
      tags:
        - Layers
      security:
        - api_key: []
        - oauth2_authorization_code:
            - 'platform'
            - 'asApplied:read'
      parameters:
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/X-Next-Token'
        - $ref: '#/components/parameters/X-Limit'
        - $ref: '#/components/parameters/OptionalResourceOwnerId'
        - $ref: '#/components/parameters/OccurredAfter'
        - $ref: '#/components/parameters/OccurredBefore'
        - $ref: '#/components/parameters/UpdatedAfter'
      responses:
        '200':
          $ref: '#/components/responses/FetchApplicationActivitiesOk'
        '206':
          $ref: '#/components/responses/FetchApplicationActivitiesPartial'
        '304':
          $ref: '#/components/responses/304'
        '400':
          $ref: '#/components/responses/400'
  '/v4/layers/asApplied/{activityId}/contents':
    get:
      summary: Retrieve the raw application activity
      description: >-
        Retrieve an individual application activity by id.  Ids are retrieved
        via the  /layers/asApplied route. Downloads larger than `5MiB` (`5242880
        bytes`) in size, must be downloaded in chunks no larger than `5MiB`
        (`5242880 bytes`) and no smaller than `1MiB`  (`1048576 bytes`). The
        last chunk could be less than `1MiB` (`1048576 bytes`). The data is
        compressed using .zip format.
      tags:
        - Layers
      security:
        - api_key: []
        - oauth2_authorization_code:
            - 'asApplied:read'
      parameters:
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/ApplicationActivityId'
        - $ref: '#/components/parameters/Range'
      responses:
        '200':
          $ref: '#/components/responses/FetchApplicationActivityOk'
        '206':
          $ref: '#/components/responses/FetchApplicationActivityPartial'
        '304':
          $ref: '#/components/responses/304'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '416':
          $ref: '#/components/responses/416'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /v4/layers/asHarvested:
    get:
      summary: Retrieve a list of harvest activities
      description: >-
        Retrieve a list of harvest activities. The id in the response is used
        for  GET /v4/layers/asHarvested/{activityId}/contents.
      tags:
        - Layers
      security:
        - api_key: []
        - oauth2_authorization_code:
            - 'platform'
            - 'asHarvested:read'
      parameters:
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/X-Next-Token'
        - $ref: '#/components/parameters/X-Limit'
        - $ref: '#/components/parameters/OptionalResourceOwnerId'
        - $ref: '#/components/parameters/OccurredAfter'
        - $ref: '#/components/parameters/OccurredBefore'
        - $ref: '#/components/parameters/UpdatedAfter'
      responses:
        '200':
          $ref: '#/components/responses/FetchHarvestActivitiesOk'
        '206':
          $ref: '#/components/responses/FetchHarvestActivitiesPartial'
        '304':
          $ref: '#/components/responses/304'
        '400':
          $ref: '#/components/responses/400'
  '/v4/layers/asHarvested/{activityId}/contents':
    get:
      summary: Retrieve the raw harvest activity
      description: >-
        Retrieve an individual harvest activity by id.  Ids are retrieved via
        the  /layers/asHarvested route. Downloads larger than `5MiB` (`5242880
        bytes`) in size, must be downloaded in chunks no larger than `5MiB`
        (`5242880 bytes`) and no smaller than `1MiB`  (`1048576 bytes`). The
        last chunk could be less than `1MiB` (`1048576 bytes`). The data is
        compressed using .zip format.
      tags:
        - Layers
      security:
        - api_key: []
        - oauth2_authorization_code:
            - 'asHarvested:read'
      parameters:
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/HarvestActivityId'
        - $ref: '#/components/parameters/Range'
      responses:
        '200':
          $ref: '#/components/responses/FetchHarvestActivityOk'
        '206':
          $ref: '#/components/responses/FetchHarvestActivityPartial'
        '304':
          $ref: '#/components/responses/304'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '416':
          $ref: '#/components/responses/416'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
servers:
  - url: 'https://platform.climate.com/'
components:
  parameters:
    FieldId:
      in: path
      description: Unique identifier of the Field.
      name: fieldId
      required: true
      schema:
        type: string
        format: uuid
    OptionalFieldNamePrefix:
      in: query
      description: Optional prefix filter for field name. Must be at least 3 characters.
      name: fieldName
      required: false
      schema:
        type: string
    FarmOrganizationType:
      in: path
      description: Type of the farm organization.
      name: farmOrganizationType
      required: true
      schema:
        type: string
        enum:
          - farm
    FarmOrganizationId:
      in: path
      description: Unique identifier of the farm organization.
      name: farmOrganizationId
      required: true
      schema:
        type: string
        format: uuid
    ResourceOwnerId:
      in: path
      description: Unique identifier of the resource owner.
      name: resourceOwnerId
      required: true
      schema:
        type: string
        format: uuid
    OptionalResourceOwnerId:
      in: query
      description: >-
        Optional unique identifier of the resource owner.  If resourceOwnerId is
        not specified, it defaults to the x-authenticated-user-uuid.
      name: resourceOwnerId
      required: false
      schema:
        type: string
        format: uuid
    OptionalResourceOwnerIdList:
      in: query
      description: >-
        Optional comma-separated list of resource owner unique identifiers by
        which to filter results.
      name: resourceOwnerId
      required: false
      schema:
        type: string
    UploadId:
      in: path
      description: Unique identifier of an Upload.
      name: uploadId
      required: true
      schema:
        type: string
        format: uuid
    ScoutingObservationId:
      in: path
      description: Unique identifier of the Scouting Observation.
      name: scoutingObservationId
      required: true
      schema:
        type: string
        format: uuid
    ScoutingObservationAttachmentId:
      in: path
      description: Unique identifier of the attachment.
      name: attachmentId
      required: true
      schema:
        type: string
        format: uuid
    PlantingActivityId:
      in: path
      description: Unique identifier of the Planting Activity.
      name: activityId
      required: true
      schema:
        type: string
        format: uuid
    ApplicationActivityId:
      in: path
      description: Unique identifier of the Application Activity.
      name: activityId
      required: true
      schema:
        type: string
        format: uuid
    HarvestActivityId:
      in: path
      description: Unique identifier of the Harvest Activity.
      name: activityId
      required: true
      schema:
        type: string
        format: uuid
    OccurredAfter:
      in: query
      description: >-
        Optional start time by which to filter layer results. Time must be in
        ISO 8601 format with time zone, e.g. 2016-05-13T00:00:00Z
        (https://tools.ietf.org/html/rfc3339). Layers with an end time at or
        after (inclusive) the specified time will match this filter. If both
        occurredAfter and occurredBefore are populated, occurredAfter must be <=
        occurredBefore.
      name: occurredAfter
      required: false
      schema:
        type: string
        format: date-time
    OccurredBefore:
      in: query
      description: >-
        Optional end time by which to filter layer results. Time must be in ISO
        8601 format with time zone, e.g. 2016-05-13T00:00:00Z
        (https://tools.ietf.org/html/rfc3339). Layers with a start time at or
        before (inclusive) the specified time. If both occurredAfter and
        occurredBefore are populated, occurredAfter must be <= occurredBefore.
      name: occurredBefore
      required: false
      schema:
        type: string
        format: date-time
    UpdatedAfter:
      in: query
      description: >-
        Optional updated time by which to filter layer results. Time must be in
        ISO 8601 format with time zone, e.g. 2016-05-13T00:00:00Z
        (https://tools.ietf.org/html/rfc3339). Layers with a modification time
        at or after (inclusive) the specified time.
      name: updatedAfter
      required: false
      schema:
        type: string
        format: date-time
    Accept:
      in: header
      name: Accept
      required: true
      description: Must be either \*/* or application/octet-stream,application/json
      schema:
        type: string
    X-Limit:
      in: header
      name: X-Limit
      description: >-
        Max number of results to return per batch.  Must be between 1 and 100
        inclusive.  Defaults to 100.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
    X-Next-Token:
      name: X-Next-Token
      in: header
      description: >-
        Opaque string which allows for fetching the next batch of results.  Can
        be used to poll for changes.
      required: false
      schema:
        type: string
    ContentRange:
      in: header
      name: Content-Range
      description: >-
        Byte range `bytes start-end/total`
        (https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.16). e.g.
        bytes 0-5242880/10242880. Downloads larger than 5MiB (5242880 bytes) in
        size must be downloaded in chunks no larger than 5MiB (5242880 bytes)
        and no smaller than 1MiB (1048576 bytes). The last chunk could be less
        than 1MiB (1048576 bytes).
      required: true
      schema:
        type: string
    Range:
      in: header
      name: Range
      description: >-
        Byte range `bytes=start-end`
        (https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1).
        e.g. bytes=0-1048576. Currently only single range value is supported.
        Both start and end need to be specified, end value should be greater
        than start and end - start should not be greater than 5MiB.
      required: true
      schema:
        type: string
    X-Recipient-Email:
      in: header
      name: X-Recipient-Email
      description: >-
        Email address associated with a Climate account, used when to sending to
        another user.
      required: false
      schema:
        type: string
    BinaryContentType:
      in: header
      name: Content-Type
      description: Must be `application/octet-stream`
      required: true
      schema:
        type: string
  responses:
    200:
      description: OK
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
    204:
      description: No Content
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
    304:
      description: Not Modified
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
        X-Next-Token:
          description: A token which may be used to poll for updates.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Empty'
    400:
      description: Bad Input
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    401:
      description: Unauthorized
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    403:
      description: Forbidden
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    404:
      description: Not Found
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    409:
      description: Conflict
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    410:
      description: Gone
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    416:
      description: Range Not Satisfiable
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    429:
      description: Too Many Requests
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    500:
      description: Internal Server Error
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    503:
      description: Server Busy
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
        Retry-After:
          description: Number of seconds to wait before retrying the request.
          schema:
            type: integer
            format: int32
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ReportConflict:
      description: Conflict (Report generation is still in progress)
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ReportGone:
      description: Gone (Report is expired)
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    FetchResourceOwnerOk:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceOwner'
    FetchFieldsOk:
      description: OK
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
        X-Next-Token:
          description: Token used to poll for updates.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Fields'
    FetchFieldsPartial:
      description: Partial Result
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
        X-Next-Token:
          description: Token used to fetch next batch of results.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Fields'
    FetchFieldByIdOk:
      description: Returns the requested Field.
      headers:
        X-Http-Request-Id:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Field'
    FetchFarmOrganizationByTypeAndIdOk:
      description: Returns the requested farm organization.
      headers:
        X-Http-Request-Id:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FarmOrganization'
    FetchBoundaryByIdOk:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Boundary'
    FetchBoundariesOk:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Boundaries'
    UploadBoundaryOk:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UploadedBoundaryId'
    PostUploadOk:
      description: Returns a new upload with ID used to PUT file contents.
      headers:
        X-Http-Request-Id:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedUpload'
    FetchUploadStatusByIdOk:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UploadStatus'
    FetchUploadStatusesOk:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UploadStatuses'
    FetchScoutingObservationsOk:
      description: OK
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
        X-Next-Token:
          description: Token used to poll for updates.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ScoutingObservations'
    FetchScoutingObservationsPartial:
      description: Partial Result
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
        X-Next-Token:
          description: Token used to fetch next batch of results.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ScoutingObservations'
    FetchScoutingObservationByIdOk:
      description: Returns the requested scouting observation.
      headers:
        X-Http-Request-Id:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ScoutingObservation'
    FetchScoutingObservationAttachmentsOk:
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ScoutingObservationAttachments'
    FetchScoutingObservationAttachmentsPartial:
      description: Partial Result
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
        X-Next-Token:
          description: Token used to fetch next batch of results.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ScoutingObservationAttachments'
    FetchScoutingObservationAttachmentContentsOk:
      description: OK
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request
          schema:
            type: string
        Content-Range:
          description: >-
            Byte range `bytes start-end/total`
            (https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.16).
            e.g. bytes 0-5242880/10242880. Downloads larger than 5MiB (5242880
            bytes) in size must be downloaded in chunks no larger than 5MiB
            (5242880 bytes) and no smaller than 1MiB (1048576 bytes). The last
            chunk could be less than 1MiB (1048576 bytes).
          schema:
            type: string
      content:
        image/jpeg:
          schema:
            $ref: '#/components/schemas/ScoutingObservationAttachmentContents'
    FetchScoutingObservationAttachmentContentsPartial:
      description: Partial Result
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
        Content-Range:
          description: >-
            Byte range `bytes start-end/total`
            (https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.16).
            e.g. bytes 0-5242880/10242880. Downloads larger than 5MiB (5242880
            bytes) in size must be downloaded in chunks no larger than 5MiB
            (5242880 bytes) and no smaller than 1MiB (1048576 bytes). The last
            chunk could be less than 1MiB (1048576 bytes).
          schema:
            type: string
      content:
        image/jpeg:
          schema:
            $ref: '#/components/schemas/ScoutingObservationAttachmentContents'
    FetchPlantingActivitiesOk:
      description: OK
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
        X-Next-Token:
          description: Token used to poll for updates.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PlantingActivities'
    FetchPlantingActivitiesPartial:
      description: Partial Result
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
        X-Next-Token:
          description: Token used to fetch next batch of results.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PlantingActivities'
    FetchPlantingActivityOk:
      description: OK
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request
          schema:
            type: string
        Content-Range:
          description: >-
            Byte range `bytes start-end/total`
            (https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.16).
            e.g. bytes 0-5242880/10242880. Downloads larger than 5MiB (5242880
            bytes) in size must be downloaded in chunks no larger than 5MiB
            (5242880 bytes) and no smaller than 1MiB (1048576 bytes). The last
            chunk could be less than 1MiB (1048576 bytes).
          schema:
            type: string
      content:
        application/octet-stream:
          schema:
            $ref: '#/components/schemas/PlantingActivityContents'
    FetchPlantingActivityPartial:
      description: Partial Result
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
        Content-Range:
          description: >-
            Byte range `bytes start-end/total`
            (https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.16).
            e.g. bytes 0-5242880/10242880. Downloads larger than 5MiB (5242880
            bytes) in size must be downloaded in chunks no larger than 5MiB
            (5242880 bytes) and no smaller than 1MiB (1048576 bytes). The last
            chunk could be less than 1MiB (1048576 bytes).
          schema:
            type: string
      content:
        application/octet-stream:
          schema:
            $ref: '#/components/schemas/PlantingActivityContents'
    FetchApplicationActivitiesOk:
      description: OK
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
        X-Next-Token:
          description: Token used to poll for updates.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApplicationActivities'
    FetchApplicationActivitiesPartial:
      description: Partial Result
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
        X-Next-Token:
          description: Token used to fetch next batch of results.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApplicationActivities'
    FetchApplicationActivityOk:
      description: OK
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request
          schema:
            type: string
        Content-Range:
          description: >-
            Byte range `bytes start-end/total`
            (https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.16).
            e.g. bytes 0-5242880/10242880. Downloads larger than 5MiB (5242880
            bytes) in size must be downloaded in chunks no larger than 5MiB
            (5242880 bytes) and no smaller than 1MiB (1048576 bytes). The last
            chunk could be less than 1MiB (1048576 bytes).
          schema:
            type: string
      content:
        application/octet-stream:
          schema:
            $ref: '#/components/schemas/ApplicationActivityContents'
    FetchApplicationActivityPartial:
      description: Partial Result
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
        Content-Range:
          description: >-
            Byte range `bytes start-end/total`
            (https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.16).
            e.g. bytes 0-5242880/10242880. Downloads larger than 5MiB (5242880
            bytes) in size must be downloaded in chunks no larger than 5MiB
            (5242880 bytes) and no smaller than 1MiB (1048576 bytes). The last
            chunk could be less than 1MiB (1048576 bytes).
          schema:
            type: string
      content:
        application/octet-stream:
          schema:
            $ref: '#/components/schemas/ApplicationActivityContents'
    FetchHarvestActivitiesOk:
      description: OK
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
        X-Next-Token:
          description: Token used to poll for updates.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HarvestActivities'
    FetchHarvestActivitiesPartial:
      description: Partial Result
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
        X-Next-Token:
          description: Token used to fetch next batch of results.
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HarvestActivities'
    FetchHarvestActivityOk:
      description: OK
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request
          schema:
            type: string
        Content-Range:
          description: >-
            Byte range `bytes start-end/total`
            (https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.16).
            e.g. bytes 0-5242880/10242880. Downloads larger than 5MiB (5242880
            bytes) in size must be downloaded in chunks no larger than 5MiB
            (5242880 bytes) and no smaller than 1MiB (1048576 bytes). The last
            chunk could be less than 1MiB (1048576 bytes).
          schema:
            type: string
      content:
        application/octet-stream:
          schema:
            $ref: '#/components/schemas/HarvestActivityContents'
    FetchHarvestActivityPartial:
      description: Partial Result
      headers:
        X-Http-Request-Id:
          description: Unique identifier assigned to the request.
          schema:
            type: string
        Content-Range:
          description: >-
            Byte range `bytes start-end/total`
            (https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.16).
            e.g. bytes 0-5242880/10242880. Downloads larger than 5MiB (5242880
            bytes) in size must be downloaded in chunks no larger than 5MiB
            (5242880 bytes) and no smaller than 1MiB (1048576 bytes). The last
            chunk could be less than 1MiB (1048576 bytes).
          schema:
            type: string
      content:
        application/octet-stream:
          schema:
            $ref: '#/components/schemas/HarvestActivityContents'
  securitySchemes:
    oauth2_authorization_code:
      description: >-
        Log in with FieldView OAuth2 provider (Authorization Code Grant). Used
        to authorize the client (partner) and

        user. The *access_token* is required to be provided in the
        `Authorization` header on all calls to the FieldView

        APIs with the following format `Bearer $access_token`.
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://climate.com/static/app-login/'
          tokenUrl: 'https://api.climate.com/api/oauth/token'
          scopes:
            platform: (DEPRECATED) Legacy scope used for some Platform APIs
            'fields:read': Required for retrieving field and boundary information
            'farmOrganizations:read': Required for retrieving farm organization information
            'operations:read': Required for retrieving operation information
            'resourceOwners:read': Required for retrieving resource owner information
            'scouting:read': Required for retrieving user\'s scouting information
            'fields:write': Required for uploading field boundaries
            'imagery:write': Required for uploading imagery
            'rx:write': Required for uploading prescriptions
            'soil:write': Required for uploading soil sample results
            'asPlanted:read': Required for retrieving planting data
            'asApplied:read': Required for retrieving as applied data
            'asHarvested:read': Required for retrieving harvest data
            'diagnostics:read': Required for retrieving CNH machine diagnostic data
            'plantingActivitySummary:read': Required for retrieving planting activity summary data
            'customerInsights:read': Required for retrieving customer insights metrics data
            'avroAgronomicData:read': Required for retrieving agronomic data

    api_key:
      description: >-
        API access key used to control throttling (429 responses).  This key is
        typically formatted:

        `partner-{name}-{uuid}`
      type: apiKey
      name: X-Api-Key
      in: header
  schemas:
    Parent:
      description: A minimal set of attributes regarding the parent of a farm organization.
      required:
        - id
        - type
      properties:
        id:
          description: Unique identifier for the parent of a farm organization.
          type: string
          format: uuid
        type:
          description: Type of the parent of a farm organization.
          type: string
          enum:
            - farm
    Field:
      description: >-
        Logical representation of a Field with a name.  Spatial attributes of
        the Field are provided in the Boundary.
      required:
        - id
        - name
        - boundaryId
        - resourceOwnerId
        - parent
      properties:
        id:
          description: Unique identifier for a Field.
          type: string
          format: uuid
        name:
          description: Name of the Field.
          type: string
        boundaryId:
          description: Unique identifier for the current Field's Boundary.
          type: string
          format: uuid
        resourceOwnerId:
          description: Unique identifier of the resource owner that owns the Field.
          type: string
          format: uuid
        parent:
          $ref: '#/components/schemas/Parent'
      example:
        id: 00000000-0000-0000-0000-000000000000
        name: Back Forty
        boundaryId: 00000000-0000-0000-0000-000000000000
        resourceOwnerId: 00000000-0000-0000-0000-000000000000
        parent:
          id: 00000000-0000-0000-0000-000000000000
          type: farm
    Fields:
      description: A batch of field results
      required:
        - results
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Field'
    FarmOrganization:
      description: Logical representation of a farm organization with a name and type.
      required:
        - id
        - name
        - type
      properties:
        id:
          description: Unique identifier for a farm organization.
          type: string
          format: uuid
        name:
          description: Name of the farm organization.
          type: string
        type:
          description: Type of the farm organization.
          type: string
          enum:
            - farm
      example:
        id: 00000000-0000-0000-0000-000000000000
        name: Back Forty
        type: farm
    ResourceOwner:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
    Geometry:
      description: GeoJSON
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - Point
            - Polygon
            - MultiPolygon
        coordinates:
          type: array
          items:
            type: string
      example:
        type: Point
        coordinates:
          - 0
          - 0
    Area:
      description: Area with units. Units are always "hectare".
      required:
        - q
        - u
      properties:
        q:
          type: number
          format: float
        u:
          type: string
      example:
        q: 1
        u: hectare
    Point:
      required:
        - coordinates
        - type
      properties:
        coordinates:
          type: array
          items:
            type: number
            format: float
        type:
          type: string
      example:
        type: Point
        coordinates:
          - -122.2
          - 38.1
    BoundaryProperties:
      description: Properties map.
      required:
        - area
        - centroid
      properties:
        area:
          $ref: '#/components/schemas/Area'
        centroid:
          $ref: '#/components/schemas/Point'
    Boundary:
      description: Arbitrary boundary.  GeoJSON Feature.
      required:
        - id
        - type
        - geometry
        - properties
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum:
            - Feature
        geometry:
          $ref: '#/components/schemas/Geometry'
        properties:
          $ref: '#/components/schemas/BoundaryProperties'
    BoundaryUpload:
      description: Arbitrary boundary in a geometry map
      required:
        - geometry
      properties:
        geometry:
          $ref: '#/components/schemas/Geometry'
    UploadedBoundaryId:
      description: Unique identifier of a successfully uploaded boundary
      required:
       - id
      properties:
       id:
         type: string
         format: uuid
    Metadata:
      type: object
      additionalProperties: true
    Boundaries:
      description: A batch of boundary results
      required:
        - type
        - features
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/Boundary'
    BoundariesQuery:
      type: object
      required:
        - ids
      properties:
        ids:
          type: array
          items:
            description: Unique identifier for the boundary.
            type: string
            format: uuid
    Upload:
      type: object
      description: Client request to upload data for a user.
      required:
        - contentType
        - md5
        - length
      properties:
        contentType:
          type: string
          enum:
            - application/vnd.climate.field.geojson
            - image/vnd.climate.thermal.geotiff
            - image/vnd.climate.ndvi.geotiff
            - image/vnd.climate.waterstress.geotiff
            - image/vnd.climate.elevation.geotiff
            - image/vnd.climate.raw.geotiff
            - image/vnd.climate.rgb.geotiff
          format: mime-type
          description: >-
            Content type representing data being uploaded (e.g.
            image/vnd.climate.rgb.geotiff)
        md5:
          type: string
          description: Base64 encoded md5 hash of the content
        length:
          type: integer
          format: int64
          description: Content size in bytes
        metadata:
          $ref: '#/components/schemas/Metadata'
    CreatedUpload:
      type: string
      format: uuid
      description: Successfully created upload request
    UploadStatus:
      type: object
      required:
        - id
        - status
      properties:
        id:
          description: Unique identifier for the upload.
          type: string
          format: uuid
        status:
          description: |
            Current status of the upload:
              * `UPLOADING` - Uploading has started, parts are still coming in.
              * `INVALID` - Upload has failed validity check.
              * `PENDING` - Upload has been received by Climate and is being processed.
              * `INBOX` - The upload is awaiting user acceptance in their Data Inbox.
              * `DECLINED` - The user has declined the upload in their Data Inbox.
              * `IMPORTING` - The user has accepted the upload and it is being imported into their account.
              * `SUCCESS` - The upload has been successfully imported.
          type: string
          enum:
            - UPLOADING
            - INVALID
            - PENDING
            - INBOX
            - DECLINED
            - IMPORTING
            - SUCCESS
    UploadStatuses:
      type: object
      required:
        - results
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/UploadStatus'
    UploadStatusQuery:
      type: object
      required:
        - ids
      properties:
        ids:
          type: array
          items:
            description: Unique identifier for the upload.
            type: string
            format: uuid
    ScoutingTag:
      type: object
      required:
        - code
      properties:
        code:
          type: string
    ScoutingObservationSummary:
      type: object
      required:
        - id
        - startTime
        - endTime
        - updatedAt
      properties:
        id:
          description: The id of a scouting observation.
          type: string
          format: uuid
        startTime:
          description: >-
            The start time of the scouting observation. Time in ISO 8601 format
            with UTC timezone, 3 fractional seconds
            (https://tools.ietf.org/html/rfc3339).
          type: string
          format: date-time
        endTime:
          description: >-
            The start time of the scouting observation. Time in ISO 8601 format
            with UTC timezone, 3 fractional seconds
            (https://tools.ietf.org/html/rfc3339).
          type: string
          format: date-time
        updatedAt:
          description: >-
            The time the scouting observation or any of its attachments was last
            updated.Time in ISO 8601 format with UTC timezone, 3 fractional
            seconds. (https://tools.ietf.org/html/rfc3339).
          type: string
          format: date-time
    ScoutingObservation:
      type: object
      required:
        - id
        - title
        - note
        - location
        - startTime
        - endTime
        - updatedAt
        - fieldIds
        - tags
        - timespan
        - locationDisplayColor
        - status
      properties:
        id:
          description: The id of a scouting observation.
          type: string
          format: uuid
        title:
          description: >-
            The title or summary of the scouting observation. 40 Characters
            long, no emojis, and leading and trailing whitespace will be
            trimmed.
          type: string
        note:
          description: The text of the scouting observation. Maximum of 4000 characters.
          type: string
        location:
          description: Where the scouting observation occurred.  GeoJson in WGS84.
          $ref: '#/components/schemas/Geometry'
        startTime:
          description: >-
            The start time of the scouting observation. Time in ISO 8601 format
            with UTC timezone, 3 fractional seconds
            (https://tools.ietf.org/html/rfc3339).
          type: string
          format: date-time
        endTime:
          description: >-
            The start time of the scouting observation. Time in ISO 8601 format
            with UTC timezone, 3 fractional seconds
            (https://tools.ietf.org/html/rfc3339).
          type: string
          format: date-time
        updatedAt:
          description: >-
            The time the scouting observation or any of its attachments was last
            updated.Time in ISO 8601 format with UTC timezone, 3 fractional
            seconds. (https://tools.ietf.org/html/rfc3339).
          type: string
          format: date-time
        fieldIds:
          description: Array of field ids associated with this observation.
          type: array
          items:
            type: string
        tags:
          description: >-
            For example, ROCK_STONE, PONDING_WET, HAIL Maximum 20 tags allowed,
            40 characters per tag.
          type: array
          items:
            $ref: '#/components/schemas/ScoutingTag'
        timespan:
          description: Permanent or seasonal
          type: string
          enum:
            - PERMANENT
            - SEASONAL
        locationDisplayColor:
          description: |
            Color of scouting pin assigned in the Climate FieldView app.
            Limited in the Ux to a set of RGB values.
            * #307af7
            * #38d753
            * #b037e4
            * #ef3e3e
            * #f7ec41
            * #ff8439
            * #808080
          type: string
          enum:
            - '#307af7'
            - '#38d753'
            - '#b037e4'
            - '#ef3e3e'
            - '#f7ec41'
            - '#ff8439'
            - '#808080'
        status:
          description: >-
            The status of the scouting observation For example : ACTIVE,
            DELETED
          type: string
          enum:
            - ACTIVE
            - DELETED
    ScoutingObservations:
      description: A batch of scouting observations
      required:
        - results
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/ScoutingObservationSummary'
    ScoutingObservationAttachment:
      type: object
      required:
        - id
        - updatedAt
        - contentType
        - length
        - status
      properties:
        id:
          description: id of the attachment
          type: string
          format: uuid
        updatedAt:
          description: |
            The time the attachment was last updated.
            Time in ISO 8601 format with UTC timezone, 3 fractional seconds.
            (https://tools.ietf.org/html/rfc3339)
          type: string
          format: date-time
        contentType:
          description: 'The content type of the attachment, e.g. image/png.'
          type: string
        length:
          description: The number of bytes in the attachment.
          type: integer
          format: int64
        status:
          description: 'The status of the attachment. For example : ACTIVE, DELETED'
          type: string
          enum:
            - ACTIVE
            - DELETED
    ScoutingObservationAttachments:
      description: A batch of scouting attachments
      required:
        - results
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/ScoutingObservationAttachment'
    BinaryData:
      description: Binary contents
      type: string
      format: binary
    ScoutingObservationAttachmentContents:
      required:
        - body
      properties:
        body:
          $ref: '#/components/schemas/BinaryData'
    PlantingActivityContents:
      required:
        - body
      properties:
        body:
          $ref: '#/components/schemas/BinaryData'
    ApplicationActivityContents:
      required:
        - body
      properties:
        body:
          $ref: '#/components/schemas/BinaryData'
    HarvestActivityContents:
      required:
        - body
      properties:
        body:
          $ref: '#/components/schemas/BinaryData'
    Empty:
      type: object
    Error:
      type: object
      properties:
        error:
          type: object
          required:
            - id
            - code
            - message
          properties:
            id:
              type: string
              format: uuid
            code:
              type: string
            message:
              type: string
              description: Description of the error encountered.
    PlantingActivities:
      description: A batch of planting activities
      required:
        - results
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/PlantingActivitySummary'
    PlantingActivitySummary:
      type: object
      required:
        - id
        - startTime
        - endTime
        - createdAt
        - updatedAt
        - length
        - fieldIds
      properties:
        id:
          description: The id of a planting activity.
          type: string
          format: uuid
        startTime:
          description: >-
            The start time of the planting activity. Time in ISO 8601 format
            with UTC timezone, 3 fractional seconds
            (https://tools.ietf.org/html/rfc3339).
          type: string
          format: date-time
        endTime:
          description: >-
            The start time of the planting activity. Time in ISO 8601 format
            with UTC timezone, 3 fractional seconds
            (https://tools.ietf.org/html/rfc3339).
          type: string
          format: date-time
        createdAt:
          description: >-
            The time the planting activity was created. Time in ISO 8601 format
            with UTC timezone, 3 fractional seconds.
            (https://tools.ietf.org/html/rfc3339).
          type: string
          format: date-time
        updatedAt:
          description: >-
            The time the planting activity was last updated. Time in ISO 8601
            format with UTC timezone, 3 fractional seconds.
            (https://tools.ietf.org/html/rfc3339).
          type: string
          format: date-time
        length:
          description: The size in bytes of the raw planting activity file.
          type: integer
          format: int64
        fieldIds:
          description: Array of field ids associated the planting activity.
          type: array
          items:
            type: string
    ApplicationActivities:
      description: A batch of application activities
      required:
        - results
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationActivitySummary'
    ApplicationActivitySummary:
      type: object
      required:
        - id
        - startTime
        - endTime
        - createdAt
        - updatedAt
        - length
        - fieldIds
      properties:
        id:
          description: The id of an application activity.
          type: string
          format: uuid
        startTime:
          description: >-
            The start time of the application activity. Time in ISO 8601 format
            with UTC timezone, 3 fractional seconds
            (https://tools.ietf.org/html/rfc3339).
          type: string
          format: date-time
        endTime:
          description: >-
            The start time of the application activity. Time in ISO 8601 format
            with UTC timezone, 3 fractional seconds
            (https://tools.ietf.org/html/rfc3339).
          type: string
          format: date-time
        createdAt:
          description: >-
            The time the application activity was created. Time in ISO 8601
            format with UTC timezone, 3 fractional seconds.
            (https://tools.ietf.org/html/rfc3339).
          type: string
          format: date-time
        updatedAt:
          description: >-
            The time the application activity was last updated. Time in ISO 8601
            format with UTC timezone, 3 fractional seconds.
            (https://tools.ietf.org/html/rfc3339).
          type: string
          format: date-time
        length:
          description: The size in bytes of the raw application activity file.
          type: integer
          format: int64
        fieldIds:
          description: Array of field ids associated the application activity.
          type: array
          items:
            type: string
    HarvestActivities:
      description: A batch of harvest activities
      required:
        - results
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/HarvestActivitySummary'
    HarvestActivitySummary:
      type: object
      required:
        - id
        - startTime
        - endTime
        - createdAt
        - updatedAt
        - length
        - fieldIds
      properties:
        id:
          description: The id of a harvest activity.
          type: string
          format: uuid
        startTime:
          description: >-
            The start time of the harvest activity. Time in ISO 8601 format with
            UTC timezone, 3 fractional seconds
            (https://tools.ietf.org/html/rfc3339).
          type: string
          format: date-time
        endTime:
          description: >-
            The start time of the harvest activity. Time in ISO 8601 format with
            UTC timezone, 3 fractional seconds
            (https://tools.ietf.org/html/rfc3339).
          type: string
          format: date-time
        createdAt:
          description: >-
            The time the harvest activity was created. Time in ISO 8601 format
            with UTC timezone, 3 fractional seconds.
            (https://tools.ietf.org/html/rfc3339).
          type: string
          format: date-time
        updatedAt:
          description: >-
            The time the harvest activity was last updated. Time in ISO 8601
            format with UTC timezone, 3 fractional seconds.
            (https://tools.ietf.org/html/rfc3339).
          type: string
          format: date-time
        length:
          description: The size in bytes of the raw harvest activity file.
          type: integer
          format: int64
        fieldIds:
          description: Array of field ids associated the harvest activity.
          type: array
          items:
            type: string
