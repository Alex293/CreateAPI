openapi: 3.0.1
info:
  title: Credas API
  version: v1
servers:
- url: /
paths:
  /api/bank-accounts/verify:
    post:
      tags:
      - BankAccounts
      summary: Verifies bank account details.
      operationId: Verify
      parameters:
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      requestBody:
        description: Object containing data required to perform bank account verification.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.BankAccounts.AccountVerificationRequest'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.BankAccounts.AccountVerificationRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.BankAccounts.AccountVerificationRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.BankAccounts.AccountVerificationRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.BankAccounts.AccountVerificationRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.BankAccounts.AccountVerificationRequest'
          application/*+xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.BankAccounts.AccountVerificationRequest'
        required: false
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.BankAccounts.AccountVerificationResponse'
              example:
                checkId: 12345678-1234-5678-abcd-1234567890ab
                checkDate: 2019-08-01T12:15:22
                sortcode: "123456"
                accountNumber: "12345678"
                referenceId: RF1234
                error: false
                accountValid: true
                sortcodeValidation: 2
                sortcodeValidationText: Valid
                accountNumberValidation: 2
                accountNumberValidationText: Valid
                nameValidation: 2
                nameValidationText: Valid
                addressValidation: 2
                addressValidationText: Current address
                accountStatus: 2
                accountStatusText: Live
                checkStatus: 1
                hasBeenOverridden: false
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.BankAccounts.AccountVerificationResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.BankAccounts.AccountVerificationResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.BankAccounts.AccountVerificationResponse'
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        402:
          description: Error code meaning that the operation was aborted due to insufficient
            credits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
      x-codegen-request-body-name: request
  /api/companies:
    post:
      tags:
      - Companies
      summary: Searches for a company based on its Company Number and returns its
        details.
      description: "If a company appears multiple times within the structure, it will\
        \ only be detailed in full (i.e. with significant ownership details) in its\
        \ first instance. Subsequent instances will be \n            marked as duplicates.\
        \n            Whilst duplicate instances of companies can and will be identified,\
        \ it is not possible to categorically identify duplicated people."
      operationId: SearchCompany
      parameters:
      - name: companyNumber
        in: query
        description: The company registration number of the company that should be
          searched.
        schema:
          type: string
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Companies.CompanyDetail'
              example:
                id: 38eba446-0ff9-4602-9694-ee7f786ef9b1
                companyName: Widget Production Limited
                companyNumber: "12345678"
                addressLine1: 25 Westgate Street
                locality: ""
                region: Cardiff
                postCode: CF101NS
                dateOfRegistration: 1973-07-17T00:00:00
                duplicate: false
                significantParentCompanies:
                - id: ebbc9433-40a6-4197-902d-d4ff2efdbaa5
                  companyName: Widgets International Limited
                  companyNumber: "54345678"
                  dateOfRegistration: 0001-01-01T00:00:00
                  duplicate: false
                  significantPeople:
                  - id: b58ec846-1da1-4ac2-be27-b1dcbff8c8dd
                    forename: John
                    surname: Smith
                - id: 48641603-7593-46a9-b993-8ead4daca09e
                  companyName: Widget Services Limited
                  companyNumber: "23232321"
                  dateOfRegistration: 0001-01-01T00:00:00
                  duplicate: false
                  significantParentCompanies:
                  - id: ebbc9433-40a6-4197-902d-d4ff2efdbaa5
                    companyName: Widgets International Limited
                    companyNumber: "54345678"
                    addressLine1: 25 Westgate Street
                    locality: ""
                    region: Cardiff
                    postCode: CF101NS
                    dateOfRegistration: 1973-07-17T00:00:00
                    duplicate: true
                significantPeople:
                - id: 108db0e1-fe11-44be-ad8f-405ed57d3fbc
                  forename: John
                  surname: Smith
                  regEntryId: a5d3b128-f65d-4e6d-a9e2-ac8f2763ec7a
                - id: 965f3298-da35-4906-8d9e-d346008289dc
                  forename: Jane
                  surname: Smith
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Companies.CompanyDetail'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Companies.CompanyDetail'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Companies.CompanyDetail'
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        402:
          description: If the consumer doesn't have the required permission to use
            the endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
  /api/companies/{companyId}:
    get:
      tags:
      - Companies
      operationId: GetCompany
      parameters:
      - name: companyId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Companies.CompanyDetail'
              example:
                id: 38eba446-0ff9-4602-9694-ee7f786ef9b1
                companyName: Widget Production Limited
                companyNumber: "12345678"
                addressLine1: 25 Westgate Street
                locality: ""
                region: Cardiff
                postCode: CF101NS
                dateOfRegistration: 1973-07-17T00:00:00
                duplicate: false
                significantParentCompanies:
                - id: ebbc9433-40a6-4197-902d-d4ff2efdbaa5
                  companyName: Widgets International Limited
                  companyNumber: "54345678"
                  dateOfRegistration: 0001-01-01T00:00:00
                  duplicate: false
                  significantPeople:
                  - id: b58ec846-1da1-4ac2-be27-b1dcbff8c8dd
                    forename: John
                    surname: Smith
                - id: 48641603-7593-46a9-b993-8ead4daca09e
                  companyName: Widget Services Limited
                  companyNumber: "23232321"
                  dateOfRegistration: 0001-01-01T00:00:00
                  duplicate: false
                  significantParentCompanies:
                  - id: ebbc9433-40a6-4197-902d-d4ff2efdbaa5
                    companyName: Widgets International Limited
                    companyNumber: "54345678"
                    addressLine1: 25 Westgate Street
                    locality: ""
                    region: Cardiff
                    postCode: CF101NS
                    dateOfRegistration: 1973-07-17T00:00:00
                    duplicate: true
                significantPeople:
                - id: 108db0e1-fe11-44be-ad8f-405ed57d3fbc
                  forename: John
                  surname: Smith
                  regEntryId: a5d3b128-f65d-4e6d-a9e2-ac8f2763ec7a
                - id: 965f3298-da35-4906-8d9e-d346008289dc
                  forename: Jane
                  surname: Smith
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Companies.CompanyDetail'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Companies.CompanyDetail'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Companies.CompanyDetail'
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        402:
          description: If the consumer doesn't have the required permission to use
            the endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
  /api/credit-status/perform:
    post:
      tags:
      - CreditStatus
      summary: Check includes identifying bankruptcy, insolvency, CCJ's or Company
        Directorship.
      operationId: CheckCreditStatus
      parameters:
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      requestBody:
        description: Object containing data required to perform the check.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.StatusChecks.StatusCheckRequest'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.StatusChecks.StatusCheckRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.StatusChecks.StatusCheckRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.StatusChecks.StatusCheckRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.StatusChecks.StatusCheckRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.StatusChecks.StatusCheckRequest'
          application/*+xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.StatusChecks.StatusCheckRequest'
        required: false
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.StatusChecks.StatusCheck'
              example:
                status: 3
                hasBeenOverridden: false
                checkDate: 2019-08-01T12:33:11
                insolvency:
                - type: 4
                  typeText: England and Wales DRO
                  name: ANGELA SPECIMEN
                  caseNo: IC123456789-22232
                  address:
                    address1: Flat 30
                    address2: Richmond Court
                    address3: St Peters Street
                    postcode: CF24 3AZ
                    dps: DPS1
                    isEmpty: false
                  dob: 1988-12-04T00:00:00
                  court: CARMARTHEN COUNTY COURT
                  startDate: 2017-12-01T00:00:00
                  status: CURRENT
                  occupation: Field Agent
                  aliases: ANGEL UK
                  description: ANGELA ZOE SPECIMEN TRADING AS ANGELS LIMITED
                  serviceOffice: MR JON WILLIAM JONES
                  telephoneNumber: "02920113244"
                  caseType: Standard
                  tradingNames: ANGELS LTD
                  debtTotal: £20000.00
                  assetTotal: £2000.00
                  presentationDate: 2018-01-15T00:00:00
                ccj:
                - name: ANGELA ZOE SPECIMEN
                  dob: 1988-12-04T00:00:00
                  address1: Flat 30
                  address2: Richmond Court, St. Peters Street
                  postcode: CF24 3AZ
                  judgementDate: 2017-11-09T00:00:00
                  judgementType: 2
                  judgementTypeText: Satisfaction
                  amount: £5000.00
                  caseNumber: CS1113-56-33
                  courtName: CARMARTHEN COUNTY COURT
                  dateEnd: 2017-11-09T00:00:00
                companyDirector:
                - matchType: 3
                  matchTypeText: Name, Address and Date of Birth
                  dateAppointed: 2015-06-11T00:00:00
                  companyRegNo: "00123456"
                  companyName: ANGELS LIMITED
                  registeredOffice: FLAT 3, RICHMOND COURT, ST. PETERS STREET, CARDIFF,
                    CF24 3AZ
                  companyAppointments:
                  - title: Ms
                    name: Angela Zoe Specimen
                    address: FLAT 30, RICHMOND COURT, ST. PETERS STREET, CARDIFF,
                      CF24 3AZ
                    dob: 1988-12-04T00:00:00
                    occupation: Field Agent
                    nationality: British
                    appointmentDate: 2015-06-11T00:00:00
                    appointmentType: Current Director
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.StatusChecks.StatusCheck'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.StatusChecks.StatusCheck'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.StatusChecks.StatusCheck'
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        402:
          description: Error code meaning that the operation was aborted due to insufficient
            credits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
      x-codegen-request-body-name: request
  /api/datachecks:
    post:
      tags:
      - DataChecks
      summary: Creates new data check against a specified registration.
      operationId: AddDataCheck
      parameters:
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      requestBody:
        description: Object containing data check details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.DataCheck.AddDataCheckRequest'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.DataCheck.AddDataCheckRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.DataCheck.AddDataCheckRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.DataCheck.AddDataCheckRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.DataCheck.AddDataCheckRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.DataCheck.AddDataCheckRequest'
          application/*+xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.DataCheck.AddDataCheckRequest'
        required: false
      responses:
        200:
          description: Details of newly added data check.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.DataCheck.AddDataCheckResponse'
              example:
                id: abcdef12-abcd-abcd-beef-ab123cd12345
                regCode: QX92TAG7
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.DataCheck.AddDataCheckResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.DataCheck.AddDataCheckResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.DataCheck.AddDataCheckResponse'
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        402:
          description: Error code meaning that the operation was aborted due to insufficient
            credits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
      x-codegen-request-body-name: dataCheck
  /api/images/selfie/{registrationId}:
    get:
      tags:
      - Images
      summary: Retrieve the selfie image associated with a registration.
      operationId: GetSelfieImage
      parameters:
      - name: registrationId
        in: path
        description: The id of the registration.
        required: true
        schema:
          type: string
          format: uuid
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Response containing the selfie image details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Images.GetSelfieImageResponse'
              example:
                url: https://url.to/a/selfie/image.jpg
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Images.GetSelfieImageResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Images.GetSelfieImageResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Images.GetSelfieImageResponse'
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        403:
          description: If requesting entity have no permission to access the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
  /api/images/selfie:
    post:
      tags:
      - Images
      summary: Add a selfie image to the registration.
      operationId: AddSelfieImage
      parameters:
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      requestBody:
        description: Object containing the selfie image and registration id.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Images.AddSelfieImageRequest'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Images.AddSelfieImageRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Images.AddSelfieImageRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Images.AddSelfieImageRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Images.AddSelfieImageRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Images.AddSelfieImageRequest'
          application/*+xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Images.AddSelfieImageRequest'
        required: false
      responses:
        200:
          description: Result of uploading selfie image; including liveness check
            indicator.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Images.AddSelfieImageResponse'
              example:
                livenessConfirmed: true
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Images.AddSelfieImageResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Images.AddSelfieImageResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Images.AddSelfieImageResponse'
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
      x-codegen-request-body-name: selfie
  /api/images/liveness/{registrationId}:
    get:
      tags:
      - Images
      summary: Retrieve the liveness action image (UAP) associated with a registration.
      operationId: GetLivenessImage
      parameters:
      - name: registrationId
        in: path
        description: The id of the registration.
        required: true
        schema:
          type: string
          format: uuid
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Response containing Liveness image details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Images.GetLivenessImageResponse'
              example:
                id: afbaa1d2-d81a-415d-bc51-092651c84bbb
                description: Touch your LEFT cheek with your LEFT hand
                url: https://example.com/image.jpg
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Images.GetLivenessImageResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Images.GetLivenessImageResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Images.GetLivenessImageResponse'
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        403:
          description: If requesting entity have no permission to access the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
  /api/images/liveness:
    post:
      tags:
      - Images
      summary: Add a liveness image (UAP) to the specified registration.
      operationId: AddLivenessImage
      parameters:
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      requestBody:
        description: Object containing the liveness image and registration id.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Images.AddLivenessImageRequest'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Images.AddLivenessImageRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Images.AddLivenessImageRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Images.AddLivenessImageRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Images.AddLivenessImageRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Images.AddLivenessImageRequest'
          application/*+xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Images.AddLivenessImageRequest'
        required: false
      responses:
        200:
          description: OK response indicating a successful action.
          content: {}
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
      x-codegen-request-body-name: liveness
  /api/images/liveness-performed/{registrationId}:
    get:
      tags:
      - Images
      summary: Retrieve the liveness performed image associated with a registration.
      operationId: GetLivenessPerformedImage
      parameters:
      - name: registrationId
        in: path
        description: The id of the registration.
        required: true
        schema:
          type: string
          format: uuid
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Response containing Liveness performed image details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Images.GetLivenessPerformedImageResponse'
              example:
                url: https://url.to/a/liveness-performed/image.jpg
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Images.GetLivenessPerformedImageResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Images.GetLivenessPerformedImageResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Images.GetLivenessPerformedImageResponse'
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        403:
          description: If requesting entity have no permission to access the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        404:
          description: If the liveness performed image doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
  /api/images/id-document/{registrationId}:
    get:
      tags:
      - Images
      summary: Get all id document images associated with a registration.
      operationId: GetIdDocumentImages
      parameters:
      - name: registrationId
        in: path
        description: The id of the registration.
        required: true
        schema:
          type: string
          format: uuid
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Details of the id documents associated with the registration.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Credas.Api.Models.Images.GetIdDocumentImageResponse'
              example:
              - url: https://
                hiResUrl: https://
                nfcFacialUrl: https://
                id: fedcba89-dead-1278-bead-8901234abcde
                dateCreated: 2018-02-23T17:22:11.044
                description: Passport
                status: 1
                facialMatch: true
                nameCheck: true
                nameCheckMethod: 0
                nfcCheck: true
                nfcReadStatus: 0
                forename: Alan
                middleName: William
                surname: Harper
                fullName: Alan Harper
                dateOfBirth: 1968-11-23T00:00:00
                countryCode: GBR
                country: United Kingdom
                documentNumber: "123456789"
                expiryDate: 2025-04-21T00:00:00
                isUnderReview: false
                documentAnalysisResult: 1
                mrz1: P<GBRHARPER<<ALAN<WILLIAM<<<<<<<<<<<<<<<<<<<
                mrz2: 1234567897GBR6811233M2504214<<<<<<<<<<<<<<06
                manuallyVerified: false
                documentSide: 1
              - url: https://
                hiResUrl: https://
                id: fedcba89-dead-1278-bead-8901234abcde
                dateCreated: 2018-02-23T19:24:50.875
                description: Driving Licence
                status: 2
                facialMatch: false
                nameCheck: true
                nameCheckMethod: 0
                nfcCheck: false
                nfcReadStatus: 0
                forename: Alan
                middleName: William
                surname: Harper
                fullName: Alan William Harper
                dateOfBirth: 1968-11-23T00:00:00
                countryCode: GBR
                country: United Kingdom
                documentNumber: HARPER765453P99RT
                expiryDate: 2025-04-21T00:00:00
                addressFull: 10 Downing St, Westminster, London, SW1A2AA
                addressPostcode: SW1A2AA
                addressCity: London
                isUnderReview: false
                documentAnalysisResult: 2
                manuallyVerified: true
                documentSide: 1
              - url: https://
                hiResUrl: https://
                id: fedcba89-dead-1278-bead-8901234abcff
                dateCreated: 2018-02-23T19:24:51.112
                description: Driving Licence
                status: 2
                facialMatch: false
                nameCheck: false
                nameCheckMethod: 0
                nfcCheck: false
                nfcReadStatus: 8
                forename: Alan
                middleName: William
                surname: Harper
                fullName: Alan William Harper
                dateOfBirth: 1968-11-23T00:00:00
                countryCode: GBR
                country: United Kingdom
                documentNumber: HARPER765453P99RT
                expiryDate: 2025-04-21T00:00:00
                isUnderReview: false
                documentAnalysisResult: 2
                manuallyVerified: false
                documentSide: 2
                primaryScanId: fedcba89-dead-1278-bead-8901234abcde
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Credas.Api.Models.Images.GetIdDocumentImageResponse'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Credas.Api.Models.Images.GetIdDocumentImageResponse'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Credas.Api.Models.Images.GetIdDocumentImageResponse'
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        403:
          description: If requesting entity have no permission to access the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
  /api/images/id-document:
    post:
      tags:
      - Images
      summary: Add an id document image to the specified registration.
      operationId: AddIdDocumentImage
      parameters:
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      requestBody:
        description: Object containing the id document image and registration id.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Images.AddIdDocumentImageRequest'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Images.AddIdDocumentImageRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Images.AddIdDocumentImageRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Images.AddIdDocumentImageRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Images.AddIdDocumentImageRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Images.AddIdDocumentImageRequest'
          application/*+xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Images.AddIdDocumentImageRequest'
        required: false
      responses:
        200:
          description: Details of the processed id document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Images.AddIdDocumentImageResponse'
              example:
                documentType: 1
                documentStatus: 1
                facialMatch: true
                id: a9c10b16-130b-4051-9d60-c0c6ee9dca76
                regCode: 57RV4345
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Images.AddIdDocumentImageResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Images.AddIdDocumentImageResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Images.AddIdDocumentImageResponse'
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        402:
          description: Error code meaning that the operation was aborted due to insufficient
            credits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
      x-codegen-request-body-name: idDocument
  /api/images/scan-report-pdf/{scanId}:
    get:
      tags:
      - Images
      summary: Returns a detailed report on the analysis that has taken place of a
        scanned document
      operationId: GetScanReportPdf
      parameters:
      - name: scanId
        in: path
        description: Id of the individual scanned document
        required: true
        schema:
          type: string
          format: uuid
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      responses:
        200:
          description: PDF document containing detail analysis of scanned documents
            as a byte stream.
          content:
            application/json:
              schema:
                type: string
                format: byte
              example: ZGVmZ2hp
            text/json:
              schema:
                type: string
                format: byte
            application/xml:
              schema:
                type: string
                format: byte
            text/xml:
              schema:
                type: string
                format: byte
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        403:
          description: If requesting entity have no permission to access the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        404:
          description: If scan matching the scanId was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
  /api/property-register:
    post:
      tags:
      - PropertyRegister
      summary: Creates new property registry check against the registration.
      operationId: AddPropertyRegisterCheck
      parameters:
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      requestBody:
        description: Object containing check details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.PropertyRegister.PropertyRegisterCheckRequest'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.PropertyRegister.PropertyRegisterCheckRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.PropertyRegister.PropertyRegisterCheckRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.PropertyRegister.PropertyRegisterCheckRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.PropertyRegister.PropertyRegisterCheckRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.PropertyRegister.PropertyRegisterCheckRequest'
          application/*+xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.PropertyRegister.PropertyRegisterCheckRequest'
        required: false
      responses:
        200:
          description: Details of newly added data check.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.PropertyRegister.PropertyRegisterCheckResponse'
              example:
                matchResult: 1
                matchResultText: Full Name Match
                propertyOwnership: 2
                propertyOwnershipText: Joint Ownership
                titleNumber: TMP123456
                checkStatus: 1
                hasBeenOverridden: false
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.PropertyRegister.PropertyRegisterCheckResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.PropertyRegister.PropertyRegisterCheckResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.PropertyRegister.PropertyRegisterCheckResponse'
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        402:
          description: Error code meaning that the operation was aborted due to insufficient
            credits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
      x-codegen-request-body-name: request
  /api/property-register/{id}:
    get:
      tags:
      - PropertyRegister
      summary: Retrieves property registry check associated with the registration.
      operationId: GetPropertyRegisterCheckResult
      parameters:
      - name: id
        in: path
        description: Id of the registration.
        required: true
        schema:
          type: string
          format: uuid
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Details of the property register check.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.PropertyRegister.PropertyRegisterCheckResponse'
              example:
                matchResult: 1
                matchResultText: Full Name Match
                propertyOwnership: 2
                propertyOwnershipText: Joint Ownership
                titleNumber: TMP123456
                checkStatus: 1
                hasBeenOverridden: false
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.PropertyRegister.PropertyRegisterCheckResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.PropertyRegister.PropertyRegisterCheckResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.PropertyRegister.PropertyRegisterCheckResponse'
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        404:
          description: If registration does not have associated property register
            check.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
  /api/registrations/instant:
    post:
      tags:
      - Registrations
      summary: Creates new registration record, adds an ID document and optional selfie
        image in one go.
      description: It's designed to provide a quick integration path for external
        systems which capture these details.
      operationId: AddInstantRegistration
      parameters:
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      requestBody:
        description: The Credas.Api.Models.Registrations.AddInstantRegistrationRequest
          object containing required data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.AddInstantRegistrationRequest'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.AddInstantRegistrationRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.AddInstantRegistrationRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.AddInstantRegistrationRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.AddInstantRegistrationRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.AddInstantRegistrationRequest'
          application/*+xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.AddInstantRegistrationRequest'
        required: false
      responses:
        200:
          description: OK response with object containing the document information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.AddInstantRegistrationResponse'
              example:
                documentType: 1
                documentStatus: 1
                facialMatch: true
                id: abcdef12-abcd-abcd-beef-ab123cd12345
                regCode: QX92TAG7
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.AddInstantRegistrationResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.AddInstantRegistrationResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.AddInstantRegistrationResponse'
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
      x-codegen-request-body-name: request
  /api/registrations:
    post:
      tags:
      - Registrations
      summary: Creates new registration.
      operationId: AddRegistration
      parameters:
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      requestBody:
        description: Object containing registration details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.AddRegistrationRequest'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.AddRegistrationRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.AddRegistrationRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.AddRegistrationRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.AddRegistrationRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.AddRegistrationRequest'
          application/*+xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.AddRegistrationRequest'
        required: false
      responses:
        200:
          description: Details of newly added registration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.AddRegistrationResponse'
              example:
                webJourneyUrl:
                  url: https://pi-verify.credas.co.uk/link/f7ec8ac1-d935-413b-9100-c7b9b498ca1d
                  validUntil: 2022-01-01T19:03:36.6782186Z
                id: abcdef12-abcd-abcd-beef-ab123cd12345
                regCode: QX92TAG7
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.AddRegistrationResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.AddRegistrationResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.AddRegistrationResponse'
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        402:
          description: Error code meaning that the operation was aborted due to insufficient
            credits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
      x-codegen-request-body-name: registration
  /api/registrations/{id}/check-submitted-id-documents:
    get:
      tags:
      - Registrations
      summary: Checks if submitted documents are sufficient to complete registration.
      operationId: CheckSubmittedIdDocuments
      parameters:
      - name: id
        in: path
        description: Id of the registration.
        required: true
        schema:
          type: string
          format: uuid
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK response with object containing the result of the document
            check.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.CheckSubmittedIdDocumentsResponse'
              example:
                checkCode: 3
                message: Please provide proof of address.
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.CheckSubmittedIdDocumentsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.CheckSubmittedIdDocumentsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.CheckSubmittedIdDocumentsResponse'
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
  /api/registrations/referenceid/{referenceId}/summary:
    get:
      tags:
      - Registrations
      summary: Finds registrations by the ReferenceId.
      operationId: GetRegistrationSummariesByReferenceId
      parameters:
      - name: referenceId
        in: path
        description: ReferenceId - from external system to match Registrations on.
        required: true
        schema:
          type: string
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Collection of Registration summary objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Credas.Api.Models.Registrations.RegistrationSummary'
              example:
              - referenceId: MyRef123
                dateCreated: 2018-02-23T12:54:31.611
                status: 2
                livenessVerified: true
                livenessStatus: 1
                rightToWorkDocumentsProvided: 1
                dataChecksPerformed: true
                dataCheckResult: 1
                dataCheckSources:
                - sourceType: 3
                  label: Mortality
                  dateCreated: 2018-02-23T12:54:32.017
                  status: 1
                  remarks:
                  - category: 1
                    description: Halo source indicates this person is not deceased
                      at address 1
                  - category: 4
                    description: No middle initial specified by user
                  hasPepSanctionsData: false
                  hasBeenOverridden: false
                - sourceType: 4
                  label: Address and DOB
                  dateCreated: 2018-02-23T12:54:32.017
                  status: 2
                  remarks:
                  - category: 1
                    description: '(Electoral Register) Address #1 details are valid'
                  - category: 2
                    description: '(Electoral Register) Surname details not matched
                      address #1'
                  hasPepSanctionsData: false
                  hasBeenOverridden: false
                - sourceType: 7
                  label: International Sanctions
                  dateCreated: 2018-02-23T12:54:32.017
                  status: 1
                  remarks:
                  - category: 1
                    description: Full name has not been matched.
                  hasPepSanctionsData: true
                  pepSanctionsData:
                  - fullName: Alan Stuart Harper
                    sanctionDates:
                    - year: 1937
                      month: 4
                      day: 3
                      date: 1937-04-03T12:00:00Z
                      type: 1
                    addresses:
                    - lines:
                      - 44 Lowbridge Street
                      - Pasadena
                      - California
                      - USA
                    positions:
                    - position: Head of local gov
                      country: USA
                  hasBeenOverridden: false
                idDocuments:
                - id: fedcba89-dead-1278-bead-8901234abcde
                  dateCreated: 2018-02-23T17:22:11.044
                  description: Passport
                  status: 1
                  facialMatch: true
                  nameCheck: true
                  nameCheckMethod: 0
                  nfcCheck: true
                  nfcReadStatus: 1
                  forename: Alan
                  middleName: William
                  surname: Harper
                  fullName: Alan Harper
                  dateOfBirth: 1968-11-23T00:00:00
                  countryCode: GBR
                  country: United Kingdom
                  documentNumber: "123456789"
                  expiryDate: 2025-04-21T00:00:00
                  isUnderReview: false
                  documentAnalysisResult: 1
                  mrz1: P<GBRHARPER<<ALAN<WILLIAM<<<<<<<<<<<<<<<<<<<
                  mrz2: 1234567897GBR6811233M2504214<<<<<<<<<<<<<<06
                  manuallyVerified: false
                  documentSide: 1
                - id: fedcba89-dead-1278-bead-8901234abcde
                  dateCreated: 2018-02-23T19:24:50.875
                  description: Driving Licence
                  status: 2
                  facialMatch: false
                  nameCheck: true
                  nameCheckMethod: 0
                  nfcCheck: false
                  nfcReadStatus: 8
                  forename: Alan
                  middleName: William
                  surname: Harper
                  fullName: Alan William Harper
                  dateOfBirth: 1968-11-23T00:00:00
                  countryCode: GBR
                  country: United Kingdom
                  documentNumber: HARPER765453P99RT
                  expiryDate: 2025-04-21T00:00:00
                  addressFull: 10 Downing St, Westminster, London, SW1A2AA
                  addressPostcode: SW1A2AA
                  addressCity: London
                  isUnderReview: false
                  documentAnalysisResult: 2
                  manuallyVerified: true
                  documentSide: 1
                - id: fedcba89-dead-1278-bead-8901234abcff
                  dateCreated: 2018-02-23T19:24:51.112
                  description: Driving Licence
                  status: 2
                  facialMatch: false
                  nameCheck: false
                  nameCheckMethod: 0
                  nfcCheck: false
                  nfcReadStatus: 8
                  forename: Alan
                  middleName: William
                  surname: Harper
                  fullName: Alan William Harper
                  dateOfBirth: 1968-11-23T00:00:00
                  countryCode: GBR
                  country: United Kingdom
                  documentNumber: HARPER765453P99RT
                  expiryDate: 2025-04-21T00:00:00
                  isUnderReview: false
                  documentAnalysisResult: 2
                  manuallyVerified: false
                  documentSide: 2
                  primaryScanId: fedcba89-dead-1278-bead-8901234abcde
                email: alan.harper@email.com
                phoneNumber: +4471234567890
                forename: Alan
                surname: Harper
                regTypeId: 12345678-1234-1234-1234-1234567890ab
                personalDetails:
                  forename: Alan William
                  surname: Harper
                  dateOfBirth: 1978-11-09T00:00:00
                  address:
                    addressLine1: Flat 30
                    addressLine2: Richmond Court, St. Peters Street
                    city: Cardiff
                    postcode: CF24 3AZ
                    country: United Kingdom
                bankAccountChecks:
                - checkId: 12345678-1234-5678-abcd-1234567890ab
                  checkDate: 2019-08-01T12:15:22
                  sortcode: "123456"
                  accountNumber: "12345678"
                  referenceId: RF1234
                  error: false
                  accountValid: true
                  sortcodeValidation: 2
                  sortcodeValidationText: Valid
                  accountNumberValidation: 2
                  accountNumberValidationText: Valid
                  nameValidation: 2
                  nameValidationText: Valid
                  addressValidation: 2
                  addressValidationText: Current address
                  accountStatus: 2
                  accountStatusText: Live
                  checkStatus: 1
                  hasBeenOverridden: false
                creditStatusCheck:
                  status: 3
                  hasBeenOverridden: false
                  checkDate: 2019-08-01T12:33:11
                  insolvency:
                  - type: 4
                    typeText: England and Wales DRO
                    name: ANGELA SPECIMEN
                    caseNo: IC123456789-22232
                    address:
                      address1: Flat 30
                      address2: Richmond Court
                      address3: St Peters Street
                      postcode: CF24 3AZ
                      dps: DPS1
                      isEmpty: false
                    dob: 1988-12-04T00:00:00
                    court: CARMARTHEN COUNTY COURT
                    startDate: 2017-12-01T00:00:00
                    status: CURRENT
                    occupation: Field Agent
                    aliases: ANGEL UK
                    description: ANGELA ZOE SPECIMEN TRADING AS ANGELS LIMITED
                    serviceOffice: MR JON WILLIAM JONES
                    telephoneNumber: "02920113244"
                    caseType: Standard
                    tradingNames: ANGELS LTD
                    debtTotal: £20000.00
                    assetTotal: £2000.00
                    presentationDate: 2018-01-15T00:00:00
                  ccj:
                  - name: ANGELA ZOE SPECIMEN
                    dob: 1988-12-04T00:00:00
                    address1: Flat 30
                    address2: Richmond Court, St. Peters Street
                    postcode: CF24 3AZ
                    judgementDate: 2017-11-09T00:00:00
                    judgementType: 2
                    judgementTypeText: Satisfaction
                    amount: £5000.00
                    caseNumber: CS1113-56-33
                    courtName: CARMARTHEN COUNTY COURT
                    dateEnd: 2017-11-09T00:00:00
                  companyDirector:
                  - matchType: 3
                    matchTypeText: Name, Address and Date of Birth
                    dateAppointed: 2015-06-11T00:00:00
                    companyRegNo: "00123456"
                    companyName: ANGELS LIMITED
                    registeredOffice: FLAT 3, RICHMOND COURT, ST. PETERS STREET, CARDIFF,
                      CF24 3AZ
                    companyAppointments:
                    - title: Ms
                      name: Angela Zoe Specimen
                      address: FLAT 30, RICHMOND COURT, ST. PETERS STREET, CARDIFF,
                        CF24 3AZ
                      dob: 1988-12-04T00:00:00
                      occupation: Field Agent
                      nationality: British
                      appointmentDate: 2015-06-11T00:00:00
                      appointmentType: Current Director
                proofOfOwnershipCheck:
                  matchResult: 1
                  matchResultText: Full Name Match
                  propertyOwnership: 2
                  propertyOwnershipText: Joint Ownership
                  titleNumber: TMP123456
                  checkStatus: 1
                  hasBeenOverridden: false
                isAgentLed: false
                livenessMethod: 1
                customTermsAccepted: false
                id: abcdef12-abcd-abcd-beef-ab123cd12345
                regCode: QX92TAG7
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Credas.Api.Models.Registrations.RegistrationSummary'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Credas.Api.Models.Registrations.RegistrationSummary'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Credas.Api.Models.Registrations.RegistrationSummary'
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        403:
          description: If requesting entity have no permission to access the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        404:
          description: If registration matching the RegCode was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
  /api/registrations/{id}/summary:
    get:
      tags:
      - Registrations
      summary: Finds a registration by the Id.
      operationId: GetRegistrationSummary
      parameters:
      - name: id
        in: path
        description: Id of the registration.
        required: true
        schema:
          type: string
          format: uuid
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Registration summary object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.RegistrationSummary'
              example:
                referenceId: MyRef123
                dateCreated: 2018-02-23T12:54:31.611
                status: 2
                livenessVerified: true
                livenessStatus: 1
                rightToWorkDocumentsProvided: 1
                dataChecksPerformed: true
                dataCheckResult: 1
                dataCheckSources:
                - sourceType: 3
                  label: Mortality
                  dateCreated: 2018-02-23T12:54:32.017
                  status: 1
                  remarks:
                  - category: 1
                    description: Halo source indicates this person is not deceased
                      at address 1
                  - category: 4
                    description: No middle initial specified by user
                  hasPepSanctionsData: false
                  hasBeenOverridden: false
                - sourceType: 4
                  label: Address and DOB
                  dateCreated: 2018-02-23T12:54:32.017
                  status: 2
                  remarks:
                  - category: 1
                    description: '(Electoral Register) Address #1 details are valid'
                  - category: 2
                    description: '(Electoral Register) Surname details not matched
                      address #1'
                  hasPepSanctionsData: false
                  hasBeenOverridden: false
                - sourceType: 7
                  label: International Sanctions
                  dateCreated: 2018-02-23T12:54:32.017
                  status: 1
                  remarks:
                  - category: 1
                    description: Full name has not been matched.
                  hasPepSanctionsData: true
                  pepSanctionsData:
                  - fullName: Alan Stuart Harper
                    sanctionDates:
                    - year: 1937
                      month: 4
                      day: 3
                      date: 1937-04-03T12:00:00Z
                      type: 1
                    addresses:
                    - lines:
                      - 44 Lowbridge Street
                      - Pasadena
                      - California
                      - USA
                    positions:
                    - position: Head of local gov
                      country: USA
                  hasBeenOverridden: false
                idDocuments:
                - id: fedcba89-dead-1278-bead-8901234abcde
                  dateCreated: 2018-02-23T17:22:11.044
                  description: Passport
                  status: 1
                  facialMatch: true
                  nameCheck: true
                  nameCheckMethod: 0
                  nfcCheck: true
                  nfcReadStatus: 1
                  forename: Alan
                  middleName: William
                  surname: Harper
                  fullName: Alan Harper
                  dateOfBirth: 1968-11-23T00:00:00
                  countryCode: GBR
                  country: United Kingdom
                  documentNumber: "123456789"
                  expiryDate: 2025-04-21T00:00:00
                  isUnderReview: false
                  documentAnalysisResult: 1
                  mrz1: P<GBRHARPER<<ALAN<WILLIAM<<<<<<<<<<<<<<<<<<<
                  mrz2: 1234567897GBR6811233M2504214<<<<<<<<<<<<<<06
                  manuallyVerified: false
                  documentSide: 1
                - id: fedcba89-dead-1278-bead-8901234abcde
                  dateCreated: 2018-02-23T19:24:50.875
                  description: Driving Licence
                  status: 2
                  facialMatch: false
                  nameCheck: true
                  nameCheckMethod: 0
                  nfcCheck: false
                  nfcReadStatus: 8
                  forename: Alan
                  middleName: William
                  surname: Harper
                  fullName: Alan William Harper
                  dateOfBirth: 1968-11-23T00:00:00
                  countryCode: GBR
                  country: United Kingdom
                  documentNumber: HARPER765453P99RT
                  expiryDate: 2025-04-21T00:00:00
                  addressFull: 10 Downing St, Westminster, London, SW1A2AA
                  addressPostcode: SW1A2AA
                  addressCity: London
                  isUnderReview: false
                  documentAnalysisResult: 2
                  manuallyVerified: true
                  documentSide: 1
                - id: fedcba89-dead-1278-bead-8901234abcff
                  dateCreated: 2018-02-23T19:24:51.112
                  description: Driving Licence
                  status: 2
                  facialMatch: false
                  nameCheck: false
                  nameCheckMethod: 0
                  nfcCheck: false
                  nfcReadStatus: 8
                  forename: Alan
                  middleName: William
                  surname: Harper
                  fullName: Alan William Harper
                  dateOfBirth: 1968-11-23T00:00:00
                  countryCode: GBR
                  country: United Kingdom
                  documentNumber: HARPER765453P99RT
                  expiryDate: 2025-04-21T00:00:00
                  isUnderReview: false
                  documentAnalysisResult: 2
                  manuallyVerified: false
                  documentSide: 2
                  primaryScanId: fedcba89-dead-1278-bead-8901234abcde
                email: alan.harper@email.com
                phoneNumber: +4471234567890
                forename: Alan
                surname: Harper
                regTypeId: 12345678-1234-1234-1234-1234567890ab
                personalDetails:
                  forename: Alan William
                  surname: Harper
                  dateOfBirth: 1978-11-09T00:00:00
                  address:
                    addressLine1: Flat 30
                    addressLine2: Richmond Court, St. Peters Street
                    city: Cardiff
                    postcode: CF24 3AZ
                    country: United Kingdom
                bankAccountChecks:
                - checkId: 12345678-1234-5678-abcd-1234567890ab
                  checkDate: 2019-08-01T12:15:22
                  sortcode: "123456"
                  accountNumber: "12345678"
                  referenceId: RF1234
                  error: false
                  accountValid: true
                  sortcodeValidation: 2
                  sortcodeValidationText: Valid
                  accountNumberValidation: 2
                  accountNumberValidationText: Valid
                  nameValidation: 2
                  nameValidationText: Valid
                  addressValidation: 2
                  addressValidationText: Current address
                  accountStatus: 2
                  accountStatusText: Live
                  checkStatus: 1
                  hasBeenOverridden: false
                creditStatusCheck:
                  status: 3
                  hasBeenOverridden: false
                  checkDate: 2019-08-01T12:33:11
                  insolvency:
                  - type: 4
                    typeText: England and Wales DRO
                    name: ANGELA SPECIMEN
                    caseNo: IC123456789-22232
                    address:
                      address1: Flat 30
                      address2: Richmond Court
                      address3: St Peters Street
                      postcode: CF24 3AZ
                      dps: DPS1
                      isEmpty: false
                    dob: 1988-12-04T00:00:00
                    court: CARMARTHEN COUNTY COURT
                    startDate: 2017-12-01T00:00:00
                    status: CURRENT
                    occupation: Field Agent
                    aliases: ANGEL UK
                    description: ANGELA ZOE SPECIMEN TRADING AS ANGELS LIMITED
                    serviceOffice: MR JON WILLIAM JONES
                    telephoneNumber: "02920113244"
                    caseType: Standard
                    tradingNames: ANGELS LTD
                    debtTotal: £20000.00
                    assetTotal: £2000.00
                    presentationDate: 2018-01-15T00:00:00
                  ccj:
                  - name: ANGELA ZOE SPECIMEN
                    dob: 1988-12-04T00:00:00
                    address1: Flat 30
                    address2: Richmond Court, St. Peters Street
                    postcode: CF24 3AZ
                    judgementDate: 2017-11-09T00:00:00
                    judgementType: 2
                    judgementTypeText: Satisfaction
                    amount: £5000.00
                    caseNumber: CS1113-56-33
                    courtName: CARMARTHEN COUNTY COURT
                    dateEnd: 2017-11-09T00:00:00
                  companyDirector:
                  - matchType: 3
                    matchTypeText: Name, Address and Date of Birth
                    dateAppointed: 2015-06-11T00:00:00
                    companyRegNo: "00123456"
                    companyName: ANGELS LIMITED
                    registeredOffice: FLAT 3, RICHMOND COURT, ST. PETERS STREET, CARDIFF,
                      CF24 3AZ
                    companyAppointments:
                    - title: Ms
                      name: Angela Zoe Specimen
                      address: FLAT 30, RICHMOND COURT, ST. PETERS STREET, CARDIFF,
                        CF24 3AZ
                      dob: 1988-12-04T00:00:00
                      occupation: Field Agent
                      nationality: British
                      appointmentDate: 2015-06-11T00:00:00
                      appointmentType: Current Director
                proofOfOwnershipCheck:
                  matchResult: 1
                  matchResultText: Full Name Match
                  propertyOwnership: 2
                  propertyOwnershipText: Joint Ownership
                  titleNumber: TMP123456
                  checkStatus: 1
                  hasBeenOverridden: false
                isAgentLed: false
                livenessMethod: 1
                customTermsAccepted: false
                id: abcdef12-abcd-abcd-beef-ab123cd12345
                regCode: QX92TAG7
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.RegistrationSummary'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.RegistrationSummary'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.RegistrationSummary'
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        403:
          description: If requesting entity have no permission to access the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        404:
          description: If registration matching the Id was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
  /api/registrations/regcode/{regCode}/summary:
    get:
      tags:
      - Registrations
      summary: Finds a registration by the RegCode.
      operationId: GetRegistrationSummaryByRegCode
      parameters:
      - name: regCode
        in: path
        description: RegCode - short unique identifier.
        required: true
        schema:
          type: string
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Registration summary object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.RegistrationSummary'
              example:
                referenceId: MyRef123
                dateCreated: 2018-02-23T12:54:31.611
                status: 2
                livenessVerified: true
                livenessStatus: 1
                rightToWorkDocumentsProvided: 1
                dataChecksPerformed: true
                dataCheckResult: 1
                dataCheckSources:
                - sourceType: 3
                  label: Mortality
                  dateCreated: 2018-02-23T12:54:32.017
                  status: 1
                  remarks:
                  - category: 1
                    description: Halo source indicates this person is not deceased
                      at address 1
                  - category: 4
                    description: No middle initial specified by user
                  hasPepSanctionsData: false
                  hasBeenOverridden: false
                - sourceType: 4
                  label: Address and DOB
                  dateCreated: 2018-02-23T12:54:32.017
                  status: 2
                  remarks:
                  - category: 1
                    description: '(Electoral Register) Address #1 details are valid'
                  - category: 2
                    description: '(Electoral Register) Surname details not matched
                      address #1'
                  hasPepSanctionsData: false
                  hasBeenOverridden: false
                - sourceType: 7
                  label: International Sanctions
                  dateCreated: 2018-02-23T12:54:32.017
                  status: 1
                  remarks:
                  - category: 1
                    description: Full name has not been matched.
                  hasPepSanctionsData: true
                  pepSanctionsData:
                  - fullName: Alan Stuart Harper
                    sanctionDates:
                    - year: 1937
                      month: 4
                      day: 3
                      date: 1937-04-03T12:00:00Z
                      type: 1
                    addresses:
                    - lines:
                      - 44 Lowbridge Street
                      - Pasadena
                      - California
                      - USA
                    positions:
                    - position: Head of local gov
                      country: USA
                  hasBeenOverridden: false
                idDocuments:
                - id: fedcba89-dead-1278-bead-8901234abcde
                  dateCreated: 2018-02-23T17:22:11.044
                  description: Passport
                  status: 1
                  facialMatch: true
                  nameCheck: true
                  nameCheckMethod: 0
                  nfcCheck: true
                  nfcReadStatus: 1
                  forename: Alan
                  middleName: William
                  surname: Harper
                  fullName: Alan Harper
                  dateOfBirth: 1968-11-23T00:00:00
                  countryCode: GBR
                  country: United Kingdom
                  documentNumber: "123456789"
                  expiryDate: 2025-04-21T00:00:00
                  isUnderReview: false
                  documentAnalysisResult: 1
                  mrz1: P<GBRHARPER<<ALAN<WILLIAM<<<<<<<<<<<<<<<<<<<
                  mrz2: 1234567897GBR6811233M2504214<<<<<<<<<<<<<<06
                  manuallyVerified: false
                  documentSide: 1
                - id: fedcba89-dead-1278-bead-8901234abcde
                  dateCreated: 2018-02-23T19:24:50.875
                  description: Driving Licence
                  status: 2
                  facialMatch: false
                  nameCheck: true
                  nameCheckMethod: 0
                  nfcCheck: false
                  nfcReadStatus: 8
                  forename: Alan
                  middleName: William
                  surname: Harper
                  fullName: Alan William Harper
                  dateOfBirth: 1968-11-23T00:00:00
                  countryCode: GBR
                  country: United Kingdom
                  documentNumber: HARPER765453P99RT
                  expiryDate: 2025-04-21T00:00:00
                  addressFull: 10 Downing St, Westminster, London, SW1A2AA
                  addressPostcode: SW1A2AA
                  addressCity: London
                  isUnderReview: false
                  documentAnalysisResult: 2
                  manuallyVerified: true
                  documentSide: 1
                - id: fedcba89-dead-1278-bead-8901234abcff
                  dateCreated: 2018-02-23T19:24:51.112
                  description: Driving Licence
                  status: 2
                  facialMatch: false
                  nameCheck: false
                  nameCheckMethod: 0
                  nfcCheck: false
                  nfcReadStatus: 8
                  forename: Alan
                  middleName: William
                  surname: Harper
                  fullName: Alan William Harper
                  dateOfBirth: 1968-11-23T00:00:00
                  countryCode: GBR
                  country: United Kingdom
                  documentNumber: HARPER765453P99RT
                  expiryDate: 2025-04-21T00:00:00
                  isUnderReview: false
                  documentAnalysisResult: 2
                  manuallyVerified: false
                  documentSide: 2
                  primaryScanId: fedcba89-dead-1278-bead-8901234abcde
                email: alan.harper@email.com
                phoneNumber: +4471234567890
                forename: Alan
                surname: Harper
                regTypeId: 12345678-1234-1234-1234-1234567890ab
                personalDetails:
                  forename: Alan William
                  surname: Harper
                  dateOfBirth: 1978-11-09T00:00:00
                  address:
                    addressLine1: Flat 30
                    addressLine2: Richmond Court, St. Peters Street
                    city: Cardiff
                    postcode: CF24 3AZ
                    country: United Kingdom
                bankAccountChecks:
                - checkId: 12345678-1234-5678-abcd-1234567890ab
                  checkDate: 2019-08-01T12:15:22
                  sortcode: "123456"
                  accountNumber: "12345678"
                  referenceId: RF1234
                  error: false
                  accountValid: true
                  sortcodeValidation: 2
                  sortcodeValidationText: Valid
                  accountNumberValidation: 2
                  accountNumberValidationText: Valid
                  nameValidation: 2
                  nameValidationText: Valid
                  addressValidation: 2
                  addressValidationText: Current address
                  accountStatus: 2
                  accountStatusText: Live
                  checkStatus: 1
                  hasBeenOverridden: false
                creditStatusCheck:
                  status: 3
                  hasBeenOverridden: false
                  checkDate: 2019-08-01T12:33:11
                  insolvency:
                  - type: 4
                    typeText: England and Wales DRO
                    name: ANGELA SPECIMEN
                    caseNo: IC123456789-22232
                    address:
                      address1: Flat 30
                      address2: Richmond Court
                      address3: St Peters Street
                      postcode: CF24 3AZ
                      dps: DPS1
                      isEmpty: false
                    dob: 1988-12-04T00:00:00
                    court: CARMARTHEN COUNTY COURT
                    startDate: 2017-12-01T00:00:00
                    status: CURRENT
                    occupation: Field Agent
                    aliases: ANGEL UK
                    description: ANGELA ZOE SPECIMEN TRADING AS ANGELS LIMITED
                    serviceOffice: MR JON WILLIAM JONES
                    telephoneNumber: "02920113244"
                    caseType: Standard
                    tradingNames: ANGELS LTD
                    debtTotal: £20000.00
                    assetTotal: £2000.00
                    presentationDate: 2018-01-15T00:00:00
                  ccj:
                  - name: ANGELA ZOE SPECIMEN
                    dob: 1988-12-04T00:00:00
                    address1: Flat 30
                    address2: Richmond Court, St. Peters Street
                    postcode: CF24 3AZ
                    judgementDate: 2017-11-09T00:00:00
                    judgementType: 2
                    judgementTypeText: Satisfaction
                    amount: £5000.00
                    caseNumber: CS1113-56-33
                    courtName: CARMARTHEN COUNTY COURT
                    dateEnd: 2017-11-09T00:00:00
                  companyDirector:
                  - matchType: 3
                    matchTypeText: Name, Address and Date of Birth
                    dateAppointed: 2015-06-11T00:00:00
                    companyRegNo: "00123456"
                    companyName: ANGELS LIMITED
                    registeredOffice: FLAT 3, RICHMOND COURT, ST. PETERS STREET, CARDIFF,
                      CF24 3AZ
                    companyAppointments:
                    - title: Ms
                      name: Angela Zoe Specimen
                      address: FLAT 30, RICHMOND COURT, ST. PETERS STREET, CARDIFF,
                        CF24 3AZ
                      dob: 1988-12-04T00:00:00
                      occupation: Field Agent
                      nationality: British
                      appointmentDate: 2015-06-11T00:00:00
                      appointmentType: Current Director
                proofOfOwnershipCheck:
                  matchResult: 1
                  matchResultText: Full Name Match
                  propertyOwnership: 2
                  propertyOwnershipText: Joint Ownership
                  titleNumber: TMP123456
                  checkStatus: 1
                  hasBeenOverridden: false
                isAgentLed: false
                livenessMethod: 1
                customTermsAccepted: false
                id: abcdef12-abcd-abcd-beef-ab123cd12345
                regCode: QX92TAG7
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.RegistrationSummary'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.RegistrationSummary'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.RegistrationSummary'
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        403:
          description: If requesting entity have no permission to access the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        404:
          description: If registration matching the RegCode was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
  /api/registrations/{id}/supported-id-documents:
    get:
      tags:
      - Registrations
      summary: Get a list of supported id document for the specified registration
        id.
      operationId: GetRegistrationSupportedIdDocuments
      parameters:
      - name: id
        in: path
        description: Id of the registration.
        required: true
        schema:
          type: string
          format: uuid
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      responses:
        200:
          description: List of supported id document objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.SupportedIdDocument'
              example:
              - name: Passport
                type: 1
              - name: Driving Licence
                type: 2
              - name: National ID Card
                type: 3
              - name: CSCS Card
                type: 4
              - name: Residence Permit
                type: 5
              - name: Visa
                type: 6
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.SupportedIdDocument'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.SupportedIdDocument'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.SupportedIdDocument'
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        403:
          description: If requesting entity have no permission to access the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        404:
          description: If registration matching the Id was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
  /api/registrations/{id}/status:
    put:
      tags:
      - Registrations
      summary: Updates the status of the registration to one specified in the request.
      operationId: UpdateRegistrationStatus
      parameters:
      - name: id
        in: path
        description: Id of the registration.
        required: true
        schema:
          type: string
          format: uuid
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      requestBody:
        description: Request object containing the details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.UpdateRegistrationStatusRequest'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.UpdateRegistrationStatusRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.UpdateRegistrationStatusRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.UpdateRegistrationStatusRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.UpdateRegistrationStatusRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.UpdateRegistrationStatusRequest'
          application/*+xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.UpdateRegistrationStatusRequest'
        required: false
      responses:
        200:
          description: Update was successful.
          content: {}
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        404:
          description: If the registration was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
      x-codegen-request-body-name: request
  /api/registrations/{id}/pdf-export:
    get:
      tags:
      - Registrations
      summary: Returns PDF export for a given registration.
      operationId: GetRegistrationPdfExport
      parameters:
      - name: id
        in: path
        description: Id of the registration.
        required: true
        schema:
          type: string
          format: uuid
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      responses:
        200:
          description: PDF document containing registration extract as byte stream.
          content:
            application/json:
              schema:
                type: string
                format: byte
              example: ZGVmZ2hp
            text/json:
              schema:
                type: string
                format: byte
            application/xml:
              schema:
                type: string
                format: byte
            text/xml:
              schema:
                type: string
                format: byte
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        403:
          description: If requesting entity have no permission to access the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        404:
          description: If registration matching the Id was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
  /api/registrations/{id}/pdf-export-sections:
    get:
      tags:
      - Registrations
      summary: 'Returns PDF export for a given registration with the requested sections:
        Comments, ContactDetails, StandardChecks, PepSanctionChecks, ProofOfOwnership,
        BankAccountCheck, CreditStatusCheck, Liveness'
      operationId: GetRegistrationPdfExport
      parameters:
      - name: id
        in: path
        description: Id of the registration.
        required: true
        schema:
          type: string
          format: uuid
      - name: Comments
        in: query
        schema:
          type: boolean
      - name: ContactDetails
        in: query
        schema:
          type: boolean
      - name: StandardChecks
        in: query
        schema:
          type: boolean
      - name: PepSanctionChecks
        in: query
        schema:
          type: boolean
      - name: ProofOfOwnership
        in: query
        schema:
          type: boolean
      - name: BankAccountCheck
        in: query
        schema:
          type: boolean
      - name: CreditStatusCheck
        in: query
        schema:
          type: boolean
      - name: Liveness
        in: query
        schema:
          type: boolean
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      responses:
        200:
          description: PDF document containing registration extract as byte stream.
          content:
            application/json:
              schema:
                type: string
                format: byte
              example: ZGVmZ2hp
            text/json:
              schema:
                type: string
                format: byte
            application/xml:
              schema:
                type: string
                format: byte
            text/xml:
              schema:
                type: string
                format: byte
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        403:
          description: If requesting entity have no permission to access the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        404:
          description: If registration matching the Id was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
  /api/registrations/{id}/override-check-status:
    put:
      tags:
      - Registrations
      summary: Sets an override for a specific check on the registration.
      operationId: OverrideCheckStatus
      parameters:
      - name: id
        in: path
        description: Id of the registration.
        required: true
        schema:
          type: string
          format: uuid
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      requestBody:
        description: Request data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.StatusOverrides.OverrideCheckStatusRequest'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.StatusOverrides.OverrideCheckStatusRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.StatusOverrides.OverrideCheckStatusRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.StatusOverrides.OverrideCheckStatusRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.StatusOverrides.OverrideCheckStatusRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.StatusOverrides.OverrideCheckStatusRequest'
          application/*+xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.StatusOverrides.OverrideCheckStatusRequest'
        required: false
      responses:
        200:
          description: Status of the operation.
          content: {}
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        403:
          description: If requesting entity have no permission to access the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        404:
          description: If registration matching the Id was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
      x-codegen-request-body-name: request
  /api/registrations/{id}/resend-invitation:
    post:
      tags:
      - Registrations
      summary: Resends any invitation for the specified registration.
      operationId: ResendInvitation
      parameters:
      - name: id
        in: path
        description: Id of the registration.
        required: true
        schema:
          type: string
          format: uuid
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Invitation sent.
          content: {}
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        403:
          description: If requesting entity have no permission to access the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        404:
          description: If registration matching the Id was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
  /api/registrations/{id}/settings:
    get:
      tags:
      - Registrations
      summary: Gets registration settings or nothing if there are no settings associated
        with the registration.
      operationId: GetRegistrationSettings
      parameters:
      - name: id
        in: path
        description: Id of the registration.
        required: true
        schema:
          type: string
          format: uuid
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Registration settings updated.
          content: {}
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        403:
          description: If requesting entity have no permission to access the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        404:
          description: If registration matching the Id was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
    put:
      tags:
      - Registrations
      summary: Updates registration settings.
      operationId: UpdateRegistrationSettings
      parameters:
      - name: id
        in: path
        description: Id of the registration.
        required: true
        schema:
          type: string
          format: uuid
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      requestBody:
        description: Object containing registration settings.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.RegistrationSettings'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.RegistrationSettings'
          text/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.RegistrationSettings'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.RegistrationSettings'
          application/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.RegistrationSettings'
          text/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.RegistrationSettings'
          application/*+xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.RegistrationSettings'
        required: false
      responses:
        200:
          description: Registration settings updated.
          content: {}
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        403:
          description: If requesting entity have no permission to access the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        404:
          description: If registration matching the Id was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
      x-codegen-request-body-name: settings
  /api/registrations/{id}/contact-details:
    put:
      tags:
      - Registrations
      summary: Updates a registration's contact details.
      operationId: UpdateContactDetails
      parameters:
      - name: id
        in: path
        description: Id of the registration.
        required: true
        schema:
          type: string
          format: uuid
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      requestBody:
        description: Object containing contact details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.UpdateContactDetailsRequest'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.UpdateContactDetailsRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.UpdateContactDetailsRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.UpdateContactDetailsRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.UpdateContactDetailsRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.UpdateContactDetailsRequest'
          application/*+xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.Registrations.UpdateContactDetailsRequest'
        required: false
      responses:
        200:
          description: Registration contact details updated.
          content: {}
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        403:
          description: If requesting entity have no permission to access the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        404:
          description: If registration matching the Id was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
      x-codegen-request-body-name: details
  /api/registrations/search:
    get:
      tags:
      - Registrations
      summary: "Gets paged registration list by search criteria or nothing if there\
        \ are no matching fields.\nOptional parameters may be appended to the query\
        \ string.\nMaximum page size is 50."
      operationId: GetRegistrationSearch
      parameters:
      - name: pageNum
        in: query
        description: Zero-based page number to retrieve.
        schema:
          type: integer
          format: int32
          default: 0
      - name: pageSize
        in: query
        description: Number of records to return on each request (Maximum value is
          50).
        schema:
          type: integer
          format: int32
          default: 50
      - name: forename
        in: query
        description: Search by forename.
        schema:
          type: string
      - name: surname
        in: query
        description: Search by surname.
        schema:
          type: string
      - name: email
        in: query
        description: Search by user email.
        schema:
          type: string
      - name: dob
        in: query
        description: Date of birth in (yyyy-MM-dd) format
        schema:
          type: string
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Registration summary object list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.PagedRegistrationSummary'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.PagedRegistrationSummary'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.PagedRegistrationSummary'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Registrations.PagedRegistrationSummary'
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        403:
          description: If requesting entity have no permission to access the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        404:
          description: If registration matching the Id was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
  /api/registrations/{id}/pdf-settlement-status:
    get:
      tags:
      - Registrations
      summary: Returns settlement status PDF (Share Code) for a given registration.
      operationId: GetShareCodePdfExport
      parameters:
      - name: id
        in: path
        description: Id of the registration.
        required: true
        schema:
          type: string
          format: uuid
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      responses:
        200:
          description: PDF document containing settlement status information extract
            as byte stream.
          content:
            application/json:
              schema:
                type: string
                format: byte
              example: ZGVmZ2hp
            text/json:
              schema:
                type: string
                format: byte
            application/xml:
              schema:
                type: string
                format: byte
            text/xml:
              schema:
                type: string
                format: byte
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        403:
          description: If requesting entity have no permission to access the resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        404:
          description: If registration matching the Id was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
  /api/reg-types:
    get:
      tags:
      - RegTypes
      summary: Gets all available RegTypes.
      operationId: GetAll
      parameters:
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      responses:
        200:
          description: A collection of available RegTypes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Credas.Api.Models.RegTypes.RegType'
              example:
              - id: 12345678-1234-1234-1234-1234567890ab
                name: Standard AML Checks
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Credas.Api.Models.RegTypes.RegType'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Credas.Api.Models.RegTypes.RegType'
            text/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Credas.Api.Models.RegTypes.RegType'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
  /api/report-view/by-referenceid:
    post:
      tags:
      - ReportView
      summary: Retrieves secure links to registration details pages searching by the
        Reference Id.
      description: "It may return none, one or many (up to 20) matching results.\
        \nEach result contains a secure url; UTC date/time of when the link expires;\
        \ name details of a person associated with the registration."
      operationId: GetReportViewByReferenceId
      parameters:
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      requestBody:
        description: Request object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.ReportView.GetReportViewByReferenceIdRequest'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.ReportView.GetReportViewByReferenceIdRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.ReportView.GetReportViewByReferenceIdRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.ReportView.GetReportViewByReferenceIdRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.ReportView.GetReportViewByReferenceIdRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.ReportView.GetReportViewByReferenceIdRequest'
          application/*+xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.ReportView.GetReportViewByReferenceIdRequest'
        required: false
      responses:
        200:
          description: Results of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.ReportView.GetReportViewResponse'
              example:
                results:
                - url: https://report.credas.co.uk/link/f7ec8ac1-d935-413b-9100-c7b9b498ca1d
                  validUntil: 2022-01-01T19:03:36.7150107Z
                  forename: Edward
                  surname: Roberts
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.ReportView.GetReportViewResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.ReportView.GetReportViewResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.ReportView.GetReportViewResponse'
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
      x-codegen-request-body-name: request
  /api/report-view/by-registrationid:
    post:
      tags:
      - ReportView
      summary: Retrieves secure link to registration details page searching by the
        Registration Id.
      description: "It may return none or one matching result.\nEach result contains\
        \ a secure url; UTC date/time of when the link expires; name details of a\
        \ person associated with the registration."
      operationId: GetReportViewByRegistrationId
      parameters:
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      requestBody:
        description: Request object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.ReportView.GetReportViewByRegistrationIdRequest'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.ReportView.GetReportViewByRegistrationIdRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.ReportView.GetReportViewByRegistrationIdRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.ReportView.GetReportViewByRegistrationIdRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.ReportView.GetReportViewByRegistrationIdRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.ReportView.GetReportViewByRegistrationIdRequest'
          application/*+xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.ReportView.GetReportViewByRegistrationIdRequest'
        required: false
      responses:
        200:
          description: Results of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.ReportView.GetReportViewResponse'
              example:
                results:
                - url: https://report.credas.co.uk/link/66ddf7c2-d3b1-4db3-ac13-2ef44d99da74
                  validUntil: 2022-01-01T19:03:36.7158818Z
                  forename: Mike
                  surname: Jones
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.ReportView.GetReportViewResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.ReportView.GetReportViewResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.ReportView.GetReportViewResponse'
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
      x-codegen-request-body-name: request
  /api/web-verifications/by-referenceid:
    post:
      tags:
      - WebVerifications
      summary: Retrieves secure links to web verification pages searching by the Reference
        Id.
      description: "It may return none, one or many (up to 20) matching results.\
        \nEach result contains a secure url; UTC date/time of when the link expires;\
        \ name details of a person associated with the registration."
      operationId: GetWebVerificationsByReferenceId
      parameters:
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.WebVerifications.GetWebVerificationsByReferenceIdRequest'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.WebVerifications.GetWebVerificationsByReferenceIdRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.WebVerifications.GetWebVerificationsByReferenceIdRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.WebVerifications.GetWebVerificationsByReferenceIdRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.WebVerifications.GetWebVerificationsByReferenceIdRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.WebVerifications.GetWebVerificationsByReferenceIdRequest'
          application/*+xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.WebVerifications.GetWebVerificationsByReferenceIdRequest'
        required: false
      responses:
        200:
          description: Results of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.WebVerifications.GetWebVerificationsResponse'
              example:
                results:
                - journeyUrl:
                    url: https://pi-verify.credas.co.uk/link/f7ec8ac1-d935-413b-9100-c7b9b498ca1d
                    validUntil: 2022-01-01T19:03:36.7168392Z
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.WebVerifications.GetWebVerificationsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.WebVerifications.GetWebVerificationsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.WebVerifications.GetWebVerificationsResponse'
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
      x-codegen-request-body-name: request
  /api/web-verifications/by-registrationid:
    post:
      tags:
      - WebVerifications
      summary: Retrieves secure link to web verification page searching by the Registration
        Id.
      description: "It may return none or one matching result.\nEach result contains\
        \ a secure url; UTC date/time of when the link expires; name details of a\
        \ person associated with the registration."
      operationId: GetWebVerificationsByRegistrationId
      parameters:
      - name: apikey
        in: header
        description: ApiKey supplied.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.WebVerifications.GetWebVerificationsByRegistrationIdRequest'
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.WebVerifications.GetWebVerificationsByRegistrationIdRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.WebVerifications.GetWebVerificationsByRegistrationIdRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.WebVerifications.GetWebVerificationsByRegistrationIdRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.WebVerifications.GetWebVerificationsByRegistrationIdRequest'
          text/xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.WebVerifications.GetWebVerificationsByRegistrationIdRequest'
          application/*+xml:
            schema:
              $ref: '#/components/schemas/Credas.Api.Models.WebVerifications.GetWebVerificationsByRegistrationIdRequest'
        required: false
      responses:
        200:
          description: Results of the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.WebVerifications.GetWebVerificationsResponse'
              example:
                results:
                - journeyUrl:
                    url: https://verify.credas.co.uk/link/66ddf7c2-d3b1-4db3-ac13-2ef44d99da74
                    validUntil: 2022-01-01T19:03:36.7176505Z
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.WebVerifications.GetWebVerificationsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.WebVerifications.GetWebVerificationsResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.WebVerifications.GetWebVerificationsResponse'
        400:
          description: If the service was supplied invalid data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        401:
          description: If credentials supplied were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
        500:
          description: If an unexpected exception occurred whilst processing the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/Credas.Api.Models.Errors.ErrorResponse'
      x-codegen-request-body-name: request
components:
  schemas:
    Credas.Api.Models.BankAccounts.AccountVerificationRequest:
      required:
      - accountDetails
      - address
      - person
      - regEntryId
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Credas.Api.Models.DataCheck.Address'
        person:
          $ref: '#/components/schemas/Credas.Api.Models.BankAccounts.Person'
        accountDetails:
          $ref: '#/components/schemas/Credas.Api.Models.BankAccounts.AccountDetails'
        regEntryId:
          type: string
          format: uuid
      example:
        address:
          addressLine1: 10 Downing St
          addressLine2: Westminster
          city: London
          postcode: SW1A2AA
          country: United Kingdom
        person:
          forename: Angela
          surname: UK Specimen
        accountDetails:
          sortcode: "123456"
          accountNumber: "12345678"
        regEntryId: 141dbb24-c4ff-4658-9556-15ea25428d48
    Credas.Api.Models.DataCheck.Address:
      required:
      - addressLine1
      - city
      - country
      - postcode
      type: object
      properties:
        addressLine1:
          pattern: ^([A-Za-z0-9 '\.,&\(\)\/-]*)$
          type: string
        addressLine2:
          pattern: ^([A-Za-z0-9 '\.,&\(\)\/-]*)$
          type: string
        addressLine3:
          pattern: ^([A-Za-z0-9 '\.,&\(\)\/-]*)$
          type: string
        city:
          pattern: ^([A-Za-z0-9 '\.,&\(\)\/-]*)$
          type: string
        postcode:
          pattern: ^([A-Za-z0-9 '\.,&\(\)\/-]*)$
          type: string
        county:
          pattern: ^([A-Za-z0-9 '\.,&\(\)\/-]*)$
          type: string
        country:
          pattern: ^([A-Za-z0-9 '\.,&\(\)\/-]*)$
          type: string
    Credas.Api.Models.BankAccounts.Person:
      required:
      - forename
      - surname
      type: object
      properties:
        forename:
          type: string
        middleName:
          type: string
        surname:
          type: string
    Credas.Api.Models.BankAccounts.AccountDetails:
      required:
      - accountNumber
      - sortcode
      type: object
      properties:
        sortcode:
          type: string
        accountNumber:
          type: string
    Credas.Api.Models.BankAccounts.AccountVerificationResponse:
      type: object
      properties:
        checkId:
          type: string
          format: uuid
        checkDate:
          type: string
          format: date-time
        sortcode:
          type: string
        accountNumber:
          type: string
        referenceId:
          type: string
        error:
          type: boolean
        accountValid:
          type: boolean
        sortcodeValidation:
          type: integer
          description: Unknown = 0, NoMatch = 1, Valid = 2, Invalid = 3, FiveDigitsMatched
            = 4
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
        sortcodeValidationText:
          type: string
          readOnly: true
        accountNumberValidation:
          type: integer
          description: Unknown = 0, NoMatch = 1, Valid = 2, Invalid = 3, SevenDigitsMatched
            = 4, SixDigitsMatched = 5
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
        accountNumberValidationText:
          type: string
          readOnly: true
        nameValidation:
          type: integer
          description: Unknown = 0, NoMatch = 1, Valid = 2
          format: int32
          enum:
          - 0
          - 1
          - 2
        nameValidationText:
          type: string
          readOnly: true
        addressValidation:
          type: integer
          description: Unknown = 0, NoMatch = 1, CurrentAddress = 2, PreviousAddress
            = 3, ForwardingAddress = 4
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
        addressValidationText:
          type: string
          readOnly: true
        accountStatus:
          type: integer
          description: Unknown = 0, NoMatch = 1, Live = 2, ClosedOrSettled = 3
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
        accountStatusText:
          type: string
          readOnly: true
        checkStatus:
          type: integer
          description: Unknown = 0, Pass = 1, Refer = 2, Fail = 3
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
        hasBeenOverridden:
          type: boolean
    Credas.Api.Models.Errors.ErrorResponse:
      type: object
      properties:
        message:
          type: string
        details:
          type: object
          properties: {}
    Credas.Api.Models.Companies.CompanyDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
        companyName:
          type: string
        companyNumber:
          type: string
        addressLine1:
          type: string
        locality:
          type: string
        region:
          type: string
        postCode:
          type: string
        dateOfRegistration:
          type: string
          format: date-time
        duplicate:
          type: boolean
        significantParentCompanies:
          type: array
          items:
            $ref: '#/components/schemas/Credas.Api.Models.Companies.CompanyDetail'
        significantPeople:
          type: array
          items:
            $ref: '#/components/schemas/Credas.Api.Models.Companies.SignificantPerson'
    Credas.Api.Models.Companies.SignificantPerson:
      type: object
      properties:
        id:
          type: string
          format: uuid
        forename:
          type: string
        surname:
          type: string
        regEntryId:
          type: string
          format: uuid
    Credas.Api.Models.StatusChecks.StatusCheckRequest:
      required:
      - address
      - person
      - regEntryId
      type: object
      properties:
        regEntryId:
          type: string
          format: uuid
        person:
          $ref: '#/components/schemas/Credas.Api.Models.DataCheck.Person'
        address:
          $ref: '#/components/schemas/Credas.Api.Models.DataCheck.Address'
    Credas.Api.Models.DataCheck.Person:
      required:
      - dateOfBirth
      - forename
      - surname
      type: object
      properties:
        forename:
          pattern: ^([A-Za-z0-9 '\.,&\(\)\/-]*)$
          type: string
        middleName:
          pattern: ^([A-Za-z0-9 '\.,&\(\)\/-]*)$
          type: string
        surname:
          pattern: ^([A-Za-z0-9 '\.,&\(\)\/-]*)$
          type: string
        dateOfBirth:
          type: string
          format: date-time
    Credas.Api.Models.StatusChecks.StatusCheck:
      type: object
      properties:
        status:
          type: integer
          description: Unknown = 0, Pass = 1, Refer = 2, Fail = 3
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
        hasBeenOverridden:
          type: boolean
        checkDate:
          type: string
          format: date-time
        insolvency:
          type: array
          items:
            $ref: '#/components/schemas/Credas.Api.Models.StatusChecks.Insolvency.InsolvencyResult'
        ccj:
          type: array
          items:
            $ref: '#/components/schemas/Credas.Api.Models.StatusChecks.CCJ.CcjResult'
        companyDirector:
          type: array
          items:
            $ref: '#/components/schemas/Credas.Api.Models.StatusChecks.CompanyDirector.CompanyDirectorResult'
    Credas.Api.Models.StatusChecks.Insolvency.InsolvencyResult:
      type: object
      properties:
        type:
          type: integer
          description: Unknown = 0, NorthernIrelandBankruptcy = 1, ScottishSequestrationBankruptcy
            = 2, EnglandAndWalesIVA = 3, EnglandAndWalesDRO = 4, EnglandAndWalesBankruptcy
            = 5
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
        typeText:
          type: string
          readOnly: true
        name:
          type: string
        caseNo:
          type: string
        address:
          $ref: '#/components/schemas/Credas.Api.Models.StatusChecks.Insolvency.Address'
        dob:
          type: string
          format: date-time
        court:
          type: string
        startDate:
          type: string
          format: date-time
        status:
          type: string
        occupation:
          type: string
        aliases:
          type: string
        description:
          type: string
        serviceOffice:
          type: string
        telephoneNumber:
          type: string
        caseType:
          type: string
        tradingNames:
          type: string
        debtTotal:
          type: string
        assetTotal:
          type: string
        previousAddress:
          $ref: '#/components/schemas/Credas.Api.Models.StatusChecks.Insolvency.Address'
        presentationDate:
          type: string
          format: date-time
    Credas.Api.Models.StatusChecks.CCJ.CcjResult:
      type: object
      properties:
        name:
          type: string
        dob:
          type: string
          format: date-time
        address1:
          type: string
        address2:
          type: string
        address3:
          type: string
        address4:
          type: string
        address5:
          type: string
        postcode:
          type: string
        judgementDate:
          type: string
          format: date-time
        judgementType:
          type: integer
          description: Unknown = 0, Judgement = 1, Satisfaction = 2, Revocation =
            3, SetAside = 4, AdministrationOrder = 5
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
        judgementTypeText:
          type: string
          readOnly: true
        amount:
          type: string
        caseNumber:
          type: string
        courtName:
          type: string
        dateEnd:
          type: string
          format: date-time
    Credas.Api.Models.StatusChecks.CompanyDirector.CompanyDirectorResult:
      type: object
      properties:
        matchType:
          type: integer
          description: Unknown = 0, NameAndDateOfBirth = 1, NameAndAddress = 2, NameAndAddressAndDateOfBirth
            = 3
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
        matchTypeText:
          type: string
          readOnly: true
        dateAppointed:
          type: string
          format: date-time
        companyRegNo:
          type: string
        companyName:
          type: string
        registeredOffice:
          type: string
        companyAppointments:
          type: array
          items:
            $ref: '#/components/schemas/Credas.Api.Models.StatusChecks.CompanyDirector.CompanyAppointment'
    Credas.Api.Models.StatusChecks.Insolvency.Address:
      type: object
      properties:
        address1:
          type: string
        address2:
          type: string
        address3:
          type: string
        address4:
          type: string
        address5:
          type: string
        postcode:
          type: string
        dps:
          type: string
        isEmpty:
          type: boolean
          readOnly: true
    Credas.Api.Models.StatusChecks.CompanyDirector.CompanyAppointment:
      type: object
      properties:
        title:
          type: string
        name:
          type: string
        address:
          type: string
        dob:
          type: string
          format: date-time
        occupation:
          type: string
        nationality:
          type: string
        appointmentDate:
          type: string
          format: date-time
        appointmentType:
          type: string
    Credas.Api.Models.DataCheck.AddDataCheckRequest:
      required:
      - checkType
      - currentAddress
      - person
      - regEntryId
      type: object
      properties:
        regEntryId:
          type: string
          format: uuid
        checkType:
          type: integer
          description: The value of checkType dictates what checks are performed.
            <br/>The StandardAml check (value = 1) will check DOB & Mortality. <br/>The
            InternationalPepSanctions check (value = 3) will check just International
            PEP & Sanctions. <br/>The EnhancedAml check (value = 2) will perform both
            these checks and is equivalent to making two calls with values of 1 then
            3 and will be charged accordingly. <br />  values=> None = 0, StandardAml
            = 1, EnhancedAml = 2, InternationalPepSanctions = 3
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
        person:
          $ref: '#/components/schemas/Credas.Api.Models.DataCheck.Person'
        currentAddress:
          $ref: '#/components/schemas/Credas.Api.Models.DataCheck.Address'
      example:
        regEntryId: 141dbb24-c4ff-4658-9556-15ea25428d48
        checkType: 2
        person:
          forename: Angela
          surname: UK Specimen
          dateOfBirth: 1988-12-04T00:00:00
        currentAddress:
          addressLine1: 25 Westgate Street
          addressLine2: ""
          addressLine3: ""
          city: Cardiff
          postcode: CF101NS
          county: Cardiff
          country: United Kingdom
    Credas.Api.Models.DataCheck.AddDataCheckResponse:
      required:
      - id
      - regCode
      type: object
      properties:
        id:
          type: string
          format: uuid
        regCode:
          type: string
    Credas.Api.Models.Images.GetSelfieImageResponse:
      type: object
      properties:
        url:
          type: string
    Credas.Api.Models.Images.AddSelfieImageRequest:
      required:
      - imageData
      - registrationId
      type: object
      properties:
        registrationId:
          type: string
          format: uuid
        imageData:
          type: string
      example:
        registrationId: 141dbb24-c4ff-4658-9556-15ea25428d48
        imageData: Base64EncodedJpegImage
    Credas.Api.Models.Images.AddSelfieImageResponse:
      required:
      - livenessConfirmed
      type: object
      properties:
        livenessConfirmed:
          type: boolean
    Credas.Api.Models.Images.GetLivenessImageResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        description:
          type: string
        url:
          type: string
    Credas.Api.Models.Images.AddLivenessImageRequest:
      required:
      - imageData
      - registrationId
      type: object
      properties:
        registrationId:
          type: string
          format: uuid
        imageData:
          type: string
      example:
        registrationId: 141dbb24-c4ff-4658-9556-15ea25428d48
        imageData: Base64EncodedJpegImage
    Credas.Api.Models.Images.GetLivenessPerformedImageResponse:
      type: object
      properties:
        url:
          type: string
    Credas.Api.Models.Images.GetIdDocumentImageResponse:
      required:
      - dateCreated
      - description
      - facialMatch
      - hiResUrl
      - id
      - nameCheck
      - nameCheckMethod
      - nfcCheck
      - nfcReadStatus
      - status
      - url
      type: object
      properties:
        url:
          type: string
        hiResUrl:
          type: string
        nfcFacialUrl:
          type: string
        id:
          type: string
          format: uuid
        dateCreated:
          type: string
          format: date-time
        description:
          type: string
        status:
          type: integer
          description: Indicates the verification status of the document itself by
            combining visual analysis and NFC verification results. </br>Note that
            this may be a pass even if facial or name matches have failed.<br />  values=>
            Unknown = 0, Pass = 1, Refer = 2, Fail = 3
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
        facialMatch:
          type: boolean
        nameCheck:
          type: boolean
        nameCheckMethod:
          type: integer
          description: Unknown = 0, Automatic = 1, Manual = 2
          format: int32
          enum:
          - 0
          - 1
          - 2
        nfcCheck:
          type: boolean
        nfcReadStatus:
          type: integer
          description: Unknown = 0, Passed = 1, Failed = 2, NotAttempted = 3, Skipped
            = 4, Unavailable = 5, NotAllowed = 6, NotTrusted = 7, NotApplicable =
            8, Expired = 9
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
        forename:
          type: string
        middleName:
          type: string
        surname:
          type: string
        fullName:
          type: string
        dateOfBirth:
          type: string
          format: date-time
        countryCode:
          type: string
        country:
          type: string
        documentNumber:
          type: string
        expiryDate:
          type: string
          format: date-time
        addressFull:
          type: string
        addressPostcode:
          type: string
        addressCity:
          type: string
        isUnderReview:
          type: boolean
        documentAnalysisResult:
          type: integer
          description: Unknown = 0, Passed = 1, Refer = 2, Expired = 3, NotSupported
            = 4, Undefined = 5, Fail = 10, NotPerformed = 11
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 10
          - 11
        mrz1:
          type: string
        mrz2:
          type: string
        mrz3:
          type: string
        manuallyVerified:
          type: boolean
        documentSide:
          type: integer
          description: Front = 1, Back = 2
          format: int32
          enum:
          - 0
          - 1
          - 2
        primaryScanId:
          type: string
          format: uuid
    Credas.Api.Models.Images.AddIdDocumentImageRequest:
      required:
      - documentType
      - imageData
      - registrationId
      type: object
      properties:
        documentType:
          type: integer
          description: Other = 0, Passport = 1, DrivingLicence = 2, Visa = 3, CscsCard
            = 4, HomeOfficeLetter = 5, BirthCertificate = 6, NationalIdCard = 7, ResidencePermit
            = 9, UtilityBill = 11
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 9
          - 10
          - 11
        documentParameters:
          type: array
          items:
            $ref: '#/components/schemas/Credas.Api.Models.Registrations.KeyValueItem'
        registrationId:
          type: string
          format: uuid
        imageData:
          type: string
      example:
        documentType: 1
        registrationId: 141dbb24-c4ff-4658-9556-15ea25428d48
        imageData: Base64EncodedJpegImage
    Credas.Api.Models.Registrations.KeyValueItem:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    Credas.Api.Models.Images.AddIdDocumentImageResponse:
      required:
      - documentStatus
      - documentType
      - facialMatch
      - id
      - regCode
      type: object
      properties:
        documentType:
          type: integer
          description: Unknown = 0, Passport = 1, DrivingLicense = 2, IdentificationCard
            = 3, TaxLetter = 4, NIC_Letter = 5, TV_Licence = 6, UtilityBill = 7, HighRiskWorkLicence
            = 8, TravelPermit = 9, BankLetter = 10, BenefitLetter = 11, BankStatement
            = 12, NINO_Letter = 13, CouncilTax = 14, ResidentPermit = 15, PhotoCard
            = 16, RepaymentLetter = 17, Invoice = 18, Visa = 19, AgeIdentificationCard
            = 20, MedicareCard = 21, MilitaryIdentificationCard = 22, UtilityLetter
            = 23, CouncilDocument = 24, JobLicence = 25, MembershipIDCard = 26, MilitaryIDCard
            = 27, ProofOfAgeCard = 28, TravelPermitNew = 29, WeaponsLicence = 30,
            AccountStatement = 41, TenancyAgreement = 42, BankDocument = 43, BankLetterNew
            = 44, BankStatementNew = 45, BenefitLetterNew = 46, CouncilDocumentNew
            = 48, CouncilLetter = 49, CouncilTaxNew = 50, DWPDocument = 51, HMRCDocument
            = 52, InformationSheet = 53, InsuranceDocument = 54, InsuranceLetter =
            55, InvoiceNew = 56, NICLetter = 57, NINOLetter = 58, OfficialDocument
            = 59, OfficialLetter = 60, RepaymentLetterNew = 61, TaxLetterNew = 62,
            TaxStatement = 63, TelBill = 64, TelLetter = 65, TelecommunicationDocument
            = 66, TVLicence = 67, UniversityLetter = 68, UtilityBillNew = 69, UtilityDocument
            = 70, UtilityLetterNew = 71, WaterBill = 72, WaterDocument = 73, HighRiskWorkLicenceNew
            = 74, PhotoCardNew = 75, MedicareCardNew = 76, Certificate = 77
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
          - 10
          - 11
          - 12
          - 13
          - 14
          - 15
          - 16
          - 17
          - 18
          - 19
          - 20
          - 21
          - 22
          - 23
          - 24
          - 25
          - 26
          - 27
          - 28
          - 29
          - 30
          - 41
          - 42
          - 43
          - 44
          - 45
          - 46
          - 48
          - 49
          - 50
          - 51
          - 52
          - 53
          - 54
          - 55
          - 56
          - 57
          - 58
          - 59
          - 60
          - 61
          - 62
          - 63
          - 64
          - 65
          - 66
          - 67
          - 68
          - 69
          - 70
          - 71
          - 72
          - 73
          - 74
          - 75
          - 76
          - 77
        documentStatus:
          type: integer
          description: Active = 1, Deleted = 2, UnderReview = 3
          format: int32
          enum:
          - 1
          - 2
          - 3
        facialMatch:
          type: boolean
        id:
          type: string
          format: uuid
        regCode:
          type: string
    Credas.Api.Models.PropertyRegister.PropertyRegisterCheckRequest:
      required:
      - address
      - person
      - regEntryId
      type: object
      properties:
        person:
          $ref: '#/components/schemas/Credas.Api.Models.PropertyRegister.Person'
        address:
          $ref: '#/components/schemas/Credas.Api.Models.PropertyRegister.Address'
        regEntryId:
          type: string
          format: uuid
      example:
        person:
          forename: Angela
          surname: UK Specimen
        address:
          addressLine1: 25 Westgate Street
          city: Cardiff
          postcode: CF101NS
          county: Cardiff
          country: United Kingdom
        regEntryId: 12345678-1234-1234-1234-1234567890ab
    Credas.Api.Models.PropertyRegister.Person:
      required:
      - forename
      - surname
      type: object
      properties:
        forename:
          type: string
        middleName:
          type: string
        surname:
          type: string
    Credas.Api.Models.PropertyRegister.Address:
      required:
      - addressLine1
      - city
      - country
      - postcode
      type: object
      properties:
        addressLine1:
          type: string
        addressLine2:
          type: string
        addressLine3:
          type: string
        city:
          type: string
        postcode:
          type: string
        county:
          type: string
        country:
          type: string
    Credas.Api.Models.PropertyRegister.PropertyRegisterCheckResponse:
      type: object
      properties:
        matchResult:
          type: integer
          description: Unknown = 0, FullNameMatch = 1, SurnameMatch = 2, NoNameMatch
            = 3, NoAddressMatch = 4, TitleNotRegistered = 5, Unavailable = 6, OutOfHours
            = 7
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
        matchResultText:
          type: string
        propertyOwnership:
          type: integer
          description: Unknown = 0, SoleOwnership = 1, JointOwnership = 2
          format: int32
          enum:
          - 0
          - 1
          - 2
        propertyOwnershipText:
          type: string
        titleNumber:
          type: string
        checkStatus:
          type: integer
          description: Unknown = 0, Pass = 1, Refer = 2, Fail = 3
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
        hasBeenOverridden:
          type: boolean
    Credas.Api.Models.Registrations.AddInstantRegistrationRequest:
      required:
      - document
      - documentType
      - forename
      - regTypeId
      - surname
      type: object
      properties:
        regTypeId:
          type: string
          format: uuid
        document:
          type: string
        documentType:
          type: integer
          description: Other = 0, Passport = 1, DrivingLicence = 2, Visa = 3, CscsCard
            = 4, HomeOfficeLetter = 5, BirthCertificate = 6, NationalIdCard = 7, ResidencePermit
            = 9, UtilityBill = 11
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 9
          - 10
          - 11
        documentParameters:
          type: array
          items:
            $ref: '#/components/schemas/Credas.Api.Models.Registrations.KeyValueItem'
        selfie:
          type: string
        forename:
          maxLength: 50
          minLength: 1
          type: string
        surname:
          maxLength: 50
          minLength: 1
          type: string
        referenceId:
          maxLength: 255
          minLength: 0
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Credas.Api.Models.Registrations.KeyValueItem'
        significantPersonId:
          type: string
          format: uuid
      example:
        regTypeId: 12345678-1234-1234-1234-1234567890ab
        document: Base64EncodedJpegImage
        documentType: 1
        selfie: Base64EncodedJpegImage
        forename: Alan
        surname: Harper
        referenceId: MyRef123
        parameters:
        - key: Param1
          value: Value 1
        - key: Param2
          value: "123456"
        - key: Param3
          value: "true"
    Credas.Api.Models.Registrations.AddInstantRegistrationResponse:
      required:
      - documentStatus
      - documentType
      - facialMatch
      - id
      - regCode
      type: object
      properties:
        documentType:
          type: integer
          description: Unknown = 0, Passport = 1, DrivingLicense = 2, IdentificationCard
            = 3, TaxLetter = 4, NIC_Letter = 5, TV_Licence = 6, UtilityBill = 7, HighRiskWorkLicence
            = 8, TravelPermit = 9, BankLetter = 10, BenefitLetter = 11, BankStatement
            = 12, NINO_Letter = 13, CouncilTax = 14, ResidentPermit = 15, PhotoCard
            = 16, RepaymentLetter = 17, Invoice = 18, Visa = 19, AgeIdentificationCard
            = 20, MedicareCard = 21, MilitaryIdentificationCard = 22, UtilityLetter
            = 23, CouncilDocument = 24, JobLicence = 25, MembershipIDCard = 26, MilitaryIDCard
            = 27, ProofOfAgeCard = 28, TravelPermitNew = 29, WeaponsLicence = 30,
            AccountStatement = 41, TenancyAgreement = 42, BankDocument = 43, BankLetterNew
            = 44, BankStatementNew = 45, BenefitLetterNew = 46, CouncilDocumentNew
            = 48, CouncilLetter = 49, CouncilTaxNew = 50, DWPDocument = 51, HMRCDocument
            = 52, InformationSheet = 53, InsuranceDocument = 54, InsuranceLetter =
            55, InvoiceNew = 56, NICLetter = 57, NINOLetter = 58, OfficialDocument
            = 59, OfficialLetter = 60, RepaymentLetterNew = 61, TaxLetterNew = 62,
            TaxStatement = 63, TelBill = 64, TelLetter = 65, TelecommunicationDocument
            = 66, TVLicence = 67, UniversityLetter = 68, UtilityBillNew = 69, UtilityDocument
            = 70, UtilityLetterNew = 71, WaterBill = 72, WaterDocument = 73, HighRiskWorkLicenceNew
            = 74, PhotoCardNew = 75, MedicareCardNew = 76, Certificate = 77
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
          - 10
          - 11
          - 12
          - 13
          - 14
          - 15
          - 16
          - 17
          - 18
          - 19
          - 20
          - 21
          - 22
          - 23
          - 24
          - 25
          - 26
          - 27
          - 28
          - 29
          - 30
          - 41
          - 42
          - 43
          - 44
          - 45
          - 46
          - 48
          - 49
          - 50
          - 51
          - 52
          - 53
          - 54
          - 55
          - 56
          - 57
          - 58
          - 59
          - 60
          - 61
          - 62
          - 63
          - 64
          - 65
          - 66
          - 67
          - 68
          - 69
          - 70
          - 71
          - 72
          - 73
          - 74
          - 75
          - 76
          - 77
        documentStatus:
          type: integer
          description: Active = 1, Deleted = 2, UnderReview = 3
          format: int32
          enum:
          - 1
          - 2
          - 3
        facialMatch:
          type: boolean
        id:
          type: string
          format: uuid
        regCode:
          type: string
    Credas.Api.Models.Registrations.AddRegistrationRequest:
      required:
      - forename
      - regTypeId
      - sendSms
      - surname
      type: object
      properties:
        forename:
          maxLength: 50
          minLength: 1
          type: string
        surname:
          maxLength: 50
          minLength: 1
          type: string
        regTypeId:
          type: string
          format: uuid
        referenceId:
          maxLength: 255
          minLength: 0
          type: string
        sendSms:
          type: boolean
        sendEmail:
          type: boolean
        phoneNumber:
          maxLength: 20
          minLength: 1
          type: string
        diallingCode:
          maxLength: 10
          minLength: 1
          type: string
        emailAddress:
          maxLength: 250
          minLength: 0
          type: string
        duplicateAcknowledgement:
          type: boolean
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Credas.Api.Models.Registrations.KeyValueItem'
        settings:
          $ref: '#/components/schemas/Credas.Api.Models.Registrations.RegistrationSettings'
        returnUrls:
          $ref: '#/components/schemas/Credas.Api.Models.Registrations.ReturnUrls'
        provideWebJourneyLink:
          type: boolean
        significantPersonId:
          type: string
          format: uuid
      example:
        forename: Alan
        surname: Harper
        regTypeId: 12345678-1234-1234-1234-1234567890ab
        referenceId: HID-12345-336-10
        sendSms: false
        sendEmail: true
        phoneNumber: "7123456789"
        diallingCode: +44
        emailAddress: user@email.com
        duplicateAcknowledgement: false
        parameters:
        - key: Param1
          value: Value 1
        - key: Param2
          value: "123456"
        - key: Param3
          value: "true"
        settings:
          legislation: 3
          checkProfile: 2
          capturePersonalDetails: true
          skipEmailStep: true
        returnUrls:
          returnUrl: https://www.example.com/registration-complete/123456
        provideWebJourneyLink: true
    Credas.Api.Models.Registrations.RegistrationSettings:
      type: object
      properties:
        capturePersonalDetails:
          type: boolean
        skipEmailStep:
          type: boolean
        requiredChecks:
          type: array
          description: The value of required checks determines what checks are performed.
            <br/>Unknown = 0,Id Documents = 1, Standard Checks = 2, International
            Sanctions and Pep = 3, Credit Status Check = 4, Bank Account Check = 5,
            Proof of Ownership = 6, Right to Work = 7, Right to Rent = 8<br />
          items:
            type: integer
            format: int32
            enum:
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
            - 8
        nameMatchRoutine:
          type: integer
          description: Fuzzy = 1, Strict = 2
          format: int32
          enum:
          - 1
          - 2
    Credas.Api.Models.Registrations.ReturnUrls:
      type: object
      properties:
        returnUrl:
          type: string
    Credas.Api.Models.Registrations.AddRegistrationResponse:
      required:
      - id
      - regCode
      type: object
      properties:
        webJourneyUrl:
          $ref: '#/components/schemas/Credas.Api.Models.Registrations.JourneyUrl'
        id:
          type: string
          format: uuid
        regCode:
          type: string
    Credas.Api.Models.Registrations.JourneyUrl:
      type: object
      properties:
        url:
          type: string
        validUntil:
          type: string
          format: date-time
    Credas.Api.Models.Registrations.CheckSubmittedIdDocumentsResponse:
      type: object
      properties:
        checkCode:
          type: integer
          description: Ok = 1, MayContinue = 2, CannotContinue = 3
          format: int32
          enum:
          - 1
          - 2
          - 3
        message:
          type: string
    Credas.Api.Models.Registrations.RegistrationSummary:
      required:
      - dataCheckResult
      - dataChecksPerformed
      - dateCreated
      - forename
      - id
      - livenessStatus
      - livenessVerified
      - regCode
      - regTypeId
      - rightToWorkDocumentsProvided
      - status
      - surname
      type: object
      properties:
        referenceId:
          maxLength: 255
          minLength: 0
          type: string
        dateCreated:
          type: string
          format: date-time
        status:
          type: integer
          description: Unknown = 0, Submitted = 1, Approved = 2, Rejected = 3, Exported
            = 4, Invited = 6
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 6
        livenessVerified:
          type: boolean
        livenessStatus:
          type: integer
          description: NotSubmitted = 0, Verified = 1, Unverified = 2, Unknown = 3,
            RetakeRequested = 4
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
        rightToWorkDocumentsProvided:
          type: integer
          description: Indicates whether sufficient right to work documents have been
            provided and validated. <br />This relies on the registration being submitted
            and the subject's liveness being confirmed. To check whether documents
            have been submitted, regardless of validation, please use the /api/registrations/{id}/check-submitted-id-documents
            endpoint.<br />  values=> Pending = 0, Pass = 1, Fail = 2
          format: int32
          enum:
          - 0
          - 1
          - 2
        dataChecksPerformed:
          type: boolean
        dataCheckResult:
          type: integer
          description: Unknown = 0, Pass = 1, Refer = 2, Fail = 3
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
        dataCheckSources:
          type: array
          items:
            $ref: '#/components/schemas/Credas.Api.Models.Registrations.DataCheckSourceSummary'
        idVerification:
          $ref: '#/components/schemas/Credas.Api.Models.Registrations.IdVerification'
        idDocuments:
          type: array
          items:
            $ref: '#/components/schemas/Credas.Api.Models.Registrations.IdDocumentSummary'
        email:
          type: string
        phoneNumber:
          type: string
        forename:
          type: string
        surname:
          type: string
        regTypeId:
          type: string
          format: uuid
        personalDetails:
          $ref: '#/components/schemas/Credas.Api.Models.Registrations.PersonalDetails'
        bankAccountChecks:
          type: array
          items:
            $ref: '#/components/schemas/Credas.Api.Models.BankAccounts.AccountVerificationResponse'
        creditStatusCheck:
          $ref: '#/components/schemas/Credas.Api.Models.StatusChecks.StatusCheck'
        proofOfOwnershipCheck:
          $ref: '#/components/schemas/Credas.Api.Models.PropertyRegister.PropertyRegisterCheckResponse'
        rightToWorkCheck:
          $ref: '#/components/schemas/Credas.Api.Models.Registrations.SettlementStatus'
        rightToRentCheck:
          $ref: '#/components/schemas/Credas.Api.Models.Registrations.SettlementStatus'
        isAgentLed:
          type: boolean
        livenessMethod:
          type: integer
          description: NotApplicable = 0, UniqueActionProcess = 1, Passive = 2
          format: int32
          enum:
          - 0
          - 1
          - 2
        customTermsAccepted:
          type: boolean
        customTermsAcceptedDateTime:
          type: string
          format: date-time
        customTermsAcceptedVersion:
          type: integer
          format: int32
        id:
          type: string
          format: uuid
        regCode:
          type: string
    Credas.Api.Models.Registrations.DataCheckSourceSummary:
      type: object
      properties:
        sourceType:
          type: integer
          description: Unknown = 0, EditedElectoralRollUk = 1, LandlineAppendUk =
            2, MortalityUk = 3, CreaditHeaderAmlUk = 4, NcoaAlertFlagUk = 5, NcoaAlertFullUk
            = 6, SanctionsEnhancedInternational = 7, PepEnhancedInternational = 8,
            NationalIdentityRegisterUk = 9, LandRegistry = 10
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
          - 10
        label:
          type: string
        dateCreated:
          type: string
          format: date-time
        status:
          type: integer
          description: Unknown = 0, Pass = 1, Refer = 2, Fail = 3
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
        remarks:
          type: array
          items:
            $ref: '#/components/schemas/Credas.Api.Models.DataCheck.CheckRemark'
        hasPepSanctionsData:
          type: boolean
          readOnly: true
        pepSanctionsData:
          type: array
          items:
            $ref: '#/components/schemas/Credas.Api.Models.DataCheck.PepSanctions.PepSanctionItem'
        hasBeenOverridden:
          type: boolean
    Credas.Api.Models.Registrations.IdVerification:
      type: object
      properties:
        checkStatus:
          type: integer
          description: Unknown = 0, Pass = 1, Refer = 2, Fail = 3
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
        hasBeenOverridden:
          type: boolean
    Credas.Api.Models.Registrations.IdDocumentSummary:
      required:
      - dateCreated
      - description
      - facialMatch
      - id
      - nameCheck
      - nameCheckMethod
      - nfcCheck
      - nfcReadStatus
      - status
      type: object
      properties:
        id:
          type: string
          format: uuid
        dateCreated:
          type: string
          format: date-time
        description:
          type: string
        status:
          type: integer
          description: Indicates the verification status of the document itself by
            combining visual analysis and NFC verification results. </br>Note that
            this may be a pass even if facial or name matches have failed.<br />  values=>
            Unknown = 0, Pass = 1, Refer = 2, Fail = 3
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
        facialMatch:
          type: boolean
        nameCheck:
          type: boolean
        nameCheckMethod:
          type: integer
          description: Unknown = 0, Automatic = 1, Manual = 2
          format: int32
          enum:
          - 0
          - 1
          - 2
        nfcCheck:
          type: boolean
        nfcReadStatus:
          type: integer
          description: Unknown = 0, Passed = 1, Failed = 2, NotAttempted = 3, Skipped
            = 4, Unavailable = 5, NotAllowed = 6, NotTrusted = 7, NotApplicable =
            8, Expired = 9
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
        forename:
          type: string
        middleName:
          type: string
        surname:
          type: string
        fullName:
          type: string
        dateOfBirth:
          type: string
          format: date-time
        countryCode:
          type: string
        country:
          type: string
        documentNumber:
          type: string
        expiryDate:
          type: string
          format: date-time
        addressFull:
          type: string
        addressPostcode:
          type: string
        addressCity:
          type: string
        isUnderReview:
          type: boolean
        documentAnalysisResult:
          type: integer
          description: Unknown = 0, Passed = 1, Refer = 2, Expired = 3, NotSupported
            = 4, Undefined = 5, Fail = 10, NotPerformed = 11
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 10
          - 11
        mrz1:
          type: string
        mrz2:
          type: string
        mrz3:
          type: string
        manuallyVerified:
          type: boolean
        documentSide:
          type: integer
          description: Front = 1, Back = 2
          format: int32
          enum:
          - 0
          - 1
          - 2
        primaryScanId:
          type: string
          format: uuid
    Credas.Api.Models.Registrations.PersonalDetails:
      type: object
      properties:
        forename:
          type: string
        surname:
          type: string
        dateOfBirth:
          type: string
          format: date-time
        address:
          $ref: '#/components/schemas/Credas.Api.Models.DataCheck.Address'
    Credas.Api.Models.Registrations.SettlementStatus:
      type: object
      properties:
        checkStatus:
          type: integer
          description: Unknown = 0, Pass = 1, Refer = 2, Fail = 3
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
        hasBeenOverridden:
          type: boolean
    Credas.Api.Models.DataCheck.CheckRemark:
      type: object
      properties:
        category:
          type: integer
          description: Match = 1, Mismatch = 2, Warning = 3, Comment = 4
          format: int32
          enum:
          - 1
          - 2
          - 3
          - 4
        description:
          type: string
    Credas.Api.Models.DataCheck.PepSanctions.PepSanctionItem:
      type: object
      properties:
        id:
          type: string
        fullName:
          type: string
        aliases:
          type: array
          items:
            type: string
        sanctionBodies:
          type: array
          items:
            type: string
        sanctionDates:
          type: array
          items:
            $ref: '#/components/schemas/Credas.Api.Models.DataCheck.PepSanctions.SanctionDate'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Credas.Api.Models.DataCheck.PepSanctions.SanctionAddress'
        positions:
          type: array
          items:
            $ref: '#/components/schemas/Credas.Api.Models.DataCheck.PepSanctions.SanctionPosition'
    Credas.Api.Models.DataCheck.PepSanctions.SanctionDate:
      type: object
      properties:
        year:
          type: integer
          format: int32
        month:
          type: integer
          format: int32
        day:
          type: integer
          format: int32
        date:
          type: string
          format: date-time
          readOnly: true
        type:
          type: integer
          description: Unknown = 0, Birth = 1, Death = 2
          format: int32
          enum:
          - 0
          - 1
          - 2
    Credas.Api.Models.DataCheck.PepSanctions.SanctionAddress:
      type: object
      properties:
        lines:
          type: array
          items:
            type: string
    Credas.Api.Models.DataCheck.PepSanctions.SanctionPosition:
      type: object
      properties:
        position:
          type: string
        country:
          type: string
    Credas.Api.Models.Registrations.SupportedIdDocument:
      type: object
      properties:
        name:
          type: string
        type:
          type: integer
          description: Passport = 1, DrivingLicence = 2, NationalIdCard = 3, CscsCard
            = 4, ResidencePermit = 5, Visa = 6, BirthCertificate = 7, HomeOfficeLetter
            = 8, Other = 9
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
    Credas.Api.Models.Registrations.UpdateRegistrationStatusRequest:
      required:
      - status
      type: object
      properties:
        status:
          type: integer
          description: Unknown = 0, Submitted = 1, Approved = 2, Rejected = 3, Exported
            = 4, Invited = 6
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 6
      example:
        status: 2
    Credas.Api.Models.StatusOverrides.OverrideCheckStatusRequest:
      required:
      - checkType
      - comment
      - status
      type: object
      properties:
        checkType:
          type: integer
          description: IdDocuments = 1, StandardChecks = 2, InternationalSanctionsAndPep
            = 3, CreditStatusCheck = 4, BankAccountCheck = 5, ProofOfOwnership = 6,
            RightToWork = 7, RightToRent = 8
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
        status:
          type: integer
          description: Unknown = 0, Pass = 1, Refer = 2, Fail = 3
          format: int32
          enum:
          - 0
          - 1
          - 2
          - 3
        comment:
          type: string
      example:
        checkType: 1
        status: 1
        comment: Documents look genuine.
    Credas.Api.Models.Registrations.UpdateContactDetailsRequest:
      required:
      - forename
      - surname
      type: object
      properties:
        forename:
          maxLength: 50
          minLength: 1
          type: string
        surname:
          maxLength: 50
          minLength: 1
          type: string
        deliveryMethod:
          type: integer
          description: None = 0, Email = 1, Sms = 2
          format: int32
          enum:
          - 0
          - 1
          - 2
        phoneNumber:
          maxLength: 20
          minLength: 1
          type: string
        diallingCode:
          maxLength: 10
          minLength: 1
          type: string
        email:
          maxLength: 250
          minLength: 0
          type: string
      example:
        forename: Alun
        surname: Harpers
        deliveryMethod: 1
        phoneNumber: "07123456780"
        diallingCode: +44
        email: alan.harper@example.com
    Credas.Api.Models.Registrations.PagedRegistrationSummary:
      type: object
      properties:
        registrationSummaries:
          type: array
          items:
            $ref: '#/components/schemas/Credas.Api.Models.Registrations.RegistrationSummary'
        totalCount:
          type: integer
          format: int32
    Credas.Api.Models.RegTypes.RegType:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    Credas.Api.Models.ReportView.GetReportViewByReferenceIdRequest:
      required:
      - referenceId
      type: object
      properties:
        referenceId:
          maxLength: 255
          minLength: 0
          type: string
        user:
          maxLength: 200
          minLength: 0
          type: string
        canVerify:
          type: boolean
        canChangeStatus:
          type: boolean
      example:
        referenceId: JD0387152001
        user: Emily Jones
        canVerify: true
        canChangeStatus: false
    Credas.Api.Models.ReportView.GetReportViewResponse:
      type: object
      properties:
        results:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Credas.Api.Models.ReportView.ReportViewItem'
    Credas.Api.Models.ReportView.ReportViewItem:
      type: object
      properties:
        url:
          type: string
        validUntil:
          type: string
          format: date-time
        forename:
          type: string
        surname:
          type: string
    Credas.Api.Models.ReportView.GetReportViewByRegistrationIdRequest:
      required:
      - registrationId
      type: object
      properties:
        registrationId:
          type: string
          format: uuid
        user:
          maxLength: 200
          minLength: 0
          type: string
        canVerify:
          type: boolean
        canChangeStatus:
          type: boolean
      example:
        registrationId: 4bf4db0a-1c0c-4acd-8e92-701f55163891
        user: Rob Starr
        canVerify: true
        canChangeStatus: true
    Credas.Api.Models.WebVerifications.GetWebVerificationsByReferenceIdRequest:
      required:
      - referenceId
      type: object
      properties:
        referenceId:
          maxLength: 255
          minLength: 0
          type: string
        returnUrls:
          $ref: '#/components/schemas/Credas.Api.Models.Registrations.ReturnUrls'
      example:
        referenceId: JD0387152001
        returnUrls:
          returnUrl: https://www.company.co.uk/registration-completed
    Credas.Api.Models.WebVerifications.GetWebVerificationsResponse:
      type: object
      properties:
        results:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Credas.Api.Models.WebVerifications.WebVerificationsItem'
    Credas.Api.Models.WebVerifications.WebVerificationsItem:
      type: object
      properties:
        journeyUrl:
          $ref: '#/components/schemas/Credas.Api.Models.Registrations.JourneyUrl'
    Credas.Api.Models.WebVerifications.GetWebVerificationsByRegistrationIdRequest:
      required:
      - registrationId
      type: object
      properties:
        registrationId:
          type: string
          format: uuid
        returnUrls:
          $ref: '#/components/schemas/Credas.Api.Models.Registrations.ReturnUrls'
      example:
        registrationId: 4bf4db0a-1c0c-4acd-8e92-701f55163891
        returnUrls:
          returnUrl: https://www.company.co.uk/registration-completed
