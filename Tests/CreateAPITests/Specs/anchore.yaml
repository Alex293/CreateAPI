openapi: 3.0.1
info:
  title: Anchore Engine API Server
  description: This is the Anchore Engine API. Provides the primary external API for
    users of the service.
  contact:
    email: nurmi@anchore.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.20
servers:
- url: /
tags:
- name: Subscriptions
  description: Subscription Management
- name: Policies
  description: Policy Management
- name: Images
  description: Image Management
- name: Image Content
  description: View Image Content
- name: Vulnerabilities
  description: Vulnerability checks and reports
- name: Policy Evaluation
  description: Evaluate images against policies
- name: Registries
  description: Registry Management
- name: Repository Credentials
  description: Repository Credential Management
- name: System
  description: System Management
- name: Services
  description: Service Management
- name: Summaries
  description: Resource Summaries
- name: Events
  description: View and delete events
- name: Queries
  description: Resource Queries
- name: User Management
  description: Manage Accounts, Users, and Credentials
- name: Identity
  description: Get and operate on the authenticated user's identity
- name: Archives
  description: Data Archiving Management
paths:
  /:
    get:
      description: Simple status check
      operationId: ping
      responses:
        200:
          description: Version check response, returns the api version prefix (e.g.
            'v1')
          content:
            application/json:
              schema:
                type: string
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system
      x-anchore-authz-action: None
  /health:
    get:
      description: Health check, returns 200 and no body if service is running
      operationId: health_check
      responses:
        200:
          description: Empty body on success
          content: {}
      x-swagger-router-controller: anchore_engine.apis.common
      x-anchore-authz-action: None
  /version:
    get:
      description: Returns the version object for the service, including db schema
        version info
      operationId: version_check
      responses:
        200:
          description: Version object describing version state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceVersion'
      x-swagger-router-controller: anchore_engine.apis.common
      x-anchore-authz-action: None
  /policies:
    get:
      tags:
      - Policies
      summary: List policies
      description: List all saved policy bundles
      operationId: list_policies
      parameters:
      - name: detail
        in: query
        description: Include policy bundle detail in the form of the full bundle content
          for each entry
        schema:
          type: boolean
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Policy listing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyBundleList'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.policies
      x-anchore-authz-action: listPolicies
    post:
      tags:
      - Policies
      summary: Add a new policy
      description: Adds a new policy bundle to the system
      operationId: add_policy
      parameters:
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyBundle'
        required: true
      responses:
        200:
          description: Saved bundle
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyBundleRecord'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.policies
      x-anchore-authz-action: createPolicy
      x-codegen-request-body-name: bundle
  /policies/{policyId}:
    get:
      tags:
      - Policies
      summary: Get specific policy
      description: Get the policy bundle content
      operationId: get_policy
      parameters:
      - name: policyId
        in: path
        required: true
        schema:
          type: string
      - name: detail
        in: query
        description: Include policy bundle detail in the form of the full bundle content
          for each entry
        schema:
          type: boolean
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: A list with a single fetched policy bundle record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyBundleList'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.policies
      x-anchore-authz-action: getPolicy
    put:
      tags:
      - Policies
      summary: Update policy
      description: Update/replace and existing policy
      operationId: update_policy
      parameters:
      - name: policyId
        in: path
        required: true
        schema:
          type: string
      - name: active
        in: query
        description: Mark policy as active
        schema:
          type: boolean
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyBundleRecord'
        required: true
      responses:
        200:
          description: A list with a single updated policy bundle record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyBundleList'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.policies
      x-anchore-authz-action: updatePolicy
      x-codegen-request-body-name: bundle
    delete:
      tags:
      - Policies
      summary: Delete policy
      description: Delete the specified policy
      operationId: delete_policy
      parameters:
      - name: policyId
        in: path
        required: true
        schema:
          type: string
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Delete success
          content: {}
        404:
          description: Policy not found to delete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.policies
      x-anchore-authz-action: deletePolicy
  /subscriptions:
    get:
      tags:
      - Subscriptions
      summary: List all subscriptions
      operationId: list_subscriptions
      parameters:
      - name: subscription_key
        in: query
        description: filter only subscriptions matching key
        schema:
          type: string
      - name: subscription_type
        in: query
        description: filter only subscriptions matching type
        schema:
          type: string
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Subscription listing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionList'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.subscriptions
      x-anchore-authz-action: listSubscriptions
    post:
      tags:
      - Subscriptions
      summary: Add a subscription of a specific type
      description: Create a new subscription to watch a tag and get notifications
        of changes
      operationId: add_subscription
      parameters:
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionRequest'
        required: true
      responses:
        200:
          description: Subscription add success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionList'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.subscriptions
      x-anchore-authz-action: createSubscription
      x-codegen-request-body-name: subscription
  /subscriptions/{subscriptionId}:
    get:
      tags:
      - Subscriptions
      summary: Get a specific subscription set
      operationId: get_subscription
      parameters:
      - name: subscriptionId
        in: path
        required: true
        schema:
          type: string
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Filtered subscription list by type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionList'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.subscriptions
      x-anchore-authz-action: getSubscription
    put:
      tags:
      - Subscriptions
      summary: Update an existing and specific subscription
      operationId: update_subscription
      parameters:
      - name: subscriptionId
        in: path
        required: true
        schema:
          type: string
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionUpdate'
        required: true
      responses:
        200:
          description: Subscription add success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionList'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.subscriptions
      x-anchore-authz-action: updateSubscription
      x-codegen-request-body-name: subscription
    delete:
      tags:
      - Subscriptions
      summary: Delete subscriptions of a specific type
      operationId: delete_subscription
      parameters:
      - name: subscriptionId
        in: path
        required: true
        schema:
          type: string
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Delete success
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.subscriptions
      x-anchore-authz-action: deleteSubscription
  /summaries/imagetags:
    get:
      tags:
      - Summaries
      summary: List all visible image digests and tags
      description: List all image tags visible to the user
      operationId: list_imagetags
      parameters:
      - name: image_status
        in: query
        description: Filter images in one or more states such as active, deleting.
          Defaults to active images only if unspecified
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            enum:
            - all
            - active
            - deleting
          default: '["active"]'
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnchoreImageTagSummaryList'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: listImages
  /images:
    get:
      tags:
      - Images
      summary: List all visible images
      description: List all images visible to the user
      operationId: list_images
      parameters:
      - name: history
        in: query
        description: Include image history in the response
        schema:
          type: boolean
      - name: fulltag
        in: query
        description: Full docker-pull string to filter results by (e.g. docker.io/library/nginx:latest,
          or myhost.com:5000/testimages:v1.1.1)
        schema:
          type: string
      - name: image_status
        in: query
        description: Filter by image_status value on the record. Default if omitted
          is 'active'.
        schema:
          type: string
          default: active
          enum:
          - all
          - active
          - deleting
      - name: analysis_status
        in: query
        description: Filter by analysis_status value on the record.
        schema:
          type: string
          enum:
          - not_analyzed
          - analyzed
          - analyzing
          - analysis_failed
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnchoreImageList'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: listImages
    post:
      tags:
      - Images
      summary: Submit a new image for analysis by the engine
      description: Creates a new analysis task that is executed asynchronously
      operationId: add_image
      parameters:
      - name: force
        in: query
        description: Override any existing entry in the system
        schema:
          type: boolean
      - name: autosubscribe
        in: query
        description: Instruct engine to automatically begin watching the added tag
          for updates from registry
        schema:
          type: boolean
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageAnalysisRequest'
        required: true
      responses:
        200:
          description: Successfully added image to analysis queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnchoreImageList'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: createImage
      x-codegen-request-body-name: image
    delete:
      tags:
      - Images
      summary: Bulk mark images for deletion
      description: Delete analysis for image digests in the list asynchronously
      operationId: delete_images_async
      parameters:
      - name: imageDigests
        in: query
        required: true
        style: form
        explode: false
        schema:
          type: array
          nullable: false
          items:
            type: string
      - name: force
        in: query
        schema:
          type: boolean
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteImageResponseList'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: deleteImage
  /import/images:
    post:
      tags:
      - Import
      summary: Import an anchore image tar.gz archive file. This is a deprecated API
        replaced by the "/imports/images" route
      operationId: import_image_archive
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - archive_file
              properties:
                archive_file:
                  type: string
                  description: anchore image tar archive.
                  format: binary
        required: true
      responses:
        200:
          description: Successfully imported image to the engine
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnchoreImageList'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: importImage
  /images/{imageDigest}:
    get:
      tags:
      - Images
      summary: Get image metadata
      operationId: get_image
      parameters:
      - name: imageDigest
        in: path
        required: true
        schema:
          type: string
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Image lookup success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnchoreImageList'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: getImage
    delete:
      tags:
      - Images
      summary: Delete an image analysis
      operationId: delete_image
      parameters:
      - name: imageDigest
        in: path
        required: true
        schema:
          type: string
      - name: force
        in: query
        schema:
          type: boolean
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Image deletion success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteImageResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: deleteImage
  /images/by_id/{imageId}:
    get:
      tags:
      - Images
      summary: Lookup image by docker imageId
      operationId: get_image_by_imageId
      parameters:
      - name: imageId
        in: path
        required: true
        schema:
          type: string
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Image lookup success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnchoreImageList'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: getImage
    delete:
      tags:
      - Images
      summary: Delete image by docker imageId
      operationId: delete_image_by_imageId
      parameters:
      - name: imageId
        in: path
        required: true
        schema:
          type: string
      - name: force
        in: query
        schema:
          type: boolean
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Image deletion success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteImageResponse'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: deleteImage
  /images/{imageDigest}/check:
    get:
      tags:
      - Images
      summary: Check policy evaluation status for image
      description: Get the policy evaluation for the given image
      operationId: get_image_policy_check
      parameters:
      - name: imageDigest
        in: path
        required: true
        schema:
          type: string
      - name: policyId
        in: query
        schema:
          type: string
      - name: tag
        in: query
        required: true
        schema:
          type: string
      - name: detail
        in: query
        schema:
          type: boolean
      - name: history
        in: query
        schema:
          type: boolean
      - name: interactive
        in: query
        schema:
          type: boolean
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Policy evaluation success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyEvaluationList'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: getImageEvaluation
  /images/by_id/{imageId}/check:
    get:
      tags:
      - Images
      summary: Check policy evaluation status for image
      description: Get the policy evaluation for the given image
      operationId: get_image_policy_check_by_imageId
      parameters:
      - name: imageId
        in: path
        required: true
        schema:
          type: string
      - name: policyId
        in: query
        schema:
          type: string
      - name: tag
        in: query
        required: true
        schema:
          type: string
      - name: detail
        in: query
        schema:
          type: boolean
      - name: history
        in: query
        schema:
          type: boolean
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Policy evaluation success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyEvaluationList'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: getImageEvaluation
  /images/{imageDigest}/vuln:
    get:
      tags:
      - Images
      summary: Get vulnerability types
      operationId: get_image_vulnerability_types
      parameters:
      - name: imageDigest
        in: path
        required: true
        schema:
          type: string
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Vulnerability listing for the image
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  enum:
                  - all
                  - os
                  - non-os
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: getImage
  /images/{imageDigest}/vuln/{vtype}:
    get:
      tags:
      - Images
      summary: Get vulnerabilities by type
      operationId: get_image_vulnerabilities_by_type
      parameters:
      - name: imageDigest
        in: path
        required: true
        schema:
          type: string
      - name: vtype
        in: path
        required: true
        schema:
          type: string
      - name: force_refresh
        in: query
        schema:
          type: boolean
      - name: vendor_only
        in: query
        description: Filter results to include only vulnerabilities that are not marked
          as invalid by upstream OS vendor data. When set to true, it will filter
          out all vulnerabilities where `will_not_fix` is False. If false all vulnerabilities
          are returned regardless of `will_not_fix`
        schema:
          type: boolean
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Vulnerability listing for the image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VulnerabilityResponse'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: getImage
  /images/by_id/{imageId}/vuln:
    get:
      tags:
      - Images
      summary: Get vulnerability types
      operationId: get_image_vulnerability_types_by_imageId
      parameters:
      - name: imageId
        in: path
        required: true
        schema:
          type: string
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Vulnerability listing for the image
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  enum:
                  - all
                  - os
                  - non-os
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: getImage
  /images/by_id/{imageId}/vuln/{vtype}:
    get:
      tags:
      - Images
      summary: Get vulnerabilities by type
      operationId: get_image_vulnerabilities_by_type_imageId
      parameters:
      - name: imageId
        in: path
        required: true
        schema:
          type: string
      - name: vtype
        in: path
        required: true
        schema:
          type: string
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Vulnerability listing for the image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VulnerabilityResponse'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: getImage
  /images/{imageDigest}/content:
    get:
      tags:
      - Images
      summary: List image content types
      operationId: list_image_content
      parameters:
      - name: imageDigest
        in: path
        required: true
        schema:
          type: string
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Content listing for the image
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: getImage
  /images/by_id/{imageId}/content:
    get:
      tags:
      - Images
      summary: List image content types
      operationId: list_image_content_by_imageid
      parameters:
      - name: imageId
        in: path
        required: true
        schema:
          type: string
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Content of specified type from the image
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: getImage
  /images/{imageDigest}/content/{ctype}:
    get:
      tags:
      - Images
      summary: Get the content of an image by type
      operationId: get_image_content_by_type
      parameters:
      - name: imageDigest
        in: path
        required: true
        schema:
          type: string
      - name: ctype
        in: path
        required: true
        schema:
          type: string
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Content of specified type from the image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentPackageResponse'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: getImage
  /images/{imageDigest}/content/files:
    get:
      tags:
      - Images
      summary: Get the content of an image by type files
      operationId: get_image_content_by_type_files
      parameters:
      - name: imageDigest
        in: path
        required: true
        schema:
          type: string
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Content of specified type from the image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentFilesResponse'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: getImage
  /images/{imageDigest}/content/java:
    get:
      tags:
      - Images
      summary: Get the content of an image by type java
      operationId: get_image_content_by_type_javapackage
      parameters:
      - name: imageDigest
        in: path
        required: true
        schema:
          type: string
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Content of specified type from the image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentJAVAPackageResponse'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: getImage
  /images/{imageDigest}/content/malware:
    get:
      tags:
      - Images
      summary: Get the content of an image by type malware
      operationId: get_image_content_by_type_malware
      parameters:
      - name: imageDigest
        in: path
        required: true
        schema:
          type: string
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Content of specified type from the image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentMalwareResponse'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: getImage
  /images/by_id/{imageId}/content/{ctype}:
    get:
      tags:
      - Images
      summary: Get the content of an image by type
      operationId: get_image_content_by_type_imageId
      parameters:
      - name: imageId
        in: path
        required: true
        schema:
          type: string
      - name: ctype
        in: path
        required: true
        schema:
          type: string
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Content of specified type from the image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentPackageResponse'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: getImage
  /images/by_id/{imageId}/content/files:
    get:
      tags:
      - Images
      summary: Get the content of an image by type files
      operationId: get_image_content_by_type_imageId_files
      parameters:
      - name: imageId
        in: path
        required: true
        schema:
          type: string
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Content of specified type from the image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentFilesResponse'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: getImage
  /images/by_id/{imageId}/content/java:
    get:
      tags:
      - Images
      summary: Get the content of an image by type java
      operationId: get_image_content_by_type_imageId_javapackage
      parameters:
      - name: imageId
        in: path
        required: true
        schema:
          type: string
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Content of specified type from the image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentJAVAPackageResponse'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: getImage
  /images/{imageDigest}/artifacts/retrieved_files:
    get:
      summary: Return a list of analyzer artifacts of the specified type
      operationId: list_retrieved_files
      parameters:
      - name: imageDigest
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: List of file metadata objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrievedFileList'
        404:
          description: Image not found in this service
          content: {}
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: getImage
  /images/{imageDigest}/artifacts/file_content_search:
    get:
      summary: Return a list of analyzer artifacts of the specified type
      operationId: list_file_content_search_results
      parameters:
      - name: imageDigest
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: List of file metadata objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileContentSearchList'
        404:
          description: Image not found in this service
          content: {}
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: getImage
  /images/{imageDigest}/artifacts/secret_search:
    get:
      summary: Return a list of analyzer artifacts of the specified type
      operationId: list_secret_search_results
      parameters:
      - name: imageDigest
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: List of file metadata objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretSearchList'
        404:
          description: Image not found in this service
          content: {}
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: getImage
  /images/{imageDigest}/metadata:
    get:
      tags:
      - Images
      summary: List image metadata types
      operationId: list_image_metadata
      parameters:
      - name: imageDigest
        in: path
        required: true
        schema:
          type: string
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Metadata listing for the image
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: getImage
  /images/{imageDigest}/sboms/native:
    get:
      tags:
      - Images
      summary: Get image sbom in the native Anchore format
      operationId: get_image_sbom_native
      parameters:
      - name: imageDigest
        in: path
        required: true
        schema:
          type: string
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Image lookup success
          content:
            application/gzip:
              schema:
                type: string
                format: binary
        500:
          description: Internal error
          content:
            application/gzip:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: getImage
  /images/{imageDigest}/metadata/{mtype}:
    get:
      tags:
      - Images
      summary: Get the metadata of an image by type
      operationId: get_image_metadata_by_type
      parameters:
      - name: imageDigest
        in: path
        required: true
        schema:
          type: string
      - name: mtype
        in: path
        required: true
        schema:
          type: string
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Metadata of specified type from the image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataResponse'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
      x-anchore-authz-action: getImage
  /repositories:
    post:
      tags:
      - Repository Credentials
      summary: Add repository to watch
      operationId: add_repository
      parameters:
      - name: repository
        in: query
        description: full repository to add e.g. docker.io/library/alpine
        required: true
        schema:
          type: string
      - name: autosubscribe
        in: query
        description: flag to enable/disable auto tag_update activation when new images
          from a repo are added
        schema:
          type: boolean
      - name: dryrun
        in: query
        description: flag to return tags in the repository without actually watching
          the repository, default is false
        schema:
          type: boolean
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Repository and discovered tags added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionList'
      x-anchore-authz-action: createRepository
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images
  /registries:
    get:
      tags:
      - Registries
      summary: List configured registries
      description: List all configured registries the system can/will watch
      operationId: list_registries
      parameters:
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Registry listing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryConfigurationList'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.registries
      x-anchore-authz-action: listRegistries
    post:
      tags:
      - Registries
      summary: Add a new registry
      description: Adds a new registry to the system
      operationId: create_registry
      parameters:
      - name: validate
        in: query
        description: flag to determine whether or not to validate registry/credential
          at registry add time
        schema:
          type: boolean
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistryConfigurationRequest'
        required: true
      responses:
        200:
          description: Saved registry configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryConfigurationList'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.registries
      x-anchore-authz-action: createRegistry
      x-codegen-request-body-name: registrydata
  /registries/{registry}:
    get:
      tags:
      - Registries
      summary: Get a specific registry configuration
      description: Get information on a specific registry
      operationId: get_registry
      parameters:
      - name: registry
        in: path
        required: true
        schema:
          type: string
          format: path
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Registry configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryConfigurationList'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.registries
      x-anchore-authz-action: getRegistry
    put:
      tags:
      - Registries
      summary: Update/replace a registry configuration
      description: Replaces an existing registry record with the given record
      operationId: update_registry
      parameters:
      - name: registry
        in: path
        required: true
        schema:
          type: string
          format: path
      - name: validate
        in: query
        description: flag to determine whether or not to validate registry/credential
          at registry update time
        schema:
          type: boolean
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistryConfigurationRequest'
        required: true
      responses:
        200:
          description: Updated registry configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryConfigurationList'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.registries
      x-anchore-authz-action: updateRegistry
      x-codegen-request-body-name: registrydata
    delete:
      tags:
      - Registries
      summary: Delete a registry configuration
      description: Delete a registry configuration record from the system. Does not
        remove any images.
      operationId: delete_registry
      parameters:
      - name: registry
        in: path
        required: true
        schema:
          type: string
          format: path
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Delete success
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.registries
      x-anchore-authz-action: deleteRegistry
  /status:
    get:
      tags:
      - System
      summary: Service status
      description: Get the API service status
      operationId: get_status
      responses:
        200:
          description: Status listing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system
      x-anchore-authz-action: None
  /system:
    get:
      tags:
      - System
      summary: System status
      description: Get the system status including queue lengths
      operationId: get_service_detail
      responses:
        200:
          description: Status listing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatusResponse'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system
      x-anchore-authz-action: None
  /system/feeds:
    get:
      tags:
      - System
      summary: list feeds operations and information
      description: Return a list of feed and their groups along with update and record
        count information. This data reflects the state of the policy engine, not
        the upstream feed service itself.
      operationId: get_system_feeds
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeedMetadata'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-anchore-authz-action: listFeeds
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system
    post:
      tags:
      - System
      summary: trigger feeds operations
      description: Execute a synchronous feed sync operation. The response will block
        until complete, then return the result summary.
      operationId: post_system_feeds
      parameters:
      - name: flush
        in: query
        description: instruct system to flush existing data feeds records from anchore-engine
        schema:
          type: boolean
      - name: sync
        in: query
        description: instruct system to re-sync data feeds
        schema:
          type: boolean
      responses:
        200:
          description: Feeds operation success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedSyncResults'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-anchore-authz-action: updateFeeds
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system
  /system/feeds/{feed}:
    put:
      tags:
      - System
      description: Disable the feed so that it does not sync on subsequent sync operations
      operationId: toggle_feed_enabled
      parameters:
      - name: feed
        in: path
        required: true
        schema:
          type: string
      - name: enabled
        in: query
        required: true
        schema:
          type: boolean
      responses:
        200:
          description: FeedInfo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedMetadata'
        400:
          description: Bad request, fix and resend
          content: {}
        500:
          description: Internal server error processing the request. Retry expected
          content: {}
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system
      x-anchore-authz-action: updateFeeds
    delete:
      tags:
      - System
      description: Delete the groups and data for the feed and disable the feed itself
      operationId: delete_feed
      parameters:
      - name: feed
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successfully deleted
          content: {}
        404:
          description: Not found
          content: {}
        500:
          description: Internal server error processing the request. Retry expected
          content: {}
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system
      x-anchore-authz-action: updateFeeds
  /system/feeds/{feed}/{group}:
    put:
      tags:
      - System
      description: Disable a specific group within a feed to not sync
      operationId: toggle_group_enabled
      parameters:
      - name: feed
        in: path
        required: true
        schema:
          type: string
      - name: group
        in: path
        required: true
        schema:
          type: string
      - name: enabled
        in: query
        required: true
        schema:
          type: boolean
      responses:
        200:
          description: FeedInfo listing
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeedMetadata'
        400:
          description: Bad request, fix and resend
          content: {}
        500:
          description: Internal server error processing the request. Retry expected
          content: {}
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system
      x-anchore-authz-action: updateFeeds
    delete:
      tags:
      - System
      description: Delete the group data and disable the group itself
      operationId: delete_feed_group
      parameters:
      - name: feed
        in: path
        required: true
        schema:
          type: string
      - name: group
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successfully deleted
          content: {}
        404:
          description: Not found
          content: {}
        500:
          description: Internal server error processing the request. Retry expected
          content: {}
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system
      x-anchore-authz-action: updateFeeds
  /system/services:
    get:
      tags:
      - System
      summary: List system services
      operationId: list_services
      responses:
        200:
          description: Service listing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceList'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system
      x-anchore-authz-action: listServices
  /system/services/{servicename}:
    get:
      tags:
      - System
      summary: Get a service configuration and state
      operationId: get_services_by_name
      parameters:
      - name: servicename
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Service Info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceList'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system
      x-anchore-authz-action: getService
  /system/services/{servicename}/{hostid}:
    get:
      tags:
      - System
      summary: Get service config for a specific host
      operationId: get_services_by_name_and_host
      parameters:
      - name: servicename
        in: path
        required: true
        schema:
          type: string
      - name: hostid
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Listing of registered services
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceList'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system
      x-anchore-authz-action: getService
    delete:
      tags:
      - System
      summary: Delete the service config
      operationId: delete_service
      parameters:
      - name: servicename
        in: path
        required: true
        schema:
          type: string
      - name: hostid
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Delete success
          content: {}
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system
      x-anchore-authz-action: deleteService
  /system/policy_spec:
    get:
      tags:
      - System
      summary: Describe the policy language spec implemented by this service.
      description: Get the policy language spec for this service
      operationId: describe_policy
      responses:
        200:
          description: Policy Language Description
          content:
            application/json:
              schema:
                type: array
                description: List of Gate specifications
                items:
                  $ref: '#/components/schemas/GateSpec'
      x-anchore-authz-action: None
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system
  /system/error_codes:
    get:
      tags:
      - System
      summary: Describe anchore engine error codes.
      description: Describe anchore engine error codes.
      operationId: describe_error_codes
      responses:
        200:
          description: Error Codes Description
          content:
            application/json:
              schema:
                type: array
                description: List of Error Code Descriptions
                items:
                  $ref: '#/components/schemas/AnchoreErrorCode'
      x-anchore-authz-action: None
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system
  /event_types:
    get:
      tags:
      - Events
      summary: List Event Types
      description: Returns list of event types in the category hierarchy
      operationId: list_event_types
      responses:
        200:
          description: List of event types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTypesList'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.events
      x-anchore-authz-action: listEvents
  /events:
    get:
      tags:
      - Events
      summary: List Events
      description: Returns a paginated list of events in the descending order of their
        occurrence. Optional query parameters may be used for filtering results
      operationId: list_events
      parameters:
      - name: source_servicename
        in: query
        description: Filter events by the originating service
        schema:
          type: string
      - name: source_hostid
        in: query
        description: Filter events by the originating host ID
        schema:
          type: string
      - name: event_type
        in: query
        description: Filter events by a prefix match on the event type (e.g. "user.image.")
        schema:
          pattern: ^[a-z0-9-_.*]+$
          type: string
      - name: resource_type
        in: query
        description: Filter events by the type of resource - tag, imageDigest, repository
          etc
        schema:
          type: string
      - name: resource_id
        in: query
        description: Filter events by the id of the resource
        schema:
          type: string
      - name: level
        in: query
        description: Filter events by the level - INFO or ERROR
        schema:
          type: string
      - name: since
        in: query
        description: Return events that occurred after the timestamp
        schema:
          type: string
      - name: before
        in: query
        description: Return events that occurred before the timestamp
        schema:
          type: string
      - name: page
        in: query
        description: Pagination controls - return the nth page of results. Defaults
          to first page if left empty
        schema:
          type: integer
          default: 1
      - name: limit
        in: query
        description: Number of events in the result set. Defaults to 100 if left empty
        schema:
          type: integer
          default: 100
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Paginated list of event records and the next token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsList'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.events
      x-anchore-authz-action: listEvents
    delete:
      tags:
      - Events
      summary: Delete Events
      description: Delete all or a subset of events filtered using the optional query
        parameters
      operationId: delete_events
      parameters:
      - name: before
        in: query
        description: Delete events that occurred before the timestamp
        schema:
          type: string
      - name: since
        in: query
        description: Delete events that occurred after the timestamp
        schema:
          type: string
      - name: level
        in: query
        description: Delete events that match the level - INFO or ERROR
        schema:
          type: string
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: List of deleted event IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.events
      x-anchore-authz-action: deleteEvents
  /events/{eventId}:
    get:
      tags:
      - Events
      summary: Get Event
      description: Lookup an event by its event ID
      operationId: get_event
      parameters:
      - name: eventId
        in: path
        description: Event ID of the event for lookup
        required: true
        schema:
          type: string
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Single event record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.events
      x-anchore-authz-action: getEvent
    delete:
      tags:
      - Events
      summary: Delete Event
      description: Delete an event by its event ID
      operationId: delete_event
      parameters:
      - name: eventId
        in: path
        description: Event ID of the event to be deleted
        required: true
        schema:
          type: string
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Delete success
          content: {}
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.events
      x-anchore-authz-action: getEvent
  /query/images/by_vulnerability:
    get:
      tags:
      - Query
      summary: List images vulnerable to the specific vulnerability ID.
      description: Returns a listing of images and their respective packages vulnerable
        to the given vulnerability ID
      operationId: query_images_by_vulnerability
      parameters:
      - name: vulnerability_id
        in: query
        description: The ID of the vulnerability to search for within all images stored
          in anchore-engine (e.g. CVE-1999-0001)
        required: true
        schema:
          type: string
      - name: namespace
        in: query
        description: Filter results to images within the given vulnerability namespace
          (e.g. debian:8, ubuntu:14.04)
        schema:
          type: string
      - name: affected_package
        in: query
        description: Filter results to images with vulnable packages with the given
          package name (e.g. libssl)
        schema:
          type: string
      - name: severity
        in: query
        description: Filter results to vulnerable package/vulnerability with the given
          severity
        schema:
          type: string
          enum:
          - Unknown
          - Negligible
          - Low
          - Medium
          - High
          - Critical
      - name: vendor_only
        in: query
        description: Filter results to include only vulnerabilities that are not marked
          as invalid by upstream OS vendor data
        schema:
          type: boolean
          default: true
      - name: page
        in: query
        description: The page of results to fetch. Pages start at 1
        schema:
          type: integer
      - name: limit
        in: query
        description: Limit the number of records for the requested page. If omitted
          or set to 0, return all results in a single page
        schema:
          type: integer
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Image lookup success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVulnerableImageList'
        400:
          description: Invalid filter parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.query
      x-anchore-authz-action: listImages
  /query/images/by_package:
    get:
      tags:
      - Query
      summary: List of images containing given package
      description: Filterable query interface to search for images containing specified
        package
      operationId: query_images_by_package
      parameters:
      - name: name
        in: query
        description: Name of package to search for (e.g. sed)
        required: true
        schema:
          type: string
      - name: package_type
        in: query
        description: Type of package to filter on (e.g. dpkg)
        schema:
          type: string
      - name: version
        in: query
        description: Version of named package to filter on (e.g. 4.4-1)
        schema:
          type: string
      - name: page
        in: query
        description: The page of results to fetch. Pages start at 1
        schema:
          type: string
      - name: limit
        in: query
        description: Limit the number of records for the requested page. If omitted
          or set to 0, return all results in a single page
        schema:
          type: integer
      - name: x-anchore-account
        in: header
        description: An account name to change the resource scope of the request to
          that account, if permissions allow (admin only)
        schema:
          type: string
      responses:
        200:
          description: Image listing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedImageList'
        400:
          description: Bad filter parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.query
      x-anchore-authz-action: listImages
  /query/vulnerabilities:
    get:
      tags:
      - Query
      summary: Listing information about given vulnerability
      description: List (w/filters) vulnerability records known by the system, with
        affected packages information if present
      operationId: query_vulnerabilities
      parameters:
      - name: id
        in: query
        description: The ID of the vulnerability (e.g. CVE-1999-0001)
        required: true
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: affected_package
        in: query
        description: Filter results by specified package name (e.g. sed)
        schema:
          type: string
      - name: affected_package_version
        in: query
        description: Filter results by specified package version (e.g. 4.4-1)
        schema:
          type: string
      - name: page
        in: query
        description: The page of results to fetch. Pages start at 1
        schema:
          type: string
          default: "1"
      - name: limit
        in: query
        description: Limit the number of records for the requested page. If omitted
          or set to 0, return all results in a single page
        schema:
          type: integer
      - name: namespace
        in: query
        description: Namespace(s) to filter vulnerability records by
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: Vulnerability listing paginated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVulnerabilityList'
        400:
          description: Invalid filter parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.query
      x-anchore-authz-action: None
  /accounts:
    get:
      tags:
      - User Management
      summary: List user summaries. Only available to the system admin user.
      operationId: list_accounts
      parameters:
      - name: state
        in: query
        description: Filter accounts by state
        schema:
          type: string
          enum:
          - enabled
          - disabled
          - deleting
      responses:
        200:
          description: Accound summary listing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountList'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts
      x-anchore-authz-action: listAccounts
    post:
      tags:
      - User Management
      summary: Create a new user. Only avaialble to admin user.
      operationId: create_account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreationRequest'
        required: true
      responses:
        200:
          description: Account Record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        409:
          description: Conflicting user information. User already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts
      x-anchore-authz-action: createAccount
      x-codegen-request-body-name: account
  /accounts/{accountname}:
    get:
      tags:
      - User Management
      summary: Get info about an user. Only available to admin user. Uses the main
        user Id, not a username.
      operationId: get_account
      parameters:
      - name: accountname
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Get user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts
      x-anchore-authz-action: getAccount
    delete:
      tags:
      - User Management
      summary: Delete the specified account, only allowed if the account is in the
        disabled state. All users will be deleted along with the account and all resources
        will be garbage collected
      operationId: delete_account
      parameters:
      - name: accountname
        in: path
        required: true
        schema:
          type: string
      responses:
        204:
          description: Successful deletion
          content: {}
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts
      x-anchore-authz-action: deleteAccount
  /accounts/{accountname}/state:
    put:
      tags:
      - User Management
      summary: Update the state of an account to either enabled or disabled. For deletion
        use the DELETE route
      operationId: update_account_state
      parameters:
      - name: accountname
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountStatus'
        required: true
      responses:
        200:
          description: Updated state of the account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountStatus'
        400:
          description: State requested is invalid based on current state of the account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts
      x-anchore-authz-action: updateAccount
      x-codegen-request-body-name: desired_state
  /accounts/{accountname}/users:
    get:
      tags:
      - User Management
      summary: List accounts for the user
      operationId: list_users
      parameters:
      - name: accountname
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: User listing
          content:
            application/json:
              schema:
                type: array
                description: List of user credential records
                items:
                  $ref: '#/components/schemas/User'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts
      x-anchore-authz-action: listUsers
    post:
      tags:
      - User Management
      summary: Create a new user
      operationId: create_user
      parameters:
      - name: accountname
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreationRequest'
        required: true
      responses:
        200:
          description: Credential summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts
      x-anchore-authz-action: createUser
      x-codegen-request-body-name: user
  /accounts/{accountname}/users/{username}:
    get:
      tags:
      - User Management
      summary: Get a specific user in the specified account
      operationId: get_account_user
      parameters:
      - name: accountname
        in: path
        required: true
        schema:
          type: string
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: User record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts
      x-anchore-authz-action: getUser
    delete:
      tags:
      - User Management
      summary: Delete a specific user credential by username of the credential. Cannot
        be the credential used to authenticate the request.
      operationId: delete_user
      parameters:
      - name: accountname
        in: path
        required: true
        schema:
          type: string
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        204:
          description: Deleted credential
          content: {}
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts
      x-anchore-authz-action: deleteUser
  /accounts/{accountname}/users/{username}/credentials:
    get:
      tags:
      - User Management
      summary: Get current credential summary
      operationId: list_user_credentials
      parameters:
      - name: accountname
        in: path
        required: true
        schema:
          type: string
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: User credential listing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialList'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-anchore-authz-action: getUser
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts
    post:
      tags:
      - User Management
      summary: add/replace credential
      operationId: create_user_credential
      parameters:
      - name: accountname
        in: path
        required: true
        schema:
          type: string
      - name: username
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessCredential'
        required: true
      responses:
        200:
          description: Add a credential, overwritting if already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-anchore-authz-action: updateUser
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts
      x-codegen-request-body-name: credential
    delete:
      tags:
      - User Management
      summary: Delete a credential by type
      operationId: delete_user_credential
      parameters:
      - name: accountname
        in: path
        required: true
        schema:
          type: string
      - name: username
        in: path
        required: true
        schema:
          type: string
      - name: credential_type
        in: query
        required: true
        schema:
          type: string
          enum:
          - password
      responses:
        204:
          description: Successful deletion
          content: {}
        400:
          description: Conflict, cannot delete the credential used to authenticate
            this request
          content: {}
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-anchore-authz-action: updateUser
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts
  /account:
    get:
      tags:
      - Identity
      summary: List the account for the authenticated user
      operationId: get_users_account
      responses:
        200:
          description: User details for caller's user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts
      x-anchore-authz-action: getAccount
  /user:
    get:
      tags:
      - Identity
      summary: List authenticated user info
      operationId: get_user
      responses:
        200:
          description: User details for caller's user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.user
      x-anchore-authz-action: None
  /user/credentials:
    get:
      tags:
      - Identity
      summary: Get current credential summary
      operationId: get_credentials
      responses:
        200:
          description: User credential listing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialList'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.user
      x-anchore-authz-action: None
    post:
      tags:
      - Identity
      summary: add/replace credential
      operationId: add_credential
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessCredential'
        required: true
      responses:
        200:
          description: Add a credential, overwritting if already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.user
      x-anchore-authz-action: None
      x-codegen-request-body-name: credential
  /archives:
    get:
      tags:
      - Archives
      operationId: list_archives
      responses:
        200:
          description: Archive summary listing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchiveSummary'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.archive
      x-anchore-authz-action: listArchives
  /archives/rules:
    get:
      tags:
      - Archives
      operationId: list_analysis_archive_rules
      parameters:
      - name: system_global
        in: query
        description: If true include system global rules (owned by admin) even for
          non-admin users. Defaults to true if not set. Can be set to false to exclude
          globals
        schema:
          type: boolean
      responses:
        200:
          description: Archive transition rules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisArchiveRules'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.archive
      x-anchore-authz-action: listArchiveTransitionRules
    post:
      tags:
      - Archives
      operationId: create_analysis_archive_rule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalysisArchiveTransitionRule'
        required: true
      responses:
        200:
          description: Archive transition rule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisArchiveTransitionRule'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.archive
      x-anchore-authz-action: createArchiveTransitionRule
      x-codegen-request-body-name: rule
  /archives/rules/{ruleId}:
    get:
      tags:
      - Archives
      operationId: get_analysis_archive_rule
      parameters:
      - name: ruleId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Archive transition rule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisArchiveTransitionRule'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.archive
      x-anchore-authz-action: getArchiveTransitionRule
    delete:
      tags:
      - Archives
      operationId: delete_analysis_archive_rule
      parameters:
      - name: ruleId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Analysis archive rule succesfuly deleted
          content: {}
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.archive
      x-anchore-authz-action: deleteArchiveTransitionRule
  /archives/images:
    get:
      tags:
      - Archives
      operationId: list_analysis_archive
      responses:
        200:
          description: Image analysis archive listing for the requesting account (not
            the whole system)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchivedAnalyses'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.archive
      x-anchore-authz-action: listArchivedImageAnalysis
    post:
      tags:
      - Archives
      operationId: archive_image_analysis
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageAnalysisReferences'
        required: true
      responses:
        200:
          description: Archive statuses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddAnalysisArchiveResult'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.archive
      x-anchore-authz-action: createArchivedImageAnalysis
      x-codegen-request-body-name: imageReferences
  /archives/images/{imageDigest}:
    get:
      tags:
      - Archives
      description: Returns the archive metadata record identifying the image and tags
        for the analysis in the archive.
      operationId: get_archived_analysis
      parameters:
      - name: imageDigest
        in: path
        description: The image digest to identify the image analysis
        required: true
        schema:
          type: string
      responses:
        200:
          description: Archived Image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchivedAnalysis'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.archive
      x-anchore-authz-action: getArchivedImageAnalysis
    delete:
      tags:
      - Archives
      description: Performs a synchronous archive deletion
      operationId: delete_archived_analysis
      parameters:
      - name: imageDigest
        in: path
        required: true
        schema:
          type: string
      - name: force
        in: query
        schema:
          type: boolean
      responses:
        200:
          description: ArchivdImageAnalysis successfully deleted
          content: {}
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.archive
      x-anchore-authz-action: deleteArchivedImageAnalysis
  /oauth/token:
    post:
      description: Request a jwt token for subsequent operations, this request is
        authenticated with normal HTTP auth
      operationId: get_oauth_token
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                grant_type:
                  type: string
                  description: OAuth Grant type for token
                  default: password
                username:
                  type: string
                  description: User to assign OAuth token to
                password:
                  type: string
                  description: Password for corresponding user
                client_id:
                  type: string
                  description: The type of client used for the OAuth token
                  default: anonymous
      responses:
        200:
          description: Resulting JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        500:
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.oauth
      x-anchore-authz-action: None
  /system/webhooks/{webhook_type}/test:
    post:
      tags:
      - System
      summary: Adds the capabilities to test a webhook delivery for the given notification
        type
      description: Loads the Webhook configuration for webhook_type, and sends the
        notification out as a test
      operationId: test_webhook
      parameters:
      - name: webhook_type
        in: path
        description: The Webhook Type that we should test
        required: true
        schema:
          type: string
      - name: notification_type
        in: query
        description: What kind of Notification to send
        schema:
          type: string
          default: tag_update
          enum:
          - tag_update
          - analysis_update
          - vuln_update
          - policy_eval
      responses:
        200:
          description: The Webhook was sent successfully. Schemas may be found under
            Models (PolicyEvalNotification, TagUpdateNotification, VulnUpdateNotification,
            AnalysisUpdateNotification)
          content: {}
        400:
          description: The Webhook failed to send due to misconfiguration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        500:
          description: The Webhook failed to send due to an Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
      x-anchore-authz-action: None
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system
  /imports/images:
    get:
      tags:
      - Imports
      summary: Lists in-progress imports
      operationId: list_operations
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageImports'
        500:
          description: Internal Error
          content: {}
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports
      x-anchore-authz-action: importImage
    post:
      tags:
      - Imports
      summary: Begin the import of an image analyzed by Syft into the system
      operationId: create_operation
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageImportOperation'
        500:
          description: Internal Error
          content: {}
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports
      x-anchore-authz-action: importImage
  /imports/images/{operation_id}:
    get:
      tags:
      - Imports
      summary: Get detail on a single import
      operationId: get_operation
      parameters:
      - name: operation_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageImportOperation'
        500:
          description: Internal Error
          content: {}
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports
      x-anchore-authz-action: importImage
    delete:
      tags:
      - Imports
      summary: Invalidate operation ID so it can be garbage collected
      operationId: invalidate_operation
      parameters:
      - name: operation_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageImportOperation'
        500:
          description: Internal Error
          content: {}
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports
      x-anchore-authz-action: importImage
  /imports/images/{operation_id}/packages:
    get:
      tags:
      - Imports
      summary: List uploaded package manifests
      operationId: list_import_packages
      parameters:
      - name: operation_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportContentDigestList'
        500:
          description: Internal Error
          content: {}
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports
      x-anchore-authz-action: importImage
    post:
      tags:
      - Imports
      summary: Begin the import of an image analyzed by Syft into the system
      operationId: import_image_packages
      parameters:
      - name: operation_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImagePackageManifest'
        required: true
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageImportContentResponse'
        500:
          description: Internal Error
          content: {}
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports
      x-anchore-authz-action: importImage
      x-codegen-request-body-name: sbom
  /imports/images/{operation_id}/dockerfile:
    get:
      tags:
      - Imports
      summary: List uploaded dockerfiles
      operationId: list_import_dockerfiles
      parameters:
      - name: operation_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportContentDigestList'
        500:
          description: Internal Error
          content: {}
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports
      x-anchore-authz-action: importImage
    post:
      tags:
      - Imports
      summary: Begin the import of an image analyzed by Syft into the system
      operationId: import_image_dockerfile
      parameters:
      - name: operation_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          text/plain; utf-8:
            schema:
              type: string
        required: true
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageImportContentResponse'
        500:
          description: Internal Error
          content: {}
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports
      x-anchore-authz-action: importImage
      x-codegen-request-body-name: contents
  /imports/images/{operation_id}/manifest:
    get:
      tags:
      - Imports
      summary: List uploaded image manifests
      operationId: list_import_image_manifests
      parameters:
      - name: operation_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportContentDigestList'
        500:
          description: Internal Error
          content: {}
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports
      x-anchore-authz-action: importImage
    post:
      tags:
      - Imports
      summary: Import a docker or OCI distribution manifest to associate with the
        image
      operationId: import_image_manifest
      parameters:
      - name: operation_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.oci.image.manifest.v1+json:
            schema:
              type: object
          application/vnd.docker.distribution.manifest.v2+json:
            schema:
              type: object
          application/vnd.docker.distribution.manifest.v1+json:
            schema:
              type: object
          application/vnd.docker.distribution.manifest.v1+prettyjws:
            schema:
              type: object
        required: true
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageImportContentResponse'
        500:
          description: Internal Error
          content: {}
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports
      x-anchore-authz-action: importImage
      x-codegen-request-body-name: contents
  /imports/images/{operation_id}/parent_manifest:
    get:
      tags:
      - Imports
      summary: List uploaded parent manifests (manifest lists for a tag)
      operationId: list_import_parent_manifests
      parameters:
      - name: operation_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportContentDigestList'
        500:
          description: Internal Error
          content: {}
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports
      x-anchore-authz-action: importImage
    post:
      tags:
      - Imports
      summary: Import a docker or OCI distribution manifest list to associate with
        the image
      operationId: import_image_parent_manifest
      parameters:
      - name: operation_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/vnd.docker.distribution.manifest.list.v2+json:
            schema:
              type: object
          application/vnd.oci.image.index.v1+json:
            schema:
              type: object
        required: true
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageImportContentResponse'
        500:
          description: Internal Error
          content: {}
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports
      x-anchore-authz-action: importImage
      x-codegen-request-body-name: contents
  /imports/images/{operation_id}/image_config:
    get:
      tags:
      - Imports
      summary: List uploaded image configs
      operationId: list_import_image_configs
      parameters:
      - name: operation_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportContentDigestList'
        500:
          description: Internal Error
          content: {}
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports
      x-anchore-authz-action: importImage
    post:
      tags:
      - Imports
      summary: Import a docker or OCI image config to associate with the image
      operationId: import_image_config
      parameters:
      - name: operation_id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageImportContentResponse'
        500:
          description: Internal Error
          content: {}
      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports
      x-anchore-authz-action: importImage
      x-codegen-request-body-name: contents
components:
  schemas:
    PaginationProperties:
      type: object
      properties:
        page:
          type: string
          description: The page number returned (should match the requested page query
            string param)
        next_page:
          type: string
          description: True if additional pages exist (page + 1) or False if this
            is the last page
        returned_count:
          type: integer
          description: The number of items sent in this response
      description: Properties for common pagination handling to be included in any
        wrapping object that needs pagination elements
    PackageReference:
      type: object
      properties:
        name:
          type: string
          description: Package name
        version:
          type: string
          description: A version for the package. If null, then references all versions
          nullable: true
        type:
          type: string
          description: Package type (e.g. package, rpm, deb, apk, jar, npm, gem, ...)
        will_not_fix:
          type: boolean
          description: Whether a vendor will or will not fix a vulnerabitlity
      description: A record of a software item which is vulnerable or carries a fix
        for a vulnerability
    VulnerablePackageReference:
      type: object
      properties:
        name:
          type: string
          description: Package name
        version:
          type: string
          description: A version for the package. If null, then references all versions
          nullable: true
        type:
          type: string
          description: Package type (e.g. package, rpm, deb, apk, jar, npm, gem, ...)
        severity:
          type: string
          description: Severity of vulnerability affecting package
        namespace:
          type: string
          description: Vulnerability namespace of affected package
      description: A record of a software item which is vulnerable or carries a fix
        for a vulnerability
    StandaloneVulnerability:
      type: object
      properties:
        id:
          type: string
          description: Vulnerability identifier. May be CVE-X, RHSA-X, etc. Not necessarily
            unique across namespaces
        namespace:
          type: string
          description: The namespace for the vulnerability record to avoid conflicts
            for the same id in different distros or sources (e.g. deb vs ubuntu for
            same CVE)
        affected_packages:
          type: array
          description: The array of packages (typically packages) that are vulnerable-to
            or provide fixes-for this vulnerability
          items:
            $ref: '#/components/schemas/PackageReference'
        severity:
          type: string
          description: Severity label specific to the namepsace
          enum:
          - Unknown
          - Negligible
          - Low
          - Medium
          - High
          - Critical
        link:
          type: string
          description: URL for the upstream CVE record in the reporting source (e.g.
            ubuntu security tracker)
        nvd_data:
          $ref: '#/components/schemas/NvdDataList'
        vendor_data:
          $ref: '#/components/schemas/VendorDataList'
        description:
          type: string
          description: Description of the vulnerability if available
        references:
          type: array
          description: List of references including
          items:
            $ref: '#/components/schemas/VulnerabilityReference'
      description: A single vulnerability record in a single namespace, the unique
        key is the combination of the id and namespace
    VulnerabilityReference:
      type: object
      properties:
        source:
          type: string
          description: The reference source
        tags:
          type: array
          items:
            type: string
        url:
          type: string
          description: The reference url
      description: An external link/reference
    ImageReference:
      type: object
      properties:
        digest:
          type: string
          description: The image digest
        id:
          type: string
          description: The image id if available
        analyzed_at:
          type: string
          description: Timestamp, in rfc3339 format, indicating when the image state
            became 'analyzed' in Anchore Engine.
        tag_history:
          type: array
          items:
            $ref: '#/components/schemas/TagEntry'
      description: A summary of an image identity, including digest, id (if available),
        and any tags known to have ever been mapped to the digest
    TagEntry:
      type: object
      properties:
        pullstring:
          type: string
          description: The pullable string for the tag. E.g. "docker.io/library/node:latest"
        registry:
          type: string
          description: The registry hostname:port section of the pull string
        repository:
          type: string
          description: The repository section of the pull string
        tag:
          type: string
          description: The tag-only section of the pull string
        detected_at:
          type: string
          description: The timestamp at which the Anchore Engine detected this tag
            was mapped to the image digest. Does not necessarily indicate when the
            tag was actually pushed to the registry.
          format: date-time
      description: A docker-pullable tag value as well as deconstructed components
    VulnerableImage:
      type: object
      properties:
        image:
          $ref: '#/components/schemas/ImageReference'
        affected_packages:
          type: array
          items:
            $ref: '#/components/schemas/VulnerablePackageReference'
      description: A record of an image vulnerable to some known vulnerability. Includes
        vulnerable package information
    ImageWithPackages:
      type: object
      properties:
        image:
          $ref: '#/components/schemas/ImageReference'
        packages:
          type: array
          items:
            $ref: '#/components/schemas/PackageReference'
      description: An image record that contains packages
    PaginatedVulnerableImageList:
      description: Pagination wrapped list of images with vulnerabilties that match
        some filter
      allOf:
      - $ref: '#/components/schemas/PaginationProperties'
      - type: object
        properties:
          images:
            type: array
            items:
              $ref: '#/components/schemas/VulnerableImage'
    PaginatedVulnerabilityList:
      description: A paginated listing of vulnerability records sorted by ID in descending
        order
      allOf:
      - $ref: '#/components/schemas/PaginationProperties'
      - type: object
        properties:
          vulnerabilities:
            type: array
            description: The listing of matching vulnerabilities for the query subject
              to pagination
            items:
              $ref: '#/components/schemas/StandaloneVulnerability'
    PaginatedImageList:
      description: Pagination wrapped list of images that match some filter
      allOf:
      - $ref: '#/components/schemas/PaginationProperties'
      - type: object
        properties:
          images:
            type: array
            items:
              $ref: '#/components/schemas/ImageWithPackages'
    ImageAnalysisRequest:
      type: object
      properties:
        dockerfile:
          pattern: ^[a-zA-Z0-9+/=]+$
          type: string
          description: Base64 encoded content of the dockerfile for the image, if
            available. Deprecated in favor of the 'source' field.
        digest:
          type: string
          description: A digest string for an image, maybe a pull string or just a
            digest. e.g. nginx@sha256:123 or sha256:abc123. If a pull string, it must
            have same regisry/repo as the tag field. Deprecated in favor of the 'source'
            field
        tag:
          type: string
          description: Full pullable tag reference for image. e.g. docker.io/nginx:latest.
            Deprecated in favor of the 'source' field
        created_at:
          type: string
          description: Optional override of the image creation time, only honored
            when both tag and digest are also supplied  e.g. 2018-10-17T18:14:00Z.
            Deprecated in favor of the 'source' field
          format: date-time
        image_type:
          type: string
          description: Optional. The type of image this is adding, defaults to "docker".
            This can be ommitted until multiple image types are supported.
        annotations:
          type: object
          properties: {}
          description: Annotations to be associated with the added image in key/value
            form
        source:
          $ref: '#/components/schemas/ImageSource'
      description: A request to add an image to be watched and analyzed by the engine.
        Optionally include the dockerfile content. Either source, digest or tag must
        be present.
    ImageSource:
      type: object
      properties:
        tag:
          $ref: '#/components/schemas/RegistryTagSource'
        digest:
          $ref: '#/components/schemas/RegistryDigestSource'
        archive:
          $ref: '#/components/schemas/AnalysisArchiveSource'
        import:
          $ref: '#/components/schemas/ImageImportManifest'
      description: A set of analysis source types. Only one may be set in any given
        request.
    RegistryTagSource:
      required:
      - pullstring
      type: object
      properties:
        pullstring:
          type: string
          description: A docker pull string (e.g. docker.io/nginx:latest, or docker.io/nginx@sha256:abd)
            to retrieve the image
        dockerfile:
          pattern: ^[a-zA-Z0-9+/=]+$
          type: string
          description: Base64 encoded content of the dockerfile used to build the
            image, if available.
      description: An image reference using a tag in a registry, this is the most
        common source type.
      nullable: true
      x-nullable: true
    RegistryDigestSource:
      required:
      - pullstring
      - tag
      type: object
      properties:
        pullstring:
          type: string
          description: A digest-based pullstring (e.g. docker.io/nginx@sha256:123abc)
        tag:
          type: string
          description: A valid docker tag reference (e.g. docker.io/nginx:latest)
            that will be associated with the image but not used to pull the image.
        creation_timestamp_override:
          type: string
          description: Optional override of the image creation time to support proper
            tag history construction in cases of out-of-order analysis compared to
            registry history for the tag
          format: date-time
        dockerfile:
          pattern: ^[a-zA-Z0-9+/=]+$
          type: string
          description: Base64 encoded content of the dockerfile used to build the
            image, if available.
      description: An image reference using a digest in a registry, includes some
        extra tag and timestamp info in addition to the pull string to allow proper
        tag history reconstruction.
      nullable: true
      x-nullable: true
    AnalysisArchiveSource:
      required:
      - digest
      type: object
      properties:
        digest:
          pattern: ^sha256:[a-fA-F0-9]{64}$
          type: string
          description: The image digest identify the analysis. Archived analyses are
            based on digest, tag records are restored as analysis is restored.
      description: An image reference in the analysis archive for the purposes of
        loading analysis from the archive into th working set
      nullable: true
      x-nullable: true
    LocalAnalysisSource:
      type: object
      properties:
        digest:
          type: string
    PolicyBundle:
      required:
      - id
      - mappings
      - policies
      - version
      type: object
      properties:
        id:
          type: string
          description: Id of the bundle
        name:
          type: string
          description: Human readable name for the bundle
        comment:
          type: string
          description: Description of the bundle, human readable
        version:
          type: string
          description: Version id for this bundle format
        whitelists:
          type: array
          description: Whitelists which define which policy matches to disregard explicitly
            in the final policy decision
          items:
            $ref: '#/components/schemas/Whitelist'
        policies:
          type: array
          description: Policies which define the go/stop/warn status of an image using
            rule matches on image properties
          items:
            $ref: '#/components/schemas/Policy'
        mappings:
          type: array
          description: Mapping rules for defining which policy and whitelist(s) to
            apply to an image based on a match of the image tag or id. Evaluated in
            order.
          items:
            $ref: '#/components/schemas/MappingRule'
        whitelisted_images:
          type: array
          description: List of mapping rules that define which images should always
            be passed (unless also on the blacklist), regardless of policy result.
          items:
            $ref: '#/components/schemas/ImageSelectionRule'
        blacklisted_images:
          type: array
          description: List of mapping rules that define which images should always
            result in a STOP/FAIL policy result regardless of policy content or presence
            in whitelisted_images
          items:
            $ref: '#/components/schemas/ImageSelectionRule'
      description: A bundle containing a set of policies, whitelists, and rules for
        mapping them to specific images
    WhitelistItem:
      required:
      - gate
      - trigger_id
      type: object
      properties:
        id:
          type: string
        gate:
          type: string
        trigger_id:
          type: string
        expires_on:
          type: string
          format: date-time
      description: Identifies a specific gate and trigger match from a policy against
        an image and indicates it should be ignored in final policy decisions
    PolicyRule:
      required:
      - action
      - gate
      - trigger
      type: object
      properties:
        id:
          type: string
        gate:
          type: string
        trigger:
          type: string
        action:
          type: string
          enum:
          - GO
          - STOP
          - WARN
        params:
          type: array
          items:
            required:
            - name
            - value
            type: object
            properties:
              name:
                type: string
              value:
                type: string
      description: A rule that defines and decision value if the match is found true
        for a given image.
    Whitelist:
      required:
      - id
      - version
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        version:
          type: string
        comment:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/WhitelistItem'
      description: A collection of whitelist items to match a policy evaluation against.
    ImageRef:
      required:
      - type
      - value
      type: object
      properties:
        type:
          type: string
          enum:
          - tag
          - digest
          - id
        value:
          type: string
      description: A reference to an image
    DeleteImageResponse:
      required:
      - digest
      - status
      type: object
      properties:
        digest:
          type: string
        status:
          type: string
          description: Current status of the image deletion
          enum:
          - not_found
          - deleting
          - delete_failed
        detail:
          type: string
      description: Image deletion response containing status and details
    DeleteImageResponseList:
      type: array
      description: A list of delete image responses
      items:
        $ref: '#/components/schemas/DeleteImageResponse'
    Policy:
      required:
      - id
      - version
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        comment:
          type: string
        version:
          type: string
        rules:
          type: array
          items:
            $ref: '#/components/schemas/PolicyRule'
    ImageSelectionRule:
      required:
      - image
      - name
      - registry
      - repository
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        registry:
          type: string
        repository:
          type: string
        image:
          $ref: '#/components/schemas/ImageRef'
    MappingRule:
      required:
      - image
      - name
      - registry
      - repository
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        whitelist_ids:
          type: array
          items:
            type: string
        policy_id:
          type: string
          description: Optional single policy to evalute, if set will override any
            value in policy_ids, for backwards compatibility. Generally, policy_ids
            should be used even with a array of length 1.
        policy_ids:
          type: array
          description: List of policyIds to evaluate in order, to completion
          items:
            type: string
            description: PolicyId to evaluate
        registry:
          type: string
        repository:
          type: string
        image:
          $ref: '#/components/schemas/ImageRef'
    PolicyBundleRecord:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
        last_updated:
          type: string
          format: date-time
        policyId:
          type: string
          description: The bundle's identifier
        active:
          type: boolean
          description: True if the bundle is currently defined to be used automatically
        userId:
          type: string
          description: UserId of the user that owns the bundle
        policy_source:
          type: string
          description: Source location of where the policy bundle originated
        policybundle:
          $ref: '#/components/schemas/PolicyBundle'
      description: A policy bundle plus some metadata
    PolicyBundleList:
      type: array
      description: List of PolicyBundleRecord objects
      items:
        $ref: '#/components/schemas/PolicyBundleRecord'
    ImageContent:
      type: object
      description: A metadata content record for a specific image, containing different
        content type entries
    ImageDetail:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
        last_updated:
          type: string
          format: date-time
        fulltag:
          type: string
          description: Full docker-pullable tag string referencing the image
        fulldigest:
          type: string
          description: Full docker-pullable digest string including the registry url
            and repository necessary get the image
        userId:
          type: string
        imageId:
          type: string
        registry:
          type: string
        repo:
          type: string
        dockerfile:
          type: string
          nullable: true
        imageDigest:
          type: string
          description: The parent Anchore Image record to which this detail maps
      description: A metadata detail record for a specific image. Multiple detail
        records may map a single catalog image.
    AnchoreImageTagSummaryList:
      type: array
      description: a list of AnchoreImageTagSummary objects
      items:
        $ref: '#/components/schemas/AnchoreImageTagSummary'
    AnchoreImageTagSummary:
      type: object
      properties:
        imageDigest:
          type: string
        parentDigest:
          type: string
        imageId:
          type: string
        analysis_status:
          type: string
        fulltag:
          type: string
        created_at:
          type: integer
        analyzed_at:
          type: integer
        tag_detected_at:
          type: integer
        image_status:
          type: string
      description: A unique image in the engine.
    AnchoreImage:
      type: object
      properties:
        image_content:
          $ref: '#/components/schemas/ImageContent'
        image_detail:
          type: array
          description: Details specific to an image reference and type such as tag
            and image source
          items:
            $ref: '#/components/schemas/ImageDetail'
        last_updated:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        imageDigest:
          type: string
        userId:
          type: string
        annotations:
          type: object
          properties: {}
        image_status:
          type: string
          description: State of the image
          enum:
          - active
          - inactive
          - disabled
        analysis_status:
          type: string
          description: A state value for the current status of the analysis progress
            of the image
          enum:
          - not_analyzed
          - analyzing
          - analyzed
          - analysis_failed
        record_version:
          type: string
          description: The version of the record, used for internal schema updates
            and data migrations.
      description: A unique image in the engine. May have multiple tags or references.
        Unique to an image content across registries or repositories.
    AnchoreImageList:
      type: array
      description: A list of Anchore Images
      items:
        $ref: '#/components/schemas/AnchoreImage'
    SystemStatusResponse:
      type: object
      properties:
        service_states:
          $ref: '#/components/schemas/ServiceList'
      description: System status response
    StatusResponse:
      type: object
      properties:
        available:
          type: boolean
        busy:
          type: boolean
        up:
          type: boolean
        message:
          type: string
        version:
          type: string
        db_version:
          type: string
        detail:
          type: object
          properties: {}
      description: System status response
    ImageAnalysisReport:
      type: object
      description: Analysis report json to be imported
    ApiErrorResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        error_type:
          type: string
        message:
          type: string
        detail:
          type: object
          properties: {}
          description: Details structure for additional information about the error
            if available. Content and structure will be error specific.
      description: Generic HTTP API error response
    Service:
      type: object
      properties:
        hostid:
          type: string
          description: The unique id of the host on which the service is executing
        servicename:
          type: string
          description: Registered service name
        base_url:
          type: string
          description: The url to reach the service, including port as needed
        status_message:
          type: string
          description: A state indicating the condition of the service. Normal operation
            is 'registered'
        service_detail:
          $ref: '#/components/schemas/StatusResponse'
        status:
          type: boolean
        version:
          type: string
          description: The version of the service as reported by the service implementation
            on registration
      description: A service status record
    ServiceList:
      type: array
      description: A list of service objects
      items:
        $ref: '#/components/schemas/Service'
    ContentResponse:
      type: object
      properties:
        imageDigest:
          type: string
        content_type:
          type: string
        content:
          type: array
          items:
            type: object
            properties: {}
      description: Generic wrapper for content listings from images
    ContentFilesResponse:
      type: object
      properties:
        imageDigest:
          type: string
        content_type:
          type: string
        content:
          type: array
          items:
            type: object
            properties:
              filename:
                type: string
              gid:
                type: integer
              linkdest:
                type: string
                nullable: true
              mode:
                type: string
              sha256:
                type: string
                nullable: true
              size:
                type: integer
              type:
                type: string
              uid:
                type: integer
      description: File content listings from images
    ContentPackageResponse:
      type: object
      properties:
        imageDigest:
          type: string
        content_type:
          type: string
        content:
          type: array
          items:
            type: object
            properties:
              package:
                type: string
              version:
                type: string
              size:
                type: string
              type:
                type: string
              origin:
                type: string
              license:
                type: string
                description: Deprecated in favor of the 'licenses' field"
              licenses:
                type: array
                items:
                  type: string
              location:
                type: string
              cpes:
                type: array
                description: A list of Common Platform Enumerations that may uniquely
                  identify the package
                items:
                  type: string
      description: Package content listings from images
    ContentMalwareResponse:
      type: object
      properties:
        imageDigest:
          type: string
        content_type:
          type: string
        content:
          type: array
          description: List of malware scan results, one per scanner configured to
            run
          items:
            $ref: '#/components/schemas/MalwareScan'
      description: Malware listing response
    MalwareScan:
      type: object
      properties:
        enabled:
          type: boolean
          description: Indicates if the scanner is enabled
        scanner:
          type: string
          description: The name of the scanner that produced the finding
        metadata:
          type: object
          properties: {}
          description: Open schema for scanner-specific metadata related to the scan
            result
        findings:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
                description: A path for a file in the image's rootfs
              signature:
                type: string
                description: The malware signature found at the path
      description: A single scan from a scanner
    ContentJAVAPackageResponse:
      type: object
      properties:
        imageDigest:
          type: string
        content_type:
          type: string
        content:
          type: array
          items:
            type: object
            properties:
              package:
                type: string
              implementation-version:
                type: string
              specification-version:
                type: string
              maven-version:
                type: string
              location:
                type: string
              type:
                type: string
              origin:
                type: string
              cpes:
                type: array
                description: A list of Common Platform Enumerations that may uniquely
                  identify the package
                items:
                  type: string
      description: Java package content listings from images
    MetadataResponse:
      type: object
      properties:
        imageDigest:
          type: string
        metadata_type:
          type: string
        metadata:
          type: object
      description: Generic wrapper for metadata listings from images
    PolicyEvaluation:
      type: object
      description: Evaluation response object
    PolicyEvaluationList:
      type: array
      description: Evaluation response object
      items:
        $ref: '#/components/schemas/PolicyEvaluation'
    SubscriptionUpdate:
      type: object
      properties:
        subscription_value:
          type: string
          description: The new subscription value, e.g. the new tag to be subscribed
            to
          nullable: true
        active:
          type: boolean
          description: Toggle the subscription processing on or off
      description: A modification to a subscription entry to change its status or
        value
    SubscriptionRequest:
      type: object
      properties:
        subscription_key:
          type: string
        subscription_value:
          type: string
          nullable: true
        subscription_type:
          type: string
      description: A subscription entry to add to the system
    Subscription:
      type: object
      properties:
        subscription_key:
          type: string
          description: The key value that the subscription references. E.g. a tag
            value or a repo name.
        subscription_type:
          type: string
          description: The type of the subscription
        subscription_value:
          type: string
          description: The value of the subscription target
          nullable: true
        userId:
          type: string
          description: The userId of the subscribed user
        active:
          type: boolean
          description: Is the subscription currently active
        subscription_id:
          type: string
          description: the unique id for this subscription record
      description: Subscription entry
    SubscriptionList:
      type: array
      description: List of subscriptions
      items:
        $ref: '#/components/schemas/Subscription'
    RepositoryTagList:
      type: array
      description: List of discovered tags in a repository
      items:
        type: string
    RegistryConfigurationList:
      type: array
      description: List of registry configurations
      items:
        $ref: '#/components/schemas/RegistryConfiguration'
    RegistryConfigurationRequest:
      type: object
      properties:
        registry_user:
          type: string
          description: Username portion of credential to use for this registry
        registry_pass:
          type: string
          description: Password portion of credential to use for this registry
        registry_type:
          type: string
          description: Type of registry
        registry:
          type: string
          description: hostname:port string for accessing the registry, as would be
            used in a docker pull operation. May include some or all of a repository
            and wildcards (e.g. docker.io/library/* or gcr.io/myproject/myrepository)
        registry_name:
          type: string
          description: human readable name associated with registry record
        registry_verify:
          type: boolean
          description: Use TLS/SSL verification for the registry URL
      description: A registry record describing the endpoint and credentials for a
        registry
    RegistryConfiguration:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
        last_upated:
          type: string
          format: date-time
        registry_user:
          type: string
          description: Username portion of credential to use for this registry
        registry_type:
          type: string
          description: Type of registry
        userId:
          type: string
          description: Engine user that owns this registry entry
        registry:
          type: string
          description: hostname:port string for accessing the registry, as would be
            used in a docker pull operation
        registry_name:
          type: string
          description: human readable name associated with registry record
        registry_verify:
          type: boolean
          description: Use TLS/SSL verification for the registry URL
      description: A registry entry describing the endpoint and credentials for a
        registry to pull images from
    Vulnerability:
      type: object
      properties:
        vuln:
          type: string
          description: The vulnerability identifier, such as CVE-2017-100, or RHSA-2017123
        fix:
          type: string
          description: The package containing a fix, if available
        severity:
          type: string
          description: The severity of the vulnerability
        package:
          type: string
          description: The package name and version that are vulnerable in the image
        url:
          type: string
          description: The url for more information about the vulnerability
        feed:
          type: string
          description: The name of the feed where vulnerability match was made
        feed_group:
          type: string
          description: The name of the feed group where vulnerability match was made
        package_name:
          type: string
          description: The name of the vulnerable package artifact
        package_version:
          type: string
          description: The version of the vulnerable package artifact
        package_type:
          type: string
          description: The type of vulnerable package
        package_cpe:
          type: string
          description: The CPE string (if applicable) describing the package to vulnerability
            match
        package_path:
          type: string
          description: The location (if applicable) of the vulnerable package in the
            container filesystem
        will_not_fix:
          type: boolean
          description: Whether a vendor will fix or not fix the vulnerability
        nvd_data:
          $ref: '#/components/schemas/NvdDataList'
        vendor_data:
          $ref: '#/components/schemas/VendorDataList'
    NvdDataList:
      type: array
      description: List of Nvd Data objects
      items:
        $ref: '#/components/schemas/NvdDataObject'
    NvdDataObject:
      type: object
      properties:
        id:
          type: string
          description: NVD Vulnerability ID
        cvss_v2:
          $ref: '#/components/schemas/CVSSV2Scores'
        cvss_v3:
          $ref: '#/components/schemas/CVSSV3Scores'
    VendorDataList:
      type: array
      description: List of Vendor Data objects
      items:
        $ref: '#/components/schemas/VendorDataObject'
    VendorDataObject:
      type: object
      properties:
        id:
          type: string
          description: Vendor Vulnerability ID
        cvss_v2:
          $ref: '#/components/schemas/CVSSV2Scores'
        cvss_v3:
          $ref: '#/components/schemas/CVSSV3Scores'
    CVSSV2Scores:
      type: object
      properties:
        base_score:
          type: number
          nullable: true
        exploitability_score:
          type: number
          nullable: true
        impact_score:
          type: number
          nullable: true
    CVSSV3Scores:
      type: object
      properties:
        base_score:
          type: number
          nullable: true
        exploitability_score:
          type: number
          nullable: true
        impact_score:
          type: number
          nullable: true
    VulnerabilityList:
      type: array
      description: List of Vulnerability objects
      items:
        $ref: '#/components/schemas/Vulnerability'
    VulnerabilityResponse:
      type: object
      properties:
        imageDigest:
          type: string
        vulnerability_type:
          type: string
        vulnerabilities:
          $ref: '#/components/schemas/VulnerabilityList'
      description: envelope containing list of vulnerabilities
    ImageFilter:
      type: object
      properties:
        tag:
          type: string
        digest:
          type: string
      description: Filter for an image list by id, tag, or digest, but not both
    AnchoreErrorCode:
      type: object
      properties:
        name:
          type: string
          description: Error code name
        description:
          type: string
          description: Description of the error code
      description: A description of an anchore error code (name, description)
    GateSpec:
      type: object
      properties:
        name:
          type: string
          description: Gate name, as it would appear in a policy document
        description:
          type: string
          description: Description of the gate
        state:
          type: string
          description: State of the gate and transitively all triggers it contains
            if not 'active'
          enum:
          - active
          - deprecated
          - eol
        superceded_by:
          type: string
          description: The name of another trigger that supercedes this on functionally
            if this is deprecated
          nullable: true
        triggers:
          type: array
          description: List of the triggers that can fire for this Gate
          items:
            $ref: '#/components/schemas/TriggerSpec'
      description: A description of the set of gates available in this engine and
        the triggers and parameters supported
    TriggerSpec:
      type: object
      properties:
        name:
          type: string
          description: Name of the trigger as it would appear in a policy document
        description:
          type: string
          description: Trigger description for what it tests and when it will fire
            during evaluation
        state:
          type: string
          description: State of the trigger
          enum:
          - active
          - deprecated
          - eol
        superceded_by:
          type: string
          description: The name of another trigger that supercedes this on functionally
            if this is deprecated
          nullable: true
        parameters:
          type: array
          description: The list of parameters that are valid for this trigger
          items:
            $ref: '#/components/schemas/TriggerParamSpec'
      description: Definition of a trigger and its parameters
    TriggerParamSpec:
      type: object
      properties:
        name:
          type: string
          description: Parameter name as it appears in policy document
        description:
          type: string
        example:
          type: string
          description: An example value for the parameter (encoded as a string if
            the parameter is an object or list type)
          nullable: true
        state:
          type: string
          description: State of the trigger parameter
          enum:
          - active
          - deprecated
          - eol
        superceded_by:
          type: string
          description: The name of another trigger that supercedes this on functionally
            if this is deprecated
          nullable: true
        required:
          type: boolean
          description: Is this a required parameter or optional
        validator:
          type: object
          properties: {}
          description: If present, a definition for validation of input. Typically
            a jsonschema object that can be used to validate an input against.
    FeedMetadata:
      type: object
      properties:
        name:
          type: string
          description: name of the feed
        created_at:
          type: string
          description: Date the metadata record was created in engine (first seen
            on source)
          format: date-time
        updated_at:
          type: string
          description: Date the metadata was last updated
          format: date-time
        groups:
          type: array
          items:
            $ref: '#/components/schemas/FeedGroupMetadata'
        last_full_sync:
          type: string
          format: date-time
      description: Metadata on a single feed based on what the engine finds from querying
        the endpoints
    FeedGroupMetadata:
      type: object
      properties:
        name:
          type: string
        created_at:
          type: string
          format: date-time
        last_sync:
          type: string
          format: date-time
        record_count:
          type: integer
    EventResponse:
      type: object
      properties:
        generated_uuid:
          type: string
        created_at:
          type: string
          format: date-time
        event:
          type: object
          properties:
            source:
              type: object
              properties:
                servicename:
                  type: string
                hostid:
                  type: string
                base_url:
                  type: string
                request_id:
                  type: string
            resource:
              type: object
              properties:
                user_id:
                  type: string
                id:
                  type: string
                type:
                  type: string
            type:
              type: string
            category:
              type: string
            level:
              type: string
            message:
              type: string
            details:
              type: object
              properties: {}
            timestamp:
              type: string
              format: date-time
      description: A record of occurance of an asynchronous event triggered either
        by system or by user activity
    EventsList:
      type: object
      properties:
        results:
          type: array
          description: List of events
          items:
            $ref: '#/components/schemas/EventResponse'
        next_page:
          type: boolean
          description: Boolean flag, True indicates there are more events and False
            otherwise
        item_count:
          type: integer
          description: Number of events in this page
        page:
          type: integer
          description: Page number of this result set
      description: Response envelope for paginated listing of events
    AccountCreationRequest:
      required:
      - name
      type: object
      properties:
        name:
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9@.!#$+-=^_`~;]{1,126}[a-zA-Z0-9]$
          type: string
          description: The account name to use. This will identify the account and
            must be globally unique in the system.
        email:
          pattern: '[a-z0-9!#$%&''*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&''*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?'
          type: string
          description: An optional email to associate with the account for contact
            purposes
      description: An account to create/add to the system. If already exists will
        return 400.
    Account:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: The account identifier, not updatable after creation
        type:
          type: string
          description: The user type (admin vs user). If not specified in a POST request,
            'user' is default
          enum:
          - user
          - admin
          - service
        state:
          type: string
          description: State of the account. Disabled accounts prevent member users
            from logging in, deleting accounts are disabled and pending deletion and
            will be removed once all owned resources are garbage collected by the
            system
          enum:
          - enabled
          - disabled
          - deleting
        email:
          type: string
          description: Optional email address associated with the account
        created_at:
          type: string
          description: The timestamp when the account was created
          format: date-time
        last_updated:
          type: string
          description: The timestamp of the last update to the account metadata itself
            (not users or creds)
          format: date-time
      description: Account information
    AccountStatus:
      type: object
      properties:
        state:
          type: string
          description: The status of the account
          enum:
          - enabled
          - disabled
      description: A summary of account status
    User:
      required:
      - username
      type: object
      properties:
        username:
          type: string
          description: The username to authenticate with
        type:
          type: string
          description: The user's type
          enum:
          - native
          - internal
          - external
        source:
          type: string
          description: If the user is external, this is the source that the user was
            initialized from. All other user types have this set to null
        created_at:
          type: string
          description: The timestampt the user record was created
          format: date-time
        last_updated:
          type: string
          description: The timestamp of the last update to this record
          format: date-time
      description: A username for authenticating with one or more types of credentials.
        User type defines the expected credentials allowed for the user. Native users
        have passwords, External users have no credential internally. Internal users
        are service/system users for inter-service communication.
    UserCreationRequest:
      required:
      - password
      - username
      type: object
      properties:
        username:
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9@.!#$+-=^_`~;]{1,126}[a-zA-Z0-9]$
          type: string
          description: The username to create
        password:
          pattern: .{6,128}$
          type: string
          description: The initial password for the user, must be at least 6 characters,
            up to 128
      description: A payload for creating a new user, includes the username and password
        in a single request
    AccessCredential:
      required:
      - type
      - value
      type: object
      properties:
        type:
          type: string
          description: The type of credential
          enum:
          - password
        value:
          type: string
          description: The credential value (e.g. the password)
        created_at:
          type: string
          description: The timestamp of creation of the credential
      description: A login credential mapped to a user identity. For password credentials,
        the username to present for Basic auth is the user's username from the user
        record
    AccountList:
      type: array
      items:
        $ref: '#/components/schemas/Account'
    UserList:
      type: array
      items:
        $ref: '#/components/schemas/User'
    CredentialList:
      type: array
      items:
        $ref: '#/components/schemas/AccessCredential'
    ServiceVersion:
      type: object
      properties:
        service:
          type: object
          properties:
            version:
              type: string
              description: Semantic Version string of the service implementation
        api:
          type: object
          properties:
            version:
              type: string
              description: Semantic version of the api
          description: Api Version string
        db:
          type: object
          properties:
            schema_version:
              type: string
              description: Semantic version of the db schema
      description: Version information for a service
    ArchiveSummary:
      type: object
      properties:
        images:
          $ref: '#/components/schemas/AnalysisArchiveSummary'
        rules:
          $ref: '#/components/schemas/AnalysisArchiveRulesSummary'
      description: A summarization of the available archives, a place to for long-term
        storage of audit, analysis, or other data to remove it from the system's working
        set but keep it available.
    AnalysisArchiveSummary:
      type: object
      properties:
        total_image_count:
          type: integer
          description: The number of unique images (digests) in the archive
        total_tag_count:
          type: integer
          description: The number of tag records (registry/repo:tag pull strings)
            in the archive. This may include repeated tags but will always have a
            unique tag->digest mapping per record.
        total_data_bytes:
          type: integer
          description: The total sum of all the bytes stored to the backing storage.
            Accounts for anchore-applied compression, but not compression by the underlying
            storage system.
        last_updated:
          type: string
          description: The timestamp of the most recent archived image
          format: date-time
      description: A summarization of the analysis archive, including size, counts,
        etc. This archive stores image analysis only, never the actual image content
        or layers.
    AnalysisArchiveRulesSummary:
      type: object
      properties:
        count:
          type: integer
          description: The number of rules for this account
        last_updated:
          type: string
          description: The newest last_updated timestamp from the set of rules
          format: date-time
      description: Summary of the transition rule set
    ImageAnalysisReferences:
      type: array
      description: List of image digests to archive
      items:
        type: string
        description: Image digest
    AddAnalysisArchiveResult:
      type: array
      description: List of analysis archive add results
      items:
        $ref: '#/components/schemas/AnalysisArchiveAddResult'
    AnalysisArchiveAddResult:
      type: object
      properties:
        digest:
          type: string
          description: The image digest requested to be added
        status:
          type: string
          description: The status of the archive add operation. Typically either 'archived'
            or 'error'
          enum:
          - archived
          - archiving
          - error
        detail:
          type: string
          description: Details on the status, e.g. the error message
      description: The result of adding a single digest to the archive
    ArchivedAnalyses:
      type: array
      description: List of archived analyses
      items:
        $ref: '#/components/schemas/ArchivedAnalysis'
    ArchivedAnalysis:
      type: object
      properties:
        imageDigest:
          type: string
          description: The image digest (digest of the manifest describing the image,
            per docker spec)
        parentDigest:
          type: string
          description: The digest of a parent manifest (for manifest-list images)
        annotations:
          type: object
          properties: {}
          description: User provided annotations as key-value pairs
        status:
          type: string
          description: The archival status
          enum:
          - archiving
          - archived
          - deleting
          - deleted
        image_detail:
          type: array
          description: List of tags associated with the image digest
          items:
            $ref: '#/components/schemas/TagEntry'
        created_at:
          type: string
          format: date-time
        last_updated:
          type: string
          format: date-time
        analyzed_at:
          type: string
          format: date-time
        archive_size_bytes:
          type: integer
          description: The size, in bytes, of the analysis archive file
    AnalysisArchiveRules:
      type: array
      description: Rule set for automatic archiving of system objects and flushing
        of archived objects (permament delete).
      items:
        $ref: '#/components/schemas/AnalysisArchiveTransitionRule'
    AnalysisArchiveTransitionRule:
      required:
      - transition
      type: object
      properties:
        selector:
          $ref: '#/components/schemas/ImageSelector'
        rule_id:
          type: string
          description: Unique identifier for archive rule
        tag_versions_newer:
          type: integer
          description: Number of images mapped to the tag that are newer
        analysis_age_days:
          type: integer
          description: Matches if the analysis is strictly older than this number
            of days
        transition:
          type: string
          description: The type of transition to make. If "archive", then archive
            an image from the working set and remove it from the working set. If "delete",
            then match against archived images and delete from the archive if match.
          enum:
          - archive
          - delete
        system_global:
          type: boolean
          description: True if the rule applies to all accounts in the system. This
            is only available to admin users to update/modify, but all users with
            permission to list rules can see them
        created_at:
          type: string
          format: date-time
        last_updated:
          type: string
          format: date-time
        exclude:
          $ref: '#/components/schemas/AnalysisArchiveTransitionRuleExclude'
        max_images_per_account:
          type: integer
          description: This is the maximum number of image analyses an account can
            have. Can only be set on system_global rules
      description: A rule for auto-archiving image analysis by time and/or tag-history
    AnalysisArchiveTransitionRuleExclude:
      type: object
      properties:
        selector:
          $ref: '#/components/schemas/ImageSelector'
        expiration_days:
          type: integer
          description: How long the image selected will be excluded from the archive
            transition
      description: Which Images to exclude from auto-archiving logic
    AnalysisArchiveTransitionHistory:
      type: object
      properties:
        transition_task_id:
          type: string
          description: The task that created & updated this entry
        rule_id:
          type: string
        imageDigest:
          type: string
        transition:
          type: string
          enum:
          - archive
          - delete
        created_at:
          type: string
          format: date-time
        last_updated:
          type: string
          format: date-time
      description: A rule for auto-archiving image analysis by time and/or tag-history
    ImageSelector:
      type: object
      properties:
        registry:
          type: string
          description: The registry section of a pull string. e.g. with "docker.io/anchore/anchore-engine:latest",
            this is "docker.io"
        repository:
          type: string
          description: The repository section of a pull string. e.g. with "docker.io/anchore/anchore-engine:latest",
            this is "anchore/anchore-engine"
        tag:
          type: string
          description: The tag-only section of a pull string. e.g. with "docker.io/anchore/anchore-engine:latest",
            this is "latest"
      description: A set of selection criteria to match an image by a tagged pullstring
        based on its components, with regex support in each field
    FeedSyncResults:
      type: array
      description: An array of feed sync summaries representing the result of an explicit
        feed sync operation
      items:
        $ref: '#/components/schemas/FeedSyncResult'
    FeedSyncResult:
      type: object
      properties:
        feed:
          type: string
          description: The name of the feed synced
        status:
          type: string
          description: The result of the sync operations, either co
          enum:
          - success
          - failure
        total_time_seconds:
          type: number
          description: The duratin, in seconds, of the sync of the feed, the sum of
            all the group syncs
        groups:
          type: array
          description: Array of group sync results
          items:
            $ref: '#/components/schemas/GroupSyncResult'
      description: The result of a sync of a single feed
    GroupSyncResult:
      type: object
      properties:
        group:
          type: string
          description: The name of the group
        status:
          type: string
          enum:
          - success
          - failure
        updated_image_count:
          type: integer
          description: The number of images updated by the this group sync, across
            all accounts. This is typically only non-zero for vulnerability feeds
            which update images' vulnerability results during the sync.
        updated_record_count:
          type: integer
          description: The number of feed data records synced down as either updates
            or new records
        total_time_seconds:
          type: number
          description: The duration of the group sync in seconds
    TokenResponse:
      required:
      - token
      type: object
      properties:
        token:
          type: string
          description: The token content
    RetrievedFile:
      type: object
      properties:
        path:
          type: string
        b64_content:
          type: string
      description: The retrieved file entry including content (b64 encoded)
    RetrievedFileList:
      type: array
      description: Simple array of RetrievedFileMetadata objects
      items:
        $ref: '#/components/schemas/RetrievedFile'
    SecretSearchResult:
      type: object
      properties:
        path:
          type: string
        matches:
          type: array
          items:
            $ref: '#/components/schemas/RegexContentMatch'
      description: The retrieved file entry including content (b64 encoded)
    SecretSearchList:
      type: array
      description: Simple array of RetrievedFileMetadata objects
      items:
        $ref: '#/components/schemas/SecretSearchResult'
    FileContentSearchResult:
      type: object
      properties:
        path:
          type: string
        matches:
          type: array
          items:
            $ref: '#/components/schemas/RegexContentMatch'
      description: The retrieved file entry including content (b64 encoded)
    FileContentSearchList:
      type: array
      description: Simple array of RetrievedFileMetadata objects
      items:
        $ref: '#/components/schemas/FileContentSearchResult'
    RegexContentMatch:
      type: object
      properties:
        name:
          type: string
          description: The name associated with the regular expression
        regex:
          type: string
          description: The regular expression used for the match
        lines:
          type: array
          description: A list of line numbers in the file that matched the regex
          items:
            type: integer
      description: Match of a named regex on a file
    EventTypesList:
      type: array
      description: Array of EventCategory objects
      items:
        $ref: '#/components/schemas/EventCategory'
    EventCategory:
      type: object
      properties:
        category:
          type: string
        description:
          type: string
        subcategories:
          type: array
          items:
            $ref: '#/components/schemas/EventSubcategory'
      description: A collection of event subcategories
    EventSubcategory:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        events:
          type: array
          items:
            $ref: '#/components/schemas/EventDescription'
      description: A collection of events related to each other
    EventDescription:
      type: object
      properties:
        name:
          type: string
          description: The event type. The last component of the fully-qualified event_type
            (category.subcategory.event)
        type:
          type: string
          description: The fully qualified event type as would be seen in the event
            payload
        message:
          type: string
          description: The message associated with the event type
        resource_type:
          type: string
          description: The type of resource this event is generated from
      description: A description of an event type
    NotificationBase:
      type: object
      properties:
        queueId:
          type: string
        userId:
          type: string
        dataId:
          type: string
        created_at:
          type: integer
        last_updated:
          type: integer
        record_state_key:
          type: string
          default: active
        record_state_val:
          type: string
          nullable: true
        tries:
          type: integer
        max_tries:
          type: integer
      description: base object for Notifications (every notification has this basic
        structure)
    PolicyEvalNotification:
      allOf:
      - $ref: '#/components/schemas/NotificationBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/PolicyEvalNotificationData'
        description: The Notification Object definition for Policy Eval Notifications
    TagUpdateNotification:
      allOf:
      - $ref: '#/components/schemas/NotificationBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/TagUpdateNotificationData'
        description: The Notification Object definition for Tag Update Notifications
    VulnUpdateNotification:
      allOf:
      - $ref: '#/components/schemas/NotificationBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/VulnUpdateNotificationData'
        description: The Notification Object definition for Tag Update Notifications
    AnalysisUpdateNotification:
      allOf:
      - $ref: '#/components/schemas/NotificationBase'
      - type: object
        properties:
          data:
            $ref: '#/components/schemas/AnalysisUpdateNotificationData'
        description: The Notification Object definition for Tag Update Notifications
    BaseNotificationData:
      type: object
      properties:
        notification_user:
          type: string
        notification_user_email:
          type: string
        notification_type:
          type: string
      description: Every notification has a payload, which follows this basic structure
    PolicyEvalNotificationData:
      allOf:
      - $ref: '#/components/schemas/BaseNotificationData'
      - type: object
        properties:
          notification_payload:
            $ref: '#/components/schemas/PolicyEvalNotificationPayload'
    TagUpdateNotificationData:
      allOf:
      - $ref: '#/components/schemas/BaseNotificationData'
      - type: object
        properties:
          notification_payload:
            $ref: '#/components/schemas/TagUpdateNotificationPayload'
    VulnUpdateNotificationData:
      allOf:
      - $ref: '#/components/schemas/BaseNotificationData'
      - type: object
        properties:
          notification_payload:
            $ref: '#/components/schemas/VulnUpdateNotificationPayload'
    AnalysisUpdateNotificationData:
      allOf:
      - $ref: '#/components/schemas/BaseNotificationData'
      - type: object
        properties:
          notification_payload:
            $ref: '#/components/schemas/AnalysisUpdateNotificationPayload'
    GenericNotificationPayload:
      type: object
      properties:
        userId:
          type: string
        subscription_key:
          type: string
        subscription_type:
          type: string
        notificationId:
          type: string
      description: Parent class for Notification Payloads
    PolicyEvalNotificationPayload:
      allOf:
      - $ref: '#/components/schemas/GenericNotificationPayload'
      - type: object
        properties:
          curr_eval:
            type: object
            properties: {}
            description: The Current Policy Evaluation result
          last_eval:
            type: object
            properties: {}
            description: The Previous Policy Evaluation result
          annotations:
            type: object
            properties: {}
            description: List of Corresponding Image Annotations
            nullable: true
    TagUpdateNotificationPayload:
      allOf:
      - $ref: '#/components/schemas/GenericNotificationPayload'
      - type: object
        properties:
          curr_eval:
            type: array
            description: A list containing the current image digest
            items:
              type: object
          last_eval:
            type: array
            description: A list containing the previous image digests
            items:
              type: object
          annotations:
            type: object
            properties: {}
            description: List of Corresponding Image Annotations
            nullable: true
    VulnUpdateNotificationPayload:
      allOf:
      - $ref: '#/components/schemas/GenericNotificationPayload'
      - type: object
        properties:
          diff_vulnerability_result:
            $ref: '#/components/schemas/VulnDiffResult'
          imageDigest:
            type: string
          annotations:
            type: object
            properties: {}
            description: List of Corresponding Image Annotations
            nullable: true
    AnalysisUpdateNotificationPayload:
      allOf:
      - $ref: '#/components/schemas/GenericNotificationPayload'
      - type: object
        properties:
          curr_eval:
            $ref: '#/components/schemas/AnalysisUpdateEval'
          last_eval:
            $ref: '#/components/schemas/AnalysisUpdateEval'
          annotations:
            type: object
            properties: {}
            description: List of Corresponding Image Annotations
            nullable: true
    VulnDiffResult:
      type: object
      properties:
        added:
          type: array
          items:
            type: object
        updated:
          type: array
          items:
            type: object
        removed:
          type: array
          items:
            type: object
      description: The results of the comparing two vulnerability records during an
        update
    AnalysisUpdateEval:
      type: object
      properties:
        analysis_status:
          type: string
        annotations:
          type: object
          properties: {}
        image_digest:
          type: string
      description: Evaluation Results for an entity (current or last)
    ImageImportOperation:
      type: object
      properties:
        uuid:
          type: string
        status:
          type: string
          enum:
          - pending
          - queued
          - processing
          - complete
          - failed
          - expired
        expires_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
      description: An import record, creating a unique identifier for referencing
        the operation as well as its state
    ImageImportContentResponse:
      type: object
      properties:
        digest:
          type: string
        created_at:
          type: string
          format: date-time
    ImageContentDeleteResponse:
      type: object
    ImageImportManifest:
      required:
      - contents
      - digest
      - operation_uuid
      - tags
      type: object
      properties:
        contents:
          $ref: '#/components/schemas/ImportContentDigests'
        tags:
          type: array
          items:
            type: string
            description: Full docker reference tags
            example: docker.io/library/nginx:latest
        digest:
          type: string
        parent_digest:
          type: string
          description: The digest of the images's manifest-list parent if it was accessed
            from a multi-arch tag where the tag pointed to a manifest-list. This allows
            preservation of that relationship in the data
        local_image_id:
          type: string
          description: An "imageId" as used by Docker if available
        operation_uuid:
          type: string
      nullable: true
      x-nullable: true
    ImportContentDigests:
      required:
      - image_config
      - manifest
      - packages
      type: object
      properties:
        packages:
          type: string
          description: Digest to use for the packages content
        image_config:
          type: string
          description: Digest for reference content for image config
        manifest:
          type: string
          description: Digest to reference content for the image manifest
        parent_manifest:
          type: string
          description: Digest for reference content for parent manifest
        dockerfile:
          type: string
          description: Digest for reference content for dockerfile
      description: Digest of content to use in the final import
    Annotations:
      type: object
      description: Simple key/value pairs where the value may be optional
    ImageImports:
      type: array
      items:
        $ref: '#/components/schemas/ImageImportOperation'
    ImportContentDigestList:
      type: array
      items:
        type: string
        description: String digest of an uploaded content
    ImagePackageManifest:
      required:
      - artifacts
      - distro
      - source
      type: object
      properties:
        artifacts:
          type: array
          items:
            $ref: '#/components/schemas/ImportPackage'
        source:
          $ref: '#/components/schemas/ImportSource'
        distro:
          $ref: '#/components/schemas/ImportDistribution'
        descriptor:
          $ref: '#/components/schemas/ImportDescriptor'
        schema:
          $ref: '#/components/schemas/ImportSchema'
        artifactRelationships:
          type: array
          items:
            $ref: '#/components/schemas/ImportPackageRelationship'
    ImportDescriptor:
      required:
      - name
      - version
      type: object
      properties:
        name:
          type: string
        version:
          type: string
    ImportDistribution:
      required:
      - idLike
      - name
      - version
      type: object
      properties:
        name:
          type: string
        version:
          type: string
        idLike:
          type: string
    ImportPackageLocation:
      required:
      - path
      type: object
      properties:
        path:
          type: string
        layerID:
          type: string
    ImportPackage:
      required:
      - cpes
      - language
      - licenses
      - locations
      - metadataType
      - name
      - type
      - version
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        version:
          type: string
        type:
          type: string
        foundBy:
          type: string
        locations:
          type: array
          items:
            $ref: '#/components/schemas/ImportPackageLocation'
        licenses:
          type: array
          items:
            type: string
        language:
          type: string
        cpes:
          type: array
          items:
            type: string
        purl:
          type: string
        metadataType:
          type: string
        metadata:
          type: object
          properties: {}
    ImportSchema:
      required:
      - url
      - version
      type: object
      properties:
        version:
          type: string
        url:
          type: string
    ImportSource:
      required:
      - target
      - type
      type: object
      properties:
        type:
          type: string
        target:
          type: object
    ImportPackageRelationship:
      required:
      - child
      - parent
      - type
      type: object
      properties:
        parent:
          type: string
        child:
          type: string
        type:
          type: string
        metadata:
          type: object
          properties: {}
    NativeSbom:
      type: object
  parameters:
    AsAccountParameter:
      name: x-anchore-account
      in: header
      description: An account name to change the resource scope of the request to
        that account, if permissions allow (admin only)
      schema:
        type: string
