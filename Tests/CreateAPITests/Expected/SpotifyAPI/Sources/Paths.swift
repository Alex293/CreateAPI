// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import Get

extension Paths.Albums {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/albums/{id}`
        public let path: String

        /// Get an Album
        ///
        /// Get Spotify catalog information for a single album.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-album)
        public func get(market: String? = nil) -> Request<SpotifyAPI.AlbumObject> {
            .get(path, query: makeGetQuery(market))
        }

        private func makeGetQuery(_ market: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("market", market)
            return query
        }
    }
}

extension Paths.Albums.WithID {
    public var tracks: Tracks {
        Tracks(path: path + "/tracks")
    }

    public struct Tracks {
        /// Path: `/albums/{id}/tracks`
        public let path: String

        /// Get an Album's Tracks
        ///
        /// Get Spotify catalog information about an album's tracks.
        /// Optional parameters can be used to limit the number of tracks returned.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-albums-tracks)
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
        public struct GetResponse: Decodable {
            /// A link to the Web API endpoint returning the full result of the request
            public var href: String?
            /// The requested content
            public var items: [SpotifyAPI.SimplifiedTrackObject]?
            /// The maximum number of items in the response (as set in the query or by default).
            public var limit: Int?
            /// URL to the next page of items. ( `null` if none)
            public var next: String?
            /// The offset of the items returned (as set in the query or by default)
            public var offset: Int?
            /// URL to the previous page of items. ( `null` if none)
            public var previous: String?
            /// The total number of items available to return.
            public var total: Int?

            public init(href: String? = nil, items: [SpotifyAPI.SimplifiedTrackObject]? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, previous: String? = nil, total: Int? = nil) {
                self.href = href
                self.items = items
                self.limit = limit
                self.next = next
                self.offset = offset
                self.previous = previous
                self.total = total
            }
        }

        public struct GetParameters {
            public var market: String?
            public var limit: Int?
            public var offset: Int?

            public init(market: String? = nil, limit: Int? = nil, offset: Int? = nil) {
                self.market = market
                self.limit = limit
                self.offset = offset
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("market", market)
                query.addQueryItem("limit", limit)
                query.addQueryItem("offset", offset)
                return query
            }
        }
    }
}

extension Paths {
    public static var albums: Albums {
        Albums(path: "/albums")
    }

    public struct Albums {
        /// Path: `/albums`
        public let path: String

        /// Get Multiple Albums
        ///
        /// Get Spotify catalog information for multiple albums identified by their Spotify IDs.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-multiple-albums)
        public func get(ids: String, market: String? = nil) -> Request<SpotifyAPI.AlbumsObject> {
            .get(path, query: makeGetQuery(ids, market))
        }

        private func makeGetQuery(_ ids: String, _ market: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("ids", ids)
            query.addQueryItem("market", market)
            return query
        }
    }
}

extension Paths.Artists {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/artists/{id}`
        public let path: String

        /// Get an Artist
        ///
        /// Get Spotify catalog information for a single artist identified by their unique Spotify ID.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-artist)
        public var get: Request<SpotifyAPI.ArtistObject> {
            .get(path)
        }
    }
}

extension Paths.Artists.WithID {
    public var albums: Albums {
        Albums(path: path + "/albums")
    }

    public struct Albums {
        /// Path: `/artists/{id}/albums`
        public let path: String

        /// Get an Artist's Albums
        ///
        /// Get Spotify catalog information about an artist's albums.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-artists-albums)
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
        public struct GetResponse: Decodable {
            /// A link to the Web API endpoint returning the full result of the request
            public var href: String?
            /// The requested content
            public var items: [SpotifyAPI.SimplifiedAlbumObject]?
            /// The maximum number of items in the response (as set in the query or by default).
            public var limit: Int?
            /// URL to the next page of items. ( `null` if none)
            public var next: String?
            /// The offset of the items returned (as set in the query or by default)
            public var offset: Int?
            /// URL to the previous page of items. ( `null` if none)
            public var previous: String?
            /// The total number of items available to return.
            public var total: Int?

            public init(href: String? = nil, items: [SpotifyAPI.SimplifiedAlbumObject]? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, previous: String? = nil, total: Int? = nil) {
                self.href = href
                self.items = items
                self.limit = limit
                self.next = next
                self.offset = offset
                self.previous = previous
                self.total = total
            }
        }

        public struct GetParameters {
            public var includeGroups: String?
            public var market: String?
            public var limit: Int?
            public var offset: Int?

            public init(includeGroups: String? = nil, market: String? = nil, limit: Int? = nil, offset: Int? = nil) {
                self.includeGroups = includeGroups
                self.market = market
                self.limit = limit
                self.offset = offset
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("include_groups", includeGroups)
                query.addQueryItem("market", market)
                query.addQueryItem("limit", limit)
                query.addQueryItem("offset", offset)
                return query
            }
        }
    }
}

extension Paths.Artists.WithID {
    public var relatedArtists: RelatedArtists {
        RelatedArtists(path: path + "/related-artists")
    }

    public struct RelatedArtists {
        /// Path: `/artists/{id}/related-artists`
        public let path: String

        /// Get an Artist's Related Artists
        ///
        /// Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community's [listening history](http://news.spotify.com/se/2010/02/03/related-artists/).
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-artists-related-artists)
        public var get: Request<SpotifyAPI.ArtistsObject> {
            .get(path)
        }
    }
}

extension Paths.Artists.WithID {
    public var topTracks: TopTracks {
        TopTracks(path: path + "/top-tracks")
    }

    public struct TopTracks {
        /// Path: `/artists/{id}/top-tracks`
        public let path: String

        /// Get an Artist's Top Tracks
        ///
        /// Get Spotify catalog information about an artist's top tracks by country.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-artists-top-tracks)
        public func get(market: String? = nil) -> Request<SpotifyAPI.TracksObject> {
            .get(path, query: makeGetQuery(market))
        }

        private func makeGetQuery(_ market: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("market", market)
            return query
        }
    }
}

extension Paths {
    public static var artists: Artists {
        Artists(path: "/artists")
    }

    public struct Artists {
        /// Path: `/artists`
        public let path: String

        /// Get Multiple Artists
        ///
        /// Get Spotify catalog information for several artists based on their Spotify IDs.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-multiple-artists)
        public func get(ids: String) -> Request<SpotifyAPI.ArtistsObject> {
            .get(path, query: makeGetQuery(ids))
        }

        private func makeGetQuery(_ ids: String) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("ids", ids)
            return query
        }
    }
}

extension Paths {
    public static var browse: Browse {
        Browse(path: "/browse")
    }

    public struct Browse {
        /// Path: `/browse`
        public let path: String
    }
}

extension Paths.Browse.Categories.WithCategoryID {
    public var playlists: Playlists {
        Playlists(path: path + "/playlists")
    }

    public struct Playlists {
        /// Path: `/browse/categories/{category_id}/playlists`
        public let path: String

        /// Get a Category's Playlists
        ///
        /// Get a list of Spotify playlists tagged with a particular category.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-categories-playlists)
        public func get(parameters: GetParameters? = nil) -> Request<SpotifyAPI.PlaylistPagingObject> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var country: String?
            public var limit: Int?
            public var offset: Int?

            public init(country: String? = nil, limit: Int? = nil, offset: Int? = nil) {
                self.country = country
                self.limit = limit
                self.offset = offset
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("country", country)
                query.addQueryItem("limit", limit)
                query.addQueryItem("offset", offset)
                return query
            }
        }
    }
}

extension Paths.Browse.Categories {
    public func categoryID(_ categoryID: String) -> WithCategoryID {
        WithCategoryID(path: "\(path)/\(categoryID)")
    }

    public struct WithCategoryID {
        /// Path: `/browse/categories/{category_id}`
        public let path: String

        /// Get a Category
        ///
        /// Get a single category used to tag items in Spotify (on, for example, the Spotify player's "Browse" tab).
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-category)
        public func get(country: String? = nil, locale: String? = nil) -> Request<SpotifyAPI.CategoryObject> {
            .get(path, query: makeGetQuery(country, locale))
        }

        private func makeGetQuery(_ country: String?, _ locale: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("country", country)
            query.addQueryItem("locale", locale)
            return query
        }
    }
}

extension Paths.Browse {
    public var categories: Categories {
        Categories(path: path + "/categories")
    }

    public struct Categories {
        /// Path: `/browse/categories`
        public let path: String

        /// Get All Categories
        ///
        /// Get a list of categories used to tag items in Spotify (on, for example, the Spotify player's "Browse" tab).
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-categories)
        public func get(parameters: GetParameters? = nil) -> Request<SpotifyAPI.CategoriesObject> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var country: String?
            public var locale: String?
            public var limit: Int?
            public var offset: Int?

            public init(country: String? = nil, locale: String? = nil, limit: Int? = nil, offset: Int? = nil) {
                self.country = country
                self.locale = locale
                self.limit = limit
                self.offset = offset
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("country", country)
                query.addQueryItem("locale", locale)
                query.addQueryItem("limit", limit)
                query.addQueryItem("offset", offset)
                return query
            }
        }
    }
}

extension Paths.Browse {
    public var featuredPlaylists: FeaturedPlaylists {
        FeaturedPlaylists(path: path + "/featured-playlists")
    }

    public struct FeaturedPlaylists {
        /// Path: `/browse/featured-playlists`
        public let path: String

        /// Get All Featured Playlists
        ///
        /// Get a list of Spotify featured playlists (shown, for example, on a Spotify player's 'Browse' tab).
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-featured-playlists)
        public func get(parameters: GetParameters? = nil) -> Request<SpotifyAPI.FeaturedPlaylistObject> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var country: String?
            public var locale: String?
            public var timestamp: String?
            public var limit: Int?
            public var offset: Int?

            public init(country: String? = nil, locale: String? = nil, timestamp: String? = nil, limit: Int? = nil, offset: Int? = nil) {
                self.country = country
                self.locale = locale
                self.timestamp = timestamp
                self.limit = limit
                self.offset = offset
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("country", country)
                query.addQueryItem("locale", locale)
                query.addQueryItem("timestamp", timestamp)
                query.addQueryItem("limit", limit)
                query.addQueryItem("offset", offset)
                return query
            }
        }
    }
}

extension Paths.Browse {
    public var newReleases: NewReleases {
        NewReleases(path: path + "/new-releases")
    }

    public struct NewReleases {
        /// Path: `/browse/new-releases`
        public let path: String

        /// Get All New Releases
        ///
        /// Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player's "Browse" tab).
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-new-releases)
        public func get(parameters: GetParameters? = nil) -> Request<SpotifyAPI.NewReleasesObject> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var country: String?
            public var limit: Int?
            public var offset: Int?

            public init(country: String? = nil, limit: Int? = nil, offset: Int? = nil) {
                self.country = country
                self.limit = limit
                self.offset = offset
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("country", country)
                query.addQueryItem("limit", limit)
                query.addQueryItem("offset", offset)
                return query
            }
        }
    }
}

extension Paths.Recommendations {
    public var availableGenreSeeds: AvailableGenreSeeds {
        AvailableGenreSeeds(path: path + "/available-genre-seeds")
    }

    public struct AvailableGenreSeeds {
        /// Path: `/recommendations/available-genre-seeds`
        public let path: String

        /// Get Recommendation Genres
        ///
        /// Retrieve a list of available genres seed parameter values for [recommendations](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-recommendations).
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-recommendation-genres)
        public var get: Request<SpotifyAPI.GenreSeedsObject> {
            .get(path)
        }
    }
}

extension Paths {
    public static var recommendations: Recommendations {
        Recommendations(path: "/recommendations")
    }

    public struct Recommendations {
        /// Path: `/recommendations`
        public let path: String

        /// Get Recommendations
        ///
        /// Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-recommendations)
        public func get(parameters: GetParameters) -> Request<SpotifyAPI.RecommendationsObject> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var limit: Int?
            public var market: String?
            public var seedArtists: String
            public var seedGenres: String
            public var seedTracks: String
            public var minAcousticness: Double?
            public var maxAcousticness: Double?
            public var targetAcousticness: Double?
            public var minDanceability: Double?
            public var maxDanceability: Double?
            public var targetDanceability: Double?
            public var minDurationMs: Int?
            public var maxDurationMs: Int?
            public var targetDurationMs: Int?
            public var minEnergy: Double?
            public var maxEnergy: Double?
            public var targetEnergy: Double?
            public var minInstrumentalness: Double?
            public var maxInstrumentalness: Double?
            public var targetInstrumentalness: Double?
            public var minKey: Int?
            public var maxKey: Int?
            public var targetKey: Int?
            public var minLiveness: Double?
            public var maxLiveness: Double?
            public var targetLiveness: Double?
            public var minLoudness: Double?
            public var maxLoudness: Double?
            public var targetLoudness: Double?
            public var minMode: Int?
            public var maxMode: Int?
            public var targetMode: Int?
            public var minPopularity: Int?
            public var maxPopularity: Int?
            public var targetPopularity: Int?
            public var minSpeechiness: Double?
            public var maxSpeechiness: Double?
            public var targetSpeechiness: Double?
            public var minTempo: Double?
            public var maxTempo: Double?
            public var targetTempo: Double?
            public var minTimeSignature: Int?
            public var maxTimeSignature: Int?
            public var targetTimeSignature: Int?
            public var minValence: Double?
            public var maxValence: Double?
            public var targetValence: Double?

            public init(limit: Int? = nil, market: String? = nil, seedArtists: String, seedGenres: String, seedTracks: String, minAcousticness: Double? = nil, maxAcousticness: Double? = nil, targetAcousticness: Double? = nil, minDanceability: Double? = nil, maxDanceability: Double? = nil, targetDanceability: Double? = nil, minDurationMs: Int? = nil, maxDurationMs: Int? = nil, targetDurationMs: Int? = nil, minEnergy: Double? = nil, maxEnergy: Double? = nil, targetEnergy: Double? = nil, minInstrumentalness: Double? = nil, maxInstrumentalness: Double? = nil, targetInstrumentalness: Double? = nil, minKey: Int? = nil, maxKey: Int? = nil, targetKey: Int? = nil, minLiveness: Double? = nil, maxLiveness: Double? = nil, targetLiveness: Double? = nil, minLoudness: Double? = nil, maxLoudness: Double? = nil, targetLoudness: Double? = nil, minMode: Int? = nil, maxMode: Int? = nil, targetMode: Int? = nil, minPopularity: Int? = nil, maxPopularity: Int? = nil, targetPopularity: Int? = nil, minSpeechiness: Double? = nil, maxSpeechiness: Double? = nil, targetSpeechiness: Double? = nil, minTempo: Double? = nil, maxTempo: Double? = nil, targetTempo: Double? = nil, minTimeSignature: Int? = nil, maxTimeSignature: Int? = nil, targetTimeSignature: Int? = nil, minValence: Double? = nil, maxValence: Double? = nil, targetValence: Double? = nil) {
                self.limit = limit
                self.market = market
                self.seedArtists = seedArtists
                self.seedGenres = seedGenres
                self.seedTracks = seedTracks
                self.minAcousticness = minAcousticness
                self.maxAcousticness = maxAcousticness
                self.targetAcousticness = targetAcousticness
                self.minDanceability = minDanceability
                self.maxDanceability = maxDanceability
                self.targetDanceability = targetDanceability
                self.minDurationMs = minDurationMs
                self.maxDurationMs = maxDurationMs
                self.targetDurationMs = targetDurationMs
                self.minEnergy = minEnergy
                self.maxEnergy = maxEnergy
                self.targetEnergy = targetEnergy
                self.minInstrumentalness = minInstrumentalness
                self.maxInstrumentalness = maxInstrumentalness
                self.targetInstrumentalness = targetInstrumentalness
                self.minKey = minKey
                self.maxKey = maxKey
                self.targetKey = targetKey
                self.minLiveness = minLiveness
                self.maxLiveness = maxLiveness
                self.targetLiveness = targetLiveness
                self.minLoudness = minLoudness
                self.maxLoudness = maxLoudness
                self.targetLoudness = targetLoudness
                self.minMode = minMode
                self.maxMode = maxMode
                self.targetMode = targetMode
                self.minPopularity = minPopularity
                self.maxPopularity = maxPopularity
                self.targetPopularity = targetPopularity
                self.minSpeechiness = minSpeechiness
                self.maxSpeechiness = maxSpeechiness
                self.targetSpeechiness = targetSpeechiness
                self.minTempo = minTempo
                self.maxTempo = maxTempo
                self.targetTempo = targetTempo
                self.minTimeSignature = minTimeSignature
                self.maxTimeSignature = maxTimeSignature
                self.targetTimeSignature = targetTimeSignature
                self.minValence = minValence
                self.maxValence = maxValence
                self.targetValence = targetValence
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("limit", limit)
                query.addQueryItem("market", market)
                query.addQueryItem("seed_artists", seedArtists)
                query.addQueryItem("seed_genres", seedGenres)
                query.addQueryItem("seed_tracks", seedTracks)
                query.addQueryItem("min_acousticness", minAcousticness)
                query.addQueryItem("max_acousticness", maxAcousticness)
                query.addQueryItem("target_acousticness", targetAcousticness)
                query.addQueryItem("min_danceability", minDanceability)
                query.addQueryItem("max_danceability", maxDanceability)
                query.addQueryItem("target_danceability", targetDanceability)
                query.addQueryItem("min_duration_ms", minDurationMs)
                query.addQueryItem("max_duration_ms", maxDurationMs)
                query.addQueryItem("target_duration_ms", targetDurationMs)
                query.addQueryItem("min_energy", minEnergy)
                query.addQueryItem("max_energy", maxEnergy)
                query.addQueryItem("target_energy", targetEnergy)
                query.addQueryItem("min_instrumentalness", minInstrumentalness)
                query.addQueryItem("max_instrumentalness", maxInstrumentalness)
                query.addQueryItem("target_instrumentalness", targetInstrumentalness)
                query.addQueryItem("min_key", minKey)
                query.addQueryItem("max_key", maxKey)
                query.addQueryItem("target_key", targetKey)
                query.addQueryItem("min_liveness", minLiveness)
                query.addQueryItem("max_liveness", maxLiveness)
                query.addQueryItem("target_liveness", targetLiveness)
                query.addQueryItem("min_loudness", minLoudness)
                query.addQueryItem("max_loudness", maxLoudness)
                query.addQueryItem("target_loudness", targetLoudness)
                query.addQueryItem("min_mode", minMode)
                query.addQueryItem("max_mode", maxMode)
                query.addQueryItem("target_mode", targetMode)
                query.addQueryItem("min_popularity", minPopularity)
                query.addQueryItem("max_popularity", maxPopularity)
                query.addQueryItem("target_popularity", targetPopularity)
                query.addQueryItem("min_speechiness", minSpeechiness)
                query.addQueryItem("max_speechiness", maxSpeechiness)
                query.addQueryItem("target_speechiness", targetSpeechiness)
                query.addQueryItem("min_tempo", minTempo)
                query.addQueryItem("max_tempo", maxTempo)
                query.addQueryItem("target_tempo", targetTempo)
                query.addQueryItem("min_time_signature", minTimeSignature)
                query.addQueryItem("max_time_signature", maxTimeSignature)
                query.addQueryItem("target_time_signature", targetTimeSignature)
                query.addQueryItem("min_valence", minValence)
                query.addQueryItem("max_valence", maxValence)
                query.addQueryItem("target_valence", targetValence)
                return query
            }
        }
    }
}

extension Paths.Episodes {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/episodes/{id}`
        public let path: String

        /// Get an Episode
        ///
        /// Get Spotify catalog information for a single episode identified by its
        /// unique Spotify ID.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-an-episode)
        public func get(market: String? = nil) -> Request<SpotifyAPI.EpisodeObject> {
            .get(path, query: makeGetQuery(market))
        }

        private func makeGetQuery(_ market: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("market", market)
            return query
        }
    }
}

extension Paths {
    public static var episodes: Episodes {
        Episodes(path: "/episodes")
    }

    public struct Episodes {
        /// Path: `/episodes`
        public let path: String

        /// Get Multiple Episodes
        ///
        /// Get Spotify catalog information for several episodes based on their Spotify IDs.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-multiple-episodes)
        public func get(ids: String, market: String? = nil) -> Request<SpotifyAPI.EpisodesObject> {
            .get(path, query: makeGetQuery(ids, market))
        }

        private func makeGetQuery(_ ids: String, _ market: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("ids", ids)
            query.addQueryItem("market", market)
            return query
        }
    }
}

extension Paths.Me.Following {
    public var contains: Contains {
        Contains(path: path + "/contains")
    }

    public struct Contains {
        /// Path: `/me/following/contains`
        public let path: String

        /// Get Following State for Artists/Users
        ///
        /// Check to see if the current user is following one or more artists or other Spotify users.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-check-current-user-follows)
        public func get(type: String, ids: String) -> Request<[Bool]> {
            .get(path, query: makeGetQuery(type, ids))
        }

        private func makeGetQuery(_ type: String, _ ids: String) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("type", type)
            query.addQueryItem("ids", ids)
            return query
        }
    }
}

extension Paths {
    public static var playlists: Playlists {
        Playlists(path: "/playlists")
    }

    public struct Playlists {
        /// Path: `/playlists`
        public let path: String
    }
}

extension Paths.Playlists.WithPlaylistID.Followers {
    public var contains: Contains {
        Contains(path: path + "/contains")
    }

    public struct Contains {
        /// Path: `/playlists/{playlist_id}/followers/contains`
        public let path: String

        /// Check if Users Follow a Playlist
        ///
        /// Check to see if one or more Spotify users are following a specified playlist.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-check-if-user-follows-playlist)
        public func get(ids: String) -> Request<[Bool]> {
            .get(path, query: makeGetQuery(ids))
        }

        private func makeGetQuery(_ ids: String) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("ids", ids)
            return query
        }
    }
}

extension Paths.Me {
    public var following: Following {
        Following(path: path + "/following")
    }

    public struct Following {
        /// Path: `/me/following`
        public let path: String

        /// Get User's Followed Artists
        ///
        /// Get the current user's followed artists.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-followed)
        public func get(parameters: GetParameters) -> Request<SpotifyAPI.FollowingArtistsObject> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var type: String
            public var after: String?
            public var limit: Int?

            public init(type: String, after: String? = nil, limit: Int? = nil) {
                self.type = type
                self.after = after
                self.limit = limit
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("type", type)
                query.addQueryItem("after", after)
                query.addQueryItem("limit", limit)
                return query
            }
        }

        /// Follow Artists or Users
        ///
        /// Add the current user as a follower of one or more artists or other Spotify users.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-follow-artists-users)
        public func put(type: String, ids: String, _ body: PutRequest) -> Request<Void> {
            .put(path, query: makePutQuery(type, ids), body: body)
        }

        private func makePutQuery(_ type: String, _ ids: String) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("type", type)
            query.addQueryItem("ids", ids)
            return query
        }

        public struct PutRequest: Encodable {
            /// A JSON array of the artist or user [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids). For example: `{ids:["74ASZWbe4lXaubB36ztrGX", "08td7MxkoHQkXnWAYD8d6Q"]}`. A maximum of 50 IDs can be sent in one request. ***Note** : if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*
            public var ids: [String]

            public init(ids: [String]) {
                self.ids = ids
            }
        }

        /// Unfollow Artists or Users
        ///
        /// Remove the current user as a follower of one or more artists or other Spotify users.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-unfollow-artists-users)
        public func delete(type: String, ids: String, _ body: DeleteRequest? = nil) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(type, ids), body: body)
        }

        private func makeDeleteQuery(_ type: String, _ ids: String) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("type", type)
            query.addQueryItem("ids", ids)
            return query
        }

        public struct DeleteRequest: Encodable {
            /// A JSON array of the artist or user [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids). For example: `{ids:["74ASZWbe4lXaubB36ztrGX", "08td7MxkoHQkXnWAYD8d6Q"]}`. A maximum of 50 IDs can be sent in one request. ***Note** : if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*
            public var ids: [String]?

            public init(ids: [String]? = nil) {
                self.ids = ids
            }
        }
    }
}

extension Paths.Playlists.WithPlaylistID {
    public var followers: Followers {
        Followers(path: path + "/followers")
    }

    public struct Followers {
        /// Path: `/playlists/{playlist_id}/followers`
        public let path: String

        /// Follow a Playlist
        ///
        /// Add the current user as a follower of a playlist.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-follow-playlist)
        public func put(isPublic: Bool? = nil) -> Request<Void> {
            .put(path, body: ["public": isPublic])
        }

        /// Unfollow Playlist
        ///
        /// Remove the current user as a follower of a playlist.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-unfollow-playlist)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Me.Albums {
    public var contains: Contains {
        Contains(path: path + "/contains")
    }

    public struct Contains {
        /// Path: `/me/albums/contains`
        public let path: String

        /// Check User's Saved Albums
        ///
        /// Check if one or more albums is already saved in the current Spotify user's 'Your Music' library.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-check-users-saved-albums)
        public func get(ids: String) -> Request<[Bool]> {
            .get(path, query: makeGetQuery(ids))
        }

        private func makeGetQuery(_ ids: String) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("ids", ids)
            return query
        }
    }
}

extension Paths.Me.Episodes {
    public var contains: Contains {
        Contains(path: path + "/contains")
    }

    public struct Contains {
        /// Path: `/me/episodes/contains`
        public let path: String

        /// Check User's Saved Episodes
        ///
        /// Check if one or more episodes is already saved in the current Spotify user's 'Your Episodes' library.  
        /// 
        /// This API endpoint is in **beta** and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer)..
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-check-users-saved-episodes)
        public func get(ids: String) -> Request<[Bool]> {
            .get(path, query: makeGetQuery(ids))
        }

        private func makeGetQuery(_ ids: String) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("ids", ids)
            return query
        }
    }
}

extension Paths.Me.Shows {
    public var contains: Contains {
        Contains(path: path + "/contains")
    }

    public struct Contains {
        /// Path: `/me/shows/contains`
        public let path: String

        /// Check User's Saved Shows
        ///
        /// Check if one or more shows is already saved in the current Spotify user's library.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-check-users-saved-shows)
        public func get(ids: String) -> Request<[Bool]> {
            .get(path, query: makeGetQuery(ids))
        }

        private func makeGetQuery(_ ids: String) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("ids", ids)
            return query
        }
    }
}

extension Paths.Me.Tracks {
    public var contains: Contains {
        Contains(path: path + "/contains")
    }

    public struct Contains {
        /// Path: `/me/tracks/contains`
        public let path: String

        /// Check User's Saved Tracks
        ///
        /// Check if one or more tracks is already saved in the current Spotify user's 'Your Music' library.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-check-users-saved-tracks)
        public func get(ids: String) -> Request<[Bool]> {
            .get(path, query: makeGetQuery(ids))
        }

        private func makeGetQuery(_ ids: String) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("ids", ids)
            return query
        }
    }
}

extension Paths.Me {
    public var albums: Albums {
        Albums(path: path + "/albums")
    }

    public struct Albums {
        /// Path: `/me/albums`
        public let path: String

        /// Get User's Saved Albums
        ///
        /// Get a list of the albums saved in the current Spotify user's 'Your Music' library.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-saved-albums)
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
        public struct GetResponse: Decodable {
            /// A link to the Web API endpoint returning the full result of the request
            public var href: String?
            /// The requested content
            public var items: [SpotifyAPI.SavedAlbumObject]?
            /// The maximum number of items in the response (as set in the query or by default).
            public var limit: Int?
            /// URL to the next page of items. ( `null` if none)
            public var next: String?
            /// The offset of the items returned (as set in the query or by default)
            public var offset: Int?
            /// URL to the previous page of items. ( `null` if none)
            public var previous: String?
            /// The total number of items available to return.
            public var total: Int?

            public init(href: String? = nil, items: [SpotifyAPI.SavedAlbumObject]? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, previous: String? = nil, total: Int? = nil) {
                self.href = href
                self.items = items
                self.limit = limit
                self.next = next
                self.offset = offset
                self.previous = previous
                self.total = total
            }
        }

        public struct GetParameters {
            public var limit: Int?
            public var offset: Int?
            public var market: String?

            public init(limit: Int? = nil, offset: Int? = nil, market: String? = nil) {
                self.limit = limit
                self.offset = offset
                self.market = market
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("limit", limit)
                query.addQueryItem("offset", offset)
                query.addQueryItem("market", market)
                return query
            }
        }

        /// Save Albums for Current User
        ///
        /// Save one or more albums to the current user's 'Your Music' library.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-save-albums-user)
        public func put(ids: String, _ body: PutRequest? = nil) -> Request<Void> {
            .put(path, query: makePutQuery(ids), body: body)
        }

        private func makePutQuery(_ ids: String) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("ids", ids)
            return query
        }

        public struct PutRequest: Encodable {
            /// A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids). For example: `["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]`  
            /// A maximum of 50 items can be specified in one request. ***Note** : if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*
            public var ids: [String]?

            public init(ids: [String]? = nil) {
                self.ids = ids
            }
        }

        /// Remove Albums for Current User
        ///
        /// Remove one or more albums from the current user's 'Your Music' library.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-remove-albums-user)
        public func delete(ids: String, _ body: DeleteRequest? = nil) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(ids), body: body)
        }

        private func makeDeleteQuery(_ ids: String) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("ids", ids)
            return query
        }

        public struct DeleteRequest: Encodable {
            /// A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids). For example: `["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]`  
            /// A maximum of 50 items can be specified in one request. ***Note** : if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*
            public var ids: [String]?

            public init(ids: [String]? = nil) {
                self.ids = ids
            }
        }
    }
}

extension Paths.Me {
    public var episodes: Episodes {
        Episodes(path: path + "/episodes")
    }

    public struct Episodes {
        /// Path: `/me/episodes`
        public let path: String

        /// Get User's Saved Episodes
        ///
        /// Get a list of the episodes saved in the current Spotify user's library.  
        /// 
        /// This API endpoint is in **beta** and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-saved-episodes)
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
        public struct GetResponse: Decodable {
            /// A link to the Web API endpoint returning the full result of the request
            public var href: String?
            /// The requested content
            public var items: [SpotifyAPI.SavedEpisodeObject]?
            /// The maximum number of items in the response (as set in the query or by default).
            public var limit: Int?
            /// URL to the next page of items. ( `null` if none)
            public var next: String?
            /// The offset of the items returned (as set in the query or by default)
            public var offset: Int?
            /// URL to the previous page of items. ( `null` if none)
            public var previous: String?
            /// The total number of items available to return.
            public var total: Int?

            public init(href: String? = nil, items: [SpotifyAPI.SavedEpisodeObject]? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, previous: String? = nil, total: Int? = nil) {
                self.href = href
                self.items = items
                self.limit = limit
                self.next = next
                self.offset = offset
                self.previous = previous
                self.total = total
            }
        }

        public struct GetParameters {
            public var market: String?
            public var limit: Int?
            public var offset: Int?

            public init(market: String? = nil, limit: Int? = nil, offset: Int? = nil) {
                self.market = market
                self.limit = limit
                self.offset = offset
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("market", market)
                query.addQueryItem("limit", limit)
                query.addQueryItem("offset", offset)
                return query
            }
        }

        /// Save Episodes for User
        ///
        /// Save one or more episodes to the current user's library.  
        /// 
        /// This API endpoint is in **beta** and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-save-episodes-user)
        public func put(ids: String, _ body: PutRequest? = nil) -> Request<Void> {
            .put(path, query: makePutQuery(ids), body: body)
        }

        private func makePutQuery(_ ids: String) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("ids", ids)
            return query
        }

        public struct PutRequest: Encodable {
            /// A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).   
            /// A maximum of 50 items can be specified in one request. ***Note** : if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*
            public var ids: [String]?

            public init(ids: [String]? = nil) {
                self.ids = ids
            }
        }

        /// Remove User's Saved Episodes
        ///
        /// Remove one or more episodes from the current user's library.  
        /// 
        /// This API endpoint is in **beta** and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-remove-episodes-user)
        public func delete(ids: String, _ body: DeleteRequest? = nil) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(ids), body: body)
        }

        private func makeDeleteQuery(_ ids: String) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("ids", ids)
            return query
        }

        public struct DeleteRequest: Encodable {
            /// A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).   
            /// A maximum of 50 items can be specified in one request. ***Note** : if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*
            public var ids: [String]?

            public init(ids: [String]? = nil) {
                self.ids = ids
            }
        }
    }
}

extension Paths.Me {
    public var shows: Shows {
        Shows(path: path + "/shows")
    }

    public struct Shows {
        /// Path: `/me/shows`
        public let path: String

        /// Get User's Saved Shows
        ///
        /// Get a list of shows saved in the current Spotify user's library. Optional parameters can be used to limit the number of shows returned.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-saved-shows)
        public func get(limit: Int? = nil, offset: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(limit, offset))
        }

        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
        public struct GetResponse: Decodable {
            /// A link to the Web API endpoint returning the full result of the request
            public var href: String?
            /// The requested content
            public var items: [SpotifyAPI.SavedShowObject]?
            /// The maximum number of items in the response (as set in the query or by default).
            public var limit: Int?
            /// URL to the next page of items. ( `null` if none)
            public var next: String?
            /// The offset of the items returned (as set in the query or by default)
            public var offset: Int?
            /// URL to the previous page of items. ( `null` if none)
            public var previous: String?
            /// The total number of items available to return.
            public var total: Int?

            public init(href: String? = nil, items: [SpotifyAPI.SavedShowObject]? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, previous: String? = nil, total: Int? = nil) {
                self.href = href
                self.items = items
                self.limit = limit
                self.next = next
                self.offset = offset
                self.previous = previous
                self.total = total
            }
        }

        private func makeGetQuery(_ limit: Int?, _ offset: Int?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("limit", limit)
            query.addQueryItem("offset", offset)
            return query
        }

        /// Save Shows for Current User
        ///
        /// Save one or more shows to current Spotify user's library.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-save-shows-user)
        public func put(ids: String, _ body: PutRequest? = nil) -> Request<Void> {
            .put(path, query: makePutQuery(ids), body: body)
        }

        private func makePutQuery(_ ids: String) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("ids", ids)
            return query
        }

        public struct PutRequest: Encodable {
            /// A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).  
            /// A maximum of 50 items can be specified in one request. *Note: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*
            public var ids: [String]?

            public init(ids: [String]? = nil) {
                self.ids = ids
            }
        }

        /// Remove User's Saved Shows
        ///
        /// Delete one or more shows from current Spotify user's library.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-remove-shows-user)
        public func delete(ids: String, market: String? = nil, _ body: DeleteRequest? = nil) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(ids, market), body: body)
        }

        private func makeDeleteQuery(_ ids: String, _ market: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("ids", ids)
            query.addQueryItem("market", market)
            return query
        }

        public struct DeleteRequest: Encodable {
            /// A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids).  
            /// A maximum of 50 items can be specified in one request. *Note: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*
            public var ids: [String]?

            public init(ids: [String]? = nil) {
                self.ids = ids
            }
        }
    }
}

extension Paths.Me {
    public var tracks: Tracks {
        Tracks(path: path + "/tracks")
    }

    public struct Tracks {
        /// Path: `/me/tracks`
        public let path: String

        /// Get User's Saved Tracks
        ///
        /// Get a list of the songs saved in the current Spotify user's 'Your Music' library.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-saved-tracks)
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
        public struct GetResponse: Decodable {
            /// A link to the Web API endpoint returning the full result of the request
            public var href: String?
            /// The requested content
            public var items: [SpotifyAPI.SavedTrackObject]?
            /// The maximum number of items in the response (as set in the query or by default).
            public var limit: Int?
            /// URL to the next page of items. ( `null` if none)
            public var next: String?
            /// The offset of the items returned (as set in the query or by default)
            public var offset: Int?
            /// URL to the previous page of items. ( `null` if none)
            public var previous: String?
            /// The total number of items available to return.
            public var total: Int?

            public init(href: String? = nil, items: [SpotifyAPI.SavedTrackObject]? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, previous: String? = nil, total: Int? = nil) {
                self.href = href
                self.items = items
                self.limit = limit
                self.next = next
                self.offset = offset
                self.previous = previous
                self.total = total
            }
        }

        public struct GetParameters {
            public var market: String?
            public var limit: Int?
            public var offset: Int?

            public init(market: String? = nil, limit: Int? = nil, offset: Int? = nil) {
                self.market = market
                self.limit = limit
                self.offset = offset
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("market", market)
                query.addQueryItem("limit", limit)
                query.addQueryItem("offset", offset)
                return query
            }
        }

        /// Save Tracks for User
        ///
        /// Save one or more tracks to the current user's 'Your Music' library.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-save-tracks-user)
        public func put(ids: String, _ body: PutRequest? = nil) -> Request<Void> {
            .put(path, query: makePutQuery(ids), body: body)
        }

        private func makePutQuery(_ ids: String) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("ids", ids)
            return query
        }

        public struct PutRequest: Encodable {
            /// A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids). For example: `["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]`  
            /// A maximum of 50 items can be specified in one request. ***Note** : if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*
            public var ids: [String]?

            public init(ids: [String]? = nil) {
                self.ids = ids
            }
        }

        /// Remove User's Saved Tracks
        ///
        /// Remove one or more tracks from the current user's 'Your Music' library.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-remove-tracks-user)
        public func delete(ids: String, _ body: DeleteRequest? = nil) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(ids), body: body)
        }

        private func makeDeleteQuery(_ ids: String) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("ids", ids)
            return query
        }

        public struct DeleteRequest: Encodable {
            /// A JSON array of the [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids). For example: `["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]`  
            /// A maximum of 50 items can be specified in one request. ***Note** : if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored.*
            public var ids: [String]?

            public init(ids: [String]? = nil) {
                self.ids = ids
            }
        }
    }
}

extension Paths {
    public static var markets: Markets {
        Markets(path: "/markets")
    }

    public struct Markets {
        /// Path: `/markets`
        public let path: String

        /// Get Available Markets
        ///
        /// Get the list of markets where Spotify is available.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-available-markets)
        public var get: Request<SpotifyAPI.MarketsObject> {
            .get(path)
        }
    }
}

extension Paths.Me {
    public var top: Top {
        Top(path: path + "/top")
    }

    public struct Top {
        /// Path: `/me/top`
        public let path: String
    }
}

extension Paths.Me.Top {
    public func type(_ type: String) -> WithType {
        WithType(path: "\(path)/\(type)")
    }

    public struct WithType {
        /// Path: `/me/top/{type}`
        public let path: String

        /// Get a User's Top Artists and Tracks
        ///
        /// Get the current user's top artists or tracks based on calculated affinity.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-top-artists-and-tracks)
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
        public struct GetResponse: Decodable {
            /// A link to the Web API endpoint returning the full result of the request
            public var href: String?
            /// The requested content
            public var items: [Item]?
            /// The maximum number of items in the response (as set in the query or by default).
            public var limit: Int?
            /// URL to the next page of items. ( `null` if none)
            public var next: String?
            /// The offset of the items returned (as set in the query or by default)
            public var offset: Int?
            /// URL to the previous page of items. ( `null` if none)
            public var previous: String?
            /// The total number of items available to return.
            public var total: Int?

            public enum Item: Decodable {
                case artistObject(SpotifyAPI.ArtistObject)
                case trackObject(SpotifyAPI.TrackObject)

                public init(from decoder: Decoder) throws {
                    let container = try decoder.singleValueContainer()
                    if let value = try? container.decode(SpotifyAPI.ArtistObject.self) {
                        self = .artistObject(value)
                    } else if let value = try? container.decode(SpotifyAPI.TrackObject.self) {
                        self = .trackObject(value)
                    } else {
                        throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
                    }
                }
            }

            public init(href: String? = nil, items: [Item]? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, previous: String? = nil, total: Int? = nil) {
                self.href = href
                self.items = items
                self.limit = limit
                self.next = next
                self.offset = offset
                self.previous = previous
                self.total = total
            }
        }

        public struct GetParameters {
            public var timeRange: String?
            public var limit: Int?
            public var offset: Int?

            public init(timeRange: String? = nil, limit: Int? = nil, offset: Int? = nil) {
                self.timeRange = timeRange
                self.limit = limit
                self.offset = offset
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("time_range", timeRange)
                query.addQueryItem("limit", limit)
                query.addQueryItem("offset", offset)
                return query
            }
        }
    }
}

extension Paths.Me.Player {
    public var queue: Queue {
        Queue(path: path + "/queue")
    }

    public struct Queue {
        /// Path: `/me/player/queue`
        public let path: String

        /// Add an item to queue
        ///
        /// Add an item to the end of the user's current playback queue.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-add-to-queue)
        public func post(uri: String, deviceID: String? = nil) -> Request<Void> {
            .post(path, query: makePostQuery(uri, deviceID))
        }

        private func makePostQuery(_ uri: String, _ deviceID: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("uri", uri)
            query.addQueryItem("device_id", deviceID)
            return query
        }
    }
}

extension Paths.Me.Player {
    public var devices: Devices {
        Devices(path: path + "/devices")
    }

    public struct Devices {
        /// Path: `/me/player/devices`
        public let path: String

        /// Get a User's Available Devices
        ///
        /// Get information about a user's available devices.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-users-available-devices)
        public var get: Request<SpotifyAPI.DevicesObject> {
            .get(path)
        }
    }
}

extension Paths.Me {
    public var player: Player {
        Player(path: path + "/player")
    }

    public struct Player {
        /// Path: `/me/player`
        public let path: String

        /// Get Information About The User's Current Playback
        ///
        /// Get information about the user's current playback state, including track or episode, progress, and active device.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-information-about-the-users-current-playback)
        public func get(market: String? = nil, additionalTypes: String? = nil) -> Request<SpotifyAPI.CurrentlyPlayingContextObject> {
            .get(path, query: makeGetQuery(market, additionalTypes))
        }

        private func makeGetQuery(_ market: String?, _ additionalTypes: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("market", market)
            query.addQueryItem("additional_types", additionalTypes)
            return query
        }

        /// Transfer a User's Playback
        ///
        /// Transfer playback to a new device and determine if it should start playing.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-transfer-a-users-playback)
        public func put(_ body: PutRequest) -> Request<Void> {
            .put(path, body: body)
        }

        public struct PutRequest: Encodable {
            /// A JSON array containing the ID of the device on which playback should be started/transferred.  
            /// For example:`{device_ids:["74ASZWbe4lXaubB36ztrGX"]}`  
            /// ***Note** : Although an array is accepted, only a single device_id is currently supported. Supplying more than one will return `400 Bad Request`*
            public var deviceIDs: [String]
            /// **true** : ensure playback happens on new device.  
            /// **false** or not provided: keep the current playback state.
            public var isPlay: Bool?

            public init(deviceIDs: [String], isPlay: Bool? = nil) {
                self.deviceIDs = deviceIDs
                self.isPlay = isPlay
            }

            private enum CodingKeys: String, CodingKey {
                case deviceIDs = "device_ids"
                case isPlay = "play"
            }
        }
    }
}

extension Paths.Me.Player {
    public var recentlyPlayed: RecentlyPlayed {
        RecentlyPlayed(path: path + "/recently-played")
    }

    public struct RecentlyPlayed {
        /// Path: `/me/player/recently-played`
        public let path: String

        /// Get Current User's Recently Played Tracks
        ///
        /// Get tracks from the current user's recently played tracks.
        /// ***Note**: Currently doesn't support podcast episodes.*
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-recently-played)
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-cursorpagingobject)
        public struct GetResponse: Decodable {
            /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-cursorobject)
            public var cursors: SpotifyAPI.CursorObject?
            /// A link to the Web API endpoint returning the full result of the request.
            public var href: String?
            /// The requested data.
            public var items: [SpotifyAPI.PlayHistoryObject]?
            /// The maximum number of items in the response (as set in the query or by default).
            public var limit: Int?
            /// URL to the next page of items. ( `null` if none)
            public var next: String?
            /// The total number of items available to return.
            public var total: Int?

            public init(cursors: SpotifyAPI.CursorObject? = nil, href: String? = nil, items: [SpotifyAPI.PlayHistoryObject]? = nil, limit: Int? = nil, next: String? = nil, total: Int? = nil) {
                self.cursors = cursors
                self.href = href
                self.items = items
                self.limit = limit
                self.next = next
                self.total = total
            }
        }

        public struct GetParameters {
            public var limit: Int?
            public var after: Int?
            public var before: Int?

            public init(limit: Int? = nil, after: Int? = nil, before: Int? = nil) {
                self.limit = limit
                self.after = after
                self.before = before
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("limit", limit)
                query.addQueryItem("after", after)
                query.addQueryItem("before", before)
                return query
            }
        }
    }
}

extension Paths.Me.Player {
    public var currentlyPlaying: CurrentlyPlaying {
        CurrentlyPlaying(path: path + "/currently-playing")
    }

    public struct CurrentlyPlaying {
        /// Path: `/me/player/currently-playing`
        public let path: String

        /// Get the User's Currently Playing Track
        ///
        /// Get the object currently being played on the user's Spotify account.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-the-users-currently-playing-track)
        public func get(market: String? = nil, additionalTypes: String? = nil) -> Request<SpotifyAPI.CurrentlyPlayingObject> {
            .get(path, query: makeGetQuery(market, additionalTypes))
        }

        private func makeGetQuery(_ market: String?, _ additionalTypes: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("market", market)
            query.addQueryItem("additional_types", additionalTypes)
            return query
        }
    }
}

extension Paths.Me.Player {
    public var pause: Pause {
        Pause(path: path + "/pause")
    }

    public struct Pause {
        /// Path: `/me/player/pause`
        public let path: String

        /// Pause a User's Playback
        ///
        /// Pause playback on the user's account.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-pause-a-users-playback)
        public func put(deviceID: String? = nil) -> Request<Void> {
            .put(path, query: makePutQuery(deviceID))
        }

        private func makePutQuery(_ deviceID: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("device_id", deviceID)
            return query
        }
    }
}

extension Paths.Me.Player {
    public var seek: Seek {
        Seek(path: path + "/seek")
    }

    public struct Seek {
        /// Path: `/me/player/seek`
        public let path: String

        /// Seek To Position In Currently Playing Track
        ///
        /// Seeks to the given position in the user's currently playing track.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-seek-to-position-in-currently-playing-track)
        public func put(positionMs: Int, deviceID: String? = nil) -> Request<Void> {
            .put(path, query: makePutQuery(positionMs, deviceID))
        }

        private func makePutQuery(_ positionMs: Int, _ deviceID: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("position_ms", positionMs)
            query.addQueryItem("device_id", deviceID)
            return query
        }
    }
}

extension Paths.Me.Player {
    public var `repeat`: Repeat {
        Repeat(path: path + "/repeat")
    }

    public struct Repeat {
        /// Path: `/me/player/repeat`
        public let path: String

        /// Set Repeat Mode On User’s Playback
        ///
        /// Set the repeat mode for the user's playback. Options are repeat-track,
        /// repeat-context, and off.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-set-repeat-mode-on-users-playback)
        public func put(state: String, deviceID: String? = nil) -> Request<Void> {
            .put(path, query: makePutQuery(state, deviceID))
        }

        private func makePutQuery(_ state: String, _ deviceID: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("state", state)
            query.addQueryItem("device_id", deviceID)
            return query
        }
    }
}

extension Paths.Me.Player {
    public var volume: Volume {
        Volume(path: path + "/volume")
    }

    public struct Volume {
        /// Path: `/me/player/volume`
        public let path: String

        /// Set Volume For User's Playback
        ///
        /// Set the volume for the user's current playback device.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-set-volume-for-users-playback)
        public func put(volumePercent: Int, deviceID: String? = nil) -> Request<Void> {
            .put(path, query: makePutQuery(volumePercent, deviceID))
        }

        private func makePutQuery(_ volumePercent: Int, _ deviceID: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("volume_percent", volumePercent)
            query.addQueryItem("device_id", deviceID)
            return query
        }
    }
}

extension Paths.Me.Player {
    public var next: Next {
        Next(path: path + "/next")
    }

    public struct Next {
        /// Path: `/me/player/next`
        public let path: String

        /// Skip User’s Playback To Next Track
        ///
        /// Skips to next track in the user's queue.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-skip-users-playback-to-next-track)
        public func post(deviceID: String? = nil) -> Request<Void> {
            .post(path, query: makePostQuery(deviceID))
        }

        private func makePostQuery(_ deviceID: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("device_id", deviceID)
            return query
        }
    }
}

extension Paths.Me.Player {
    public var previous: Previous {
        Previous(path: path + "/previous")
    }

    public struct Previous {
        /// Path: `/me/player/previous`
        public let path: String

        /// Skip User’s Playback To Previous Track
        ///
        /// Skips to previous track in the user's queue.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-skip-users-playback-to-previous-track)
        public func post(deviceID: String? = nil) -> Request<Void> {
            .post(path, query: makePostQuery(deviceID))
        }

        private func makePostQuery(_ deviceID: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("device_id", deviceID)
            return query
        }
    }
}

extension Paths.Me.Player {
    public var play: Play {
        Play(path: path + "/play")
    }

    public struct Play {
        /// Path: `/me/player/play`
        public let path: String

        /// Start/Resume a User's Playback
        ///
        /// Start a new context or resume current playback on the user's active device.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-start-a-users-playback)
        public func put(deviceID: String? = nil, _ body: PutRequest? = nil) -> Request<Void> {
            .put(path, query: makePutQuery(deviceID), body: body)
        }

        private func makePutQuery(_ deviceID: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("device_id", deviceID)
            return query
        }

        public struct PutRequest: Encodable {
            /// Spotify URI of the context to play. Valid contexts are albums, artists, playlists. Example: {"context_uri": "spotify:album:1Je1IMUlBXcx1Fz0WE7oPT"}
            public var contextUri: String?
            /// A JSON array of the Spotify track URIs to play. For example: {"uris": ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh", "spotify:track:1301WleyT98MSxVHPZCA6M"]}
            public var uris: [String]?
            /// Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object, or when the uris parameter is used. “position” is zero based and can’t be negative. Example: "offset": {"position": 5} “uri” is a string representing the uri of the item to start at. Example: "offset": {"uri": "spotify:track:1301WleyT98MSxVHPZCA6M"}
            public var offset: [String: AnyJSON]?
            /// Indicates from what position to start playback. Must be a positive number. Passing in a position that is greater than the length of the track will cause the player to start playing the next song.
            public var positionMs: Int?

            public init(contextUri: String? = nil, uris: [String]? = nil, offset: [String: AnyJSON]? = nil, positionMs: Int? = nil) {
                self.contextUri = contextUri
                self.uris = uris
                self.offset = offset
                self.positionMs = positionMs
            }

            private enum CodingKeys: String, CodingKey {
                case contextUri = "context_uri"
                case uris
                case offset
                case positionMs = "position_ms"
            }
        }
    }
}

extension Paths.Me.Player {
    public var shuffle: Shuffle {
        Shuffle(path: path + "/shuffle")
    }

    public struct Shuffle {
        /// Path: `/me/player/shuffle`
        public let path: String

        /// Toggle Shuffle For User’s Playback
        ///
        /// Toggle shuffle on or off for user's playback.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-toggle-shuffle-for-users-playback)
        public func put(isState: Bool, deviceID: String? = nil) -> Request<Void> {
            .put(path, query: makePutQuery(isState, deviceID))
        }

        private func makePutQuery(_ isState: Bool, _ deviceID: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("state", isState)
            query.addQueryItem("device_id", deviceID)
            return query
        }
    }
}

extension Paths.Playlists.WithPlaylistID {
    public var tracks: Tracks {
        Tracks(path: path + "/tracks")
    }

    public struct Tracks {
        /// Path: `/playlists/{playlist_id}/tracks`
        public let path: String

        /// Get a Playlist's Items
        ///
        /// Get full details of the items of a playlist owned by a Spotify user.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-playlists-tracks)
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
        public struct GetResponse: Decodable {
            /// A link to the Web API endpoint returning the full result of the request
            public var href: String?
            /// The requested content
            public var items: [SpotifyAPI.PlaylistTrackObject]?
            /// The maximum number of items in the response (as set in the query or by default).
            public var limit: Int?
            /// URL to the next page of items. ( `null` if none)
            public var next: String?
            /// The offset of the items returned (as set in the query or by default)
            public var offset: Int?
            /// URL to the previous page of items. ( `null` if none)
            public var previous: String?
            /// The total number of items available to return.
            public var total: Int?

            public init(href: String? = nil, items: [SpotifyAPI.PlaylistTrackObject]? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, previous: String? = nil, total: Int? = nil) {
                self.href = href
                self.items = items
                self.limit = limit
                self.next = next
                self.offset = offset
                self.previous = previous
                self.total = total
            }
        }

        public struct GetParameters {
            public var market: String?
            public var fields: String?
            public var limit: Int?
            public var offset: Int?
            public var additionalTypes: String?

            public init(market: String? = nil, fields: String? = nil, limit: Int? = nil, offset: Int? = nil, additionalTypes: String? = nil) {
                self.market = market
                self.fields = fields
                self.limit = limit
                self.offset = offset
                self.additionalTypes = additionalTypes
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("market", market)
                query.addQueryItem("fields", fields)
                query.addQueryItem("limit", limit)
                query.addQueryItem("offset", offset)
                query.addQueryItem("additional_types", additionalTypes)
                return query
            }
        }

        /// Add Items to a Playlist
        ///
        /// Add one or more items to a user's playlist.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-add-tracks-to-playlist)
        public func post(position: Int? = nil, uris: String? = nil, _ body: PostRequest? = nil) -> Request<SpotifyAPI.SnapshotIDObject> {
            .post(path, query: makePostQuery(position, uris), body: body)
        }

        private func makePostQuery(_ position: Int?, _ uris: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("position", position)
            query.addQueryItem("uris", uris)
            return query
        }

        public struct PostRequest: Encodable {
            /// A JSON array of the [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) to add. For example: `{"uris": ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh","spotify:track:1301WleyT98MSxVHPZCA6M", "spotify:episode:512ojhOuo1ktJprKbVcKyQ"]}`  
            /// A maximum of 100 items can be added in one request. ***Note** : if the `uris` parameter is present in the query string, any URIs listed here in the body will be ignored.*
            public var uris: [String]?
            /// The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0` ; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they appear in the uris array. For example: `{"uris": ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh","spotify:track:1301WleyT98MSxVHPZCA6M"], "position": 3}`
            public var position: Int?

            public init(uris: [String]? = nil, position: Int? = nil) {
                self.uris = uris
                self.position = position
            }
        }

        /// Reorder or Replace a Playlist's Items
        ///
        /// Either reorder or replace items in a playlist depending on the request's parameters.
        /// To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request's body.
        /// To replace items, include `uris` as either a query parameter or in the request's body.
        /// Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist.
        /// 
        /// 
        /// **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters.
        /// These operations can't be applied together in a single request.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-reorder-or-replace-playlists-tracks)
        public func put(uris: String? = nil, _ body: PutRequest? = nil) -> Request<SpotifyAPI.SnapshotIDObject> {
            .put(path, query: makePutQuery(uris), body: body)
        }

        private func makePutQuery(_ uris: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("uris", uris)
            return query
        }

        public struct PutRequest: Encodable {
            /// A comma-separated list of [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) to set, can be track or episode URIs. For example: `uris=spotify:track:4iV5W9uYEdYUVa79Axb7Rh,spotify:track:1301WleyT98MSxVHPZCA6M,spotify:episode:512ojhOuo1ktJprKbVcKyQ`  
            /// A maximum of 100 items can be set in one request.
            public var uris: [String]?
            /// The position of the first item to be reordered.
            public var rangeStart: Int?
            /// The position where the items should be inserted.  
            /// To reorder the items to the end of the playlist, simply set *insert_before* to the position after the last item.  
            /// Examples:  
            /// To reorder the first item to the last position in a playlist with 10 items, set *range_start* to 0, and *insert_before* to 10.  
            /// To reorder the last item in a playlist with 10 items to the start of the playlist, set *range_start* to 9, and *insert_before* to 0.
            public var insertBefore: Int?
            /// The amount of items to be reordered. Defaults to 1 if not set.  
            /// The range of items to be reordered begins from the *range_start* position, and includes the *range_length* subsequent items.  
            /// Example:  
            /// To move the items at index 9-10 to the start of the playlist, *range_start* is set to 9, and *range_length* is set to 2.
            public var rangeLength: Int?
            /// The playlist's snapshot ID against which you want to make the changes.
            public var snapshotID: String?

            public init(uris: [String]? = nil, rangeStart: Int? = nil, insertBefore: Int? = nil, rangeLength: Int? = nil, snapshotID: String? = nil) {
                self.uris = uris
                self.rangeStart = rangeStart
                self.insertBefore = insertBefore
                self.rangeLength = rangeLength
                self.snapshotID = snapshotID
            }

            private enum CodingKeys: String, CodingKey {
                case uris
                case rangeStart = "range_start"
                case insertBefore = "insert_before"
                case rangeLength = "range_length"
                case snapshotID = "snapshot_id"
            }
        }

        /// Remove Items from a Playlist
        ///
        /// Remove one or more items from a user's playlist.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-remove-tracks-playlist)
        public func delete(_ body: DeleteRequest) -> Request<SpotifyAPI.SnapshotIDObject> {
            .delete(path, body: body)
        }

        public struct DeleteRequest: Encodable {
            /// An array of objects containing [Spotify URIs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) of the tracks or episodes to remove. For example: `{ "tracks": [{ "uri": "spotify:track:4iV5W9uYEdYUVa79Axb7Rh" },{ "uri": "spotify:track:1301WleyT98MSxVHPZCA6M" }] }`. A maximum of 100 objects can be sent at once.
            public var tracks: [[String: AnyJSON]]
            /// The playlist's snapshot ID against which you want to make the changes. The API will validate that the specified items exist and in the specified positions and make the changes, even if more recent changes have been made to the playlist.
            public var snapshotID: String?

            public init(tracks: [[String: AnyJSON]], snapshotID: String? = nil) {
                self.tracks = tracks
                self.snapshotID = snapshotID
            }

            private enum CodingKeys: String, CodingKey {
                case tracks
                case snapshotID = "snapshot_id"
            }
        }
    }
}

extension Paths.Playlists {
    public func playlistID(_ playlistID: String) -> WithPlaylistID {
        WithPlaylistID(path: "\(path)/\(playlistID)")
    }

    public struct WithPlaylistID {
        /// Path: `/playlists/{playlist_id}`
        public let path: String

        /// Get a Playlist
        ///
        /// Get a playlist owned by a Spotify user.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-playlist)
        public func get(parameters: GetParameters? = nil) -> Request<SpotifyAPI.PlaylistObject> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var market: String?
            public var fields: String?
            public var additionalTypes: String?

            public init(market: String? = nil, fields: String? = nil, additionalTypes: String? = nil) {
                self.market = market
                self.fields = fields
                self.additionalTypes = additionalTypes
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("market", market)
                query.addQueryItem("fields", fields)
                query.addQueryItem("additional_types", additionalTypes)
                return query
            }
        }

        /// Change a Playlist's Details
        ///
        /// Change a playlist's name and public/private state. (The user must, of
        /// course, own the playlist.)
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-change-playlist-details)
        public func put(_ body: PutRequest? = nil) -> Request<Void> {
            .put(path, body: body)
        }

        public struct PutRequest: Encodable {
            /// The new name for the playlist, for example `"My New Playlist Title"`
            public var name: String?
            /// If `true` the playlist will be public, if `false` it will be private.
            public var isPublic: Bool?
            /// If `true`, the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client.   
            /// ***Note** : You can only set `collaborative` to `true` on non-public playlists.*
            public var isCollaborative: Bool?
            /// Value for playlist description as displayed in Spotify Clients and in the Web API.
            public var description: String?

            public init(name: String? = nil, isPublic: Bool? = nil, isCollaborative: Bool? = nil, description: String? = nil) {
                self.name = name
                self.isPublic = isPublic
                self.isCollaborative = isCollaborative
                self.description = description
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case isPublic = "public"
                case isCollaborative = "collaborative"
                case description
            }
        }
    }
}

extension Paths {
    public static var users: Users {
        Users(path: "/users")
    }

    public struct Users {
        /// Path: `/users`
        public let path: String
    }
}

extension Paths.Users.WithUserID {
    public var playlists: Playlists {
        Playlists(path: path + "/playlists")
    }

    public struct Playlists {
        /// Path: `/users/{user_id}/playlists`
        public let path: String

        /// Get a List of a User's Playlists
        ///
        /// Get a list of the playlists owned or followed by a Spotify user.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-list-users-playlists)
        public func get(limit: Int? = nil, offset: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(limit, offset))
        }

        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
        public struct GetResponse: Decodable {
            /// A link to the Web API endpoint returning the full result of the request
            public var href: String?
            /// The requested content
            public var items: [SpotifyAPI.SimplifiedPlaylistObject]?
            /// The maximum number of items in the response (as set in the query or by default).
            public var limit: Int?
            /// URL to the next page of items. ( `null` if none)
            public var next: String?
            /// The offset of the items returned (as set in the query or by default)
            public var offset: Int?
            /// URL to the previous page of items. ( `null` if none)
            public var previous: String?
            /// The total number of items available to return.
            public var total: Int?

            public init(href: String? = nil, items: [SpotifyAPI.SimplifiedPlaylistObject]? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, previous: String? = nil, total: Int? = nil) {
                self.href = href
                self.items = items
                self.limit = limit
                self.next = next
                self.offset = offset
                self.previous = previous
                self.total = total
            }
        }

        private func makeGetQuery(_ limit: Int?, _ offset: Int?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("limit", limit)
            query.addQueryItem("offset", offset)
            return query
        }

        /// Create a Playlist
        ///
        /// Create a playlist for a Spotify user. (The playlist will be empty until
        /// you [add tracks](https://developer.spotify.com/documentation/web-api/reference/#endpoint-add-tracks-to-playlist).)
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-create-playlist)
        public func post(_ body: PostRequest) -> Request<SpotifyAPI.PlaylistObject> {
            .post(path, body: body)
        }

        public struct PostRequest: Encodable {
            /// The name for the new playlist, for example `"Your Coolest Playlist"`. This name does not need to be unique; a user may have several playlists with the same name.
            public var name: String
            /// Defaults to `true`. If `true` the playlist will be public, if `false` it will be private. To be able to create private playlists, the user must have granted the `playlist-modify-private` [scope](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes)
            public var isPublic: Bool?
            /// Defaults to `false`. If `true` the playlist will be collaborative. ***Note** : to create a collaborative playlist you must also set `public` to `false`. To create collaborative playlists you must have granted `playlist-modify-private` and `playlist-modify-public` [scopes](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes).*
            public var isCollaborative: Bool?
            /// Value for playlist description as displayed in Spotify Clients and in the Web API.
            public var description: String?

            public init(name: String, isPublic: Bool? = nil, isCollaborative: Bool? = nil, description: String? = nil) {
                self.name = name
                self.isPublic = isPublic
                self.isCollaborative = isCollaborative
                self.description = description
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case isPublic = "public"
                case isCollaborative = "collaborative"
                case description
            }
        }
    }
}

extension Paths.Me {
    public var playlists: Playlists {
        Playlists(path: path + "/playlists")
    }

    public struct Playlists {
        /// Path: `/me/playlists`
        public let path: String

        /// Get a List of Current User's Playlists
        ///
        /// Get a list of the playlists owned or followed by the current Spotify
        /// user.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-list-of-current-users-playlists)
        public func get(limit: Int? = nil, offset: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(limit, offset))
        }

        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
        public struct GetResponse: Decodable {
            /// A link to the Web API endpoint returning the full result of the request
            public var href: String?
            /// The requested content
            public var items: [SpotifyAPI.SimplifiedPlaylistObject]?
            /// The maximum number of items in the response (as set in the query or by default).
            public var limit: Int?
            /// URL to the next page of items. ( `null` if none)
            public var next: String?
            /// The offset of the items returned (as set in the query or by default)
            public var offset: Int?
            /// URL to the previous page of items. ( `null` if none)
            public var previous: String?
            /// The total number of items available to return.
            public var total: Int?

            public init(href: String? = nil, items: [SpotifyAPI.SimplifiedPlaylistObject]? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, previous: String? = nil, total: Int? = nil) {
                self.href = href
                self.items = items
                self.limit = limit
                self.next = next
                self.offset = offset
                self.previous = previous
                self.total = total
            }
        }

        private func makeGetQuery(_ limit: Int?, _ offset: Int?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("limit", limit)
            query.addQueryItem("offset", offset)
            return query
        }
    }
}

extension Paths.Playlists.WithPlaylistID {
    public var images: Images {
        Images(path: path + "/images")
    }

    public struct Images {
        /// Path: `/playlists/{playlist_id}/images`
        public let path: String

        /// Get a Playlist Cover Image
        ///
        /// Get the current image associated with a specific playlist.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-playlist-cover)
        public var get: Request<[SpotifyAPI.ImageObject]> {
            .get(path)
        }

        /// Upload a Custom Playlist Cover Image
        ///
        /// Replace the image used to represent a specific playlist.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-upload-custom-playlist-cover)
        public func put(_ body: Data) -> Request<Void> {
            .put(path, body: body)
        }
    }
}

extension Paths {
    public static var search: Search {
        Search(path: "/search")
    }

    public struct Search {
        /// Path: `/search`
        public let path: String

        /// Search for an Item
        ///
        /// Get Spotify Catalog information about albums, artists, playlists, tracks, shows or episodes
        /// that match a keyword string.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-search)
        public func get(parameters: GetParameters) -> Request<SpotifyAPI.SearchResponseObject> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var q: String
            public var type: String
            public var market: String?
            public var limit: Int?
            public var offset: Int?
            public var includeExternal: String?

            public init(q: String, type: String, market: String? = nil, limit: Int? = nil, offset: Int? = nil, includeExternal: String? = nil) {
                self.q = q
                self.type = type
                self.market = market
                self.limit = limit
                self.offset = offset
                self.includeExternal = includeExternal
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("q", q)
                query.addQueryItem("type", type)
                query.addQueryItem("market", market)
                query.addQueryItem("limit", limit)
                query.addQueryItem("offset", offset)
                query.addQueryItem("include_external", includeExternal)
                return query
            }
        }
    }
}

extension Paths.Shows {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/shows/{id}`
        public let path: String

        /// Get a Show
        ///
        /// Get Spotify catalog information for a single show identified by its
        /// unique Spotify ID.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-show)
        public func get(market: String? = nil) -> Request<SpotifyAPI.ShowObject> {
            .get(path, query: makeGetQuery(market))
        }

        private func makeGetQuery(_ market: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("market", market)
            return query
        }
    }
}

extension Paths.Shows.WithID {
    public var episodes: Episodes {
        Episodes(path: path + "/episodes")
    }

    public struct Episodes {
        /// Path: `/shows/{id}/episodes`
        public let path: String

        /// Get a Show's Episodes
        ///
        /// Get Spotify catalog information about an show's episodes. Optional parameters can be used to limit the number of episodes returned.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-a-shows-episodes)
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
        public struct GetResponse: Decodable {
            /// A link to the Web API endpoint returning the full result of the request
            public var href: String?
            /// The requested content
            public var items: [SpotifyAPI.SimplifiedEpisodeObject]?
            /// The maximum number of items in the response (as set in the query or by default).
            public var limit: Int?
            /// URL to the next page of items. ( `null` if none)
            public var next: String?
            /// The offset of the items returned (as set in the query or by default)
            public var offset: Int?
            /// URL to the previous page of items. ( `null` if none)
            public var previous: String?
            /// The total number of items available to return.
            public var total: Int?

            public init(href: String? = nil, items: [SpotifyAPI.SimplifiedEpisodeObject]? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, previous: String? = nil, total: Int? = nil) {
                self.href = href
                self.items = items
                self.limit = limit
                self.next = next
                self.offset = offset
                self.previous = previous
                self.total = total
            }
        }

        public struct GetParameters {
            public var market: String?
            public var limit: Int?
            public var offset: Int?

            public init(market: String? = nil, limit: Int? = nil, offset: Int? = nil) {
                self.market = market
                self.limit = limit
                self.offset = offset
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("market", market)
                query.addQueryItem("limit", limit)
                query.addQueryItem("offset", offset)
                return query
            }
        }
    }
}

extension Paths {
    public static var shows: Shows {
        Shows(path: "/shows")
    }

    public struct Shows {
        /// Path: `/shows`
        public let path: String

        /// Get Multiple Shows
        ///
        /// Get Spotify catalog information for several shows based on their Spotify IDs.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-multiple-shows)
        public func get(market: String? = nil, ids: String) -> Request<SpotifyAPI.ShowsObject> {
            .get(path, query: makeGetQuery(market, ids))
        }

        private func makeGetQuery(_ market: String?, _ ids: String) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("market", market)
            query.addQueryItem("ids", ids)
            return query
        }
    }
}

extension Paths {
    public static var audioAnalysis: AudioAnalysis {
        AudioAnalysis(path: "/audio-analysis")
    }

    public struct AudioAnalysis {
        /// Path: `/audio-analysis`
        public let path: String
    }
}

extension Paths.AudioAnalysis {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/audio-analysis/{id}`
        public let path: String

        /// Get Audio Analysis for a Track
        ///
        /// Get a detailed audio analysis for a single track identified by its unique
        /// Spotify ID.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-audio-analysis)
        public var get: Request<SpotifyAPI.AudioAnalysisObject> {
            .get(path)
        }
    }
}

extension Paths.AudioFeatures {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/audio-features/{id}`
        public let path: String

        /// Get Audio Features for a Track
        ///
        /// Get audio feature information for a single track identified by its unique
        /// Spotify ID.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-audio-features)
        public var get: Request<SpotifyAPI.AudioFeaturesObject> {
            .get(path)
        }
    }
}

extension Paths {
    public static var audioFeatures: AudioFeatures {
        AudioFeatures(path: "/audio-features")
    }

    public struct AudioFeatures {
        /// Path: `/audio-features`
        public let path: String

        /// Get Audio Features for Several Tracks
        ///
        /// Get audio features for multiple tracks based on their Spotify IDs.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-several-audio-features)
        public func get(ids: String) -> Request<SpotifyAPI.AudioFeaturesArrayObject> {
            .get(path, query: makeGetQuery(ids))
        }

        private func makeGetQuery(_ ids: String) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("ids", ids)
            return query
        }
    }
}

extension Paths {
    public static var tracks: Tracks {
        Tracks(path: "/tracks")
    }

    public struct Tracks {
        /// Path: `/tracks`
        public let path: String

        /// Get Several Tracks
        ///
        /// Get Spotify catalog information for multiple tracks based on their Spotify IDs.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-several-tracks)
        public func get(market: String? = nil, ids: String) -> Request<SpotifyAPI.TracksObject> {
            .get(path, query: makeGetQuery(market, ids))
        }

        private func makeGetQuery(_ market: String?, _ ids: String) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("market", market)
            query.addQueryItem("ids", ids)
            return query
        }
    }
}

extension Paths.Tracks {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/tracks/{id}`
        public let path: String

        /// Get a Track
        ///
        /// Get Spotify catalog information for a single track identified by its
        /// unique Spotify ID.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-track)
        public func get(market: String? = nil) -> Request<SpotifyAPI.TrackObject> {
            .get(path, query: makeGetQuery(market))
        }

        private func makeGetQuery(_ market: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("market", market)
            return query
        }
    }
}

extension Paths {
    public static var me: Me {
        Me(path: "/me")
    }

    public struct Me {
        /// Path: `/me`
        public let path: String

        /// Get Current User's Profile
        ///
        /// Get detailed profile information about the current user (including the
        /// current user's username).
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-current-users-profile)
        public var get: Request<SpotifyAPI.PrivateUserObject> {
            .get(path)
        }
    }
}

extension Paths.Users {
    public func userID(_ userID: String) -> WithUserID {
        WithUserID(path: "\(path)/\(userID)")
    }

    public struct WithUserID {
        /// Path: `/users/{user_id}`
        public let path: String

        /// Get a User's Profile
        ///
        /// Get public profile information about a Spotify user.
        ///
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#endpoint-get-users-profile)
        public var get: Request<SpotifyAPI.PublicUserObject> {
            .get(path)
        }
    }
}

public enum Paths {}

protocol QueryEncodable {
    var asQueryValue: String { get }
}

extension Bool: QueryEncodable {
    var asQueryValue: String {
        self ? "true" : "false"
    }
}

extension Date: QueryEncodable {
    var asQueryValue: String {
        ISO8601DateFormatter().string(from: self)
    }
}

extension Double: QueryEncodable {
    var asQueryValue: String {
        String(self)
    }
}

extension Int: QueryEncodable {
    var asQueryValue: String {
        String(self)
    }
}

extension Int32: QueryEncodable {
    var asQueryValue: String {
        String(self)
    }
}

extension Int64: QueryEncodable {
    var asQueryValue: String {
        String(self)
    }
}

extension String: QueryEncodable {
    var asQueryValue: String {
        self
    }
}

extension URL: QueryEncodable {
    var asQueryValue: String {
        absoluteString
    }
}

extension RawRepresentable where RawValue == String {
    var asQueryValue: String {
        rawValue
    }
}

extension Array where Element == (String, String?) {
    mutating func addQueryItem<T: RawRepresentable>(_ name: String, _ value: T?) where T.RawValue == String {
        addQueryItem(name, value?.rawValue)
    }
    
    mutating func addQueryItem(_ name: String, _ value: QueryEncodable?) {
        guard let value = value?.asQueryValue, !value.isEmpty else { return }
        append((name, value))
    }
    
    mutating func addDeepObject(_ name: String, _ query: [(String, String?)]?) {
        for (key, value) in query ?? [] {
            addQueryItem("\(name)[\(key)]", value)
        }
    }

    var asPercentEncodedQuery: String {
        var components = URLComponents()
        components.queryItems = self.map(URLQueryItem.init)
        return components.percentEncodedQuery ?? ""
    }
    
    // [("role", "admin"), ("name": "kean)] -> "role,admin,name,kean"
    var asCompactQuery: String {
        flatMap { [$0, $1] }.compactMap { $0 }.joined(separator: ",")
    }
}
