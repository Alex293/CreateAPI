// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation

public struct AlbumObject: Codable {
    /// The type of the album.
    public var albumType: String?
    /// The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist.
    public var artists: [ArtistObject]?
    /// The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). Note that an album is considered available in a market when at least one of its tracks is available in that market.
    public var availableMarkets: [String]?
    /// The copyright statements of the album.
    public var copyrights: [CopyrightObject]?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-externalidobject)
    public var externalIDs: ExternalIDObject?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-externalurlobject)
    public var externalURLs: ExternalURLObject?
    /// A list of the genres used to classify the album. (If not yet classified, the array is empty.)
    public var genres: [String]?
    /// A link to the Web API endpoint providing full details of the album.
    public var href: String?
    /// The Spotify ID for the album.
    public var id: String?
    /// The cover art for the album in various sizes, widest first.
    public var images: [ImageObject]?
    /// The label for the album.
    public var label: String?
    /// The name of the album. In case of an album takedown, the value may be an empty string.
    public var name: String?
    /// The popularity of the album, with 100 being the most popular. The popularity is calculated from the popularity of the album's individual tracks.
    public var popularity: Int?
    /// The date the album was first released. Depending on the precision, it might be shown as "1981" or "1981-12".
    public var releaseDate: String?
    /// The precision with which release_date value is known.
    public var releaseDatePrecision: String?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-albumrestrictionobject)
    public var restrictions: AlbumRestrictionObject?
    /// The total number of tracks in the album.
    public var totalTracks: Int?
    /// The tracks of the album.
    ///
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public var tracks: Tracks?
    /// The object type.
    public var type: String?
    /// The Spotify URI for the album.
    public var uri: String?

    /// The tracks of the album.
    ///
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public struct Tracks: Codable {
        /// A link to the Web API endpoint returning the full result of the request
        public var href: String?
        /// The requested content
        public var items: [SimplifiedTrackObject]?
        /// The maximum number of items in the response (as set in the query or by default).
        public var limit: Int?
        /// URL to the next page of items. ( `null` if none)
        public var next: String?
        /// The offset of the items returned (as set in the query or by default)
        public var offset: Int?
        /// URL to the previous page of items. ( `null` if none)
        public var previous: String?
        /// The total number of items available to return.
        public var total: Int?

        public init(href: String? = nil, items: [SimplifiedTrackObject]? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, previous: String? = nil, total: Int? = nil) {
            self.href = href
            self.items = items
            self.limit = limit
            self.next = next
            self.offset = offset
            self.previous = previous
            self.total = total
        }
    }

    public init(albumType: String? = nil, artists: [ArtistObject]? = nil, availableMarkets: [String]? = nil, copyrights: [CopyrightObject]? = nil, externalIDs: ExternalIDObject? = nil, externalURLs: ExternalURLObject? = nil, genres: [String]? = nil, href: String? = nil, id: String? = nil, images: [ImageObject]? = nil, label: String? = nil, name: String? = nil, popularity: Int? = nil, releaseDate: String? = nil, releaseDatePrecision: String? = nil, restrictions: AlbumRestrictionObject? = nil, totalTracks: Int? = nil, tracks: Tracks? = nil, type: String? = nil, uri: String? = nil) {
        self.albumType = albumType
        self.artists = artists
        self.availableMarkets = availableMarkets
        self.copyrights = copyrights
        self.externalIDs = externalIDs
        self.externalURLs = externalURLs
        self.genres = genres
        self.href = href
        self.id = id
        self.images = images
        self.label = label
        self.name = name
        self.popularity = popularity
        self.releaseDate = releaseDate
        self.releaseDatePrecision = releaseDatePrecision
        self.restrictions = restrictions
        self.totalTracks = totalTracks
        self.tracks = tracks
        self.type = type
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case albumType = "album_type"
        case artists
        case availableMarkets = "available_markets"
        case copyrights
        case externalIDs = "external_ids"
        case externalURLs = "external_urls"
        case genres
        case href
        case id
        case images
        case label
        case name
        case popularity
        case releaseDate = "release_date"
        case releaseDatePrecision = "release_date_precision"
        case restrictions
        case totalTracks = "total_tracks"
        case tracks
        case type
        case uri
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-albumrestrictionobject)
public struct AlbumRestrictionObject: Codable {
    /// The reason for the restriction. Albums may be restricted if the content is not available in a given market, to the user's subscription type, or when the user's account is set to not play explicit content. Additional reasons may be added in the future.
    public var reason: String?

    public init(reason: String? = nil) {
        self.reason = reason
    }
}

public struct AlbumsObject: Codable {
    public var albums: [AlbumObject]?

    public init(albums: [AlbumObject]? = nil) {
        self.albums = albums
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject)
public struct ArtistObject: Codable {
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-externalurlobject)
    public var externalURLs: ExternalURLObject?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-followersobject)
    public var followers: FollowersObject?
    /// A list of the genres the artist is associated with. If not yet classified, the array is empty.
    public var genres: [String]?
    /// A link to the Web API endpoint providing full details of the artist.
    public var href: String?
    /// The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the artist.
    public var id: String?
    /// Images of the artist in various sizes, widest first.
    public var images: [ImageObject]?
    /// The name of the artist.
    public var name: String?
    /// The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist's popularity is calculated from the popularity of all the artist's tracks.
    public var popularity: Int?
    /// The object type.
    public var type: String?
    /// The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the artist.
    public var uri: String?

    public init(externalURLs: ExternalURLObject? = nil, followers: FollowersObject? = nil, genres: [String]? = nil, href: String? = nil, id: String? = nil, images: [ImageObject]? = nil, name: String? = nil, popularity: Int? = nil, type: String? = nil, uri: String? = nil) {
        self.externalURLs = externalURLs
        self.followers = followers
        self.genres = genres
        self.href = href
        self.id = id
        self.images = images
        self.name = name
        self.popularity = popularity
        self.type = type
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case externalURLs = "external_urls"
        case followers
        case genres
        case href
        case id
        case images
        case name
        case popularity
        case type
        case uri
    }
}

public struct ArtistsObject: Codable {
    public var artists: [ArtistObject]?

    public init(artists: [ArtistObject]? = nil) {
        self.artists = artists
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/#audio-analysis-object)
public struct AudioAnalysisObject: Codable {
    /// The time intervals of the bars throughout the track. A bar (or measure) is a segment of time defined as a given number of beats. Bar offsets also indicate downbeats, the first beat of the measure.
    public var bars: [TimeIntervalObject]?
    /// The time intervals of beats throughout the track. A beat is the basic time unit of a piece of music; for example, each tick of a metronome. Beats are typically multiples of tatums.
    public var beats: [TimeIntervalObject]?
    /// Sections are defined by large variations in rhythm or timbre, e.g. chorus, verse, bridge, guitar solo, etc. Each section contains its own descriptions of tempo, key, mode, time_signature, and loudness.
    public var sections: [SectionObject]?
    /// Audio segments attempts to subdivide a song into many segments, with each segment containing a roughly consistent sound throughout its duration.
    public var segments: [SegmentObject]?
    /// A tatum represents the lowest regular pulse train that a listener intuitively infers from the timing of perceived musical events (segments).
    public var tatums: [TimeIntervalObject]?

    public init(bars: [TimeIntervalObject]? = nil, beats: [TimeIntervalObject]? = nil, sections: [SectionObject]? = nil, segments: [SegmentObject]? = nil, tatums: [TimeIntervalObject]? = nil) {
        self.bars = bars
        self.beats = beats
        self.sections = sections
        self.segments = segments
        self.tatums = tatums
    }
}

public struct AudioFeaturesArrayObject: Codable {
    public var audioFeatures: [AudioFeaturesObject]?

    public init(audioFeatures: [AudioFeaturesObject]? = nil) {
        self.audioFeatures = audioFeatures
    }

    private enum CodingKeys: String, CodingKey {
        case audioFeatures = "audio_features"
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-audiofeaturesobject)
public struct AudioFeaturesObject: Codable {
    /// A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.
    public var acousticness: Double?
    /// A URL to access the full audio analysis of this track. An access token is required to access this data.
    public var analysisURL: String?
    /// Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.
    public var danceability: Double?
    /// The duration of the track in milliseconds.
    public var durationMs: Int?
    /// Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.
    public var energy: Double?
    /// The Spotify ID for the track.
    public var id: String?
    /// Predicts whether a track contains no vocals. "Ooh" and "aah" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly "vocal". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.
    public var instrumentalness: Double?
    /// The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on.
    public var key: Int?
    /// Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.
    public var liveness: Double?
    /// The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typical range between -60 and 0 db.
    public var loudness: Double?
    /// Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.
    public var mode: Int?
    /// Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.
    public var speechiness: Double?
    /// The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
    public var tempo: Double?
    /// An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure).
    public var timeSignature: Int?
    /// A link to the Web API endpoint providing full details of the track.
    public var trackHref: String?
    /// The object type.
    public var type: String?
    /// The Spotify URI for the track.
    public var uri: String?
    /// A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).
    public var valence: Double?

    public init(acousticness: Double? = nil, analysisURL: String? = nil, danceability: Double? = nil, durationMs: Int? = nil, energy: Double? = nil, id: String? = nil, instrumentalness: Double? = nil, key: Int? = nil, liveness: Double? = nil, loudness: Double? = nil, mode: Int? = nil, speechiness: Double? = nil, tempo: Double? = nil, timeSignature: Int? = nil, trackHref: String? = nil, type: String? = nil, uri: String? = nil, valence: Double? = nil) {
        self.acousticness = acousticness
        self.analysisURL = analysisURL
        self.danceability = danceability
        self.durationMs = durationMs
        self.energy = energy
        self.id = id
        self.instrumentalness = instrumentalness
        self.key = key
        self.liveness = liveness
        self.loudness = loudness
        self.mode = mode
        self.speechiness = speechiness
        self.tempo = tempo
        self.timeSignature = timeSignature
        self.trackHref = trackHref
        self.type = type
        self.uri = uri
        self.valence = valence
    }

    private enum CodingKeys: String, CodingKey {
        case acousticness
        case analysisURL = "analysis_url"
        case danceability
        case durationMs = "duration_ms"
        case energy
        case id
        case instrumentalness
        case key
        case liveness
        case loudness
        case mode
        case speechiness
        case tempo
        case timeSignature = "time_signature"
        case trackHref = "track_href"
        case type
        case uri
        case valence
    }
}

public struct CategoriesObject: Codable {
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public var categories: Categories?

    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public struct Categories: Codable {
        /// A link to the Web API endpoint returning the full result of the request
        public var href: String?
        /// The requested content
        public var items: [CategoryObject]?
        /// The maximum number of items in the response (as set in the query or by default).
        public var limit: Int?
        /// URL to the next page of items. ( `null` if none)
        public var next: String?
        /// The offset of the items returned (as set in the query or by default)
        public var offset: Int?
        /// URL to the previous page of items. ( `null` if none)
        public var previous: String?
        /// The total number of items available to return.
        public var total: Int?

        public init(href: String? = nil, items: [CategoryObject]? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, previous: String? = nil, total: Int? = nil) {
            self.href = href
            self.items = items
            self.limit = limit
            self.next = next
            self.offset = offset
            self.previous = previous
            self.total = total
        }
    }

    public init(categories: Categories? = nil) {
        self.categories = categories
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-categoryobject)
public struct CategoryObject: Codable {
    /// A link to the Web API endpoint returning full details of the category.
    public var href: String?
    /// The category icon, in various sizes.
    public var icons: [ImageObject]?
    /// The [Spotify category ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) of the category.
    public var id: String?
    /// The name of the category.
    public var name: String?

    public init(href: String? = nil, icons: [ImageObject]? = nil, id: String? = nil, name: String? = nil) {
        self.href = href
        self.icons = icons
        self.id = id
        self.name = name
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-contextobject)
public struct ContextObject: Codable {
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-externalurlobject)
    public var externalURLs: ExternalURLObject?
    /// A link to the Web API endpoint providing full details of the track.
    public var href: String?
    /// The object type, e.g. "artist", "playlist", "album", "show".
    public var type: String?
    /// The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the context.
    public var uri: String?

    public init(externalURLs: ExternalURLObject? = nil, href: String? = nil, type: String? = nil, uri: String? = nil) {
        self.externalURLs = externalURLs
        self.href = href
        self.type = type
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case externalURLs = "external_urls"
        case href
        case type
        case uri
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-copyrightobject)
public struct CopyrightObject: Codable {
    /// The copyright text for this content.
    public var text: String?
    /// The type of copyright: `C` = the copyright, `P` = the sound recording (performance) copyright.
    public var type: String?

    public init(text: String? = nil, type: String? = nil) {
        self.text = text
        self.type = type
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-currentlyplayingcontextobject)
public struct CurrentlyPlayingContextObject: Codable {
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-disallowsobject)
    public var actions: DisallowsObject?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-contextobject)
    public var context: ContextObject?
    /// The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`.
    public var currentlyPlayingType: String?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-deviceobject)
    public var device: DeviceObject?
    /// If something is currently playing, return `true`.
    public var isPlaying: Bool?
    /// The currently playing track or episode. Can be `null`.
    public var item: Item?
    /// Progress into the currently playing track or episode. Can be `null`.
    public var progressMs: Int?
    /// Off, track, context
    public var repeatState: String?
    /// If shuffle is on or off.
    public var shuffleState: String?
    /// Unix Millisecond Timestamp when data was fetched.
    public var timestamp: Int?

    /// The currently playing track or episode. Can be `null`.
    public enum Item: Codable {
        case trackObject(TrackObject)
        case episodeObject(EpisodeObject)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(TrackObject.self) {
                self = .trackObject(value)
            } else if let value = try? container.decode(EpisodeObject.self) {
                self = .episodeObject(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .trackObject(let value): try container.encode(value)
            case .episodeObject(let value): try container.encode(value)
            }
        }
    }

    public init(actions: DisallowsObject? = nil, context: ContextObject? = nil, currentlyPlayingType: String? = nil, device: DeviceObject? = nil, isPlaying: Bool? = nil, item: Item? = nil, progressMs: Int? = nil, repeatState: String? = nil, shuffleState: String? = nil, timestamp: Int? = nil) {
        self.actions = actions
        self.context = context
        self.currentlyPlayingType = currentlyPlayingType
        self.device = device
        self.isPlaying = isPlaying
        self.item = item
        self.progressMs = progressMs
        self.repeatState = repeatState
        self.shuffleState = shuffleState
        self.timestamp = timestamp
    }

    private enum CodingKeys: String, CodingKey {
        case actions
        case context
        case currentlyPlayingType = "currently_playing_type"
        case device
        case isPlaying = "is_playing"
        case item
        case progressMs = "progress_ms"
        case repeatState = "repeat_state"
        case shuffleState = "shuffle_state"
        case timestamp
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-currentlyplayingobject)
public struct CurrentlyPlayingObject: Codable {
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-contextobject)
    public var context: ContextObject?
    /// The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`.
    public var currentlyPlayingType: String?
    /// If something is currently playing, return `true`.
    public var isPlaying: Bool?
    /// The currently playing track or episode. Can be `null`.
    public var item: Item?
    /// Progress into the currently playing track or episode. Can be `null`.
    public var progressMs: Int?
    /// Unix Millisecond Timestamp when data was fetched
    public var timestamp: Int?

    /// The currently playing track or episode. Can be `null`.
    public enum Item: Codable {
        case trackObject(TrackObject)
        case episodeObject(EpisodeObject)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(TrackObject.self) {
                self = .trackObject(value)
            } else if let value = try? container.decode(EpisodeObject.self) {
                self = .episodeObject(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .trackObject(let value): try container.encode(value)
            case .episodeObject(let value): try container.encode(value)
            }
        }
    }

    public init(context: ContextObject? = nil, currentlyPlayingType: String? = nil, isPlaying: Bool? = nil, item: Item? = nil, progressMs: Int? = nil, timestamp: Int? = nil) {
        self.context = context
        self.currentlyPlayingType = currentlyPlayingType
        self.isPlaying = isPlaying
        self.item = item
        self.progressMs = progressMs
        self.timestamp = timestamp
    }

    private enum CodingKeys: String, CodingKey {
        case context
        case currentlyPlayingType = "currently_playing_type"
        case isPlaying = "is_playing"
        case item
        case progressMs = "progress_ms"
        case timestamp
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-cursorobject)
public struct CursorObject: Codable {
    /// The cursor to use as key to find the next page of items.
    public var after: String?

    public init(after: String? = nil) {
        self.after = after
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-cursorpagingobject)
public struct CursorPagingObject: Codable {
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-cursorobject)
    public var cursors: CursorObject?
    /// A link to the Web API endpoint returning the full result of the request.
    public var href: String?
    /// The requested data.
    public var items: [Item]?
    /// The maximum number of items in the response (as set in the query or by default).
    public var limit: Int?
    /// URL to the next page of items. ( `null` if none)
    public var next: String?
    /// The total number of items available to return.
    public var total: Int?

    public struct Item: Codable {
        public init() {}
    }

    public init(cursors: CursorObject? = nil, href: String? = nil, items: [Item]? = nil, limit: Int? = nil, next: String? = nil, total: Int? = nil) {
        self.cursors = cursors
        self.href = href
        self.items = items
        self.limit = limit
        self.next = next
        self.total = total
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-deviceobject)
public struct DeviceObject: Codable {
    /// The device ID.
    public var id: String?
    /// If this device is the currently active device.
    public var isActive: Bool?
    /// If this device is currently in a private session.
    public var isPrivateSession: Bool?
    /// Whether controlling this device is restricted. At present if this is "true" then no Web API commands will be accepted by this device.
    public var isRestricted: Bool?
    /// The name of the device.
    public var name: String?
    /// Device type, such as "computer", "smartphone" or "speaker".
    public var type: String?
    /// The current volume in percent.
    public var volumePercent: Int?

    public init(id: String? = nil, isActive: Bool? = nil, isPrivateSession: Bool? = nil, isRestricted: Bool? = nil, name: String? = nil, type: String? = nil, volumePercent: Int? = nil) {
        self.id = id
        self.isActive = isActive
        self.isPrivateSession = isPrivateSession
        self.isRestricted = isRestricted
        self.name = name
        self.type = type
        self.volumePercent = volumePercent
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case isActive = "is_active"
        case isPrivateSession = "is_private_session"
        case isRestricted = "is_restricted"
        case name
        case type
        case volumePercent = "volume_percent"
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-devicesobject)
public struct DevicesObject: Codable {
    /// A list of 0..n Device objects
    public var devices: [DeviceObject]?

    public init(devices: [DeviceObject]? = nil) {
        self.devices = devices
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-disallowsobject)
public struct DisallowsObject: Codable {
    /// Interrupting playback. Optional field.
    public var isInterruptingPlayback: Bool?
    /// Pausing. Optional field.
    public var isPausing: Bool?
    /// Resuming. Optional field.
    public var isResuming: Bool?
    /// Seeking playback location. Optional field.
    public var isSeeking: Bool?
    /// Skipping to the next context. Optional field.
    public var isSkippingNext: Bool?
    /// Skipping to the previous context. Optional field.
    public var isSkippingPrev: Bool?
    /// Toggling repeat context flag. Optional field.
    public var isTogglingRepeatContext: Bool?
    /// Toggling repeat track flag. Optional field.
    public var isTogglingRepeatTrack: Bool?
    /// Toggling shuffle flag. Optional field.
    public var isTogglingShuffle: Bool?
    /// Transfering playback between devices. Optional field.
    public var isTransferringPlayback: Bool?

    public init(isInterruptingPlayback: Bool? = nil, isPausing: Bool? = nil, isResuming: Bool? = nil, isSeeking: Bool? = nil, isSkippingNext: Bool? = nil, isSkippingPrev: Bool? = nil, isTogglingRepeatContext: Bool? = nil, isTogglingRepeatTrack: Bool? = nil, isTogglingShuffle: Bool? = nil, isTransferringPlayback: Bool? = nil) {
        self.isInterruptingPlayback = isInterruptingPlayback
        self.isPausing = isPausing
        self.isResuming = isResuming
        self.isSeeking = isSeeking
        self.isSkippingNext = isSkippingNext
        self.isSkippingPrev = isSkippingPrev
        self.isTogglingRepeatContext = isTogglingRepeatContext
        self.isTogglingRepeatTrack = isTogglingRepeatTrack
        self.isTogglingShuffle = isTogglingShuffle
        self.isTransferringPlayback = isTransferringPlayback
    }

    private enum CodingKeys: String, CodingKey {
        case isInterruptingPlayback = "interrupting_playback"
        case isPausing = "pausing"
        case isResuming = "resuming"
        case isSeeking = "seeking"
        case isSkippingNext = "skipping_next"
        case isSkippingPrev = "skipping_prev"
        case isTogglingRepeatContext = "toggling_repeat_context"
        case isTogglingRepeatTrack = "toggling_repeat_track"
        case isTogglingShuffle = "toggling_shuffle"
        case isTransferringPlayback = "transferring_playback"
    }
}

public struct EpisodeObject: Codable {
    /// A URL to a 30 second preview (MP3 format) of the episode. `null` if not available.
    public var audioPreviewURL: String?
    /// A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
    public var description: String?
    /// The episode length in milliseconds.
    public var durationMs: Int?
    /// Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown).
    public var isExplicit: Bool?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-externalurlobject)
    public var externalURLs: ExternalURLObject?
    /// A link to the Web API endpoint providing full details of the episode.
    public var href: String?
    /// A description of the episode. This field may contain HTML tags.
    public var htmlDescription: String?
    /// The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the episode.
    public var id: String?
    /// The cover art for the episode in various sizes, widest first.
    public var images: [ImageObject]?
    /// True if the episode is hosted outside of Spotify's CDN.
    public var isExternallyHosted: Bool?
    /// True if the episode is playable in the given market. Otherwise false.
    public var isPlayable: Bool?
    /// **Note: This field is deprecated and might be removed in the future. Please use the `languages` field instead.** The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.
    public var language: String?
    /// A list of the languages used in the episode, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.
    public var languages: [String]?
    /// The name of the episode.
    public var name: String?
    /// The date the episode was first released, for example `"1981-12-15"`. Depending on the precision, it might be shown as `"1981"` or `"1981-12"`.
    public var releaseDate: String?
    /// The precision with which `release_date` value is known.
    public var releaseDatePrecision: String?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-episoderestrictionobject)
    public var restrictions: EpisodeRestrictionObject?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-resumepointobject)
    public var resumePoint: ResumePointObject?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-showbase)
    public var show: SimplifiedShowObject?
    /// The object type.
    public var type: String?
    /// The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the episode.
    public var uri: String?

    public init(audioPreviewURL: String? = nil, description: String? = nil, durationMs: Int? = nil, isExplicit: Bool? = nil, externalURLs: ExternalURLObject? = nil, href: String? = nil, htmlDescription: String? = nil, id: String? = nil, images: [ImageObject]? = nil, isExternallyHosted: Bool? = nil, isPlayable: Bool? = nil, language: String? = nil, languages: [String]? = nil, name: String? = nil, releaseDate: String? = nil, releaseDatePrecision: String? = nil, restrictions: EpisodeRestrictionObject? = nil, resumePoint: ResumePointObject? = nil, show: SimplifiedShowObject? = nil, type: String? = nil, uri: String? = nil) {
        self.audioPreviewURL = audioPreviewURL
        self.description = description
        self.durationMs = durationMs
        self.isExplicit = isExplicit
        self.externalURLs = externalURLs
        self.href = href
        self.htmlDescription = htmlDescription
        self.id = id
        self.images = images
        self.isExternallyHosted = isExternallyHosted
        self.isPlayable = isPlayable
        self.language = language
        self.languages = languages
        self.name = name
        self.releaseDate = releaseDate
        self.releaseDatePrecision = releaseDatePrecision
        self.restrictions = restrictions
        self.resumePoint = resumePoint
        self.show = show
        self.type = type
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case audioPreviewURL = "audio_preview_url"
        case description
        case durationMs = "duration_ms"
        case isExplicit = "explicit"
        case externalURLs = "external_urls"
        case href
        case htmlDescription = "html_description"
        case id
        case images
        case isExternallyHosted = "is_externally_hosted"
        case isPlayable = "is_playable"
        case language
        case languages
        case name
        case releaseDate = "release_date"
        case releaseDatePrecision = "release_date_precision"
        case restrictions
        case resumePoint = "resume_point"
        case show
        case type
        case uri
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-episoderestrictionobject)
public struct EpisodeRestrictionObject: Codable {
    /// The reason for the restriction. Supported values:  
    /// 
    /// - `market` - The content item is not available in the given market.  
    /// - `product` - The content item is not available for the user's subscription type.  
    /// - `explicit` - The content item is explicit and the user's account is set to not play explicit content.  
    ///   Additional reasons may be added in the future. **Note**: If you use this field, make sure that your application safely handles unknown values.
    public var reason: String?

    public init(reason: String? = nil) {
        self.reason = reason
    }
}

public struct EpisodesObject: Codable {
    public var episodes: [EpisodeObject]?

    public init(episodes: [EpisodeObject]? = nil) {
        self.episodes = episodes
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-errorobject)
public struct ErrorObject: Codable {
    /// A short description of the cause of the error.
    public var message: String?
    /// The HTTP status code (also returned in the response header; see [Response Status Codes](https://developer.spotify.com/documentation/web-api/#response-status-codes) for more information).
    public var status: Int?

    public init(message: String? = nil, status: Int? = nil) {
        self.message = message
        self.status = status
    }
}

public struct ErrorResponseObject: Codable {
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-errorobject)
    public var error: ErrorObject?

    public init(error: ErrorObject? = nil) {
        self.error = error
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-explicitcontentsettingsobject)
public struct ExplicitContentSettingsObject: Codable {
    /// When `true`, indicates that explicit content should not be played.
    public var isFilterEnabled: Bool?
    /// When `true`, indicates that the explicit content setting is locked and can't be changed by the user.
    public var isFilterLocked: Bool?

    public init(isFilterEnabled: Bool? = nil, isFilterLocked: Bool? = nil) {
        self.isFilterEnabled = isFilterEnabled
        self.isFilterLocked = isFilterLocked
    }

    private enum CodingKeys: String, CodingKey {
        case isFilterEnabled = "filter_enabled"
        case isFilterLocked = "filter_locked"
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-externalidobject)
public struct ExternalIDObject: Codable {
    /// [International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29)
    public var ean: String?
    /// [International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code)
    public var isrc: String?
    /// [Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code)
    public var upc: String?

    public init(ean: String? = nil, isrc: String? = nil, upc: String? = nil) {
        self.ean = ean
        self.isrc = isrc
        self.upc = upc
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-externalurlobject)
public struct ExternalURLObject: Codable {
    /// The [Spotify URL](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the object.
    public var spotify: String?

    public init(spotify: String? = nil) {
        self.spotify = spotify
    }
}

public struct FeaturedPlaylistObject: Codable {
    public var message: String?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public var playlists: Playlists?

    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public struct Playlists: Codable {
        /// A link to the Web API endpoint returning the full result of the request
        public var href: String?
        /// The requested content
        public var items: [SimplifiedPlaylistObject]?
        /// The maximum number of items in the response (as set in the query or by default).
        public var limit: Int?
        /// URL to the next page of items. ( `null` if none)
        public var next: String?
        /// The offset of the items returned (as set in the query or by default)
        public var offset: Int?
        /// URL to the previous page of items. ( `null` if none)
        public var previous: String?
        /// The total number of items available to return.
        public var total: Int?

        public init(href: String? = nil, items: [SimplifiedPlaylistObject]? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, previous: String? = nil, total: Int? = nil) {
            self.href = href
            self.items = items
            self.limit = limit
            self.next = next
            self.offset = offset
            self.previous = previous
            self.total = total
        }
    }

    public init(message: String? = nil, playlists: Playlists? = nil) {
        self.message = message
        self.playlists = playlists
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-followersobject)
public struct FollowersObject: Codable {
    /// This will always be set to null, as the Web API does not support it at the moment.
    public var href: String?
    /// The total number of followers.
    public var total: Int?

    public init(href: String? = nil, total: Int? = nil) {
        self.href = href
        self.total = total
    }
}

public struct FollowingArtistsObject: Codable {
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-cursorpagingobject)
    public var artists: Artists?

    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-cursorpagingobject)
    public struct Artists: Codable {
        /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-cursorobject)
        public var cursors: CursorObject?
        /// A link to the Web API endpoint returning the full result of the request.
        public var href: String?
        /// The requested data.
        public var items: [ArtistObject]?
        /// The maximum number of items in the response (as set in the query or by default).
        public var limit: Int?
        /// URL to the next page of items. ( `null` if none)
        public var next: String?
        /// The total number of items available to return.
        public var total: Int?

        public init(cursors: CursorObject? = nil, href: String? = nil, items: [ArtistObject]? = nil, limit: Int? = nil, next: String? = nil, total: Int? = nil) {
            self.cursors = cursors
            self.href = href
            self.items = items
            self.limit = limit
            self.next = next
            self.total = total
        }
    }

    public init(artists: Artists? = nil) {
        self.artists = artists
    }
}

public struct GenreSeedsObject: Codable {
    public var genres: [String]?

    public init(genres: [String]? = nil) {
        self.genres = genres
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-imageobject)
public struct ImageObject: Codable {
    /// The image height in pixels.
    public var height: Int?
    /// The source URL of the image.
    public var url: String?
    /// The image width in pixels.
    public var width: Int?

    public init(height: Int? = nil, url: String? = nil, width: Int? = nil) {
        self.height = height
        self.url = url
        self.width = width
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-linkedtrackobject)
public struct LinkedTrackObject: Codable {
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-externalurlobject)
    public var externalURLs: ExternalURLObject?
    /// A link to the Web API endpoint providing full details of the track.
    public var href: String?
    /// The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track.
    public var id: String?
    /// The object type: "track".
    public var type: String?
    /// The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track.
    public var uri: String?

    public init(externalURLs: ExternalURLObject? = nil, href: String? = nil, id: String? = nil, type: String? = nil, uri: String? = nil) {
        self.externalURLs = externalURLs
        self.href = href
        self.id = id
        self.type = type
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case externalURLs = "external_urls"
        case href
        case id
        case type
        case uri
    }
}

public struct MarketsObject: Codable {
    public var markets: [String]?

    public init(markets: [String]? = nil) {
        self.markets = markets
    }
}

public struct NewReleasesObject: Codable {
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public var albums: Albums?

    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public struct Albums: Codable {
        /// A link to the Web API endpoint returning the full result of the request
        public var href: String?
        /// The requested content
        public var items: [SimplifiedAlbumObject]?
        /// The maximum number of items in the response (as set in the query or by default).
        public var limit: Int?
        /// URL to the next page of items. ( `null` if none)
        public var next: String?
        /// The offset of the items returned (as set in the query or by default)
        public var offset: Int?
        /// URL to the previous page of items. ( `null` if none)
        public var previous: String?
        /// The total number of items available to return.
        public var total: Int?

        public init(href: String? = nil, items: [SimplifiedAlbumObject]? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, previous: String? = nil, total: Int? = nil) {
            self.href = href
            self.items = items
            self.limit = limit
            self.next = next
            self.offset = offset
            self.previous = previous
            self.total = total
        }
    }

    public init(albums: Albums? = nil) {
        self.albums = albums
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
public struct PagingObject: Codable {
    /// A link to the Web API endpoint returning the full result of the request
    public var href: String?
    /// The requested content
    public var items: [Item]?
    /// The maximum number of items in the response (as set in the query or by default).
    public var limit: Int?
    /// URL to the next page of items. ( `null` if none)
    public var next: String?
    /// The offset of the items returned (as set in the query or by default)
    public var offset: Int?
    /// URL to the previous page of items. ( `null` if none)
    public var previous: String?
    /// The total number of items available to return.
    public var total: Int?

    public struct Item: Codable {
        public init() {}
    }

    public init(href: String? = nil, items: [Item]? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, previous: String? = nil, total: Int? = nil) {
        self.href = href
        self.items = items
        self.limit = limit
        self.next = next
        self.offset = offset
        self.previous = previous
        self.total = total
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-playhistoryobject)
public struct PlayHistoryObject: Codable {
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-contextobject)
    public var context: ContextObject?
    /// The date and time the track was played.
    public var playedAt: Date?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject)
    public var track: SimplifiedTrackObject?

    public init(context: ContextObject? = nil, playedAt: Date? = nil, track: SimplifiedTrackObject? = nil) {
        self.context = context
        self.playedAt = playedAt
        self.track = track
    }

    private enum CodingKeys: String, CodingKey {
        case context
        case playedAt = "played_at"
        case track
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-playererrorobject)
public struct PlayerErrorObject: Codable {
    /// A short description of the cause of the error.
    public var message: String?
    /// - `NO_PREV_TRACK` - The command requires a previous track, but there is none in the context.
    /// - `NO_NEXT_TRACK` - The command requires a next track, but there is none in the context.
    /// - `NO_SPECIFIC_TRACK` - The requested track does not exist.
    /// - `ALREADY_PAUSED` - The command requires playback to not be paused.
    /// - `NOT_PAUSED` - The command requires playback to be paused.
    /// - `NOT_PLAYING_LOCALLY` - The command requires playback on the local device.
    /// - `NOT_PLAYING_TRACK` - The command requires that a track is currently playing.
    /// - `NOT_PLAYING_CONTEXT` - The command requires that a context is currently playing.
    /// - `ENDLESS_CONTEXT` - The shuffle command cannot be applied on an endless context.
    /// - `CONTEXT_DISALLOW` - The command could not be performed on the context.
    /// - `ALREADY_PLAYING` - The track should not be restarted if the same track and context is already playing, and there is a resume point.
    /// - `RATE_LIMITED` - The user is rate limited due to too frequent track play, also known as cat-on-the-keyboard spamming.
    /// - `REMOTE_CONTROL_DISALLOW` - The context cannot be remote-controlled.
    /// - `DEVICE_NOT_CONTROLLABLE` - Not possible to remote control the device.
    /// - `VOLUME_CONTROL_DISALLOW` - Not possible to remote control the device's volume.
    /// - `NO_ACTIVE_DEVICE` - Requires an active device and the user has none.
    /// - `PREMIUM_REQUIRED` - The request is prohibited for non-premium users.
    /// - `UNKNOWN` - Certain actions are restricted because of unknown reasons.
    public var reason: String?
    /// The HTTP status code. Either `404 NOT FOUND` or `403 FORBIDDEN`. Also returned in the response header.
    public var status: Int?

    public init(message: String? = nil, reason: String? = nil, status: Int? = nil) {
        self.message = message
        self.reason = reason
        self.status = status
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-playlistobject)
public struct PlaylistObject: Codable {
    /// `true` if the owner allows other users to modify the playlist.
    public var isCollaborative: Bool?
    /// The playlist description. *Only returned for modified, verified playlists, otherwise* `null`.
    public var description: String?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-externalurlobject)
    public var externalURLs: ExternalURLObject?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-followersobject)
    public var followers: FollowersObject?
    /// A link to the Web API endpoint providing full details of the playlist.
    public var href: String?
    /// The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
    public var id: String?
    /// Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/). ***Note** : If returned, the source URL for the image (`url`) is temporary and will expire in less than a day.*
    public var images: [ImageObject]?
    /// The name of the playlist.
    public var name: String?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-publicuserobject)
    public var owner: PublicUserObject?
    /// The playlist's public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/)
    public var isPublic: Bool?
    /// The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version
    public var snapshotID: String?
    /// The tracks of the playlist.
    ///
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public var tracks: Tracks?
    /// The object type: "playlist"
    public var type: String?
    /// The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
    public var uri: String?

    /// The tracks of the playlist.
    ///
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public struct Tracks: Codable {
        /// A link to the Web API endpoint returning the full result of the request
        public var href: String?
        /// The requested content
        public var items: [PlaylistTrackObject]?
        /// The maximum number of items in the response (as set in the query or by default).
        public var limit: Int?
        /// URL to the next page of items. ( `null` if none)
        public var next: String?
        /// The offset of the items returned (as set in the query or by default)
        public var offset: Int?
        /// URL to the previous page of items. ( `null` if none)
        public var previous: String?
        /// The total number of items available to return.
        public var total: Int?

        public init(href: String? = nil, items: [PlaylistTrackObject]? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, previous: String? = nil, total: Int? = nil) {
            self.href = href
            self.items = items
            self.limit = limit
            self.next = next
            self.offset = offset
            self.previous = previous
            self.total = total
        }
    }

    public init(isCollaborative: Bool? = nil, description: String? = nil, externalURLs: ExternalURLObject? = nil, followers: FollowersObject? = nil, href: String? = nil, id: String? = nil, images: [ImageObject]? = nil, name: String? = nil, owner: PublicUserObject? = nil, isPublic: Bool? = nil, snapshotID: String? = nil, tracks: Tracks? = nil, type: String? = nil, uri: String? = nil) {
        self.isCollaborative = isCollaborative
        self.description = description
        self.externalURLs = externalURLs
        self.followers = followers
        self.href = href
        self.id = id
        self.images = images
        self.name = name
        self.owner = owner
        self.isPublic = isPublic
        self.snapshotID = snapshotID
        self.tracks = tracks
        self.type = type
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case isCollaborative = "collaborative"
        case description
        case externalURLs = "external_urls"
        case followers
        case href
        case id
        case images
        case name
        case owner
        case isPublic = "public"
        case snapshotID = "snapshot_id"
        case tracks
        case type
        case uri
    }
}

public struct PlaylistPagingObject: Codable {
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public var playlists: Playlists?

    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public struct Playlists: Codable {
        /// A link to the Web API endpoint returning the full result of the request
        public var href: String?
        /// The requested content
        public var items: [SimplifiedPlaylistObject]?
        /// The maximum number of items in the response (as set in the query or by default).
        public var limit: Int?
        /// URL to the next page of items. ( `null` if none)
        public var next: String?
        /// The offset of the items returned (as set in the query or by default)
        public var offset: Int?
        /// URL to the previous page of items. ( `null` if none)
        public var previous: String?
        /// The total number of items available to return.
        public var total: Int?

        public init(href: String? = nil, items: [SimplifiedPlaylistObject]? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, previous: String? = nil, total: Int? = nil) {
            self.href = href
            self.items = items
            self.limit = limit
            self.next = next
            self.offset = offset
            self.previous = previous
            self.total = total
        }
    }

    public init(playlists: Playlists? = nil) {
        self.playlists = playlists
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-playlisttrackobject)
public struct PlaylistTrackObject: Codable {
    /// The date and time the track or episode was added. ***Note** : some very old playlists may return `null` in this field.*
    public var addedAt: Date?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-publicuserobject)
    public var addedBy: PublicUserObject?
    /// Whether this track or episode is a [local file](https://developer.spotify.com/web-api/local-files-spotify-playlists/) or not.
    public var isLocal: Bool?
    /// Information about the track or episode.
    public var track: Track?

    /// Information about the track or episode.
    public enum Track: Codable {
        case trackObject(TrackObject)
        case episodeObject(EpisodeObject)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(TrackObject.self) {
                self = .trackObject(value)
            } else if let value = try? container.decode(EpisodeObject.self) {
                self = .episodeObject(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .trackObject(let value): try container.encode(value)
            case .episodeObject(let value): try container.encode(value)
            }
        }
    }

    public init(addedAt: Date? = nil, addedBy: PublicUserObject? = nil, isLocal: Bool? = nil, track: Track? = nil) {
        self.addedAt = addedAt
        self.addedBy = addedBy
        self.isLocal = isLocal
        self.track = track
    }

    private enum CodingKeys: String, CodingKey {
        case addedAt = "added_at"
        case addedBy = "added_by"
        case isLocal = "is_local"
        case track
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-playlisttracksrefobject)
public struct PlaylistTracksRefObject: Codable {
    /// A link to the Web API endpoint where full details of the playlist's tracks can be retrieved.
    public var href: String?
    /// Number of tracks in the playlist.
    public var total: Int?

    public init(href: String? = nil, total: Int? = nil) {
        self.href = href
        self.total = total
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-privateuserobject)
public struct PrivateUserObject: Codable {
    /// The country of the user, as set in the user's account profile. An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). *This field is only available when the current user has granted access to the [user-read-private](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) scope.*
    public var country: String?
    /// The name displayed on the user's profile. `null` if not available.
    public var displayName: String?
    /// The user's email address, as entered by the user when creating their account. ***Important!** This email address is unverified; there is no proof that it actually belongs to the user.* *This field is only available when the current user has granted access to the [user-read-email](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) scope.*
    public var email: String?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-explicitcontentsettingsobject)
    public var explicitContent: ExplicitContentSettingsObject?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-externalurlobject)
    public var externalURLs: ExternalURLObject?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-followersobject)
    public var followers: FollowersObject?
    /// A link to the Web API endpoint for this user.
    public var href: String?
    /// The [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the user.
    public var id: String?
    /// The user's profile image.
    public var images: [ImageObject]?
    /// The user's Spotify subscription level: "premium", "free", etc. (The subscription level "open" can be considered the same as "free".) *This field is only available when the current user has granted access to the [user-read-private](https://developer.spotify.com/documentation/general/guides/authorization-guide/#list-of-scopes) scope.*
    public var product: String?
    /// The object type: "user"
    public var type: String?
    /// The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the user.
    public var uri: String?

    public init(country: String? = nil, displayName: String? = nil, email: String? = nil, explicitContent: ExplicitContentSettingsObject? = nil, externalURLs: ExternalURLObject? = nil, followers: FollowersObject? = nil, href: String? = nil, id: String? = nil, images: [ImageObject]? = nil, product: String? = nil, type: String? = nil, uri: String? = nil) {
        self.country = country
        self.displayName = displayName
        self.email = email
        self.explicitContent = explicitContent
        self.externalURLs = externalURLs
        self.followers = followers
        self.href = href
        self.id = id
        self.images = images
        self.product = product
        self.type = type
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case country
        case displayName = "display_name"
        case email
        case explicitContent = "explicit_content"
        case externalURLs = "external_urls"
        case followers
        case href
        case id
        case images
        case product
        case type
        case uri
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-publicuserobject)
public struct PublicUserObject: Codable {
    /// The name displayed on the user's profile. `null` if not available.
    public var displayName: String?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-externalurlobject)
    public var externalURLs: ExternalURLObject?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-followersobject)
    public var followers: FollowersObject?
    /// A link to the Web API endpoint for this user.
    public var href: String?
    /// The [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for this user.
    public var id: String?
    /// The user's profile image.
    public var images: [ImageObject]?
    /// The object type.
    public var type: String?
    /// The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for this user.
    public var uri: String?

    public init(displayName: String? = nil, externalURLs: ExternalURLObject? = nil, followers: FollowersObject? = nil, href: String? = nil, id: String? = nil, images: [ImageObject]? = nil, type: String? = nil, uri: String? = nil) {
        self.displayName = displayName
        self.externalURLs = externalURLs
        self.followers = followers
        self.href = href
        self.id = id
        self.images = images
        self.type = type
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case displayName = "display_name"
        case externalURLs = "external_urls"
        case followers
        case href
        case id
        case images
        case type
        case uri
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-recommendationseedobject)
public struct RecommendationSeedObject: Codable {
    /// The number of tracks available after min_\* and max_\* filters have been applied.
    public var afterFilteringSize: Int?
    /// The number of tracks available after relinking for regional availability.
    public var afterRelinkingSize: Int?
    /// A link to the full track or artist data for this seed. For tracks this will be a link to a [Track Object](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject). For artists a link to [an Artist Object](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject). For genre seeds, this value will be `null`.
    public var href: String?
    /// The id used to select this seed. This will be the same as the string used in the `seed_artists`, `seed_tracks` or `seed_genres` parameter.
    public var id: String?
    /// The number of recommended tracks available for this seed.
    public var initialPoolSize: Int?
    /// The entity type of this seed. One of `artist`, `track` or `genre`.
    public var type: String?

    public init(afterFilteringSize: Int? = nil, afterRelinkingSize: Int? = nil, href: String? = nil, id: String? = nil, initialPoolSize: Int? = nil, type: String? = nil) {
        self.afterFilteringSize = afterFilteringSize
        self.afterRelinkingSize = afterRelinkingSize
        self.href = href
        self.id = id
        self.initialPoolSize = initialPoolSize
        self.type = type
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-recommendationsobject)
public struct RecommendationsObject: Codable {
    /// An array of [recommendation seed objects](https://developer.spotify.com/documentation/web-api/reference/#object-recommendationseedobject).
    public var seeds: [RecommendationSeedObject]?
    /// An array of [track object](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject) ordered according to the parameters supplied.
    public var tracks: [TrackObject]?

    public init(seeds: [RecommendationSeedObject]? = nil, tracks: [TrackObject]? = nil) {
        self.seeds = seeds
        self.tracks = tracks
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-resumepointobject)
public struct ResumePointObject: Codable {
    /// Whether or not the episode has been fully played by the user.
    public var isFullyPlayed: Bool?
    /// The user's most recent position in the episode in milliseconds.
    public var resumePositionMs: Int?

    public init(isFullyPlayed: Bool? = nil, resumePositionMs: Int? = nil) {
        self.isFullyPlayed = isFullyPlayed
        self.resumePositionMs = resumePositionMs
    }

    private enum CodingKeys: String, CodingKey {
        case isFullyPlayed = "fully_played"
        case resumePositionMs = "resume_position_ms"
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-savedalbumobject)
public struct SavedAlbumObject: Codable {
    /// The date and time the album was saved Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.
    public var addedAt: Date?
    public var album: AlbumObject?

    public init(addedAt: Date? = nil, album: AlbumObject? = nil) {
        self.addedAt = addedAt
        self.album = album
    }

    private enum CodingKeys: String, CodingKey {
        case addedAt = "added_at"
        case album
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-savedepisodeobject)
public struct SavedEpisodeObject: Codable {
    /// The date and time the episode was saved. Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.
    public var addedAt: Date?
    public var episode: EpisodeObject?

    public init(addedAt: Date? = nil, episode: EpisodeObject? = nil) {
        self.addedAt = addedAt
        self.episode = episode
    }

    private enum CodingKeys: String, CodingKey {
        case addedAt = "added_at"
        case episode
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-savedshowobject)
public struct SavedShowObject: Codable {
    /// The date and time the show was saved. Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.
    public var addedAt: Date?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-showbase)
    public var show: SimplifiedShowObject?

    public init(addedAt: Date? = nil, show: SimplifiedShowObject? = nil) {
        self.addedAt = addedAt
        self.show = show
    }

    private enum CodingKeys: String, CodingKey {
        case addedAt = "added_at"
        case show
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-savedtrackobject)
public struct SavedTrackObject: Codable {
    /// The date and time the track was saved. Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.
    public var addedAt: Date?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject)
    public var track: TrackObject?

    public init(addedAt: Date? = nil, track: TrackObject? = nil) {
        self.addedAt = addedAt
        self.track = track
    }

    private enum CodingKeys: String, CodingKey {
        case addedAt = "added_at"
        case track
    }
}

public struct SearchResponseObject: Codable {
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public var albums: Albums?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public var artists: Artists?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public var episodes: Episodes?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public var playlists: Playlists?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public var shows: Shows?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public var tracks: Tracks?

    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public struct Albums: Codable {
        /// A link to the Web API endpoint returning the full result of the request
        public var href: String?
        /// The requested content
        public var items: [SimplifiedAlbumObject]?
        /// The maximum number of items in the response (as set in the query or by default).
        public var limit: Int?
        /// URL to the next page of items. ( `null` if none)
        public var next: String?
        /// The offset of the items returned (as set in the query or by default)
        public var offset: Int?
        /// URL to the previous page of items. ( `null` if none)
        public var previous: String?
        /// The total number of items available to return.
        public var total: Int?

        public init(href: String? = nil, items: [SimplifiedAlbumObject]? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, previous: String? = nil, total: Int? = nil) {
            self.href = href
            self.items = items
            self.limit = limit
            self.next = next
            self.offset = offset
            self.previous = previous
            self.total = total
        }
    }

    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public struct Artists: Codable {
        /// A link to the Web API endpoint returning the full result of the request
        public var href: String?
        /// The requested content
        public var items: [ArtistObject]?
        /// The maximum number of items in the response (as set in the query or by default).
        public var limit: Int?
        /// URL to the next page of items. ( `null` if none)
        public var next: String?
        /// The offset of the items returned (as set in the query or by default)
        public var offset: Int?
        /// URL to the previous page of items. ( `null` if none)
        public var previous: String?
        /// The total number of items available to return.
        public var total: Int?

        public init(href: String? = nil, items: [ArtistObject]? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, previous: String? = nil, total: Int? = nil) {
            self.href = href
            self.items = items
            self.limit = limit
            self.next = next
            self.offset = offset
            self.previous = previous
            self.total = total
        }
    }

    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public struct Episodes: Codable {
        /// A link to the Web API endpoint returning the full result of the request
        public var href: String?
        /// The requested content
        public var items: [SimplifiedEpisodeObject]?
        /// The maximum number of items in the response (as set in the query or by default).
        public var limit: Int?
        /// URL to the next page of items. ( `null` if none)
        public var next: String?
        /// The offset of the items returned (as set in the query or by default)
        public var offset: Int?
        /// URL to the previous page of items. ( `null` if none)
        public var previous: String?
        /// The total number of items available to return.
        public var total: Int?

        public init(href: String? = nil, items: [SimplifiedEpisodeObject]? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, previous: String? = nil, total: Int? = nil) {
            self.href = href
            self.items = items
            self.limit = limit
            self.next = next
            self.offset = offset
            self.previous = previous
            self.total = total
        }
    }

    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public struct Playlists: Codable {
        /// A link to the Web API endpoint returning the full result of the request
        public var href: String?
        /// The requested content
        public var items: [SimplifiedPlaylistObject]?
        /// The maximum number of items in the response (as set in the query or by default).
        public var limit: Int?
        /// URL to the next page of items. ( `null` if none)
        public var next: String?
        /// The offset of the items returned (as set in the query or by default)
        public var offset: Int?
        /// URL to the previous page of items. ( `null` if none)
        public var previous: String?
        /// The total number of items available to return.
        public var total: Int?

        public init(href: String? = nil, items: [SimplifiedPlaylistObject]? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, previous: String? = nil, total: Int? = nil) {
            self.href = href
            self.items = items
            self.limit = limit
            self.next = next
            self.offset = offset
            self.previous = previous
            self.total = total
        }
    }

    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public struct Shows: Codable {
        /// A link to the Web API endpoint returning the full result of the request
        public var href: String?
        /// The requested content
        public var items: [SimplifiedShowObject]?
        /// The maximum number of items in the response (as set in the query or by default).
        public var limit: Int?
        /// URL to the next page of items. ( `null` if none)
        public var next: String?
        /// The offset of the items returned (as set in the query or by default)
        public var offset: Int?
        /// URL to the previous page of items. ( `null` if none)
        public var previous: String?
        /// The total number of items available to return.
        public var total: Int?

        public init(href: String? = nil, items: [SimplifiedShowObject]? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, previous: String? = nil, total: Int? = nil) {
            self.href = href
            self.items = items
            self.limit = limit
            self.next = next
            self.offset = offset
            self.previous = previous
            self.total = total
        }
    }

    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public struct Tracks: Codable {
        /// A link to the Web API endpoint returning the full result of the request
        public var href: String?
        /// The requested content
        public var items: [TrackObject]?
        /// The maximum number of items in the response (as set in the query or by default).
        public var limit: Int?
        /// URL to the next page of items. ( `null` if none)
        public var next: String?
        /// The offset of the items returned (as set in the query or by default)
        public var offset: Int?
        /// URL to the previous page of items. ( `null` if none)
        public var previous: String?
        /// The total number of items available to return.
        public var total: Int?

        public init(href: String? = nil, items: [TrackObject]? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, previous: String? = nil, total: Int? = nil) {
            self.href = href
            self.items = items
            self.limit = limit
            self.next = next
            self.offset = offset
            self.previous = previous
            self.total = total
        }
    }

    public init(albums: Albums? = nil, artists: Artists? = nil, episodes: Episodes? = nil, playlists: Playlists? = nil, shows: Shows? = nil, tracks: Tracks? = nil) {
        self.albums = albums
        self.artists = artists
        self.episodes = episodes
        self.playlists = playlists
        self.shows = shows
        self.tracks = tracks
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/#section-object)
public struct SectionObject: Codable {
    /// The confidence, from 0.0 to 1.0, of the reliability of the section’s "designation".
    public var confidence: Double?
    /// The duration (in seconds) of the section.
    public var duration: Double?
    public var key: Int?
    public var keyConfidence: Double?
    /// The overall loudness of the section in decibels (dB). Loudness values are useful for comparing relative loudness of sections within tracks.
    public var loudness: Double?
    public var mode: Int?
    public var modeConfidence: Double?
    /// The starting point (in seconds) of the section.
    public var start: Double?
    /// The overall estimated tempo of the section in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
    public var tempo: Double?
    public var tempoConfidence: Double?
    public var timeSignature: Int?
    public var timeSignatureConfidence: Double?

    public init(confidence: Double? = nil, duration: Double? = nil, key: Int? = nil, keyConfidence: Double? = nil, loudness: Double? = nil, mode: Int? = nil, modeConfidence: Double? = nil, start: Double? = nil, tempo: Double? = nil, tempoConfidence: Double? = nil, timeSignature: Int? = nil, timeSignatureConfidence: Double? = nil) {
        self.confidence = confidence
        self.duration = duration
        self.key = key
        self.keyConfidence = keyConfidence
        self.loudness = loudness
        self.mode = mode
        self.modeConfidence = modeConfidence
        self.start = start
        self.tempo = tempo
        self.tempoConfidence = tempoConfidence
        self.timeSignature = timeSignature
        self.timeSignatureConfidence = timeSignatureConfidence
    }

    private enum CodingKeys: String, CodingKey {
        case confidence
        case duration
        case key
        case keyConfidence = "key_confidence"
        case loudness
        case mode
        case modeConfidence = "mode_confidence"
        case start
        case tempo
        case tempoConfidence = "tempo_confidence"
        case timeSignature = "time_signature"
        case timeSignatureConfidence = "time_signature_confidence"
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/#segment-object)
public struct SegmentObject: Codable {
    public var confidence: Double?
    public var duration: Double?
    public var loudnessEnd: Double?
    public var loudnessMax: Double?
    public var loudnessMaxTime: Double?
    public var loudnessStart: Double?
    public var pitches: [Double]?
    public var start: Double?
    public var timbre: [Double]?

    public init(confidence: Double? = nil, duration: Double? = nil, loudnessEnd: Double? = nil, loudnessMax: Double? = nil, loudnessMaxTime: Double? = nil, loudnessStart: Double? = nil, pitches: [Double]? = nil, start: Double? = nil, timbre: [Double]? = nil) {
        self.confidence = confidence
        self.duration = duration
        self.loudnessEnd = loudnessEnd
        self.loudnessMax = loudnessMax
        self.loudnessMaxTime = loudnessMaxTime
        self.loudnessStart = loudnessStart
        self.pitches = pitches
        self.start = start
        self.timbre = timbre
    }

    private enum CodingKeys: String, CodingKey {
        case confidence
        case duration
        case loudnessEnd = "loudness_end"
        case loudnessMax = "loudness_max"
        case loudnessMaxTime = "loudness_max_time"
        case loudnessStart = "loudness_start"
        case pitches
        case start
        case timbre
    }
}

public struct ShowObject: Codable {
    /// A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
    public var availableMarkets: [String]?
    /// The copyright statements of the show.
    public var copyrights: [CopyrightObject]?
    /// A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
    public var description: String?
    /// A list of the show's episodes.
    ///
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public var episodes: Episodes?
    /// Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown).
    public var isExplicit: Bool?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-externalurlobject)
    public var externalURLs: ExternalURLObject?
    /// A link to the Web API endpoint providing full details of the show.
    public var href: String?
    /// A description of the show. This field may contain HTML tags.
    public var htmlDescription: String?
    /// The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the show.
    public var id: String?
    /// The cover art for the show in various sizes, widest first.
    public var images: [ImageObject]?
    /// True if all of the show's episodes are hosted outside of Spotify's CDN. This field might be `null` in some cases.
    public var isExternallyHosted: Bool?
    /// A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.
    public var languages: [String]?
    /// The media type of the show.
    public var mediaType: String?
    /// The name of the episode.
    public var name: String?
    /// The publisher of the show.
    public var publisher: String?
    /// The object type.
    public var type: String?
    /// The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the show.
    public var uri: String?

    /// A list of the show's episodes.
    ///
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-pagingobject)
    public struct Episodes: Codable {
        /// A link to the Web API endpoint returning the full result of the request
        public var href: String?
        /// The requested content
        public var items: [SimplifiedEpisodeObject]?
        /// The maximum number of items in the response (as set in the query or by default).
        public var limit: Int?
        /// URL to the next page of items. ( `null` if none)
        public var next: String?
        /// The offset of the items returned (as set in the query or by default)
        public var offset: Int?
        /// URL to the previous page of items. ( `null` if none)
        public var previous: String?
        /// The total number of items available to return.
        public var total: Int?

        public init(href: String? = nil, items: [SimplifiedEpisodeObject]? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, previous: String? = nil, total: Int? = nil) {
            self.href = href
            self.items = items
            self.limit = limit
            self.next = next
            self.offset = offset
            self.previous = previous
            self.total = total
        }
    }

    public init(availableMarkets: [String]? = nil, copyrights: [CopyrightObject]? = nil, description: String? = nil, episodes: Episodes? = nil, isExplicit: Bool? = nil, externalURLs: ExternalURLObject? = nil, href: String? = nil, htmlDescription: String? = nil, id: String? = nil, images: [ImageObject]? = nil, isExternallyHosted: Bool? = nil, languages: [String]? = nil, mediaType: String? = nil, name: String? = nil, publisher: String? = nil, type: String? = nil, uri: String? = nil) {
        self.availableMarkets = availableMarkets
        self.copyrights = copyrights
        self.description = description
        self.episodes = episodes
        self.isExplicit = isExplicit
        self.externalURLs = externalURLs
        self.href = href
        self.htmlDescription = htmlDescription
        self.id = id
        self.images = images
        self.isExternallyHosted = isExternallyHosted
        self.languages = languages
        self.mediaType = mediaType
        self.name = name
        self.publisher = publisher
        self.type = type
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case availableMarkets = "available_markets"
        case copyrights
        case description
        case episodes
        case isExplicit = "explicit"
        case externalURLs = "external_urls"
        case href
        case htmlDescription = "html_description"
        case id
        case images
        case isExternallyHosted = "is_externally_hosted"
        case languages
        case mediaType = "media_type"
        case name
        case publisher
        case type
        case uri
    }
}

public struct ShowsObject: Codable {
    public var shows: [SimplifiedShowObject]?

    public init(shows: [SimplifiedShowObject]? = nil) {
        self.shows = shows
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-albumbase)
public struct SimplifiedAlbumObject: Codable {
    /// The field is present when getting an artist's albums. Compare to album_type this field represents relationship between the artist and the album.
    public var albumGroup: String?
    /// The type of the album.
    public var albumType: String?
    /// The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist.
    public var artists: [SimplifiedArtistObject]?
    /// The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). ***NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market.*
    public var availableMarkets: [String]?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-externalurlobject)
    public var externalURLs: ExternalURLObject?
    /// A link to the Web API endpoint providing full details of the album.
    public var href: String?
    /// The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the album.
    public var id: String?
    /// The cover art for the album in various sizes, widest first.
    public var images: [ImageObject]?
    /// The name of the album. In case of an album takedown, the value may be an empty string.
    public var name: String?
    /// The date the album was first released.
    public var releaseDate: String?
    /// The precision with which `release_date` value is known.
    public var releaseDatePrecision: String?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-albumrestrictionobject)
    public var restrictions: AlbumRestrictionObject?
    /// The number of tracks in the album.
    public var totalTracks: Int?
    /// The object type.
    public var type: String?
    /// The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the album.
    public var uri: String?

    public init(albumGroup: String? = nil, albumType: String? = nil, artists: [SimplifiedArtistObject]? = nil, availableMarkets: [String]? = nil, externalURLs: ExternalURLObject? = nil, href: String? = nil, id: String? = nil, images: [ImageObject]? = nil, name: String? = nil, releaseDate: String? = nil, releaseDatePrecision: String? = nil, restrictions: AlbumRestrictionObject? = nil, totalTracks: Int? = nil, type: String? = nil, uri: String? = nil) {
        self.albumGroup = albumGroup
        self.albumType = albumType
        self.artists = artists
        self.availableMarkets = availableMarkets
        self.externalURLs = externalURLs
        self.href = href
        self.id = id
        self.images = images
        self.name = name
        self.releaseDate = releaseDate
        self.releaseDatePrecision = releaseDatePrecision
        self.restrictions = restrictions
        self.totalTracks = totalTracks
        self.type = type
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case albumGroup = "album_group"
        case albumType = "album_type"
        case artists
        case availableMarkets = "available_markets"
        case externalURLs = "external_urls"
        case href
        case id
        case images
        case name
        case releaseDate = "release_date"
        case releaseDatePrecision = "release_date_precision"
        case restrictions
        case totalTracks = "total_tracks"
        case type
        case uri
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedartistobject)
public struct SimplifiedArtistObject: Codable {
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-externalurlobject)
    public var externalURLs: ExternalURLObject?
    /// A link to the Web API endpoint providing full details of the artist.
    public var href: String?
    /// The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the artist.
    public var id: String?
    /// The name of the artist.
    public var name: String?
    /// The object type.
    public var type: String?
    /// The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the artist.
    public var uri: String?

    public init(externalURLs: ExternalURLObject? = nil, href: String? = nil, id: String? = nil, name: String? = nil, type: String? = nil, uri: String? = nil) {
        self.externalURLs = externalURLs
        self.href = href
        self.id = id
        self.name = name
        self.type = type
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case externalURLs = "external_urls"
        case href
        case id
        case name
        case type
        case uri
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-episodebase)
public struct SimplifiedEpisodeObject: Codable {
    /// A URL to a 30 second preview (MP3 format) of the episode. `null` if not available.
    public var audioPreviewURL: String?
    /// A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
    public var description: String?
    /// The episode length in milliseconds.
    public var durationMs: Int?
    /// Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown).
    public var isExplicit: Bool?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-externalurlobject)
    public var externalURLs: ExternalURLObject?
    /// A link to the Web API endpoint providing full details of the episode.
    public var href: String?
    /// A description of the episode. This field may contain HTML tags.
    public var htmlDescription: String?
    /// The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the episode.
    public var id: String?
    /// The cover art for the episode in various sizes, widest first.
    public var images: [ImageObject]?
    /// True if the episode is hosted outside of Spotify's CDN.
    public var isExternallyHosted: Bool?
    /// True if the episode is playable in the given market. Otherwise false.
    public var isPlayable: Bool?
    /// The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. This field is deprecated and might be removed in the future. Please use the `languages` field instead.
    public var language: String?
    /// A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code.
    public var languages: [String]?
    /// The name of the episode.
    public var name: String?
    /// The date the episode was first released, for example `"1981-12-15"`. Depending on the precision, it might be shown as `"1981"` or `"1981-12"`.
    public var releaseDate: String?
    /// The precision with which `release_date` value is known.
    public var releaseDatePrecision: String?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-episoderestrictionobject)
    public var restrictions: EpisodeRestrictionObject?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-resumepointobject)
    public var resumePoint: ResumePointObject?
    /// The object type.
    public var type: String?
    /// The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the episode.
    public var uri: String?

    public init(audioPreviewURL: String? = nil, description: String? = nil, durationMs: Int? = nil, isExplicit: Bool? = nil, externalURLs: ExternalURLObject? = nil, href: String? = nil, htmlDescription: String? = nil, id: String? = nil, images: [ImageObject]? = nil, isExternallyHosted: Bool? = nil, isPlayable: Bool? = nil, language: String? = nil, languages: [String]? = nil, name: String? = nil, releaseDate: String? = nil, releaseDatePrecision: String? = nil, restrictions: EpisodeRestrictionObject? = nil, resumePoint: ResumePointObject? = nil, type: String? = nil, uri: String? = nil) {
        self.audioPreviewURL = audioPreviewURL
        self.description = description
        self.durationMs = durationMs
        self.isExplicit = isExplicit
        self.externalURLs = externalURLs
        self.href = href
        self.htmlDescription = htmlDescription
        self.id = id
        self.images = images
        self.isExternallyHosted = isExternallyHosted
        self.isPlayable = isPlayable
        self.language = language
        self.languages = languages
        self.name = name
        self.releaseDate = releaseDate
        self.releaseDatePrecision = releaseDatePrecision
        self.restrictions = restrictions
        self.resumePoint = resumePoint
        self.type = type
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case audioPreviewURL = "audio_preview_url"
        case description
        case durationMs = "duration_ms"
        case isExplicit = "explicit"
        case externalURLs = "external_urls"
        case href
        case htmlDescription = "html_description"
        case id
        case images
        case isExternallyHosted = "is_externally_hosted"
        case isPlayable = "is_playable"
        case language
        case languages
        case name
        case releaseDate = "release_date"
        case releaseDatePrecision = "release_date_precision"
        case restrictions
        case resumePoint = "resume_point"
        case type
        case uri
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedplaylistobject)
public struct SimplifiedPlaylistObject: Codable {
    /// `true` if the owner allows other users to modify the playlist.
    public var isCollaborative: Bool?
    /// The playlist description. *Only returned for modified, verified playlists, otherwise* `null`.
    public var description: String?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-externalurlobject)
    public var externalURLs: ExternalURLObject?
    /// A link to the Web API endpoint providing full details of the playlist.
    public var href: String?
    /// The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
    public var id: String?
    /// Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/). ***Note** : If returned, the source URL for the image (`url`) is temporary and will expire in less than a day.*
    public var images: [ImageObject]?
    /// The name of the playlist.
    public var name: String?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-publicuserobject)
    public var owner: PublicUserObject?
    /// The playlist's public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/)
    public var isPublic: Bool?
    /// The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version
    public var snapshotID: String?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-playlisttracksrefobject)
    public var tracks: PlaylistTracksRefObject?
    /// The object type: "playlist"
    public var type: String?
    /// The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist.
    public var uri: String?

    public init(isCollaborative: Bool? = nil, description: String? = nil, externalURLs: ExternalURLObject? = nil, href: String? = nil, id: String? = nil, images: [ImageObject]? = nil, name: String? = nil, owner: PublicUserObject? = nil, isPublic: Bool? = nil, snapshotID: String? = nil, tracks: PlaylistTracksRefObject? = nil, type: String? = nil, uri: String? = nil) {
        self.isCollaborative = isCollaborative
        self.description = description
        self.externalURLs = externalURLs
        self.href = href
        self.id = id
        self.images = images
        self.name = name
        self.owner = owner
        self.isPublic = isPublic
        self.snapshotID = snapshotID
        self.tracks = tracks
        self.type = type
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case isCollaborative = "collaborative"
        case description
        case externalURLs = "external_urls"
        case href
        case id
        case images
        case name
        case owner
        case isPublic = "public"
        case snapshotID = "snapshot_id"
        case tracks
        case type
        case uri
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-showbase)
public struct SimplifiedShowObject: Codable {
    /// A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
    public var availableMarkets: [String]?
    /// The copyright statements of the show.
    public var copyrights: [CopyrightObject]?
    /// A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
    public var description: String?
    /// Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown).
    public var isExplicit: Bool?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-externalurlobject)
    public var externalURLs: ExternalURLObject?
    /// A link to the Web API endpoint providing full details of the show.
    public var href: String?
    /// A description of the show. This field may contain HTML tags.
    public var htmlDescription: String?
    /// The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the show.
    public var id: String?
    /// The cover art for the show in various sizes, widest first.
    public var images: [ImageObject]?
    /// True if all of the show's episodes are hosted outside of Spotify's CDN. This field might be `null` in some cases.
    public var isExternallyHosted: Bool?
    /// A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.
    public var languages: [String]?
    /// The media type of the show.
    public var mediaType: String?
    /// The name of the episode.
    public var name: String?
    /// The publisher of the show.
    public var publisher: String?
    /// The object type.
    public var type: String?
    /// The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the show.
    public var uri: String?

    public init(availableMarkets: [String]? = nil, copyrights: [CopyrightObject]? = nil, description: String? = nil, isExplicit: Bool? = nil, externalURLs: ExternalURLObject? = nil, href: String? = nil, htmlDescription: String? = nil, id: String? = nil, images: [ImageObject]? = nil, isExternallyHosted: Bool? = nil, languages: [String]? = nil, mediaType: String? = nil, name: String? = nil, publisher: String? = nil, type: String? = nil, uri: String? = nil) {
        self.availableMarkets = availableMarkets
        self.copyrights = copyrights
        self.description = description
        self.isExplicit = isExplicit
        self.externalURLs = externalURLs
        self.href = href
        self.htmlDescription = htmlDescription
        self.id = id
        self.images = images
        self.isExternallyHosted = isExternallyHosted
        self.languages = languages
        self.mediaType = mediaType
        self.name = name
        self.publisher = publisher
        self.type = type
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case availableMarkets = "available_markets"
        case copyrights
        case description
        case isExplicit = "explicit"
        case externalURLs = "external_urls"
        case href
        case htmlDescription = "html_description"
        case id
        case images
        case isExternallyHosted = "is_externally_hosted"
        case languages
        case mediaType = "media_type"
        case name
        case publisher
        case type
        case uri
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject)
public struct SimplifiedTrackObject: Codable {
    /// The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.
    public var artists: [SimplifiedArtistObject]?
    /// A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
    public var availableMarkets: [String]?
    /// The disc number (usually `1` unless the album consists of more than one disc).
    public var discNumber: Int?
    /// The track length in milliseconds.
    public var durationMs: Int?
    /// Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).
    public var isExplicit: Bool?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-externalurlobject)
    public var externalURLs: ExternalURLObject?
    /// A link to the Web API endpoint providing full details of the track.
    public var href: String?
    /// The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track.
    public var id: String?
    /// Whether or not the track is from a local file.
    public var isLocal: Bool?
    /// Part of the response when [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/) is applied. If `true`, the track is playable in the given market. Otherwise `false`.
    public var isPlayable: Bool?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-linkedtrackobject)
    public var linkedFrom: LinkedTrackObject?
    /// The name of the track.
    public var name: String?
    /// A URL to a 30 second preview (MP3 format) of the track.
    public var previewURL: String?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-trackrestrictionobject)
    public var restrictions: TrackRestrictionObject?
    /// The number of the track. If an album has several discs, the track number is the number on the specified disc.
    public var trackNumber: Int?
    /// The object type: "track".
    public var type: String?
    /// The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track.
    public var uri: String?

    public init(artists: [SimplifiedArtistObject]? = nil, availableMarkets: [String]? = nil, discNumber: Int? = nil, durationMs: Int? = nil, isExplicit: Bool? = nil, externalURLs: ExternalURLObject? = nil, href: String? = nil, id: String? = nil, isLocal: Bool? = nil, isPlayable: Bool? = nil, linkedFrom: LinkedTrackObject? = nil, name: String? = nil, previewURL: String? = nil, restrictions: TrackRestrictionObject? = nil, trackNumber: Int? = nil, type: String? = nil, uri: String? = nil) {
        self.artists = artists
        self.availableMarkets = availableMarkets
        self.discNumber = discNumber
        self.durationMs = durationMs
        self.isExplicit = isExplicit
        self.externalURLs = externalURLs
        self.href = href
        self.id = id
        self.isLocal = isLocal
        self.isPlayable = isPlayable
        self.linkedFrom = linkedFrom
        self.name = name
        self.previewURL = previewURL
        self.restrictions = restrictions
        self.trackNumber = trackNumber
        self.type = type
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case artists
        case availableMarkets = "available_markets"
        case discNumber = "disc_number"
        case durationMs = "duration_ms"
        case isExplicit = "explicit"
        case externalURLs = "external_urls"
        case href
        case id
        case isLocal = "is_local"
        case isPlayable = "is_playable"
        case linkedFrom = "linked_from"
        case name
        case previewURL = "preview_url"
        case restrictions
        case trackNumber = "track_number"
        case type
        case uri
    }
}

public struct SnapshotIDObject: Codable {
    /// The snapshot_id can be used to identify your playlist version in future requests.
    public var snapshotID: String?

    public init(snapshotID: String? = nil) {
        self.snapshotID = snapshotID
    }

    private enum CodingKeys: String, CodingKey {
        case snapshotID = "snapshot_id"
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/tracks/get-audio-analysis/#time-interval-object)
public struct TimeIntervalObject: Codable {
    /// The confidence, from 0.0 to 1.0, of the reliability of the interval.
    public var confidence: Double?
    /// The duration (in seconds) of the time interval.
    public var duration: Double?
    /// The starting point (in seconds) of the time interval.
    public var start: Double?

    public init(confidence: Double? = nil, duration: Double? = nil, start: Double? = nil) {
        self.confidence = confidence
        self.duration = duration
        self.start = start
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject)
public struct TrackObject: Codable {
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-albumbase)
    public var album: SimplifiedAlbumObject?
    /// The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.
    public var artists: [ArtistObject]?
    /// A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
    public var availableMarkets: [String]?
    /// The disc number (usually `1` unless the album consists of more than one disc).
    public var discNumber: Int?
    /// The track length in milliseconds.
    public var durationMs: Int?
    /// Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).
    public var isExplicit: Bool?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-externalidobject)
    public var externalIDs: ExternalIDObject?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-externalurlobject)
    public var externalURLs: ExternalURLObject?
    /// A link to the Web API endpoint providing full details of the track.
    public var href: String?
    /// The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track.
    public var id: String?
    /// Whether or not the track is from a local file.
    public var isLocal: Bool?
    /// Part of the response when [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/) is applied. If `true`, the track is playable in the given market. Otherwise `false`.
    public var isPlayable: Bool?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-linkedtrackobject)
    public var linkedFrom: LinkedTrackObject?
    /// The name of the track.
    public var name: String?
    /// The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.  
    /// The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.  
    /// Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. ***Note**: the popularity value may lag actual popularity by a few days: the value is not updated in real time.*
    public var popularity: Int?
    /// A link to a 30 second preview (MP3 format) of the track. Can be `null`
    public var previewURL: String?
    /// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-trackrestrictionobject)
    public var restrictions: TrackRestrictionObject?
    /// The number of the track. If an album has several discs, the track number is the number on the specified disc.
    public var trackNumber: Int?
    /// The object type: "track".
    public var type: String?
    /// The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track.
    public var uri: String?

    public init(album: SimplifiedAlbumObject? = nil, artists: [ArtistObject]? = nil, availableMarkets: [String]? = nil, discNumber: Int? = nil, durationMs: Int? = nil, isExplicit: Bool? = nil, externalIDs: ExternalIDObject? = nil, externalURLs: ExternalURLObject? = nil, href: String? = nil, id: String? = nil, isLocal: Bool? = nil, isPlayable: Bool? = nil, linkedFrom: LinkedTrackObject? = nil, name: String? = nil, popularity: Int? = nil, previewURL: String? = nil, restrictions: TrackRestrictionObject? = nil, trackNumber: Int? = nil, type: String? = nil, uri: String? = nil) {
        self.album = album
        self.artists = artists
        self.availableMarkets = availableMarkets
        self.discNumber = discNumber
        self.durationMs = durationMs
        self.isExplicit = isExplicit
        self.externalIDs = externalIDs
        self.externalURLs = externalURLs
        self.href = href
        self.id = id
        self.isLocal = isLocal
        self.isPlayable = isPlayable
        self.linkedFrom = linkedFrom
        self.name = name
        self.popularity = popularity
        self.previewURL = previewURL
        self.restrictions = restrictions
        self.trackNumber = trackNumber
        self.type = type
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case album
        case artists
        case availableMarkets = "available_markets"
        case discNumber = "disc_number"
        case durationMs = "duration_ms"
        case isExplicit = "explicit"
        case externalIDs = "external_ids"
        case externalURLs = "external_urls"
        case href
        case id
        case isLocal = "is_local"
        case isPlayable = "is_playable"
        case linkedFrom = "linked_from"
        case name
        case popularity
        case previewURL = "preview_url"
        case restrictions
        case trackNumber = "track_number"
        case type
        case uri
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-trackrestrictionobject)
public struct TrackRestrictionObject: Codable {
    /// The reason for the restriction. Supported values:  
    /// 
    /// - `market` - The content item is not available in the given market.  
    /// - `product` - The content item is not available for the user's subscription type.  
    /// - `explicit` - The content item is explicit and the user's account is set to not play explicit content.  
    ///   Additional reasons may be added in the future. **Note**: If you use this field, make sure that your application safely handles unknown values.
    public var reason: String?

    public init(reason: String? = nil) {
        self.reason = reason
    }
}

public struct TracksObject: Codable {
    public var tracks: [TrackObject]?

    public init(tracks: [TrackObject]? = nil) {
        self.tracks = tracks
    }
}

/// [Find more info on the official Spotify Web API Reference](https://developer.spotify.com/documentation/web-api/reference/#object-tuneabletrackobject)
public struct TuneableTrackObject: Codable {
    /// A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.
    public var acousticness: Double?
    /// Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.
    public var danceability: Double?
    /// The duration of the track in milliseconds.
    public var durationMs: Int?
    /// Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.
    public var energy: Double?
    /// Predicts whether a track contains no vocals. "Ooh" and "aah" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly "vocal". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.
    public var instrumentalness: Double?
    /// The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on.
    public var key: Int?
    /// Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.
    public var liveness: Double?
    /// The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typical range between -60 and 0 db.
    public var loudness: Double?
    /// Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.
    public var mode: Int?
    /// The popularity of the track. The value will be between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are. ***Note** : When applying track relinking via the `market` parameter, it is expected to find relinked tracks with popularities that do not match `min_*`, `max_*`and `target_*` popularities. These relinked tracks are accurate replacements for unplayable tracks with the expected popularity scores. Original, non-relinked tracks are available via the `linked_from` attribute of the [relinked track response](https://developer.spotify.com/documentation/general/guides/track-relinking-guide).*
    public var popularity: Double?
    /// Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.
    public var speechiness: Double?
    /// The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
    public var tempo: Double?
    /// An estimated overall time signature of a track. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure).
    public var timeSignature: Int?
    /// A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).
    public var valence: Double?

    public init(acousticness: Double? = nil, danceability: Double? = nil, durationMs: Int? = nil, energy: Double? = nil, instrumentalness: Double? = nil, key: Int? = nil, liveness: Double? = nil, loudness: Double? = nil, mode: Int? = nil, popularity: Double? = nil, speechiness: Double? = nil, tempo: Double? = nil, timeSignature: Int? = nil, valence: Double? = nil) {
        self.acousticness = acousticness
        self.danceability = danceability
        self.durationMs = durationMs
        self.energy = energy
        self.instrumentalness = instrumentalness
        self.key = key
        self.liveness = liveness
        self.loudness = loudness
        self.mode = mode
        self.popularity = popularity
        self.speechiness = speechiness
        self.tempo = tempo
        self.timeSignature = timeSignature
        self.valence = valence
    }

    private enum CodingKeys: String, CodingKey {
        case acousticness
        case danceability
        case durationMs = "duration_ms"
        case energy
        case instrumentalness
        case key
        case liveness
        case loudness
        case mode
        case popularity
        case speechiness
        case tempo
        case timeSignature = "time_signature"
        case valence
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
