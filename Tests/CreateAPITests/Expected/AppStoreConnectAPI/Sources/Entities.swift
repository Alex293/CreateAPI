// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import NaiveDate

public struct AgeRatingDeclaration: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var type: `Type`

    public struct Attributes: Codable {
        public var alcoholTobaccoOrDrugUseOrReferences: AlcoholTobaccoOrDrugUseOrReferences?
        public var contests: Contests?
        public var isGambling: Bool?
        /// - warning: Deprecated.
        public var isGamblingAndContests: Bool?
        public var gamblingSimulated: GamblingSimulated?
        public var horrorOrFearThemes: HorrorOrFearThemes?
        public var kidsAgeBand: KidsAgeBand?
        public var matureOrSuggestiveThemes: MatureOrSuggestiveThemes?
        public var medicalOrTreatmentInformation: MedicalOrTreatmentInformation?
        public var profanityOrCrudeHumor: ProfanityOrCrudeHumor?
        public var isSeventeenPlus: Bool?
        public var sexualContentGraphicAndNudity: SexualContentGraphicAndNudity?
        public var sexualContentOrNudity: SexualContentOrNudity?
        public var isUnrestrictedWebAccess: Bool?
        public var violenceCartoonOrFantasy: ViolenceCartoonOrFantasy?
        public var violenceRealistic: ViolenceRealistic?
        public var violenceRealisticProlongedGraphicOrSadistic: ViolenceRealisticProlongedGraphicOrSadistic?

        public enum AlcoholTobaccoOrDrugUseOrReferences: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum Contests: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum GamblingSimulated: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum HorrorOrFearThemes: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum MatureOrSuggestiveThemes: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum MedicalOrTreatmentInformation: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum ProfanityOrCrudeHumor: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum SexualContentGraphicAndNudity: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum SexualContentOrNudity: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum ViolenceCartoonOrFantasy: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum ViolenceRealistic: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum ViolenceRealisticProlongedGraphicOrSadistic: String, Codable, CaseIterable {
            case `none` = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public init(alcoholTobaccoOrDrugUseOrReferences: AlcoholTobaccoOrDrugUseOrReferences? = nil, contests: Contests? = nil, isGambling: Bool? = nil, isGamblingAndContests: Bool? = nil, gamblingSimulated: GamblingSimulated? = nil, horrorOrFearThemes: HorrorOrFearThemes? = nil, kidsAgeBand: KidsAgeBand? = nil, matureOrSuggestiveThemes: MatureOrSuggestiveThemes? = nil, medicalOrTreatmentInformation: MedicalOrTreatmentInformation? = nil, profanityOrCrudeHumor: ProfanityOrCrudeHumor? = nil, isSeventeenPlus: Bool? = nil, sexualContentGraphicAndNudity: SexualContentGraphicAndNudity? = nil, sexualContentOrNudity: SexualContentOrNudity? = nil, isUnrestrictedWebAccess: Bool? = nil, violenceCartoonOrFantasy: ViolenceCartoonOrFantasy? = nil, violenceRealistic: ViolenceRealistic? = nil, violenceRealisticProlongedGraphicOrSadistic: ViolenceRealisticProlongedGraphicOrSadistic? = nil) {
            self.alcoholTobaccoOrDrugUseOrReferences = alcoholTobaccoOrDrugUseOrReferences
            self.contests = contests
            self.isGambling = isGambling
            self.isGamblingAndContests = isGamblingAndContests
            self.gamblingSimulated = gamblingSimulated
            self.horrorOrFearThemes = horrorOrFearThemes
            self.kidsAgeBand = kidsAgeBand
            self.matureOrSuggestiveThemes = matureOrSuggestiveThemes
            self.medicalOrTreatmentInformation = medicalOrTreatmentInformation
            self.profanityOrCrudeHumor = profanityOrCrudeHumor
            self.isSeventeenPlus = isSeventeenPlus
            self.sexualContentGraphicAndNudity = sexualContentGraphicAndNudity
            self.sexualContentOrNudity = sexualContentOrNudity
            self.isUnrestrictedWebAccess = isUnrestrictedWebAccess
            self.violenceCartoonOrFantasy = violenceCartoonOrFantasy
            self.violenceRealistic = violenceRealistic
            self.violenceRealisticProlongedGraphicOrSadistic = violenceRealisticProlongedGraphicOrSadistic
        }

        private enum CodingKeys: String, CodingKey {
            case alcoholTobaccoOrDrugUseOrReferences
            case contests
            case isGambling = "gambling"
            case isGamblingAndContests = "gamblingAndContests"
            case gamblingSimulated
            case horrorOrFearThemes
            case kidsAgeBand
            case matureOrSuggestiveThemes
            case medicalOrTreatmentInformation
            case profanityOrCrudeHumor
            case isSeventeenPlus = "seventeenPlus"
            case sexualContentGraphicAndNudity
            case sexualContentOrNudity
            case isUnrestrictedWebAccess = "unrestrictedWebAccess"
            case violenceCartoonOrFantasy
            case violenceRealistic
            case violenceRealisticProlongedGraphicOrSadistic
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case ageRatingDeclarations
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.type = type
    }
}

public struct AgeRatingDeclarationResponse: Codable {
    /// AgeRatingDeclaration
    public var data: AgeRatingDeclaration
    public var links: DocumentLinks

    public init(data: AgeRatingDeclaration, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct AgeRatingDeclarationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var alcoholTobaccoOrDrugUseOrReferences: AlcoholTobaccoOrDrugUseOrReferences?
            public var contests: Contests?
            public var isGambling: Bool?
            /// - warning: Deprecated.
            public var isGamblingAndContests: Bool?
            public var gamblingSimulated: GamblingSimulated?
            public var horrorOrFearThemes: HorrorOrFearThemes?
            public var kidsAgeBand: KidsAgeBand?
            public var matureOrSuggestiveThemes: MatureOrSuggestiveThemes?
            public var medicalOrTreatmentInformation: MedicalOrTreatmentInformation?
            public var profanityOrCrudeHumor: ProfanityOrCrudeHumor?
            public var isSeventeenPlus: Bool?
            public var sexualContentGraphicAndNudity: SexualContentGraphicAndNudity?
            public var sexualContentOrNudity: SexualContentOrNudity?
            public var isUnrestrictedWebAccess: Bool?
            public var violenceCartoonOrFantasy: ViolenceCartoonOrFantasy?
            public var violenceRealistic: ViolenceRealistic?
            public var violenceRealisticProlongedGraphicOrSadistic: ViolenceRealisticProlongedGraphicOrSadistic?

            public enum AlcoholTobaccoOrDrugUseOrReferences: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum Contests: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum GamblingSimulated: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum HorrorOrFearThemes: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum MatureOrSuggestiveThemes: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum MedicalOrTreatmentInformation: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum ProfanityOrCrudeHumor: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum SexualContentGraphicAndNudity: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum SexualContentOrNudity: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum ViolenceCartoonOrFantasy: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum ViolenceRealistic: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public enum ViolenceRealisticProlongedGraphicOrSadistic: String, Codable, CaseIterable {
                case `none` = "NONE"
                case infrequentOrMild = "INFREQUENT_OR_MILD"
                case frequentOrIntense = "FREQUENT_OR_INTENSE"
            }

            public init(alcoholTobaccoOrDrugUseOrReferences: AlcoholTobaccoOrDrugUseOrReferences? = nil, contests: Contests? = nil, isGambling: Bool? = nil, isGamblingAndContests: Bool? = nil, gamblingSimulated: GamblingSimulated? = nil, horrorOrFearThemes: HorrorOrFearThemes? = nil, kidsAgeBand: KidsAgeBand? = nil, matureOrSuggestiveThemes: MatureOrSuggestiveThemes? = nil, medicalOrTreatmentInformation: MedicalOrTreatmentInformation? = nil, profanityOrCrudeHumor: ProfanityOrCrudeHumor? = nil, isSeventeenPlus: Bool? = nil, sexualContentGraphicAndNudity: SexualContentGraphicAndNudity? = nil, sexualContentOrNudity: SexualContentOrNudity? = nil, isUnrestrictedWebAccess: Bool? = nil, violenceCartoonOrFantasy: ViolenceCartoonOrFantasy? = nil, violenceRealistic: ViolenceRealistic? = nil, violenceRealisticProlongedGraphicOrSadistic: ViolenceRealisticProlongedGraphicOrSadistic? = nil) {
                self.alcoholTobaccoOrDrugUseOrReferences = alcoholTobaccoOrDrugUseOrReferences
                self.contests = contests
                self.isGambling = isGambling
                self.isGamblingAndContests = isGamblingAndContests
                self.gamblingSimulated = gamblingSimulated
                self.horrorOrFearThemes = horrorOrFearThemes
                self.kidsAgeBand = kidsAgeBand
                self.matureOrSuggestiveThemes = matureOrSuggestiveThemes
                self.medicalOrTreatmentInformation = medicalOrTreatmentInformation
                self.profanityOrCrudeHumor = profanityOrCrudeHumor
                self.isSeventeenPlus = isSeventeenPlus
                self.sexualContentGraphicAndNudity = sexualContentGraphicAndNudity
                self.sexualContentOrNudity = sexualContentOrNudity
                self.isUnrestrictedWebAccess = isUnrestrictedWebAccess
                self.violenceCartoonOrFantasy = violenceCartoonOrFantasy
                self.violenceRealistic = violenceRealistic
                self.violenceRealisticProlongedGraphicOrSadistic = violenceRealisticProlongedGraphicOrSadistic
            }

            private enum CodingKeys: String, CodingKey {
                case alcoholTobaccoOrDrugUseOrReferences
                case contests
                case isGambling = "gambling"
                case isGamblingAndContests = "gamblingAndContests"
                case gamblingSimulated
                case horrorOrFearThemes
                case kidsAgeBand
                case matureOrSuggestiveThemes
                case medicalOrTreatmentInformation
                case profanityOrCrudeHumor
                case isSeventeenPlus = "seventeenPlus"
                case sexualContentGraphicAndNudity
                case sexualContentOrNudity
                case isUnrestrictedWebAccess = "unrestrictedWebAccess"
                case violenceCartoonOrFantasy
                case violenceRealistic
                case violenceRealisticProlongedGraphicOrSadistic
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case ageRatingDeclarations
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct App: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var isAvailableInNewTerritories: Bool?
        public var bundleID: String?
        public var contentRightsDeclaration: ContentRightsDeclaration?
        public var isOrEverWasMadeForKids: Bool?
        public var name: String?
        public var primaryLocale: String?
        public var sku: String?

        public enum ContentRightsDeclaration: String, Codable, CaseIterable {
            case doesNotUseThirdPartyContent = "DOES_NOT_USE_THIRD_PARTY_CONTENT"
            case usesThirdPartyContent = "USES_THIRD_PARTY_CONTENT"
        }

        public init(isAvailableInNewTerritories: Bool? = nil, bundleID: String? = nil, contentRightsDeclaration: ContentRightsDeclaration? = nil, isOrEverWasMadeForKids: Bool? = nil, name: String? = nil, primaryLocale: String? = nil, sku: String? = nil) {
            self.isAvailableInNewTerritories = isAvailableInNewTerritories
            self.bundleID = bundleID
            self.contentRightsDeclaration = contentRightsDeclaration
            self.isOrEverWasMadeForKids = isOrEverWasMadeForKids
            self.name = name
            self.primaryLocale = primaryLocale
            self.sku = sku
        }

        private enum CodingKeys: String, CodingKey {
            case isAvailableInNewTerritories = "availableInNewTerritories"
            case bundleID = "bundleId"
            case contentRightsDeclaration
            case isOrEverWasMadeForKids
            case name
            case primaryLocale
            case sku
        }
    }

    public struct Relationships: Codable {
        public var appInfos: AppInfos?
        public var appStoreVersions: AppStoreVersions?
        public var availableTerritories: AvailableTerritories?
        public var betaAppLocalizations: BetaAppLocalizations?
        public var betaAppReviewDetail: BetaAppReviewDetail?
        public var betaGroups: BetaGroups?
        public var betaLicenseAgreement: BetaLicenseAgreement?
        public var builds: Builds?
        public var endUserLicenseAgreement: EndUserLicenseAgreement?
        public var gameCenterEnabledVersions: GameCenterEnabledVersions?
        public var inAppPurchases: InAppPurchases?
        public var preOrder: PreOrder?
        public var preReleaseVersions: PreReleaseVersions?
        public var prices: Prices?

        public struct AppInfos: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appInfos
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct AppStoreVersions: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct AvailableTerritories: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case territories
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct BetaAppLocalizations: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case betaAppLocalizations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct BetaAppReviewDetail: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case betaAppReviewDetails
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct BetaGroups: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case betaGroups
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct BetaLicenseAgreement: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case betaLicenseAgreements
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct Builds: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct EndUserLicenseAgreement: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case endUserLicenseAgreements
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct GameCenterEnabledVersions: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case gameCenterEnabledVersions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct InAppPurchases: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case inAppPurchases
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct PreOrder: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appPreOrders
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct PreReleaseVersions: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case preReleaseVersions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct Prices: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appPrices
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public init(appInfos: AppInfos? = nil, appStoreVersions: AppStoreVersions? = nil, availableTerritories: AvailableTerritories? = nil, betaAppLocalizations: BetaAppLocalizations? = nil, betaAppReviewDetail: BetaAppReviewDetail? = nil, betaGroups: BetaGroups? = nil, betaLicenseAgreement: BetaLicenseAgreement? = nil, builds: Builds? = nil, endUserLicenseAgreement: EndUserLicenseAgreement? = nil, gameCenterEnabledVersions: GameCenterEnabledVersions? = nil, inAppPurchases: InAppPurchases? = nil, preOrder: PreOrder? = nil, preReleaseVersions: PreReleaseVersions? = nil, prices: Prices? = nil) {
            self.appInfos = appInfos
            self.appStoreVersions = appStoreVersions
            self.availableTerritories = availableTerritories
            self.betaAppLocalizations = betaAppLocalizations
            self.betaAppReviewDetail = betaAppReviewDetail
            self.betaGroups = betaGroups
            self.betaLicenseAgreement = betaLicenseAgreement
            self.builds = builds
            self.endUserLicenseAgreement = endUserLicenseAgreement
            self.gameCenterEnabledVersions = gameCenterEnabledVersions
            self.inAppPurchases = inAppPurchases
            self.preOrder = preOrder
            self.preReleaseVersions = preReleaseVersions
            self.prices = prices
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case apps
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct AppBetaTestersLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case betaTesters
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct AppCategoriesResponse: Codable {
    public var data: [AppCategory]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case appCategory(AppCategory)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppCategory.self) {
                self = .appCategory(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appCategory(let value): try container.encode(value)
            }
        }
    }

    public init(data: [AppCategory], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppCategory: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var platforms: [Platform]?

        public init(platforms: [Platform]? = nil) {
            self.platforms = platforms
        }
    }

    public struct Relationships: Codable {
        public var parent: Parent?
        public var subcategories: Subcategories?

        public struct Parent: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appCategories
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct Subcategories: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appCategories
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public init(parent: Parent? = nil, subcategories: Subcategories? = nil) {
            self.parent = parent
            self.subcategories = subcategories
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appCategories
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct AppCategoryResponse: Codable {
    /// AppCategory
    public var data: AppCategory
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case appCategory(AppCategory)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppCategory.self) {
                self = .appCategory(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appCategory(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppCategory, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppEncryptionDeclaration: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var appEncryptionDeclarationState: AppEncryptionDeclarationState?
        public var isAvailableOnFrenchStore: Bool?
        public var codeValue: String?
        public var containsProprietaryCryptography: Bool?
        public var containsThirdPartyCryptography: Bool?
        public var documentName: String?
        public var documentType: String?
        public var documentURL: String?
        public var isExempt: Bool?
        public var platform: Platform?
        public var uploadedDate: Date?
        public var usesEncryption: Bool?

        public init(appEncryptionDeclarationState: AppEncryptionDeclarationState? = nil, isAvailableOnFrenchStore: Bool? = nil, codeValue: String? = nil, containsProprietaryCryptography: Bool? = nil, containsThirdPartyCryptography: Bool? = nil, documentName: String? = nil, documentType: String? = nil, documentURL: String? = nil, isExempt: Bool? = nil, platform: Platform? = nil, uploadedDate: Date? = nil, usesEncryption: Bool? = nil) {
            self.appEncryptionDeclarationState = appEncryptionDeclarationState
            self.isAvailableOnFrenchStore = isAvailableOnFrenchStore
            self.codeValue = codeValue
            self.containsProprietaryCryptography = containsProprietaryCryptography
            self.containsThirdPartyCryptography = containsThirdPartyCryptography
            self.documentName = documentName
            self.documentType = documentType
            self.documentURL = documentURL
            self.isExempt = isExempt
            self.platform = platform
            self.uploadedDate = uploadedDate
            self.usesEncryption = usesEncryption
        }

        private enum CodingKeys: String, CodingKey {
            case appEncryptionDeclarationState
            case isAvailableOnFrenchStore = "availableOnFrenchStore"
            case codeValue
            case containsProprietaryCryptography
            case containsThirdPartyCryptography
            case documentName
            case documentType
            case documentURL = "documentUrl"
            case isExempt = "exempt"
            case platform
            case uploadedDate
            case usesEncryption
        }
    }

    public struct Relationships: Codable {
        public var app: App?

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(app: App? = nil) {
            self.app = app
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appEncryptionDeclarations
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct AppEncryptionDeclarationBuildsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case builds
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct AppEncryptionDeclarationResponse: Codable {
    /// AppEncryptionDeclaration
    public var data: AppEncryptionDeclaration
    public var included: [App]?
    public var links: DocumentLinks

    public init(data: AppEncryptionDeclaration, included: [App]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public enum AppEncryptionDeclarationState: String, Codable, CaseIterable {
    case inReview = "IN_REVIEW"
    case approved = "APPROVED"
    case rejected = "REJECTED"
    case invalid = "INVALID"
    case expired = "EXPIRED"
}

public struct AppEncryptionDeclarationsResponse: Codable {
    public var data: [AppEncryptionDeclaration]
    public var included: [App]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [AppEncryptionDeclaration], included: [App]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppInfo: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var appStoreAgeRating: AppStoreAgeRating?
        public var appStoreState: AppStoreVersionState?
        public var brazilAgeRating: BrazilAgeRating?
        public var kidsAgeBand: KidsAgeBand?

        public init(appStoreAgeRating: AppStoreAgeRating? = nil, appStoreState: AppStoreVersionState? = nil, brazilAgeRating: BrazilAgeRating? = nil, kidsAgeBand: KidsAgeBand? = nil) {
            self.appStoreAgeRating = appStoreAgeRating
            self.appStoreState = appStoreState
            self.brazilAgeRating = brazilAgeRating
            self.kidsAgeBand = kidsAgeBand
        }
    }

    public struct Relationships: Codable {
        public var ageRatingDeclaration: AgeRatingDeclaration?
        public var app: App?
        public var appInfoLocalizations: AppInfoLocalizations?
        public var primaryCategory: PrimaryCategory?
        public var primarySubcategoryOne: PrimarySubcategoryOne?
        public var primarySubcategoryTwo: PrimarySubcategoryTwo?
        public var secondaryCategory: SecondaryCategory?
        public var secondarySubcategoryOne: SecondarySubcategoryOne?
        public var secondarySubcategoryTwo: SecondarySubcategoryTwo?

        public struct AgeRatingDeclaration: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case ageRatingDeclarations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppInfoLocalizations: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appInfoLocalizations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct PrimaryCategory: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appCategories
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct PrimarySubcategoryOne: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appCategories
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct PrimarySubcategoryTwo: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appCategories
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct SecondaryCategory: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appCategories
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct SecondarySubcategoryOne: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appCategories
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct SecondarySubcategoryTwo: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appCategories
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(ageRatingDeclaration: AgeRatingDeclaration? = nil, app: App? = nil, appInfoLocalizations: AppInfoLocalizations? = nil, primaryCategory: PrimaryCategory? = nil, primarySubcategoryOne: PrimarySubcategoryOne? = nil, primarySubcategoryTwo: PrimarySubcategoryTwo? = nil, secondaryCategory: SecondaryCategory? = nil, secondarySubcategoryOne: SecondarySubcategoryOne? = nil, secondarySubcategoryTwo: SecondarySubcategoryTwo? = nil) {
            self.ageRatingDeclaration = ageRatingDeclaration
            self.app = app
            self.appInfoLocalizations = appInfoLocalizations
            self.primaryCategory = primaryCategory
            self.primarySubcategoryOne = primarySubcategoryOne
            self.primarySubcategoryTwo = primarySubcategoryTwo
            self.secondaryCategory = secondaryCategory
            self.secondarySubcategoryOne = secondarySubcategoryOne
            self.secondarySubcategoryTwo = secondarySubcategoryTwo
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appInfos
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct AppInfoLocalization: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var locale: String?
        public var name: String?
        public var privacyPolicyText: String?
        public var privacyPolicyURL: String?
        public var subtitle: String?

        public init(locale: String? = nil, name: String? = nil, privacyPolicyText: String? = nil, privacyPolicyURL: String? = nil, subtitle: String? = nil) {
            self.locale = locale
            self.name = name
            self.privacyPolicyText = privacyPolicyText
            self.privacyPolicyURL = privacyPolicyURL
            self.subtitle = subtitle
        }

        private enum CodingKeys: String, CodingKey {
            case locale
            case name
            case privacyPolicyText
            case privacyPolicyURL = "privacyPolicyUrl"
            case subtitle
        }
    }

    public struct Relationships: Codable {
        public var appInfo: AppInfo?

        public struct AppInfo: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appInfos
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(appInfo: AppInfo? = nil) {
            self.appInfo = appInfo
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appInfoLocalizations
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct AppInfoLocalizationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var relationships: Relationships
        public var type: `Type`

        public struct Attributes: Codable {
            public var locale: String
            public var name: String?
            public var privacyPolicyText: String?
            public var privacyPolicyURL: String?
            public var subtitle: String?

            public init(locale: String, name: String? = nil, privacyPolicyText: String? = nil, privacyPolicyURL: String? = nil, subtitle: String? = nil) {
                self.locale = locale
                self.name = name
                self.privacyPolicyText = privacyPolicyText
                self.privacyPolicyURL = privacyPolicyURL
                self.subtitle = subtitle
            }

            private enum CodingKeys: String, CodingKey {
                case locale
                case name
                case privacyPolicyText
                case privacyPolicyURL = "privacyPolicyUrl"
                case subtitle
            }
        }

        public struct Relationships: Codable {
            public var appInfo: AppInfo

            public struct AppInfo: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appInfos
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appInfo: AppInfo) {
                self.appInfo = appInfo
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appInfoLocalizations
        }

        public init(attributes: Attributes, relationships: Relationships, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppInfoLocalizationResponse: Codable {
    /// AppInfoLocalization
    public var data: AppInfoLocalization
    public var links: DocumentLinks

    public init(data: AppInfoLocalization, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct AppInfoLocalizationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var name: String?
            public var privacyPolicyText: String?
            public var privacyPolicyURL: String?
            public var subtitle: String?

            public init(name: String? = nil, privacyPolicyText: String? = nil, privacyPolicyURL: String? = nil, subtitle: String? = nil) {
                self.name = name
                self.privacyPolicyText = privacyPolicyText
                self.privacyPolicyURL = privacyPolicyURL
                self.subtitle = subtitle
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case privacyPolicyText
                case privacyPolicyURL = "privacyPolicyUrl"
                case subtitle
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appInfoLocalizations
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppInfoLocalizationsResponse: Codable {
    public var data: [AppInfoLocalization]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [AppInfoLocalization], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct AppInfoResponse: Codable {
    /// AppInfo
    public var data: AppInfo
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case appInfoLocalization(AppInfoLocalization)
        case appCategory(AppCategory)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppInfoLocalization.self) {
                self = .appInfoLocalization(value)
            } else if let value = try? container.decode(AppCategory.self) {
                self = .appCategory(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appInfoLocalization(let value): try container.encode(value)
            case .appCategory(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppInfo, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppInfoUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var id: String
        public var relationships: Relationships?
        public var type: `Type`

        public struct Relationships: Codable {
            public var primaryCategory: PrimaryCategory?
            public var primarySubcategoryOne: PrimarySubcategoryOne?
            public var primarySubcategoryTwo: PrimarySubcategoryTwo?
            public var secondaryCategory: SecondaryCategory?
            public var secondarySubcategoryOne: SecondarySubcategoryOne?
            public var secondarySubcategoryTwo: SecondarySubcategoryTwo?

            public struct PrimaryCategory: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCategories
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct PrimarySubcategoryOne: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCategories
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct PrimarySubcategoryTwo: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCategories
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct SecondaryCategory: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCategories
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct SecondarySubcategoryOne: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCategories
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public struct SecondarySubcategoryTwo: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appCategories
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(primaryCategory: PrimaryCategory? = nil, primarySubcategoryOne: PrimarySubcategoryOne? = nil, primarySubcategoryTwo: PrimarySubcategoryTwo? = nil, secondaryCategory: SecondaryCategory? = nil, secondarySubcategoryOne: SecondarySubcategoryOne? = nil, secondarySubcategoryTwo: SecondarySubcategoryTwo? = nil) {
                self.primaryCategory = primaryCategory
                self.primarySubcategoryOne = primarySubcategoryOne
                self.primarySubcategoryTwo = primarySubcategoryTwo
                self.secondaryCategory = secondaryCategory
                self.secondarySubcategoryOne = secondarySubcategoryOne
                self.secondarySubcategoryTwo = secondarySubcategoryTwo
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appInfos
        }

        public init(id: String, relationships: Relationships? = nil, type: `Type`) {
            self.id = id
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppInfosResponse: Codable {
    public var data: [AppInfo]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case appInfoLocalization(AppInfoLocalization)
        case appCategory(AppCategory)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppInfoLocalization.self) {
                self = .appInfoLocalization(value)
            } else if let value = try? container.decode(AppCategory.self) {
                self = .appCategory(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appInfoLocalization(let value): try container.encode(value)
            case .appCategory(let value): try container.encode(value)
            }
        }
    }

    public init(data: [AppInfo], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppMediaAssetState: Codable {
    public var errors: [AppMediaStateError]?
    public var state: State?
    public var warnings: [AppMediaStateError]?

    public enum State: String, Codable, CaseIterable {
        case awaitingUpload = "AWAITING_UPLOAD"
        case uploadComplete = "UPLOAD_COMPLETE"
        case complete = "COMPLETE"
        case failed = "FAILED"
    }

    public init(errors: [AppMediaStateError]? = nil, state: State? = nil, warnings: [AppMediaStateError]? = nil) {
        self.errors = errors
        self.state = state
        self.warnings = warnings
    }
}

public struct AppMediaStateError: Codable {
    public var code: String?
    public var description: String?

    public init(code: String? = nil, description: String? = nil) {
        self.code = code
        self.description = description
    }
}

public struct AppPreOrder: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var appReleaseDate: NaiveDate?
        public var preOrderAvailableDate: NaiveDate?

        public init(appReleaseDate: NaiveDate? = nil, preOrderAvailableDate: NaiveDate? = nil) {
            self.appReleaseDate = appReleaseDate
            self.preOrderAvailableDate = preOrderAvailableDate
        }
    }

    public struct Relationships: Codable {
        public var app: App?

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(app: App? = nil) {
            self.app = app
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appPreOrders
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct AppPreOrderCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var relationships: Relationships
        public var type: `Type`

        public struct Attributes: Codable {
            public var appReleaseDate: NaiveDate?

            public init(appReleaseDate: NaiveDate? = nil) {
                self.appReleaseDate = appReleaseDate
            }
        }

        public struct Relationships: Codable {
            public var app: App

            public struct App: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(app: App) {
                self.app = app
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appPreOrders
        }

        public init(attributes: Attributes? = nil, relationships: Relationships, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppPreOrderResponse: Codable {
    /// AppPreOrder
    public var data: AppPreOrder
    public var links: DocumentLinks

    public init(data: AppPreOrder, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct AppPreOrderUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var appReleaseDate: NaiveDate?

            public init(appReleaseDate: NaiveDate? = nil) {
                self.appReleaseDate = appReleaseDate
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appPreOrders
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppPreview: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var assetDeliveryState: AppMediaAssetState?
        public var fileName: String?
        public var fileSize: Int?
        public var mimeType: String?
        public var previewFrameTimeCode: String?
        public var previewImage: ImageAsset?
        public var sourceFileChecksum: String?
        public var uploadOperations: [UploadOperation]?
        public var videoURL: String?

        public init(assetDeliveryState: AppMediaAssetState? = nil, fileName: String? = nil, fileSize: Int? = nil, mimeType: String? = nil, previewFrameTimeCode: String? = nil, previewImage: ImageAsset? = nil, sourceFileChecksum: String? = nil, uploadOperations: [UploadOperation]? = nil, videoURL: String? = nil) {
            self.assetDeliveryState = assetDeliveryState
            self.fileName = fileName
            self.fileSize = fileSize
            self.mimeType = mimeType
            self.previewFrameTimeCode = previewFrameTimeCode
            self.previewImage = previewImage
            self.sourceFileChecksum = sourceFileChecksum
            self.uploadOperations = uploadOperations
            self.videoURL = videoURL
        }

        private enum CodingKeys: String, CodingKey {
            case assetDeliveryState
            case fileName
            case fileSize
            case mimeType
            case previewFrameTimeCode
            case previewImage
            case sourceFileChecksum
            case uploadOperations
            case videoURL = "videoUrl"
        }
    }

    public struct Relationships: Codable {
        public var appPreviewSet: AppPreviewSet?

        public struct AppPreviewSet: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appPreviewSets
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(appPreviewSet: AppPreviewSet? = nil) {
            self.appPreviewSet = appPreviewSet
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appPreviews
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct AppPreviewCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var relationships: Relationships
        public var type: `Type`

        public struct Attributes: Codable {
            public var fileName: String
            public var fileSize: Int
            public var mimeType: String?
            public var previewFrameTimeCode: String?

            public init(fileName: String, fileSize: Int, mimeType: String? = nil, previewFrameTimeCode: String? = nil) {
                self.fileName = fileName
                self.fileSize = fileSize
                self.mimeType = mimeType
                self.previewFrameTimeCode = previewFrameTimeCode
            }
        }

        public struct Relationships: Codable {
            public var appPreviewSet: AppPreviewSet

            public struct AppPreviewSet: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appPreviewSets
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appPreviewSet: AppPreviewSet) {
                self.appPreviewSet = appPreviewSet
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appPreviews
        }

        public init(attributes: Attributes, relationships: Relationships, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppPreviewResponse: Codable {
    /// AppPreview
    public var data: AppPreview
    public var links: DocumentLinks

    public init(data: AppPreview, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct AppPreviewSet: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var previewType: PreviewType?

        public init(previewType: PreviewType? = nil) {
            self.previewType = previewType
        }
    }

    public struct Relationships: Codable {
        public var appPreviews: AppPreviews?
        public var appStoreVersionLocalization: AppStoreVersionLocalization?

        public struct AppPreviews: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appPreviews
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct AppStoreVersionLocalization: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionLocalizations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(appPreviews: AppPreviews? = nil, appStoreVersionLocalization: AppStoreVersionLocalization? = nil) {
            self.appPreviews = appPreviews
            self.appStoreVersionLocalization = appStoreVersionLocalization
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appPreviewSets
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct AppPreviewSetAppPreviewsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case appPreviews
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct AppPreviewSetAppPreviewsLinkagesResponse: Codable {
    public var data: [Datum]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case appPreviews
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct AppPreviewSetCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var relationships: Relationships
        public var type: `Type`

        public struct Attributes: Codable {
            public var previewType: PreviewType

            public init(previewType: PreviewType) {
                self.previewType = previewType
            }
        }

        public struct Relationships: Codable {
            public var appStoreVersionLocalization: AppStoreVersionLocalization

            public struct AppStoreVersionLocalization: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersionLocalizations
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersionLocalization: AppStoreVersionLocalization) {
                self.appStoreVersionLocalization = appStoreVersionLocalization
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appPreviewSets
        }

        public init(attributes: Attributes, relationships: Relationships, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppPreviewSetResponse: Codable {
    /// AppPreviewSet
    public var data: AppPreviewSet
    public var included: [AppPreview]?
    public var links: DocumentLinks

    public init(data: AppPreviewSet, included: [AppPreview]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppPreviewSetsResponse: Codable {
    public var data: [AppPreviewSet]
    public var included: [AppPreview]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [AppPreviewSet], included: [AppPreview]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppPreviewUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var previewFrameTimeCode: String?
            public var sourceFileChecksum: String?
            public var isUploaded: Bool?

            public init(previewFrameTimeCode: String? = nil, sourceFileChecksum: String? = nil, isUploaded: Bool? = nil) {
                self.previewFrameTimeCode = previewFrameTimeCode
                self.sourceFileChecksum = sourceFileChecksum
                self.isUploaded = isUploaded
            }

            private enum CodingKeys: String, CodingKey {
                case previewFrameTimeCode
                case sourceFileChecksum
                case isUploaded = "uploaded"
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appPreviews
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppPreviewsResponse: Codable {
    public var data: [AppPreview]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [AppPreview], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct AppPrice: Codable {
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Relationships: Codable {
        public var app: App?
        public var priceTier: PriceTier?

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct PriceTier: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appPriceTiers
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(app: App? = nil, priceTier: PriceTier? = nil) {
            self.app = app
            self.priceTier = priceTier
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appPrices
    }

    public init(id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct AppPricePoint: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var customerPrice: String?
        public var proceeds: String?

        public init(customerPrice: String? = nil, proceeds: String? = nil) {
            self.customerPrice = customerPrice
            self.proceeds = proceeds
        }
    }

    public struct Relationships: Codable {
        public var priceTier: PriceTier?
        public var territory: Territory?

        public struct PriceTier: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appPriceTiers
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct Territory: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case territories
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(priceTier: PriceTier? = nil, territory: Territory? = nil) {
            self.priceTier = priceTier
            self.territory = territory
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appPricePoints
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct AppPricePointResponse: Codable {
    /// AppPricePoint
    public var data: AppPricePoint
    public var included: [Territory]?
    public var links: DocumentLinks

    public init(data: AppPricePoint, included: [Territory]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppPricePointsResponse: Codable {
    public var data: [AppPricePoint]
    public var included: [Territory]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [AppPricePoint], included: [Territory]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppPriceResponse: Codable {
    /// AppPrice
    public var data: AppPrice
    public var links: DocumentLinks

    public init(data: AppPrice, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct AppPriceTier: Codable {
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Relationships: Codable {
        public var pricePoints: PricePoints?

        public struct PricePoints: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appPricePoints
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public init(pricePoints: PricePoints? = nil) {
            self.pricePoints = pricePoints
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appPriceTiers
    }

    public init(id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct AppPriceTierResponse: Codable {
    /// AppPriceTier
    public var data: AppPriceTier
    public var included: [AppPricePoint]?
    public var links: DocumentLinks

    public init(data: AppPriceTier, included: [AppPricePoint]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppPriceTiersResponse: Codable {
    public var data: [AppPriceTier]
    public var included: [AppPricePoint]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [AppPriceTier], included: [AppPricePoint]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppPricesResponse: Codable {
    public var data: [AppPrice]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [AppPrice], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct AppResponse: Codable {
    /// App
    public var data: App
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case betaGroup(BetaGroup)
        case appStoreVersion(AppStoreVersion)
        case prereleaseVersion(PrereleaseVersion)
        case betaAppLocalization(BetaAppLocalization)
        case build(Build)
        case betaLicenseAgreement(BetaLicenseAgreement)
        case betaAppReviewDetail(BetaAppReviewDetail)
        case appInfo(AppInfo)
        case endUserLicenseAgreement(EndUserLicenseAgreement)
        case appPreOrder(AppPreOrder)
        case appPrice(AppPrice)
        case territory(Territory)
        case inAppPurchase(InAppPurchase)
        case gameCenterEnabledVersion(GameCenterEnabledVersion)
        case perfPowerMetric(PerfPowerMetric)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(BetaGroup.self) {
                self = .betaGroup(value)
            } else if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(PrereleaseVersion.self) {
                self = .prereleaseVersion(value)
            } else if let value = try? container.decode(BetaAppLocalization.self) {
                self = .betaAppLocalization(value)
            } else if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(BetaLicenseAgreement.self) {
                self = .betaLicenseAgreement(value)
            } else if let value = try? container.decode(BetaAppReviewDetail.self) {
                self = .betaAppReviewDetail(value)
            } else if let value = try? container.decode(AppInfo.self) {
                self = .appInfo(value)
            } else if let value = try? container.decode(EndUserLicenseAgreement.self) {
                self = .endUserLicenseAgreement(value)
            } else if let value = try? container.decode(AppPreOrder.self) {
                self = .appPreOrder(value)
            } else if let value = try? container.decode(AppPrice.self) {
                self = .appPrice(value)
            } else if let value = try? container.decode(Territory.self) {
                self = .territory(value)
            } else if let value = try? container.decode(InAppPurchase.self) {
                self = .inAppPurchase(value)
            } else if let value = try? container.decode(GameCenterEnabledVersion.self) {
                self = .gameCenterEnabledVersion(value)
            } else if let value = try? container.decode(PerfPowerMetric.self) {
                self = .perfPowerMetric(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .betaGroup(let value): try container.encode(value)
            case .appStoreVersion(let value): try container.encode(value)
            case .prereleaseVersion(let value): try container.encode(value)
            case .betaAppLocalization(let value): try container.encode(value)
            case .build(let value): try container.encode(value)
            case .betaLicenseAgreement(let value): try container.encode(value)
            case .betaAppReviewDetail(let value): try container.encode(value)
            case .appInfo(let value): try container.encode(value)
            case .endUserLicenseAgreement(let value): try container.encode(value)
            case .appPreOrder(let value): try container.encode(value)
            case .appPrice(let value): try container.encode(value)
            case .territory(let value): try container.encode(value)
            case .inAppPurchase(let value): try container.encode(value)
            case .gameCenterEnabledVersion(let value): try container.encode(value)
            case .perfPowerMetric(let value): try container.encode(value)
            }
        }
    }

    public init(data: App, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppScreenshot: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var assetDeliveryState: AppMediaAssetState?
        public var assetToken: String?
        public var assetType: String?
        public var fileName: String?
        public var fileSize: Int?
        public var imageAsset: ImageAsset?
        public var sourceFileChecksum: String?
        public var uploadOperations: [UploadOperation]?

        public init(assetDeliveryState: AppMediaAssetState? = nil, assetToken: String? = nil, assetType: String? = nil, fileName: String? = nil, fileSize: Int? = nil, imageAsset: ImageAsset? = nil, sourceFileChecksum: String? = nil, uploadOperations: [UploadOperation]? = nil) {
            self.assetDeliveryState = assetDeliveryState
            self.assetToken = assetToken
            self.assetType = assetType
            self.fileName = fileName
            self.fileSize = fileSize
            self.imageAsset = imageAsset
            self.sourceFileChecksum = sourceFileChecksum
            self.uploadOperations = uploadOperations
        }
    }

    public struct Relationships: Codable {
        public var appScreenshotSet: AppScreenshotSet?

        public struct AppScreenshotSet: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appScreenshotSets
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(appScreenshotSet: AppScreenshotSet? = nil) {
            self.appScreenshotSet = appScreenshotSet
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appScreenshots
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct AppScreenshotCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var relationships: Relationships
        public var type: `Type`

        public struct Attributes: Codable {
            public var fileName: String
            public var fileSize: Int

            public init(fileName: String, fileSize: Int) {
                self.fileName = fileName
                self.fileSize = fileSize
            }
        }

        public struct Relationships: Codable {
            public var appScreenshotSet: AppScreenshotSet

            public struct AppScreenshotSet: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appScreenshotSets
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appScreenshotSet: AppScreenshotSet) {
                self.appScreenshotSet = appScreenshotSet
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appScreenshots
        }

        public init(attributes: Attributes, relationships: Relationships, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppScreenshotResponse: Codable {
    /// AppScreenshot
    public var data: AppScreenshot
    public var links: DocumentLinks

    public init(data: AppScreenshot, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct AppScreenshotSet: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var screenshotDisplayType: ScreenshotDisplayType?

        public init(screenshotDisplayType: ScreenshotDisplayType? = nil) {
            self.screenshotDisplayType = screenshotDisplayType
        }
    }

    public struct Relationships: Codable {
        public var appScreenshots: AppScreenshots?
        public var appStoreVersionLocalization: AppStoreVersionLocalization?

        public struct AppScreenshots: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appScreenshots
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct AppStoreVersionLocalization: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionLocalizations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(appScreenshots: AppScreenshots? = nil, appStoreVersionLocalization: AppStoreVersionLocalization? = nil) {
            self.appScreenshots = appScreenshots
            self.appStoreVersionLocalization = appStoreVersionLocalization
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appScreenshotSets
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct AppScreenshotSetAppScreenshotsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case appScreenshots
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct AppScreenshotSetAppScreenshotsLinkagesResponse: Codable {
    public var data: [Datum]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case appScreenshots
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct AppScreenshotSetCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var relationships: Relationships
        public var type: `Type`

        public struct Attributes: Codable {
            public var screenshotDisplayType: ScreenshotDisplayType

            public init(screenshotDisplayType: ScreenshotDisplayType) {
                self.screenshotDisplayType = screenshotDisplayType
            }
        }

        public struct Relationships: Codable {
            public var appStoreVersionLocalization: AppStoreVersionLocalization

            public struct AppStoreVersionLocalization: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersionLocalizations
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersionLocalization: AppStoreVersionLocalization) {
                self.appStoreVersionLocalization = appStoreVersionLocalization
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appScreenshotSets
        }

        public init(attributes: Attributes, relationships: Relationships, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppScreenshotSetResponse: Codable {
    /// AppScreenshotSet
    public var data: AppScreenshotSet
    public var included: [AppScreenshot]?
    public var links: DocumentLinks

    public init(data: AppScreenshotSet, included: [AppScreenshot]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppScreenshotSetsResponse: Codable {
    public var data: [AppScreenshotSet]
    public var included: [AppScreenshot]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [AppScreenshotSet], included: [AppScreenshot]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppScreenshotUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var sourceFileChecksum: String?
            public var isUploaded: Bool?

            public init(sourceFileChecksum: String? = nil, isUploaded: Bool? = nil) {
                self.sourceFileChecksum = sourceFileChecksum
                self.isUploaded = isUploaded
            }

            private enum CodingKeys: String, CodingKey {
                case sourceFileChecksum
                case isUploaded = "uploaded"
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appScreenshots
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppScreenshotsResponse: Codable {
    public var data: [AppScreenshot]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [AppScreenshot], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public enum AppStoreAgeRating: String, Codable, CaseIterable {
    case fourPlus = "FOUR_PLUS"
    case ninePlus = "NINE_PLUS"
    case twelvePlus = "TWELVE_PLUS"
    case seventeenPlus = "SEVENTEEN_PLUS"
}

public struct AppStoreReviewAttachment: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var assetDeliveryState: AppMediaAssetState?
        public var fileName: String?
        public var fileSize: Int?
        public var sourceFileChecksum: String?
        public var uploadOperations: [UploadOperation]?

        public init(assetDeliveryState: AppMediaAssetState? = nil, fileName: String? = nil, fileSize: Int? = nil, sourceFileChecksum: String? = nil, uploadOperations: [UploadOperation]? = nil) {
            self.assetDeliveryState = assetDeliveryState
            self.fileName = fileName
            self.fileSize = fileSize
            self.sourceFileChecksum = sourceFileChecksum
            self.uploadOperations = uploadOperations
        }
    }

    public struct Relationships: Codable {
        public var appStoreReviewDetail: AppStoreReviewDetail?

        public struct AppStoreReviewDetail: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreReviewDetails
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(appStoreReviewDetail: AppStoreReviewDetail? = nil) {
            self.appStoreReviewDetail = appStoreReviewDetail
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreReviewAttachments
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct AppStoreReviewAttachmentCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var relationships: Relationships
        public var type: `Type`

        public struct Attributes: Codable {
            public var fileName: String
            public var fileSize: Int

            public init(fileName: String, fileSize: Int) {
                self.fileName = fileName
                self.fileSize = fileSize
            }
        }

        public struct Relationships: Codable {
            public var appStoreReviewDetail: AppStoreReviewDetail

            public struct AppStoreReviewDetail: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreReviewDetails
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreReviewDetail: AppStoreReviewDetail) {
                self.appStoreReviewDetail = appStoreReviewDetail
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreReviewAttachments
        }

        public init(attributes: Attributes, relationships: Relationships, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreReviewAttachmentResponse: Codable {
    /// AppStoreReviewAttachment
    public var data: AppStoreReviewAttachment
    public var links: DocumentLinks

    public init(data: AppStoreReviewAttachment, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct AppStoreReviewAttachmentUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var sourceFileChecksum: String?
            public var isUploaded: Bool?

            public init(sourceFileChecksum: String? = nil, isUploaded: Bool? = nil) {
                self.sourceFileChecksum = sourceFileChecksum
                self.isUploaded = isUploaded
            }

            private enum CodingKeys: String, CodingKey {
                case sourceFileChecksum
                case isUploaded = "uploaded"
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreReviewAttachments
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreReviewAttachmentsResponse: Codable {
    public var data: [AppStoreReviewAttachment]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [AppStoreReviewAttachment], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct AppStoreReviewDetail: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var contactEmail: String?
        public var contactFirstName: String?
        public var contactLastName: String?
        public var contactPhone: String?
        public var demoAccountName: String?
        public var demoAccountPassword: String?
        public var isDemoAccountRequired: Bool?
        public var notes: String?

        public init(contactEmail: String? = nil, contactFirstName: String? = nil, contactLastName: String? = nil, contactPhone: String? = nil, demoAccountName: String? = nil, demoAccountPassword: String? = nil, isDemoAccountRequired: Bool? = nil, notes: String? = nil) {
            self.contactEmail = contactEmail
            self.contactFirstName = contactFirstName
            self.contactLastName = contactLastName
            self.contactPhone = contactPhone
            self.demoAccountName = demoAccountName
            self.demoAccountPassword = demoAccountPassword
            self.isDemoAccountRequired = isDemoAccountRequired
            self.notes = notes
        }

        private enum CodingKeys: String, CodingKey {
            case contactEmail
            case contactFirstName
            case contactLastName
            case contactPhone
            case demoAccountName
            case demoAccountPassword
            case isDemoAccountRequired = "demoAccountRequired"
            case notes
        }
    }

    public struct Relationships: Codable {
        public var appStoreReviewAttachments: AppStoreReviewAttachments?
        public var appStoreVersion: AppStoreVersion?

        public struct AppStoreReviewAttachments: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreReviewAttachments
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct AppStoreVersion: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(appStoreReviewAttachments: AppStoreReviewAttachments? = nil, appStoreVersion: AppStoreVersion? = nil) {
            self.appStoreReviewAttachments = appStoreReviewAttachments
            self.appStoreVersion = appStoreVersion
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreReviewDetails
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct AppStoreReviewDetailCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var relationships: Relationships
        public var type: `Type`

        public struct Attributes: Codable {
            public var contactEmail: String?
            public var contactFirstName: String?
            public var contactLastName: String?
            public var contactPhone: String?
            public var demoAccountName: String?
            public var demoAccountPassword: String?
            public var isDemoAccountRequired: Bool?
            public var notes: String?

            public init(contactEmail: String? = nil, contactFirstName: String? = nil, contactLastName: String? = nil, contactPhone: String? = nil, demoAccountName: String? = nil, demoAccountPassword: String? = nil, isDemoAccountRequired: Bool? = nil, notes: String? = nil) {
                self.contactEmail = contactEmail
                self.contactFirstName = contactFirstName
                self.contactLastName = contactLastName
                self.contactPhone = contactPhone
                self.demoAccountName = demoAccountName
                self.demoAccountPassword = demoAccountPassword
                self.isDemoAccountRequired = isDemoAccountRequired
                self.notes = notes
            }

            private enum CodingKeys: String, CodingKey {
                case contactEmail
                case contactFirstName
                case contactLastName
                case contactPhone
                case demoAccountName
                case demoAccountPassword
                case isDemoAccountRequired = "demoAccountRequired"
                case notes
            }
        }

        public struct Relationships: Codable {
            public var appStoreVersion: AppStoreVersion

            public struct AppStoreVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersion: AppStoreVersion) {
                self.appStoreVersion = appStoreVersion
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreReviewDetails
        }

        public init(attributes: Attributes? = nil, relationships: Relationships, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreReviewDetailResponse: Codable {
    /// AppStoreReviewDetail
    public var data: AppStoreReviewDetail
    public var included: [AppStoreReviewAttachment]?
    public var links: DocumentLinks

    public init(data: AppStoreReviewDetail, included: [AppStoreReviewAttachment]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppStoreReviewDetailUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var contactEmail: String?
            public var contactFirstName: String?
            public var contactLastName: String?
            public var contactPhone: String?
            public var demoAccountName: String?
            public var demoAccountPassword: String?
            public var isDemoAccountRequired: Bool?
            public var notes: String?

            public init(contactEmail: String? = nil, contactFirstName: String? = nil, contactLastName: String? = nil, contactPhone: String? = nil, demoAccountName: String? = nil, demoAccountPassword: String? = nil, isDemoAccountRequired: Bool? = nil, notes: String? = nil) {
                self.contactEmail = contactEmail
                self.contactFirstName = contactFirstName
                self.contactLastName = contactLastName
                self.contactPhone = contactPhone
                self.demoAccountName = demoAccountName
                self.demoAccountPassword = demoAccountPassword
                self.isDemoAccountRequired = isDemoAccountRequired
                self.notes = notes
            }

            private enum CodingKeys: String, CodingKey {
                case contactEmail
                case contactFirstName
                case contactLastName
                case contactPhone
                case demoAccountName
                case demoAccountPassword
                case isDemoAccountRequired = "demoAccountRequired"
                case notes
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreReviewDetails
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersion: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var appStoreState: AppStoreVersionState?
        public var copyright: String?
        public var createdDate: Date?
        public var isDownloadable: Bool?
        public var earliestReleaseDate: Date?
        public var platform: Platform?
        public var releaseType: ReleaseType?
        public var usesIdfa: Bool?
        public var versionString: String?

        public enum ReleaseType: String, Codable, CaseIterable {
            case manual = "MANUAL"
            case afterApproval = "AFTER_APPROVAL"
            case scheduled = "SCHEDULED"
        }

        public init(appStoreState: AppStoreVersionState? = nil, copyright: String? = nil, createdDate: Date? = nil, isDownloadable: Bool? = nil, earliestReleaseDate: Date? = nil, platform: Platform? = nil, releaseType: ReleaseType? = nil, usesIdfa: Bool? = nil, versionString: String? = nil) {
            self.appStoreState = appStoreState
            self.copyright = copyright
            self.createdDate = createdDate
            self.isDownloadable = isDownloadable
            self.earliestReleaseDate = earliestReleaseDate
            self.platform = platform
            self.releaseType = releaseType
            self.usesIdfa = usesIdfa
            self.versionString = versionString
        }

        private enum CodingKeys: String, CodingKey {
            case appStoreState
            case copyright
            case createdDate
            case isDownloadable = "downloadable"
            case earliestReleaseDate
            case platform
            case releaseType
            case usesIdfa
            case versionString
        }
    }

    public struct Relationships: Codable {
        /// - warning: Deprecated.
        public var ageRatingDeclaration: AgeRatingDeclaration?
        public var app: App?
        public var appStoreReviewDetail: AppStoreReviewDetail?
        public var appStoreVersionLocalizations: AppStoreVersionLocalizations?
        public var appStoreVersionPhasedRelease: AppStoreVersionPhasedRelease?
        public var appStoreVersionSubmission: AppStoreVersionSubmission?
        public var build: Build?
        public var idfaDeclaration: IdfaDeclaration?
        public var routingAppCoverage: RoutingAppCoverage?

        @available(*, deprecated, message: "Deprecated")
        public struct AgeRatingDeclaration: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case ageRatingDeclarations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppStoreReviewDetail: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreReviewDetails
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppStoreVersionLocalizations: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionLocalizations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct AppStoreVersionPhasedRelease: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionPhasedReleases
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppStoreVersionSubmission: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersionSubmissions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct Build: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct IdfaDeclaration: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case idfaDeclarations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct RoutingAppCoverage: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case routingAppCoverages
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(ageRatingDeclaration: AgeRatingDeclaration? = nil, app: App? = nil, appStoreReviewDetail: AppStoreReviewDetail? = nil, appStoreVersionLocalizations: AppStoreVersionLocalizations? = nil, appStoreVersionPhasedRelease: AppStoreVersionPhasedRelease? = nil, appStoreVersionSubmission: AppStoreVersionSubmission? = nil, build: Build? = nil, idfaDeclaration: IdfaDeclaration? = nil, routingAppCoverage: RoutingAppCoverage? = nil) {
            self.ageRatingDeclaration = ageRatingDeclaration
            self.app = app
            self.appStoreReviewDetail = appStoreReviewDetail
            self.appStoreVersionLocalizations = appStoreVersionLocalizations
            self.appStoreVersionPhasedRelease = appStoreVersionPhasedRelease
            self.appStoreVersionSubmission = appStoreVersionSubmission
            self.build = build
            self.idfaDeclaration = idfaDeclaration
            self.routingAppCoverage = routingAppCoverage
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreVersions
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct AppStoreVersionBuildLinkageRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case builds
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionBuildLinkageResponse: Codable {
    public var data: Data
    public var links: DocumentLinks

    public struct Data: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case builds
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: Data, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct AppStoreVersionCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var relationships: Relationships
        public var type: `Type`

        public struct Attributes: Codable {
            public var copyright: String?
            public var earliestReleaseDate: Date?
            public var platform: Platform
            public var releaseType: ReleaseType?
            public var usesIdfa: Bool?
            public var versionString: String

            public enum ReleaseType: String, Codable, CaseIterable {
                case manual = "MANUAL"
                case afterApproval = "AFTER_APPROVAL"
                case scheduled = "SCHEDULED"
            }

            public init(copyright: String? = nil, earliestReleaseDate: Date? = nil, platform: Platform, releaseType: ReleaseType? = nil, usesIdfa: Bool? = nil, versionString: String) {
                self.copyright = copyright
                self.earliestReleaseDate = earliestReleaseDate
                self.platform = platform
                self.releaseType = releaseType
                self.usesIdfa = usesIdfa
                self.versionString = versionString
            }
        }

        public struct Relationships: Codable {
            public var app: App
            public var build: Build?

            public struct App: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct Build: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case builds
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(app: App, build: Build? = nil) {
                self.app = app
                self.build = build
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersions
        }

        public init(attributes: Attributes, relationships: Relationships, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionLocalization: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var description: String?
        public var keywords: String?
        public var locale: String?
        public var marketingURL: URL?
        public var promotionalText: String?
        public var supportURL: URL?
        public var whatsNew: String?

        public init(description: String? = nil, keywords: String? = nil, locale: String? = nil, marketingURL: URL? = nil, promotionalText: String? = nil, supportURL: URL? = nil, whatsNew: String? = nil) {
            self.description = description
            self.keywords = keywords
            self.locale = locale
            self.marketingURL = marketingURL
            self.promotionalText = promotionalText
            self.supportURL = supportURL
            self.whatsNew = whatsNew
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case keywords
            case locale
            case marketingURL = "marketingUrl"
            case promotionalText
            case supportURL = "supportUrl"
            case whatsNew
        }
    }

    public struct Relationships: Codable {
        public var appPreviewSets: AppPreviewSets?
        public var appScreenshotSets: AppScreenshotSets?
        public var appStoreVersion: AppStoreVersion?

        public struct AppPreviewSets: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appPreviewSets
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct AppScreenshotSets: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appScreenshotSets
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct AppStoreVersion: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(appPreviewSets: AppPreviewSets? = nil, appScreenshotSets: AppScreenshotSets? = nil, appStoreVersion: AppStoreVersion? = nil) {
            self.appPreviewSets = appPreviewSets
            self.appScreenshotSets = appScreenshotSets
            self.appStoreVersion = appStoreVersion
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreVersionLocalizations
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct AppStoreVersionLocalizationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var relationships: Relationships
        public var type: `Type`

        public struct Attributes: Codable {
            public var description: String?
            public var keywords: String?
            public var locale: String
            public var marketingURL: URL?
            public var promotionalText: String?
            public var supportURL: URL?
            public var whatsNew: String?

            public init(description: String? = nil, keywords: String? = nil, locale: String, marketingURL: URL? = nil, promotionalText: String? = nil, supportURL: URL? = nil, whatsNew: String? = nil) {
                self.description = description
                self.keywords = keywords
                self.locale = locale
                self.marketingURL = marketingURL
                self.promotionalText = promotionalText
                self.supportURL = supportURL
                self.whatsNew = whatsNew
            }

            private enum CodingKeys: String, CodingKey {
                case description
                case keywords
                case locale
                case marketingURL = "marketingUrl"
                case promotionalText
                case supportURL = "supportUrl"
                case whatsNew
            }
        }

        public struct Relationships: Codable {
            public var appStoreVersion: AppStoreVersion

            public struct AppStoreVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersion: AppStoreVersion) {
                self.appStoreVersion = appStoreVersion
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionLocalizations
        }

        public init(attributes: Attributes, relationships: Relationships, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionLocalizationResponse: Codable {
    /// AppStoreVersionLocalization
    public var data: AppStoreVersionLocalization
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case appScreenshotSet(AppScreenshotSet)
        case appPreviewSet(AppPreviewSet)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppScreenshotSet.self) {
                self = .appScreenshotSet(value)
            } else if let value = try? container.decode(AppPreviewSet.self) {
                self = .appPreviewSet(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appScreenshotSet(let value): try container.encode(value)
            case .appPreviewSet(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppStoreVersionLocalization, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct AppStoreVersionLocalizationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var description: String?
            public var keywords: String?
            public var marketingURL: URL?
            public var promotionalText: String?
            public var supportURL: URL?
            public var whatsNew: String?

            public init(description: String? = nil, keywords: String? = nil, marketingURL: URL? = nil, promotionalText: String? = nil, supportURL: URL? = nil, whatsNew: String? = nil) {
                self.description = description
                self.keywords = keywords
                self.marketingURL = marketingURL
                self.promotionalText = promotionalText
                self.supportURL = supportURL
                self.whatsNew = whatsNew
            }

            private enum CodingKeys: String, CodingKey {
                case description
                case keywords
                case marketingURL = "marketingUrl"
                case promotionalText
                case supportURL = "supportUrl"
                case whatsNew
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionLocalizations
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionLocalizationsResponse: Codable {
    public var data: [AppStoreVersionLocalization]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case appScreenshotSet(AppScreenshotSet)
        case appPreviewSet(AppPreviewSet)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AppScreenshotSet.self) {
                self = .appScreenshotSet(value)
            } else if let value = try? container.decode(AppPreviewSet.self) {
                self = .appPreviewSet(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .appScreenshotSet(let value): try container.encode(value)
            case .appPreviewSet(let value): try container.encode(value)
            }
        }
    }

    public init(data: [AppStoreVersionLocalization], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppStoreVersionPhasedRelease: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var type: `Type`

    public struct Attributes: Codable {
        public var currentDayNumber: Int?
        public var phasedReleaseState: PhasedReleaseState?
        public var startDate: Date?
        public var totalPauseDuration: Int?

        public init(currentDayNumber: Int? = nil, phasedReleaseState: PhasedReleaseState? = nil, startDate: Date? = nil, totalPauseDuration: Int? = nil) {
            self.currentDayNumber = currentDayNumber
            self.phasedReleaseState = phasedReleaseState
            self.startDate = startDate
            self.totalPauseDuration = totalPauseDuration
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreVersionPhasedReleases
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.type = type
    }
}

public struct AppStoreVersionPhasedReleaseCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var relationships: Relationships
        public var type: `Type`

        public struct Attributes: Codable {
            public var phasedReleaseState: PhasedReleaseState?

            public init(phasedReleaseState: PhasedReleaseState? = nil) {
                self.phasedReleaseState = phasedReleaseState
            }
        }

        public struct Relationships: Codable {
            public var appStoreVersion: AppStoreVersion

            public struct AppStoreVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersion: AppStoreVersion) {
                self.appStoreVersion = appStoreVersion
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionPhasedReleases
        }

        public init(attributes: Attributes? = nil, relationships: Relationships, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionPhasedReleaseResponse: Codable {
    /// AppStoreVersionPhasedRelease
    public var data: AppStoreVersionPhasedRelease
    public var links: DocumentLinks

    public init(data: AppStoreVersionPhasedRelease, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct AppStoreVersionPhasedReleaseUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var phasedReleaseState: PhasedReleaseState?

            public init(phasedReleaseState: PhasedReleaseState? = nil) {
                self.phasedReleaseState = phasedReleaseState
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionPhasedReleases
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionResponse: Codable {
    /// AppStoreVersion
    public var data: AppStoreVersion
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case ageRatingDeclaration(AgeRatingDeclaration)
        case appStoreVersionLocalization(AppStoreVersionLocalization)
        case build(Build)
        case appStoreVersionPhasedRelease(AppStoreVersionPhasedRelease)
        case routingAppCoverage(RoutingAppCoverage)
        case appStoreReviewDetail(AppStoreReviewDetail)
        case appStoreVersionSubmission(AppStoreVersionSubmission)
        case idfaDeclaration(IdfaDeclaration)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AgeRatingDeclaration.self) {
                self = .ageRatingDeclaration(value)
            } else if let value = try? container.decode(AppStoreVersionLocalization.self) {
                self = .appStoreVersionLocalization(value)
            } else if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(AppStoreVersionPhasedRelease.self) {
                self = .appStoreVersionPhasedRelease(value)
            } else if let value = try? container.decode(RoutingAppCoverage.self) {
                self = .routingAppCoverage(value)
            } else if let value = try? container.decode(AppStoreReviewDetail.self) {
                self = .appStoreReviewDetail(value)
            } else if let value = try? container.decode(AppStoreVersionSubmission.self) {
                self = .appStoreVersionSubmission(value)
            } else if let value = try? container.decode(IdfaDeclaration.self) {
                self = .idfaDeclaration(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .ageRatingDeclaration(let value): try container.encode(value)
            case .appStoreVersionLocalization(let value): try container.encode(value)
            case .build(let value): try container.encode(value)
            case .appStoreVersionPhasedRelease(let value): try container.encode(value)
            case .routingAppCoverage(let value): try container.encode(value)
            case .appStoreReviewDetail(let value): try container.encode(value)
            case .appStoreVersionSubmission(let value): try container.encode(value)
            case .idfaDeclaration(let value): try container.encode(value)
            }
        }
    }

    public init(data: AppStoreVersion, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public enum AppStoreVersionState: String, Codable, CaseIterable {
    case developerRemovedFromSale = "DEVELOPER_REMOVED_FROM_SALE"
    case developerRejected = "DEVELOPER_REJECTED"
    case inReview = "IN_REVIEW"
    case invalidBinary = "INVALID_BINARY"
    case metadataRejected = "METADATA_REJECTED"
    case pendingAppleRelease = "PENDING_APPLE_RELEASE"
    case pendingContract = "PENDING_CONTRACT"
    case pendingDeveloperRelease = "PENDING_DEVELOPER_RELEASE"
    case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
    case preorderReadyForSale = "PREORDER_READY_FOR_SALE"
    case processingForAppStore = "PROCESSING_FOR_APP_STORE"
    case readyForSale = "READY_FOR_SALE"
    case rejected = "REJECTED"
    case removedFromSale = "REMOVED_FROM_SALE"
    case waitingForExportCompliance = "WAITING_FOR_EXPORT_COMPLIANCE"
    case waitingForReview = "WAITING_FOR_REVIEW"
    case replacedWithNewVersion = "REPLACED_WITH_NEW_VERSION"
}

public struct AppStoreVersionSubmission: Codable {
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Relationships: Codable {
        public var appStoreVersion: AppStoreVersion?

        public struct AppStoreVersion: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(appStoreVersion: AppStoreVersion? = nil) {
            self.appStoreVersion = appStoreVersion
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case appStoreVersionSubmissions
    }

    public init(id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct AppStoreVersionSubmissionCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var type: `Type`

        public struct Relationships: Codable {
            public var appStoreVersion: AppStoreVersion

            public struct AppStoreVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersion: AppStoreVersion) {
                self.appStoreVersion = appStoreVersion
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersionSubmissions
        }

        public init(relationships: Relationships, type: `Type`) {
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionSubmissionResponse: Codable {
    /// AppStoreVersionSubmission
    public var data: AppStoreVersionSubmission
    public var links: DocumentLinks

    public init(data: AppStoreVersionSubmission, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct AppStoreVersionUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var relationships: Relationships?
        public var type: `Type`

        public struct Attributes: Codable {
            public var copyright: String?
            public var isDownloadable: Bool?
            public var earliestReleaseDate: Date?
            public var releaseType: ReleaseType?
            public var usesIdfa: Bool?
            public var versionString: String?

            public enum ReleaseType: String, Codable, CaseIterable {
                case manual = "MANUAL"
                case afterApproval = "AFTER_APPROVAL"
                case scheduled = "SCHEDULED"
            }

            public init(copyright: String? = nil, isDownloadable: Bool? = nil, earliestReleaseDate: Date? = nil, releaseType: ReleaseType? = nil, usesIdfa: Bool? = nil, versionString: String? = nil) {
                self.copyright = copyright
                self.isDownloadable = isDownloadable
                self.earliestReleaseDate = earliestReleaseDate
                self.releaseType = releaseType
                self.usesIdfa = usesIdfa
                self.versionString = versionString
            }

            private enum CodingKeys: String, CodingKey {
                case copyright
                case isDownloadable = "downloadable"
                case earliestReleaseDate
                case releaseType
                case usesIdfa
                case versionString
            }
        }

        public struct Relationships: Codable {
            public var build: Build?

            public struct Build: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case builds
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(build: Build? = nil) {
                self.build = build
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case appStoreVersions
        }

        public init(attributes: Attributes? = nil, id: String, relationships: Relationships? = nil, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppStoreVersionsResponse: Codable {
    public var data: [AppStoreVersion]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case ageRatingDeclaration(AgeRatingDeclaration)
        case appStoreVersionLocalization(AppStoreVersionLocalization)
        case build(Build)
        case appStoreVersionPhasedRelease(AppStoreVersionPhasedRelease)
        case routingAppCoverage(RoutingAppCoverage)
        case appStoreReviewDetail(AppStoreReviewDetail)
        case appStoreVersionSubmission(AppStoreVersionSubmission)
        case idfaDeclaration(IdfaDeclaration)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(AgeRatingDeclaration.self) {
                self = .ageRatingDeclaration(value)
            } else if let value = try? container.decode(AppStoreVersionLocalization.self) {
                self = .appStoreVersionLocalization(value)
            } else if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(AppStoreVersionPhasedRelease.self) {
                self = .appStoreVersionPhasedRelease(value)
            } else if let value = try? container.decode(RoutingAppCoverage.self) {
                self = .routingAppCoverage(value)
            } else if let value = try? container.decode(AppStoreReviewDetail.self) {
                self = .appStoreReviewDetail(value)
            } else if let value = try? container.decode(AppStoreVersionSubmission.self) {
                self = .appStoreVersionSubmission(value)
            } else if let value = try? container.decode(IdfaDeclaration.self) {
                self = .idfaDeclaration(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .ageRatingDeclaration(let value): try container.encode(value)
            case .appStoreVersionLocalization(let value): try container.encode(value)
            case .build(let value): try container.encode(value)
            case .appStoreVersionPhasedRelease(let value): try container.encode(value)
            case .routingAppCoverage(let value): try container.encode(value)
            case .appStoreReviewDetail(let value): try container.encode(value)
            case .appStoreVersionSubmission(let value): try container.encode(value)
            case .idfaDeclaration(let value): try container.encode(value)
            }
        }
    }

    public init(data: [AppStoreVersion], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct AppUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var relationships: Relationships?
        public var type: `Type`

        public struct Attributes: Codable {
            public var isAvailableInNewTerritories: Bool?
            public var bundleID: String?
            public var contentRightsDeclaration: ContentRightsDeclaration?
            public var primaryLocale: String?

            public enum ContentRightsDeclaration: String, Codable, CaseIterable {
                case doesNotUseThirdPartyContent = "DOES_NOT_USE_THIRD_PARTY_CONTENT"
                case usesThirdPartyContent = "USES_THIRD_PARTY_CONTENT"
            }

            public init(isAvailableInNewTerritories: Bool? = nil, bundleID: String? = nil, contentRightsDeclaration: ContentRightsDeclaration? = nil, primaryLocale: String? = nil) {
                self.isAvailableInNewTerritories = isAvailableInNewTerritories
                self.bundleID = bundleID
                self.contentRightsDeclaration = contentRightsDeclaration
                self.primaryLocale = primaryLocale
            }

            private enum CodingKeys: String, CodingKey {
                case isAvailableInNewTerritories = "availableInNewTerritories"
                case bundleID = "bundleId"
                case contentRightsDeclaration
                case primaryLocale
            }
        }

        public struct Relationships: Codable {
            public var availableTerritories: AvailableTerritories?
            public var prices: Prices?

            public struct AvailableTerritories: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case territories
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public struct Prices: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appPrices
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(availableTerritories: AvailableTerritories? = nil, prices: Prices? = nil) {
                self.availableTerritories = availableTerritories
                self.prices = prices
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case apps
        }

        public init(attributes: Attributes? = nil, id: String, relationships: Relationships? = nil, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct AppsResponse: Codable {
    public var data: [App]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case betaGroup(BetaGroup)
        case appStoreVersion(AppStoreVersion)
        case prereleaseVersion(PrereleaseVersion)
        case betaAppLocalization(BetaAppLocalization)
        case build(Build)
        case betaLicenseAgreement(BetaLicenseAgreement)
        case betaAppReviewDetail(BetaAppReviewDetail)
        case appInfo(AppInfo)
        case endUserLicenseAgreement(EndUserLicenseAgreement)
        case appPreOrder(AppPreOrder)
        case appPrice(AppPrice)
        case territory(Territory)
        case inAppPurchase(InAppPurchase)
        case gameCenterEnabledVersion(GameCenterEnabledVersion)
        case perfPowerMetric(PerfPowerMetric)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(BetaGroup.self) {
                self = .betaGroup(value)
            } else if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(PrereleaseVersion.self) {
                self = .prereleaseVersion(value)
            } else if let value = try? container.decode(BetaAppLocalization.self) {
                self = .betaAppLocalization(value)
            } else if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(BetaLicenseAgreement.self) {
                self = .betaLicenseAgreement(value)
            } else if let value = try? container.decode(BetaAppReviewDetail.self) {
                self = .betaAppReviewDetail(value)
            } else if let value = try? container.decode(AppInfo.self) {
                self = .appInfo(value)
            } else if let value = try? container.decode(EndUserLicenseAgreement.self) {
                self = .endUserLicenseAgreement(value)
            } else if let value = try? container.decode(AppPreOrder.self) {
                self = .appPreOrder(value)
            } else if let value = try? container.decode(AppPrice.self) {
                self = .appPrice(value)
            } else if let value = try? container.decode(Territory.self) {
                self = .territory(value)
            } else if let value = try? container.decode(InAppPurchase.self) {
                self = .inAppPurchase(value)
            } else if let value = try? container.decode(GameCenterEnabledVersion.self) {
                self = .gameCenterEnabledVersion(value)
            } else if let value = try? container.decode(PerfPowerMetric.self) {
                self = .perfPowerMetric(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .betaGroup(let value): try container.encode(value)
            case .appStoreVersion(let value): try container.encode(value)
            case .prereleaseVersion(let value): try container.encode(value)
            case .betaAppLocalization(let value): try container.encode(value)
            case .build(let value): try container.encode(value)
            case .betaLicenseAgreement(let value): try container.encode(value)
            case .betaAppReviewDetail(let value): try container.encode(value)
            case .appInfo(let value): try container.encode(value)
            case .endUserLicenseAgreement(let value): try container.encode(value)
            case .appPreOrder(let value): try container.encode(value)
            case .appPrice(let value): try container.encode(value)
            case .territory(let value): try container.encode(value)
            case .inAppPurchase(let value): try container.encode(value)
            case .gameCenterEnabledVersion(let value): try container.encode(value)
            case .perfPowerMetric(let value): try container.encode(value)
            }
        }
    }

    public init(data: [App], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct BetaAppLocalization: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var description: String?
        public var feedbackEmail: String?
        public var locale: String?
        public var marketingURL: String?
        public var privacyPolicyURL: String?
        public var tvOsPrivacyPolicy: String?

        public init(description: String? = nil, feedbackEmail: String? = nil, locale: String? = nil, marketingURL: String? = nil, privacyPolicyURL: String? = nil, tvOsPrivacyPolicy: String? = nil) {
            self.description = description
            self.feedbackEmail = feedbackEmail
            self.locale = locale
            self.marketingURL = marketingURL
            self.privacyPolicyURL = privacyPolicyURL
            self.tvOsPrivacyPolicy = tvOsPrivacyPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case feedbackEmail
            case locale
            case marketingURL = "marketingUrl"
            case privacyPolicyURL = "privacyPolicyUrl"
            case tvOsPrivacyPolicy
        }
    }

    public struct Relationships: Codable {
        public var app: App?

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(app: App? = nil) {
            self.app = app
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case betaAppLocalizations
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct BetaAppLocalizationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var relationships: Relationships
        public var type: `Type`

        public struct Attributes: Codable {
            public var description: String?
            public var feedbackEmail: String?
            public var locale: String
            public var marketingURL: String?
            public var privacyPolicyURL: String?
            public var tvOsPrivacyPolicy: String?

            public init(description: String? = nil, feedbackEmail: String? = nil, locale: String, marketingURL: String? = nil, privacyPolicyURL: String? = nil, tvOsPrivacyPolicy: String? = nil) {
                self.description = description
                self.feedbackEmail = feedbackEmail
                self.locale = locale
                self.marketingURL = marketingURL
                self.privacyPolicyURL = privacyPolicyURL
                self.tvOsPrivacyPolicy = tvOsPrivacyPolicy
            }

            private enum CodingKeys: String, CodingKey {
                case description
                case feedbackEmail
                case locale
                case marketingURL = "marketingUrl"
                case privacyPolicyURL = "privacyPolicyUrl"
                case tvOsPrivacyPolicy
            }
        }

        public struct Relationships: Codable {
            public var app: App

            public struct App: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(app: App) {
                self.app = app
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case betaAppLocalizations
        }

        public init(attributes: Attributes, relationships: Relationships, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaAppLocalizationResponse: Codable {
    /// BetaAppLocalization
    public var data: BetaAppLocalization
    public var included: [App]?
    public var links: DocumentLinks

    public init(data: BetaAppLocalization, included: [App]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct BetaAppLocalizationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var description: String?
            public var feedbackEmail: String?
            public var marketingURL: String?
            public var privacyPolicyURL: String?
            public var tvOsPrivacyPolicy: String?

            public init(description: String? = nil, feedbackEmail: String? = nil, marketingURL: String? = nil, privacyPolicyURL: String? = nil, tvOsPrivacyPolicy: String? = nil) {
                self.description = description
                self.feedbackEmail = feedbackEmail
                self.marketingURL = marketingURL
                self.privacyPolicyURL = privacyPolicyURL
                self.tvOsPrivacyPolicy = tvOsPrivacyPolicy
            }

            private enum CodingKeys: String, CodingKey {
                case description
                case feedbackEmail
                case marketingURL = "marketingUrl"
                case privacyPolicyURL = "privacyPolicyUrl"
                case tvOsPrivacyPolicy
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case betaAppLocalizations
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaAppLocalizationsResponse: Codable {
    public var data: [BetaAppLocalization]
    public var included: [App]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [BetaAppLocalization], included: [App]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct BetaAppReviewDetail: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var contactEmail: String?
        public var contactFirstName: String?
        public var contactLastName: String?
        public var contactPhone: String?
        public var demoAccountName: String?
        public var demoAccountPassword: String?
        public var isDemoAccountRequired: Bool?
        public var notes: String?

        public init(contactEmail: String? = nil, contactFirstName: String? = nil, contactLastName: String? = nil, contactPhone: String? = nil, demoAccountName: String? = nil, demoAccountPassword: String? = nil, isDemoAccountRequired: Bool? = nil, notes: String? = nil) {
            self.contactEmail = contactEmail
            self.contactFirstName = contactFirstName
            self.contactLastName = contactLastName
            self.contactPhone = contactPhone
            self.demoAccountName = demoAccountName
            self.demoAccountPassword = demoAccountPassword
            self.isDemoAccountRequired = isDemoAccountRequired
            self.notes = notes
        }

        private enum CodingKeys: String, CodingKey {
            case contactEmail
            case contactFirstName
            case contactLastName
            case contactPhone
            case demoAccountName
            case demoAccountPassword
            case isDemoAccountRequired = "demoAccountRequired"
            case notes
        }
    }

    public struct Relationships: Codable {
        public var app: App?

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(app: App? = nil) {
            self.app = app
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case betaAppReviewDetails
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct BetaAppReviewDetailResponse: Codable {
    /// BetaAppReviewDetail
    public var data: BetaAppReviewDetail
    public var included: [App]?
    public var links: DocumentLinks

    public init(data: BetaAppReviewDetail, included: [App]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct BetaAppReviewDetailUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var contactEmail: String?
            public var contactFirstName: String?
            public var contactLastName: String?
            public var contactPhone: String?
            public var demoAccountName: String?
            public var demoAccountPassword: String?
            public var isDemoAccountRequired: Bool?
            public var notes: String?

            public init(contactEmail: String? = nil, contactFirstName: String? = nil, contactLastName: String? = nil, contactPhone: String? = nil, demoAccountName: String? = nil, demoAccountPassword: String? = nil, isDemoAccountRequired: Bool? = nil, notes: String? = nil) {
                self.contactEmail = contactEmail
                self.contactFirstName = contactFirstName
                self.contactLastName = contactLastName
                self.contactPhone = contactPhone
                self.demoAccountName = demoAccountName
                self.demoAccountPassword = demoAccountPassword
                self.isDemoAccountRequired = isDemoAccountRequired
                self.notes = notes
            }

            private enum CodingKeys: String, CodingKey {
                case contactEmail
                case contactFirstName
                case contactLastName
                case contactPhone
                case demoAccountName
                case demoAccountPassword
                case isDemoAccountRequired = "demoAccountRequired"
                case notes
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case betaAppReviewDetails
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaAppReviewDetailsResponse: Codable {
    public var data: [BetaAppReviewDetail]
    public var included: [App]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [BetaAppReviewDetail], included: [App]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct BetaAppReviewSubmission: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var betaReviewState: BetaReviewState?

        public init(betaReviewState: BetaReviewState? = nil) {
            self.betaReviewState = betaReviewState
        }
    }

    public struct Relationships: Codable {
        public var build: Build?

        public struct Build: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(build: Build? = nil) {
            self.build = build
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case betaAppReviewSubmissions
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct BetaAppReviewSubmissionCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var type: `Type`

        public struct Relationships: Codable {
            public var build: Build

            public struct Build: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case builds
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(build: Build) {
                self.build = build
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case betaAppReviewSubmissions
        }

        public init(relationships: Relationships, type: `Type`) {
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaAppReviewSubmissionResponse: Codable {
    /// BetaAppReviewSubmission
    public var data: BetaAppReviewSubmission
    public var included: [Build]?
    public var links: DocumentLinks

    public init(data: BetaAppReviewSubmission, included: [Build]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct BetaAppReviewSubmissionsResponse: Codable {
    public var data: [BetaAppReviewSubmission]
    public var included: [Build]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [BetaAppReviewSubmission], included: [Build]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct BetaBuildLocalization: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var locale: String?
        public var whatsNew: String?

        public init(locale: String? = nil, whatsNew: String? = nil) {
            self.locale = locale
            self.whatsNew = whatsNew
        }
    }

    public struct Relationships: Codable {
        public var build: Build?

        public struct Build: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(build: Build? = nil) {
            self.build = build
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case betaBuildLocalizations
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct BetaBuildLocalizationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var relationships: Relationships
        public var type: `Type`

        public struct Attributes: Codable {
            public var locale: String
            public var whatsNew: String?

            public init(locale: String, whatsNew: String? = nil) {
                self.locale = locale
                self.whatsNew = whatsNew
            }
        }

        public struct Relationships: Codable {
            public var build: Build

            public struct Build: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case builds
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(build: Build) {
                self.build = build
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case betaBuildLocalizations
        }

        public init(attributes: Attributes, relationships: Relationships, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaBuildLocalizationResponse: Codable {
    /// BetaBuildLocalization
    public var data: BetaBuildLocalization
    public var included: [Build]?
    public var links: DocumentLinks

    public init(data: BetaBuildLocalization, included: [Build]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct BetaBuildLocalizationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var whatsNew: String?

            public init(whatsNew: String? = nil) {
                self.whatsNew = whatsNew
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case betaBuildLocalizations
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaBuildLocalizationsResponse: Codable {
    public var data: [BetaBuildLocalization]
    public var included: [Build]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [BetaBuildLocalization], included: [Build]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct BetaGroup: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var createdDate: Date?
        public var isFeedbackEnabled: Bool?
        public var isInternalGroup: Bool?
        public var name: String?
        public var publicLink: String?
        public var isPublicLinkEnabled: Bool?
        public var publicLinkID: String?
        public var publicLinkLimit: Int?
        public var isPublicLinkLimitEnabled: Bool?

        public init(createdDate: Date? = nil, isFeedbackEnabled: Bool? = nil, isInternalGroup: Bool? = nil, name: String? = nil, publicLink: String? = nil, isPublicLinkEnabled: Bool? = nil, publicLinkID: String? = nil, publicLinkLimit: Int? = nil, isPublicLinkLimitEnabled: Bool? = nil) {
            self.createdDate = createdDate
            self.isFeedbackEnabled = isFeedbackEnabled
            self.isInternalGroup = isInternalGroup
            self.name = name
            self.publicLink = publicLink
            self.isPublicLinkEnabled = isPublicLinkEnabled
            self.publicLinkID = publicLinkID
            self.publicLinkLimit = publicLinkLimit
            self.isPublicLinkLimitEnabled = isPublicLinkLimitEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case createdDate
            case isFeedbackEnabled = "feedbackEnabled"
            case isInternalGroup
            case name
            case publicLink
            case isPublicLinkEnabled = "publicLinkEnabled"
            case publicLinkID = "publicLinkId"
            case publicLinkLimit
            case isPublicLinkLimitEnabled = "publicLinkLimitEnabled"
        }
    }

    public struct Relationships: Codable {
        public var app: App?
        public var betaTesters: BetaTesters?
        public var builds: Builds?

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct BetaTesters: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case betaTesters
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct Builds: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public init(app: App? = nil, betaTesters: BetaTesters? = nil, builds: Builds? = nil) {
            self.app = app
            self.betaTesters = betaTesters
            self.builds = builds
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case betaGroups
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct BetaGroupBetaTestersLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case betaTesters
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct BetaGroupBetaTestersLinkagesResponse: Codable {
    public var data: [Datum]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case betaTesters
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct BetaGroupBuildsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case builds
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct BetaGroupBuildsLinkagesResponse: Codable {
    public var data: [Datum]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case builds
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct BetaGroupCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var relationships: Relationships
        public var type: `Type`

        public struct Attributes: Codable {
            public var isFeedbackEnabled: Bool?
            public var name: String
            public var isPublicLinkEnabled: Bool?
            public var publicLinkLimit: Int?
            public var isPublicLinkLimitEnabled: Bool?

            public init(isFeedbackEnabled: Bool? = nil, name: String, isPublicLinkEnabled: Bool? = nil, publicLinkLimit: Int? = nil, isPublicLinkLimitEnabled: Bool? = nil) {
                self.isFeedbackEnabled = isFeedbackEnabled
                self.name = name
                self.isPublicLinkEnabled = isPublicLinkEnabled
                self.publicLinkLimit = publicLinkLimit
                self.isPublicLinkLimitEnabled = isPublicLinkLimitEnabled
            }

            private enum CodingKeys: String, CodingKey {
                case isFeedbackEnabled = "feedbackEnabled"
                case name
                case isPublicLinkEnabled = "publicLinkEnabled"
                case publicLinkLimit
                case isPublicLinkLimitEnabled = "publicLinkLimitEnabled"
            }
        }

        public struct Relationships: Codable {
            public var app: App
            public var betaTesters: BetaTesters?
            public var builds: Builds?

            public struct App: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct BetaTesters: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case betaTesters
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public struct Builds: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case builds
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(app: App, betaTesters: BetaTesters? = nil, builds: Builds? = nil) {
                self.app = app
                self.betaTesters = betaTesters
                self.builds = builds
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case betaGroups
        }

        public init(attributes: Attributes, relationships: Relationships, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaGroupResponse: Codable {
    /// BetaGroup
    public var data: BetaGroup
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case app(App)
        case build(Build)
        case betaTester(BetaTester)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(BetaTester.self) {
                self = .betaTester(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .build(let value): try container.encode(value)
            case .betaTester(let value): try container.encode(value)
            }
        }
    }

    public init(data: BetaGroup, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct BetaGroupUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var isFeedbackEnabled: Bool?
            public var name: String?
            public var isPublicLinkEnabled: Bool?
            public var publicLinkLimit: Int?
            public var isPublicLinkLimitEnabled: Bool?

            public init(isFeedbackEnabled: Bool? = nil, name: String? = nil, isPublicLinkEnabled: Bool? = nil, publicLinkLimit: Int? = nil, isPublicLinkLimitEnabled: Bool? = nil) {
                self.isFeedbackEnabled = isFeedbackEnabled
                self.name = name
                self.isPublicLinkEnabled = isPublicLinkEnabled
                self.publicLinkLimit = publicLinkLimit
                self.isPublicLinkLimitEnabled = isPublicLinkLimitEnabled
            }

            private enum CodingKeys: String, CodingKey {
                case isFeedbackEnabled = "feedbackEnabled"
                case name
                case isPublicLinkEnabled = "publicLinkEnabled"
                case publicLinkLimit
                case isPublicLinkLimitEnabled = "publicLinkLimitEnabled"
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case betaGroups
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaGroupsResponse: Codable {
    public var data: [BetaGroup]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case app(App)
        case build(Build)
        case betaTester(BetaTester)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(BetaTester.self) {
                self = .betaTester(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .build(let value): try container.encode(value)
            case .betaTester(let value): try container.encode(value)
            }
        }
    }

    public init(data: [BetaGroup], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public enum BetaInviteType: String, Codable, CaseIterable {
    case email = "EMAIL"
    case publicLink = "PUBLIC_LINK"
}

public struct BetaLicenseAgreement: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var agreementText: String?

        public init(agreementText: String? = nil) {
            self.agreementText = agreementText
        }
    }

    public struct Relationships: Codable {
        public var app: App?

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(app: App? = nil) {
            self.app = app
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case betaLicenseAgreements
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct BetaLicenseAgreementResponse: Codable {
    /// BetaLicenseAgreement
    public var data: BetaLicenseAgreement
    public var included: [App]?
    public var links: DocumentLinks

    public init(data: BetaLicenseAgreement, included: [App]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct BetaLicenseAgreementUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var agreementText: String?

            public init(agreementText: String? = nil) {
                self.agreementText = agreementText
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case betaLicenseAgreements
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaLicenseAgreementsResponse: Codable {
    public var data: [BetaLicenseAgreement]
    public var included: [App]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [BetaLicenseAgreement], included: [App]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public enum BetaReviewState: String, Codable, CaseIterable {
    case waitingForReview = "WAITING_FOR_REVIEW"
    case inReview = "IN_REVIEW"
    case rejected = "REJECTED"
    case approved = "APPROVED"
}

public struct BetaTester: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var email: String?
        public var firstName: String?
        public var inviteType: BetaInviteType?
        public var lastName: String?

        public init(email: String? = nil, firstName: String? = nil, inviteType: BetaInviteType? = nil, lastName: String? = nil) {
            self.email = email
            self.firstName = firstName
            self.inviteType = inviteType
            self.lastName = lastName
        }
    }

    public struct Relationships: Codable {
        public var apps: Apps?
        public var betaGroups: BetaGroups?
        public var builds: Builds?

        public struct Apps: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct BetaGroups: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case betaGroups
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct Builds: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public init(apps: Apps? = nil, betaGroups: BetaGroups? = nil, builds: Builds? = nil) {
            self.apps = apps
            self.betaGroups = betaGroups
            self.builds = builds
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case betaTesters
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct BetaTesterAppsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case apps
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct BetaTesterAppsLinkagesResponse: Codable {
    public var data: [Datum]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case apps
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct BetaTesterBetaGroupsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case betaGroups
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct BetaTesterBetaGroupsLinkagesResponse: Codable {
    public var data: [Datum]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case betaGroups
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct BetaTesterBuildsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case builds
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct BetaTesterBuildsLinkagesResponse: Codable {
    public var data: [Datum]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case builds
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct BetaTesterCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var relationships: Relationships?
        public var type: `Type`

        public struct Attributes: Codable {
            public var email: String
            public var firstName: String?
            public var lastName: String?

            public init(email: String, firstName: String? = nil, lastName: String? = nil) {
                self.email = email
                self.firstName = firstName
                self.lastName = lastName
            }
        }

        public struct Relationships: Codable {
            public var betaGroups: BetaGroups?
            public var builds: Builds?

            public struct BetaGroups: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case betaGroups
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public struct Builds: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case builds
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(betaGroups: BetaGroups? = nil, builds: Builds? = nil) {
                self.betaGroups = betaGroups
                self.builds = builds
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case betaTesters
        }

        public init(attributes: Attributes, relationships: Relationships? = nil, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaTesterInvitation: Codable {
    public var id: String
    public var links: ResourceLinks
    public var type: `Type`

    public enum `Type`: String, Codable, CaseIterable {
        case betaTesterInvitations
    }

    public init(id: String, links: ResourceLinks, type: `Type`) {
        self.id = id
        self.links = links
        self.type = type
    }
}

public struct BetaTesterInvitationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var type: `Type`

        public struct Relationships: Codable {
            public var app: App
            public var betaTester: BetaTester

            public struct App: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct BetaTester: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case betaTesters
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(app: App, betaTester: BetaTester) {
                self.app = app
                self.betaTester = betaTester
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case betaTesterInvitations
        }

        public init(relationships: Relationships, type: `Type`) {
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BetaTesterInvitationResponse: Codable {
    /// BetaTesterInvitation
    public var data: BetaTesterInvitation
    public var links: DocumentLinks

    public init(data: BetaTesterInvitation, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct BetaTesterResponse: Codable {
    /// BetaTester
    public var data: BetaTester
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case app(App)
        case betaGroup(BetaGroup)
        case build(Build)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(BetaGroup.self) {
                self = .betaGroup(value)
            } else if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .betaGroup(let value): try container.encode(value)
            case .build(let value): try container.encode(value)
            }
        }
    }

    public init(data: BetaTester, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct BetaTestersResponse: Codable {
    public var data: [BetaTester]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case app(App)
        case betaGroup(BetaGroup)
        case build(Build)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(BetaGroup.self) {
                self = .betaGroup(value)
            } else if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .app(let value): try container.encode(value)
            case .betaGroup(let value): try container.encode(value)
            case .build(let value): try container.encode(value)
            }
        }
    }

    public init(data: [BetaTester], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public enum BrazilAgeRating: String, Codable, CaseIterable {
    case l = "L"
    case ten = "TEN"
    case twelve = "TWELVE"
    case fourteen = "FOURTEEN"
    case sixteen = "SIXTEEN"
    case eighteen = "EIGHTEEN"
}

public struct Build: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var expirationDate: Date?
        public var isExpired: Bool?
        public var iconAssetToken: ImageAsset?
        public var minOsVersion: String?
        public var processingState: ProcessingState?
        public var uploadedDate: Date?
        public var usesNonExemptEncryption: Bool?
        public var version: String?

        public enum ProcessingState: String, Codable, CaseIterable {
            case processing = "PROCESSING"
            case failed = "FAILED"
            case invalid = "INVALID"
            case valid = "VALID"
        }

        public init(expirationDate: Date? = nil, isExpired: Bool? = nil, iconAssetToken: ImageAsset? = nil, minOsVersion: String? = nil, processingState: ProcessingState? = nil, uploadedDate: Date? = nil, usesNonExemptEncryption: Bool? = nil, version: String? = nil) {
            self.expirationDate = expirationDate
            self.isExpired = isExpired
            self.iconAssetToken = iconAssetToken
            self.minOsVersion = minOsVersion
            self.processingState = processingState
            self.uploadedDate = uploadedDate
            self.usesNonExemptEncryption = usesNonExemptEncryption
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case expirationDate
            case isExpired = "expired"
            case iconAssetToken
            case minOsVersion
            case processingState
            case uploadedDate
            case usesNonExemptEncryption
            case version
        }
    }

    public struct Relationships: Codable {
        public var app: App?
        public var appEncryptionDeclaration: AppEncryptionDeclaration?
        public var appStoreVersion: AppStoreVersion?
        public var betaAppReviewSubmission: BetaAppReviewSubmission?
        public var betaBuildLocalizations: BetaBuildLocalizations?
        public var buildBetaDetail: BuildBetaDetail?
        public var icons: Icons?
        public var individualTesters: IndividualTesters?
        public var preReleaseVersion: PreReleaseVersion?

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppEncryptionDeclaration: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appEncryptionDeclarations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct AppStoreVersion: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct BetaAppReviewSubmission: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case betaAppReviewSubmissions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct BetaBuildLocalizations: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case betaBuildLocalizations
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct BuildBetaDetail: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case buildBetaDetails
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct Icons: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case buildIcons
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct IndividualTesters: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case betaTesters
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct PreReleaseVersion: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case preReleaseVersions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(app: App? = nil, appEncryptionDeclaration: AppEncryptionDeclaration? = nil, appStoreVersion: AppStoreVersion? = nil, betaAppReviewSubmission: BetaAppReviewSubmission? = nil, betaBuildLocalizations: BetaBuildLocalizations? = nil, buildBetaDetail: BuildBetaDetail? = nil, icons: Icons? = nil, individualTesters: IndividualTesters? = nil, preReleaseVersion: PreReleaseVersion? = nil) {
            self.app = app
            self.appEncryptionDeclaration = appEncryptionDeclaration
            self.appStoreVersion = appStoreVersion
            self.betaAppReviewSubmission = betaAppReviewSubmission
            self.betaBuildLocalizations = betaBuildLocalizations
            self.buildBetaDetail = buildBetaDetail
            self.icons = icons
            self.individualTesters = individualTesters
            self.preReleaseVersion = preReleaseVersion
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case builds
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct BuildAppEncryptionDeclarationLinkageRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case appEncryptionDeclarations
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BuildAppEncryptionDeclarationLinkageResponse: Codable {
    public var data: Data
    public var links: DocumentLinks

    public struct Data: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case appEncryptionDeclarations
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: Data, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct BuildBetaDetail: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var isAutoNotifyEnabled: Bool?
        public var externalBuildState: ExternalBetaState?
        public var internalBuildState: InternalBetaState?

        public init(isAutoNotifyEnabled: Bool? = nil, externalBuildState: ExternalBetaState? = nil, internalBuildState: InternalBetaState? = nil) {
            self.isAutoNotifyEnabled = isAutoNotifyEnabled
            self.externalBuildState = externalBuildState
            self.internalBuildState = internalBuildState
        }

        private enum CodingKeys: String, CodingKey {
            case isAutoNotifyEnabled = "autoNotifyEnabled"
            case externalBuildState
            case internalBuildState
        }
    }

    public struct Relationships: Codable {
        public var build: Build?

        public struct Build: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(build: Build? = nil) {
            self.build = build
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case buildBetaDetails
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct BuildBetaDetailResponse: Codable {
    /// BuildBetaDetail
    public var data: BuildBetaDetail
    public var included: [Build]?
    public var links: DocumentLinks

    public init(data: BuildBetaDetail, included: [Build]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct BuildBetaDetailUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var isAutoNotifyEnabled: Bool?

            public init(isAutoNotifyEnabled: Bool? = nil) {
                self.isAutoNotifyEnabled = isAutoNotifyEnabled
            }

            private enum CodingKeys: String, CodingKey {
                case isAutoNotifyEnabled = "autoNotifyEnabled"
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case buildBetaDetails
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BuildBetaDetailsResponse: Codable {
    public var data: [BuildBetaDetail]
    public var included: [Build]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [BuildBetaDetail], included: [Build]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct BuildBetaGroupsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case betaGroups
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct BuildBetaNotification: Codable {
    public var id: String
    public var links: ResourceLinks
    public var type: `Type`

    public enum `Type`: String, Codable, CaseIterable {
        case buildBetaNotifications
    }

    public init(id: String, links: ResourceLinks, type: `Type`) {
        self.id = id
        self.links = links
        self.type = type
    }
}

public struct BuildBetaNotificationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var relationships: Relationships
        public var type: `Type`

        public struct Relationships: Codable {
            public var build: Build

            public struct Build: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case builds
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(build: Build) {
                self.build = build
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case buildBetaNotifications
        }

        public init(relationships: Relationships, type: `Type`) {
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BuildBetaNotificationResponse: Codable {
    /// BuildBetaNotification
    public var data: BuildBetaNotification
    public var links: DocumentLinks

    public init(data: BuildBetaNotification, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct BuildIcon: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var type: `Type`

    public struct Attributes: Codable {
        public var iconAsset: ImageAsset?
        public var iconType: IconAssetType?

        public init(iconAsset: ImageAsset? = nil, iconType: IconAssetType? = nil) {
            self.iconAsset = iconAsset
            self.iconType = iconType
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case buildIcons
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.type = type
    }
}

public struct BuildIconsResponse: Codable {
    public var data: [BuildIcon]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [BuildIcon], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct BuildIndividualTestersLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case betaTesters
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct BuildIndividualTestersLinkagesResponse: Codable {
    public var data: [Datum]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case betaTesters
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct BuildResponse: Codable {
    /// Build
    public var data: Build
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case prereleaseVersion(PrereleaseVersion)
        case betaTester(BetaTester)
        case betaBuildLocalization(BetaBuildLocalization)
        case appEncryptionDeclaration(AppEncryptionDeclaration)
        case betaAppReviewSubmission(BetaAppReviewSubmission)
        case app(App)
        case buildBetaDetail(BuildBetaDetail)
        case appStoreVersion(AppStoreVersion)
        case buildIcon(BuildIcon)
        case perfPowerMetric(PerfPowerMetric)
        case diagnosticSignature(DiagnosticSignature)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(PrereleaseVersion.self) {
                self = .prereleaseVersion(value)
            } else if let value = try? container.decode(BetaTester.self) {
                self = .betaTester(value)
            } else if let value = try? container.decode(BetaBuildLocalization.self) {
                self = .betaBuildLocalization(value)
            } else if let value = try? container.decode(AppEncryptionDeclaration.self) {
                self = .appEncryptionDeclaration(value)
            } else if let value = try? container.decode(BetaAppReviewSubmission.self) {
                self = .betaAppReviewSubmission(value)
            } else if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(BuildBetaDetail.self) {
                self = .buildBetaDetail(value)
            } else if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(BuildIcon.self) {
                self = .buildIcon(value)
            } else if let value = try? container.decode(PerfPowerMetric.self) {
                self = .perfPowerMetric(value)
            } else if let value = try? container.decode(DiagnosticSignature.self) {
                self = .diagnosticSignature(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .prereleaseVersion(let value): try container.encode(value)
            case .betaTester(let value): try container.encode(value)
            case .betaBuildLocalization(let value): try container.encode(value)
            case .appEncryptionDeclaration(let value): try container.encode(value)
            case .betaAppReviewSubmission(let value): try container.encode(value)
            case .app(let value): try container.encode(value)
            case .buildBetaDetail(let value): try container.encode(value)
            case .appStoreVersion(let value): try container.encode(value)
            case .buildIcon(let value): try container.encode(value)
            case .perfPowerMetric(let value): try container.encode(value)
            case .diagnosticSignature(let value): try container.encode(value)
            }
        }
    }

    public init(data: Build, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct BuildUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var relationships: Relationships?
        public var type: `Type`

        public struct Attributes: Codable {
            public var isExpired: Bool?
            public var usesNonExemptEncryption: Bool?

            public init(isExpired: Bool? = nil, usesNonExemptEncryption: Bool? = nil) {
                self.isExpired = isExpired
                self.usesNonExemptEncryption = usesNonExemptEncryption
            }

            private enum CodingKeys: String, CodingKey {
                case isExpired = "expired"
                case usesNonExemptEncryption
            }
        }

        public struct Relationships: Codable {
            public var appEncryptionDeclaration: AppEncryptionDeclaration?

            public struct AppEncryptionDeclaration: Codable {
                public var data: Data?

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appEncryptionDeclarations
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data? = nil) {
                    self.data = data
                }
            }

            public init(appEncryptionDeclaration: AppEncryptionDeclaration? = nil) {
                self.appEncryptionDeclaration = appEncryptionDeclaration
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case builds
        }

        public init(attributes: Attributes? = nil, id: String, relationships: Relationships? = nil, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BuildsResponse: Codable {
    public var data: [Build]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case prereleaseVersion(PrereleaseVersion)
        case betaTester(BetaTester)
        case betaBuildLocalization(BetaBuildLocalization)
        case appEncryptionDeclaration(AppEncryptionDeclaration)
        case betaAppReviewSubmission(BetaAppReviewSubmission)
        case app(App)
        case buildBetaDetail(BuildBetaDetail)
        case appStoreVersion(AppStoreVersion)
        case buildIcon(BuildIcon)
        case perfPowerMetric(PerfPowerMetric)
        case diagnosticSignature(DiagnosticSignature)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(PrereleaseVersion.self) {
                self = .prereleaseVersion(value)
            } else if let value = try? container.decode(BetaTester.self) {
                self = .betaTester(value)
            } else if let value = try? container.decode(BetaBuildLocalization.self) {
                self = .betaBuildLocalization(value)
            } else if let value = try? container.decode(AppEncryptionDeclaration.self) {
                self = .appEncryptionDeclaration(value)
            } else if let value = try? container.decode(BetaAppReviewSubmission.self) {
                self = .betaAppReviewSubmission(value)
            } else if let value = try? container.decode(App.self) {
                self = .app(value)
            } else if let value = try? container.decode(BuildBetaDetail.self) {
                self = .buildBetaDetail(value)
            } else if let value = try? container.decode(AppStoreVersion.self) {
                self = .appStoreVersion(value)
            } else if let value = try? container.decode(BuildIcon.self) {
                self = .buildIcon(value)
            } else if let value = try? container.decode(PerfPowerMetric.self) {
                self = .perfPowerMetric(value)
            } else if let value = try? container.decode(DiagnosticSignature.self) {
                self = .diagnosticSignature(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .prereleaseVersion(let value): try container.encode(value)
            case .betaTester(let value): try container.encode(value)
            case .betaBuildLocalization(let value): try container.encode(value)
            case .appEncryptionDeclaration(let value): try container.encode(value)
            case .betaAppReviewSubmission(let value): try container.encode(value)
            case .app(let value): try container.encode(value)
            case .buildBetaDetail(let value): try container.encode(value)
            case .appStoreVersion(let value): try container.encode(value)
            case .buildIcon(let value): try container.encode(value)
            case .perfPowerMetric(let value): try container.encode(value)
            case .diagnosticSignature(let value): try container.encode(value)
            }
        }
    }

    public init(data: [Build], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct BundleID: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var identifier: String?
        public var name: String?
        public var platform: BundleIDPlatform?
        public var seedID: String?

        public init(identifier: String? = nil, name: String? = nil, platform: BundleIDPlatform? = nil, seedID: String? = nil) {
            self.identifier = identifier
            self.name = name
            self.platform = platform
            self.seedID = seedID
        }

        private enum CodingKeys: String, CodingKey {
            case identifier
            case name
            case platform
            case seedID = "seedId"
        }
    }

    public struct Relationships: Codable {
        public var app: App?
        public var bundleIDCapabilities: BundleIDCapabilities?
        public var profiles: Profiles?

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct BundleIDCapabilities: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case bundleIDCapabilities = "bundleIdCapabilities"
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct Profiles: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case profiles
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public init(app: App? = nil, bundleIDCapabilities: BundleIDCapabilities? = nil, profiles: Profiles? = nil) {
            self.app = app
            self.bundleIDCapabilities = bundleIDCapabilities
            self.profiles = profiles
        }

        private enum CodingKeys: String, CodingKey {
            case app
            case bundleIDCapabilities = "bundleIdCapabilities"
            case profiles
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case bundleIDs = "bundleIds"
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct BundleIDCapabilitiesResponse: Codable {
    public var data: [BundleIDCapability]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [BundleIDCapability], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct BundleIDCapability: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var type: `Type`

    public struct Attributes: Codable {
        public var capabilityType: CapabilityType?
        public var settings: [CapabilitySetting]?

        public init(capabilityType: CapabilityType? = nil, settings: [CapabilitySetting]? = nil) {
            self.capabilityType = capabilityType
            self.settings = settings
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case bundleIDCapabilities = "bundleIdCapabilities"
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.type = type
    }
}

public struct BundleIDCapabilityCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var relationships: Relationships
        public var type: `Type`

        public struct Attributes: Codable {
            public var capabilityType: CapabilityType
            public var settings: [CapabilitySetting]?

            public init(capabilityType: CapabilityType, settings: [CapabilitySetting]? = nil) {
                self.capabilityType = capabilityType
                self.settings = settings
            }
        }

        public struct Relationships: Codable {
            public var bundleID: BundleID

            public struct BundleID: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case bundleIDs = "bundleIds"
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(bundleID: BundleID) {
                self.bundleID = bundleID
            }

            private enum CodingKeys: String, CodingKey {
                case bundleID = "bundleId"
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case bundleIDCapabilities = "bundleIdCapabilities"
        }

        public init(attributes: Attributes, relationships: Relationships, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BundleIDCapabilityResponse: Codable {
    /// BundleIdCapability
    public var data: BundleIDCapability
    public var links: DocumentLinks

    public init(data: BundleIDCapability, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct BundleIDCapabilityUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var capabilityType: CapabilityType?
            public var settings: [CapabilitySetting]?

            public init(capabilityType: CapabilityType? = nil, settings: [CapabilitySetting]? = nil) {
                self.capabilityType = capabilityType
                self.settings = settings
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case bundleIDCapabilities = "bundleIdCapabilities"
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BundleIDCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var type: `Type`

        public struct Attributes: Codable {
            public var identifier: String
            public var name: String
            public var platform: BundleIDPlatform
            public var seedID: String?

            public init(identifier: String, name: String, platform: BundleIDPlatform, seedID: String? = nil) {
                self.identifier = identifier
                self.name = name
                self.platform = platform
                self.seedID = seedID
            }

            private enum CodingKeys: String, CodingKey {
                case identifier
                case name
                case platform
                case seedID = "seedId"
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case bundleIDs = "bundleIds"
        }

        public init(attributes: Attributes, type: `Type`) {
            self.attributes = attributes
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public enum BundleIDPlatform: String, Codable, CaseIterable {
    case ios = "IOS"
    case macOs = "MAC_OS"
}

public struct BundleIDResponse: Codable {
    /// BundleId
    public var data: BundleID
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case profile(Profile)
        case bundleIDCapability(BundleIDCapability)
        case app(App)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(Profile.self) {
                self = .profile(value)
            } else if let value = try? container.decode(BundleIDCapability.self) {
                self = .bundleIDCapability(value)
            } else if let value = try? container.decode(App.self) {
                self = .app(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .profile(let value): try container.encode(value)
            case .bundleIDCapability(let value): try container.encode(value)
            case .app(let value): try container.encode(value)
            }
        }
    }

    public init(data: BundleID, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct BundleIDUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var name: String?

            public init(name: String? = nil) {
                self.name = name
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case bundleIDs = "bundleIds"
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct BundleIDsResponse: Codable {
    public var data: [BundleID]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case profile(Profile)
        case bundleIDCapability(BundleIDCapability)
        case app(App)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(Profile.self) {
                self = .profile(value)
            } else if let value = try? container.decode(BundleIDCapability.self) {
                self = .bundleIDCapability(value)
            } else if let value = try? container.decode(App.self) {
                self = .app(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .profile(let value): try container.encode(value)
            case .bundleIDCapability(let value): try container.encode(value)
            case .app(let value): try container.encode(value)
            }
        }
    }

    public init(data: [BundleID], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct CapabilityOption: Codable {
    public var description: String?
    public var isEnabled: Bool?
    public var isEnabledByDefault: Bool?
    public var key: Key?
    public var name: String?
    public var isSupportsWildcard: Bool?

    public enum Key: String, Codable, CaseIterable {
        case xcode5 = "XCODE_5"
        case xcode6 = "XCODE_6"
        case completeProtection = "COMPLETE_PROTECTION"
        case protectedUnlessOpen = "PROTECTED_UNLESS_OPEN"
        case protectedUntilFirstUserAuth = "PROTECTED_UNTIL_FIRST_USER_AUTH"
        case primaryAppConsent = "PRIMARY_APP_CONSENT"
    }

    public init(description: String? = nil, isEnabled: Bool? = nil, isEnabledByDefault: Bool? = nil, key: Key? = nil, name: String? = nil, isSupportsWildcard: Bool? = nil) {
        self.description = description
        self.isEnabled = isEnabled
        self.isEnabledByDefault = isEnabledByDefault
        self.key = key
        self.name = name
        self.isSupportsWildcard = isSupportsWildcard
    }

    private enum CodingKeys: String, CodingKey {
        case description
        case isEnabled = "enabled"
        case isEnabledByDefault = "enabledByDefault"
        case key
        case name
        case isSupportsWildcard = "supportsWildcard"
    }
}

public struct CapabilitySetting: Codable {
    public var allowedInstances: AllowedInstances?
    public var description: String?
    public var isEnabledByDefault: Bool?
    public var key: Key?
    public var minInstances: Int?
    public var name: String?
    public var options: [CapabilityOption]?
    public var isVisible: Bool?

    public enum AllowedInstances: String, Codable, CaseIterable {
        case entry = "ENTRY"
        case single = "SINGLE"
        case multiple = "MULTIPLE"
    }

    public enum Key: String, Codable, CaseIterable {
        case icloudVersion = "ICLOUD_VERSION"
        case dataProtectionPermissionLevel = "DATA_PROTECTION_PERMISSION_LEVEL"
        case appleIDAuthAppConsent = "APPLE_ID_AUTH_APP_CONSENT"
    }

    public init(allowedInstances: AllowedInstances? = nil, description: String? = nil, isEnabledByDefault: Bool? = nil, key: Key? = nil, minInstances: Int? = nil, name: String? = nil, options: [CapabilityOption]? = nil, isVisible: Bool? = nil) {
        self.allowedInstances = allowedInstances
        self.description = description
        self.isEnabledByDefault = isEnabledByDefault
        self.key = key
        self.minInstances = minInstances
        self.name = name
        self.options = options
        self.isVisible = isVisible
    }

    private enum CodingKeys: String, CodingKey {
        case allowedInstances
        case description
        case isEnabledByDefault = "enabledByDefault"
        case key
        case minInstances
        case name
        case options
        case isVisible = "visible"
    }
}

public enum CapabilityType: String, Codable, CaseIterable {
    case icloud = "ICLOUD"
    case inAppPurchase = "IN_APP_PURCHASE"
    case gameCenter = "GAME_CENTER"
    case pushNotifications = "PUSH_NOTIFICATIONS"
    case wallet = "WALLET"
    case interAppAudio = "INTER_APP_AUDIO"
    case maps = "MAPS"
    case associatedDomains = "ASSOCIATED_DOMAINS"
    case personalVpn = "PERSONAL_VPN"
    case appGroups = "APP_GROUPS"
    case healthkit = "HEALTHKIT"
    case homekit = "HOMEKIT"
    case wirelessAccessoryConfiguration = "WIRELESS_ACCESSORY_CONFIGURATION"
    case applePay = "APPLE_PAY"
    case dataProtection = "DATA_PROTECTION"
    case sirikit = "SIRIKIT"
    case networkExtensions = "NETWORK_EXTENSIONS"
    case multipath = "MULTIPATH"
    case hotSpot = "HOT_SPOT"
    case nfcTagReading = "NFC_TAG_READING"
    case classkit = "CLASSKIT"
    case autofillCredentialProvider = "AUTOFILL_CREDENTIAL_PROVIDER"
    case accessWifiInformation = "ACCESS_WIFI_INFORMATION"
    case networkCustomProtocol = "NETWORK_CUSTOM_PROTOCOL"
    case coremediaHlsLowLatency = "COREMEDIA_HLS_LOW_LATENCY"
    case systemExtensionInstall = "SYSTEM_EXTENSION_INSTALL"
    case userManagement = "USER_MANAGEMENT"
    case appleIDAuth = "APPLE_ID_AUTH"
}

public struct Certificate: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var type: `Type`

    public struct Attributes: Codable {
        public var certificateContent: String?
        public var certificateType: CertificateType?
        public var displayName: String?
        public var expirationDate: Date?
        public var name: String?
        public var platform: BundleIDPlatform?
        public var serialNumber: String?

        public init(certificateContent: String? = nil, certificateType: CertificateType? = nil, displayName: String? = nil, expirationDate: Date? = nil, name: String? = nil, platform: BundleIDPlatform? = nil, serialNumber: String? = nil) {
            self.certificateContent = certificateContent
            self.certificateType = certificateType
            self.displayName = displayName
            self.expirationDate = expirationDate
            self.name = name
            self.platform = platform
            self.serialNumber = serialNumber
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case certificates
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.type = type
    }
}

public struct CertificateCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var type: `Type`

        public struct Attributes: Codable {
            public var certificateType: CertificateType
            public var csrContent: String

            public init(certificateType: CertificateType, csrContent: String) {
                self.certificateType = certificateType
                self.csrContent = csrContent
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case certificates
        }

        public init(attributes: Attributes, type: `Type`) {
            self.attributes = attributes
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct CertificateResponse: Codable {
    /// Certificate
    public var data: Certificate
    public var links: DocumentLinks

    public init(data: Certificate, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public enum CertificateType: String, Codable, CaseIterable {
    case iosDevelopment = "IOS_DEVELOPMENT"
    case iosDistribution = "IOS_DISTRIBUTION"
    case macAppDistribution = "MAC_APP_DISTRIBUTION"
    case macInstallerDistribution = "MAC_INSTALLER_DISTRIBUTION"
    case macAppDevelopment = "MAC_APP_DEVELOPMENT"
    case developerIDKext = "DEVELOPER_ID_KEXT"
    case developerIDApplication = "DEVELOPER_ID_APPLICATION"
    case development = "DEVELOPMENT"
    case distribution = "DISTRIBUTION"
}

public struct CertificatesResponse: Codable {
    public var data: [Certificate]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [Certificate], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct Device: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var type: `Type`

    public struct Attributes: Codable {
        public var addedDate: Date?
        public var deviceClass: DeviceClass?
        public var model: String?
        public var name: String?
        public var platform: BundleIDPlatform?
        public var status: Status?
        public var udid: String?

        public enum DeviceClass: String, Codable, CaseIterable {
            case appleWatch = "APPLE_WATCH"
            case ipad = "IPAD"
            case iphone = "IPHONE"
            case ipod = "IPOD"
            case appleTv = "APPLE_TV"
            case mac = "MAC"
        }

        public enum Status: String, Codable, CaseIterable {
            case enabled = "ENABLED"
            case disabled = "DISABLED"
        }

        public init(addedDate: Date? = nil, deviceClass: DeviceClass? = nil, model: String? = nil, name: String? = nil, platform: BundleIDPlatform? = nil, status: Status? = nil, udid: String? = nil) {
            self.addedDate = addedDate
            self.deviceClass = deviceClass
            self.model = model
            self.name = name
            self.platform = platform
            self.status = status
            self.udid = udid
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case devices
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.type = type
    }
}

public struct DeviceCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var type: `Type`

        public struct Attributes: Codable {
            public var name: String
            public var platform: BundleIDPlatform
            public var udid: String

            public init(name: String, platform: BundleIDPlatform, udid: String) {
                self.name = name
                self.platform = platform
                self.udid = udid
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case devices
        }

        public init(attributes: Attributes, type: `Type`) {
            self.attributes = attributes
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct DeviceResponse: Codable {
    /// Device
    public var data: Device
    public var links: DocumentLinks

    public init(data: Device, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct DeviceUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var name: String?
            public var status: Status?

            public enum Status: String, Codable, CaseIterable {
                case enabled = "ENABLED"
                case disabled = "DISABLED"
            }

            public init(name: String? = nil, status: Status? = nil) {
                self.name = name
                self.status = status
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case devices
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct DevicesResponse: Codable {
    public var data: [Device]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [Device], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct DiagnosticLog: Codable {
    public var id: String
    public var links: ResourceLinks
    public var type: `Type`

    public enum `Type`: String, Codable, CaseIterable {
        case diagnosticLogs
    }

    public init(id: String, links: ResourceLinks, type: `Type`) {
        self.id = id
        self.links = links
        self.type = type
    }
}

public struct DiagnosticLogsResponse: Codable {
    public var data: [DiagnosticLog]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [DiagnosticLog], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct DiagnosticSignature: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var type: `Type`

    public struct Attributes: Codable {
        public var diagnosticType: DiagnosticType?
        public var signature: String?
        public var weight: Double?

        public enum DiagnosticType: String, Codable, CaseIterable {
            case diskWrites = "DISK_WRITES"
        }

        public init(diagnosticType: DiagnosticType? = nil, signature: String? = nil, weight: Double? = nil) {
            self.diagnosticType = diagnosticType
            self.signature = signature
            self.weight = weight
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case diagnosticSignatures
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.type = type
    }
}

public struct DiagnosticSignaturesResponse: Codable {
    public var data: [DiagnosticSignature]
    public var included: [DiagnosticLog]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [DiagnosticSignature], included: [DiagnosticLog]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct DocumentLinks: Codable {
    public var this: String

    public init(this: String) {
        self.this = this
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
    }
}

public struct EndUserLicenseAgreement: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var agreementText: String?

        public init(agreementText: String? = nil) {
            self.agreementText = agreementText
        }
    }

    public struct Relationships: Codable {
        public var app: App?
        public var territories: Territories?

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct Territories: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case territories
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public init(app: App? = nil, territories: Territories? = nil) {
            self.app = app
            self.territories = territories
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case endUserLicenseAgreements
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct EndUserLicenseAgreementCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var relationships: Relationships
        public var type: `Type`

        public struct Attributes: Codable {
            public var agreementText: String

            public init(agreementText: String) {
                self.agreementText = agreementText
            }
        }

        public struct Relationships: Codable {
            public var app: App
            public var territories: Territories

            public struct App: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct Territories: Codable {
                public var data: [Datum]

                public struct Datum: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case territories
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: [Datum]) {
                    self.data = data
                }
            }

            public init(app: App, territories: Territories) {
                self.app = app
                self.territories = territories
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case endUserLicenseAgreements
        }

        public init(attributes: Attributes, relationships: Relationships, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct EndUserLicenseAgreementResponse: Codable {
    /// EndUserLicenseAgreement
    public var data: EndUserLicenseAgreement
    public var included: [Territory]?
    public var links: DocumentLinks

    public init(data: EndUserLicenseAgreement, included: [Territory]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct EndUserLicenseAgreementUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var relationships: Relationships?
        public var type: `Type`

        public struct Attributes: Codable {
            public var agreementText: String?

            public init(agreementText: String? = nil) {
                self.agreementText = agreementText
            }
        }

        public struct Relationships: Codable {
            public var territories: Territories?

            public struct Territories: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case territories
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(territories: Territories? = nil) {
                self.territories = territories
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case endUserLicenseAgreements
        }

        public init(attributes: Attributes? = nil, id: String, relationships: Relationships? = nil, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct ErrorResponse: Codable {
    public var errors: [Error]?

    public struct Error: Codable {
        public var code: String
        public var detail: String
        public var id: String?
        public var source: Source?
        public var status: String
        public var title: String

        public enum Source: Codable {
            case a(A)
            case b(B)

            /// JsonPointer
            public struct A: Codable {
                public var pointer: String?

                public init(pointer: String? = nil) {
                    self.pointer = pointer
                }
            }

            /// Parameter
            public struct B: Codable {
                public var parameter: String?

                public init(parameter: String? = nil) {
                    self.parameter = parameter
                }
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                if let value = try? container.decode(A.self) {
                    self = .a(value)
                } else if let value = try? container.decode(B.self) {
                    self = .b(value)
                } else {
                    throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
                }
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                switch self {
                case .a(let value): try container.encode(value)
                case .b(let value): try container.encode(value)
                }
            }
        }

        public init(code: String, detail: String, id: String? = nil, source: Source? = nil, status: String, title: String) {
            self.code = code
            self.detail = detail
            self.id = id
            self.source = source
            self.status = status
            self.title = title
        }
    }

    public init(errors: [Error]? = nil) {
        self.errors = errors
    }
}

public enum ExternalBetaState: String, Codable, CaseIterable {
    case processing = "PROCESSING"
    case processingException = "PROCESSING_EXCEPTION"
    case missingExportCompliance = "MISSING_EXPORT_COMPLIANCE"
    case readyForBetaTesting = "READY_FOR_BETA_TESTING"
    case inBetaTesting = "IN_BETA_TESTING"
    case expired = "EXPIRED"
    case readyForBetaSubmission = "READY_FOR_BETA_SUBMISSION"
    case inExportComplianceReview = "IN_EXPORT_COMPLIANCE_REVIEW"
    case waitingForBetaReview = "WAITING_FOR_BETA_REVIEW"
    case inBetaReview = "IN_BETA_REVIEW"
    case betaRejected = "BETA_REJECTED"
    case betaApproved = "BETA_APPROVED"
}

public struct GameCenterEnabledVersion: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var iconAsset: ImageAsset?
        public var platform: Platform?
        public var versionString: String?

        public init(iconAsset: ImageAsset? = nil, platform: Platform? = nil, versionString: String? = nil) {
            self.iconAsset = iconAsset
            self.platform = platform
            self.versionString = versionString
        }
    }

    public struct Relationships: Codable {
        public var app: App?
        public var compatibleVersions: CompatibleVersions?

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct CompatibleVersions: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case gameCenterEnabledVersions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public init(app: App? = nil, compatibleVersions: CompatibleVersions? = nil) {
            self.app = app
            self.compatibleVersions = compatibleVersions
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case gameCenterEnabledVersions
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct GameCenterEnabledVersionCompatibleVersionsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case gameCenterEnabledVersions
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct GameCenterEnabledVersionCompatibleVersionsLinkagesResponse: Codable {
    public var data: [Datum]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case gameCenterEnabledVersions
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct GameCenterEnabledVersionsResponse: Codable {
    public var data: [GameCenterEnabledVersion]
    public var included: [GameCenterEnabledVersion]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [GameCenterEnabledVersion], included: [GameCenterEnabledVersion]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public enum IconAssetType: String, Codable, CaseIterable {
    case appStore = "APP_STORE"
    case messagesAppStore = "MESSAGES_APP_STORE"
    case watchAppStore = "WATCH_APP_STORE"
    case tvOsHomeScreen = "TV_OS_HOME_SCREEN"
    case tvOsTopShelf = "TV_OS_TOP_SHELF"
}

public struct IdfaDeclaration: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var isAttributesActionWithPreviousAd: Bool?
        public var isAttributesAppInstallationToPreviousAd: Bool?
        public var isHonorsLimitedAdTracking: Bool?
        public var isServesAds: Bool?

        public init(isAttributesActionWithPreviousAd: Bool? = nil, isAttributesAppInstallationToPreviousAd: Bool? = nil, isHonorsLimitedAdTracking: Bool? = nil, isServesAds: Bool? = nil) {
            self.isAttributesActionWithPreviousAd = isAttributesActionWithPreviousAd
            self.isAttributesAppInstallationToPreviousAd = isAttributesAppInstallationToPreviousAd
            self.isHonorsLimitedAdTracking = isHonorsLimitedAdTracking
            self.isServesAds = isServesAds
        }

        private enum CodingKeys: String, CodingKey {
            case isAttributesActionWithPreviousAd = "attributesActionWithPreviousAd"
            case isAttributesAppInstallationToPreviousAd = "attributesAppInstallationToPreviousAd"
            case isHonorsLimitedAdTracking = "honorsLimitedAdTracking"
            case isServesAds = "servesAds"
        }
    }

    public struct Relationships: Codable {
        public var appStoreVersion: AppStoreVersion?

        public struct AppStoreVersion: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(appStoreVersion: AppStoreVersion? = nil) {
            self.appStoreVersion = appStoreVersion
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case idfaDeclarations
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct IdfaDeclarationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var relationships: Relationships
        public var type: `Type`

        public struct Attributes: Codable {
            public var isAttributesActionWithPreviousAd: Bool
            public var isAttributesAppInstallationToPreviousAd: Bool
            public var isHonorsLimitedAdTracking: Bool
            public var isServesAds: Bool

            public init(isAttributesActionWithPreviousAd: Bool, isAttributesAppInstallationToPreviousAd: Bool, isHonorsLimitedAdTracking: Bool, isServesAds: Bool) {
                self.isAttributesActionWithPreviousAd = isAttributesActionWithPreviousAd
                self.isAttributesAppInstallationToPreviousAd = isAttributesAppInstallationToPreviousAd
                self.isHonorsLimitedAdTracking = isHonorsLimitedAdTracking
                self.isServesAds = isServesAds
            }

            private enum CodingKeys: String, CodingKey {
                case isAttributesActionWithPreviousAd = "attributesActionWithPreviousAd"
                case isAttributesAppInstallationToPreviousAd = "attributesAppInstallationToPreviousAd"
                case isHonorsLimitedAdTracking = "honorsLimitedAdTracking"
                case isServesAds = "servesAds"
            }
        }

        public struct Relationships: Codable {
            public var appStoreVersion: AppStoreVersion

            public struct AppStoreVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersion: AppStoreVersion) {
                self.appStoreVersion = appStoreVersion
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case idfaDeclarations
        }

        public init(attributes: Attributes, relationships: Relationships, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct IdfaDeclarationResponse: Codable {
    /// IdfaDeclaration
    public var data: IdfaDeclaration
    public var links: DocumentLinks

    public init(data: IdfaDeclaration, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct IdfaDeclarationUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var isAttributesActionWithPreviousAd: Bool?
            public var isAttributesAppInstallationToPreviousAd: Bool?
            public var isHonorsLimitedAdTracking: Bool?
            public var isServesAds: Bool?

            public init(isAttributesActionWithPreviousAd: Bool? = nil, isAttributesAppInstallationToPreviousAd: Bool? = nil, isHonorsLimitedAdTracking: Bool? = nil, isServesAds: Bool? = nil) {
                self.isAttributesActionWithPreviousAd = isAttributesActionWithPreviousAd
                self.isAttributesAppInstallationToPreviousAd = isAttributesAppInstallationToPreviousAd
                self.isHonorsLimitedAdTracking = isHonorsLimitedAdTracking
                self.isServesAds = isServesAds
            }

            private enum CodingKeys: String, CodingKey {
                case isAttributesActionWithPreviousAd = "attributesActionWithPreviousAd"
                case isAttributesAppInstallationToPreviousAd = "attributesAppInstallationToPreviousAd"
                case isHonorsLimitedAdTracking = "honorsLimitedAdTracking"
                case isServesAds = "servesAds"
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case idfaDeclarations
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct ImageAsset: Codable {
    public var height: Int?
    public var templateURL: String?
    public var width: Int?

    public init(height: Int? = nil, templateURL: String? = nil, width: Int? = nil) {
        self.height = height
        self.templateURL = templateURL
        self.width = width
    }

    private enum CodingKeys: String, CodingKey {
        case height
        case templateURL = "templateUrl"
        case width
    }
}

public struct InAppPurchase: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var inAppPurchaseType: InAppPurchaseType?
        public var productID: String?
        public var referenceName: String?
        public var state: State?

        public enum InAppPurchaseType: String, Codable, CaseIterable {
            case automaticallyRenewableSubscription = "AUTOMATICALLY_RENEWABLE_SUBSCRIPTION"
            case nonConsumable = "NON_CONSUMABLE"
            case consumable = "CONSUMABLE"
            case nonRenewingSubscription = "NON_RENEWING_SUBSCRIPTION"
            case freeSubscription = "FREE_SUBSCRIPTION"
        }

        public enum State: String, Codable, CaseIterable {
            case created = "CREATED"
            case developerSignedOff = "DEVELOPER_SIGNED_OFF"
            case developerActionNeeded = "DEVELOPER_ACTION_NEEDED"
            case deletionInProgress = "DELETION_IN_PROGRESS"
            case approved = "APPROVED"
            case deleted = "DELETED"
            case removedFromSale = "REMOVED_FROM_SALE"
            case developerRemovedFromSale = "DEVELOPER_REMOVED_FROM_SALE"
            case waitingForUpload = "WAITING_FOR_UPLOAD"
            case processingContent = "PROCESSING_CONTENT"
            case replaced = "REPLACED"
            case rejected = "REJECTED"
            case waitingForScreenshot = "WAITING_FOR_SCREENSHOT"
            case prepareForSubmission = "PREPARE_FOR_SUBMISSION"
            case missingMetadata = "MISSING_METADATA"
            case readyToSubmit = "READY_TO_SUBMIT"
            case waitingForReview = "WAITING_FOR_REVIEW"
            case inReview = "IN_REVIEW"
            case pendingDeveloperRelease = "PENDING_DEVELOPER_RELEASE"
        }

        public init(inAppPurchaseType: InAppPurchaseType? = nil, productID: String? = nil, referenceName: String? = nil, state: State? = nil) {
            self.inAppPurchaseType = inAppPurchaseType
            self.productID = productID
            self.referenceName = referenceName
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case inAppPurchaseType
            case productID = "productId"
            case referenceName
            case state
        }
    }

    public struct Relationships: Codable {
        public var apps: Apps?

        public struct Apps: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public init(apps: Apps? = nil) {
            self.apps = apps
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case inAppPurchases
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct InAppPurchaseResponse: Codable {
    /// InAppPurchase
    public var data: InAppPurchase
    public var links: DocumentLinks

    public init(data: InAppPurchase, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct InAppPurchasesResponse: Codable {
    public var data: [InAppPurchase]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [InAppPurchase], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public enum InternalBetaState: String, Codable, CaseIterable {
    case processing = "PROCESSING"
    case processingException = "PROCESSING_EXCEPTION"
    case missingExportCompliance = "MISSING_EXPORT_COMPLIANCE"
    case readyForBetaTesting = "READY_FOR_BETA_TESTING"
    case inBetaTesting = "IN_BETA_TESTING"
    case expired = "EXPIRED"
    case inExportComplianceReview = "IN_EXPORT_COMPLIANCE_REVIEW"
}

public enum KidsAgeBand: String, Codable, CaseIterable {
    case fiveAndUnder = "FIVE_AND_UNDER"
    case sixToEight = "SIX_TO_EIGHT"
    case nineToEleven = "NINE_TO_ELEVEN"
}

public struct PagedDocumentLinks: Codable {
    public var first: String?
    public var next: String?
    public var this: String

    public init(first: String? = nil, next: String? = nil, this: String) {
        self.first = first
        self.next = next
        self.this = this
    }

    private enum CodingKeys: String, CodingKey {
        case first
        case next
        case this = "self"
    }
}

public struct PagingInformation: Codable {
    public var paging: Paging

    public struct Paging: Codable {
        public var limit: Int
        public var total: Int

        public init(limit: Int, total: Int) {
            self.limit = limit
            self.total = total
        }
    }

    public init(paging: Paging) {
        self.paging = paging
    }
}

public struct PerfPowerMetric: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var type: `Type`

    public struct Attributes: Codable {
        public var deviceType: String?
        public var metricType: MetricType?
        public var platform: Platform?

        public enum MetricType: String, Codable, CaseIterable {
            case disk = "DISK"
            case hang = "HANG"
            case battery = "BATTERY"
            case launch = "LAUNCH"
            case memory = "MEMORY"
            case animation = "ANIMATION"
            case termination = "TERMINATION"
        }

        public enum Platform: String, Codable, CaseIterable {
            case ios = "IOS"
        }

        public init(deviceType: String? = nil, metricType: MetricType? = nil, platform: Platform? = nil) {
            self.deviceType = deviceType
            self.metricType = metricType
            self.platform = platform
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case perfPowerMetrics
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.type = type
    }
}

public struct PerfPowerMetricsResponse: Codable {
    public var data: [PerfPowerMetric]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [PerfPowerMetric], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public enum PhasedReleaseState: String, Codable, CaseIterable {
    case inactive = "INACTIVE"
    case active = "ACTIVE"
    case paused = "PAUSED"
    case complete = "COMPLETE"
}

public enum Platform: String, Codable, CaseIterable {
    case ios = "IOS"
    case macOs = "MAC_OS"
    case tvOs = "TV_OS"
}

public struct PreReleaseVersionsResponse: Codable {
    public var data: [PrereleaseVersion]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case build(Build)
        case app(App)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(App.self) {
                self = .app(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .build(let value): try container.encode(value)
            case .app(let value): try container.encode(value)
            }
        }
    }

    public init(data: [PrereleaseVersion], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct PrereleaseVersion: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var platform: Platform?
        public var version: String?

        public init(platform: Platform? = nil, version: String? = nil) {
            self.platform = platform
            self.version = version
        }
    }

    public struct Relationships: Codable {
        public var app: App?
        public var builds: Builds?

        public struct App: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct Builds: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case builds
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public init(app: App? = nil, builds: Builds? = nil) {
            self.app = app
            self.builds = builds
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case preReleaseVersions
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct PrereleaseVersionResponse: Codable {
    /// PrereleaseVersion
    public var data: PrereleaseVersion
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case build(Build)
        case app(App)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(Build.self) {
                self = .build(value)
            } else if let value = try? container.decode(App.self) {
                self = .app(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .build(let value): try container.encode(value)
            case .app(let value): try container.encode(value)
            }
        }
    }

    public init(data: PrereleaseVersion, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public enum PreviewType: String, Codable, CaseIterable {
    case iphone65 = "IPHONE_65"
    case iphone58 = "IPHONE_58"
    case iphone55 = "IPHONE_55"
    case iphone47 = "IPHONE_47"
    case iphone40 = "IPHONE_40"
    case iphone35 = "IPHONE_35"
    case ipadPro3gen129 = "IPAD_PRO_3GEN_129"
    case ipadPro3gen11 = "IPAD_PRO_3GEN_11"
    case ipadPro129 = "IPAD_PRO_129"
    case ipad105 = "IPAD_105"
    case ipad97 = "IPAD_97"
    case desktop = "DESKTOP"
    case watchSeries4 = "WATCH_SERIES_4"
    case watchSeries3 = "WATCH_SERIES_3"
    case appleTv = "APPLE_TV"
}

public struct Profile: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var createdDate: Date?
        public var expirationDate: Date?
        public var name: String?
        public var platform: BundleIDPlatform?
        public var profileContent: String?
        public var profileState: ProfileState?
        public var profileType: ProfileType?
        public var uuid: String?

        public enum ProfileState: String, Codable, CaseIterable {
            case active = "ACTIVE"
            case invalid = "INVALID"
        }

        public enum ProfileType: String, Codable, CaseIterable {
            case iosAppDevelopment = "IOS_APP_DEVELOPMENT"
            case iosAppStore = "IOS_APP_STORE"
            case iosAppAdhoc = "IOS_APP_ADHOC"
            case iosAppInhouse = "IOS_APP_INHOUSE"
            case macAppDevelopment = "MAC_APP_DEVELOPMENT"
            case macAppStore = "MAC_APP_STORE"
            case macAppDirect = "MAC_APP_DIRECT"
            case tvosAppDevelopment = "TVOS_APP_DEVELOPMENT"
            case tvosAppStore = "TVOS_APP_STORE"
            case tvosAppAdhoc = "TVOS_APP_ADHOC"
            case tvosAppInhouse = "TVOS_APP_INHOUSE"
            case macCatalystAppDevelopment = "MAC_CATALYST_APP_DEVELOPMENT"
            case macCatalystAppStore = "MAC_CATALYST_APP_STORE"
            case macCatalystAppDirect = "MAC_CATALYST_APP_DIRECT"
        }

        public init(createdDate: Date? = nil, expirationDate: Date? = nil, name: String? = nil, platform: BundleIDPlatform? = nil, profileContent: String? = nil, profileState: ProfileState? = nil, profileType: ProfileType? = nil, uuid: String? = nil) {
            self.createdDate = createdDate
            self.expirationDate = expirationDate
            self.name = name
            self.platform = platform
            self.profileContent = profileContent
            self.profileState = profileState
            self.profileType = profileType
            self.uuid = uuid
        }
    }

    public struct Relationships: Codable {
        public var bundleID: BundleID?
        public var certificates: Certificates?
        public var devices: Devices?

        public struct BundleID: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case bundleIDs = "bundleIds"
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public struct Certificates: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case certificates
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public struct Devices: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case devices
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public init(bundleID: BundleID? = nil, certificates: Certificates? = nil, devices: Devices? = nil) {
            self.bundleID = bundleID
            self.certificates = certificates
            self.devices = devices
        }

        private enum CodingKeys: String, CodingKey {
            case bundleID = "bundleId"
            case certificates
            case devices
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case profiles
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct ProfileCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var relationships: Relationships
        public var type: `Type`

        public struct Attributes: Codable {
            public var name: String
            public var profileType: ProfileType

            public enum ProfileType: String, Codable, CaseIterable {
                case iosAppDevelopment = "IOS_APP_DEVELOPMENT"
                case iosAppStore = "IOS_APP_STORE"
                case iosAppAdhoc = "IOS_APP_ADHOC"
                case iosAppInhouse = "IOS_APP_INHOUSE"
                case macAppDevelopment = "MAC_APP_DEVELOPMENT"
                case macAppStore = "MAC_APP_STORE"
                case macAppDirect = "MAC_APP_DIRECT"
                case tvosAppDevelopment = "TVOS_APP_DEVELOPMENT"
                case tvosAppStore = "TVOS_APP_STORE"
                case tvosAppAdhoc = "TVOS_APP_ADHOC"
                case tvosAppInhouse = "TVOS_APP_INHOUSE"
                case macCatalystAppDevelopment = "MAC_CATALYST_APP_DEVELOPMENT"
                case macCatalystAppStore = "MAC_CATALYST_APP_STORE"
                case macCatalystAppDirect = "MAC_CATALYST_APP_DIRECT"
            }

            public init(name: String, profileType: ProfileType) {
                self.name = name
                self.profileType = profileType
            }
        }

        public struct Relationships: Codable {
            public var bundleID: BundleID
            public var certificates: Certificates
            public var devices: Devices?

            public struct BundleID: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case bundleIDs = "bundleIds"
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public struct Certificates: Codable {
                public var data: [Datum]

                public struct Datum: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case certificates
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: [Datum]) {
                    self.data = data
                }
            }

            public struct Devices: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case devices
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(bundleID: BundleID, certificates: Certificates, devices: Devices? = nil) {
                self.bundleID = bundleID
                self.certificates = certificates
                self.devices = devices
            }

            private enum CodingKeys: String, CodingKey {
                case bundleID = "bundleId"
                case certificates
                case devices
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case profiles
        }

        public init(attributes: Attributes, relationships: Relationships, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct ProfileResponse: Codable {
    /// Profile
    public var data: Profile
    public var included: [IncludedItem]?
    public var links: DocumentLinks

    public enum IncludedItem: Codable {
        case bundleID(BundleID)
        case device(Device)
        case certificate(Certificate)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(BundleID.self) {
                self = .bundleID(value)
            } else if let value = try? container.decode(Device.self) {
                self = .device(value)
            } else if let value = try? container.decode(Certificate.self) {
                self = .certificate(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .bundleID(let value): try container.encode(value)
            case .device(let value): try container.encode(value)
            case .certificate(let value): try container.encode(value)
            }
        }
    }

    public init(data: Profile, included: [IncludedItem]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct ProfilesResponse: Codable {
    public var data: [Profile]
    public var included: [IncludedItem]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public enum IncludedItem: Codable {
        case bundleID(BundleID)
        case device(Device)
        case certificate(Certificate)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(BundleID.self) {
                self = .bundleID(value)
            } else if let value = try? container.decode(Device.self) {
                self = .device(value)
            } else if let value = try? container.decode(Certificate.self) {
                self = .certificate(value)
            } else {
                throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .bundleID(let value): try container.encode(value)
            case .device(let value): try container.encode(value)
            case .certificate(let value): try container.encode(value)
            }
        }
    }

    public init(data: [Profile], included: [IncludedItem]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct ResourceLinks: Codable {
    public var this: String

    public init(this: String) {
        self.this = this
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
    }
}

public struct RoutingAppCoverage: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var assetDeliveryState: AppMediaAssetState?
        public var fileName: String?
        public var fileSize: Int?
        public var sourceFileChecksum: String?
        public var uploadOperations: [UploadOperation]?

        public init(assetDeliveryState: AppMediaAssetState? = nil, fileName: String? = nil, fileSize: Int? = nil, sourceFileChecksum: String? = nil, uploadOperations: [UploadOperation]? = nil) {
            self.assetDeliveryState = assetDeliveryState
            self.fileName = fileName
            self.fileSize = fileSize
            self.sourceFileChecksum = sourceFileChecksum
            self.uploadOperations = uploadOperations
        }
    }

    public struct Relationships: Codable {
        public var appStoreVersion: AppStoreVersion?

        public struct AppStoreVersion: Codable {
            public var data: Data?
            public var links: Links?

            public struct Data: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case appStoreVersions
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: Data? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }
        }

        public init(appStoreVersion: AppStoreVersion? = nil) {
            self.appStoreVersion = appStoreVersion
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case routingAppCoverages
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct RoutingAppCoverageCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var relationships: Relationships
        public var type: `Type`

        public struct Attributes: Codable {
            public var fileName: String
            public var fileSize: Int

            public init(fileName: String, fileSize: Int) {
                self.fileName = fileName
                self.fileSize = fileSize
            }
        }

        public struct Relationships: Codable {
            public var appStoreVersion: AppStoreVersion

            public struct AppStoreVersion: Codable {
                public var data: Data

                public struct Data: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case appStoreVersions
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: Data) {
                    self.data = data
                }
            }

            public init(appStoreVersion: AppStoreVersion) {
                self.appStoreVersion = appStoreVersion
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case routingAppCoverages
        }

        public init(attributes: Attributes, relationships: Relationships, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct RoutingAppCoverageResponse: Codable {
    /// RoutingAppCoverage
    public var data: RoutingAppCoverage
    public var links: DocumentLinks

    public init(data: RoutingAppCoverage, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct RoutingAppCoverageUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var type: `Type`

        public struct Attributes: Codable {
            public var sourceFileChecksum: String?
            public var isUploaded: Bool?

            public init(sourceFileChecksum: String? = nil, isUploaded: Bool? = nil) {
                self.sourceFileChecksum = sourceFileChecksum
                self.isUploaded = isUploaded
            }

            private enum CodingKeys: String, CodingKey {
                case sourceFileChecksum
                case isUploaded = "uploaded"
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case routingAppCoverages
        }

        public init(attributes: Attributes? = nil, id: String, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public enum ScreenshotDisplayType: String, Codable, CaseIterable {
    case appIphone65 = "APP_IPHONE_65"
    case appIphone58 = "APP_IPHONE_58"
    case appIphone55 = "APP_IPHONE_55"
    case appIphone47 = "APP_IPHONE_47"
    case appIphone40 = "APP_IPHONE_40"
    case appIphone35 = "APP_IPHONE_35"
    case appIpadPro3gen129 = "APP_IPAD_PRO_3GEN_129"
    case appIpadPro3gen11 = "APP_IPAD_PRO_3GEN_11"
    case appIpadPro129 = "APP_IPAD_PRO_129"
    case appIpad105 = "APP_IPAD_105"
    case appIpad97 = "APP_IPAD_97"
    case appDesktop = "APP_DESKTOP"
    case appWatchSeries4 = "APP_WATCH_SERIES_4"
    case appWatchSeries3 = "APP_WATCH_SERIES_3"
    case appAppleTv = "APP_APPLE_TV"
    case imessageAppIphone65 = "IMESSAGE_APP_IPHONE_65"
    case imessageAppIphone58 = "IMESSAGE_APP_IPHONE_58"
    case imessageAppIphone55 = "IMESSAGE_APP_IPHONE_55"
    case imessageAppIphone47 = "IMESSAGE_APP_IPHONE_47"
    case imessageAppIphone40 = "IMESSAGE_APP_IPHONE_40"
    case imessageAppIpadPro3gen129 = "IMESSAGE_APP_IPAD_PRO_3GEN_129"
    case imessageAppIpadPro3gen11 = "IMESSAGE_APP_IPAD_PRO_3GEN_11"
    case imessageAppIpadPro129 = "IMESSAGE_APP_IPAD_PRO_129"
    case imessageAppIpad105 = "IMESSAGE_APP_IPAD_105"
    case imessageAppIpad97 = "IMESSAGE_APP_IPAD_97"
}

public struct TerritoriesResponse: Codable {
    public var data: [Territory]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [Territory], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct Territory: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var type: `Type`

    public struct Attributes: Codable {
        public var currency: String?

        public init(currency: String? = nil) {
            self.currency = currency
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case territories
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.type = type
    }
}

public struct TerritoryResponse: Codable {
    /// Territory
    public var data: Territory
    public var links: DocumentLinks

    public init(data: Territory, links: DocumentLinks) {
        self.data = data
        self.links = links
    }
}

public struct UploadOperation: Codable {
    public var length: Int?
    public var method: String?
    public var offset: Int?
    public var requestHeaders: [UploadOperationHeader]?
    public var url: String?

    public init(length: Int? = nil, method: String? = nil, offset: Int? = nil, requestHeaders: [UploadOperationHeader]? = nil, url: String? = nil) {
        self.length = length
        self.method = method
        self.offset = offset
        self.requestHeaders = requestHeaders
        self.url = url
    }
}

public struct UploadOperationHeader: Codable {
    public var name: String?
    public var value: String?

    public init(name: String? = nil, value: String? = nil) {
        self.name = name
        self.value = value
    }
}

public struct User: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var isAllAppsVisible: Bool?
        public var firstName: String?
        public var lastName: String?
        public var isProvisioningAllowed: Bool?
        public var roles: [UserRole]?
        public var username: String?

        public init(isAllAppsVisible: Bool? = nil, firstName: String? = nil, lastName: String? = nil, isProvisioningAllowed: Bool? = nil, roles: [UserRole]? = nil, username: String? = nil) {
            self.isAllAppsVisible = isAllAppsVisible
            self.firstName = firstName
            self.lastName = lastName
            self.isProvisioningAllowed = isProvisioningAllowed
            self.roles = roles
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case isAllAppsVisible = "allAppsVisible"
            case firstName
            case lastName
            case isProvisioningAllowed = "provisioningAllowed"
            case roles
            case username
        }
    }

    public struct Relationships: Codable {
        public var visibleApps: VisibleApps?

        public struct VisibleApps: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public init(visibleApps: VisibleApps? = nil) {
            self.visibleApps = visibleApps
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case users
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct UserInvitation: Codable {
    public var attributes: Attributes?
    public var id: String
    public var links: ResourceLinks
    public var relationships: Relationships?
    public var type: `Type`

    public struct Attributes: Codable {
        public var isAllAppsVisible: Bool?
        public var email: String?
        public var expirationDate: Date?
        public var firstName: String?
        public var lastName: String?
        public var isProvisioningAllowed: Bool?
        public var roles: [UserRole]?

        public init(isAllAppsVisible: Bool? = nil, email: String? = nil, expirationDate: Date? = nil, firstName: String? = nil, lastName: String? = nil, isProvisioningAllowed: Bool? = nil, roles: [UserRole]? = nil) {
            self.isAllAppsVisible = isAllAppsVisible
            self.email = email
            self.expirationDate = expirationDate
            self.firstName = firstName
            self.lastName = lastName
            self.isProvisioningAllowed = isProvisioningAllowed
            self.roles = roles
        }

        private enum CodingKeys: String, CodingKey {
            case isAllAppsVisible = "allAppsVisible"
            case email
            case expirationDate
            case firstName
            case lastName
            case isProvisioningAllowed = "provisioningAllowed"
            case roles
        }
    }

    public struct Relationships: Codable {
        public var visibleApps: VisibleApps?

        public struct VisibleApps: Codable {
            public var data: [Datum]?
            public var links: Links?
            public var meta: PagingInformation?

            public struct Datum: Codable {
                public var id: String
                public var type: `Type`

                public enum `Type`: String, Codable, CaseIterable {
                    case apps
                }

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }
            }

            public struct Links: Codable {
                public var related: String?
                public var this: String?

                public init(related: String? = nil, this: String? = nil) {
                    self.related = related
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case related
                    case this = "self"
                }
            }

            public init(data: [Datum]? = nil, links: Links? = nil, meta: PagingInformation? = nil) {
                self.data = data
                self.links = links
                self.meta = meta
            }
        }

        public init(visibleApps: VisibleApps? = nil) {
            self.visibleApps = visibleApps
        }
    }

    public enum `Type`: String, Codable, CaseIterable {
        case userInvitations
    }

    public init(attributes: Attributes? = nil, id: String, links: ResourceLinks, relationships: Relationships? = nil, type: `Type`) {
        self.attributes = attributes
        self.id = id
        self.links = links
        self.relationships = relationships
        self.type = type
    }
}

public struct UserInvitationCreateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes
        public var relationships: Relationships?
        public var type: `Type`

        public struct Attributes: Codable {
            public var isAllAppsVisible: Bool?
            public var email: String
            public var firstName: String
            public var lastName: String
            public var isProvisioningAllowed: Bool?
            public var roles: [UserRole]

            public init(isAllAppsVisible: Bool? = nil, email: String, firstName: String, lastName: String, isProvisioningAllowed: Bool? = nil, roles: [UserRole]) {
                self.isAllAppsVisible = isAllAppsVisible
                self.email = email
                self.firstName = firstName
                self.lastName = lastName
                self.isProvisioningAllowed = isProvisioningAllowed
                self.roles = roles
            }

            private enum CodingKeys: String, CodingKey {
                case isAllAppsVisible = "allAppsVisible"
                case email
                case firstName
                case lastName
                case isProvisioningAllowed = "provisioningAllowed"
                case roles
            }
        }

        public struct Relationships: Codable {
            public var visibleApps: VisibleApps?

            public struct VisibleApps: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(visibleApps: VisibleApps? = nil) {
                self.visibleApps = visibleApps
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case userInvitations
        }

        public init(attributes: Attributes, relationships: Relationships? = nil, type: `Type`) {
            self.attributes = attributes
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct UserInvitationResponse: Codable {
    /// UserInvitation
    public var data: UserInvitation
    public var included: [App]?
    public var links: DocumentLinks

    public init(data: UserInvitation, included: [App]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public struct UserInvitationsResponse: Codable {
    public var data: [UserInvitation]
    public var included: [App]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [UserInvitation], included: [App]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

public struct UserResponse: Codable {
    /// User
    public var data: User
    public var included: [App]?
    public var links: DocumentLinks

    public init(data: User, included: [App]? = nil, links: DocumentLinks) {
        self.data = data
        self.included = included
        self.links = links
    }
}

public enum UserRole: String, Codable, CaseIterable {
    case admin = "ADMIN"
    case finance = "FINANCE"
    case technical = "TECHNICAL"
    case accountHolder = "ACCOUNT_HOLDER"
    case readOnly = "READ_ONLY"
    case sales = "SALES"
    case marketing = "MARKETING"
    case appManager = "APP_MANAGER"
    case developer = "DEVELOPER"
    case accessToReports = "ACCESS_TO_REPORTS"
    case customerSupport = "CUSTOMER_SUPPORT"
    case createApps = "CREATE_APPS"
    case cloudManagedDeveloperID = "CLOUD_MANAGED_DEVELOPER_ID"
    case cloudManagedAppDistribution = "CLOUD_MANAGED_APP_DISTRIBUTION"
}

public struct UserUpdateRequest: Codable {
    public var data: Data

    public struct Data: Codable {
        public var attributes: Attributes?
        public var id: String
        public var relationships: Relationships?
        public var type: `Type`

        public struct Attributes: Codable {
            public var isAllAppsVisible: Bool?
            public var isProvisioningAllowed: Bool?
            public var roles: [UserRole]?

            public init(isAllAppsVisible: Bool? = nil, isProvisioningAllowed: Bool? = nil, roles: [UserRole]? = nil) {
                self.isAllAppsVisible = isAllAppsVisible
                self.isProvisioningAllowed = isProvisioningAllowed
                self.roles = roles
            }

            private enum CodingKeys: String, CodingKey {
                case isAllAppsVisible = "allAppsVisible"
                case isProvisioningAllowed = "provisioningAllowed"
                case roles
            }
        }

        public struct Relationships: Codable {
            public var visibleApps: VisibleApps?

            public struct VisibleApps: Codable {
                public var data: [Datum]?

                public struct Datum: Codable {
                    public var id: String
                    public var type: `Type`

                    public enum `Type`: String, Codable, CaseIterable {
                        case apps
                    }

                    public init(id: String, type: `Type`) {
                        self.id = id
                        self.type = type
                    }
                }

                public init(data: [Datum]? = nil) {
                    self.data = data
                }
            }

            public init(visibleApps: VisibleApps? = nil) {
                self.visibleApps = visibleApps
            }
        }

        public enum `Type`: String, Codable, CaseIterable {
            case users
        }

        public init(attributes: Attributes? = nil, id: String, relationships: Relationships? = nil, type: `Type`) {
            self.attributes = attributes
            self.id = id
            self.relationships = relationships
            self.type = type
        }
    }

    public init(data: Data) {
        self.data = data
    }
}

public struct UserVisibleAppsLinkagesRequest: Codable {
    public var data: [Datum]

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case apps
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum]) {
        self.data = data
    }
}

public struct UserVisibleAppsLinkagesResponse: Codable {
    public var data: [Datum]
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public struct Datum: Codable {
        public var id: String
        public var type: `Type`

        public enum `Type`: String, Codable, CaseIterable {
            case apps
        }

        public init(id: String, type: `Type`) {
            self.id = id
            self.type = type
        }
    }

    public init(data: [Datum], links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.links = links
        self.meta = meta
    }
}

public struct UsersResponse: Codable {
    public var data: [User]
    public var included: [App]?
    public var links: PagedDocumentLinks
    public var meta: PagingInformation?

    public init(data: [User], included: [App]? = nil, links: PagedDocumentLinks, meta: PagingInformation? = nil) {
        self.data = data
        self.included = included
        self.links = links
        self.meta = meta
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
