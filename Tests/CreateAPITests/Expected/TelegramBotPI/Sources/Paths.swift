// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import APIClient

extension Paths {
    public static var getUpdates: GetUpdates {
        GetUpdates(path: "/getUpdates")
    }

    public struct GetUpdates {
        /// Path: `/getUpdates`
        public let path: String

        /// Use this method to receive incoming updates using long polling ([wiki](https://en.wikipedia.org/wiki/Push_technology#Long_polling)). An Array of [Update](https://core.telegram.org/bots/api/#update) objects is returned.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#getupdates)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: [TelegramBotPI.Update]

            public init(isOk: Bool, result: [TelegramBotPI.Update]) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode([TelegramBotPI.Update].self, forKey: .result)
            }
        }

        public struct PostRequest: Encodable {
            /// Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will forgotten.
            public var offset: Int?
            /// Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
            public var limit: Int?
            /// Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
            public var timeout: Int?
            /// A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\_channel\_post”, “callback\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.
            /// 
            /// Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.
            public var allowedUpdates: [String]?

            public init(offset: Int? = nil, limit: Int? = nil, timeout: Int? = nil, allowedUpdates: [String]? = nil) {
                self.offset = offset
                self.limit = limit
                self.timeout = timeout
                self.allowedUpdates = allowedUpdates
            }

            private enum CodingKeys: String, CodingKey {
                case offset
                case limit
                case timeout
                case allowedUpdates = "allowed_updates"
            }
        }
    }
}

extension Paths {
    public static var setWebhook: SetWebhook {
        SetWebhook(path: "/setWebhook")
    }

    public struct SetWebhook {
        /// Path: `/setWebhook`
        public let path: String

        /// Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized [Update](https://core.telegram.org/bots/api/#update). In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns *True* on success.
        /// 
        /// If you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. `https://www.example.com/<token>`. Since nobody else knows your bot's token, you can be pretty sure it's us.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#setwebhook)
        public func post(_ body: Data) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }
    }
}

extension Paths {
    public static var deleteWebhook: DeleteWebhook {
        DeleteWebhook(path: "/deleteWebhook")
    }

    public struct DeleteWebhook {
        /// Path: `/deleteWebhook`
        public let path: String

        /// Use this method to remove webhook integration if you decide to switch back to [getUpdates](https://core.telegram.org/bots/api/#getupdates). Returns *True* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#deletewebhook)
        public func post(isDropPendingUpdates: Bool? = nil) -> Request<PostResponse> {
            .post(path, body: ["drop_pending_updates": isDropPendingUpdates])
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }
    }
}

extension Paths {
    public static var getWebhookInfo: GetWebhookInfo {
        GetWebhookInfo(path: "/getWebhookInfo")
    }

    public struct GetWebhookInfo {
        /// Path: `/getWebhookInfo`
        public let path: String

        /// Use this method to get current webhook status. Requires no parameters. On success, returns a [WebhookInfo](https://core.telegram.org/bots/api/#webhookinfo) object. If the bot is using [getUpdates](https://core.telegram.org/bots/api/#getupdates), will return an object with the *url* field empty.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#getwebhookinfo)
        public var post: Request<PostResponse> {
            .post(path)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            /// Contains information about the current status of a webhook.
            ///
            /// [External Documentation](https://core.telegram.org/bots/api/#webhookinfo)
            public var result: TelegramBotPI.WebhookInfo

            public init(isOk: Bool, result: TelegramBotPI.WebhookInfo) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.WebhookInfo.self, forKey: .result)
            }
        }
    }
}

extension Paths {
    public static var getMe: GetMe {
        GetMe(path: "/getMe")
    }

    public struct GetMe {
        /// Path: `/getMe`
        public let path: String

        /// A simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a [User](https://core.telegram.org/bots/api/#user) object.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#getme)
        public var post: Request<PostResponse> {
            .post(path)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            /// This object represents a Telegram user or bot.
            ///
            /// [External Documentation](https://core.telegram.org/bots/api/#user)
            public var result: TelegramBotPI.User

            public init(isOk: Bool, result: TelegramBotPI.User) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.User.self, forKey: .result)
            }
        }
    }
}

extension Paths {
    public static var logOut: LogOut {
        LogOut(path: "/logOut")
    }

    public struct LogOut {
        /// Path: `/logOut`
        public let path: String

        /// Use this method to log out from the cloud Bot API server before launching the bot locally. You **must** log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns *True* on success. Requires no parameters.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#logout)
        public var post: Request<PostResponse> {
            .post(path)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }
    }
}

extension Paths {
    public static var close: Close {
        Close(path: "/close")
    }

    public struct Close {
        /// Path: `/close`
        public let path: String

        /// Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns *True* on success. Requires no parameters.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#close)
        public var post: Request<PostResponse> {
            .post(path)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }
    }
}

extension Paths {
    public static var sendMessage: SendMessage {
        SendMessage(path: "/sendMessage")
    }

    public struct SendMessage {
        /// Path: `/sendMessage`
        public let path: String

        /// Use this method to send text messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#sendmessage)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: TelegramBotPI.Message

            public init(isOk: Bool, result: TelegramBotPI.Message) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.Message.self, forKey: .result)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public var chatID: ChatID
            /// Text of the message to be sent, 1-4096 characters after entities parsing
            public var text: String
            /// Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            public var parseMode: String?
            /// List of special entities that appear in message text, which can be specified instead of *parse\_mode*
            public var entities: [TelegramBotPI.MessageEntity]?
            /// Disables link previews for links in this message
            public var isDisableWebPagePreview: Bool?
            /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
            public var isDisableNotification: Bool?
            /// If the message is a reply, ID of the original message
            public var replyToMessageID: Int?
            /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
            public var allowSendingWithoutReply: Bool?
            /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
            public var replyMarkup: ReplyMarkup?

            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
            public struct ReplyMarkup: Encodable {
                /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
                public var inlineKeyboardMarkup: TelegramBotPI.InlineKeyboardMarkup?
                /// This object represents a [custom keyboard](https://core.telegram.org/bots#keyboards) with reply options (see [Introduction to bots](https://core.telegram.org/bots#keyboards) for details and examples).
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#replykeyboardmarkup)
                public var replyKeyboardMarkup: TelegramBotPI.ReplyKeyboardMarkup?
                /// Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup)).
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#replykeyboardremove)
                public var replyKeyboardRemove: TelegramBotPI.ReplyKeyboardRemove?
                /// Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice [privacy mode](/bots#privacy-mode).
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#forcereply)
                public var forceReply: TelegramBotPI.ForceReply?

                public init(inlineKeyboardMarkup: TelegramBotPI.InlineKeyboardMarkup? = nil, replyKeyboardMarkup: TelegramBotPI.ReplyKeyboardMarkup? = nil, replyKeyboardRemove: TelegramBotPI.ReplyKeyboardRemove? = nil, forceReply: TelegramBotPI.ForceReply? = nil) {
                    self.inlineKeyboardMarkup = inlineKeyboardMarkup
                    self.replyKeyboardMarkup = replyKeyboardMarkup
                    self.replyKeyboardRemove = replyKeyboardRemove
                    self.forceReply = forceReply
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = inlineKeyboardMarkup { try container.encode(value) }
                    if let value = replyKeyboardMarkup { try container.encode(value) }
                    if let value = replyKeyboardRemove { try container.encode(value) }
                    if let value = forceReply { try container.encode(value) }
                }
            }

            public init(chatID: ChatID, text: String, parseMode: String? = nil, entities: [TelegramBotPI.MessageEntity]? = nil, isDisableWebPagePreview: Bool? = nil, isDisableNotification: Bool? = nil, replyToMessageID: Int? = nil, allowSendingWithoutReply: Bool? = nil, replyMarkup: ReplyMarkup? = nil) {
                self.chatID = chatID
                self.text = text
                self.parseMode = parseMode
                self.entities = entities
                self.isDisableWebPagePreview = isDisableWebPagePreview
                self.isDisableNotification = isDisableNotification
                self.replyToMessageID = replyToMessageID
                self.allowSendingWithoutReply = allowSendingWithoutReply
                self.replyMarkup = replyMarkup
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case text
                case parseMode = "parse_mode"
                case entities
                case isDisableWebPagePreview = "disable_web_page_preview"
                case isDisableNotification = "disable_notification"
                case replyToMessageID = "reply_to_message_id"
                case allowSendingWithoutReply = "allow_sending_without_reply"
                case replyMarkup = "reply_markup"
            }
        }
    }
}

extension Paths {
    public static var forwardMessage: ForwardMessage {
        ForwardMessage(path: "/forwardMessage")
    }

    public struct ForwardMessage {
        /// Path: `/forwardMessage`
        public let path: String

        /// Use this method to forward messages of any kind. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#forwardmessage)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: TelegramBotPI.Message

            public init(isOk: Bool, result: TelegramBotPI.Message) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.Message.self, forKey: .result)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public var chatID: ChatID
            /// Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
            public var fromChatID: FromChatID
            /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
            public var isDisableNotification: Bool?
            /// Message identifier in the chat specified in *from\_chat\_id*
            public var messageID: Int

            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            /// Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
            public struct FromChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID, fromChatID: FromChatID, isDisableNotification: Bool? = nil, messageID: Int) {
                self.chatID = chatID
                self.fromChatID = fromChatID
                self.isDisableNotification = isDisableNotification
                self.messageID = messageID
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case fromChatID = "from_chat_id"
                case isDisableNotification = "disable_notification"
                case messageID = "message_id"
            }
        }
    }
}

extension Paths {
    public static var copyMessage: CopyMessage {
        CopyMessage(path: "/copyMessage")
    }

    public struct CopyMessage {
        /// Path: `/copyMessage`
        public let path: String

        /// Use this method to copy messages of any kind. The method is analogous to the method [forwardMessages](https://core.telegram.org/bots/api/#forwardmessages), but the copied message doesn't have a link to the original message. Returns the [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent message on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#copymessage)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            /// This object represents a unique message identifier.
            ///
            /// [External Documentation](https://core.telegram.org/bots/api/#messageid)
            public var result: TelegramBotPI.MessageID

            public init(isOk: Bool, result: TelegramBotPI.MessageID) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.MessageID.self, forKey: .result)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public var chatID: ChatID
            /// Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
            public var fromChatID: FromChatID
            /// Message identifier in the chat specified in *from\_chat\_id*
            public var messageID: Int
            /// New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
            public var caption: String?
            /// Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            public var parseMode: String?
            /// List of special entities that appear in the new caption, which can be specified instead of *parse\_mode*
            public var captionEntities: [TelegramBotPI.MessageEntity]?
            /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
            public var isDisableNotification: Bool?
            /// If the message is a reply, ID of the original message
            public var replyToMessageID: Int?
            /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
            public var allowSendingWithoutReply: Bool?
            /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
            public var replyMarkup: ReplyMarkup?

            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            /// Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
            public struct FromChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
            public struct ReplyMarkup: Encodable {
                /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
                public var inlineKeyboardMarkup: TelegramBotPI.InlineKeyboardMarkup?
                /// This object represents a [custom keyboard](https://core.telegram.org/bots#keyboards) with reply options (see [Introduction to bots](https://core.telegram.org/bots#keyboards) for details and examples).
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#replykeyboardmarkup)
                public var replyKeyboardMarkup: TelegramBotPI.ReplyKeyboardMarkup?
                /// Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup)).
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#replykeyboardremove)
                public var replyKeyboardRemove: TelegramBotPI.ReplyKeyboardRemove?
                /// Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice [privacy mode](/bots#privacy-mode).
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#forcereply)
                public var forceReply: TelegramBotPI.ForceReply?

                public init(inlineKeyboardMarkup: TelegramBotPI.InlineKeyboardMarkup? = nil, replyKeyboardMarkup: TelegramBotPI.ReplyKeyboardMarkup? = nil, replyKeyboardRemove: TelegramBotPI.ReplyKeyboardRemove? = nil, forceReply: TelegramBotPI.ForceReply? = nil) {
                    self.inlineKeyboardMarkup = inlineKeyboardMarkup
                    self.replyKeyboardMarkup = replyKeyboardMarkup
                    self.replyKeyboardRemove = replyKeyboardRemove
                    self.forceReply = forceReply
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = inlineKeyboardMarkup { try container.encode(value) }
                    if let value = replyKeyboardMarkup { try container.encode(value) }
                    if let value = replyKeyboardRemove { try container.encode(value) }
                    if let value = forceReply { try container.encode(value) }
                }
            }

            public init(chatID: ChatID, fromChatID: FromChatID, messageID: Int, caption: String? = nil, parseMode: String? = nil, captionEntities: [TelegramBotPI.MessageEntity]? = nil, isDisableNotification: Bool? = nil, replyToMessageID: Int? = nil, allowSendingWithoutReply: Bool? = nil, replyMarkup: ReplyMarkup? = nil) {
                self.chatID = chatID
                self.fromChatID = fromChatID
                self.messageID = messageID
                self.caption = caption
                self.parseMode = parseMode
                self.captionEntities = captionEntities
                self.isDisableNotification = isDisableNotification
                self.replyToMessageID = replyToMessageID
                self.allowSendingWithoutReply = allowSendingWithoutReply
                self.replyMarkup = replyMarkup
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case fromChatID = "from_chat_id"
                case messageID = "message_id"
                case caption
                case parseMode = "parse_mode"
                case captionEntities = "caption_entities"
                case isDisableNotification = "disable_notification"
                case replyToMessageID = "reply_to_message_id"
                case allowSendingWithoutReply = "allow_sending_without_reply"
                case replyMarkup = "reply_markup"
            }
        }
    }
}

extension Paths {
    public static var sendPhoto: SendPhoto {
        SendPhoto(path: "/sendPhoto")
    }

    public struct SendPhoto {
        /// Path: `/sendPhoto`
        public let path: String

        /// Use this method to send photos. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#sendphoto)
        public func post(_ body: Data) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: TelegramBotPI.Message

            public init(isOk: Bool, result: TelegramBotPI.Message) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.Message.self, forKey: .result)
            }
        }
    }
}

extension Paths {
    public static var sendAudio: SendAudio {
        SendAudio(path: "/sendAudio")
    }

    public struct SendAudio {
        /// Path: `/sendAudio`
        public let path: String

        /// Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.
        /// 
        /// For sending voice messages, use the [sendVoice](https://core.telegram.org/bots/api/#sendvoice) method instead.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#sendaudio)
        public func post(_ body: Data) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: TelegramBotPI.Message

            public init(isOk: Bool, result: TelegramBotPI.Message) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.Message.self, forKey: .result)
            }
        }
    }
}

extension Paths {
    public static var sendDocument: SendDocument {
        SendDocument(path: "/sendDocument")
    }

    public struct SendDocument {
        /// Path: `/sendDocument`
        public let path: String

        /// Use this method to send general files. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#senddocument)
        public func post(_ body: Data) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: TelegramBotPI.Message

            public init(isOk: Bool, result: TelegramBotPI.Message) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.Message.self, forKey: .result)
            }
        }
    }
}

extension Paths {
    public static var sendVideo: SendVideo {
        SendVideo(path: "/sendVideo")
    }

    public struct SendVideo {
        /// Path: `/sendVideo`
        public let path: String

        /// Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#sendvideo)
        public func post(_ body: Data) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: TelegramBotPI.Message

            public init(isOk: Bool, result: TelegramBotPI.Message) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.Message.self, forKey: .result)
            }
        }
    }
}

extension Paths {
    public static var sendAnimation: SendAnimation {
        SendAnimation(path: "/sendAnimation")
    }

    public struct SendAnimation {
        /// Path: `/sendAnimation`
        public let path: String

        /// Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#sendanimation)
        public func post(_ body: Data) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: TelegramBotPI.Message

            public init(isOk: Bool, result: TelegramBotPI.Message) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.Message.self, forKey: .result)
            }
        }
    }
}

extension Paths {
    public static var sendVoice: SendVoice {
        SendVoice(path: "/sendVoice")
    }

    public struct SendVoice {
        /// Path: `/sendVoice`
        public let path: String

        /// Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as [Audio](https://core.telegram.org/bots/api/#audio) or [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#sendvoice)
        public func post(_ body: Data) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: TelegramBotPI.Message

            public init(isOk: Bool, result: TelegramBotPI.Message) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.Message.self, forKey: .result)
            }
        }
    }
}

extension Paths {
    public static var sendVideoNote: SendVideoNote {
        SendVideoNote(path: "/sendVideoNote")
    }

    public struct SendVideoNote {
        /// Path: `/sendVideoNote`
        public let path: String

        /// As of [v.4.0](https://telegram.org/blog/video-messages-and-telescope), Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#sendvideonote)
        public func post(_ body: Data) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: TelegramBotPI.Message

            public init(isOk: Bool, result: TelegramBotPI.Message) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.Message.self, forKey: .result)
            }
        }
    }
}

extension Paths {
    public static var sendMediaGroup: SendMediaGroup {
        SendMediaGroup(path: "/sendMediaGroup")
    }

    public struct SendMediaGroup {
        /// Path: `/sendMediaGroup`
        public let path: String

        /// Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of [Messages](https://core.telegram.org/bots/api/#message) that were sent is returned.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#sendmediagroup)
        public func post(_ body: Data) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: [TelegramBotPI.Message]

            public init(isOk: Bool, result: [TelegramBotPI.Message]) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode([TelegramBotPI.Message].self, forKey: .result)
            }
        }
    }
}

extension Paths {
    public static var sendLocation: SendLocation {
        SendLocation(path: "/sendLocation")
    }

    public struct SendLocation {
        /// Path: `/sendLocation`
        public let path: String

        /// Use this method to send point on the map. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#sendlocation)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: TelegramBotPI.Message

            public init(isOk: Bool, result: TelegramBotPI.Message) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.Message.self, forKey: .result)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public var chatID: ChatID
            /// Latitude of the location
            public var latitude: Double
            /// Longitude of the location
            public var longitude: Double
            /// The radius of uncertainty for the location, measured in meters; 0-1500
            public var horizontalAccuracy: Double?
            /// Period in seconds for which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400.
            public var livePeriod: Int?
            /// For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
            public var heading: Int?
            /// For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
            public var proximityAlertRadius: Int?
            /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
            public var isDisableNotification: Bool?
            /// If the message is a reply, ID of the original message
            public var replyToMessageID: Int?
            /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
            public var allowSendingWithoutReply: Bool?
            /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
            public var replyMarkup: ReplyMarkup?

            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
            public struct ReplyMarkup: Encodable {
                /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
                public var inlineKeyboardMarkup: TelegramBotPI.InlineKeyboardMarkup?
                /// This object represents a [custom keyboard](https://core.telegram.org/bots#keyboards) with reply options (see [Introduction to bots](https://core.telegram.org/bots#keyboards) for details and examples).
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#replykeyboardmarkup)
                public var replyKeyboardMarkup: TelegramBotPI.ReplyKeyboardMarkup?
                /// Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup)).
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#replykeyboardremove)
                public var replyKeyboardRemove: TelegramBotPI.ReplyKeyboardRemove?
                /// Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice [privacy mode](/bots#privacy-mode).
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#forcereply)
                public var forceReply: TelegramBotPI.ForceReply?

                public init(inlineKeyboardMarkup: TelegramBotPI.InlineKeyboardMarkup? = nil, replyKeyboardMarkup: TelegramBotPI.ReplyKeyboardMarkup? = nil, replyKeyboardRemove: TelegramBotPI.ReplyKeyboardRemove? = nil, forceReply: TelegramBotPI.ForceReply? = nil) {
                    self.inlineKeyboardMarkup = inlineKeyboardMarkup
                    self.replyKeyboardMarkup = replyKeyboardMarkup
                    self.replyKeyboardRemove = replyKeyboardRemove
                    self.forceReply = forceReply
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = inlineKeyboardMarkup { try container.encode(value) }
                    if let value = replyKeyboardMarkup { try container.encode(value) }
                    if let value = replyKeyboardRemove { try container.encode(value) }
                    if let value = forceReply { try container.encode(value) }
                }
            }

            public init(chatID: ChatID, latitude: Double, longitude: Double, horizontalAccuracy: Double? = nil, livePeriod: Int? = nil, heading: Int? = nil, proximityAlertRadius: Int? = nil, isDisableNotification: Bool? = nil, replyToMessageID: Int? = nil, allowSendingWithoutReply: Bool? = nil, replyMarkup: ReplyMarkup? = nil) {
                self.chatID = chatID
                self.latitude = latitude
                self.longitude = longitude
                self.horizontalAccuracy = horizontalAccuracy
                self.livePeriod = livePeriod
                self.heading = heading
                self.proximityAlertRadius = proximityAlertRadius
                self.isDisableNotification = isDisableNotification
                self.replyToMessageID = replyToMessageID
                self.allowSendingWithoutReply = allowSendingWithoutReply
                self.replyMarkup = replyMarkup
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case latitude
                case longitude
                case horizontalAccuracy = "horizontal_accuracy"
                case livePeriod = "live_period"
                case heading
                case proximityAlertRadius = "proximity_alert_radius"
                case isDisableNotification = "disable_notification"
                case replyToMessageID = "reply_to_message_id"
                case allowSendingWithoutReply = "allow_sending_without_reply"
                case replyMarkup = "reply_markup"
            }
        }
    }
}

extension Paths {
    public static var editMessageLiveLocation: EditMessageLiveLocation {
        EditMessageLiveLocation(path: "/editMessageLiveLocation")
    }

    public struct EditMessageLiveLocation {
        /// Path: `/editMessageLiveLocation`
        public let path: String

        /// Use this method to edit live location messages. A location can be edited until its *live\_period* expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api/#stopmessagelivelocation). On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#editmessagelivelocation)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: Result

            public struct Result: Decodable {
                public var message: TelegramBotPI.Message?
                public var isBool: Bool

                public init(message: TelegramBotPI.Message? = nil, isBool: Bool? = nil) {
                    self.message = message
                    self.isBool = isBool ?? true
                }

                public init(from decoder: Decoder) throws {
                    let container = try decoder.singleValueContainer()
                    self.message = try? container.decode(TelegramBotPI.Message.self)
                    self.isBool = (try? container.decode(Bool.self)) ?? true
                }
            }

            public init(isOk: Bool, result: Result) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(Result.self, forKey: .result)
            }
        }

        public struct PostRequest: Encodable {
            /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public var chatID: ChatID?
            /// Required if *inline\_message\_id* is not specified. Identifier of the message to edit
            public var messageID: Int?
            /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
            public var inlineMessageID: String?
            /// Latitude of new location
            public var latitude: Double
            /// Longitude of new location
            public var longitude: Double
            /// The radius of uncertainty for the location, measured in meters; 0-1500
            public var horizontalAccuracy: Double?
            /// Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
            public var heading: Int?
            /// Maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
            public var proximityAlertRadius: Int?
            /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
            ///
            /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
            public var replyMarkup: TelegramBotPI.InlineKeyboardMarkup?

            /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID? = nil, messageID: Int? = nil, inlineMessageID: String? = nil, latitude: Double, longitude: Double, horizontalAccuracy: Double? = nil, heading: Int? = nil, proximityAlertRadius: Int? = nil, replyMarkup: TelegramBotPI.InlineKeyboardMarkup? = nil) {
                self.chatID = chatID
                self.messageID = messageID
                self.inlineMessageID = inlineMessageID
                self.latitude = latitude
                self.longitude = longitude
                self.horizontalAccuracy = horizontalAccuracy
                self.heading = heading
                self.proximityAlertRadius = proximityAlertRadius
                self.replyMarkup = replyMarkup
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case messageID = "message_id"
                case inlineMessageID = "inline_message_id"
                case latitude
                case longitude
                case horizontalAccuracy = "horizontal_accuracy"
                case heading
                case proximityAlertRadius = "proximity_alert_radius"
                case replyMarkup = "reply_markup"
            }
        }
    }
}

extension Paths {
    public static var stopMessageLiveLocation: StopMessageLiveLocation {
        StopMessageLiveLocation(path: "/stopMessageLiveLocation")
    }

    public struct StopMessageLiveLocation {
        /// Path: `/stopMessageLiveLocation`
        public let path: String

        /// Use this method to stop updating a live location message before *live\_period* expires. On success, if the message was sent by the bot, the sent [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#stopmessagelivelocation)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: Result

            public struct Result: Decodable {
                public var message: TelegramBotPI.Message?
                public var isBool: Bool

                public init(message: TelegramBotPI.Message? = nil, isBool: Bool? = nil) {
                    self.message = message
                    self.isBool = isBool ?? true
                }

                public init(from decoder: Decoder) throws {
                    let container = try decoder.singleValueContainer()
                    self.message = try? container.decode(TelegramBotPI.Message.self)
                    self.isBool = (try? container.decode(Bool.self)) ?? true
                }
            }

            public init(isOk: Bool, result: Result) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(Result.self, forKey: .result)
            }
        }

        public struct PostRequest: Encodable {
            /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public var chatID: ChatID?
            /// Required if *inline\_message\_id* is not specified. Identifier of the message with live location to stop
            public var messageID: Int?
            /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
            public var inlineMessageID: String?
            /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
            ///
            /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
            public var replyMarkup: TelegramBotPI.InlineKeyboardMarkup?

            /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID? = nil, messageID: Int? = nil, inlineMessageID: String? = nil, replyMarkup: TelegramBotPI.InlineKeyboardMarkup? = nil) {
                self.chatID = chatID
                self.messageID = messageID
                self.inlineMessageID = inlineMessageID
                self.replyMarkup = replyMarkup
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case messageID = "message_id"
                case inlineMessageID = "inline_message_id"
                case replyMarkup = "reply_markup"
            }
        }
    }
}

extension Paths {
    public static var sendVenue: SendVenue {
        SendVenue(path: "/sendVenue")
    }

    public struct SendVenue {
        /// Path: `/sendVenue`
        public let path: String

        /// Use this method to send information about a venue. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#sendvenue)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: TelegramBotPI.Message

            public init(isOk: Bool, result: TelegramBotPI.Message) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.Message.self, forKey: .result)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public var chatID: ChatID
            /// Latitude of the venue
            public var latitude: Double
            /// Longitude of the venue
            public var longitude: Double
            /// Name of the venue
            public var title: String
            /// Address of the venue
            public var address: String
            /// Foursquare identifier of the venue
            public var foursquareID: String?
            /// Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
            public var foursquareType: String?
            /// Google Places identifier of the venue
            public var googlePlaceID: String?
            /// Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
            public var googlePlaceType: String?
            /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
            public var isDisableNotification: Bool?
            /// If the message is a reply, ID of the original message
            public var replyToMessageID: Int?
            /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
            public var allowSendingWithoutReply: Bool?
            /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
            public var replyMarkup: ReplyMarkup?

            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
            public struct ReplyMarkup: Encodable {
                /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
                public var inlineKeyboardMarkup: TelegramBotPI.InlineKeyboardMarkup?
                /// This object represents a [custom keyboard](https://core.telegram.org/bots#keyboards) with reply options (see [Introduction to bots](https://core.telegram.org/bots#keyboards) for details and examples).
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#replykeyboardmarkup)
                public var replyKeyboardMarkup: TelegramBotPI.ReplyKeyboardMarkup?
                /// Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup)).
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#replykeyboardremove)
                public var replyKeyboardRemove: TelegramBotPI.ReplyKeyboardRemove?
                /// Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice [privacy mode](/bots#privacy-mode).
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#forcereply)
                public var forceReply: TelegramBotPI.ForceReply?

                public init(inlineKeyboardMarkup: TelegramBotPI.InlineKeyboardMarkup? = nil, replyKeyboardMarkup: TelegramBotPI.ReplyKeyboardMarkup? = nil, replyKeyboardRemove: TelegramBotPI.ReplyKeyboardRemove? = nil, forceReply: TelegramBotPI.ForceReply? = nil) {
                    self.inlineKeyboardMarkup = inlineKeyboardMarkup
                    self.replyKeyboardMarkup = replyKeyboardMarkup
                    self.replyKeyboardRemove = replyKeyboardRemove
                    self.forceReply = forceReply
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = inlineKeyboardMarkup { try container.encode(value) }
                    if let value = replyKeyboardMarkup { try container.encode(value) }
                    if let value = replyKeyboardRemove { try container.encode(value) }
                    if let value = forceReply { try container.encode(value) }
                }
            }

            public init(chatID: ChatID, latitude: Double, longitude: Double, title: String, address: String, foursquareID: String? = nil, foursquareType: String? = nil, googlePlaceID: String? = nil, googlePlaceType: String? = nil, isDisableNotification: Bool? = nil, replyToMessageID: Int? = nil, allowSendingWithoutReply: Bool? = nil, replyMarkup: ReplyMarkup? = nil) {
                self.chatID = chatID
                self.latitude = latitude
                self.longitude = longitude
                self.title = title
                self.address = address
                self.foursquareID = foursquareID
                self.foursquareType = foursquareType
                self.googlePlaceID = googlePlaceID
                self.googlePlaceType = googlePlaceType
                self.isDisableNotification = isDisableNotification
                self.replyToMessageID = replyToMessageID
                self.allowSendingWithoutReply = allowSendingWithoutReply
                self.replyMarkup = replyMarkup
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case latitude
                case longitude
                case title
                case address
                case foursquareID = "foursquare_id"
                case foursquareType = "foursquare_type"
                case googlePlaceID = "google_place_id"
                case googlePlaceType = "google_place_type"
                case isDisableNotification = "disable_notification"
                case replyToMessageID = "reply_to_message_id"
                case allowSendingWithoutReply = "allow_sending_without_reply"
                case replyMarkup = "reply_markup"
            }
        }
    }
}

extension Paths {
    public static var sendContact: SendContact {
        SendContact(path: "/sendContact")
    }

    public struct SendContact {
        /// Path: `/sendContact`
        public let path: String

        /// Use this method to send phone contacts. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#sendcontact)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: TelegramBotPI.Message

            public init(isOk: Bool, result: TelegramBotPI.Message) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.Message.self, forKey: .result)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public var chatID: ChatID
            /// Contact's phone number
            public var phoneNumber: String
            /// Contact's first name
            public var firstName: String
            /// Contact's last name
            public var lastName: String?
            /// Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
            public var vcard: String?
            /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
            public var isDisableNotification: Bool?
            /// If the message is a reply, ID of the original message
            public var replyToMessageID: Int?
            /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
            public var allowSendingWithoutReply: Bool?
            /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.
            public var replyMarkup: ReplyMarkup?

            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.
            public struct ReplyMarkup: Encodable {
                /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
                public var inlineKeyboardMarkup: TelegramBotPI.InlineKeyboardMarkup?
                /// This object represents a [custom keyboard](https://core.telegram.org/bots#keyboards) with reply options (see [Introduction to bots](https://core.telegram.org/bots#keyboards) for details and examples).
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#replykeyboardmarkup)
                public var replyKeyboardMarkup: TelegramBotPI.ReplyKeyboardMarkup?
                /// Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup)).
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#replykeyboardremove)
                public var replyKeyboardRemove: TelegramBotPI.ReplyKeyboardRemove?
                /// Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice [privacy mode](/bots#privacy-mode).
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#forcereply)
                public var forceReply: TelegramBotPI.ForceReply?

                public init(inlineKeyboardMarkup: TelegramBotPI.InlineKeyboardMarkup? = nil, replyKeyboardMarkup: TelegramBotPI.ReplyKeyboardMarkup? = nil, replyKeyboardRemove: TelegramBotPI.ReplyKeyboardRemove? = nil, forceReply: TelegramBotPI.ForceReply? = nil) {
                    self.inlineKeyboardMarkup = inlineKeyboardMarkup
                    self.replyKeyboardMarkup = replyKeyboardMarkup
                    self.replyKeyboardRemove = replyKeyboardRemove
                    self.forceReply = forceReply
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = inlineKeyboardMarkup { try container.encode(value) }
                    if let value = replyKeyboardMarkup { try container.encode(value) }
                    if let value = replyKeyboardRemove { try container.encode(value) }
                    if let value = forceReply { try container.encode(value) }
                }
            }

            public init(chatID: ChatID, phoneNumber: String, firstName: String, lastName: String? = nil, vcard: String? = nil, isDisableNotification: Bool? = nil, replyToMessageID: Int? = nil, allowSendingWithoutReply: Bool? = nil, replyMarkup: ReplyMarkup? = nil) {
                self.chatID = chatID
                self.phoneNumber = phoneNumber
                self.firstName = firstName
                self.lastName = lastName
                self.vcard = vcard
                self.isDisableNotification = isDisableNotification
                self.replyToMessageID = replyToMessageID
                self.allowSendingWithoutReply = allowSendingWithoutReply
                self.replyMarkup = replyMarkup
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case phoneNumber = "phone_number"
                case firstName = "first_name"
                case lastName = "last_name"
                case vcard
                case isDisableNotification = "disable_notification"
                case replyToMessageID = "reply_to_message_id"
                case allowSendingWithoutReply = "allow_sending_without_reply"
                case replyMarkup = "reply_markup"
            }
        }
    }
}

extension Paths {
    public static var sendPoll: SendPoll {
        SendPoll(path: "/sendPoll")
    }

    public struct SendPoll {
        /// Path: `/sendPoll`
        public let path: String

        /// Use this method to send a native poll. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#sendpoll)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: TelegramBotPI.Message

            public init(isOk: Bool, result: TelegramBotPI.Message) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.Message.self, forKey: .result)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public var chatID: ChatID
            /// Poll question, 1-300 characters
            public var question: String
            /// A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
            public var options: [String]
            /// True, if the poll needs to be anonymous, defaults to *True*
            public var isAnonymous: Bool?
            /// Poll type, “quiz” or “regular”, defaults to “regular”
            public var type: String?
            /// True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*
            public var allowsMultipleAnswers: Bool?
            /// 0-based identifier of the correct answer option, required for polls in quiz mode
            public var correctOptionID: Int?
            /// Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
            public var explanation: String?
            /// Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            public var explanationParseMode: String?
            /// List of special entities that appear in the poll explanation, which can be specified instead of *parse\_mode*
            public var explanationEntities: [TelegramBotPI.MessageEntity]?
            /// Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with *close\_date*.
            public var openPeriod: Int?
            /// Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with *open\_period*.
            public var closeDate: Int?
            /// Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.
            public var isClosed: Bool?
            /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
            public var isDisableNotification: Bool?
            /// If the message is a reply, ID of the original message
            public var replyToMessageID: Int?
            /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
            public var allowSendingWithoutReply: Bool?
            /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
            public var replyMarkup: ReplyMarkup?

            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
            public struct ReplyMarkup: Encodable {
                /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
                public var inlineKeyboardMarkup: TelegramBotPI.InlineKeyboardMarkup?
                /// This object represents a [custom keyboard](https://core.telegram.org/bots#keyboards) with reply options (see [Introduction to bots](https://core.telegram.org/bots#keyboards) for details and examples).
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#replykeyboardmarkup)
                public var replyKeyboardMarkup: TelegramBotPI.ReplyKeyboardMarkup?
                /// Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup)).
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#replykeyboardremove)
                public var replyKeyboardRemove: TelegramBotPI.ReplyKeyboardRemove?
                /// Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice [privacy mode](/bots#privacy-mode).
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#forcereply)
                public var forceReply: TelegramBotPI.ForceReply?

                public init(inlineKeyboardMarkup: TelegramBotPI.InlineKeyboardMarkup? = nil, replyKeyboardMarkup: TelegramBotPI.ReplyKeyboardMarkup? = nil, replyKeyboardRemove: TelegramBotPI.ReplyKeyboardRemove? = nil, forceReply: TelegramBotPI.ForceReply? = nil) {
                    self.inlineKeyboardMarkup = inlineKeyboardMarkup
                    self.replyKeyboardMarkup = replyKeyboardMarkup
                    self.replyKeyboardRemove = replyKeyboardRemove
                    self.forceReply = forceReply
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = inlineKeyboardMarkup { try container.encode(value) }
                    if let value = replyKeyboardMarkup { try container.encode(value) }
                    if let value = replyKeyboardRemove { try container.encode(value) }
                    if let value = forceReply { try container.encode(value) }
                }
            }

            public init(chatID: ChatID, question: String, options: [String], isAnonymous: Bool? = nil, type: String? = nil, allowsMultipleAnswers: Bool? = nil, correctOptionID: Int? = nil, explanation: String? = nil, explanationParseMode: String? = nil, explanationEntities: [TelegramBotPI.MessageEntity]? = nil, openPeriod: Int? = nil, closeDate: Int? = nil, isClosed: Bool? = nil, isDisableNotification: Bool? = nil, replyToMessageID: Int? = nil, allowSendingWithoutReply: Bool? = nil, replyMarkup: ReplyMarkup? = nil) {
                self.chatID = chatID
                self.question = question
                self.options = options
                self.isAnonymous = isAnonymous
                self.type = type
                self.allowsMultipleAnswers = allowsMultipleAnswers
                self.correctOptionID = correctOptionID
                self.explanation = explanation
                self.explanationParseMode = explanationParseMode
                self.explanationEntities = explanationEntities
                self.openPeriod = openPeriod
                self.closeDate = closeDate
                self.isClosed = isClosed
                self.isDisableNotification = isDisableNotification
                self.replyToMessageID = replyToMessageID
                self.allowSendingWithoutReply = allowSendingWithoutReply
                self.replyMarkup = replyMarkup
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case question
                case options
                case isAnonymous = "is_anonymous"
                case type
                case allowsMultipleAnswers = "allows_multiple_answers"
                case correctOptionID = "correct_option_id"
                case explanation
                case explanationParseMode = "explanation_parse_mode"
                case explanationEntities = "explanation_entities"
                case openPeriod = "open_period"
                case closeDate = "close_date"
                case isClosed = "is_closed"
                case isDisableNotification = "disable_notification"
                case replyToMessageID = "reply_to_message_id"
                case allowSendingWithoutReply = "allow_sending_without_reply"
                case replyMarkup = "reply_markup"
            }
        }
    }
}

extension Paths {
    public static var sendDice: SendDice {
        SendDice(path: "/sendDice")
    }

    public struct SendDice {
        /// Path: `/sendDice`
        public let path: String

        /// Use this method to send an animated emoji that will display a random value. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#senddice)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: TelegramBotPI.Message

            public init(isOk: Bool, result: TelegramBotPI.Message) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.Message.self, forKey: .result)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public var chatID: ChatID
            /// Emoji on which the dice throw animation is based. Currently, must be one of “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”, “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />”, “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, or “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Dice can have values 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, values 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, and values 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Defaults to “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”
            public var emoji: Emoji?
            /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
            public var isDisableNotification: Bool?
            /// If the message is a reply, ID of the original message
            public var replyToMessageID: Int?
            /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
            public var allowSendingWithoutReply: Bool?
            /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
            public var replyMarkup: ReplyMarkup?

            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            /// Emoji on which the dice throw animation is based. Currently, must be one of “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”, “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />”, “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, or “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Dice can have values 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, values 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, and values 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Defaults to “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”
            public enum Emoji: String, Codable, CaseIterable {
                case gameDie = "🎲"
                case directHit = "🎯"
                case basketballAndHoop = "🏀"
                case soccerBall = "⚽"
                case slotMachine = "🎰"
            }

            /// Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
            public struct ReplyMarkup: Encodable {
                /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
                public var inlineKeyboardMarkup: TelegramBotPI.InlineKeyboardMarkup?
                /// This object represents a [custom keyboard](https://core.telegram.org/bots#keyboards) with reply options (see [Introduction to bots](https://core.telegram.org/bots#keyboards) for details and examples).
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#replykeyboardmarkup)
                public var replyKeyboardMarkup: TelegramBotPI.ReplyKeyboardMarkup?
                /// Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup)).
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#replykeyboardremove)
                public var replyKeyboardRemove: TelegramBotPI.ReplyKeyboardRemove?
                /// Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice [privacy mode](/bots#privacy-mode).
                ///
                /// [External Documentation](https://core.telegram.org/bots/api/#forcereply)
                public var forceReply: TelegramBotPI.ForceReply?

                public init(inlineKeyboardMarkup: TelegramBotPI.InlineKeyboardMarkup? = nil, replyKeyboardMarkup: TelegramBotPI.ReplyKeyboardMarkup? = nil, replyKeyboardRemove: TelegramBotPI.ReplyKeyboardRemove? = nil, forceReply: TelegramBotPI.ForceReply? = nil) {
                    self.inlineKeyboardMarkup = inlineKeyboardMarkup
                    self.replyKeyboardMarkup = replyKeyboardMarkup
                    self.replyKeyboardRemove = replyKeyboardRemove
                    self.forceReply = forceReply
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = inlineKeyboardMarkup { try container.encode(value) }
                    if let value = replyKeyboardMarkup { try container.encode(value) }
                    if let value = replyKeyboardRemove { try container.encode(value) }
                    if let value = forceReply { try container.encode(value) }
                }
            }

            public init(chatID: ChatID, emoji: Emoji? = nil, isDisableNotification: Bool? = nil, replyToMessageID: Int? = nil, allowSendingWithoutReply: Bool? = nil, replyMarkup: ReplyMarkup? = nil) {
                self.chatID = chatID
                self.emoji = emoji
                self.isDisableNotification = isDisableNotification
                self.replyToMessageID = replyToMessageID
                self.allowSendingWithoutReply = allowSendingWithoutReply
                self.replyMarkup = replyMarkup
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case emoji
                case isDisableNotification = "disable_notification"
                case replyToMessageID = "reply_to_message_id"
                case allowSendingWithoutReply = "allow_sending_without_reply"
                case replyMarkup = "reply_markup"
            }
        }
    }
}

extension Paths {
    public static var sendChatAction: SendChatAction {
        SendChatAction(path: "/sendChatAction")
    }

    public struct SendChatAction {
        /// Path: `/sendChatAction`
        public let path: String

        /// Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns *True* on success.
        /// 
        /// Example: The [ImageBot](https://t.me/imagebot) needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use [sendChatAction](https://core.telegram.org/bots/api/#sendchataction) with *action* = *upload\_photo*. The user will see a “sending photo” status for the bot.
        /// 
        /// We only recommend using this method when a response from the bot will take a **noticeable** amount of time to arrive.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#sendchataction)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public var chatID: ChatID
            /// Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\_video* or *upload\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\_voice* or *upload\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *find\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\_video\_note* or *upload\_video\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).
            public var action: String

            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID, action: String) {
                self.chatID = chatID
                self.action = action
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case action
            }
        }
    }
}

extension Paths {
    public static var getUserProfilePhotos: GetUserProfilePhotos {
        GetUserProfilePhotos(path: "/getUserProfilePhotos")
    }

    public struct GetUserProfilePhotos {
        /// Path: `/getUserProfilePhotos`
        public let path: String

        /// Use this method to get a list of profile pictures for a user. Returns a [UserProfilePhotos](https://core.telegram.org/bots/api/#userprofilephotos) object.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#getuserprofilephotos)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            /// This object represent a user's profile pictures.
            ///
            /// [External Documentation](https://core.telegram.org/bots/api/#userprofilephotos)
            public var result: TelegramBotPI.UserProfilePhotos

            public init(isOk: Bool, result: TelegramBotPI.UserProfilePhotos) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.UserProfilePhotos.self, forKey: .result)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier of the target user
            public var userID: Int
            /// Sequential number of the first photo to be returned. By default, all photos are returned.
            public var offset: Int?
            /// Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
            public var limit: Int?

            public init(userID: Int, offset: Int? = nil, limit: Int? = nil) {
                self.userID = userID
                self.offset = offset
                self.limit = limit
            }

            private enum CodingKeys: String, CodingKey {
                case userID = "user_id"
                case offset
                case limit
            }
        }
    }
}

extension Paths {
    public static var getFile: GetFile {
        GetFile(path: "/getFile")
    }

    public struct GetFile {
        /// Path: `/getFile`
        public let path: String

        /// Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a [File](https://core.telegram.org/bots/api/#file) object is returned. The file can then be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`, where `<file_path>` is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile) again.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#getfile)
        public func post(fileID: String) -> Request<PostResponse> {
            .post(path, body: ["file_id": fileID])
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            /// This object represents a file ready to be downloaded. The file can be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile).
            /// 
            /// Maximum file size to download is 20 MB
            ///
            /// [External Documentation](https://core.telegram.org/bots/api/#file)
            public var result: TelegramBotPI.File

            public init(isOk: Bool, result: TelegramBotPI.File) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.File.self, forKey: .result)
            }
        }
    }
}

extension Paths {
    public static var kickChatMember: KickChatMember {
        KickChatMember(path: "/kickChatMember")
    }

    public struct KickChatMember {
        /// Path: `/kickChatMember`
        public let path: String

        /// Use this method to kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless [unbanned](https://core.telegram.org/bots/api/#unbanchatmember) first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#kickchatmember)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)
            public var chatID: ChatID
            /// Unique identifier of the target user
            public var userID: Int
            /// Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever
            public var untilDate: Int?

            /// Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID, userID: Int, untilDate: Int? = nil) {
                self.chatID = chatID
                self.userID = userID
                self.untilDate = untilDate
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case userID = "user_id"
                case untilDate = "until_date"
            }
        }
    }
}

extension Paths {
    public static var unbanChatMember: UnbanChatMember {
        UnbanChatMember(path: "/unbanChatMember")
    }

    public struct UnbanChatMember {
        /// Path: `/unbanChatMember`
        public let path: String

        /// Use this method to unban a previously kicked user in a supergroup or channel. The user will **not** return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be **removed** from the chat. If you don't want this, use the parameter *only\_if\_banned*. Returns *True* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#unbanchatmember)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target group or username of the target supergroup or channel (in the format `@username`)
            public var chatID: ChatID
            /// Unique identifier of the target user
            public var userID: Int
            /// Do nothing if the user is not banned
            public var isOnlyIfBanned: Bool?

            /// Unique identifier for the target group or username of the target supergroup or channel (in the format `@username`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID, userID: Int, isOnlyIfBanned: Bool? = nil) {
                self.chatID = chatID
                self.userID = userID
                self.isOnlyIfBanned = isOnlyIfBanned
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case userID = "user_id"
                case isOnlyIfBanned = "only_if_banned"
            }
        }
    }
}

extension Paths {
    public static var restrictChatMember: RestrictChatMember {
        RestrictChatMember(path: "/restrictChatMember")
    }

    public struct RestrictChatMember {
        /// Path: `/restrictChatMember`
        public let path: String

        /// Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass *True* for all permissions to lift restrictions from a user. Returns *True* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#restrictchatmember)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
            public var chatID: ChatID
            /// Unique identifier of the target user
            public var userID: Int
            /// Describes actions that a non-administrator user is allowed to take in a chat.
            ///
            /// [External Documentation](https://core.telegram.org/bots/api/#chatpermissions)
            public var permissions: TelegramBotPI.ChatPermissions
            /// Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
            public var untilDate: Int?

            /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID, userID: Int, permissions: TelegramBotPI.ChatPermissions, untilDate: Int? = nil) {
                self.chatID = chatID
                self.userID = userID
                self.permissions = permissions
                self.untilDate = untilDate
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case userID = "user_id"
                case permissions
                case untilDate = "until_date"
            }
        }
    }
}

extension Paths {
    public static var promoteChatMember: PromoteChatMember {
        PromoteChatMember(path: "/promoteChatMember")
    }

    public struct PromoteChatMember {
        /// Path: `/promoteChatMember`
        public let path: String

        /// Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass *False* for all boolean parameters to demote a user. Returns *True* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#promotechatmember)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public var chatID: ChatID
            /// Unique identifier of the target user
            public var userID: Int
            /// Pass *True*, if the administrator's presence in the chat is hidden
            public var isAnonymous: Bool?
            /// Pass True, if the administrator can change chat title, photo and other settings
            public var canChangeInfo: Bool?
            /// Pass True, if the administrator can create channel posts, channels only
            public var canPostMessages: Bool?
            /// Pass True, if the administrator can edit messages of other users and can pin messages, channels only
            public var canEditMessages: Bool?
            /// Pass True, if the administrator can delete messages of other users
            public var canDeleteMessages: Bool?
            /// Pass True, if the administrator can invite new users to the chat
            public var canInviteUsers: Bool?
            /// Pass True, if the administrator can restrict, ban or unban chat members
            public var canRestrictMembers: Bool?
            /// Pass True, if the administrator can pin messages, supergroups only
            public var canPinMessages: Bool?
            /// Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)
            public var canPromoteMembers: Bool?

            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID, userID: Int, isAnonymous: Bool? = nil, canChangeInfo: Bool? = nil, canPostMessages: Bool? = nil, canEditMessages: Bool? = nil, canDeleteMessages: Bool? = nil, canInviteUsers: Bool? = nil, canRestrictMembers: Bool? = nil, canPinMessages: Bool? = nil, canPromoteMembers: Bool? = nil) {
                self.chatID = chatID
                self.userID = userID
                self.isAnonymous = isAnonymous
                self.canChangeInfo = canChangeInfo
                self.canPostMessages = canPostMessages
                self.canEditMessages = canEditMessages
                self.canDeleteMessages = canDeleteMessages
                self.canInviteUsers = canInviteUsers
                self.canRestrictMembers = canRestrictMembers
                self.canPinMessages = canPinMessages
                self.canPromoteMembers = canPromoteMembers
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case userID = "user_id"
                case isAnonymous = "is_anonymous"
                case canChangeInfo = "can_change_info"
                case canPostMessages = "can_post_messages"
                case canEditMessages = "can_edit_messages"
                case canDeleteMessages = "can_delete_messages"
                case canInviteUsers = "can_invite_users"
                case canRestrictMembers = "can_restrict_members"
                case canPinMessages = "can_pin_messages"
                case canPromoteMembers = "can_promote_members"
            }
        }
    }
}

extension Paths {
    public static var setChatAdministratorCustomTitle: SetChatAdministratorCustomTitle {
        SetChatAdministratorCustomTitle(path: "/setChatAdministratorCustomTitle")
    }

    public struct SetChatAdministratorCustomTitle {
        /// Path: `/setChatAdministratorCustomTitle`
        public let path: String

        /// Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns *True* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#setchatadministratorcustomtitle)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
            public var chatID: ChatID
            /// Unique identifier of the target user
            public var userID: Int
            /// New custom title for the administrator; 0-16 characters, emoji are not allowed
            public var customTitle: String

            /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID, userID: Int, customTitle: String) {
                self.chatID = chatID
                self.userID = userID
                self.customTitle = customTitle
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case userID = "user_id"
                case customTitle = "custom_title"
            }
        }
    }
}

extension Paths {
    public static var setChatPermissions: SetChatPermissions {
        SetChatPermissions(path: "/setChatPermissions")
    }

    public struct SetChatPermissions {
        /// Path: `/setChatPermissions`
        public let path: String

        /// Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the *can\_restrict\_members* admin rights. Returns *True* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#setchatpermissions)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
            public var chatID: ChatID
            /// Describes actions that a non-administrator user is allowed to take in a chat.
            ///
            /// [External Documentation](https://core.telegram.org/bots/api/#chatpermissions)
            public var permissions: TelegramBotPI.ChatPermissions

            /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID, permissions: TelegramBotPI.ChatPermissions) {
                self.chatID = chatID
                self.permissions = permissions
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case permissions
            }
        }
    }
}

extension Paths {
    public static var exportChatInviteLink: ExportChatInviteLink {
        ExportChatInviteLink(path: "/exportChatInviteLink")
    }

    public struct ExportChatInviteLink {
        /// Path: `/exportChatInviteLink`
        public let path: String

        /// Use this method to generate a new invite link for a chat; any previously generated link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the new invite link as *String* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#exportchatinvitelink)
        public func post(chatID: PostRequest.ChatID) -> Request<PostResponse> {
            .post(path, body: PostRequest(chatID: chatID))
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: String

            public init(isOk: Bool, result: String) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(String.self, forKey: .result)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public var chatID: ChatID

            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID) {
                self.chatID = chatID
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
            }
        }
    }
}

extension Paths {
    public static var setChatPhoto: SetChatPhoto {
        SetChatPhoto(path: "/setChatPhoto")
    }

    public struct SetChatPhoto {
        /// Path: `/setChatPhoto`
        public let path: String

        /// Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#setchatphoto)
        public func post(_ body: Data) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }
    }
}

extension Paths {
    public static var deleteChatPhoto: DeleteChatPhoto {
        DeleteChatPhoto(path: "/deleteChatPhoto")
    }

    public struct DeleteChatPhoto {
        /// Path: `/deleteChatPhoto`
        public let path: String

        /// Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#deletechatphoto)
        public func post(chatID: PostRequest.ChatID) -> Request<PostResponse> {
            .post(path, body: PostRequest(chatID: chatID))
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public var chatID: ChatID

            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID) {
                self.chatID = chatID
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
            }
        }
    }
}

extension Paths {
    public static var setChatTitle: SetChatTitle {
        SetChatTitle(path: "/setChatTitle")
    }

    public struct SetChatTitle {
        /// Path: `/setChatTitle`
        public let path: String

        /// Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#setchattitle)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public var chatID: ChatID
            /// New chat title, 1-255 characters
            public var title: String

            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID, title: String) {
                self.chatID = chatID
                self.title = title
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case title
            }
        }
    }
}

extension Paths {
    public static var setChatDescription: SetChatDescription {
        SetChatDescription(path: "/setChatDescription")
    }

    public struct SetChatDescription {
        /// Path: `/setChatDescription`
        public let path: String

        /// Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#setchatdescription)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public var chatID: ChatID
            /// New chat description, 0-255 characters
            public var description: String?

            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID, description: String? = nil) {
                self.chatID = chatID
                self.description = description
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case description
            }
        }
    }
}

extension Paths {
    public static var pinChatMessage: PinChatMessage {
        PinChatMessage(path: "/pinChatMessage")
    }

    public struct PinChatMessage {
        /// Path: `/pinChatMessage`
        public let path: String

        /// Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#pinchatmessage)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public var chatID: ChatID
            /// Identifier of a message to pin
            public var messageID: Int
            /// Pass *True*, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
            public var isDisableNotification: Bool?

            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID, messageID: Int, isDisableNotification: Bool? = nil) {
                self.chatID = chatID
                self.messageID = messageID
                self.isDisableNotification = isDisableNotification
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case messageID = "message_id"
                case isDisableNotification = "disable_notification"
            }
        }
    }
}

extension Paths {
    public static var unpinChatMessage: UnpinChatMessage {
        UnpinChatMessage(path: "/unpinChatMessage")
    }

    public struct UnpinChatMessage {
        /// Path: `/unpinChatMessage`
        public let path: String

        /// Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#unpinchatmessage)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public var chatID: ChatID
            /// Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned.
            public var messageID: Int?

            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID, messageID: Int? = nil) {
                self.chatID = chatID
                self.messageID = messageID
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case messageID = "message_id"
            }
        }
    }
}

extension Paths {
    public static var unpinAllChatMessages: UnpinAllChatMessages {
        UnpinAllChatMessages(path: "/unpinAllChatMessages")
    }

    public struct UnpinAllChatMessages {
        /// Path: `/unpinAllChatMessages`
        public let path: String

        /// Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#unpinallchatmessages)
        public func post(chatID: PostRequest.ChatID) -> Request<PostResponse> {
            .post(path, body: PostRequest(chatID: chatID))
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public var chatID: ChatID

            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID) {
                self.chatID = chatID
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
            }
        }
    }
}

extension Paths {
    public static var leaveChat: LeaveChat {
        LeaveChat(path: "/leaveChat")
    }

    public struct LeaveChat {
        /// Path: `/leaveChat`
        public let path: String

        /// Use this method for your bot to leave a group, supergroup or channel. Returns *True* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#leavechat)
        public func post(chatID: PostRequest.ChatID) -> Request<PostResponse> {
            .post(path, body: PostRequest(chatID: chatID))
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
            public var chatID: ChatID

            /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID) {
                self.chatID = chatID
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
            }
        }
    }
}

extension Paths {
    public static var getChat: GetChat {
        GetChat(path: "/getChat")
    }

    public struct GetChat {
        /// Path: `/getChat`
        public let path: String

        /// Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a [Chat](https://core.telegram.org/bots/api/#chat) object on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#getchat)
        public func post(chatID: PostRequest.ChatID) -> Request<PostResponse> {
            .post(path, body: PostRequest(chatID: chatID))
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: TelegramBotPI.Chat

            public init(isOk: Bool, result: TelegramBotPI.Chat) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.Chat.self, forKey: .result)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
            public var chatID: ChatID

            /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID) {
                self.chatID = chatID
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
            }
        }
    }
}

extension Paths {
    public static var getChatAdministrators: GetChatAdministrators {
        GetChatAdministrators(path: "/getChatAdministrators")
    }

    public struct GetChatAdministrators {
        /// Path: `/getChatAdministrators`
        public let path: String

        /// Use this method to get a list of administrators in a chat. On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api/#chatmember) objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#getchatadministrators)
        public func post(chatID: PostRequest.ChatID) -> Request<PostResponse> {
            .post(path, body: PostRequest(chatID: chatID))
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: [TelegramBotPI.ChatMember]

            public init(isOk: Bool, result: [TelegramBotPI.ChatMember]) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode([TelegramBotPI.ChatMember].self, forKey: .result)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
            public var chatID: ChatID

            /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID) {
                self.chatID = chatID
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
            }
        }
    }
}

extension Paths {
    public static var getChatMembersCount: GetChatMembersCount {
        GetChatMembersCount(path: "/getChatMembersCount")
    }

    public struct GetChatMembersCount {
        /// Path: `/getChatMembersCount`
        public let path: String

        /// Use this method to get the number of members in a chat. Returns *Int* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#getchatmemberscount)
        public func post(chatID: PostRequest.ChatID) -> Request<PostResponse> {
            .post(path, body: PostRequest(chatID: chatID))
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: Int

            public init(isOk: Bool, result: Int) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(Int.self, forKey: .result)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
            public var chatID: ChatID

            /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID) {
                self.chatID = chatID
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
            }
        }
    }
}

extension Paths {
    public static var getChatMember: GetChatMember {
        GetChatMember(path: "/getChatMember")
    }

    public struct GetChatMember {
        /// Path: `/getChatMember`
        public let path: String

        /// Use this method to get information about a member of a chat. Returns a [ChatMember](https://core.telegram.org/bots/api/#chatmember) object on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#getchatmember)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            /// This object contains information about one member of a chat.
            ///
            /// [External Documentation](https://core.telegram.org/bots/api/#chatmember)
            public var result: TelegramBotPI.ChatMember

            public init(isOk: Bool, result: TelegramBotPI.ChatMember) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.ChatMember.self, forKey: .result)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
            public var chatID: ChatID
            /// Unique identifier of the target user
            public var userID: Int

            /// Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID, userID: Int) {
                self.chatID = chatID
                self.userID = userID
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case userID = "user_id"
            }
        }
    }
}

extension Paths {
    public static var setChatStickerSet: SetChatStickerSet {
        SetChatStickerSet(path: "/setChatStickerSet")
    }

    public struct SetChatStickerSet {
        /// Path: `/setChatStickerSet`
        public let path: String

        /// Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\_set\_sticker\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#setchatstickerset)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
            public var chatID: ChatID
            /// Name of the sticker set to be set as the group sticker set
            public var stickerSetName: String

            /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID, stickerSetName: String) {
                self.chatID = chatID
                self.stickerSetName = stickerSetName
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case stickerSetName = "sticker_set_name"
            }
        }
    }
}

extension Paths {
    public static var deleteChatStickerSet: DeleteChatStickerSet {
        DeleteChatStickerSet(path: "/deleteChatStickerSet")
    }

    public struct DeleteChatStickerSet {
        /// Path: `/deleteChatStickerSet`
        public let path: String

        /// Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\_set\_sticker\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#deletechatstickerset)
        public func post(chatID: PostRequest.ChatID) -> Request<PostResponse> {
            .post(path, body: PostRequest(chatID: chatID))
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
            public var chatID: ChatID

            /// Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID) {
                self.chatID = chatID
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
            }
        }
    }
}

extension Paths {
    public static var answerCallbackQuery: AnswerCallbackQuery {
        AnswerCallbackQuery(path: "/answerCallbackQuery")
    }

    public struct AnswerCallbackQuery {
        /// Path: `/answerCallbackQuery`
        public let path: String

        /// Use this method to send answers to callback queries sent from [inline keyboards](/bots#inline-keyboards-and-on-the-fly-updating). The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, *True* is returned.
        /// 
        /// Alternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via [@Botfather](https://t.me/botfather) and accept the terms. Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#answercallbackquery)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the query to be answered
            public var callbackQueryID: String
            /// Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
            public var text: String?
            /// If *true*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.
            public var isShowAlert: Bool
            /// URL that will be opened by the user's client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@Botfather](https://t.me/botfather), specify the URL that opens your game — note that this will only work if the query comes from a [*callback\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.
            /// 
            /// Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.
            public var url: String?
            /// The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
            public var cacheTime: Int?

            public init(callbackQueryID: String, text: String? = nil, isShowAlert: Bool? = nil, url: String? = nil, cacheTime: Int? = nil) {
                self.callbackQueryID = callbackQueryID
                self.text = text
                self.isShowAlert = isShowAlert ?? false
                self.url = url
                self.cacheTime = cacheTime
            }

            private enum CodingKeys: String, CodingKey {
                case callbackQueryID = "callback_query_id"
                case text
                case isShowAlert = "show_alert"
                case url
                case cacheTime = "cache_time"
            }
        }
    }
}

extension Paths {
    public static var setMyCommands: SetMyCommands {
        SetMyCommands(path: "/setMyCommands")
    }

    public struct SetMyCommands {
        /// Path: `/setMyCommands`
        public let path: String

        /// Use this method to change the list of the bot's commands. Returns *True* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#setmycommands)
        public func post(commands: [TelegramBotPI.BotCommand]) -> Request<PostResponse> {
            .post(path, body: ["commands": commands])
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }
    }
}

extension Paths {
    public static var getMyCommands: GetMyCommands {
        GetMyCommands(path: "/getMyCommands")
    }

    public struct GetMyCommands {
        /// Path: `/getMyCommands`
        public let path: String

        /// Use this method to get the current list of the bot's commands. Requires no parameters. Returns Array of [BotCommand](https://core.telegram.org/bots/api/#botcommand) on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#getmycommands)
        public var post: Request<PostResponse> {
            .post(path)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: [TelegramBotPI.BotCommand]

            public init(isOk: Bool, result: [TelegramBotPI.BotCommand]) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode([TelegramBotPI.BotCommand].self, forKey: .result)
            }
        }
    }
}

extension Paths {
    public static var editMessageText: EditMessageText {
        EditMessageText(path: "/editMessageText")
    }

    public struct EditMessageText {
        /// Path: `/editMessageText`
        public let path: String

        /// Use this method to edit text and [game](https://core.telegram.org/bots/api/#games) messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#editmessagetext)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: Result

            public struct Result: Decodable {
                public var message: TelegramBotPI.Message?
                public var isBool: Bool

                public init(message: TelegramBotPI.Message? = nil, isBool: Bool? = nil) {
                    self.message = message
                    self.isBool = isBool ?? true
                }

                public init(from decoder: Decoder) throws {
                    let container = try decoder.singleValueContainer()
                    self.message = try? container.decode(TelegramBotPI.Message.self)
                    self.isBool = (try? container.decode(Bool.self)) ?? true
                }
            }

            public init(isOk: Bool, result: Result) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(Result.self, forKey: .result)
            }
        }

        public struct PostRequest: Encodable {
            /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public var chatID: ChatID?
            /// Required if *inline\_message\_id* is not specified. Identifier of the message to edit
            public var messageID: Int?
            /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
            public var inlineMessageID: String?
            /// New text of the message, 1-4096 characters after entities parsing
            public var text: String
            /// Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            public var parseMode: String?
            /// List of special entities that appear in message text, which can be specified instead of *parse\_mode*
            public var entities: [TelegramBotPI.MessageEntity]?
            /// Disables link previews for links in this message
            public var isDisableWebPagePreview: Bool?
            /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
            ///
            /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
            public var replyMarkup: TelegramBotPI.InlineKeyboardMarkup?

            /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID? = nil, messageID: Int? = nil, inlineMessageID: String? = nil, text: String, parseMode: String? = nil, entities: [TelegramBotPI.MessageEntity]? = nil, isDisableWebPagePreview: Bool? = nil, replyMarkup: TelegramBotPI.InlineKeyboardMarkup? = nil) {
                self.chatID = chatID
                self.messageID = messageID
                self.inlineMessageID = inlineMessageID
                self.text = text
                self.parseMode = parseMode
                self.entities = entities
                self.isDisableWebPagePreview = isDisableWebPagePreview
                self.replyMarkup = replyMarkup
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case messageID = "message_id"
                case inlineMessageID = "inline_message_id"
                case text
                case parseMode = "parse_mode"
                case entities
                case isDisableWebPagePreview = "disable_web_page_preview"
                case replyMarkup = "reply_markup"
            }
        }
    }
}

extension Paths {
    public static var editMessageCaption: EditMessageCaption {
        EditMessageCaption(path: "/editMessageCaption")
    }

    public struct EditMessageCaption {
        /// Path: `/editMessageCaption`
        public let path: String

        /// Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#editmessagecaption)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: Result

            public struct Result: Decodable {
                public var message: TelegramBotPI.Message?
                public var isBool: Bool

                public init(message: TelegramBotPI.Message? = nil, isBool: Bool? = nil) {
                    self.message = message
                    self.isBool = isBool ?? true
                }

                public init(from decoder: Decoder) throws {
                    let container = try decoder.singleValueContainer()
                    self.message = try? container.decode(TelegramBotPI.Message.self)
                    self.isBool = (try? container.decode(Bool.self)) ?? true
                }
            }

            public init(isOk: Bool, result: Result) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(Result.self, forKey: .result)
            }
        }

        public struct PostRequest: Encodable {
            /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public var chatID: ChatID?
            /// Required if *inline\_message\_id* is not specified. Identifier of the message to edit
            public var messageID: Int?
            /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
            public var inlineMessageID: String?
            /// New caption of the message, 0-1024 characters after entities parsing
            public var caption: String?
            /// Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
            public var parseMode: String?
            /// List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
            public var captionEntities: [TelegramBotPI.MessageEntity]?
            /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
            ///
            /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
            public var replyMarkup: TelegramBotPI.InlineKeyboardMarkup?

            /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID? = nil, messageID: Int? = nil, inlineMessageID: String? = nil, caption: String? = nil, parseMode: String? = nil, captionEntities: [TelegramBotPI.MessageEntity]? = nil, replyMarkup: TelegramBotPI.InlineKeyboardMarkup? = nil) {
                self.chatID = chatID
                self.messageID = messageID
                self.inlineMessageID = inlineMessageID
                self.caption = caption
                self.parseMode = parseMode
                self.captionEntities = captionEntities
                self.replyMarkup = replyMarkup
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case messageID = "message_id"
                case inlineMessageID = "inline_message_id"
                case caption
                case parseMode = "parse_mode"
                case captionEntities = "caption_entities"
                case replyMarkup = "reply_markup"
            }
        }
    }
}

extension Paths {
    public static var editMessageMedia: EditMessageMedia {
        EditMessageMedia(path: "/editMessageMedia")
    }

    public struct EditMessageMedia {
        /// Path: `/editMessageMedia`
        public let path: String

        /// Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded. Use a previously uploaded file via its file\_id or specify a URL. On success, if the edited message was sent by the bot, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#editmessagemedia)
        public func post(_ body: Data) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: Result

            public struct Result: Decodable {
                public var message: TelegramBotPI.Message?
                public var isBool: Bool

                public init(message: TelegramBotPI.Message? = nil, isBool: Bool? = nil) {
                    self.message = message
                    self.isBool = isBool ?? true
                }

                public init(from decoder: Decoder) throws {
                    let container = try decoder.singleValueContainer()
                    self.message = try? container.decode(TelegramBotPI.Message.self)
                    self.isBool = (try? container.decode(Bool.self)) ?? true
                }
            }

            public init(isOk: Bool, result: Result) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(Result.self, forKey: .result)
            }
        }
    }
}

extension Paths {
    public static var editMessageReplyMarkup: EditMessageReplyMarkup {
        EditMessageReplyMarkup(path: "/editMessageReplyMarkup")
    }

    public struct EditMessageReplyMarkup {
        /// Path: `/editMessageReplyMarkup`
        public let path: String

        /// Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#editmessagereplymarkup)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: Result

            public struct Result: Decodable {
                public var message: TelegramBotPI.Message?
                public var isBool: Bool

                public init(message: TelegramBotPI.Message? = nil, isBool: Bool? = nil) {
                    self.message = message
                    self.isBool = isBool ?? true
                }

                public init(from decoder: Decoder) throws {
                    let container = try decoder.singleValueContainer()
                    self.message = try? container.decode(TelegramBotPI.Message.self)
                    self.isBool = (try? container.decode(Bool.self)) ?? true
                }
            }

            public init(isOk: Bool, result: Result) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(Result.self, forKey: .result)
            }
        }

        public struct PostRequest: Encodable {
            /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public var chatID: ChatID?
            /// Required if *inline\_message\_id* is not specified. Identifier of the message to edit
            public var messageID: Int?
            /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
            public var inlineMessageID: String?
            /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
            ///
            /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
            public var replyMarkup: TelegramBotPI.InlineKeyboardMarkup?

            /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID? = nil, messageID: Int? = nil, inlineMessageID: String? = nil, replyMarkup: TelegramBotPI.InlineKeyboardMarkup? = nil) {
                self.chatID = chatID
                self.messageID = messageID
                self.inlineMessageID = inlineMessageID
                self.replyMarkup = replyMarkup
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case messageID = "message_id"
                case inlineMessageID = "inline_message_id"
                case replyMarkup = "reply_markup"
            }
        }
    }
}

extension Paths {
    public static var stopPoll: StopPoll {
        StopPoll(path: "/stopPoll")
    }

    public struct StopPoll {
        /// Path: `/stopPoll`
        public let path: String

        /// Use this method to stop a poll which was sent by the bot. On success, the stopped [Poll](https://core.telegram.org/bots/api/#poll) with the final results is returned.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#stoppoll)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            /// This object contains information about a poll.
            ///
            /// [External Documentation](https://core.telegram.org/bots/api/#poll)
            public var result: TelegramBotPI.Poll

            public init(isOk: Bool, result: TelegramBotPI.Poll) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.Poll.self, forKey: .result)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public var chatID: ChatID
            /// Identifier of the original message with the poll
            public var messageID: Int
            /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
            ///
            /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
            public var replyMarkup: TelegramBotPI.InlineKeyboardMarkup?

            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID, messageID: Int, replyMarkup: TelegramBotPI.InlineKeyboardMarkup? = nil) {
                self.chatID = chatID
                self.messageID = messageID
                self.replyMarkup = replyMarkup
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case messageID = "message_id"
                case replyMarkup = "reply_markup"
            }
        }
    }
}

extension Paths {
    public static var deleteMessage: DeleteMessage {
        DeleteMessage(path: "/deleteMessage")
    }

    public struct DeleteMessage {
        /// Path: `/deleteMessage`
        public let path: String

        /// Use this method to delete a message, including service messages, with the following limitations:
        /// \- A message can only be deleted if it was sent less than 48 hours ago.
        /// \- A dice message in a private chat can only be deleted if it was sent more than 24 hours ago.
        /// \- Bots can delete outgoing messages in private chats, groups, and supergroups.
        /// \- Bots can delete incoming messages in private chats.
        /// \- Bots granted *can\_post\_messages* permissions can delete outgoing messages in channels.
        /// \- If the bot is an administrator of a group, it can delete any message there.
        /// \- If the bot has *can\_delete\_messages* permission in a supergroup or a channel, it can delete any message there.
        /// Returns *True* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#deletemessage)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public var chatID: ChatID
            /// Identifier of the message to delete
            public var messageID: Int

            /// Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
            public struct ChatID: Encodable {
                public var int: Int?
                public var string: String?

                public init(int: Int? = nil, string: String? = nil) {
                    self.int = int
                    self.string = string
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = int { try container.encode(value) }
                    if let value = string { try container.encode(value) }
                }
            }

            public init(chatID: ChatID, messageID: Int) {
                self.chatID = chatID
                self.messageID = messageID
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case messageID = "message_id"
            }
        }
    }
}

extension Paths {
    public static var sendSticker: SendSticker {
        SendSticker(path: "/sendSticker")
    }

    public struct SendSticker {
        /// Path: `/sendSticker`
        public let path: String

        /// Use this method to send static .WEBP or [animated](https://telegram.org/blog/animated-stickers) .TGS stickers. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#sendsticker)
        public func post(_ body: Data) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: TelegramBotPI.Message

            public init(isOk: Bool, result: TelegramBotPI.Message) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.Message.self, forKey: .result)
            }
        }
    }
}

extension Paths {
    public static var getStickerSet: GetStickerSet {
        GetStickerSet(path: "/getStickerSet")
    }

    public struct GetStickerSet {
        /// Path: `/getStickerSet`
        public let path: String

        /// Use this method to get a sticker set. On success, a [StickerSet](https://core.telegram.org/bots/api/#stickerset) object is returned.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#getstickerset)
        public func post(name: String) -> Request<PostResponse> {
            .post(path, body: ["name": name])
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            /// This object represents a sticker set.
            ///
            /// [External Documentation](https://core.telegram.org/bots/api/#stickerset)
            public var result: TelegramBotPI.StickerSet

            public init(isOk: Bool, result: TelegramBotPI.StickerSet) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.StickerSet.self, forKey: .result)
            }
        }
    }
}

extension Paths {
    public static var uploadStickerFile: UploadStickerFile {
        UploadStickerFile(path: "/uploadStickerFile")
    }

    public struct UploadStickerFile {
        /// Path: `/uploadStickerFile`
        public let path: String

        /// Use this method to upload a .PNG file with a sticker for later use in *createNewStickerSet* and *addStickerToSet* methods (can be used multiple times). Returns the uploaded [File](https://core.telegram.org/bots/api/#file) on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#uploadstickerfile)
        public func post(_ body: Data) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            /// This object represents a file ready to be downloaded. The file can be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile).
            /// 
            /// Maximum file size to download is 20 MB
            ///
            /// [External Documentation](https://core.telegram.org/bots/api/#file)
            public var result: TelegramBotPI.File

            public init(isOk: Bool, result: TelegramBotPI.File) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.File.self, forKey: .result)
            }
        }
    }
}

extension Paths {
    public static var createNewStickerSet: CreateNewStickerSet {
        CreateNewStickerSet(path: "/createNewStickerSet")
    }

    public struct CreateNewStickerSet {
        /// Path: `/createNewStickerSet`
        public let path: String

        /// Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. You **must** use exactly one of the fields *png\_sticker* or *tgs\_sticker*. Returns *True* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#createnewstickerset)
        public func post(_ body: Data) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }
    }
}

extension Paths {
    public static var addStickerToSet: AddStickerToSet {
        AddStickerToSet(path: "/addStickerToSet")
    }

    public struct AddStickerToSet {
        /// Path: `/addStickerToSet`
        public let path: String

        /// Use this method to add a new sticker to a set created by the bot. You **must** use exactly one of the fields *png\_sticker* or *tgs\_sticker*. Animated stickers can be added to animated sticker sets and only to them. Animated sticker sets can have up to 50 stickers. Static sticker sets can have up to 120 stickers. Returns *True* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#addstickertoset)
        public func post(_ body: Data) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }
    }
}

extension Paths {
    public static var setStickerPositionInSet: SetStickerPositionInSet {
        SetStickerPositionInSet(path: "/setStickerPositionInSet")
    }

    public struct SetStickerPositionInSet {
        /// Path: `/setStickerPositionInSet`
        public let path: String

        /// Use this method to move a sticker in a set created by the bot to a specific position. Returns *True* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#setstickerpositioninset)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }

        public struct PostRequest: Encodable {
            /// File identifier of the sticker
            public var sticker: String
            /// New sticker position in the set, zero-based
            public var position: Int

            public init(sticker: String, position: Int) {
                self.sticker = sticker
                self.position = position
            }
        }
    }
}

extension Paths {
    public static var deleteStickerFromSet: DeleteStickerFromSet {
        DeleteStickerFromSet(path: "/deleteStickerFromSet")
    }

    public struct DeleteStickerFromSet {
        /// Path: `/deleteStickerFromSet`
        public let path: String

        /// Use this method to delete a sticker from a set created by the bot. Returns *True* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#deletestickerfromset)
        public func post(sticker: String) -> Request<PostResponse> {
            .post(path, body: ["sticker": sticker])
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }
    }
}

extension Paths {
    public static var setStickerSetThumb: SetStickerSetThumb {
        SetStickerSetThumb(path: "/setStickerSetThumb")
    }

    public struct SetStickerSetThumb {
        /// Path: `/setStickerSetThumb`
        public let path: String

        /// Use this method to set the thumbnail of a sticker set. Animated thumbnails can be set for animated sticker sets only. Returns *True* on success.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#setstickersetthumb)
        public func post(_ body: Data) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }
    }
}

extension Paths {
    public static var answerInlineQuery: AnswerInlineQuery {
        AnswerInlineQuery(path: "/answerInlineQuery")
    }

    public struct AnswerInlineQuery {
        /// Path: `/answerInlineQuery`
        public let path: String

        /// Use this method to send answers to an inline query. On success, *True* is returned.
        /// No more than **50** results per query are allowed.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#answerinlinequery)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the answered query
            public var inlineQueryID: String
            /// A JSON-serialized array of results for the inline query
            public var results: [TelegramBotPI.InlineQueryResult]
            /// The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
            public var cacheTime: Int?
            /// Pass *True*, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query
            public var isPersonal: Bool?
            /// Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.
            public var nextOffset: String?
            /// If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter *switch\_pm\_parameter*
            public var switchPmText: String?
            /// [Deep-linking](/bots#deep-linking) parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.
            /// 
            /// *Example:* An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an oauth link. Once done, the bot can offer a [*switch\_inline*](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities.
            public var switchPmParameter: String?

            public init(inlineQueryID: String, results: [TelegramBotPI.InlineQueryResult], cacheTime: Int? = nil, isPersonal: Bool? = nil, nextOffset: String? = nil, switchPmText: String? = nil, switchPmParameter: String? = nil) {
                self.inlineQueryID = inlineQueryID
                self.results = results
                self.cacheTime = cacheTime
                self.isPersonal = isPersonal
                self.nextOffset = nextOffset
                self.switchPmText = switchPmText
                self.switchPmParameter = switchPmParameter
            }

            private enum CodingKeys: String, CodingKey {
                case inlineQueryID = "inline_query_id"
                case results
                case cacheTime = "cache_time"
                case isPersonal = "is_personal"
                case nextOffset = "next_offset"
                case switchPmText = "switch_pm_text"
                case switchPmParameter = "switch_pm_parameter"
            }
        }
    }
}

extension Paths {
    public static var sendInvoice: SendInvoice {
        SendInvoice(path: "/sendInvoice")
    }

    public struct SendInvoice {
        /// Path: `/sendInvoice`
        public let path: String

        /// Use this method to send invoices. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#sendinvoice)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: TelegramBotPI.Message

            public init(isOk: Bool, result: TelegramBotPI.Message) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.Message.self, forKey: .result)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target private chat
            public var chatID: Int
            /// Product name, 1-32 characters
            public var title: String
            /// Product description, 1-255 characters
            public var description: String
            /// Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
            public var payload: String
            /// Payments provider token, obtained via [Botfather](https://t.me/botfather)
            public var providerToken: String
            /// Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter
            public var startParameter: String
            /// Three-letter ISO 4217 currency code, see [more on currencies](/bots/payments#supported-currencies)
            public var currency: String
            /// Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
            public var prices: [TelegramBotPI.LabeledPrice]
            /// A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
            public var providerData: String?
            /// URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
            public var photoURL: String?
            /// Photo size
            public var photoSize: Int?
            /// Photo width
            public var photoWidth: Int?
            /// Photo height
            public var photoHeight: Int?
            /// Pass *True*, if you require the user's full name to complete the order
            public var isNeedName: Bool?
            /// Pass *True*, if you require the user's phone number to complete the order
            public var isNeedPhoneNumber: Bool?
            /// Pass *True*, if you require the user's email address to complete the order
            public var isNeedEmail: Bool?
            /// Pass *True*, if you require the user's shipping address to complete the order
            public var isNeedShippingAddress: Bool?
            /// Pass *True*, if user's phone number should be sent to provider
            public var isSendPhoneNumberToProvider: Bool?
            /// Pass *True*, if user's email address should be sent to provider
            public var isSendEmailToProvider: Bool?
            /// Pass *True*, if the final price depends on the shipping method
            public var isFlexible: Bool?
            /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
            public var isDisableNotification: Bool?
            /// If the message is a reply, ID of the original message
            public var replyToMessageID: Int?
            /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
            public var allowSendingWithoutReply: Bool?
            /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
            ///
            /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
            public var replyMarkup: TelegramBotPI.InlineKeyboardMarkup?

            public init(chatID: Int, title: String, description: String, payload: String, providerToken: String, startParameter: String, currency: String, prices: [TelegramBotPI.LabeledPrice], providerData: String? = nil, photoURL: String? = nil, photoSize: Int? = nil, photoWidth: Int? = nil, photoHeight: Int? = nil, isNeedName: Bool? = nil, isNeedPhoneNumber: Bool? = nil, isNeedEmail: Bool? = nil, isNeedShippingAddress: Bool? = nil, isSendPhoneNumberToProvider: Bool? = nil, isSendEmailToProvider: Bool? = nil, isFlexible: Bool? = nil, isDisableNotification: Bool? = nil, replyToMessageID: Int? = nil, allowSendingWithoutReply: Bool? = nil, replyMarkup: TelegramBotPI.InlineKeyboardMarkup? = nil) {
                self.chatID = chatID
                self.title = title
                self.description = description
                self.payload = payload
                self.providerToken = providerToken
                self.startParameter = startParameter
                self.currency = currency
                self.prices = prices
                self.providerData = providerData
                self.photoURL = photoURL
                self.photoSize = photoSize
                self.photoWidth = photoWidth
                self.photoHeight = photoHeight
                self.isNeedName = isNeedName
                self.isNeedPhoneNumber = isNeedPhoneNumber
                self.isNeedEmail = isNeedEmail
                self.isNeedShippingAddress = isNeedShippingAddress
                self.isSendPhoneNumberToProvider = isSendPhoneNumberToProvider
                self.isSendEmailToProvider = isSendEmailToProvider
                self.isFlexible = isFlexible
                self.isDisableNotification = isDisableNotification
                self.replyToMessageID = replyToMessageID
                self.allowSendingWithoutReply = allowSendingWithoutReply
                self.replyMarkup = replyMarkup
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case title
                case description
                case payload
                case providerToken = "provider_token"
                case startParameter = "start_parameter"
                case currency
                case prices
                case providerData = "provider_data"
                case photoURL = "photo_url"
                case photoSize = "photo_size"
                case photoWidth = "photo_width"
                case photoHeight = "photo_height"
                case isNeedName = "need_name"
                case isNeedPhoneNumber = "need_phone_number"
                case isNeedEmail = "need_email"
                case isNeedShippingAddress = "need_shipping_address"
                case isSendPhoneNumberToProvider = "send_phone_number_to_provider"
                case isSendEmailToProvider = "send_email_to_provider"
                case isFlexible = "is_flexible"
                case isDisableNotification = "disable_notification"
                case replyToMessageID = "reply_to_message_id"
                case allowSendingWithoutReply = "allow_sending_without_reply"
                case replyMarkup = "reply_markup"
            }
        }
    }
}

extension Paths {
    public static var answerShippingQuery: AnswerShippingQuery {
        AnswerShippingQuery(path: "/answerShippingQuery")
    }

    public struct AnswerShippingQuery {
        /// Path: `/answerShippingQuery`
        public let path: String

        /// If you sent an invoice requesting a shipping address and the parameter *is\_flexible* was specified, the Bot API will send an [Update](https://core.telegram.org/bots/api/#update) with a *shipping\_query* field to the bot. Use this method to reply to shipping queries. On success, True is returned.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#answershippingquery)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the query to be answered
            public var shippingQueryID: String
            /// Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)
            public var isOk: Bool
            /// Required if *ok* is True. A JSON-serialized array of available shipping options.
            public var shippingOptions: [TelegramBotPI.ShippingOption]?
            /// Required if *ok* is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.
            public var errorMessage: String?

            public init(shippingQueryID: String, isOk: Bool, shippingOptions: [TelegramBotPI.ShippingOption]? = nil, errorMessage: String? = nil) {
                self.shippingQueryID = shippingQueryID
                self.isOk = isOk
                self.shippingOptions = shippingOptions
                self.errorMessage = errorMessage
            }

            private enum CodingKeys: String, CodingKey {
                case shippingQueryID = "shipping_query_id"
                case isOk = "ok"
                case shippingOptions = "shipping_options"
                case errorMessage = "error_message"
            }
        }
    }
}

extension Paths {
    public static var answerPreCheckoutQuery: AnswerPreCheckoutQuery {
        AnswerPreCheckoutQuery(path: "/answerPreCheckoutQuery")
    }

    public struct AnswerPreCheckoutQuery {
        /// Path: `/answerPreCheckoutQuery`
        public let path: String

        /// Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an [Update](https://core.telegram.org/bots/api/#update) with the field *pre\_checkout\_query*. Use this method to respond to such pre-checkout queries. On success, True is returned. **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#answerprecheckoutquery)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the query to be answered
            public var preCheckoutQueryID: String
            /// Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.
            public var isOk: Bool
            /// Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.
            public var errorMessage: String?

            public init(preCheckoutQueryID: String, isOk: Bool, errorMessage: String? = nil) {
                self.preCheckoutQueryID = preCheckoutQueryID
                self.isOk = isOk
                self.errorMessage = errorMessage
            }

            private enum CodingKeys: String, CodingKey {
                case preCheckoutQueryID = "pre_checkout_query_id"
                case isOk = "ok"
                case errorMessage = "error_message"
            }
        }
    }
}

extension Paths {
    public static var setPassportDataErrors: SetPassportDataErrors {
        SetPassportDataErrors(path: "/setPassportDataErrors")
    }

    public struct SetPassportDataErrors {
        /// Path: `/setPassportDataErrors`
        public let path: String

        /// Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns *True* on success.
        /// 
        /// Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#setpassportdataerrors)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var isResult: Bool

            public init(isOk: Bool, isResult: Bool) {
                self.isOk = isOk
                self.isResult = isResult
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case isResult = "result"
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.isResult = try values.decode(Bool.self, forKey: .isResult)
            }
        }

        public struct PostRequest: Encodable {
            /// User identifier
            public var userID: Int
            /// A JSON-serialized array describing the errors
            public var errors: [TelegramBotPI.PassportElementError]

            public init(userID: Int, errors: [TelegramBotPI.PassportElementError]) {
                self.userID = userID
                self.errors = errors
            }

            private enum CodingKeys: String, CodingKey {
                case userID = "user_id"
                case errors
            }
        }
    }
}

extension Paths {
    public static var sendGame: SendGame {
        SendGame(path: "/sendGame")
    }

    public struct SendGame {
        /// Path: `/sendGame`
        public let path: String

        /// Use this method to send a game. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#sendgame)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: TelegramBotPI.Message

            public init(isOk: Bool, result: TelegramBotPI.Message) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(TelegramBotPI.Message.self, forKey: .result)
            }
        }

        public struct PostRequest: Encodable {
            /// Unique identifier for the target chat
            public var chatID: Int
            /// Short name of the game, serves as the unique identifier for the game. Set up your games via [Botfather](https://t.me/botfather).
            public var gameShortName: String
            /// Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
            public var isDisableNotification: Bool?
            /// If the message is a reply, ID of the original message
            public var replyToMessageID: Int?
            /// Pass *True*, if the message should be sent even if the specified replied-to message is not found
            public var allowSendingWithoutReply: Bool?
            /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
            ///
            /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
            public var replyMarkup: TelegramBotPI.InlineKeyboardMarkup?

            public init(chatID: Int, gameShortName: String, isDisableNotification: Bool? = nil, replyToMessageID: Int? = nil, allowSendingWithoutReply: Bool? = nil, replyMarkup: TelegramBotPI.InlineKeyboardMarkup? = nil) {
                self.chatID = chatID
                self.gameShortName = gameShortName
                self.isDisableNotification = isDisableNotification
                self.replyToMessageID = replyToMessageID
                self.allowSendingWithoutReply = allowSendingWithoutReply
                self.replyMarkup = replyMarkup
            }

            private enum CodingKeys: String, CodingKey {
                case chatID = "chat_id"
                case gameShortName = "game_short_name"
                case isDisableNotification = "disable_notification"
                case replyToMessageID = "reply_to_message_id"
                case allowSendingWithoutReply = "allow_sending_without_reply"
                case replyMarkup = "reply_markup"
            }
        }
    }
}

extension Paths {
    public static var setGameScore: SetGameScore {
        SetGameScore(path: "/setGameScore")
    }

    public struct SetGameScore {
        /// Path: `/setGameScore`
        public let path: String

        /// Use this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited [Message](https://core.telegram.org/bots/api/#message), otherwise returns *True*. Returns an error, if the new score is not greater than the user's current score in the chat and *force* is *False*.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#setgamescore)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: Result

            public struct Result: Decodable {
                public var message: TelegramBotPI.Message?
                public var isBool: Bool

                public init(message: TelegramBotPI.Message? = nil, isBool: Bool? = nil) {
                    self.message = message
                    self.isBool = isBool ?? true
                }

                public init(from decoder: Decoder) throws {
                    let container = try decoder.singleValueContainer()
                    self.message = try? container.decode(TelegramBotPI.Message.self)
                    self.isBool = (try? container.decode(Bool.self)) ?? true
                }
            }

            public init(isOk: Bool, result: Result) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode(Result.self, forKey: .result)
            }
        }

        public struct PostRequest: Encodable {
            /// User identifier
            public var userID: Int
            /// New score, must be non-negative
            public var score: Int
            /// Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
            public var isForce: Bool?
            /// Pass True, if the game message should not be automatically edited to include the current scoreboard
            public var isDisableEditMessage: Bool?
            /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
            public var chatID: Int?
            /// Required if *inline\_message\_id* is not specified. Identifier of the sent message
            public var messageID: Int?
            /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
            public var inlineMessageID: String?

            public init(userID: Int, score: Int, isForce: Bool? = nil, isDisableEditMessage: Bool? = nil, chatID: Int? = nil, messageID: Int? = nil, inlineMessageID: String? = nil) {
                self.userID = userID
                self.score = score
                self.isForce = isForce
                self.isDisableEditMessage = isDisableEditMessage
                self.chatID = chatID
                self.messageID = messageID
                self.inlineMessageID = inlineMessageID
            }

            private enum CodingKeys: String, CodingKey {
                case userID = "user_id"
                case score
                case isForce = "force"
                case isDisableEditMessage = "disable_edit_message"
                case chatID = "chat_id"
                case messageID = "message_id"
                case inlineMessageID = "inline_message_id"
            }
        }
    }
}

extension Paths {
    public static var getGameHighScores: GetGameHighScores {
        GetGameHighScores(path: "/getGameHighScores")
    }

    public struct GetGameHighScores {
        /// Path: `/getGameHighScores`
        public let path: String

        /// Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. On success, returns an *Array* of [GameHighScore](https://core.telegram.org/bots/api/#gamehighscore) objects.
        /// 
        /// This method will currently return scores for the target user, plus two of their closest neighbors on each side. Will also return the top three users if the user and his neighbors are not among them. Please note that this behavior is subject to change.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#getgamehighscores)
        public func post(_ body: PostRequest) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var isOk: Bool
            public var result: [TelegramBotPI.GameHighScore]

            public init(isOk: Bool, result: [TelegramBotPI.GameHighScore]) {
                self.isOk = isOk
                self.result = result
            }

            private enum CodingKeys: String, CodingKey {
                case isOk = "ok"
                case result
            }

            public init(from decoder: Decoder) throws {
                let values = try decoder.container(keyedBy: CodingKeys.self)
                self.isOk = try values.decode(Bool.self, forKey: .isOk)
                self.result = try values.decode([TelegramBotPI.GameHighScore].self, forKey: .result)
            }
        }

        public struct PostRequest: Encodable {
            /// Target user id
            public var userID: Int
            /// Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
            public var chatID: Int?
            /// Required if *inline\_message\_id* is not specified. Identifier of the sent message
            public var messageID: Int?
            /// Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
            public var inlineMessageID: String?

            public init(userID: Int, chatID: Int? = nil, messageID: Int? = nil, inlineMessageID: String? = nil) {
                self.userID = userID
                self.chatID = chatID
                self.messageID = messageID
                self.inlineMessageID = inlineMessageID
            }

            private enum CodingKeys: String, CodingKey {
                case userID = "user_id"
                case chatID = "chat_id"
                case messageID = "message_id"
                case inlineMessageID = "inline_message_id"
            }
        }
    }
}

public enum Paths {}
