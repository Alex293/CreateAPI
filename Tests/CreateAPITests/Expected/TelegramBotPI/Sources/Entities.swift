// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation

public struct Error: Codable {
    public var isOk: Bool
    public var errorCode: Int
    public var description: String
    /// Contains information about why a request was unsuccessful.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#responseparameters)
    public var parameters: ResponseParameters?

    public init(isOk: Bool, errorCode: Int, description: String, parameters: ResponseParameters? = nil) {
        self.isOk = isOk
        self.errorCode = errorCode
        self.description = description
        self.parameters = parameters
    }

    private enum CodingKeys: String, CodingKey {
        case isOk = "ok"
        case errorCode = "error_code"
        case description
        case parameters
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        self.isOk = try values.decode(Bool.self, forKey: .isOk)
        self.errorCode = try values.decode(Int.self, forKey: .errorCode)
        self.description = try values.decode(String.self, forKey: .description)
        self.parameters = try values.decodeIfPresent(ResponseParameters.self, forKey: .parameters)
    }
}

/// This [object](https://core.telegram.org/bots/api/#available-types) represents an incoming update.
/// At most **one** of the optional parameters can be present in any given update.
///
/// [External Documentation](https://core.telegram.org/bots/api/#update)
public struct Update: Codable {
    /// The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you're using [Webhooks](https://core.telegram.org/bots/api/#setwebhook), since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.
    public var updateID: Int
    public var message: Message?
    public var editedMessage: Message?
    public var channelPost: Message?
    public var editedChannelPost: Message?
    /// This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinequery)
    public var inlineQuery: InlineQuery?
    /// Represents a [result](https://core.telegram.org/bots/api/#inlinequeryresult) of an inline query that was chosen by the user and sent to their chat partner.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#choseninlineresult)
    public var chosenInlineResult: ChosenInlineResult?
    public var callbackQuery: CallbackQuery?
    /// This object contains information about an incoming shipping query.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#shippingquery)
    public var shippingQuery: ShippingQuery?
    /// This object contains information about an incoming pre-checkout query.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#precheckoutquery)
    public var preCheckoutQuery: PreCheckoutQuery?
    /// This object contains information about a poll.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#poll)
    public var poll: Poll?
    /// This object represents an answer of a user in a non-anonymous poll.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#pollanswer)
    public var pollAnswer: PollAnswer?

    public init(updateID: Int, message: Message? = nil, editedMessage: Message? = nil, channelPost: Message? = nil, editedChannelPost: Message? = nil, inlineQuery: InlineQuery? = nil, chosenInlineResult: ChosenInlineResult? = nil, callbackQuery: CallbackQuery? = nil, shippingQuery: ShippingQuery? = nil, preCheckoutQuery: PreCheckoutQuery? = nil, poll: Poll? = nil, pollAnswer: PollAnswer? = nil) {
        self.updateID = updateID
        self.message = message
        self.editedMessage = editedMessage
        self.channelPost = channelPost
        self.editedChannelPost = editedChannelPost
        self.inlineQuery = inlineQuery
        self.chosenInlineResult = chosenInlineResult
        self.callbackQuery = callbackQuery
        self.shippingQuery = shippingQuery
        self.preCheckoutQuery = preCheckoutQuery
        self.poll = poll
        self.pollAnswer = pollAnswer
    }

    private enum CodingKeys: String, CodingKey {
        case updateID = "update_id"
        case message
        case editedMessage = "edited_message"
        case channelPost = "channel_post"
        case editedChannelPost = "edited_channel_post"
        case inlineQuery = "inline_query"
        case chosenInlineResult = "chosen_inline_result"
        case callbackQuery = "callback_query"
        case shippingQuery = "shipping_query"
        case preCheckoutQuery = "pre_checkout_query"
        case poll
        case pollAnswer = "poll_answer"
    }
}

/// Contains information about the current status of a webhook.
///
/// [External Documentation](https://core.telegram.org/bots/api/#webhookinfo)
public struct WebhookInfo: Codable {
    /// Webhook URL, may be empty if webhook is not set up
    public var url: String
    /// True, if a custom certificate was provided for webhook certificate checks
    public var hasCustomCertificate: Bool
    /// Number of updates awaiting delivery
    public var pendingUpdateCount: Int
    /// *Optional*. Currently used webhook IP address
    public var ipAddress: String?
    /// *Optional*. Unix time for the most recent error that happened when trying to deliver an update via webhook
    public var lastErrorDate: Int?
    /// *Optional*. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook
    public var lastErrorMessage: String?
    /// *Optional*. Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery
    public var maxConnections: Int?
    /// *Optional*. A list of update types the bot is subscribed to. Defaults to all update types
    public var allowedUpdates: [String]?

    public init(url: String, hasCustomCertificate: Bool, pendingUpdateCount: Int, ipAddress: String? = nil, lastErrorDate: Int? = nil, lastErrorMessage: String? = nil, maxConnections: Int? = nil, allowedUpdates: [String]? = nil) {
        self.url = url
        self.hasCustomCertificate = hasCustomCertificate
        self.pendingUpdateCount = pendingUpdateCount
        self.ipAddress = ipAddress
        self.lastErrorDate = lastErrorDate
        self.lastErrorMessage = lastErrorMessage
        self.maxConnections = maxConnections
        self.allowedUpdates = allowedUpdates
    }

    private enum CodingKeys: String, CodingKey {
        case url
        case hasCustomCertificate = "has_custom_certificate"
        case pendingUpdateCount = "pending_update_count"
        case ipAddress = "ip_address"
        case lastErrorDate = "last_error_date"
        case lastErrorMessage = "last_error_message"
        case maxConnections = "max_connections"
        case allowedUpdates = "allowed_updates"
    }
}

/// This object represents a Telegram user or bot.
///
/// [External Documentation](https://core.telegram.org/bots/api/#user)
public struct User: Codable {
    /// Unique identifier for this user or bot
    public var id: Int
    /// True, if this user is a bot
    public var isBot: Bool
    /// User's or bot's first name
    public var firstName: String
    /// *Optional*. User's or bot's last name
    public var lastName: String?
    /// *Optional*. User's or bot's username
    public var username: String?
    /// *Optional*. [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) of the user's language
    public var languageCode: String?
    /// *Optional*. True, if the bot can be invited to groups. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
    public var canJoinGroups: Bool?
    /// *Optional*. True, if [privacy mode](https://core.telegram.org/bots#privacy-mode) is disabled for the bot. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
    public var canReadAllGroupMessages: Bool?
    /// *Optional*. True, if the bot supports inline queries. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
    public var isSupportsInlineQueries: Bool?

    public init(id: Int, isBot: Bool, firstName: String, lastName: String? = nil, username: String? = nil, languageCode: String? = nil, canJoinGroups: Bool? = nil, canReadAllGroupMessages: Bool? = nil, isSupportsInlineQueries: Bool? = nil) {
        self.id = id
        self.isBot = isBot
        self.firstName = firstName
        self.lastName = lastName
        self.username = username
        self.languageCode = languageCode
        self.canJoinGroups = canJoinGroups
        self.canReadAllGroupMessages = canReadAllGroupMessages
        self.isSupportsInlineQueries = isSupportsInlineQueries
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case isBot = "is_bot"
        case firstName = "first_name"
        case lastName = "last_name"
        case username
        case languageCode = "language_code"
        case canJoinGroups = "can_join_groups"
        case canReadAllGroupMessages = "can_read_all_group_messages"
        case isSupportsInlineQueries = "supports_inline_queries"
    }
}

/// This object represents a chat.
///
/// [External Documentation](https://core.telegram.org/bots/api/#chat)
public final class Chat: Codable {
    /// Unique identifier for this chat. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
    public var id: Int
    /// Type of chat, can be either “private”, “group”, “supergroup” or “channel”
    public var type: `Type`
    /// *Optional*. Title, for supergroups, channels and group chats
    public var title: String?
    /// *Optional*. Username, for private chats, supergroups and channels if available
    public var username: String?
    /// *Optional*. First name of the other party in a private chat
    public var firstName: String?
    /// *Optional*. Last name of the other party in a private chat
    public var lastName: String?
    /// This object represents a chat photo.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#chatphoto)
    public var photo: ChatPhoto?
    /// *Optional*. Bio of the other party in a private chat. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
    public var bio: String?
    /// *Optional*. Description, for groups, supergroups and channel chats. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
    public var description: String?
    /// *Optional*. Chat invite link, for groups, supergroups and channel chats. Each administrator in a chat generates their own invite links, so the bot must first generate the link using [exportChatInviteLink](https://core.telegram.org/bots/api/#exportchatinvitelink). Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
    public var inviteLink: String?
    public var pinnedMessage: Message?
    /// Describes actions that a non-administrator user is allowed to take in a chat.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#chatpermissions)
    public var permissions: ChatPermissions?
    /// *Optional*. For supergroups, the minimum allowed delay between consecutive messages sent by each unpriviledged user. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
    public var slowModeDelay: Int?
    /// *Optional*. For supergroups, name of group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
    public var stickerSetName: String?
    /// *Optional*. True, if the bot can change the group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
    public var canSetStickerSet: Bool?
    /// *Optional*. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
    public var linkedChatID: Int?
    /// Represents a location to which a chat is connected.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#chatlocation)
    public var location: ChatLocation?

    /// Type of chat, can be either “private”, “group”, “supergroup” or “channel”
    public enum `Type`: String, Codable, CaseIterable {
        case `private`
        case group
        case supergroup
        case channel
    }

    public init(id: Int, type: `Type`, title: String? = nil, username: String? = nil, firstName: String? = nil, lastName: String? = nil, photo: ChatPhoto? = nil, bio: String? = nil, description: String? = nil, inviteLink: String? = nil, pinnedMessage: Message? = nil, permissions: ChatPermissions? = nil, slowModeDelay: Int? = nil, stickerSetName: String? = nil, canSetStickerSet: Bool? = nil, linkedChatID: Int? = nil, location: ChatLocation? = nil) {
        self.id = id
        self.type = type
        self.title = title
        self.username = username
        self.firstName = firstName
        self.lastName = lastName
        self.photo = photo
        self.bio = bio
        self.description = description
        self.inviteLink = inviteLink
        self.pinnedMessage = pinnedMessage
        self.permissions = permissions
        self.slowModeDelay = slowModeDelay
        self.stickerSetName = stickerSetName
        self.canSetStickerSet = canSetStickerSet
        self.linkedChatID = linkedChatID
        self.location = location
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case title
        case username
        case firstName = "first_name"
        case lastName = "last_name"
        case photo
        case bio
        case description
        case inviteLink = "invite_link"
        case pinnedMessage = "pinned_message"
        case permissions
        case slowModeDelay = "slow_mode_delay"
        case stickerSetName = "sticker_set_name"
        case canSetStickerSet = "can_set_sticker_set"
        case linkedChatID = "linked_chat_id"
        case location
    }
}

/// This object represents a message.
///
/// [External Documentation](https://core.telegram.org/bots/api/#message)
public final class Message: Codable {
    /// Unique message identifier inside this chat
    public var messageID: Int
    /// This object represents a Telegram user or bot.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#user)
    public var from: User?
    public var senderChat: Chat?
    /// Date the message was sent in Unix time
    public var date: Int
    public var chat: Chat
    /// This object represents a Telegram user or bot.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#user)
    public var forwardFrom: User?
    public var forwardFromChat: Chat?
    /// *Optional*. For messages forwarded from channels, identifier of the original message in the channel
    public var forwardFromMessageID: Int?
    /// *Optional*. For messages forwarded from channels, signature of the post author if present
    public var forwardSignature: String?
    /// *Optional*. Sender's name for messages forwarded from users who disallow adding a link to their account in forwarded messages
    public var forwardSenderName: String?
    /// *Optional*. For forwarded messages, date the original message was sent in Unix time
    public var forwardDate: Int?
    public var replyToMessage: Message?
    /// This object represents a Telegram user or bot.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#user)
    public var viaBot: User?
    /// *Optional*. Date the message was last edited in Unix time
    public var editDate: Int?
    /// *Optional*. The unique identifier of a media message group this message belongs to
    public var mediaGroupID: String?
    /// *Optional*. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator
    public var authorSignature: String?
    /// *Optional*. For text messages, the actual UTF-8 text of the message, 0-4096 characters
    public var text: String?
    /// *Optional*. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text
    public var entities: [MessageEntity]?
    /// This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#animation)
    public var animation: Animation?
    /// This object represents an audio file to be treated as music by the Telegram clients.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#audio)
    public var audio: Audio?
    /// This object represents a general file (as opposed to [photos](https://core.telegram.org/bots/api/#photosize), [voice messages](https://core.telegram.org/bots/api/#voice) and [audio files](https://core.telegram.org/bots/api/#audio)).
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#document)
    public var document: Document?
    /// *Optional*. Message is a photo, available sizes of the photo
    public var photo: [PhotoSize]?
    /// This object represents a sticker.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#sticker)
    public var sticker: Sticker?
    /// This object represents a video file.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#video)
    public var video: Video?
    /// This object represents a [video message](https://telegram.org/blog/video-messages-and-telescope) (available in Telegram apps as of [v.4.0](https://telegram.org/blog/video-messages-and-telescope)).
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#videonote)
    public var videoNote: VideoNote?
    /// This object represents a voice note.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#voice)
    public var voice: Voice?
    /// *Optional*. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters
    public var caption: String?
    /// *Optional*. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption
    public var captionEntities: [MessageEntity]?
    /// This object represents a phone contact.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#contact)
    public var contact: Contact?
    /// This object represents an animated emoji that displays a random value.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#dice)
    public var dice: Dice?
    /// This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#game)
    public var game: Game?
    /// This object contains information about a poll.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#poll)
    public var poll: Poll?
    /// This object represents a venue.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#venue)
    public var venue: Venue?
    /// This object represents a point on the map.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#location)
    public var location: Location?
    /// *Optional*. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)
    public var newChatMembers: [User]?
    /// This object represents a Telegram user or bot.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#user)
    public var leftChatMember: User?
    /// *Optional*. A chat title was changed to this value
    public var newChatTitle: String?
    /// *Optional*. A chat photo was change to this value
    public var newChatPhoto: [PhotoSize]?
    /// *Optional*. Service message: the chat photo was deleted
    public var deleteChatPhoto: Bool?
    /// *Optional*. Service message: the group has been created
    public var isGroupChatCreated: Bool?
    /// *Optional*. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply\_to\_message if someone replies to a very first message in a directly created supergroup.
    public var isSupergroupChatCreated: Bool?
    /// *Optional*. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply\_to\_message if someone replies to a very first message in a channel.
    public var isChannelChatCreated: Bool?
    /// *Optional*. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
    public var migrateToChatID: Int?
    /// *Optional*. The supergroup has been migrated from a group with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
    public var migrateFromChatID: Int?
    public var pinnedMessage: Message?
    /// This object contains basic information about an invoice.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#invoice)
    public var invoice: Invoice?
    /// This object contains basic information about a successful payment.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#successfulpayment)
    public var successfulPayment: SuccessfulPayment?
    /// *Optional*. The domain name of the website on which the user has logged in. [More about Telegram Login »](/widgets/login)
    public var connectedWebsite: String?
    /// Contains information about Telegram Passport data shared with the bot by the user.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#passportdata)
    public var passportData: PassportData?
    /// This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#proximityalerttriggered)
    public var proximityAlertTriggered: ProximityAlertTriggered?
    /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
    public var replyMarkup: InlineKeyboardMarkup?

    public init(messageID: Int, from: User? = nil, senderChat: Chat? = nil, date: Int, chat: Chat, forwardFrom: User? = nil, forwardFromChat: Chat? = nil, forwardFromMessageID: Int? = nil, forwardSignature: String? = nil, forwardSenderName: String? = nil, forwardDate: Int? = nil, replyToMessage: Message? = nil, viaBot: User? = nil, editDate: Int? = nil, mediaGroupID: String? = nil, authorSignature: String? = nil, text: String? = nil, entities: [MessageEntity]? = nil, animation: Animation? = nil, audio: Audio? = nil, document: Document? = nil, photo: [PhotoSize]? = nil, sticker: Sticker? = nil, video: Video? = nil, videoNote: VideoNote? = nil, voice: Voice? = nil, caption: String? = nil, captionEntities: [MessageEntity]? = nil, contact: Contact? = nil, dice: Dice? = nil, game: Game? = nil, poll: Poll? = nil, venue: Venue? = nil, location: Location? = nil, newChatMembers: [User]? = nil, leftChatMember: User? = nil, newChatTitle: String? = nil, newChatPhoto: [PhotoSize]? = nil, deleteChatPhoto: Bool? = nil, isGroupChatCreated: Bool? = nil, isSupergroupChatCreated: Bool? = nil, isChannelChatCreated: Bool? = nil, migrateToChatID: Int? = nil, migrateFromChatID: Int? = nil, pinnedMessage: Message? = nil, invoice: Invoice? = nil, successfulPayment: SuccessfulPayment? = nil, connectedWebsite: String? = nil, passportData: PassportData? = nil, proximityAlertTriggered: ProximityAlertTriggered? = nil, replyMarkup: InlineKeyboardMarkup? = nil) {
        self.messageID = messageID
        self.from = from
        self.senderChat = senderChat
        self.date = date
        self.chat = chat
        self.forwardFrom = forwardFrom
        self.forwardFromChat = forwardFromChat
        self.forwardFromMessageID = forwardFromMessageID
        self.forwardSignature = forwardSignature
        self.forwardSenderName = forwardSenderName
        self.forwardDate = forwardDate
        self.replyToMessage = replyToMessage
        self.viaBot = viaBot
        self.editDate = editDate
        self.mediaGroupID = mediaGroupID
        self.authorSignature = authorSignature
        self.text = text
        self.entities = entities
        self.animation = animation
        self.audio = audio
        self.document = document
        self.photo = photo
        self.sticker = sticker
        self.video = video
        self.videoNote = videoNote
        self.voice = voice
        self.caption = caption
        self.captionEntities = captionEntities
        self.contact = contact
        self.dice = dice
        self.game = game
        self.poll = poll
        self.venue = venue
        self.location = location
        self.newChatMembers = newChatMembers
        self.leftChatMember = leftChatMember
        self.newChatTitle = newChatTitle
        self.newChatPhoto = newChatPhoto
        self.deleteChatPhoto = deleteChatPhoto
        self.isGroupChatCreated = isGroupChatCreated
        self.isSupergroupChatCreated = isSupergroupChatCreated
        self.isChannelChatCreated = isChannelChatCreated
        self.migrateToChatID = migrateToChatID
        self.migrateFromChatID = migrateFromChatID
        self.pinnedMessage = pinnedMessage
        self.invoice = invoice
        self.successfulPayment = successfulPayment
        self.connectedWebsite = connectedWebsite
        self.passportData = passportData
        self.proximityAlertTriggered = proximityAlertTriggered
        self.replyMarkup = replyMarkup
    }

    private enum CodingKeys: String, CodingKey {
        case messageID = "message_id"
        case from
        case senderChat = "sender_chat"
        case date
        case chat
        case forwardFrom = "forward_from"
        case forwardFromChat = "forward_from_chat"
        case forwardFromMessageID = "forward_from_message_id"
        case forwardSignature = "forward_signature"
        case forwardSenderName = "forward_sender_name"
        case forwardDate = "forward_date"
        case replyToMessage = "reply_to_message"
        case viaBot = "via_bot"
        case editDate = "edit_date"
        case mediaGroupID = "media_group_id"
        case authorSignature = "author_signature"
        case text
        case entities
        case animation
        case audio
        case document
        case photo
        case sticker
        case video
        case videoNote = "video_note"
        case voice
        case caption
        case captionEntities = "caption_entities"
        case contact
        case dice
        case game
        case poll
        case venue
        case location
        case newChatMembers = "new_chat_members"
        case leftChatMember = "left_chat_member"
        case newChatTitle = "new_chat_title"
        case newChatPhoto = "new_chat_photo"
        case deleteChatPhoto = "delete_chat_photo"
        case isGroupChatCreated = "group_chat_created"
        case isSupergroupChatCreated = "supergroup_chat_created"
        case isChannelChatCreated = "channel_chat_created"
        case migrateToChatID = "migrate_to_chat_id"
        case migrateFromChatID = "migrate_from_chat_id"
        case pinnedMessage = "pinned_message"
        case invoice
        case successfulPayment = "successful_payment"
        case connectedWebsite = "connected_website"
        case passportData = "passport_data"
        case proximityAlertTriggered = "proximity_alert_triggered"
        case replyMarkup = "reply_markup"
    }
}

/// This object represents a unique message identifier.
///
/// [External Documentation](https://core.telegram.org/bots/api/#messageid)
public struct MessageID: Codable {
    /// Unique message identifier
    public var messageID: Int

    public init(messageID: Int) {
        self.messageID = messageID
    }

    private enum CodingKeys: String, CodingKey {
        case messageID = "message_id"
    }
}

/// This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.
///
/// [External Documentation](https://core.telegram.org/bots/api/#messageentity)
public struct MessageEntity: Codable {
    /// Type of the entity. Can be “mention” (`@username`), “hashtag” (`#hashtag`), “cashtag” (`$USD`), “bot\_command” (`/start@jobs_bot`), “url” (`https://telegram.org`), “email” (`do-not-reply@telegram.org`), “phone\_number” (`+1-212-555-0123`), “bold” (**bold text**), “italic” (*italic text*), “underline” (underlined text), “strikethrough” (strikethrough text), “code” (monowidth string), “pre” (monowidth block), “text\_link” (for clickable text URLs), “text\_mention” (for users [without usernames](https://telegram.org/blog/edit#new-mentions))
    public var type: `Type`
    /// Offset in UTF-16 code units to the start of the entity
    public var offset: Int
    /// Length of the entity in UTF-16 code units
    public var length: Int
    /// *Optional*. For “text\_link” only, url that will be opened after user taps on the text
    public var url: String?
    /// This object represents a Telegram user or bot.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#user)
    public var user: User?
    /// *Optional*. For “pre” only, the programming language of the entity text
    public var language: String?

    /// Type of the entity. Can be “mention” (`@username`), “hashtag” (`#hashtag`), “cashtag” (`$USD`), “bot\_command” (`/start@jobs_bot`), “url” (`https://telegram.org`), “email” (`do-not-reply@telegram.org`), “phone\_number” (`+1-212-555-0123`), “bold” (**bold text**), “italic” (*italic text*), “underline” (underlined text), “strikethrough” (strikethrough text), “code” (monowidth string), “pre” (monowidth block), “text\_link” (for clickable text URLs), “text\_mention” (for users [without usernames](https://telegram.org/blog/edit#new-mentions))
    public enum `Type`: String, Codable, CaseIterable {
        case mention
        case hashtag
        case cashtag
        case botCommand = "bot_command"
        case url
        case email
        case phoneNumber = "phone_number"
        case bold
        case italic
        case underline
        case strikethrough
        case code
        case pre
        case textLink = "text_link"
        case textMention = "text_mention"
    }

    public init(type: `Type`, offset: Int, length: Int, url: String? = nil, user: User? = nil, language: String? = nil) {
        self.type = type
        self.offset = offset
        self.length = length
        self.url = url
        self.user = user
        self.language = language
    }
}

/// This object represents one size of a photo or a [file](https://core.telegram.org/bots/api/#document) / [sticker](https://core.telegram.org/bots/api/#sticker) thumbnail.
///
/// [External Documentation](https://core.telegram.org/bots/api/#photosize)
public struct PhotoSize: Codable {
    /// Identifier for this file, which can be used to download or reuse the file
    public var fileID: String
    /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    public var fileUniqueID: String
    /// Photo width
    public var width: Int
    /// Photo height
    public var height: Int
    /// *Optional*. File size
    public var fileSize: Int?

    public init(fileID: String, fileUniqueID: String, width: Int, height: Int, fileSize: Int? = nil) {
        self.fileID = fileID
        self.fileUniqueID = fileUniqueID
        self.width = width
        self.height = height
        self.fileSize = fileSize
    }

    private enum CodingKeys: String, CodingKey {
        case fileID = "file_id"
        case fileUniqueID = "file_unique_id"
        case width
        case height
        case fileSize = "file_size"
    }
}

/// This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).
///
/// [External Documentation](https://core.telegram.org/bots/api/#animation)
public struct Animation: Codable {
    /// Identifier for this file, which can be used to download or reuse the file
    public var fileID: String
    /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    public var fileUniqueID: String
    /// Video width as defined by sender
    public var width: Int
    /// Video height as defined by sender
    public var height: Int
    /// Duration of the video in seconds as defined by sender
    public var duration: Int
    /// This object represents one size of a photo or a [file](https://core.telegram.org/bots/api/#document) / [sticker](https://core.telegram.org/bots/api/#sticker) thumbnail.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#photosize)
    public var thumb: PhotoSize?
    /// *Optional*. Original animation filename as defined by sender
    public var fileName: String?
    /// *Optional*. MIME type of the file as defined by sender
    public var mimeType: String?
    /// *Optional*. File size
    public var fileSize: Int?

    public init(fileID: String, fileUniqueID: String, width: Int, height: Int, duration: Int, thumb: PhotoSize? = nil, fileName: String? = nil, mimeType: String? = nil, fileSize: Int? = nil) {
        self.fileID = fileID
        self.fileUniqueID = fileUniqueID
        self.width = width
        self.height = height
        self.duration = duration
        self.thumb = thumb
        self.fileName = fileName
        self.mimeType = mimeType
        self.fileSize = fileSize
    }

    private enum CodingKeys: String, CodingKey {
        case fileID = "file_id"
        case fileUniqueID = "file_unique_id"
        case width
        case height
        case duration
        case thumb
        case fileName = "file_name"
        case mimeType = "mime_type"
        case fileSize = "file_size"
    }
}

/// This object represents an audio file to be treated as music by the Telegram clients.
///
/// [External Documentation](https://core.telegram.org/bots/api/#audio)
public struct Audio: Codable {
    /// Identifier for this file, which can be used to download or reuse the file
    public var fileID: String
    /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    public var fileUniqueID: String
    /// Duration of the audio in seconds as defined by sender
    public var duration: Int
    /// *Optional*. Performer of the audio as defined by sender or by audio tags
    public var performer: String?
    /// *Optional*. Title of the audio as defined by sender or by audio tags
    public var title: String?
    /// *Optional*. Original filename as defined by sender
    public var fileName: String?
    /// *Optional*. MIME type of the file as defined by sender
    public var mimeType: String?
    /// *Optional*. File size
    public var fileSize: Int?
    /// This object represents one size of a photo or a [file](https://core.telegram.org/bots/api/#document) / [sticker](https://core.telegram.org/bots/api/#sticker) thumbnail.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#photosize)
    public var thumb: PhotoSize?

    public init(fileID: String, fileUniqueID: String, duration: Int, performer: String? = nil, title: String? = nil, fileName: String? = nil, mimeType: String? = nil, fileSize: Int? = nil, thumb: PhotoSize? = nil) {
        self.fileID = fileID
        self.fileUniqueID = fileUniqueID
        self.duration = duration
        self.performer = performer
        self.title = title
        self.fileName = fileName
        self.mimeType = mimeType
        self.fileSize = fileSize
        self.thumb = thumb
    }

    private enum CodingKeys: String, CodingKey {
        case fileID = "file_id"
        case fileUniqueID = "file_unique_id"
        case duration
        case performer
        case title
        case fileName = "file_name"
        case mimeType = "mime_type"
        case fileSize = "file_size"
        case thumb
    }
}

/// This object represents a general file (as opposed to [photos](https://core.telegram.org/bots/api/#photosize), [voice messages](https://core.telegram.org/bots/api/#voice) and [audio files](https://core.telegram.org/bots/api/#audio)).
///
/// [External Documentation](https://core.telegram.org/bots/api/#document)
public struct Document: Codable {
    /// Identifier for this file, which can be used to download or reuse the file
    public var fileID: String
    /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    public var fileUniqueID: String
    /// This object represents one size of a photo or a [file](https://core.telegram.org/bots/api/#document) / [sticker](https://core.telegram.org/bots/api/#sticker) thumbnail.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#photosize)
    public var thumb: PhotoSize?
    /// *Optional*. Original filename as defined by sender
    public var fileName: String?
    /// *Optional*. MIME type of the file as defined by sender
    public var mimeType: String?
    /// *Optional*. File size
    public var fileSize: Int?

    public init(fileID: String, fileUniqueID: String, thumb: PhotoSize? = nil, fileName: String? = nil, mimeType: String? = nil, fileSize: Int? = nil) {
        self.fileID = fileID
        self.fileUniqueID = fileUniqueID
        self.thumb = thumb
        self.fileName = fileName
        self.mimeType = mimeType
        self.fileSize = fileSize
    }

    private enum CodingKeys: String, CodingKey {
        case fileID = "file_id"
        case fileUniqueID = "file_unique_id"
        case thumb
        case fileName = "file_name"
        case mimeType = "mime_type"
        case fileSize = "file_size"
    }
}

/// This object represents a video file.
///
/// [External Documentation](https://core.telegram.org/bots/api/#video)
public struct Video: Codable {
    /// Identifier for this file, which can be used to download or reuse the file
    public var fileID: String
    /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    public var fileUniqueID: String
    /// Video width as defined by sender
    public var width: Int
    /// Video height as defined by sender
    public var height: Int
    /// Duration of the video in seconds as defined by sender
    public var duration: Int
    /// This object represents one size of a photo or a [file](https://core.telegram.org/bots/api/#document) / [sticker](https://core.telegram.org/bots/api/#sticker) thumbnail.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#photosize)
    public var thumb: PhotoSize?
    /// *Optional*. Original filename as defined by sender
    public var fileName: String?
    /// *Optional*. Mime type of a file as defined by sender
    public var mimeType: String?
    /// *Optional*. File size
    public var fileSize: Int?

    public init(fileID: String, fileUniqueID: String, width: Int, height: Int, duration: Int, thumb: PhotoSize? = nil, fileName: String? = nil, mimeType: String? = nil, fileSize: Int? = nil) {
        self.fileID = fileID
        self.fileUniqueID = fileUniqueID
        self.width = width
        self.height = height
        self.duration = duration
        self.thumb = thumb
        self.fileName = fileName
        self.mimeType = mimeType
        self.fileSize = fileSize
    }

    private enum CodingKeys: String, CodingKey {
        case fileID = "file_id"
        case fileUniqueID = "file_unique_id"
        case width
        case height
        case duration
        case thumb
        case fileName = "file_name"
        case mimeType = "mime_type"
        case fileSize = "file_size"
    }
}

/// This object represents a [video message](https://telegram.org/blog/video-messages-and-telescope) (available in Telegram apps as of [v.4.0](https://telegram.org/blog/video-messages-and-telescope)).
///
/// [External Documentation](https://core.telegram.org/bots/api/#videonote)
public struct VideoNote: Codable {
    /// Identifier for this file, which can be used to download or reuse the file
    public var fileID: String
    /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    public var fileUniqueID: String
    /// Video width and height (diameter of the video message) as defined by sender
    public var length: Int
    /// Duration of the video in seconds as defined by sender
    public var duration: Int
    /// This object represents one size of a photo or a [file](https://core.telegram.org/bots/api/#document) / [sticker](https://core.telegram.org/bots/api/#sticker) thumbnail.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#photosize)
    public var thumb: PhotoSize?
    /// *Optional*. File size
    public var fileSize: Int?

    public init(fileID: String, fileUniqueID: String, length: Int, duration: Int, thumb: PhotoSize? = nil, fileSize: Int? = nil) {
        self.fileID = fileID
        self.fileUniqueID = fileUniqueID
        self.length = length
        self.duration = duration
        self.thumb = thumb
        self.fileSize = fileSize
    }

    private enum CodingKeys: String, CodingKey {
        case fileID = "file_id"
        case fileUniqueID = "file_unique_id"
        case length
        case duration
        case thumb
        case fileSize = "file_size"
    }
}

/// This object represents a voice note.
///
/// [External Documentation](https://core.telegram.org/bots/api/#voice)
public struct Voice: Codable {
    /// Identifier for this file, which can be used to download or reuse the file
    public var fileID: String
    /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    public var fileUniqueID: String
    /// Duration of the audio in seconds as defined by sender
    public var duration: Int
    /// *Optional*. MIME type of the file as defined by sender
    public var mimeType: String?
    /// *Optional*. File size
    public var fileSize: Int?

    public init(fileID: String, fileUniqueID: String, duration: Int, mimeType: String? = nil, fileSize: Int? = nil) {
        self.fileID = fileID
        self.fileUniqueID = fileUniqueID
        self.duration = duration
        self.mimeType = mimeType
        self.fileSize = fileSize
    }

    private enum CodingKeys: String, CodingKey {
        case fileID = "file_id"
        case fileUniqueID = "file_unique_id"
        case duration
        case mimeType = "mime_type"
        case fileSize = "file_size"
    }
}

/// This object represents a phone contact.
///
/// [External Documentation](https://core.telegram.org/bots/api/#contact)
public struct Contact: Codable {
    /// Contact's phone number
    public var phoneNumber: String
    /// Contact's first name
    public var firstName: String
    /// *Optional*. Contact's last name
    public var lastName: String?
    /// *Optional*. Contact's user identifier in Telegram
    public var userID: Int?
    /// *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard)
    public var vcard: String?

    public init(phoneNumber: String, firstName: String, lastName: String? = nil, userID: Int? = nil, vcard: String? = nil) {
        self.phoneNumber = phoneNumber
        self.firstName = firstName
        self.lastName = lastName
        self.userID = userID
        self.vcard = vcard
    }

    private enum CodingKeys: String, CodingKey {
        case phoneNumber = "phone_number"
        case firstName = "first_name"
        case lastName = "last_name"
        case userID = "user_id"
        case vcard
    }
}

/// This object represents an animated emoji that displays a random value.
///
/// [External Documentation](https://core.telegram.org/bots/api/#dice)
public struct Dice: Codable {
    /// Emoji on which the dice throw animation is based
    public var emoji: String
    /// Value of the dice, 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />” base emoji, 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />” base emoji, 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />” base emoji
    public var value: Int

    public init(emoji: String, value: Int) {
        self.emoji = emoji
        self.value = value
    }
}

/// This object contains information about one answer option in a poll.
///
/// [External Documentation](https://core.telegram.org/bots/api/#polloption)
public struct PollOption: Codable {
    /// Option text, 1-100 characters
    public var text: String
    /// Number of users that voted for this option
    public var voterCount: Int

    public init(text: String, voterCount: Int) {
        self.text = text
        self.voterCount = voterCount
    }

    private enum CodingKeys: String, CodingKey {
        case text
        case voterCount = "voter_count"
    }
}

/// This object represents an answer of a user in a non-anonymous poll.
///
/// [External Documentation](https://core.telegram.org/bots/api/#pollanswer)
public struct PollAnswer: Codable {
    /// Unique poll identifier
    public var pollID: String
    /// This object represents a Telegram user or bot.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#user)
    public var user: User
    /// 0-based identifiers of answer options, chosen by the user. May be empty if the user retracted their vote.
    public var optionIDs: [Int]

    public init(pollID: String, user: User, optionIDs: [Int]) {
        self.pollID = pollID
        self.user = user
        self.optionIDs = optionIDs
    }

    private enum CodingKeys: String, CodingKey {
        case pollID = "poll_id"
        case user
        case optionIDs = "option_ids"
    }
}

/// This object contains information about a poll.
///
/// [External Documentation](https://core.telegram.org/bots/api/#poll)
public struct Poll: Codable {
    /// Unique poll identifier
    public var id: String
    /// Poll question, 1-255 characters
    public var question: String
    /// List of poll options
    public var options: [PollOption]
    /// Total number of users that voted in the poll
    public var totalVoterCount: Int
    /// True, if the poll is closed
    public var isClosed: Bool
    /// True, if the poll is anonymous
    public var isAnonymous: Bool
    /// Poll type, currently can be “regular” or “quiz”
    public var type: String
    /// True, if the poll allows multiple answers
    public var allowsMultipleAnswers: Bool
    /// *Optional*. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.
    public var correctOptionID: Int?
    /// *Optional*. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters
    public var explanation: String?
    /// *Optional*. Special entities like usernames, URLs, bot commands, etc. that appear in the *explanation*
    public var explanationEntities: [MessageEntity]?
    /// *Optional*. Amount of time in seconds the poll will be active after creation
    public var openPeriod: Int?
    /// *Optional*. Point in time (Unix timestamp) when the poll will be automatically closed
    public var closeDate: Int?

    public init(id: String, question: String, options: [PollOption], totalVoterCount: Int, isClosed: Bool, isAnonymous: Bool, type: String, allowsMultipleAnswers: Bool, correctOptionID: Int? = nil, explanation: String? = nil, explanationEntities: [MessageEntity]? = nil, openPeriod: Int? = nil, closeDate: Int? = nil) {
        self.id = id
        self.question = question
        self.options = options
        self.totalVoterCount = totalVoterCount
        self.isClosed = isClosed
        self.isAnonymous = isAnonymous
        self.type = type
        self.allowsMultipleAnswers = allowsMultipleAnswers
        self.correctOptionID = correctOptionID
        self.explanation = explanation
        self.explanationEntities = explanationEntities
        self.openPeriod = openPeriod
        self.closeDate = closeDate
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case question
        case options
        case totalVoterCount = "total_voter_count"
        case isClosed = "is_closed"
        case isAnonymous = "is_anonymous"
        case type
        case allowsMultipleAnswers = "allows_multiple_answers"
        case correctOptionID = "correct_option_id"
        case explanation
        case explanationEntities = "explanation_entities"
        case openPeriod = "open_period"
        case closeDate = "close_date"
    }
}

/// This object represents a point on the map.
///
/// [External Documentation](https://core.telegram.org/bots/api/#location)
public struct Location: Codable {
    /// Longitude as defined by sender
    public var longitude: Double
    /// Latitude as defined by sender
    public var latitude: Double
    /// *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
    public var horizontalAccuracy: Double?
    /// *Optional*. Time relative to the message sending date, during which the location can be updated, in seconds. For active live locations only.
    public var livePeriod: Int?
    /// *Optional*. The direction in which user is moving, in degrees; 1-360. For active live locations only.
    public var heading: Int?
    /// *Optional*. Maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only.
    public var proximityAlertRadius: Int?

    public init(longitude: Double, latitude: Double, horizontalAccuracy: Double? = nil, livePeriod: Int? = nil, heading: Int? = nil, proximityAlertRadius: Int? = nil) {
        self.longitude = longitude
        self.latitude = latitude
        self.horizontalAccuracy = horizontalAccuracy
        self.livePeriod = livePeriod
        self.heading = heading
        self.proximityAlertRadius = proximityAlertRadius
    }

    private enum CodingKeys: String, CodingKey {
        case longitude
        case latitude
        case horizontalAccuracy = "horizontal_accuracy"
        case livePeriod = "live_period"
        case heading
        case proximityAlertRadius = "proximity_alert_radius"
    }
}

/// This object represents a venue.
///
/// [External Documentation](https://core.telegram.org/bots/api/#venue)
public struct Venue: Codable {
    /// This object represents a point on the map.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#location)
    public var location: Location
    /// Name of the venue
    public var title: String
    /// Address of the venue
    public var address: String
    /// *Optional*. Foursquare identifier of the venue
    public var foursquareID: String?
    /// *Optional*. Foursquare type of the venue. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
    public var foursquareType: String?
    /// *Optional*. Google Places identifier of the venue
    public var googlePlaceID: String?
    /// *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
    public var googlePlaceType: String?

    public init(location: Location, title: String, address: String, foursquareID: String? = nil, foursquareType: String? = nil, googlePlaceID: String? = nil, googlePlaceType: String? = nil) {
        self.location = location
        self.title = title
        self.address = address
        self.foursquareID = foursquareID
        self.foursquareType = foursquareType
        self.googlePlaceID = googlePlaceID
        self.googlePlaceType = googlePlaceType
    }

    private enum CodingKeys: String, CodingKey {
        case location
        case title
        case address
        case foursquareID = "foursquare_id"
        case foursquareType = "foursquare_type"
        case googlePlaceID = "google_place_id"
        case googlePlaceType = "google_place_type"
    }
}

/// This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user.
///
/// [External Documentation](https://core.telegram.org/bots/api/#proximityalerttriggered)
public struct ProximityAlertTriggered: Codable {
    /// This object represents a Telegram user or bot.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#user)
    public var traveler: User
    /// This object represents a Telegram user or bot.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#user)
    public var watcher: User
    /// The distance between the users
    public var distance: Int

    public init(traveler: User, watcher: User, distance: Int) {
        self.traveler = traveler
        self.watcher = watcher
        self.distance = distance
    }
}

/// This object represent a user's profile pictures.
///
/// [External Documentation](https://core.telegram.org/bots/api/#userprofilephotos)
public struct UserProfilePhotos: Codable {
    /// Total number of profile pictures the target user has
    public var totalCount: Int
    /// Requested profile pictures (in up to 4 sizes each)
    public var photos: [[PhotoSize]]

    public init(totalCount: Int, photos: [[PhotoSize]]) {
        self.totalCount = totalCount
        self.photos = photos
    }

    private enum CodingKeys: String, CodingKey {
        case totalCount = "total_count"
        case photos
    }
}

/// This object represents a file ready to be downloaded. The file can be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile).
/// 
/// Maximum file size to download is 20 MB
///
/// [External Documentation](https://core.telegram.org/bots/api/#file)
public struct File: Codable {
    /// Identifier for this file, which can be used to download or reuse the file
    public var fileID: String
    /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    public var fileUniqueID: String
    /// *Optional*. File size, if known
    public var fileSize: Int?
    /// *Optional*. File path. Use `https://api.telegram.org/file/bot<token>/<file_path>` to get the file.
    public var filePath: String?

    public init(fileID: String, fileUniqueID: String, fileSize: Int? = nil, filePath: String? = nil) {
        self.fileID = fileID
        self.fileUniqueID = fileUniqueID
        self.fileSize = fileSize
        self.filePath = filePath
    }

    private enum CodingKeys: String, CodingKey {
        case fileID = "file_id"
        case fileUniqueID = "file_unique_id"
        case fileSize = "file_size"
        case filePath = "file_path"
    }
}

/// This object represents a [custom keyboard](https://core.telegram.org/bots#keyboards) with reply options (see [Introduction to bots](https://core.telegram.org/bots#keyboards) for details and examples).
///
/// [External Documentation](https://core.telegram.org/bots/api/#replykeyboardmarkup)
public struct ReplyKeyboardMarkup: Codable {
    /// Array of button rows, each represented by an Array of [KeyboardButton](https://core.telegram.org/bots/api/#keyboardbutton) objects
    public var keyboard: [[KeyboardButton]]
    /// *Optional*. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to *false*, in which case the custom keyboard is always of the same height as the app's standard keyboard.
    public var isResizeKeyboard: Bool
    /// *Optional*. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. Defaults to *false*.
    public var isOneTimeKeyboard: Bool
    /// *Optional*. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\_to\_message\_id*), sender of the original message.
    /// 
    /// *Example:* A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard.
    public var isSelective: Bool?

    public init(keyboard: [[KeyboardButton]], isResizeKeyboard: Bool? = nil, isOneTimeKeyboard: Bool? = nil, isSelective: Bool? = nil) {
        self.keyboard = keyboard
        self.isResizeKeyboard = isResizeKeyboard ?? false
        self.isOneTimeKeyboard = isOneTimeKeyboard ?? false
        self.isSelective = isSelective
    }

    private enum CodingKeys: String, CodingKey {
        case keyboard
        case isResizeKeyboard = "resize_keyboard"
        case isOneTimeKeyboard = "one_time_keyboard"
        case isSelective = "selective"
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        self.keyboard = try values.decode([[KeyboardButton]].self, forKey: .keyboard)
        self.isResizeKeyboard = try values.decodeIfPresent(Bool.self, forKey: .isResizeKeyboard) ?? false
        self.isOneTimeKeyboard = try values.decodeIfPresent(Bool.self, forKey: .isOneTimeKeyboard) ?? false
        self.isSelective = try values.decodeIfPresent(Bool.self, forKey: .isSelective)
    }
}

/// This object represents one button of the reply keyboard. For simple text buttons *String* can be used instead of this object to specify text of the button. Optional fields *request\_contact*, *request\_location*, and *request\_poll* are mutually exclusive.
///
/// [External Documentation](https://core.telegram.org/bots/api/#keyboardbutton)
public struct KeyboardButton: Codable {
    /// Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed
    public var text: String
    /// *Optional*. If *True*, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only
    public var isRequestContact: Bool?
    /// *Optional*. If *True*, the user's current location will be sent when the button is pressed. Available in private chats only
    public var isRequestLocation: Bool?
    /// This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#keyboardbuttonpolltype)
    public var requestPoll: KeyboardButtonPollType?

    public init(text: String, isRequestContact: Bool? = nil, isRequestLocation: Bool? = nil, requestPoll: KeyboardButtonPollType? = nil) {
        self.text = text
        self.isRequestContact = isRequestContact
        self.isRequestLocation = isRequestLocation
        self.requestPoll = requestPoll
    }

    private enum CodingKeys: String, CodingKey {
        case text
        case isRequestContact = "request_contact"
        case isRequestLocation = "request_location"
        case requestPoll = "request_poll"
    }
}

/// This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.
///
/// [External Documentation](https://core.telegram.org/bots/api/#keyboardbuttonpolltype)
public struct KeyboardButtonPollType: Codable {
    /// *Optional*. If *quiz* is passed, the user will be allowed to create only polls in the quiz mode. If *regular* is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type.
    public var type: String?

    public init(type: String? = nil) {
        self.type = type
    }
}

/// Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup)).
///
/// [External Documentation](https://core.telegram.org/bots/api/#replykeyboardremove)
public struct ReplyKeyboardRemove: Codable {
    /// Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use *one\_time\_keyboard* in [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup))
    public var isRemoveKeyboard: Bool
    /// *Optional*. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\_to\_message\_id*), sender of the original message.
    /// 
    /// *Example:* A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet.
    public var isSelective: Bool?

    public init(isRemoveKeyboard: Bool, isSelective: Bool? = nil) {
        self.isRemoveKeyboard = isRemoveKeyboard
        self.isSelective = isSelective
    }

    private enum CodingKeys: String, CodingKey {
        case isRemoveKeyboard = "remove_keyboard"
        case isSelective = "selective"
    }
}

/// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
public struct InlineKeyboardMarkup: Codable {
    /// Array of button rows, each represented by an Array of [InlineKeyboardButton](https://core.telegram.org/bots/api/#inlinekeyboardbutton) objects
    public var inlineKeyboard: [[InlineKeyboardButton]]

    public init(inlineKeyboard: [[InlineKeyboardButton]]) {
        self.inlineKeyboard = inlineKeyboard
    }

    private enum CodingKeys: String, CodingKey {
        case inlineKeyboard = "inline_keyboard"
    }
}

/// This object represents one button of an inline keyboard. You **must** use exactly one of the optional fields.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardbutton)
public struct InlineKeyboardButton: Codable {
    /// Label text on the button
    public var text: String
    /// *Optional*. HTTP or tg:// url to be opened when button is pressed
    public var url: String?
    /// This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the [Telegram Login Widget](https://core.telegram.org/widgets/login) when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in:
    /// 
    /// Telegram apps support these buttons as of [version 5.7](https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots).
    /// 
    /// Sample bot: [@discussbot](https://t.me/discussbot)
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#loginurl)
    public var loginURL: LoginURL?
    /// *Optional*. Data to be sent in a [callback query](https://core.telegram.org/bots/api/#callbackquery) to the bot when button is pressed, 1-64 bytes
    public var callbackData: String?
    /// *Optional*. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. Can be empty, in which case just the bot's username will be inserted.
    /// 
    /// **Note:** This offers an easy way for users to start using your bot in [inline mode](/bots/inline) when they are currently in a private chat with it. Especially useful when combined with [*switch\_pm…*](https://core.telegram.org/bots/api/#answerinlinequery) actions – in this case the user will be automatically returned to the chat they switched from, skipping the chat selection screen.
    public var switchInlineQuery: String?
    /// *Optional*. If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. Can be empty, in which case only the bot's username will be inserted.
    /// 
    /// This offers a quick way for the user to open your bot in inline mode in the same chat – good for selecting something from multiple options.
    public var switchInlineQueryCurrentChat: String?
    /// A placeholder, currently holds no information. Use [BotFather](https://t.me/botfather) to set up your game.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#callbackgame)
    public var callbackGame: AnyJSON?
    /// *Optional*. Specify True, to send a [Pay button](https://core.telegram.org/bots/api/#payments).
    /// 
    /// **NOTE:** This type of button **must** always be the first button in the first row.
    public var isPay: Bool?

    public init(text: String, url: String? = nil, loginURL: LoginURL? = nil, callbackData: String? = nil, switchInlineQuery: String? = nil, switchInlineQueryCurrentChat: String? = nil, callbackGame: AnyJSON? = nil, isPay: Bool? = nil) {
        self.text = text
        self.url = url
        self.loginURL = loginURL
        self.callbackData = callbackData
        self.switchInlineQuery = switchInlineQuery
        self.switchInlineQueryCurrentChat = switchInlineQueryCurrentChat
        self.callbackGame = callbackGame
        self.isPay = isPay
    }

    private enum CodingKeys: String, CodingKey {
        case text
        case url
        case loginURL = "login_url"
        case callbackData = "callback_data"
        case switchInlineQuery = "switch_inline_query"
        case switchInlineQueryCurrentChat = "switch_inline_query_current_chat"
        case callbackGame = "callback_game"
        case isPay = "pay"
    }
}

/// This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the [Telegram Login Widget](https://core.telegram.org/widgets/login) when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in:
/// 
/// Telegram apps support these buttons as of [version 5.7](https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots).
/// 
/// Sample bot: [@discussbot](https://t.me/discussbot)
///
/// [External Documentation](https://core.telegram.org/bots/api/#loginurl)
public struct LoginURL: Codable {
    /// An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).
    /// 
    /// **NOTE:** You **must** always check the hash of the received data to verify the authentication and the integrity of the data as described in [Checking authorization](https://core.telegram.org/widgets/login#checking-authorization).
    public var url: String
    /// *Optional*. New text of the button in forwarded messages.
    public var forwardText: String?
    /// *Optional*. Username of a bot, which will be used for user authorization. See [Setting up a bot](https://core.telegram.org/widgets/login#setting-up-a-bot) for more details. If not specified, the current bot's username will be assumed. The *url*'s domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot) for more details.
    public var botUsername: String?
    /// *Optional*. Pass True to request the permission for your bot to send messages to the user.
    public var isRequestWriteAccess: Bool?

    public init(url: String, forwardText: String? = nil, botUsername: String? = nil, isRequestWriteAccess: Bool? = nil) {
        self.url = url
        self.forwardText = forwardText
        self.botUsername = botUsername
        self.isRequestWriteAccess = isRequestWriteAccess
    }

    private enum CodingKeys: String, CodingKey {
        case url
        case forwardText = "forward_text"
        case botUsername = "bot_username"
        case isRequestWriteAccess = "request_write_access"
    }
}

/// This object represents an incoming callback query from a callback button in an [inline keyboard](/bots#inline-keyboards-and-on-the-fly-updating). If the button that originated the query was attached to a message sent by the bot, the field *message* will be present. If the button was attached to a message sent via the bot (in [inline mode](https://core.telegram.org/bots/api/#inline-mode)), the field *inline\_message\_id* will be present. Exactly one of the fields *data* or *game\_short\_name* will be present.
///
/// [External Documentation](https://core.telegram.org/bots/api/#callbackquery)
public struct CallbackQuery: Codable {
    /// Unique identifier for this query
    public var id: String
    /// This object represents a Telegram user or bot.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#user)
    public var from: User
    public var message: Message?
    /// *Optional*. Identifier of the message sent via the bot in inline mode, that originated the query.
    public var inlineMessageID: String?
    /// Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in [games](https://core.telegram.org/bots/api/#games).
    public var chatInstance: String
    /// *Optional*. Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field.
    public var data: String?
    /// *Optional*. Short name of a [Game](https://core.telegram.org/bots/api/#games) to be returned, serves as the unique identifier for the game
    public var gameShortName: String?

    public init(id: String, from: User, message: Message? = nil, inlineMessageID: String? = nil, chatInstance: String, data: String? = nil, gameShortName: String? = nil) {
        self.id = id
        self.from = from
        self.message = message
        self.inlineMessageID = inlineMessageID
        self.chatInstance = chatInstance
        self.data = data
        self.gameShortName = gameShortName
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case from
        case message
        case inlineMessageID = "inline_message_id"
        case chatInstance = "chat_instance"
        case data
        case gameShortName = "game_short_name"
    }
}

/// Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice [privacy mode](/bots#privacy-mode).
///
/// [External Documentation](https://core.telegram.org/bots/api/#forcereply)
public struct ForceReply: Codable {
    /// Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'
    public var isForceReply: Bool
    /// *Optional*. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\_to\_message\_id*), sender of the original message.
    public var isSelective: Bool?

    public init(isForceReply: Bool, isSelective: Bool? = nil) {
        self.isForceReply = isForceReply
        self.isSelective = isSelective
    }

    private enum CodingKeys: String, CodingKey {
        case isForceReply = "force_reply"
        case isSelective = "selective"
    }
}

/// This object represents a chat photo.
///
/// [External Documentation](https://core.telegram.org/bots/api/#chatphoto)
public struct ChatPhoto: Codable {
    /// File identifier of small (160x160) chat photo. This file\_id can be used only for photo download and only for as long as the photo is not changed.
    public var smallFileID: String
    /// Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    public var smallFileUniqueID: String
    /// File identifier of big (640x640) chat photo. This file\_id can be used only for photo download and only for as long as the photo is not changed.
    public var bigFileID: String
    /// Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    public var bigFileUniqueID: String

    public init(smallFileID: String, smallFileUniqueID: String, bigFileID: String, bigFileUniqueID: String) {
        self.smallFileID = smallFileID
        self.smallFileUniqueID = smallFileUniqueID
        self.bigFileID = bigFileID
        self.bigFileUniqueID = bigFileUniqueID
    }

    private enum CodingKeys: String, CodingKey {
        case smallFileID = "small_file_id"
        case smallFileUniqueID = "small_file_unique_id"
        case bigFileID = "big_file_id"
        case bigFileUniqueID = "big_file_unique_id"
    }
}

/// This object contains information about one member of a chat.
///
/// [External Documentation](https://core.telegram.org/bots/api/#chatmember)
public struct ChatMember: Codable {
    /// This object represents a Telegram user or bot.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#user)
    public var user: User
    /// The member's status in the chat. Can be “creator”, “administrator”, “member”, “restricted”, “left” or “kicked”
    public var status: Status
    /// *Optional*. Owner and administrators only. Custom title for this user
    public var customTitle: String?
    /// *Optional*. Owner and administrators only. True, if the user's presence in the chat is hidden
    public var isAnonymous: Bool?
    /// *Optional*. Administrators only. True, if the bot is allowed to edit administrator privileges of that user
    public var canBeEdited: Bool?
    /// *Optional*. Administrators only. True, if the administrator can post in the channel; channels only
    public var canPostMessages: Bool?
    /// *Optional*. Administrators only. True, if the administrator can edit messages of other users and can pin messages; channels only
    public var canEditMessages: Bool?
    /// *Optional*. Administrators only. True, if the administrator can delete messages of other users
    public var canDeleteMessages: Bool?
    /// *Optional*. Administrators only. True, if the administrator can restrict, ban or unban chat members
    public var canRestrictMembers: Bool?
    /// *Optional*. Administrators only. True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user)
    public var canPromoteMembers: Bool?
    /// *Optional*. Administrators and restricted only. True, if the user is allowed to change the chat title, photo and other settings
    public var canChangeInfo: Bool?
    /// *Optional*. Administrators and restricted only. True, if the user is allowed to invite new users to the chat
    public var canInviteUsers: Bool?
    /// *Optional*. Administrators and restricted only. True, if the user is allowed to pin messages; groups and supergroups only
    public var canPinMessages: Bool?
    /// *Optional*. Restricted only. True, if the user is a member of the chat at the moment of the request
    public var isMember: Bool?
    /// *Optional*. Restricted only. True, if the user is allowed to send text messages, contacts, locations and venues
    public var canSendMessages: Bool?
    /// *Optional*. Restricted only. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes
    public var canSendMediaMessages: Bool?
    /// *Optional*. Restricted only. True, if the user is allowed to send polls
    public var canSendPolls: Bool?
    /// *Optional*. Restricted only. True, if the user is allowed to send animations, games, stickers and use inline bots
    public var canSendOtherMessages: Bool?
    /// *Optional*. Restricted only. True, if the user is allowed to add web page previews to their messages
    public var canAddWebPagePreviews: Bool?
    /// *Optional*. Restricted and kicked only. Date when restrictions will be lifted for this user; unix time
    public var untilDate: Int?

    /// The member's status in the chat. Can be “creator”, “administrator”, “member”, “restricted”, “left” or “kicked”
    public enum Status: String, Codable, CaseIterable {
        case creator
        case administrator
        case member
        case restricted
        case left
        case kicked
    }

    public init(user: User, status: Status, customTitle: String? = nil, isAnonymous: Bool? = nil, canBeEdited: Bool? = nil, canPostMessages: Bool? = nil, canEditMessages: Bool? = nil, canDeleteMessages: Bool? = nil, canRestrictMembers: Bool? = nil, canPromoteMembers: Bool? = nil, canChangeInfo: Bool? = nil, canInviteUsers: Bool? = nil, canPinMessages: Bool? = nil, isMember: Bool? = nil, canSendMessages: Bool? = nil, canSendMediaMessages: Bool? = nil, canSendPolls: Bool? = nil, canSendOtherMessages: Bool? = nil, canAddWebPagePreviews: Bool? = nil, untilDate: Int? = nil) {
        self.user = user
        self.status = status
        self.customTitle = customTitle
        self.isAnonymous = isAnonymous
        self.canBeEdited = canBeEdited
        self.canPostMessages = canPostMessages
        self.canEditMessages = canEditMessages
        self.canDeleteMessages = canDeleteMessages
        self.canRestrictMembers = canRestrictMembers
        self.canPromoteMembers = canPromoteMembers
        self.canChangeInfo = canChangeInfo
        self.canInviteUsers = canInviteUsers
        self.canPinMessages = canPinMessages
        self.isMember = isMember
        self.canSendMessages = canSendMessages
        self.canSendMediaMessages = canSendMediaMessages
        self.canSendPolls = canSendPolls
        self.canSendOtherMessages = canSendOtherMessages
        self.canAddWebPagePreviews = canAddWebPagePreviews
        self.untilDate = untilDate
    }

    private enum CodingKeys: String, CodingKey {
        case user
        case status
        case customTitle = "custom_title"
        case isAnonymous = "is_anonymous"
        case canBeEdited = "can_be_edited"
        case canPostMessages = "can_post_messages"
        case canEditMessages = "can_edit_messages"
        case canDeleteMessages = "can_delete_messages"
        case canRestrictMembers = "can_restrict_members"
        case canPromoteMembers = "can_promote_members"
        case canChangeInfo = "can_change_info"
        case canInviteUsers = "can_invite_users"
        case canPinMessages = "can_pin_messages"
        case isMember = "is_member"
        case canSendMessages = "can_send_messages"
        case canSendMediaMessages = "can_send_media_messages"
        case canSendPolls = "can_send_polls"
        case canSendOtherMessages = "can_send_other_messages"
        case canAddWebPagePreviews = "can_add_web_page_previews"
        case untilDate = "until_date"
    }
}

/// Describes actions that a non-administrator user is allowed to take in a chat.
///
/// [External Documentation](https://core.telegram.org/bots/api/#chatpermissions)
public struct ChatPermissions: Codable {
    /// *Optional*. True, if the user is allowed to send text messages, contacts, locations and venues
    public var canSendMessages: Bool?
    /// *Optional*. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can\_send\_messages
    public var canSendMediaMessages: Bool?
    /// *Optional*. True, if the user is allowed to send polls, implies can\_send\_messages
    public var canSendPolls: Bool?
    /// *Optional*. True, if the user is allowed to send animations, games, stickers and use inline bots, implies can\_send\_media\_messages
    public var canSendOtherMessages: Bool?
    /// *Optional*. True, if the user is allowed to add web page previews to their messages, implies can\_send\_media\_messages
    public var canAddWebPagePreviews: Bool?
    /// *Optional*. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups
    public var canChangeInfo: Bool?
    /// *Optional*. True, if the user is allowed to invite new users to the chat
    public var canInviteUsers: Bool?
    /// *Optional*. True, if the user is allowed to pin messages. Ignored in public supergroups
    public var canPinMessages: Bool?

    public init(canSendMessages: Bool? = nil, canSendMediaMessages: Bool? = nil, canSendPolls: Bool? = nil, canSendOtherMessages: Bool? = nil, canAddWebPagePreviews: Bool? = nil, canChangeInfo: Bool? = nil, canInviteUsers: Bool? = nil, canPinMessages: Bool? = nil) {
        self.canSendMessages = canSendMessages
        self.canSendMediaMessages = canSendMediaMessages
        self.canSendPolls = canSendPolls
        self.canSendOtherMessages = canSendOtherMessages
        self.canAddWebPagePreviews = canAddWebPagePreviews
        self.canChangeInfo = canChangeInfo
        self.canInviteUsers = canInviteUsers
        self.canPinMessages = canPinMessages
    }

    private enum CodingKeys: String, CodingKey {
        case canSendMessages = "can_send_messages"
        case canSendMediaMessages = "can_send_media_messages"
        case canSendPolls = "can_send_polls"
        case canSendOtherMessages = "can_send_other_messages"
        case canAddWebPagePreviews = "can_add_web_page_previews"
        case canChangeInfo = "can_change_info"
        case canInviteUsers = "can_invite_users"
        case canPinMessages = "can_pin_messages"
    }
}

/// Represents a location to which a chat is connected.
///
/// [External Documentation](https://core.telegram.org/bots/api/#chatlocation)
public struct ChatLocation: Codable {
    /// This object represents a point on the map.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#location)
    public var location: Location
    /// Location address; 1-64 characters, as defined by the chat owner
    public var address: String

    public init(location: Location, address: String) {
        self.location = location
        self.address = address
    }
}

/// This object represents a bot command.
///
/// [External Documentation](https://core.telegram.org/bots/api/#botcommand)
public struct BotCommand: Codable {
    /// Text of the command, 1-32 characters. Can contain only lowercase English letters, digits and underscores.
    public var command: String
    /// Description of the command, 3-256 characters.
    public var description: String

    public init(command: String, description: String) {
        self.command = command
        self.description = description
    }
}

/// Contains information about why a request was unsuccessful.
///
/// [External Documentation](https://core.telegram.org/bots/api/#responseparameters)
public struct ResponseParameters: Codable {
    /// *Optional*. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
    public var migrateToChatID: Int?
    /// *Optional*. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated
    public var retryAfter: Int?

    public init(migrateToChatID: Int? = nil, retryAfter: Int? = nil) {
        self.migrateToChatID = migrateToChatID
        self.retryAfter = retryAfter
    }

    private enum CodingKeys: String, CodingKey {
        case migrateToChatID = "migrate_to_chat_id"
        case retryAfter = "retry_after"
    }
}

/// This object represents the content of a media message to be sent. It should be one of
///
/// [External Documentation](https://core.telegram.org/bots/api/#inputmedia)
public struct InputMedia: Codable {
    /// Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputmediaanimation)
    public var inputMediaAnimation: InputMediaAnimation?
    /// Represents a general file to be sent.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputmediadocument)
    public var inputMediaDocument: InputMediaDocument?
    /// Represents an audio file to be treated as music to be sent.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputmediaaudio)
    public var inputMediaAudio: InputMediaAudio?
    /// Represents a photo to be sent.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputmediaphoto)
    public var inputMediaPhoto: InputMediaPhoto?
    /// Represents a video to be sent.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputmediavideo)
    public var inputMediaVideo: InputMediaVideo?

    public init(inputMediaAnimation: InputMediaAnimation? = nil, inputMediaDocument: InputMediaDocument? = nil, inputMediaAudio: InputMediaAudio? = nil, inputMediaPhoto: InputMediaPhoto? = nil, inputMediaVideo: InputMediaVideo? = nil) {
        self.inputMediaAnimation = inputMediaAnimation
        self.inputMediaDocument = inputMediaDocument
        self.inputMediaAudio = inputMediaAudio
        self.inputMediaPhoto = inputMediaPhoto
        self.inputMediaVideo = inputMediaVideo
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        self.inputMediaAnimation = try? container.decode(InputMediaAnimation.self)
        self.inputMediaDocument = try? container.decode(InputMediaDocument.self)
        self.inputMediaAudio = try? container.decode(InputMediaAudio.self)
        self.inputMediaPhoto = try? container.decode(InputMediaPhoto.self)
        self.inputMediaVideo = try? container.decode(InputMediaVideo.self)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        if let value = inputMediaAnimation { try container.encode(value) }
        if let value = inputMediaDocument { try container.encode(value) }
        if let value = inputMediaAudio { try container.encode(value) }
        if let value = inputMediaPhoto { try container.encode(value) }
        if let value = inputMediaVideo { try container.encode(value) }
    }
}

/// Represents a photo to be sent.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inputmediaphoto)
public struct InputMediaPhoto: Codable {
    /// Type of the result, must be *photo*
    public var type: String
    /// File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
    public var media: String
    /// *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing
    public var caption: String?
    /// *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
    public var parseMode: String?
    /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
    public var captionEntities: [MessageEntity]?

    public init(type: String, media: String, caption: String? = nil, parseMode: String? = nil, captionEntities: [MessageEntity]? = nil) {
        self.type = type
        self.media = media
        self.caption = caption
        self.parseMode = parseMode
        self.captionEntities = captionEntities
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case media
        case caption
        case parseMode = "parse_mode"
        case captionEntities = "caption_entities"
    }
}

/// Represents a video to be sent.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inputmediavideo)
public struct InputMediaVideo: Codable {
    /// Type of the result, must be *video*
    public var type: String
    /// File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
    public var media: String
    /// *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
    public var thumb: Thumb?
    /// *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing
    public var caption: String?
    /// *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
    public var parseMode: String?
    /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
    public var captionEntities: [MessageEntity]?
    /// *Optional*. Video width
    public var width: Int?
    /// *Optional*. Video height
    public var height: Int?
    /// *Optional*. Video duration
    public var duration: Int?
    /// *Optional*. Pass *True*, if the uploaded video is suitable for streaming
    public var isSupportsStreaming: Bool?

    /// *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
    public struct Thumb: Codable {
        /// This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#inputfile)
        public var anyJSON: AnyJSON?
        public var string: String?

        public init(anyJSON: AnyJSON? = nil, string: String? = nil) {
            self.anyJSON = anyJSON
            self.string = string
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.anyJSON = try? container.decode(AnyJSON.self)
            self.string = try? container.decode(String.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = anyJSON { try container.encode(value) }
            if let value = string { try container.encode(value) }
        }
    }

    public init(type: String, media: String, thumb: Thumb? = nil, caption: String? = nil, parseMode: String? = nil, captionEntities: [MessageEntity]? = nil, width: Int? = nil, height: Int? = nil, duration: Int? = nil, isSupportsStreaming: Bool? = nil) {
        self.type = type
        self.media = media
        self.thumb = thumb
        self.caption = caption
        self.parseMode = parseMode
        self.captionEntities = captionEntities
        self.width = width
        self.height = height
        self.duration = duration
        self.isSupportsStreaming = isSupportsStreaming
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case media
        case thumb
        case caption
        case parseMode = "parse_mode"
        case captionEntities = "caption_entities"
        case width
        case height
        case duration
        case isSupportsStreaming = "supports_streaming"
    }
}

/// Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inputmediaanimation)
public struct InputMediaAnimation: Codable {
    /// Type of the result, must be *animation*
    public var type: String
    /// File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
    public var media: String
    /// *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
    public var thumb: Thumb?
    /// *Optional*. Caption of the animation to be sent, 0-1024 characters after entities parsing
    public var caption: String?
    /// *Optional*. Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
    public var parseMode: String?
    /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
    public var captionEntities: [MessageEntity]?
    /// *Optional*. Animation width
    public var width: Int?
    /// *Optional*. Animation height
    public var height: Int?
    /// *Optional*. Animation duration
    public var duration: Int?

    /// *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
    public struct Thumb: Codable {
        /// This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#inputfile)
        public var anyJSON: AnyJSON?
        public var string: String?

        public init(anyJSON: AnyJSON? = nil, string: String? = nil) {
            self.anyJSON = anyJSON
            self.string = string
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.anyJSON = try? container.decode(AnyJSON.self)
            self.string = try? container.decode(String.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = anyJSON { try container.encode(value) }
            if let value = string { try container.encode(value) }
        }
    }

    public init(type: String, media: String, thumb: Thumb? = nil, caption: String? = nil, parseMode: String? = nil, captionEntities: [MessageEntity]? = nil, width: Int? = nil, height: Int? = nil, duration: Int? = nil) {
        self.type = type
        self.media = media
        self.thumb = thumb
        self.caption = caption
        self.parseMode = parseMode
        self.captionEntities = captionEntities
        self.width = width
        self.height = height
        self.duration = duration
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case media
        case thumb
        case caption
        case parseMode = "parse_mode"
        case captionEntities = "caption_entities"
        case width
        case height
        case duration
    }
}

/// Represents an audio file to be treated as music to be sent.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inputmediaaudio)
public struct InputMediaAudio: Codable {
    /// Type of the result, must be *audio*
    public var type: String
    /// File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
    public var media: String
    /// *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
    public var thumb: Thumb?
    /// *Optional*. Caption of the audio to be sent, 0-1024 characters after entities parsing
    public var caption: String?
    /// *Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
    public var parseMode: String?
    /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
    public var captionEntities: [MessageEntity]?
    /// *Optional*. Duration of the audio in seconds
    public var duration: Int?
    /// *Optional*. Performer of the audio
    public var performer: String?
    /// *Optional*. Title of the audio
    public var title: String?

    /// *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
    public struct Thumb: Codable {
        /// This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#inputfile)
        public var anyJSON: AnyJSON?
        public var string: String?

        public init(anyJSON: AnyJSON? = nil, string: String? = nil) {
            self.anyJSON = anyJSON
            self.string = string
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.anyJSON = try? container.decode(AnyJSON.self)
            self.string = try? container.decode(String.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = anyJSON { try container.encode(value) }
            if let value = string { try container.encode(value) }
        }
    }

    public init(type: String, media: String, thumb: Thumb? = nil, caption: String? = nil, parseMode: String? = nil, captionEntities: [MessageEntity]? = nil, duration: Int? = nil, performer: String? = nil, title: String? = nil) {
        self.type = type
        self.media = media
        self.thumb = thumb
        self.caption = caption
        self.parseMode = parseMode
        self.captionEntities = captionEntities
        self.duration = duration
        self.performer = performer
        self.title = title
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case media
        case thumb
        case caption
        case parseMode = "parse_mode"
        case captionEntities = "caption_entities"
        case duration
        case performer
        case title
    }
}

/// Represents a general file to be sent.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inputmediadocument)
public struct InputMediaDocument: Codable {
    /// Type of the result, must be *document*
    public var type: String
    /// File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
    public var media: String
    /// *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
    public var thumb: Thumb?
    /// *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
    public var caption: String?
    /// *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
    public var parseMode: String?
    /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
    public var captionEntities: [MessageEntity]?
    /// *Optional*. Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always true, if the document is sent as part of an album.
    public var isDisableContentTypeDetection: Bool?

    /// *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
    public struct Thumb: Codable {
        /// This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.
        ///
        /// [External Documentation](https://core.telegram.org/bots/api/#inputfile)
        public var anyJSON: AnyJSON?
        public var string: String?

        public init(anyJSON: AnyJSON? = nil, string: String? = nil) {
            self.anyJSON = anyJSON
            self.string = string
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.anyJSON = try? container.decode(AnyJSON.self)
            self.string = try? container.decode(String.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = anyJSON { try container.encode(value) }
            if let value = string { try container.encode(value) }
        }
    }

    public init(type: String, media: String, thumb: Thumb? = nil, caption: String? = nil, parseMode: String? = nil, captionEntities: [MessageEntity]? = nil, isDisableContentTypeDetection: Bool? = nil) {
        self.type = type
        self.media = media
        self.thumb = thumb
        self.caption = caption
        self.parseMode = parseMode
        self.captionEntities = captionEntities
        self.isDisableContentTypeDetection = isDisableContentTypeDetection
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case media
        case thumb
        case caption
        case parseMode = "parse_mode"
        case captionEntities = "caption_entities"
        case isDisableContentTypeDetection = "disable_content_type_detection"
    }
}

/// This object represents a sticker.
///
/// [External Documentation](https://core.telegram.org/bots/api/#sticker)
public struct Sticker: Codable {
    /// Identifier for this file, which can be used to download or reuse the file
    public var fileID: String
    /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    public var fileUniqueID: String
    /// Sticker width
    public var width: Int
    /// Sticker height
    public var height: Int
    /// *True*, if the sticker is [animated](https://telegram.org/blog/animated-stickers)
    public var isAnimated: Bool
    /// This object represents one size of a photo or a [file](https://core.telegram.org/bots/api/#document) / [sticker](https://core.telegram.org/bots/api/#sticker) thumbnail.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#photosize)
    public var thumb: PhotoSize?
    /// *Optional*. Emoji associated with the sticker
    public var emoji: String?
    /// *Optional*. Name of the sticker set to which the sticker belongs
    public var setName: String?
    /// This object describes the position on faces where a mask should be placed by default.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#maskposition)
    public var maskPosition: MaskPosition?
    /// *Optional*. File size
    public var fileSize: Int?

    public init(fileID: String, fileUniqueID: String, width: Int, height: Int, isAnimated: Bool, thumb: PhotoSize? = nil, emoji: String? = nil, setName: String? = nil, maskPosition: MaskPosition? = nil, fileSize: Int? = nil) {
        self.fileID = fileID
        self.fileUniqueID = fileUniqueID
        self.width = width
        self.height = height
        self.isAnimated = isAnimated
        self.thumb = thumb
        self.emoji = emoji
        self.setName = setName
        self.maskPosition = maskPosition
        self.fileSize = fileSize
    }

    private enum CodingKeys: String, CodingKey {
        case fileID = "file_id"
        case fileUniqueID = "file_unique_id"
        case width
        case height
        case isAnimated = "is_animated"
        case thumb
        case emoji
        case setName = "set_name"
        case maskPosition = "mask_position"
        case fileSize = "file_size"
    }
}

/// This object represents a sticker set.
///
/// [External Documentation](https://core.telegram.org/bots/api/#stickerset)
public struct StickerSet: Codable {
    /// Sticker set name
    public var name: String
    /// Sticker set title
    public var title: String
    /// *True*, if the sticker set contains [animated stickers](https://telegram.org/blog/animated-stickers)
    public var isAnimated: Bool
    /// *True*, if the sticker set contains masks
    public var containsMasks: Bool
    /// List of all set stickers
    public var stickers: [Sticker]
    /// This object represents one size of a photo or a [file](https://core.telegram.org/bots/api/#document) / [sticker](https://core.telegram.org/bots/api/#sticker) thumbnail.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#photosize)
    public var thumb: PhotoSize?

    public init(name: String, title: String, isAnimated: Bool, containsMasks: Bool, stickers: [Sticker], thumb: PhotoSize? = nil) {
        self.name = name
        self.title = title
        self.isAnimated = isAnimated
        self.containsMasks = containsMasks
        self.stickers = stickers
        self.thumb = thumb
    }

    private enum CodingKeys: String, CodingKey {
        case name
        case title
        case isAnimated = "is_animated"
        case containsMasks = "contains_masks"
        case stickers
        case thumb
    }
}

/// This object describes the position on faces where a mask should be placed by default.
///
/// [External Documentation](https://core.telegram.org/bots/api/#maskposition)
public struct MaskPosition: Codable {
    /// The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”.
    public var point: Point
    /// Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position.
    public var xShift: Double
    /// Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position.
    public var yShift: Double
    /// Mask scaling coefficient. For example, 2.0 means double size.
    public var scale: Double

    /// The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”.
    public enum Point: String, Codable, CaseIterable {
        case forehead
        case eyes
        case mouth
        case chin
    }

    public init(point: Point, xShift: Double, yShift: Double, scale: Double) {
        self.point = point
        self.xShift = xShift
        self.yShift = yShift
        self.scale = scale
    }

    private enum CodingKeys: String, CodingKey {
        case point
        case xShift = "x_shift"
        case yShift = "y_shift"
        case scale
    }
}

/// This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inlinequery)
public struct InlineQuery: Codable {
    /// Unique identifier for this query
    public var id: String
    /// This object represents a Telegram user or bot.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#user)
    public var from: User
    /// This object represents a point on the map.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#location)
    public var location: Location?
    /// Text of the query (up to 256 characters)
    public var query: String
    /// Offset of the results to be returned, can be controlled by the bot
    public var offset: String

    public init(id: String, from: User, location: Location? = nil, query: String, offset: String) {
        self.id = id
        self.from = from
        self.location = location
        self.query = query
        self.offset = offset
    }
}

/// This object represents one result of an inline query. Telegram clients currently support results of the following 20 types:
///
/// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresult)
public struct InlineQueryResult: Codable {
    /// Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the audio.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultcachedaudio)
    public var inlineQueryResultCachedAudio: InlineQueryResultCachedAudio?
    /// Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the file.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultcacheddocument)
    public var inlineQueryResultCachedDocument: InlineQueryResultCachedDocument?
    /// Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with specified content instead of the animation.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultcachedgif)
    public var inlineQueryResultCachedGif: InlineQueryResultCachedGif?
    /// Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the animation.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultcachedmpeg4gif)
    public var inlineQueryResultCachedMpeg4Gif: InlineQueryResultCachedMpeg4Gif?
    /// Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the photo.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultcachedphoto)
    public var inlineQueryResultCachedPhoto: InlineQueryResultCachedPhoto?
    /// Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the sticker.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultcachedsticker)
    public var inlineQueryResultCachedSticker: InlineQueryResultCachedSticker?
    /// Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the video.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultcachedvideo)
    public var inlineQueryResultCachedVideo: InlineQueryResultCachedVideo?
    /// Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the voice message.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultcachedvoice)
    public var inlineQueryResultCachedVoice: InlineQueryResultCachedVoice?
    /// Represents a link to an article or web page.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultarticle)
    public var inlineQueryResultArticle: InlineQueryResultArticle?
    /// Represents a link to an MP3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the audio.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultaudio)
    public var inlineQueryResultAudio: InlineQueryResultAudio?
    /// Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the contact.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultcontact)
    public var inlineQueryResultContact: InlineQueryResultContact?
    /// Represents a [Game](https://core.telegram.org/bots/api/#games).
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultgame)
    public var inlineQueryResultGame: InlineQueryResultGame?
    /// Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the file. Currently, only **.PDF** and **.ZIP** files can be sent using this method.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultdocument)
    public var inlineQueryResultDocument: InlineQueryResultDocument?
    /// Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the animation.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultgif)
    public var inlineQueryResultGif: InlineQueryResultGif?
    /// Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the location.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultlocation)
    public var inlineQueryResultLocation: InlineQueryResultLocation?
    /// Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the animation.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultmpeg4gif)
    public var inlineQueryResultMpeg4Gif: InlineQueryResultMpeg4Gif?
    /// Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the photo.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultphoto)
    public var inlineQueryResultPhoto: InlineQueryResultPhoto?
    /// Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the venue.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultvenue)
    public var inlineQueryResultVenue: InlineQueryResultVenue?
    /// Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the video.
    /// 
    /// If an InlineQueryResultVideo message contains an embedded video (e.g., YouTube), you **must** replace its content using *input\_message\_content*.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultvideo)
    public var inlineQueryResultVideo: InlineQueryResultVideo?
    /// Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the the voice message.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultvoice)
    public var inlineQueryResultVoice: InlineQueryResultVoice?

    public init(inlineQueryResultCachedAudio: InlineQueryResultCachedAudio? = nil, inlineQueryResultCachedDocument: InlineQueryResultCachedDocument? = nil, inlineQueryResultCachedGif: InlineQueryResultCachedGif? = nil, inlineQueryResultCachedMpeg4Gif: InlineQueryResultCachedMpeg4Gif? = nil, inlineQueryResultCachedPhoto: InlineQueryResultCachedPhoto? = nil, inlineQueryResultCachedSticker: InlineQueryResultCachedSticker? = nil, inlineQueryResultCachedVideo: InlineQueryResultCachedVideo? = nil, inlineQueryResultCachedVoice: InlineQueryResultCachedVoice? = nil, inlineQueryResultArticle: InlineQueryResultArticle? = nil, inlineQueryResultAudio: InlineQueryResultAudio? = nil, inlineQueryResultContact: InlineQueryResultContact? = nil, inlineQueryResultGame: InlineQueryResultGame? = nil, inlineQueryResultDocument: InlineQueryResultDocument? = nil, inlineQueryResultGif: InlineQueryResultGif? = nil, inlineQueryResultLocation: InlineQueryResultLocation? = nil, inlineQueryResultMpeg4Gif: InlineQueryResultMpeg4Gif? = nil, inlineQueryResultPhoto: InlineQueryResultPhoto? = nil, inlineQueryResultVenue: InlineQueryResultVenue? = nil, inlineQueryResultVideo: InlineQueryResultVideo? = nil, inlineQueryResultVoice: InlineQueryResultVoice? = nil) {
        self.inlineQueryResultCachedAudio = inlineQueryResultCachedAudio
        self.inlineQueryResultCachedDocument = inlineQueryResultCachedDocument
        self.inlineQueryResultCachedGif = inlineQueryResultCachedGif
        self.inlineQueryResultCachedMpeg4Gif = inlineQueryResultCachedMpeg4Gif
        self.inlineQueryResultCachedPhoto = inlineQueryResultCachedPhoto
        self.inlineQueryResultCachedSticker = inlineQueryResultCachedSticker
        self.inlineQueryResultCachedVideo = inlineQueryResultCachedVideo
        self.inlineQueryResultCachedVoice = inlineQueryResultCachedVoice
        self.inlineQueryResultArticle = inlineQueryResultArticle
        self.inlineQueryResultAudio = inlineQueryResultAudio
        self.inlineQueryResultContact = inlineQueryResultContact
        self.inlineQueryResultGame = inlineQueryResultGame
        self.inlineQueryResultDocument = inlineQueryResultDocument
        self.inlineQueryResultGif = inlineQueryResultGif
        self.inlineQueryResultLocation = inlineQueryResultLocation
        self.inlineQueryResultMpeg4Gif = inlineQueryResultMpeg4Gif
        self.inlineQueryResultPhoto = inlineQueryResultPhoto
        self.inlineQueryResultVenue = inlineQueryResultVenue
        self.inlineQueryResultVideo = inlineQueryResultVideo
        self.inlineQueryResultVoice = inlineQueryResultVoice
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        self.inlineQueryResultCachedAudio = try? container.decode(InlineQueryResultCachedAudio.self)
        self.inlineQueryResultCachedDocument = try? container.decode(InlineQueryResultCachedDocument.self)
        self.inlineQueryResultCachedGif = try? container.decode(InlineQueryResultCachedGif.self)
        self.inlineQueryResultCachedMpeg4Gif = try? container.decode(InlineQueryResultCachedMpeg4Gif.self)
        self.inlineQueryResultCachedPhoto = try? container.decode(InlineQueryResultCachedPhoto.self)
        self.inlineQueryResultCachedSticker = try? container.decode(InlineQueryResultCachedSticker.self)
        self.inlineQueryResultCachedVideo = try? container.decode(InlineQueryResultCachedVideo.self)
        self.inlineQueryResultCachedVoice = try? container.decode(InlineQueryResultCachedVoice.self)
        self.inlineQueryResultArticle = try? container.decode(InlineQueryResultArticle.self)
        self.inlineQueryResultAudio = try? container.decode(InlineQueryResultAudio.self)
        self.inlineQueryResultContact = try? container.decode(InlineQueryResultContact.self)
        self.inlineQueryResultGame = try? container.decode(InlineQueryResultGame.self)
        self.inlineQueryResultDocument = try? container.decode(InlineQueryResultDocument.self)
        self.inlineQueryResultGif = try? container.decode(InlineQueryResultGif.self)
        self.inlineQueryResultLocation = try? container.decode(InlineQueryResultLocation.self)
        self.inlineQueryResultMpeg4Gif = try? container.decode(InlineQueryResultMpeg4Gif.self)
        self.inlineQueryResultPhoto = try? container.decode(InlineQueryResultPhoto.self)
        self.inlineQueryResultVenue = try? container.decode(InlineQueryResultVenue.self)
        self.inlineQueryResultVideo = try? container.decode(InlineQueryResultVideo.self)
        self.inlineQueryResultVoice = try? container.decode(InlineQueryResultVoice.self)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        if let value = inlineQueryResultCachedAudio { try container.encode(value) }
        if let value = inlineQueryResultCachedDocument { try container.encode(value) }
        if let value = inlineQueryResultCachedGif { try container.encode(value) }
        if let value = inlineQueryResultCachedMpeg4Gif { try container.encode(value) }
        if let value = inlineQueryResultCachedPhoto { try container.encode(value) }
        if let value = inlineQueryResultCachedSticker { try container.encode(value) }
        if let value = inlineQueryResultCachedVideo { try container.encode(value) }
        if let value = inlineQueryResultCachedVoice { try container.encode(value) }
        if let value = inlineQueryResultArticle { try container.encode(value) }
        if let value = inlineQueryResultAudio { try container.encode(value) }
        if let value = inlineQueryResultContact { try container.encode(value) }
        if let value = inlineQueryResultGame { try container.encode(value) }
        if let value = inlineQueryResultDocument { try container.encode(value) }
        if let value = inlineQueryResultGif { try container.encode(value) }
        if let value = inlineQueryResultLocation { try container.encode(value) }
        if let value = inlineQueryResultMpeg4Gif { try container.encode(value) }
        if let value = inlineQueryResultPhoto { try container.encode(value) }
        if let value = inlineQueryResultVenue { try container.encode(value) }
        if let value = inlineQueryResultVideo { try container.encode(value) }
        if let value = inlineQueryResultVoice { try container.encode(value) }
    }
}

/// Represents a link to an article or web page.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultarticle)
public struct InlineQueryResultArticle: Codable {
    /// Type of the result, must be *article*
    public var type: String
    /// Unique identifier for this result, 1-64 Bytes
    public var id: String
    /// Title of the result
    public var title: String
    /// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputmessagecontent)
    public var inputMessageContent: InputMessageContent
    /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
    public var replyMarkup: InlineKeyboardMarkup?
    /// *Optional*. URL of the result
    public var url: String?
    /// *Optional*. Pass *True*, if you don't want the URL to be shown in the message
    public var isHideURL: Bool?
    /// *Optional*. Short description of the result
    public var description: String?
    /// *Optional*. Url of the thumbnail for the result
    public var thumbURL: String?
    /// *Optional*. Thumbnail width
    public var thumbWidth: Int?
    /// *Optional*. Thumbnail height
    public var thumbHeight: Int?

    public init(type: String, id: String, title: String, inputMessageContent: InputMessageContent, replyMarkup: InlineKeyboardMarkup? = nil, url: String? = nil, isHideURL: Bool? = nil, description: String? = nil, thumbURL: String? = nil, thumbWidth: Int? = nil, thumbHeight: Int? = nil) {
        self.type = type
        self.id = id
        self.title = title
        self.inputMessageContent = inputMessageContent
        self.replyMarkup = replyMarkup
        self.url = url
        self.isHideURL = isHideURL
        self.description = description
        self.thumbURL = thumbURL
        self.thumbWidth = thumbWidth
        self.thumbHeight = thumbHeight
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case id
        case title
        case inputMessageContent = "input_message_content"
        case replyMarkup = "reply_markup"
        case url
        case isHideURL = "hide_url"
        case description
        case thumbURL = "thumb_url"
        case thumbWidth = "thumb_width"
        case thumbHeight = "thumb_height"
    }
}

/// Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the photo.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultphoto)
public struct InlineQueryResultPhoto: Codable {
    /// Type of the result, must be *photo*
    public var type: String
    /// Unique identifier for this result, 1-64 bytes
    public var id: String
    /// A valid URL of the photo. Photo must be in **jpeg** format. Photo size must not exceed 5MB
    public var photoURL: String
    /// URL of the thumbnail for the photo
    public var thumbURL: String
    /// *Optional*. Width of the photo
    public var photoWidth: Int?
    /// *Optional*. Height of the photo
    public var photoHeight: Int?
    /// *Optional*. Title for the result
    public var title: String?
    /// *Optional*. Short description of the result
    public var description: String?
    /// *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing
    public var caption: String?
    /// *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
    public var parseMode: String?
    /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
    public var captionEntities: [MessageEntity]?
    /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
    public var replyMarkup: InlineKeyboardMarkup?
    /// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputmessagecontent)
    public var inputMessageContent: InputMessageContent?

    public init(type: String, id: String, photoURL: String, thumbURL: String, photoWidth: Int? = nil, photoHeight: Int? = nil, title: String? = nil, description: String? = nil, caption: String? = nil, parseMode: String? = nil, captionEntities: [MessageEntity]? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.photoURL = photoURL
        self.thumbURL = thumbURL
        self.photoWidth = photoWidth
        self.photoHeight = photoHeight
        self.title = title
        self.description = description
        self.caption = caption
        self.parseMode = parseMode
        self.captionEntities = captionEntities
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case id
        case photoURL = "photo_url"
        case thumbURL = "thumb_url"
        case photoWidth = "photo_width"
        case photoHeight = "photo_height"
        case title
        case description
        case caption
        case parseMode = "parse_mode"
        case captionEntities = "caption_entities"
        case replyMarkup = "reply_markup"
        case inputMessageContent = "input_message_content"
    }
}

/// Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the animation.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultgif)
public struct InlineQueryResultGif: Codable {
    /// Type of the result, must be *gif*
    public var type: String
    /// Unique identifier for this result, 1-64 bytes
    public var id: String
    /// A valid URL for the GIF file. File size must not exceed 1MB
    public var gifURL: String
    /// *Optional*. Width of the GIF
    public var gifWidth: Int?
    /// *Optional*. Height of the GIF
    public var gifHeight: Int?
    /// *Optional*. Duration of the GIF
    public var gifDuration: Int?
    /// URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
    public var thumbURL: String
    /// *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”
    public var thumbMimeType: ThumbMimeType?
    /// *Optional*. Title for the result
    public var title: String?
    /// *Optional*. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
    public var caption: String?
    /// *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
    public var parseMode: String?
    /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
    public var captionEntities: [MessageEntity]?
    /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
    public var replyMarkup: InlineKeyboardMarkup?
    /// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputmessagecontent)
    public var inputMessageContent: InputMessageContent?

    /// *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”
    public enum ThumbMimeType: String, Codable, CaseIterable {
        case imageJpeg = "image/jpeg"
        case imageGif = "image/gif"
        case videoMp4 = "video/mp4"
    }

    public init(type: String, id: String, gifURL: String, gifWidth: Int? = nil, gifHeight: Int? = nil, gifDuration: Int? = nil, thumbURL: String, thumbMimeType: ThumbMimeType? = nil, title: String? = nil, caption: String? = nil, parseMode: String? = nil, captionEntities: [MessageEntity]? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.gifURL = gifURL
        self.gifWidth = gifWidth
        self.gifHeight = gifHeight
        self.gifDuration = gifDuration
        self.thumbURL = thumbURL
        self.thumbMimeType = thumbMimeType
        self.title = title
        self.caption = caption
        self.parseMode = parseMode
        self.captionEntities = captionEntities
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case id
        case gifURL = "gif_url"
        case gifWidth = "gif_width"
        case gifHeight = "gif_height"
        case gifDuration = "gif_duration"
        case thumbURL = "thumb_url"
        case thumbMimeType = "thumb_mime_type"
        case title
        case caption
        case parseMode = "parse_mode"
        case captionEntities = "caption_entities"
        case replyMarkup = "reply_markup"
        case inputMessageContent = "input_message_content"
    }
}

/// Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the animation.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultmpeg4gif)
public struct InlineQueryResultMpeg4Gif: Codable {
    /// Type of the result, must be *mpeg4\_gif*
    public var type: String
    /// Unique identifier for this result, 1-64 bytes
    public var id: String
    /// A valid URL for the MP4 file. File size must not exceed 1MB
    public var mpeg4URL: String
    /// *Optional*. Video width
    public var mpeg4Width: Int?
    /// *Optional*. Video height
    public var mpeg4Height: Int?
    /// *Optional*. Video duration
    public var mpeg4Duration: Int?
    /// URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
    public var thumbURL: String
    /// *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”
    public var thumbMimeType: ThumbMimeType?
    /// *Optional*. Title for the result
    public var title: String?
    /// *Optional*. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
    public var caption: String?
    /// *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
    public var parseMode: String?
    /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
    public var captionEntities: [MessageEntity]?
    /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
    public var replyMarkup: InlineKeyboardMarkup?
    /// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputmessagecontent)
    public var inputMessageContent: InputMessageContent?

    /// *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”
    public enum ThumbMimeType: String, Codable, CaseIterable {
        case imageJpeg = "image/jpeg"
        case imageGif = "image/gif"
        case videoMp4 = "video/mp4"
    }

    public init(type: String, id: String, mpeg4URL: String, mpeg4Width: Int? = nil, mpeg4Height: Int? = nil, mpeg4Duration: Int? = nil, thumbURL: String, thumbMimeType: ThumbMimeType? = nil, title: String? = nil, caption: String? = nil, parseMode: String? = nil, captionEntities: [MessageEntity]? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.mpeg4URL = mpeg4URL
        self.mpeg4Width = mpeg4Width
        self.mpeg4Height = mpeg4Height
        self.mpeg4Duration = mpeg4Duration
        self.thumbURL = thumbURL
        self.thumbMimeType = thumbMimeType
        self.title = title
        self.caption = caption
        self.parseMode = parseMode
        self.captionEntities = captionEntities
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case id
        case mpeg4URL = "mpeg4_url"
        case mpeg4Width = "mpeg4_width"
        case mpeg4Height = "mpeg4_height"
        case mpeg4Duration = "mpeg4_duration"
        case thumbURL = "thumb_url"
        case thumbMimeType = "thumb_mime_type"
        case title
        case caption
        case parseMode = "parse_mode"
        case captionEntities = "caption_entities"
        case replyMarkup = "reply_markup"
        case inputMessageContent = "input_message_content"
    }
}

/// Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the video.
/// 
/// If an InlineQueryResultVideo message contains an embedded video (e.g., YouTube), you **must** replace its content using *input\_message\_content*.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultvideo)
public struct InlineQueryResultVideo: Codable {
    /// Type of the result, must be *video*
    public var type: String
    /// Unique identifier for this result, 1-64 bytes
    public var id: String
    /// A valid URL for the embedded video player or video file
    public var videoURL: String
    /// Mime type of the content of video url, “text/html” or “video/mp4”
    public var mimeType: String
    /// URL of the thumbnail (jpeg only) for the video
    public var thumbURL: String
    /// Title for the result
    public var title: String
    /// *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing
    public var caption: String?
    /// *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
    public var parseMode: String?
    /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
    public var captionEntities: [MessageEntity]?
    /// *Optional*. Video width
    public var videoWidth: Int?
    /// *Optional*. Video height
    public var videoHeight: Int?
    /// *Optional*. Video duration in seconds
    public var videoDuration: Int?
    /// *Optional*. Short description of the result
    public var description: String?
    /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
    public var replyMarkup: InlineKeyboardMarkup?
    /// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputmessagecontent)
    public var inputMessageContent: InputMessageContent?

    public init(type: String, id: String, videoURL: String, mimeType: String, thumbURL: String, title: String, caption: String? = nil, parseMode: String? = nil, captionEntities: [MessageEntity]? = nil, videoWidth: Int? = nil, videoHeight: Int? = nil, videoDuration: Int? = nil, description: String? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.videoURL = videoURL
        self.mimeType = mimeType
        self.thumbURL = thumbURL
        self.title = title
        self.caption = caption
        self.parseMode = parseMode
        self.captionEntities = captionEntities
        self.videoWidth = videoWidth
        self.videoHeight = videoHeight
        self.videoDuration = videoDuration
        self.description = description
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case id
        case videoURL = "video_url"
        case mimeType = "mime_type"
        case thumbURL = "thumb_url"
        case title
        case caption
        case parseMode = "parse_mode"
        case captionEntities = "caption_entities"
        case videoWidth = "video_width"
        case videoHeight = "video_height"
        case videoDuration = "video_duration"
        case description
        case replyMarkup = "reply_markup"
        case inputMessageContent = "input_message_content"
    }
}

/// Represents a link to an MP3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the audio.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultaudio)
public struct InlineQueryResultAudio: Codable {
    /// Type of the result, must be *audio*
    public var type: String
    /// Unique identifier for this result, 1-64 bytes
    public var id: String
    /// A valid URL for the audio file
    public var audioURL: String
    /// Title
    public var title: String
    /// *Optional*. Caption, 0-1024 characters after entities parsing
    public var caption: String?
    /// *Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
    public var parseMode: String?
    /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
    public var captionEntities: [MessageEntity]?
    /// *Optional*. Performer
    public var performer: String?
    /// *Optional*. Audio duration in seconds
    public var audioDuration: Int?
    /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
    public var replyMarkup: InlineKeyboardMarkup?
    /// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputmessagecontent)
    public var inputMessageContent: InputMessageContent?

    public init(type: String, id: String, audioURL: String, title: String, caption: String? = nil, parseMode: String? = nil, captionEntities: [MessageEntity]? = nil, performer: String? = nil, audioDuration: Int? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.audioURL = audioURL
        self.title = title
        self.caption = caption
        self.parseMode = parseMode
        self.captionEntities = captionEntities
        self.performer = performer
        self.audioDuration = audioDuration
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case id
        case audioURL = "audio_url"
        case title
        case caption
        case parseMode = "parse_mode"
        case captionEntities = "caption_entities"
        case performer
        case audioDuration = "audio_duration"
        case replyMarkup = "reply_markup"
        case inputMessageContent = "input_message_content"
    }
}

/// Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the the voice message.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultvoice)
public struct InlineQueryResultVoice: Codable {
    /// Type of the result, must be *voice*
    public var type: String
    /// Unique identifier for this result, 1-64 bytes
    public var id: String
    /// A valid URL for the voice recording
    public var voiceURL: String
    /// Recording title
    public var title: String
    /// *Optional*. Caption, 0-1024 characters after entities parsing
    public var caption: String?
    /// *Optional*. Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
    public var parseMode: String?
    /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
    public var captionEntities: [MessageEntity]?
    /// *Optional*. Recording duration in seconds
    public var voiceDuration: Int?
    /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
    public var replyMarkup: InlineKeyboardMarkup?
    /// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputmessagecontent)
    public var inputMessageContent: InputMessageContent?

    public init(type: String, id: String, voiceURL: String, title: String, caption: String? = nil, parseMode: String? = nil, captionEntities: [MessageEntity]? = nil, voiceDuration: Int? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.voiceURL = voiceURL
        self.title = title
        self.caption = caption
        self.parseMode = parseMode
        self.captionEntities = captionEntities
        self.voiceDuration = voiceDuration
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case id
        case voiceURL = "voice_url"
        case title
        case caption
        case parseMode = "parse_mode"
        case captionEntities = "caption_entities"
        case voiceDuration = "voice_duration"
        case replyMarkup = "reply_markup"
        case inputMessageContent = "input_message_content"
    }
}

/// Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the file. Currently, only **.PDF** and **.ZIP** files can be sent using this method.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultdocument)
public struct InlineQueryResultDocument: Codable {
    /// Type of the result, must be *document*
    public var type: String
    /// Unique identifier for this result, 1-64 bytes
    public var id: String
    /// Title for the result
    public var title: String
    /// *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
    public var caption: String?
    /// *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
    public var parseMode: String?
    /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
    public var captionEntities: [MessageEntity]?
    /// A valid URL for the file
    public var documentURL: String
    /// Mime type of the content of the file, either “application/pdf” or “application/zip”
    public var mimeType: MimeType
    /// *Optional*. Short description of the result
    public var description: String?
    /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
    public var replyMarkup: InlineKeyboardMarkup?
    /// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputmessagecontent)
    public var inputMessageContent: InputMessageContent?
    /// *Optional*. URL of the thumbnail (jpeg only) for the file
    public var thumbURL: String?
    /// *Optional*. Thumbnail width
    public var thumbWidth: Int?
    /// *Optional*. Thumbnail height
    public var thumbHeight: Int?

    /// Mime type of the content of the file, either “application/pdf” or “application/zip”
    public enum MimeType: String, Codable, CaseIterable {
        case applicationPdf = "application/pdf"
        case applicationZip = "application/zip"
    }

    public init(type: String, id: String, title: String, caption: String? = nil, parseMode: String? = nil, captionEntities: [MessageEntity]? = nil, documentURL: String, mimeType: MimeType, description: String? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil, thumbURL: String? = nil, thumbWidth: Int? = nil, thumbHeight: Int? = nil) {
        self.type = type
        self.id = id
        self.title = title
        self.caption = caption
        self.parseMode = parseMode
        self.captionEntities = captionEntities
        self.documentURL = documentURL
        self.mimeType = mimeType
        self.description = description
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
        self.thumbURL = thumbURL
        self.thumbWidth = thumbWidth
        self.thumbHeight = thumbHeight
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case id
        case title
        case caption
        case parseMode = "parse_mode"
        case captionEntities = "caption_entities"
        case documentURL = "document_url"
        case mimeType = "mime_type"
        case description
        case replyMarkup = "reply_markup"
        case inputMessageContent = "input_message_content"
        case thumbURL = "thumb_url"
        case thumbWidth = "thumb_width"
        case thumbHeight = "thumb_height"
    }
}

/// Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the location.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultlocation)
public struct InlineQueryResultLocation: Codable {
    /// Type of the result, must be *location*
    public var type: String
    /// Unique identifier for this result, 1-64 Bytes
    public var id: String
    /// Location latitude in degrees
    public var latitude: Double
    /// Location longitude in degrees
    public var longitude: Double
    /// Location title
    public var title: String
    /// *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
    public var horizontalAccuracy: Double?
    /// *Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.
    public var livePeriod: Int?
    /// *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
    public var heading: Int?
    /// *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
    public var proximityAlertRadius: Int?
    /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
    public var replyMarkup: InlineKeyboardMarkup?
    /// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputmessagecontent)
    public var inputMessageContent: InputMessageContent?
    /// *Optional*. Url of the thumbnail for the result
    public var thumbURL: String?
    /// *Optional*. Thumbnail width
    public var thumbWidth: Int?
    /// *Optional*. Thumbnail height
    public var thumbHeight: Int?

    public init(type: String, id: String, latitude: Double, longitude: Double, title: String, horizontalAccuracy: Double? = nil, livePeriod: Int? = nil, heading: Int? = nil, proximityAlertRadius: Int? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil, thumbURL: String? = nil, thumbWidth: Int? = nil, thumbHeight: Int? = nil) {
        self.type = type
        self.id = id
        self.latitude = latitude
        self.longitude = longitude
        self.title = title
        self.horizontalAccuracy = horizontalAccuracy
        self.livePeriod = livePeriod
        self.heading = heading
        self.proximityAlertRadius = proximityAlertRadius
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
        self.thumbURL = thumbURL
        self.thumbWidth = thumbWidth
        self.thumbHeight = thumbHeight
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case id
        case latitude
        case longitude
        case title
        case horizontalAccuracy = "horizontal_accuracy"
        case livePeriod = "live_period"
        case heading
        case proximityAlertRadius = "proximity_alert_radius"
        case replyMarkup = "reply_markup"
        case inputMessageContent = "input_message_content"
        case thumbURL = "thumb_url"
        case thumbWidth = "thumb_width"
        case thumbHeight = "thumb_height"
    }
}

/// Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the venue.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultvenue)
public struct InlineQueryResultVenue: Codable {
    /// Type of the result, must be *venue*
    public var type: String
    /// Unique identifier for this result, 1-64 Bytes
    public var id: String
    /// Latitude of the venue location in degrees
    public var latitude: Double
    /// Longitude of the venue location in degrees
    public var longitude: Double
    /// Title of the venue
    public var title: String
    /// Address of the venue
    public var address: String
    /// *Optional*. Foursquare identifier of the venue if known
    public var foursquareID: String?
    /// *Optional*. Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
    public var foursquareType: String?
    /// *Optional*. Google Places identifier of the venue
    public var googlePlaceID: String?
    /// *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
    public var googlePlaceType: String?
    /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
    public var replyMarkup: InlineKeyboardMarkup?
    /// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputmessagecontent)
    public var inputMessageContent: InputMessageContent?
    /// *Optional*. Url of the thumbnail for the result
    public var thumbURL: String?
    /// *Optional*. Thumbnail width
    public var thumbWidth: Int?
    /// *Optional*. Thumbnail height
    public var thumbHeight: Int?

    public init(type: String, id: String, latitude: Double, longitude: Double, title: String, address: String, foursquareID: String? = nil, foursquareType: String? = nil, googlePlaceID: String? = nil, googlePlaceType: String? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil, thumbURL: String? = nil, thumbWidth: Int? = nil, thumbHeight: Int? = nil) {
        self.type = type
        self.id = id
        self.latitude = latitude
        self.longitude = longitude
        self.title = title
        self.address = address
        self.foursquareID = foursquareID
        self.foursquareType = foursquareType
        self.googlePlaceID = googlePlaceID
        self.googlePlaceType = googlePlaceType
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
        self.thumbURL = thumbURL
        self.thumbWidth = thumbWidth
        self.thumbHeight = thumbHeight
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case id
        case latitude
        case longitude
        case title
        case address
        case foursquareID = "foursquare_id"
        case foursquareType = "foursquare_type"
        case googlePlaceID = "google_place_id"
        case googlePlaceType = "google_place_type"
        case replyMarkup = "reply_markup"
        case inputMessageContent = "input_message_content"
        case thumbURL = "thumb_url"
        case thumbWidth = "thumb_width"
        case thumbHeight = "thumb_height"
    }
}

/// Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the contact.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultcontact)
public struct InlineQueryResultContact: Codable {
    /// Type of the result, must be *contact*
    public var type: String
    /// Unique identifier for this result, 1-64 Bytes
    public var id: String
    /// Contact's phone number
    public var phoneNumber: String
    /// Contact's first name
    public var firstName: String
    /// *Optional*. Contact's last name
    public var lastName: String?
    /// *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
    public var vcard: String?
    /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
    public var replyMarkup: InlineKeyboardMarkup?
    /// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputmessagecontent)
    public var inputMessageContent: InputMessageContent?
    /// *Optional*. Url of the thumbnail for the result
    public var thumbURL: String?
    /// *Optional*. Thumbnail width
    public var thumbWidth: Int?
    /// *Optional*. Thumbnail height
    public var thumbHeight: Int?

    public init(type: String, id: String, phoneNumber: String, firstName: String, lastName: String? = nil, vcard: String? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil, thumbURL: String? = nil, thumbWidth: Int? = nil, thumbHeight: Int? = nil) {
        self.type = type
        self.id = id
        self.phoneNumber = phoneNumber
        self.firstName = firstName
        self.lastName = lastName
        self.vcard = vcard
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
        self.thumbURL = thumbURL
        self.thumbWidth = thumbWidth
        self.thumbHeight = thumbHeight
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case id
        case phoneNumber = "phone_number"
        case firstName = "first_name"
        case lastName = "last_name"
        case vcard
        case replyMarkup = "reply_markup"
        case inputMessageContent = "input_message_content"
        case thumbURL = "thumb_url"
        case thumbWidth = "thumb_width"
        case thumbHeight = "thumb_height"
    }
}

/// Represents a [Game](https://core.telegram.org/bots/api/#games).
///
/// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultgame)
public struct InlineQueryResultGame: Codable {
    /// Type of the result, must be *game*
    public var type: String
    /// Unique identifier for this result, 1-64 bytes
    public var id: String
    /// Short name of the game
    public var gameShortName: String
    /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
    public var replyMarkup: InlineKeyboardMarkup?

    public init(type: String, id: String, gameShortName: String, replyMarkup: InlineKeyboardMarkup? = nil) {
        self.type = type
        self.id = id
        self.gameShortName = gameShortName
        self.replyMarkup = replyMarkup
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case id
        case gameShortName = "game_short_name"
        case replyMarkup = "reply_markup"
    }
}

/// Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the photo.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultcachedphoto)
public struct InlineQueryResultCachedPhoto: Codable {
    /// Type of the result, must be *photo*
    public var type: String
    /// Unique identifier for this result, 1-64 bytes
    public var id: String
    /// A valid file identifier of the photo
    public var photoFileID: String
    /// *Optional*. Title for the result
    public var title: String?
    /// *Optional*. Short description of the result
    public var description: String?
    /// *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing
    public var caption: String?
    /// *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
    public var parseMode: String?
    /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
    public var captionEntities: [MessageEntity]?
    /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
    public var replyMarkup: InlineKeyboardMarkup?
    /// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputmessagecontent)
    public var inputMessageContent: InputMessageContent?

    public init(type: String, id: String, photoFileID: String, title: String? = nil, description: String? = nil, caption: String? = nil, parseMode: String? = nil, captionEntities: [MessageEntity]? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.photoFileID = photoFileID
        self.title = title
        self.description = description
        self.caption = caption
        self.parseMode = parseMode
        self.captionEntities = captionEntities
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case id
        case photoFileID = "photo_file_id"
        case title
        case description
        case caption
        case parseMode = "parse_mode"
        case captionEntities = "caption_entities"
        case replyMarkup = "reply_markup"
        case inputMessageContent = "input_message_content"
    }
}

/// Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with specified content instead of the animation.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultcachedgif)
public struct InlineQueryResultCachedGif: Codable {
    /// Type of the result, must be *gif*
    public var type: String
    /// Unique identifier for this result, 1-64 bytes
    public var id: String
    /// A valid file identifier for the GIF file
    public var gifFileID: String
    /// *Optional*. Title for the result
    public var title: String?
    /// *Optional*. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
    public var caption: String?
    /// *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
    public var parseMode: String?
    /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
    public var captionEntities: [MessageEntity]?
    /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
    public var replyMarkup: InlineKeyboardMarkup?
    /// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputmessagecontent)
    public var inputMessageContent: InputMessageContent?

    public init(type: String, id: String, gifFileID: String, title: String? = nil, caption: String? = nil, parseMode: String? = nil, captionEntities: [MessageEntity]? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.gifFileID = gifFileID
        self.title = title
        self.caption = caption
        self.parseMode = parseMode
        self.captionEntities = captionEntities
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case id
        case gifFileID = "gif_file_id"
        case title
        case caption
        case parseMode = "parse_mode"
        case captionEntities = "caption_entities"
        case replyMarkup = "reply_markup"
        case inputMessageContent = "input_message_content"
    }
}

/// Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the animation.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultcachedmpeg4gif)
public struct InlineQueryResultCachedMpeg4Gif: Codable {
    /// Type of the result, must be *mpeg4\_gif*
    public var type: String
    /// Unique identifier for this result, 1-64 bytes
    public var id: String
    /// A valid file identifier for the MP4 file
    public var mpeg4FileID: String
    /// *Optional*. Title for the result
    public var title: String?
    /// *Optional*. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
    public var caption: String?
    /// *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
    public var parseMode: String?
    /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
    public var captionEntities: [MessageEntity]?
    /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
    public var replyMarkup: InlineKeyboardMarkup?
    /// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputmessagecontent)
    public var inputMessageContent: InputMessageContent?

    public init(type: String, id: String, mpeg4FileID: String, title: String? = nil, caption: String? = nil, parseMode: String? = nil, captionEntities: [MessageEntity]? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.mpeg4FileID = mpeg4FileID
        self.title = title
        self.caption = caption
        self.parseMode = parseMode
        self.captionEntities = captionEntities
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case id
        case mpeg4FileID = "mpeg4_file_id"
        case title
        case caption
        case parseMode = "parse_mode"
        case captionEntities = "caption_entities"
        case replyMarkup = "reply_markup"
        case inputMessageContent = "input_message_content"
    }
}

/// Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the sticker.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultcachedsticker)
public struct InlineQueryResultCachedSticker: Codable {
    /// Type of the result, must be *sticker*
    public var type: String
    /// Unique identifier for this result, 1-64 bytes
    public var id: String
    /// A valid file identifier of the sticker
    public var stickerFileID: String
    /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
    public var replyMarkup: InlineKeyboardMarkup?
    /// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputmessagecontent)
    public var inputMessageContent: InputMessageContent?

    public init(type: String, id: String, stickerFileID: String, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.stickerFileID = stickerFileID
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case id
        case stickerFileID = "sticker_file_id"
        case replyMarkup = "reply_markup"
        case inputMessageContent = "input_message_content"
    }
}

/// Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the file.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultcacheddocument)
public struct InlineQueryResultCachedDocument: Codable {
    /// Type of the result, must be *document*
    public var type: String
    /// Unique identifier for this result, 1-64 bytes
    public var id: String
    /// Title for the result
    public var title: String
    /// A valid file identifier for the file
    public var documentFileID: String
    /// *Optional*. Short description of the result
    public var description: String?
    /// *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
    public var caption: String?
    /// *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
    public var parseMode: String?
    /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
    public var captionEntities: [MessageEntity]?
    /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
    public var replyMarkup: InlineKeyboardMarkup?
    /// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputmessagecontent)
    public var inputMessageContent: InputMessageContent?

    public init(type: String, id: String, title: String, documentFileID: String, description: String? = nil, caption: String? = nil, parseMode: String? = nil, captionEntities: [MessageEntity]? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.title = title
        self.documentFileID = documentFileID
        self.description = description
        self.caption = caption
        self.parseMode = parseMode
        self.captionEntities = captionEntities
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case id
        case title
        case documentFileID = "document_file_id"
        case description
        case caption
        case parseMode = "parse_mode"
        case captionEntities = "caption_entities"
        case replyMarkup = "reply_markup"
        case inputMessageContent = "input_message_content"
    }
}

/// Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the video.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultcachedvideo)
public struct InlineQueryResultCachedVideo: Codable {
    /// Type of the result, must be *video*
    public var type: String
    /// Unique identifier for this result, 1-64 bytes
    public var id: String
    /// A valid file identifier for the video file
    public var videoFileID: String
    /// Title for the result
    public var title: String
    /// *Optional*. Short description of the result
    public var description: String?
    /// *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing
    public var caption: String?
    /// *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
    public var parseMode: String?
    /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
    public var captionEntities: [MessageEntity]?
    /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
    public var replyMarkup: InlineKeyboardMarkup?
    /// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputmessagecontent)
    public var inputMessageContent: InputMessageContent?

    public init(type: String, id: String, videoFileID: String, title: String, description: String? = nil, caption: String? = nil, parseMode: String? = nil, captionEntities: [MessageEntity]? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.videoFileID = videoFileID
        self.title = title
        self.description = description
        self.caption = caption
        self.parseMode = parseMode
        self.captionEntities = captionEntities
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case id
        case videoFileID = "video_file_id"
        case title
        case description
        case caption
        case parseMode = "parse_mode"
        case captionEntities = "caption_entities"
        case replyMarkup = "reply_markup"
        case inputMessageContent = "input_message_content"
    }
}

/// Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the voice message.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultcachedvoice)
public struct InlineQueryResultCachedVoice: Codable {
    /// Type of the result, must be *voice*
    public var type: String
    /// Unique identifier for this result, 1-64 bytes
    public var id: String
    /// A valid file identifier for the voice message
    public var voiceFileID: String
    /// Voice message title
    public var title: String
    /// *Optional*. Caption, 0-1024 characters after entities parsing
    public var caption: String?
    /// *Optional*. Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
    public var parseMode: String?
    /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
    public var captionEntities: [MessageEntity]?
    /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
    public var replyMarkup: InlineKeyboardMarkup?
    /// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputmessagecontent)
    public var inputMessageContent: InputMessageContent?

    public init(type: String, id: String, voiceFileID: String, title: String, caption: String? = nil, parseMode: String? = nil, captionEntities: [MessageEntity]? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.voiceFileID = voiceFileID
        self.title = title
        self.caption = caption
        self.parseMode = parseMode
        self.captionEntities = captionEntities
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case id
        case voiceFileID = "voice_file_id"
        case title
        case caption
        case parseMode = "parse_mode"
        case captionEntities = "caption_entities"
        case replyMarkup = "reply_markup"
        case inputMessageContent = "input_message_content"
    }
}

/// Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the audio.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inlinequeryresultcachedaudio)
public struct InlineQueryResultCachedAudio: Codable {
    /// Type of the result, must be *audio*
    public var type: String
    /// Unique identifier for this result, 1-64 bytes
    public var id: String
    /// A valid file identifier for the audio file
    public var audioFileID: String
    /// *Optional*. Caption, 0-1024 characters after entities parsing
    public var caption: String?
    /// *Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
    public var parseMode: String?
    /// *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
    public var captionEntities: [MessageEntity]?
    /// This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inlinekeyboardmarkup)
    public var replyMarkup: InlineKeyboardMarkup?
    /// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputmessagecontent)
    public var inputMessageContent: InputMessageContent?

    public init(type: String, id: String, audioFileID: String, caption: String? = nil, parseMode: String? = nil, captionEntities: [MessageEntity]? = nil, replyMarkup: InlineKeyboardMarkup? = nil, inputMessageContent: InputMessageContent? = nil) {
        self.type = type
        self.id = id
        self.audioFileID = audioFileID
        self.caption = caption
        self.parseMode = parseMode
        self.captionEntities = captionEntities
        self.replyMarkup = replyMarkup
        self.inputMessageContent = inputMessageContent
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case id
        case audioFileID = "audio_file_id"
        case caption
        case parseMode = "parse_mode"
        case captionEntities = "caption_entities"
        case replyMarkup = "reply_markup"
        case inputMessageContent = "input_message_content"
    }
}

/// This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
///
/// [External Documentation](https://core.telegram.org/bots/api/#inputmessagecontent)
public struct InputMessageContent: Codable {
    /// Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a text message to be sent as the result of an inline query.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputtextmessagecontent)
    public var inputTextMessageContent: InputTextMessageContent?
    /// Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a location message to be sent as the result of an inline query.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputlocationmessagecontent)
    public var inputLocationMessageContent: InputLocationMessageContent?
    /// Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a venue message to be sent as the result of an inline query.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputvenuemessagecontent)
    public var inputVenueMessageContent: InputVenueMessageContent?
    /// Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a contact message to be sent as the result of an inline query.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#inputcontactmessagecontent)
    public var inputContactMessageContent: InputContactMessageContent?

    public init(inputTextMessageContent: InputTextMessageContent? = nil, inputLocationMessageContent: InputLocationMessageContent? = nil, inputVenueMessageContent: InputVenueMessageContent? = nil, inputContactMessageContent: InputContactMessageContent? = nil) {
        self.inputTextMessageContent = inputTextMessageContent
        self.inputLocationMessageContent = inputLocationMessageContent
        self.inputVenueMessageContent = inputVenueMessageContent
        self.inputContactMessageContent = inputContactMessageContent
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        self.inputTextMessageContent = try? container.decode(InputTextMessageContent.self)
        self.inputLocationMessageContent = try? container.decode(InputLocationMessageContent.self)
        self.inputVenueMessageContent = try? container.decode(InputVenueMessageContent.self)
        self.inputContactMessageContent = try? container.decode(InputContactMessageContent.self)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        if let value = inputTextMessageContent { try container.encode(value) }
        if let value = inputLocationMessageContent { try container.encode(value) }
        if let value = inputVenueMessageContent { try container.encode(value) }
        if let value = inputContactMessageContent { try container.encode(value) }
    }
}

/// Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a text message to be sent as the result of an inline query.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inputtextmessagecontent)
public struct InputTextMessageContent: Codable {
    /// Text of the message to be sent, 1-4096 characters
    public var messageText: String
    /// *Optional*. Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
    public var parseMode: String?
    /// *Optional*. List of special entities that appear in message text, which can be specified instead of *parse\_mode*
    public var entities: [MessageEntity]?
    /// *Optional*. Disables link previews for links in the sent message
    public var isDisableWebPagePreview: Bool?

    public init(messageText: String, parseMode: String? = nil, entities: [MessageEntity]? = nil, isDisableWebPagePreview: Bool? = nil) {
        self.messageText = messageText
        self.parseMode = parseMode
        self.entities = entities
        self.isDisableWebPagePreview = isDisableWebPagePreview
    }

    private enum CodingKeys: String, CodingKey {
        case messageText = "message_text"
        case parseMode = "parse_mode"
        case entities
        case isDisableWebPagePreview = "disable_web_page_preview"
    }
}

/// Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a location message to be sent as the result of an inline query.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inputlocationmessagecontent)
public struct InputLocationMessageContent: Codable {
    /// Latitude of the location in degrees
    public var latitude: Double
    /// Longitude of the location in degrees
    public var longitude: Double
    /// *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
    public var horizontalAccuracy: Double?
    /// *Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.
    public var livePeriod: Int?
    /// *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
    public var heading: Int?
    /// *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
    public var proximityAlertRadius: Int?

    public init(latitude: Double, longitude: Double, horizontalAccuracy: Double? = nil, livePeriod: Int? = nil, heading: Int? = nil, proximityAlertRadius: Int? = nil) {
        self.latitude = latitude
        self.longitude = longitude
        self.horizontalAccuracy = horizontalAccuracy
        self.livePeriod = livePeriod
        self.heading = heading
        self.proximityAlertRadius = proximityAlertRadius
    }

    private enum CodingKeys: String, CodingKey {
        case latitude
        case longitude
        case horizontalAccuracy = "horizontal_accuracy"
        case livePeriod = "live_period"
        case heading
        case proximityAlertRadius = "proximity_alert_radius"
    }
}

/// Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a venue message to be sent as the result of an inline query.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inputvenuemessagecontent)
public struct InputVenueMessageContent: Codable {
    /// Latitude of the venue in degrees
    public var latitude: Double
    /// Longitude of the venue in degrees
    public var longitude: Double
    /// Name of the venue
    public var title: String
    /// Address of the venue
    public var address: String
    /// *Optional*. Foursquare identifier of the venue, if known
    public var foursquareID: String?
    /// *Optional*. Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
    public var foursquareType: String?
    /// *Optional*. Google Places identifier of the venue
    public var googlePlaceID: String?
    /// *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
    public var googlePlaceType: String?

    public init(latitude: Double, longitude: Double, title: String, address: String, foursquareID: String? = nil, foursquareType: String? = nil, googlePlaceID: String? = nil, googlePlaceType: String? = nil) {
        self.latitude = latitude
        self.longitude = longitude
        self.title = title
        self.address = address
        self.foursquareID = foursquareID
        self.foursquareType = foursquareType
        self.googlePlaceID = googlePlaceID
        self.googlePlaceType = googlePlaceType
    }

    private enum CodingKeys: String, CodingKey {
        case latitude
        case longitude
        case title
        case address
        case foursquareID = "foursquare_id"
        case foursquareType = "foursquare_type"
        case googlePlaceID = "google_place_id"
        case googlePlaceType = "google_place_type"
    }
}

/// Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a contact message to be sent as the result of an inline query.
///
/// [External Documentation](https://core.telegram.org/bots/api/#inputcontactmessagecontent)
public struct InputContactMessageContent: Codable {
    /// Contact's phone number
    public var phoneNumber: String
    /// Contact's first name
    public var firstName: String
    /// *Optional*. Contact's last name
    public var lastName: String?
    /// *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
    public var vcard: String?

    public init(phoneNumber: String, firstName: String, lastName: String? = nil, vcard: String? = nil) {
        self.phoneNumber = phoneNumber
        self.firstName = firstName
        self.lastName = lastName
        self.vcard = vcard
    }

    private enum CodingKeys: String, CodingKey {
        case phoneNumber = "phone_number"
        case firstName = "first_name"
        case lastName = "last_name"
        case vcard
    }
}

/// Represents a [result](https://core.telegram.org/bots/api/#inlinequeryresult) of an inline query that was chosen by the user and sent to their chat partner.
///
/// [External Documentation](https://core.telegram.org/bots/api/#choseninlineresult)
public struct ChosenInlineResult: Codable {
    /// The unique identifier for the result that was chosen
    public var resultID: String
    /// This object represents a Telegram user or bot.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#user)
    public var from: User
    /// This object represents a point on the map.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#location)
    public var location: Location?
    /// *Optional*. Identifier of the sent inline message. Available only if there is an [inline keyboard](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) attached to the message. Will be also received in [callback queries](https://core.telegram.org/bots/api/#callbackquery) and can be used to [edit](https://core.telegram.org/bots/api/#updating-messages) the message.
    public var inlineMessageID: String?
    /// The query that was used to obtain the result
    public var query: String

    public init(resultID: String, from: User, location: Location? = nil, inlineMessageID: String? = nil, query: String) {
        self.resultID = resultID
        self.from = from
        self.location = location
        self.inlineMessageID = inlineMessageID
        self.query = query
    }

    private enum CodingKeys: String, CodingKey {
        case resultID = "result_id"
        case from
        case location
        case inlineMessageID = "inline_message_id"
        case query
    }
}

/// This object represents a portion of the price for goods or services.
///
/// [External Documentation](https://core.telegram.org/bots/api/#labeledprice)
public struct LabeledPrice: Codable {
    /// Portion label
    public var label: String
    /// Price of the product in the *smallest units* of the [currency](/bots/payments#supported-currencies) (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
    public var amount: Int

    public init(label: String, amount: Int) {
        self.label = label
        self.amount = amount
    }
}

/// This object contains basic information about an invoice.
///
/// [External Documentation](https://core.telegram.org/bots/api/#invoice)
public struct Invoice: Codable {
    /// Product name
    public var title: String
    /// Product description
    public var description: String
    /// Unique bot deep-linking parameter that can be used to generate this invoice
    public var startParameter: String
    /// Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
    public var currency: String
    /// Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
    public var totalAmount: Int

    public init(title: String, description: String, startParameter: String, currency: String, totalAmount: Int) {
        self.title = title
        self.description = description
        self.startParameter = startParameter
        self.currency = currency
        self.totalAmount = totalAmount
    }

    private enum CodingKeys: String, CodingKey {
        case title
        case description
        case startParameter = "start_parameter"
        case currency
        case totalAmount = "total_amount"
    }
}

/// This object represents a shipping address.
///
/// [External Documentation](https://core.telegram.org/bots/api/#shippingaddress)
public struct ShippingAddress: Codable {
    /// ISO 3166-1 alpha-2 country code
    public var countryCode: String
    /// State, if applicable
    public var state: String
    /// City
    public var city: String
    /// First line for the address
    public var streetLine1: String
    /// Second line for the address
    public var streetLine2: String
    /// Address post code
    public var postCode: String

    public init(countryCode: String, state: String, city: String, streetLine1: String, streetLine2: String, postCode: String) {
        self.countryCode = countryCode
        self.state = state
        self.city = city
        self.streetLine1 = streetLine1
        self.streetLine2 = streetLine2
        self.postCode = postCode
    }

    private enum CodingKeys: String, CodingKey {
        case countryCode = "country_code"
        case state
        case city
        case streetLine1 = "street_line1"
        case streetLine2 = "street_line2"
        case postCode = "post_code"
    }
}

/// This object represents information about an order.
///
/// [External Documentation](https://core.telegram.org/bots/api/#orderinfo)
public struct OrderInfo: Codable {
    /// *Optional*. User name
    public var name: String?
    /// *Optional*. User's phone number
    public var phoneNumber: String?
    /// *Optional*. User email
    public var email: String?
    /// This object represents a shipping address.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#shippingaddress)
    public var shippingAddress: ShippingAddress?

    public init(name: String? = nil, phoneNumber: String? = nil, email: String? = nil, shippingAddress: ShippingAddress? = nil) {
        self.name = name
        self.phoneNumber = phoneNumber
        self.email = email
        self.shippingAddress = shippingAddress
    }

    private enum CodingKeys: String, CodingKey {
        case name
        case phoneNumber = "phone_number"
        case email
        case shippingAddress = "shipping_address"
    }
}

/// This object represents one shipping option.
///
/// [External Documentation](https://core.telegram.org/bots/api/#shippingoption)
public struct ShippingOption: Codable {
    /// Shipping option identifier
    public var id: String
    /// Option title
    public var title: String
    /// List of price portions
    public var prices: [LabeledPrice]

    public init(id: String, title: String, prices: [LabeledPrice]) {
        self.id = id
        self.title = title
        self.prices = prices
    }
}

/// This object contains basic information about a successful payment.
///
/// [External Documentation](https://core.telegram.org/bots/api/#successfulpayment)
public struct SuccessfulPayment: Codable {
    /// Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
    public var currency: String
    /// Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
    public var totalAmount: Int
    /// Bot specified invoice payload
    public var invoicePayload: String
    /// *Optional*. Identifier of the shipping option chosen by the user
    public var shippingOptionID: String?
    /// This object represents information about an order.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#orderinfo)
    public var orderInfo: OrderInfo?
    /// Telegram payment identifier
    public var telegramPaymentChargeID: String
    /// Provider payment identifier
    public var providerPaymentChargeID: String

    public init(currency: String, totalAmount: Int, invoicePayload: String, shippingOptionID: String? = nil, orderInfo: OrderInfo? = nil, telegramPaymentChargeID: String, providerPaymentChargeID: String) {
        self.currency = currency
        self.totalAmount = totalAmount
        self.invoicePayload = invoicePayload
        self.shippingOptionID = shippingOptionID
        self.orderInfo = orderInfo
        self.telegramPaymentChargeID = telegramPaymentChargeID
        self.providerPaymentChargeID = providerPaymentChargeID
    }

    private enum CodingKeys: String, CodingKey {
        case currency
        case totalAmount = "total_amount"
        case invoicePayload = "invoice_payload"
        case shippingOptionID = "shipping_option_id"
        case orderInfo = "order_info"
        case telegramPaymentChargeID = "telegram_payment_charge_id"
        case providerPaymentChargeID = "provider_payment_charge_id"
    }
}

/// This object contains information about an incoming shipping query.
///
/// [External Documentation](https://core.telegram.org/bots/api/#shippingquery)
public struct ShippingQuery: Codable {
    /// Unique query identifier
    public var id: String
    /// This object represents a Telegram user or bot.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#user)
    public var from: User
    /// Bot specified invoice payload
    public var invoicePayload: String
    /// This object represents a shipping address.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#shippingaddress)
    public var shippingAddress: ShippingAddress

    public init(id: String, from: User, invoicePayload: String, shippingAddress: ShippingAddress) {
        self.id = id
        self.from = from
        self.invoicePayload = invoicePayload
        self.shippingAddress = shippingAddress
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case from
        case invoicePayload = "invoice_payload"
        case shippingAddress = "shipping_address"
    }
}

/// This object contains information about an incoming pre-checkout query.
///
/// [External Documentation](https://core.telegram.org/bots/api/#precheckoutquery)
public struct PreCheckoutQuery: Codable {
    /// Unique query identifier
    public var id: String
    /// This object represents a Telegram user or bot.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#user)
    public var from: User
    /// Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
    public var currency: String
    /// Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
    public var totalAmount: Int
    /// Bot specified invoice payload
    public var invoicePayload: String
    /// *Optional*. Identifier of the shipping option chosen by the user
    public var shippingOptionID: String?
    /// This object represents information about an order.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#orderinfo)
    public var orderInfo: OrderInfo?

    public init(id: String, from: User, currency: String, totalAmount: Int, invoicePayload: String, shippingOptionID: String? = nil, orderInfo: OrderInfo? = nil) {
        self.id = id
        self.from = from
        self.currency = currency
        self.totalAmount = totalAmount
        self.invoicePayload = invoicePayload
        self.shippingOptionID = shippingOptionID
        self.orderInfo = orderInfo
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case from
        case currency
        case totalAmount = "total_amount"
        case invoicePayload = "invoice_payload"
        case shippingOptionID = "shipping_option_id"
        case orderInfo = "order_info"
    }
}

/// Contains information about Telegram Passport data shared with the bot by the user.
///
/// [External Documentation](https://core.telegram.org/bots/api/#passportdata)
public struct PassportData: Codable {
    /// Array with information about documents and other Telegram Passport elements that was shared with the bot
    public var data: [EncryptedPassportElement]
    /// Contains data required for decrypting and authenticating [EncryptedPassportElement](https://core.telegram.org/bots/api/#encryptedpassportelement). See the [Telegram Passport Documentation](https://core.telegram.org/passport#receiving-information) for a complete description of the data decryption and authentication processes.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#encryptedcredentials)
    public var credentials: EncryptedCredentials

    public init(data: [EncryptedPassportElement], credentials: EncryptedCredentials) {
        self.data = data
        self.credentials = credentials
    }
}

/// This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.
///
/// [External Documentation](https://core.telegram.org/bots/api/#passportfile)
public struct PassportFile: Codable {
    /// Identifier for this file, which can be used to download or reuse the file
    public var fileID: String
    /// Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
    public var fileUniqueID: String
    /// File size
    public var fileSize: Int
    /// Unix time when the file was uploaded
    public var fileDate: Int

    public init(fileID: String, fileUniqueID: String, fileSize: Int, fileDate: Int) {
        self.fileID = fileID
        self.fileUniqueID = fileUniqueID
        self.fileSize = fileSize
        self.fileDate = fileDate
    }

    private enum CodingKeys: String, CodingKey {
        case fileID = "file_id"
        case fileUniqueID = "file_unique_id"
        case fileSize = "file_size"
        case fileDate = "file_date"
    }
}

/// Contains information about documents or other Telegram Passport elements shared with the bot by the user.
///
/// [External Documentation](https://core.telegram.org/bots/api/#encryptedpassportelement)
public struct EncryptedPassportElement: Codable {
    /// Element type. One of “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “address”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”, “phone\_number”, “email”.
    public var type: `Type`
    /// *Optional*. Base64-encoded encrypted Telegram Passport element data provided by the user, available for “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport” and “address” types. Can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
    public var data: String?
    /// *Optional*. User's verified phone number, available only for “phone\_number” type
    public var phoneNumber: String?
    /// *Optional*. User's verified email address, available only for “email” type
    public var email: String?
    /// *Optional*. Array of encrypted files with documents provided by the user, available for “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration” and “temporary\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
    public var files: [PassportFile]?
    /// This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#passportfile)
    public var frontSide: PassportFile?
    /// This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#passportfile)
    public var reverseSide: PassportFile?
    /// This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#passportfile)
    public var selfie: PassportFile?
    /// *Optional*. Array of encrypted files with translated versions of documents provided by the user. Available if requested for “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration” and “temporary\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
    public var translation: [PassportFile]?
    /// Base64-encoded element hash for using in [PassportElementErrorUnspecified](https://core.telegram.org/bots/api/#passportelementerrorunspecified)
    public var hash: String

    /// Element type. One of “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “address”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”, “phone\_number”, “email”.
    public enum `Type`: String, Codable, CaseIterable {
        case personalDetails = "personal_details"
        case passport
        case driverLicense = "driver_license"
        case identityCard = "identity_card"
        case internalPassport = "internal_passport"
        case address
        case utilityBill = "utility_bill"
        case bankStatement = "bank_statement"
        case rentalAgreement = "rental_agreement"
        case passportRegistration = "passport_registration"
        case temporaryRegistration = "temporary_registration"
        case phoneNumber = "phone_number"
        case email
    }

    public init(type: `Type`, data: String? = nil, phoneNumber: String? = nil, email: String? = nil, files: [PassportFile]? = nil, frontSide: PassportFile? = nil, reverseSide: PassportFile? = nil, selfie: PassportFile? = nil, translation: [PassportFile]? = nil, hash: String) {
        self.type = type
        self.data = data
        self.phoneNumber = phoneNumber
        self.email = email
        self.files = files
        self.frontSide = frontSide
        self.reverseSide = reverseSide
        self.selfie = selfie
        self.translation = translation
        self.hash = hash
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case data
        case phoneNumber = "phone_number"
        case email
        case files
        case frontSide = "front_side"
        case reverseSide = "reverse_side"
        case selfie
        case translation
        case hash
    }
}

/// Contains data required for decrypting and authenticating [EncryptedPassportElement](https://core.telegram.org/bots/api/#encryptedpassportelement). See the [Telegram Passport Documentation](https://core.telegram.org/passport#receiving-information) for a complete description of the data decryption and authentication processes.
///
/// [External Documentation](https://core.telegram.org/bots/api/#encryptedcredentials)
public struct EncryptedCredentials: Codable {
    /// Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for [EncryptedPassportElement](https://core.telegram.org/bots/api/#encryptedpassportelement) decryption and authentication
    public var data: String
    /// Base64-encoded data hash for data authentication
    public var hash: String
    /// Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption
    public var secret: String

    public init(data: String, hash: String, secret: String) {
        self.data = data
        self.hash = hash
        self.secret = secret
    }
}

/// This object represents an error in the Telegram Passport element which was submitted that should be resolved by the user. It should be one of:
///
/// [External Documentation](https://core.telegram.org/bots/api/#passportelementerror)
public struct PassportElementError: Codable {
    /// Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#passportelementerrordatafield)
    public var passportElementErrorDataField: PassportElementErrorDataField?
    /// Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#passportelementerrorfrontside)
    public var passportElementErrorFrontSide: PassportElementErrorFrontSide?
    /// Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#passportelementerrorreverseside)
    public var passportElementErrorReverseSide: PassportElementErrorReverseSide?
    /// Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#passportelementerrorselfie)
    public var passportElementErrorSelfie: PassportElementErrorSelfie?
    /// Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#passportelementerrorfile)
    public var passportElementErrorFile: PassportElementErrorFile?
    /// Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#passportelementerrorfiles)
    public var passportElementErrorFiles: PassportElementErrorFiles?
    /// Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#passportelementerrortranslationfile)
    public var passportElementErrorTranslationFile: PassportElementErrorTranslationFile?
    /// Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation change.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#passportelementerrortranslationfiles)
    public var passportElementErrorTranslationFiles: PassportElementErrorTranslationFiles?
    /// Represents an issue in an unspecified place. The error is considered resolved when new data is added.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#passportelementerrorunspecified)
    public var passportElementErrorUnspecified: PassportElementErrorUnspecified?

    public init(passportElementErrorDataField: PassportElementErrorDataField? = nil, passportElementErrorFrontSide: PassportElementErrorFrontSide? = nil, passportElementErrorReverseSide: PassportElementErrorReverseSide? = nil, passportElementErrorSelfie: PassportElementErrorSelfie? = nil, passportElementErrorFile: PassportElementErrorFile? = nil, passportElementErrorFiles: PassportElementErrorFiles? = nil, passportElementErrorTranslationFile: PassportElementErrorTranslationFile? = nil, passportElementErrorTranslationFiles: PassportElementErrorTranslationFiles? = nil, passportElementErrorUnspecified: PassportElementErrorUnspecified? = nil) {
        self.passportElementErrorDataField = passportElementErrorDataField
        self.passportElementErrorFrontSide = passportElementErrorFrontSide
        self.passportElementErrorReverseSide = passportElementErrorReverseSide
        self.passportElementErrorSelfie = passportElementErrorSelfie
        self.passportElementErrorFile = passportElementErrorFile
        self.passportElementErrorFiles = passportElementErrorFiles
        self.passportElementErrorTranslationFile = passportElementErrorTranslationFile
        self.passportElementErrorTranslationFiles = passportElementErrorTranslationFiles
        self.passportElementErrorUnspecified = passportElementErrorUnspecified
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        self.passportElementErrorDataField = try? container.decode(PassportElementErrorDataField.self)
        self.passportElementErrorFrontSide = try? container.decode(PassportElementErrorFrontSide.self)
        self.passportElementErrorReverseSide = try? container.decode(PassportElementErrorReverseSide.self)
        self.passportElementErrorSelfie = try? container.decode(PassportElementErrorSelfie.self)
        self.passportElementErrorFile = try? container.decode(PassportElementErrorFile.self)
        self.passportElementErrorFiles = try? container.decode(PassportElementErrorFiles.self)
        self.passportElementErrorTranslationFile = try? container.decode(PassportElementErrorTranslationFile.self)
        self.passportElementErrorTranslationFiles = try? container.decode(PassportElementErrorTranslationFiles.self)
        self.passportElementErrorUnspecified = try? container.decode(PassportElementErrorUnspecified.self)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        if let value = passportElementErrorDataField { try container.encode(value) }
        if let value = passportElementErrorFrontSide { try container.encode(value) }
        if let value = passportElementErrorReverseSide { try container.encode(value) }
        if let value = passportElementErrorSelfie { try container.encode(value) }
        if let value = passportElementErrorFile { try container.encode(value) }
        if let value = passportElementErrorFiles { try container.encode(value) }
        if let value = passportElementErrorTranslationFile { try container.encode(value) }
        if let value = passportElementErrorTranslationFiles { try container.encode(value) }
        if let value = passportElementErrorUnspecified { try container.encode(value) }
    }
}

/// Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes.
///
/// [External Documentation](https://core.telegram.org/bots/api/#passportelementerrordatafield)
public struct PassportElementErrorDataField: Codable {
    /// Error source, must be *data*
    public var source: String
    /// The section of the user's Telegram Passport which has the error, one of “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “address”
    public var type: `Type`
    /// Name of the data field which has the error
    public var fieldName: String
    /// Base64-encoded data hash
    public var dataHash: String
    /// Error message
    public var message: String

    /// The section of the user's Telegram Passport which has the error, one of “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “address”
    public enum `Type`: String, Codable, CaseIterable {
        case personalDetails = "personal_details"
        case passport
        case driverLicense = "driver_license"
        case identityCard = "identity_card"
        case internalPassport = "internal_passport"
        case address
    }

    public init(source: String, type: `Type`, fieldName: String, dataHash: String, message: String) {
        self.source = source
        self.type = type
        self.fieldName = fieldName
        self.dataHash = dataHash
        self.message = message
    }

    private enum CodingKeys: String, CodingKey {
        case source
        case type
        case fieldName = "field_name"
        case dataHash = "data_hash"
        case message
    }
}

/// Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.
///
/// [External Documentation](https://core.telegram.org/bots/api/#passportelementerrorfrontside)
public struct PassportElementErrorFrontSide: Codable {
    /// Error source, must be *front\_side*
    public var source: String
    /// The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”
    public var type: `Type`
    /// Base64-encoded hash of the file with the front side of the document
    public var fileHash: String
    /// Error message
    public var message: String

    /// The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”
    public enum `Type`: String, Codable, CaseIterable {
        case passport
        case driverLicense = "driver_license"
        case identityCard = "identity_card"
        case internalPassport = "internal_passport"
    }

    public init(source: String, type: `Type`, fileHash: String, message: String) {
        self.source = source
        self.type = type
        self.fileHash = fileHash
        self.message = message
    }

    private enum CodingKeys: String, CodingKey {
        case source
        case type
        case fileHash = "file_hash"
        case message
    }
}

/// Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.
///
/// [External Documentation](https://core.telegram.org/bots/api/#passportelementerrorreverseside)
public struct PassportElementErrorReverseSide: Codable {
    /// Error source, must be *reverse\_side*
    public var source: String
    /// The section of the user's Telegram Passport which has the issue, one of “driver\_license”, “identity\_card”
    public var type: `Type`
    /// Base64-encoded hash of the file with the reverse side of the document
    public var fileHash: String
    /// Error message
    public var message: String

    /// The section of the user's Telegram Passport which has the issue, one of “driver\_license”, “identity\_card”
    public enum `Type`: String, Codable, CaseIterable {
        case driverLicense = "driver_license"
        case identityCard = "identity_card"
    }

    public init(source: String, type: `Type`, fileHash: String, message: String) {
        self.source = source
        self.type = type
        self.fileHash = fileHash
        self.message = message
    }

    private enum CodingKeys: String, CodingKey {
        case source
        case type
        case fileHash = "file_hash"
        case message
    }
}

/// Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.
///
/// [External Documentation](https://core.telegram.org/bots/api/#passportelementerrorselfie)
public struct PassportElementErrorSelfie: Codable {
    /// Error source, must be *selfie*
    public var source: String
    /// The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”
    public var type: `Type`
    /// Base64-encoded hash of the file with the selfie
    public var fileHash: String
    /// Error message
    public var message: String

    /// The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”
    public enum `Type`: String, Codable, CaseIterable {
        case passport
        case driverLicense = "driver_license"
        case identityCard = "identity_card"
        case internalPassport = "internal_passport"
    }

    public init(source: String, type: `Type`, fileHash: String, message: String) {
        self.source = source
        self.type = type
        self.fileHash = fileHash
        self.message = message
    }

    private enum CodingKeys: String, CodingKey {
        case source
        case type
        case fileHash = "file_hash"
        case message
    }
}

/// Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.
///
/// [External Documentation](https://core.telegram.org/bots/api/#passportelementerrorfile)
public struct PassportElementErrorFile: Codable {
    /// Error source, must be *file*
    public var source: String
    /// The section of the user's Telegram Passport which has the issue, one of “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
    public var type: `Type`
    /// Base64-encoded file hash
    public var fileHash: String
    /// Error message
    public var message: String

    /// The section of the user's Telegram Passport which has the issue, one of “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
    public enum `Type`: String, Codable, CaseIterable {
        case utilityBill = "utility_bill"
        case bankStatement = "bank_statement"
        case rentalAgreement = "rental_agreement"
        case passportRegistration = "passport_registration"
        case temporaryRegistration = "temporary_registration"
    }

    public init(source: String, type: `Type`, fileHash: String, message: String) {
        self.source = source
        self.type = type
        self.fileHash = fileHash
        self.message = message
    }

    private enum CodingKeys: String, CodingKey {
        case source
        case type
        case fileHash = "file_hash"
        case message
    }
}

/// Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.
///
/// [External Documentation](https://core.telegram.org/bots/api/#passportelementerrorfiles)
public struct PassportElementErrorFiles: Codable {
    /// Error source, must be *files*
    public var source: String
    /// The section of the user's Telegram Passport which has the issue, one of “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
    public var type: `Type`
    /// List of base64-encoded file hashes
    public var fileHashes: [String]
    /// Error message
    public var message: String

    /// The section of the user's Telegram Passport which has the issue, one of “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
    public enum `Type`: String, Codable, CaseIterable {
        case utilityBill = "utility_bill"
        case bankStatement = "bank_statement"
        case rentalAgreement = "rental_agreement"
        case passportRegistration = "passport_registration"
        case temporaryRegistration = "temporary_registration"
    }

    public init(source: String, type: `Type`, fileHashes: [String], message: String) {
        self.source = source
        self.type = type
        self.fileHashes = fileHashes
        self.message = message
    }

    private enum CodingKeys: String, CodingKey {
        case source
        case type
        case fileHashes = "file_hashes"
        case message
    }
}

/// Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.
///
/// [External Documentation](https://core.telegram.org/bots/api/#passportelementerrortranslationfile)
public struct PassportElementErrorTranslationFile: Codable {
    /// Error source, must be *translation\_file*
    public var source: String
    /// Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
    public var type: `Type`
    /// Base64-encoded file hash
    public var fileHash: String
    /// Error message
    public var message: String

    /// Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
    public enum `Type`: String, Codable, CaseIterable {
        case passport
        case driverLicense = "driver_license"
        case identityCard = "identity_card"
        case internalPassport = "internal_passport"
        case utilityBill = "utility_bill"
        case bankStatement = "bank_statement"
        case rentalAgreement = "rental_agreement"
        case passportRegistration = "passport_registration"
        case temporaryRegistration = "temporary_registration"
    }

    public init(source: String, type: `Type`, fileHash: String, message: String) {
        self.source = source
        self.type = type
        self.fileHash = fileHash
        self.message = message
    }

    private enum CodingKeys: String, CodingKey {
        case source
        case type
        case fileHash = "file_hash"
        case message
    }
}

/// Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation change.
///
/// [External Documentation](https://core.telegram.org/bots/api/#passportelementerrortranslationfiles)
public struct PassportElementErrorTranslationFiles: Codable {
    /// Error source, must be *translation\_files*
    public var source: String
    /// Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
    public var type: `Type`
    /// List of base64-encoded file hashes
    public var fileHashes: [String]
    /// Error message
    public var message: String

    /// Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
    public enum `Type`: String, Codable, CaseIterable {
        case passport
        case driverLicense = "driver_license"
        case identityCard = "identity_card"
        case internalPassport = "internal_passport"
        case utilityBill = "utility_bill"
        case bankStatement = "bank_statement"
        case rentalAgreement = "rental_agreement"
        case passportRegistration = "passport_registration"
        case temporaryRegistration = "temporary_registration"
    }

    public init(source: String, type: `Type`, fileHashes: [String], message: String) {
        self.source = source
        self.type = type
        self.fileHashes = fileHashes
        self.message = message
    }

    private enum CodingKeys: String, CodingKey {
        case source
        case type
        case fileHashes = "file_hashes"
        case message
    }
}

/// Represents an issue in an unspecified place. The error is considered resolved when new data is added.
///
/// [External Documentation](https://core.telegram.org/bots/api/#passportelementerrorunspecified)
public struct PassportElementErrorUnspecified: Codable {
    /// Error source, must be *unspecified*
    public var source: String
    /// Type of element of the user's Telegram Passport which has the issue
    public var type: String
    /// Base64-encoded element hash
    public var elementHash: String
    /// Error message
    public var message: String

    public init(source: String, type: String, elementHash: String, message: String) {
        self.source = source
        self.type = type
        self.elementHash = elementHash
        self.message = message
    }

    private enum CodingKeys: String, CodingKey {
        case source
        case type
        case elementHash = "element_hash"
        case message
    }
}

/// This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.
///
/// [External Documentation](https://core.telegram.org/bots/api/#game)
public struct Game: Codable {
    /// Title of the game
    public var title: String
    /// Description of the game
    public var description: String
    /// Photo that will be displayed in the game message in chats.
    public var photo: [PhotoSize]
    /// *Optional*. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls [setGameScore](https://core.telegram.org/bots/api/#setgamescore), or manually edited using [editMessageText](https://core.telegram.org/bots/api/#editmessagetext). 0-4096 characters.
    public var text: String?
    /// *Optional*. Special entities that appear in *text*, such as usernames, URLs, bot commands, etc.
    public var textEntities: [MessageEntity]?
    /// This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#animation)
    public var animation: Animation?

    public init(title: String, description: String, photo: [PhotoSize], text: String? = nil, textEntities: [MessageEntity]? = nil, animation: Animation? = nil) {
        self.title = title
        self.description = description
        self.photo = photo
        self.text = text
        self.textEntities = textEntities
        self.animation = animation
    }

    private enum CodingKeys: String, CodingKey {
        case title
        case description
        case photo
        case text
        case textEntities = "text_entities"
        case animation
    }
}

/// This object represents one row of the high scores table for a game.
///
/// [External Documentation](https://core.telegram.org/bots/api/#gamehighscore)
public struct GameHighScore: Codable {
    /// Position in high score table for the game
    public var position: Int
    /// This object represents a Telegram user or bot.
    ///
    /// [External Documentation](https://core.telegram.org/bots/api/#user)
    public var user: User
    /// Score
    public var score: Int

    public init(position: Int, user: User, score: Int) {
        self.position = position
        self.user = user
        self.score = score
    }
}

public enum AnyJSON: Equatable, Codable {
    case string(String)
    case number(Double)
    case object([String: AnyJSON])
    case array([AnyJSON])
    case bool(Bool)

    var value: Any {
        switch self {
        case .string(let string): return string
        case .number(let double): return double
        case .object(let dictionary): return dictionary
        case .array(let array): return array
        case .bool(let bool): return bool
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .array(array): try container.encode(array)
        case let .object(object): try container.encode(object)
        case let .string(string): try container.encode(string)
        case let .number(number): try container.encode(number)
        case let .bool(bool): try container.encode(bool)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let object = try? container.decode([String: AnyJSON].self) {
            self = .object(object)
        } else if let array = try? container.decode([AnyJSON].self) {
            self = .array(array)
        } else if let string = try? container.decode(String.self) {
            self = .string(string)
        } else if let bool = try? container.decode(Bool.self) {
            self = .bool(bool)
        } else if let number = try? container.decode(Double.self) {
            self = .number(number)
        } else {
            throw DecodingError.dataCorrupted(
                .init(codingPath: decoder.codingPath, debugDescription: "Invalid JSON value.")
            )
        }
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
