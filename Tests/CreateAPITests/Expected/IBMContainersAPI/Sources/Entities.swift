// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation

public struct Certificate: Codable {
    /// Certificate Authority (CA) certificate including the CA public key.
    public var caCert: String
    /// Server certificate including the server's public key.
    public var serverCert: String
    /// User certificate including the user's public key.
    public var userCert: String
    /// User's private key.
    public var userKey: String

    public init(caCert: String, serverCert: String, userCert: String, userKey: String) {
        self.caCert = caCert
        self.serverCert = serverCert
        self.userCert = userCert
        self.userKey = userKey
    }

    private enum CodingKeys: String, CodingKey {
        case caCert = "ca_cert"
        case serverCert = "server_cert"
        case userCert = "user_cert"
        case userKey = "user_key"
    }
}

public struct CertificateRefresh: Codable {
    /// Certificate Authority (CA) certificate including the CA public key.
    public var caCert: String?
    /// Full URL to the IBM Bluemix registry.
    public var regHost: String?
    /// Server certificate including the server's public key.
    public var serverCert: String?
    /// User certificate including the user's public key.
    public var userCert: String?
    /// User's private key.
    public var userKey: String?

    public init(caCert: String? = nil, regHost: String? = nil, serverCert: String? = nil, userCert: String? = nil, userKey: String? = nil) {
        self.caCert = caCert
        self.regHost = regHost
        self.serverCert = serverCert
        self.userCert = userCert
        self.userKey = userKey
    }

    private enum CodingKeys: String, CodingKey {
        case caCert = "ca_cert"
        case regHost = "reg_host"
        case serverCert = "server_cert"
        case userCert = "user_cert"
        case userKey = "user_key"
    }
}

public struct Container: Codable {
    /// The command and arguments that were passed to the container during container creation. This command is executed when the container is started.
    public var command: String?
    /// The current status of the container. The status can either be a transient state, such as BUILDING, and NETWORKING or a non-transient state, such as RUNNING, SHUTDOWN, CRASHED, PAUSED, or SUSPENDED.
    public var containerState: String?
    /// The time when the container was created.
    public var created: Double?
    /// A list of all the environment variables of the container.
    public var env: [String]?
    public var group: Group?
    /// Unique identifier representing a container.
    public var id: String?
    /// Full path to the container image in your private Bluemix registry.
    public var image: String?
    /// Unique identifier representing a container image.
    public var imageID: String?
    /// List of custom metadata that was added to the container. Labels serve a wide range of uses, such as adding notes to a container. Every label is a key/ value pair.
    public var labels: [String: AnyJSON]?
    /// The amount of container memory in Megabyte that was assigned to your container. The memory is counted towards the quota that is allocated for the space.
    public var memory: Int?
    /// The name of the container.
    public var name: String?
    /// The name of the container.
    public var names: [String]?
    public var networkSettings: NetworkSetting?
    public var ports: Port?
    /// Total size of all the files in the container, in bytes.
    public var sizeRootFs: Int?
    /// The size of the files which have been created or changed, if you compare the container to its base image. Just after creation, this should be zero. Ass you modify (or create) files, this size will increase.
    public var sizeRw: Int?
    /// Time when the container was started.
    public var started: Double?
    /// The current status of the container. The status can either be a transient state, such as BUILDING, and NETWORKING or a non-transient state, such as RUNNING, SHUTDOWN, CRASHED, PAUSED, or SUSPENDED
    public var status: String?
    /// Number of virtual CPUs that are assigned to the container.
    public var vcpu: Int?

    public init(command: String? = nil, containerState: String? = nil, created: Double? = nil, env: [String]? = nil, group: Group? = nil, id: String? = nil, image: String? = nil, imageID: String? = nil, labels: [String: AnyJSON]? = nil, memory: Int? = nil, name: String? = nil, names: [String]? = nil, networkSettings: NetworkSetting? = nil, ports: Port? = nil, sizeRootFs: Int? = nil, sizeRw: Int? = nil, started: Double? = nil, status: String? = nil, vcpu: Int? = nil) {
        self.command = command
        self.containerState = containerState
        self.created = created
        self.env = env
        self.group = group
        self.id = id
        self.image = image
        self.imageID = imageID
        self.labels = labels
        self.memory = memory
        self.name = name
        self.names = names
        self.networkSettings = networkSettings
        self.ports = ports
        self.sizeRootFs = sizeRootFs
        self.sizeRw = sizeRw
        self.started = started
        self.status = status
        self.vcpu = vcpu
    }

    private enum CodingKeys: String, CodingKey {
        case command = "Command"
        case containerState = "ContainerState"
        case created = "Created"
        case env = "Env"
        case group = "Group"
        case id = "Id"
        case image = "Image"
        case imageID = "ImageId"
        case labels = "Labels"
        case memory = "Memory"
        case name = "Name"
        case names = "Names"
        case networkSettings = "NetworkSettings"
        case ports = "Ports"
        case sizeRootFs = "SizeRootFs"
        case sizeRw = "SizeRw"
        case started = "Started"
        case status = "Status"
        case vcpu = "VCPU"
    }
}

public struct Group: Codable {
    /// Unique identifier representing a group.
    public var id: String?
    /// Name of the group.
    public var name: String?

    public init(id: String? = nil, name: String? = nil) {
        self.id = id
        self.name = name
    }

    private enum CodingKeys: String, CodingKey {
        case id = "Id"
        case name = "Name"
    }
}

public struct NetworkSetting: Codable {
    /// The name of the private network bridge.
    public var bridge: String?
    /// The IP address of the private network gateway in IPv4 format.
    public var gateway: String?
    /// The private IP address that is assigned to the container.
    public var ipAddress: String
    public var ipPrefixLen: Int?
    /// The MAC address that was assigned to the container.
    public var macAddress: String?
    public var network: Network?
    /// Specific to Docker. List of private container ports and their mapping to the host ports. In IBM Containers all container ports are exposed on the host by default. This attribute is returned as an empty list.
    public var portMapping: String?
    /// All ports of the container that were exposed to the public.
    public var ports: [String]?
    /// The Public IP address that was bound to the container.
    public var publicIpAddress: String

    public init(bridge: String? = nil, gateway: String? = nil, ipAddress: String, ipPrefixLen: Int? = nil, macAddress: String? = nil, network: Network? = nil, portMapping: String? = nil, ports: [String]? = nil, publicIpAddress: String) {
        self.bridge = bridge
        self.gateway = gateway
        self.ipAddress = ipAddress
        self.ipPrefixLen = ipPrefixLen
        self.macAddress = macAddress
        self.network = network
        self.portMapping = portMapping
        self.ports = ports
        self.publicIpAddress = publicIpAddress
    }

    private enum CodingKeys: String, CodingKey {
        case bridge = "Bridge"
        case gateway = "Gateway"
        case ipAddress = "IpAddress"
        case ipPrefixLen = "IpPrefixLen"
        case macAddress = "MacAddress"
        case network = "Network"
        case portMapping = "PortMapping"
        case ports = "Ports"
        case publicIpAddress = "PublicIpAddress"
    }
}

public struct Network: Codable {
    /// Alternative name of the private container network the container is connected to.
    public var aliases: String?
    /// Unique ID representing a container.
    public var endpointID: String?
    /// The private IP address of the network gateway in IPv4 format.
    public var gateway: String?
    /// Private IP address of the container in IPv6 format. IBM Containers only supports IPv4 format. This attribute is returned as empty.
    public var globalIPv6Address: String?
    /// Not supported by IBM Containers, empty string.
    public var globalIPv6PrefixLen: Int?
    /// Specific configurations for the network driver.
    public var iPAMConfig: String?
    /// The prefix of the subnet in the private container network. The prefix indicates that 16 bits out of 32 bits are used to address the network. As every IPv4 IP adress consists of 32 bits, the last 16 bits are used to assign private IP addresses to the container.
    public var iPPrefixLen: String?
    /// The private IP address of the network gateway in IPv6 format. IBM Containers only supports IPv4 format. This attribute is returned as empty.
    public var iPv6Gateway: String?
    /// List of container names that are linked to the container.
    public var links: String?
    /// The MAC address that is assigned to the container.
    public var macAddress: String?
    /// Unique identifier representing the private container network.
    public var networkID: String?

    public init(aliases: String? = nil, endpointID: String? = nil, gateway: String? = nil, globalIPv6Address: String? = nil, globalIPv6PrefixLen: Int? = nil, iPAMConfig: String? = nil, iPPrefixLen: String? = nil, iPv6Gateway: String? = nil, links: String? = nil, macAddress: String? = nil, networkID: String? = nil) {
        self.aliases = aliases
        self.endpointID = endpointID
        self.gateway = gateway
        self.globalIPv6Address = globalIPv6Address
        self.globalIPv6PrefixLen = globalIPv6PrefixLen
        self.iPAMConfig = iPAMConfig
        self.iPPrefixLen = iPPrefixLen
        self.iPv6Gateway = iPv6Gateway
        self.links = links
        self.macAddress = macAddress
        self.networkID = networkID
    }

    private enum CodingKeys: String, CodingKey {
        case aliases = "Aliases"
        case endpointID = "EndpointID"
        case gateway = "Gateway"
        case globalIPv6Address = "GlobalIPv6Address"
        case globalIPv6PrefixLen = "GlobalIPv6PrefixLen"
        case iPAMConfig = "IPAMConfig"
        case iPPrefixLen = "IPPrefixLen"
        case iPv6Gateway = "IPv6Gateway"
        case links = "Links"
        case macAddress = "MacAddress"
        case networkID = "NetworkID"
    }
}

public struct Port: Codable {
    /// Public IP address that was bound to the container in IPv4 format.
    public var ip: String?
    /// The private port of the container on which the container listens during run time.
    public var privatePort: String?
    /// The public port that was exposed during container creation. When a public port is exposed, a public IP address can be bound to the container which makes the container accessible from the internet.
    public var publicPort: String?
    /// The type of IP protocol that is used for the port. It can either be `udp` or `tcp`.
    public var type: String?

    public init(ip: String? = nil, privatePort: String? = nil, publicPort: String? = nil, type: String? = nil) {
        self.ip = ip
        self.privatePort = privatePort
        self.publicPort = publicPort
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case ip = "IP"
        case privatePort = "PrivatePort"
        case publicPort = "PublicPort"
        case type = "Type"
    }
}

public struct GetContainerStatus: Codable {
    /// The unique identifier of the container.
    public var nameOrID: String
    /// The current status of the container. The status can either be a transient one, such as BUILDING or NETWORKING, or a non-transient one, such as RUNNING, SHUTDOWN, CRASHED, or SUSPENDED.
    public var status: String?
    /// When set to true, the current container state is temporary and will change soon. An example for a transient state is the BUILDING state. A container that is created will be set to the BUILDING state until all container layers are created and the container is started. When set to false, the container state is permanent, such as CRASHED.
    public var isTransient: Bool?

    public init(nameOrID: String, status: String? = nil, isTransient: Bool? = nil) {
        self.nameOrID = nameOrID
        self.status = status
        self.isTransient = isTransient
    }

    private enum CodingKeys: String, CodingKey {
        case nameOrID = "NameOrId"
        case status = "Status"
        case isTransient = "Transient"
    }
}

public struct CreateContainer: Codable {
    /// The container memory that is set for the container in Megabyte. Choose one of the following sizes: Pico 64 MB, Nano 128 MB, Micro 256 MB, Tiny 512 MB, Small 1 GB (1024 MB), Medium 2 GB (2048 MB), Large 4 GB (4096 MB) XLarge 8GB (8192 MB) and 2XLarge 16 GB (16384 MB).
    public var memory: Int?
    /// A list of environment variables in the form of key=value pairs. All keys in this list have to be unique. List multiple keys separately and if you include quotation marks, include them around both the environment variable name and the value.
    public var env: [String]?
    /// The command and arguments in this list are passed to the container to be executed when the container is started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash. <br>Sample long-running commands:<br>["ping","localhost"]<br>["tail","-f","/dev/null"]<br>["sh","-c","while true; do date; sleep 20; done"]
    public var cmd: [String]?
    /// Full path to the image in your private Bluemix registry in the format `registry.ng.bluemix.net/namespace/image`.
    public var image: String
    /// All public ports that need to be exposed for the container, so the container can be accessed from the Internet.
    public var exposedPorts: [String]?
    public var hostConfig: HostConfig?
    /// The name of the Cloud Foundry app that you want to bind to your container. The Cloud Foundry app must be created in the same space where you want to create your container.
    public var bluemixApp: String?
    /// Mount a volume to a container by specifying the details in the following format: `VOLUME_NAME:/DIRECTORY_PATH[:ro]`. Example: testvolume:/volumedata/temp:rw. By default, all volumes will be set up with read-write access inside the container (rw). If you wish to set up your volume with read-only access, enter `ro`.  Note: To mount a volume to a container, you must create the volume in your space first by using the `cf ic volume-create` command, or calling the `POST /volumes/create endpoint`.
    public var volumes: String?
    /// Number of virtual CPUs that are allocated to the container.
    public var numberCpus: Int?
    /// Pins the container processes to a specific CPU core on the compute host. For example: 0 means that processes are executed on the first core only.
    public var cpuset: String?

    public init(memory: Int? = nil, env: [String]? = nil, cmd: [String]? = nil, image: String, exposedPorts: [String]? = nil, hostConfig: HostConfig? = nil, bluemixApp: String? = nil, volumes: String? = nil, numberCpus: Int? = nil, cpuset: String? = nil) {
        self.memory = memory
        self.env = env
        self.cmd = cmd
        self.image = image
        self.exposedPorts = exposedPorts
        self.hostConfig = hostConfig
        self.bluemixApp = bluemixApp
        self.volumes = volumes
        self.numberCpus = numberCpus
        self.cpuset = cpuset
    }

    private enum CodingKeys: String, CodingKey {
        case memory = "Memory"
        case env = "Env"
        case cmd = "Cmd"
        case image = "Image"
        case exposedPorts = "ExposedPorts"
        case hostConfig = "HostConfig"
        case bluemixApp = "BluemixApp"
        case volumes = "Volumes"
        case numberCpus = "NumberCpus"
        case cpuset = "Cpuset"
    }
}

public struct HostConfig: Codable {
    /// The container ports that you want to expose to the public. Ports need to be specified in the form of &lt;port&gt;/&lt;protocol&gt;: [{ "HostIp": "&lt;IP&gt;", "HostPort": "&lt;port&gt;" }]
    public var portBindings: [String]?
    /// A list of containers that need to be linked.
    public var links: [String]?
    /// A list of volumes to be bound to the container. Each volume must be listed in the following format: VOLNAME:/CONTAINER_PATH:rw [ro].
    public var binds: [String]?
    /// A list of hostnames/IP mappings to be added to the containerâ€™s /etc/hosts file. Specified in the form ["hostname:IP"]
    public var extraHosts: [String]?

    public init(portBindings: [String]? = nil, links: [String]? = nil, binds: [String]? = nil, extraHosts: [String]? = nil) {
        self.portBindings = portBindings
        self.links = links
        self.binds = binds
        self.extraHosts = extraHosts
    }

    private enum CodingKeys: String, CodingKey {
        case portBindings = "PortBindings"
        case links = "Links"
        case binds = "Binds"
        case extraHosts = "ExtraHosts"
    }
}

public struct ContainerID: Codable {
    /// Unique ID representing a container.
    public var id: String?
    /// The ID of the container size.
    public var flavorID: Int?
    /// The amount of container memory that has been assigned to the container. If the container memory was not specified in the API request, a container with 64 Megabyte container memory is created by default.
    public var mem: Int?
    /// Number of virtual CPUs that are assigned to the container.
    public var vcpu: Int?

    public init(id: String? = nil, flavorID: Int? = nil, mem: Int? = nil, vcpu: Int? = nil) {
        self.id = id
        self.flavorID = flavorID
        self.mem = mem
        self.vcpu = vcpu
    }

    private enum CodingKeys: String, CodingKey {
        case id = "Id"
        case flavorID = "flavor_id"
        case mem
        case vcpu
    }
}

public struct Volume: Codable {
    /// Unique identifier representing the file share on which the volume is hosted.
    public var fsID: String?
    /// Full path to the mounted volume inside the container.
    public var hostPath: String?
    /// List of space IDs in which the volume is visible and can be used by all the single containers and container groups.
    public var otherSpaceVisibility: [String]?
    /// Unique identifier representing the space where the volume got created.
    public var spaceGuid: String?
    /// The name of the volume.
    public var volName: String?

    public init(fsID: String? = nil, hostPath: String? = nil, otherSpaceVisibility: [String]? = nil, spaceGuid: String? = nil, volName: String? = nil) {
        self.fsID = fsID
        self.hostPath = hostPath
        self.otherSpaceVisibility = otherSpaceVisibility
        self.spaceGuid = spaceGuid
        self.volName = volName
    }
}

public struct ContainerInfo: Codable {
    /// The name of the Cloud Foundry app that was bound to the container during creation.
    public var bluemixApp: String?
    /// The name of the Bluemix service instance that was bound to the container during creation.
    public var bluemixServices: String?
    public var config: ContainerConfig?
    /// The current status of the container. This state can either be transient, such as BUILDING or NETWORKING, or non-transient, such as RUNNING, SHUTDOWN, CRASHED, or SUSPENDED.
    public var containerState: String?
    /// The date and time the container was created.
    public var created: Date?
    public var group: Group?
    public var hostConfig: HostConfig?
    /// The ID representing the physical compute host.
    public var hostID: String?
    /// The name of the container.
    public var humanID: String?
    /// Unique identifier representing a container.
    public var id: String?
    /// Unique identifier representing a container image.
    public var image: String?
    /// A list of volumes that are mounted to the container.
    public var mounts: [String]?
    /// The name of the container.
    public var name: String?
    public var networkSettings: NetworkSetting?
    /// The environment variable indicating the binary location.
    public var path: String?
    /// Path to the resolve.conf file inside the container. The resolve.conf file is used to resolve the DNS servers.
    public var resolveConfPath: String?
    public var state: ContainerState?
    public var volumes: Volume?
    /// LIst of volumes that is mounted to the container.
    public var volumesRW: [String]?

    public init(bluemixApp: String? = nil, bluemixServices: String? = nil, config: ContainerConfig? = nil, containerState: String? = nil, created: Date? = nil, group: Group? = nil, hostConfig: HostConfig? = nil, hostID: String? = nil, humanID: String? = nil, id: String? = nil, image: String? = nil, mounts: [String]? = nil, name: String? = nil, networkSettings: NetworkSetting? = nil, path: String? = nil, resolveConfPath: String? = nil, state: ContainerState? = nil, volumes: Volume? = nil, volumesRW: [String]? = nil) {
        self.bluemixApp = bluemixApp
        self.bluemixServices = bluemixServices
        self.config = config
        self.containerState = containerState
        self.created = created
        self.group = group
        self.hostConfig = hostConfig
        self.hostID = hostID
        self.humanID = humanID
        self.id = id
        self.image = image
        self.mounts = mounts
        self.name = name
        self.networkSettings = networkSettings
        self.path = path
        self.resolveConfPath = resolveConfPath
        self.state = state
        self.volumes = volumes
        self.volumesRW = volumesRW
    }

    private enum CodingKeys: String, CodingKey {
        case bluemixApp = "BluemixApp"
        case bluemixServices = "BluemixServices"
        case config = "Config"
        case containerState = "ContainerState"
        case created = "Created"
        case group = "Group"
        case hostConfig = "HostConfig"
        case hostID = "HostId"
        case humanID = "Human_Id"
        case id = "Id"
        case image = "Image"
        case mounts = "Mounts"
        case name = "Name"
        case networkSettings = "NetworkSettings"
        case path = "Path"
        case resolveConfPath = "ResolveConfPath"
        case state = "State"
        case volumes = "Volumes"
        case volumesRW = "VolumesRW"
    }
}

public struct ContainerConfig: Codable {
    public var isArgsEscaped: Bool?
    /// Attaches the container to stderr.
    public var attachStderr: String?
    /// Attaches the container to sdtin.
    public var attachStdin: String?
    /// Attaches the container to stdout.
    public var attachStdout: String?
    /// The command and arguments in this list are passed to the container to be executed when the container is started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash. <br>Sample long-running commands:<br>["ping","localhost"]<br>["tail","-f","/dev/null"]<br>["sh","-c","while true; do date; sleep 20; done"]
    public var cmd: [String]?
    /// The domain name to be used for the container.
    public var domainname: String?
    /// A list of environment variables in the form of key=value pairs. All keys in this list have to be unique. List multiple keys separately and if you include quotation marks, include them around both the environment variable name and the value.
    public var env: [String]?
    /// List of public ports that were exposed during container creation.
    public var exposedPorts: [String]?
    /// The host name to be used for the container.
    public var hostname: String?
    /// Full path to the image that the container is based on in your private Bluemix registry.
    public var image: String?
    /// The hardware architecture the image is based on. It can either be 'amd64' indicating an Intel-based architecture, or 'ppc64le' representing a Power-based architecture.
    public var imageArchitecture: String?
    /// List of custom metadata that was added to the container. Labels serve a wide range of uses, such as adding notes to a container. Every label is a key/ value pair.
    public var labels: [String]?
    /// The amount of container memory that is assigned to the container in Megabyte.
    public var memory: Int?
    /// The total container memory limit (memory + swap)
    public var memorySwap: String?
    /// When set to true, it opens stdin.
    public var openStdin: String?
    /// Not supported by IBM Containers, empty string.
    public var portSpecs: String?
    /// When set to true it closes stdin after the attached client disconnects.
    public var stdinOnce: String?
    /// When set to true, attach standard streams to a tty, including stdin if it is not closed.
    public var tty: String?
    /// User to be used inside the container.
    public var user: String?
    /// Number of virtual CPUs that are assigned to the container.
    public var vcpu: Int?
    /// List of volumes to inherit from another container. This feature is not supported in IBM Containers.
    public var volumesFrom: String?
    /// The working directory inside the container where specified commands are executed.
    public var workingDir: String?

    public init(isArgsEscaped: Bool? = nil, attachStderr: String? = nil, attachStdin: String? = nil, attachStdout: String? = nil, cmd: [String]? = nil, domainname: String? = nil, env: [String]? = nil, exposedPorts: [String]? = nil, hostname: String? = nil, image: String? = nil, imageArchitecture: String? = nil, labels: [String]? = nil, memory: Int? = nil, memorySwap: String? = nil, openStdin: String? = nil, portSpecs: String? = nil, stdinOnce: String? = nil, tty: String? = nil, user: String? = nil, vcpu: Int? = nil, volumesFrom: String? = nil, workingDir: String? = nil) {
        self.isArgsEscaped = isArgsEscaped
        self.attachStderr = attachStderr
        self.attachStdin = attachStdin
        self.attachStdout = attachStdout
        self.cmd = cmd
        self.domainname = domainname
        self.env = env
        self.exposedPorts = exposedPorts
        self.hostname = hostname
        self.image = image
        self.imageArchitecture = imageArchitecture
        self.labels = labels
        self.memory = memory
        self.memorySwap = memorySwap
        self.openStdin = openStdin
        self.portSpecs = portSpecs
        self.stdinOnce = stdinOnce
        self.tty = tty
        self.user = user
        self.vcpu = vcpu
        self.volumesFrom = volumesFrom
        self.workingDir = workingDir
    }

    private enum CodingKeys: String, CodingKey {
        case isArgsEscaped = "ArgsEscaped"
        case attachStderr = "AttachStderr"
        case attachStdin = "AttachStdin"
        case attachStdout = "AttachStdout"
        case cmd = "Cmd"
        case domainname = "Domainname"
        case env = "Env"
        case exposedPorts = "ExposedPorts"
        case hostname = "Hostname"
        case image = "Image"
        case imageArchitecture = "ImageArchitecture"
        case labels = "Labels"
        case memory = "Memory"
        case memorySwap = "MemorySwap"
        case openStdin = "OpenStdin"
        case portSpecs = "PortSpecs"
        case stdinOnce = "StdinOnce"
        case tty = "Tty"
        case user = "User"
        case vcpu = "VCPU"
        case volumesFrom = "VolumesFrom"
        case workingDir = "WorkingDir"
    }
}

public struct ContainerState: Codable {
    /// The exit code indicating the root cause of why the container exited. Review the Docker API documentation to find a list of exit codes and their meaning.
    public var exitCode: String?
    /// Time when the container stopped.
    public var finishedAt: String?
    /// Not supported by IBM Containers, empty string
    public var ghost: String?
    /// The process ID on the compute host that runs the container process.
    public var pid: Int?
    /// If set to true, the container is in a RUNNING state. If set to false, the container has stopped or crashed.
    public var isRunning: Bool?
    /// Time when the container started.
    public var startedAt: String?
    /// The current status of the container. This state can either be transient, such as BUILDING or NETWORKING, or non-transient, such as RUNNING, SHUTDOWN, CRASHED, or SUSPENDED.
    public var status: String?

    public init(exitCode: String? = nil, finishedAt: String? = nil, ghost: String? = nil, pid: Int? = nil, isRunning: Bool? = nil, startedAt: String? = nil, status: String? = nil) {
        self.exitCode = exitCode
        self.finishedAt = finishedAt
        self.ghost = ghost
        self.pid = pid
        self.isRunning = isRunning
        self.startedAt = startedAt
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case exitCode = "ExitCode"
        case finishedAt = "FinishedAt"
        case ghost = "Ghost"
        case pid = "Pid"
        case isRunning = "Running"
        case startedAt = "StartedAt"
        case status = "Status"
    }
}

public struct ImageInfo: Codable {
    /// The time when your container image was created.
    public var created: Double?
    /// The unique identifier representing a container image.
    public var id: String?
    /// The name of your container image.
    public var image: String?
    /// The full path to the private Bluemix registry where the image is stored including the registry name, the organization namespace, and image tag.
    public var repoTags: [String]?
    /// The real size of the container image.
    public var size: Int?
    /// The virtual size of the container image.
    public var virtualSize: Int?

    public init(created: Double? = nil, id: String? = nil, image: String? = nil, repoTags: [String]? = nil, size: Int? = nil, virtualSize: Int? = nil) {
        self.created = created
        self.id = id
        self.image = image
        self.repoTags = repoTags
        self.size = size
        self.virtualSize = virtualSize
    }

    private enum CodingKeys: String, CodingKey {
        case created = "Created"
        case id = "Id"
        case image = "Image"
        case repoTags = "RepoTags"
        case size = "Size"
        case virtualSize = "VirtualSize"
    }
}

public struct FloatingIP: Codable {
    public var bindings: Binding?
    /// The public IP address that is allocated to the organization space.
    public var ipAddress: String?

    public init(bindings: Binding? = nil, ipAddress: String? = nil) {
        self.bindings = bindings
        self.ipAddress = ipAddress
    }

    private enum CodingKeys: String, CodingKey {
        case bindings = "Bindings"
        case ipAddress = "IpAddress"
    }
}

public struct Binding: Codable {
    /// Unique identifier representing a container
    public var containerID: String?

    public init(containerID: String? = nil) {
        self.containerID = containerID
    }

    private enum CodingKeys: String, CodingKey {
        case containerID = "ContainerId"
    }
}

public struct Namespace: Codable {
    /// The namespace that is either set for an organization, or a namespace that is not available to be used in Bluemix.
    public var namespace: String?

    public init(namespace: String? = nil) {
        self.namespace = namespace
    }
}

public struct ContainersGroupsGetListItem: Codable {
    /// Time when the container group is created.
    public var creationTime: String?
    /// Unique identifier of the container group.
    public var id: String?
    /// Name of the container group.
    public var name: String?
    /// The port number that is exposed to the public during container group creation.
    public var port: Int?
    /// The public route that is mapped to the container group. You can use this route to access your container group from the Internet.
    public var routes: [String]?
    /// Current status of the container group. The container group status is a composite of ACTION and STATUS:<br><br> ACTIONS = (CREATE, DELETE, UPDATE, ROLLBACK, SUSPEND, RESUME, ADOPT, SNAPSHOT, CHECK, RESTORE)<br><br> STATUSES = (IN_PROGRESS, FAILED, COMPLETE)
    public var status: String?
    /// Time when the container group is changed and updated.
    public var updatedTime: String?

    public init(creationTime: String? = nil, id: String? = nil, name: String? = nil, port: Int? = nil, routes: [String]? = nil, status: String? = nil, updatedTime: String? = nil) {
        self.creationTime = creationTime
        self.id = id
        self.name = name
        self.port = port
        self.routes = routes
        self.status = status
        self.updatedTime = updatedTime
    }

    private enum CodingKeys: String, CodingKey {
        case creationTime = "Creation_time"
        case id = "Id"
        case name = "Name"
        case port = "Port"
        case routes = "Routes"
        case status = "Status"
        case updatedTime = "Updated_time"
    }
}

public struct ContainersGroupsPostCreatedInfo: Codable {
    /// Warning information (Initial warning is empty).
    public var warnings: [String]?
    /// Unique identifier representing a specific container group.
    public var id: String?

    public init(warnings: [String]? = nil, id: String? = nil) {
        self.warnings = warnings
        self.id = id
    }

    private enum CodingKeys: String, CodingKey {
        case warnings = "Warnings"
        case id = "Id"
    }
}

public struct ContainersGroupsPostRequiredAttributes: Codable {
    /// (Required) Name of the container group that you want to create. The name needs to be unique in your organization space and must start with a letter. Then, you can include uppercase letters, lowercase letters, numbers, periods (.), underscores (_), or hyphens (-).
    public var name: String
    /// (Required) The full path to your private Bluemix repository. If you want to use an image in your private Bluemix repository, specify the image in the following format: registry.ng.bluemix.net/NAMESPACE/IMAGE. If you want to use an IBM Containers provided image, do not include your organization's namespace. Specify the image in the following format: registry.ng.bluemix.net/IMAGE
    public var image: String
    /// (Optional) The size of each container instance in the container group. The size of each container instance in the group. Choose one of the following sizes and enter the size in MegaBytes: Pico 64 MB, Nano 128 MB, Micro 256 MB, Tiny 512 MB, Small 1 GB (1024 MB), Medium 2 GB (2048 MB), Large 4 GB (4096 MB) XLarge 8GB (8192 MB) and 2XLarge 16 GB (16384 MB). If you do not specify a size, all container instances in this group are created with 256 MB.
    public var memory: Int?
    /// (Optional) List of environmental variables. Every environment variable that is listed here needs to be a key=value pair. Every key that you use needs to be unique for this container group. Multiple environment variables are separated with comma (,).
    public var env: [String]?
    /// (Optional) Docker command that is passed to the container group to be run when the container instances are started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash.
    public var cmd: [String]?
    /// (Optional) Expose a port for HTTP traffic to make your container group available from the Internet. Every container instance that is started for this group, listens on this port. Container groups cannot expose multiple ports. Note: You need to expose a port, when "Autorecovery" is set to true.
    public var port: Int?
    /// (Optional) The name of the Cloud Foundry app that you created in your organization space.
    public var bluemixApp: String?
    /// (Optional) List of volumes to be mounted to the container instances of your container group. You need to create the volume first by using the cf ic volume-create command before you can mount a volume to a container group. When you specify a volume, use the following format: NAME:PATH:MODE. For NAME, use either the name or ID of the volume. For the PATH, enter the absolute path to the volume directory in the container. For MODE, enter either ro (read-only) or rw (read-write).
    public var volumes: [String]?
    public var numberInstances: NumberInstances?
    /// (Optional) Enable the Auto-recovery mode for your container group. If set to true, IBM Containers checks the health of each instance with an HTTP request to the port that is assigned. If the health check does not receive a TCP response from a container instance in two subsequent 90-second intervals, the instance is removed and replaced with a new instance. If set to false and container instances crash, they are not recovered by IBM Containers.
    public var autorecovery: String?
    public var route: Route?

    public struct NumberInstances: Codable {
        /// (Optional) The number of container instances that you require.
        public var desired: Int?
        /// (Optional) The minimum number of container instances that need to run in your container group.
        public var min: Int?
        /// (Optional) The maximum number of container instances that you want to run in your container group.
        public var max: Int?

        public init(desired: Int? = nil, min: Int? = nil, max: Int? = nil) {
            self.desired = desired
            self.min = min
            self.max = max
        }

        private enum CodingKeys: String, CodingKey {
            case desired = "Desired"
            case min = "Min"
            case max = "Max"
        }
    }

    public struct Route: Codable {
        /// The default system domain is mybluemix.net and already provides a SSL certificate, so you can access your container groups with HTTPS without any additional configuration.
        public var domain: String?
        /// The host name of your container group, such as mycontainerhost. Do not include underscores (_) in the host name. The host and the domain combined form the full public route URL, such as http://mycontainerhost.mybluemix.net.
        public var host: String?

        public init(domain: String? = nil, host: String? = nil) {
            self.domain = domain
            self.host = host
        }
    }

    public init(name: String, image: String, memory: Int? = nil, env: [String]? = nil, cmd: [String]? = nil, port: Int? = nil, bluemixApp: String? = nil, volumes: [String]? = nil, numberInstances: NumberInstances? = nil, autorecovery: String? = nil, route: Route? = nil) {
        self.name = name
        self.image = image
        self.memory = memory
        self.env = env
        self.cmd = cmd
        self.port = port
        self.bluemixApp = bluemixApp
        self.volumes = volumes
        self.numberInstances = numberInstances
        self.autorecovery = autorecovery
        self.route = route
    }

    private enum CodingKeys: String, CodingKey {
        case name = "Name"
        case image = "Image"
        case memory = "Memory"
        case env = "Env"
        case cmd = "Cmd"
        case port = "Port"
        case bluemixApp = "BluemixApp"
        case volumes = "Volumes"
        case numberInstances = "NumberInstances"
        case autorecovery = "Autorecovery"
        case route = "Route"
    }
}

public struct ContainersGroupsNameOrIDPatchUpdatedInfo: Codable {
    public var numberInstances: NumberInstances?
    /// Enable or disable the Autorecovery mode for your container group. To enable it, enter true. If you want to disable it, enter false. Note: You can only enable/ disable Autorecovery mode if your container group was initially created with Autorecovery mode enabled.
    public var autorecovery: String?
    /// A list of environment variables that you want to add to your container group. Every environment variable needs to be a key=value pair. Every key that you use needs to be unique for this container group. Multiple environment variables are separated with comma (,)
    public var environment: [String]?

    public struct NumberInstances: Codable {
        /// The number of container instances that you require.
        public var desired: Int?
        /// The minimum number of container instances that you want to run in your container group.
        public var min: Int?
        /// The maximum number of container instances that you want to run in your container group.
        public var max: Int?

        public init(desired: Int? = nil, min: Int? = nil, max: Int? = nil) {
            self.desired = desired
            self.min = min
            self.max = max
        }

        private enum CodingKeys: String, CodingKey {
            case desired = "Desired"
            case min = "Min"
            case max = "Max"
        }
    }

    public init(numberInstances: NumberInstances? = nil, autorecovery: String? = nil, environment: [String]? = nil) {
        self.numberInstances = numberInstances
        self.autorecovery = autorecovery
        self.environment = environment
    }

    private enum CodingKeys: String, CodingKey {
        case numberInstances = "NumberInstances"
        case autorecovery = "Autorecovery"
        case environment = "Environment"
    }
}

public struct ContainersGroupsNameOrIDGetDetails: Codable {
    /// If set to `true` the container instances in the group are spread across separate physical compute nodes, which reduces the likelihood of containers crashing due to hardware failures. If set to `false`, the container instances in the group share the same physical compute node.
    public var antiAffinity: String?
    /// Can be either true or false. If set to true, the Autorecovery mode is enabled for your container group. In case a container instance crashes or stops, this instance is removed and a new one is automatically recreated. If set to false, the Autorecovery mode is disabled. In case a container instances crashes or stops, it is not automatically recreated by IBM Containers.
    public var autorecovery: String?
    /// Current IBM Containers availability zone on Openstack.
    public var availabilityZone: String?
    /// The Docker command that was specified to be run when the container instances are started.
    public var cmd: [String]?
    /// Timestamp when the container group was created.
    public var creationTime: String?
    /// The list of environmental variables that were defined for the container group. Each environment variable consists of a unique key and a value.
    public var env: [String]?
    /// Unique identifier representing a specific container group.
    public var id: String?
    /// The unique ID of the container image your container group instances are based on.
    public var image: String?
    /// The full path to the container image in your private Bluemix repository.
    public var imageName: String?
    /// The size of each container instance that runs in the container group in MegaByte.
    public var memory: Int?
    /// The name of the container group.
    public var name: String?
    public var numberInstances: NumberInstances?
    /// The public port that has been exposed. If you specified a route, your container group is accessible from the Internet.
    public var port: Int?
    public var routeStatus: RouteStatus?
    /// The public route that is mapped to the container group. When you expose a public port, you can use the route to access your container group from the Internet.
    public var routes: [String]?
    /// The current status of the container group. The container group status is a composite of ACTION and STATUS:<br><br> ACTIONS = (CREATE, DELETE, UPDATE, ROLLBACK, SUSPEND, RESUME, ADOPT, SNAPSHOT, CHECK, RESTORE)<br><br> STATUSES = (IN_PROGRESS, FAILED, COMPLETE)
    public var status: String?
    /// Timestamp when the container group was updated. If the container group was not updated before, `null` is returned.
    public var updatedTime: String?
    /// List of volumes to be associated with the container, in the format of volume name:path:mode where mode can be ro or rw.
    public var volumes: [String]?

    public struct NumberInstances: Codable {
        /// The maximum number of container instance that you want to run in your container group.
        public var max: Int?
        /// The current number of container instances that are running in your container group.
        public var currentSize: Int?
        /// The number of container instances that you require.
        public var desired: Int?
        /// The minimum number of container instances that you want to run in your container group.
        public var min: Int?

        public init(max: Int? = nil, currentSize: Int? = nil, desired: Int? = nil, min: Int? = nil) {
            self.max = max
            self.currentSize = currentSize
            self.desired = desired
            self.min = min
        }

        private enum CodingKeys: String, CodingKey {
            case max = "Max"
            case currentSize = "CurrentSize"
            case desired = "Desired"
            case min = "Min"
        }
    }

    public struct RouteStatus: Codable {
        /// Can be either true or false. If set to true, then the route is in the process of being mapped to the container group and set up in the GoRouter. Is set to false, then the set up of the route is completed.
        public var isInProgress: Bool?
        /// Info message for the user.
        public var message: String?
        /// Can be either true or false. If set to true, then the route is successfully registrered with the GoRouter. If set to false, then the route registration has not yet finished yet or could not be completed without errors.
        public var isSuccessful: Bool?

        public init(isInProgress: Bool? = nil, message: String? = nil, isSuccessful: Bool? = nil) {
            self.isInProgress = isInProgress
            self.message = message
            self.isSuccessful = isSuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case isInProgress = "in_progress"
            case message
            case isSuccessful = "successful"
        }
    }

    public init(antiAffinity: String? = nil, autorecovery: String? = nil, availabilityZone: String? = nil, cmd: [String]? = nil, creationTime: String? = nil, env: [String]? = nil, id: String? = nil, image: String? = nil, imageName: String? = nil, memory: Int? = nil, name: String? = nil, numberInstances: NumberInstances? = nil, port: Int? = nil, routeStatus: RouteStatus? = nil, routes: [String]? = nil, status: String? = nil, updatedTime: String? = nil, volumes: [String]? = nil) {
        self.antiAffinity = antiAffinity
        self.autorecovery = autorecovery
        self.availabilityZone = availabilityZone
        self.cmd = cmd
        self.creationTime = creationTime
        self.env = env
        self.id = id
        self.image = image
        self.imageName = imageName
        self.memory = memory
        self.name = name
        self.numberInstances = numberInstances
        self.port = port
        self.routeStatus = routeStatus
        self.routes = routes
        self.status = status
        self.updatedTime = updatedTime
        self.volumes = volumes
    }

    private enum CodingKeys: String, CodingKey {
        case antiAffinity = "Anti-affinity"
        case autorecovery = "Autorecovery"
        case availabilityZone = "AvailabilityZone"
        case cmd = "Cmd"
        case creationTime = "Creation_time"
        case env = "Env"
        case id = "Id"
        case image = "Image"
        case imageName = "ImageName"
        case memory = "Memory"
        case name = "Name"
        case numberInstances = "NumberInstances"
        case port = "Port"
        case routeStatus = "Route_Status"
        case routes = "Routes"
        case status = "Status"
        case updatedTime = "UpdatedTime"
        case volumes = "Volumes"
    }
}

/// The public route that is mapped to the container group. You can use this route to access your container group from the Internet.
public struct Route: Codable {
    /// The default system domain is mybluemix.net and already provides a SSL certificate, so you can access your container groups with HTTPS without any additional configuration.
    public var domain: String?
    /// The host name of your container group, such as mycontainerhost. Do not include underscores (_) in the host name. The host and the domain combined form the full public route URL, such as http://mycontainerhost.mybluemix.net.
    public var host: String?

    public init(domain: String? = nil, host: String? = nil) {
        self.domain = domain
        self.host = host
    }
}

public struct ContainersUsageInfo: Codable {
    public var availableSizes: [ContainersUsageInfoAvailableSizes]?
    /// The IBM Containers machine where the space is located
    public var environment: String?
    public var limits: Limits?
    public var usage: Usage?

    public struct Limits: Codable {
        /// The number of containers that can be created in the space. If -1 is returned, then an unlimited number of containers can be created. The number however is counted towards and limited by the container memory.
        public var containers: Int?
        /// The number of public IP addresses that can be allocated to the space.
        public var floatingIps: Int?
        /// The amount of container memory that can be used in the space in megabyte.
        public var memoryMB: Int?
        /// The number of virtual CPUs that are assigned to the space.
        public var vcpu: Int?

        public init(containers: Int? = nil, floatingIps: Int? = nil, memoryMB: Int? = nil, vcpu: Int? = nil) {
            self.containers = containers
            self.floatingIps = floatingIps
            self.memoryMB = memoryMB
            self.vcpu = vcpu
        }

        private enum CodingKeys: String, CodingKey {
            case containers
            case floatingIps = "floating_ips"
            case memoryMB = "memory_MB"
            case vcpu
        }
    }

    public struct Usage: Codable {
        /// The number of containers that were created in the space. All containers that count towards the quota limit are listed independent on their current state.
        public var containers: Int?
        /// The number of public IP addresses that are allocated to the space.
        public var floatingIps: Int?
        /// The number of public IP addresses that are bound to a container in the space.
        public var floatingIpsBound: Int?
        /// The number of private images that were added to the private Bluemix registry.
        public var images: Int?
        /// The amount of container memory that is already used by the containers that were created in the space in megabyte.
        public var memoryMB: Int?
        /// The number of containers that are currently in a running state.
        public var running: Int?
        /// The number of virtual CPUs that are allocated to the space.
        public var vcpu: Int?

        public init(containers: Int? = nil, floatingIps: Int? = nil, floatingIpsBound: Int? = nil, images: Int? = nil, memoryMB: Int? = nil, running: Int? = nil, vcpu: Int? = nil) {
            self.containers = containers
            self.floatingIps = floatingIps
            self.floatingIpsBound = floatingIpsBound
            self.images = images
            self.memoryMB = memoryMB
            self.running = running
            self.vcpu = vcpu
        }

        private enum CodingKeys: String, CodingKey {
            case containers
            case floatingIps = "floating_ips"
            case floatingIpsBound = "floating_ips_bound"
            case images
            case memoryMB = "memory_MB"
            case running
            case vcpu
        }
    }

    public init(availableSizes: [ContainersUsageInfoAvailableSizes]? = nil, environment: String? = nil, limits: Limits? = nil, usage: Usage? = nil) {
        self.availableSizes = availableSizes
        self.environment = environment
        self.limits = limits
        self.usage = usage
    }

    private enum CodingKeys: String, CodingKey {
        case availableSizes = "AvailableSizes"
        case environment = "Environment"
        case limits = "Limits"
        case usage = "Usage"
    }
}

public struct ContainersUsageInfoAvailableSizes: Codable {
    /// The amount of disk space on the compute host that is assigned to the container in gigabyte
    public var disk: Int?
    /// The ID of the container size.
    public var id: String?
    /// The amount of container memory on the compute host that is assigned to the container in megabyte.
    public var memoryMB: Int?
    /// The IBM Containers name of the container size.
    public var name: String?
    /// The number of virtual CPUs that can be assigned to the container.
    public var vcpus: Int?

    public init(disk: Int? = nil, id: String? = nil, memoryMB: Int? = nil, name: String? = nil, vcpus: Int? = nil) {
        self.disk = disk
        self.id = id
        self.memoryMB = memoryMB
        self.name = name
        self.vcpus = vcpus
    }

    private enum CodingKeys: String, CodingKey {
        case disk
        case id
        case memoryMB = "memory_MB"
        case name
        case vcpus
    }
}

public struct ContainersVersionGetInfo: Codable {
    /// The current API version.
    public var apiVersion: String?
    /// The current Arch version.
    public var arch: String?
    public var buildDetail: BuildDetail?
    public var buildID: String?
    public var buildNumber: String?
    /// Timestamp when the API version and all attached microservices were built.
    public var buildTime: String?
    public var gitCommit: String?
    /// The latest Go version.
    public var goVersion: String?
    /// The latest Kernel version.
    public var kernelVersion: String?
    /// Bluemix Containers
    public var os: String?
    /// The latest API version.
    public var version: String?

    public struct BuildDetail: Codable {
        /// The build ID of the current API version.
        public var api: String?
        /// The build ID of the current automount microservice version.
        public var automount: String?
        /// The build ID of the current grupdater microservice version.
        public var grupdater: String?
        /// The build ID of the current harmony microservice version.
        public var harmony: String?
        /// The build ID of the current health-monitor microservice version.
        public var healthMonitor: String?
        /// The build ID of the current hijack microservice version.
        public var hijack: String?
        /// The build ID of the current ldap microservice version.
        public var ldap: String?
        /// The build ID of the current logmet microservice version.
        public var logmet: String?
        /// The build ID of the current lumberjack microservice version.
        public var lumberjack: String?
        /// The build ID of the current redis-cluster version.
        public var redisCluster: String?
        /// The build ID of the current sgwatcher microservice version.
        public var sgwatcher: String?
        /// The build ID of the current volumes manager microservice version.
        public var volmgr: String?

        public init(api: String? = nil, automount: String? = nil, grupdater: String? = nil, harmony: String? = nil, healthMonitor: String? = nil, hijack: String? = nil, ldap: String? = nil, logmet: String? = nil, lumberjack: String? = nil, redisCluster: String? = nil, sgwatcher: String? = nil, volmgr: String? = nil) {
            self.api = api
            self.automount = automount
            self.grupdater = grupdater
            self.harmony = harmony
            self.healthMonitor = healthMonitor
            self.hijack = hijack
            self.ldap = ldap
            self.logmet = logmet
            self.lumberjack = lumberjack
            self.redisCluster = redisCluster
            self.sgwatcher = sgwatcher
            self.volmgr = volmgr
        }

        private enum CodingKeys: String, CodingKey {
            case api
            case automount
            case grupdater
            case harmony
            case healthMonitor = "health-monitor"
            case hijack
            case ldap
            case logmet
            case lumberjack
            case redisCluster = "redis-cluster"
            case sgwatcher
            case volmgr
        }
    }

    public init(apiVersion: String? = nil, arch: String? = nil, buildDetail: BuildDetail? = nil, buildID: String? = nil, buildNumber: String? = nil, buildTime: String? = nil, gitCommit: String? = nil, goVersion: String? = nil, kernelVersion: String? = nil, os: String? = nil, version: String? = nil) {
        self.apiVersion = apiVersion
        self.arch = arch
        self.buildDetail = buildDetail
        self.buildID = buildID
        self.buildNumber = buildNumber
        self.buildTime = buildTime
        self.gitCommit = gitCommit
        self.goVersion = goVersion
        self.kernelVersion = kernelVersion
        self.os = os
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case apiVersion = "ApiVersion"
        case arch = "Arch"
        case buildDetail = "BuildDetail"
        case buildID = "BuildID"
        case buildNumber = "BuildNumber"
        case buildTime = "BuildTime"
        case gitCommit = "GitCommit"
        case goVersion = "GoVersion"
        case kernelVersion = "KernelVersion"
        case os = "Os"
        case version = "Version"
    }
}

public struct ContainersQuotaInfo: Codable {
    /// The Bluemix account type indicating the quota limits and how the organization is billed.
    public var accountType: String?
    /// The country in which the account was opened.
    public var countryCode: String?
    public var orgQuota: OrgQuota?
    public var spaceQuota: SpaceQuota?

    public struct OrgQuota: Codable {
        /// The number of public IP addresses that can be assigned across all spaces of the organization.
        public var floatingIpsMax: String?
        /// The number of public IP addresses that are required for one space. If the number of public IP addresses is not available, then a new space cannot be created to be used with IBM Containers.
        public var floatingIpsSpaceDefault: String?
        /// The number of public IP addresses that are currently assigned to the spaces of the organization.
        public var floatingIpsUsage: Int?
        /// The maximum amount of container memory on the compute host that can be assigned across the spaces of the organization.
        public var ramMax: Int?
        /// The amount of container memory that is required to be used for one space. If this amount is not available, then a new space cannot be created to be used with IBM Containers.
        public var ramSpaceDefault: Int?
        /// The amount of container memory that is currently used across all spaces of the organization.
        public var ramUsage: Int?
        /// The number of subnets that were created across all spaces of the organization.
        public var subnetUsage: Int?
        /// The number of subnets that is required to create a new space. If this number is not available, then a new space cannot be created to be used with IBM Containers.
        public var subnetsDefault: Int?
        /// The maximum number of container private subnet that can be created across all spaces of the organization.
        public var subnetsMax: Int?

        public init(floatingIpsMax: String? = nil, floatingIpsSpaceDefault: String? = nil, floatingIpsUsage: Int? = nil, ramMax: Int? = nil, ramSpaceDefault: Int? = nil, ramUsage: Int? = nil, subnetUsage: Int? = nil, subnetsDefault: Int? = nil, subnetsMax: Int? = nil) {
            self.floatingIpsMax = floatingIpsMax
            self.floatingIpsSpaceDefault = floatingIpsSpaceDefault
            self.floatingIpsUsage = floatingIpsUsage
            self.ramMax = ramMax
            self.ramSpaceDefault = ramSpaceDefault
            self.ramUsage = ramUsage
            self.subnetUsage = subnetUsage
            self.subnetsDefault = subnetsDefault
            self.subnetsMax = subnetsMax
        }

        private enum CodingKeys: String, CodingKey {
            case floatingIpsMax = "floating_ips_max"
            case floatingIpsSpaceDefault = "floating_ips_space_default"
            case floatingIpsUsage = "floating_ips_usage"
            case ramMax = "ram_max"
            case ramSpaceDefault = "ram_space_default"
            case ramUsage = "ram_usage"
            case subnetUsage = "subnet_usage"
            case subnetsDefault = "subnets_default"
            case subnetsMax = "subnets_max"
        }
    }

    public struct SpaceQuota: Codable {
        /// The maximum number of public IP addresses that can be allocated to a space.
        public var floatingIpsMax: String?
        /// The maximum amount of container memory that can be shared across all containers that are created in a space.
        public var ramMax: Int?
        /// The maximum number of private subnets that can be created in one space.
        public var subnetsMax: Int?

        public init(floatingIpsMax: String? = nil, ramMax: Int? = nil, subnetsMax: Int? = nil) {
            self.floatingIpsMax = floatingIpsMax
            self.ramMax = ramMax
            self.subnetsMax = subnetsMax
        }

        private enum CodingKeys: String, CodingKey {
            case floatingIpsMax = "floating_ips_max"
            case ramMax = "ram_max"
            case subnetsMax = "subnets_max"
        }
    }

    public init(accountType: String? = nil, countryCode: String? = nil, orgQuota: OrgQuota? = nil, spaceQuota: SpaceQuota? = nil) {
        self.accountType = accountType
        self.countryCode = countryCode
        self.orgQuota = orgQuota
        self.spaceQuota = spaceQuota
    }

    private enum CodingKeys: String, CodingKey {
        case accountType = "account_type"
        case countryCode = "country_code"
        case orgQuota = "org_quota"
        case spaceQuota = "space_quota"
    }
}

public struct ContainersQuotaList: Codable {
    /// The new number of public IP addresses that you want to assign to your space.
    public var floatingIps: Int?
    /// The amount of container memory that you want to assign to your space.
    public var ram: Int?

    public init(floatingIps: Int? = nil, ram: Int? = nil) {
        self.floatingIps = floatingIps
        self.ram = ram
    }

    private enum CodingKeys: String, CodingKey {
        case floatingIps = "floating_ips"
        case ram
    }
}

public struct UpdateVolume: Codable {
    /// The name or ID of the space where you want to provision your existing volume. Run `cf spaces` to retrieve the name, or `cf space <space_name> --guid` to retrieve the space ID.
    public var addSpaces: [String]?
    /// The name or ID of the space from which you want to unprovision your existing volume. Run `cf spaces` to retrieve the name, or `cf space <space_name> --guid` to retrieve the space ID.
    public var removeSpaces: [String]?

    public init(addSpaces: [String]? = nil, removeSpaces: [String]? = nil) {
        self.addSpaces = addSpaces
        self.removeSpaces = removeSpaces
    }
}

public struct ImageDetail: Codable {
    /// The hardware architecture for which the image was built for. The architecture can either be Intel (amd64) or Power (ppc64le).
    public var architecture: String?
    public var config: Config?
    /// ???
    public var container: String?
    public var containerConfig: ContainerConfig?
    /// The time when the image was created.
    public var created: String?
    /// ???
    public var dockerVersion: String?
    /// Unique ID of the image that you inspected.
    public var id: String?
    /// ???
    public var os: String?
    /// The ID of the parent image that was used to build this image.
    public var parent: String?
    /// The real size of the image.
    public var size: Int?
    /// The version of the image
    public var tag: String?
    /// ???
    public var throwaway: String?
    /// The virtual size of the image.
    public var virtualSize: Int?

    public struct Config: Codable {
        public var isArgsEscaped: Bool?
        /// Attaches the container to stderr.
        public var isAttachStderr: Bool?
        /// Attaches the container to stdin.
        public var isAttachStdin: Bool?
        /// Attaches the container to stdout.
        public var isAttachStdout: Bool?
        /// The command and arguments in this list are passed to the container to be executed when the container is started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash. <br>Sample long-running commands:<br>["ping","localhost"]<br>["tail","-f","/dev/null"]<br>["sh","-c","while true; do date; sleep 20; done"]
        public var cmd: [String]?
        /// The domain name to be used for the container.
        public var domainmame: String?
        /// The entrypoint specifies a command that will always be executed when the container starts.
        public var entrypoint: String?
        /// A list of environment variables in the form of key=value pairs. All keys in this list have to be unique. List multiple keys separately and if you include quotation marks, include them around both the environment variable name and the value.
        public var env: [String]?
        /// A list of all udp and tcp ports that have been publicly exposed during the container creation.
        public var exposedPorts: [String]?
        /// The host name of the container provided by Openstack.
        public var hostname: String?
        /// The unique ID of the image.
        public var image: String?
        /// List of custom metadata that was added to the image. Labels serve a wide range of uses, such as adding notes or license requirements to an image. Every label is a key/ value pair.
        public var labels: [String]?
        /// ???
        public var onBuild: [String]?
        /// When set to true, it opens stdin.
        public var isOpenStdin: Bool?
        /// When set to true it closes stdin after the attached client disconnects.
        public var isStdinOnce: Bool?
        /// When set to true, attach standard streams to a tty, including stdin if it is not closed.
        public var isTty: Bool?
        /// The user to be used inside the container.
        public var user: String?
        /// Docker specific. Not supported by IBM Containers. The path to the volume that is created when deploying a container from the image. To use a volume in IBM Containers, you must first create a volume and then mount it to your container during creation.
        public var volumes: String?
        /// The working directory inside the container where specified commands are executed.
        public var workingDir: String?

        public init(isArgsEscaped: Bool? = nil, isAttachStderr: Bool? = nil, isAttachStdin: Bool? = nil, isAttachStdout: Bool? = nil, cmd: [String]? = nil, domainmame: String? = nil, entrypoint: String? = nil, env: [String]? = nil, exposedPorts: [String]? = nil, hostname: String? = nil, image: String? = nil, labels: [String]? = nil, onBuild: [String]? = nil, isOpenStdin: Bool? = nil, isStdinOnce: Bool? = nil, isTty: Bool? = nil, user: String? = nil, volumes: String? = nil, workingDir: String? = nil) {
            self.isArgsEscaped = isArgsEscaped
            self.isAttachStderr = isAttachStderr
            self.isAttachStdin = isAttachStdin
            self.isAttachStdout = isAttachStdout
            self.cmd = cmd
            self.domainmame = domainmame
            self.entrypoint = entrypoint
            self.env = env
            self.exposedPorts = exposedPorts
            self.hostname = hostname
            self.image = image
            self.labels = labels
            self.onBuild = onBuild
            self.isOpenStdin = isOpenStdin
            self.isStdinOnce = isStdinOnce
            self.isTty = isTty
            self.user = user
            self.volumes = volumes
            self.workingDir = workingDir
        }

        private enum CodingKeys: String, CodingKey {
            case isArgsEscaped = "ArgsEscaped"
            case isAttachStderr = "AttachStderr"
            case isAttachStdin = "AttachStdin"
            case isAttachStdout = "AttachStdout"
            case cmd = "Cmd"
            case domainmame = "Domainmame"
            case entrypoint = "Entrypoint"
            case env = "Env"
            case exposedPorts = "ExposedPorts"
            case hostname = "Hostname"
            case image = "Image"
            case labels = "Labels"
            case onBuild = "OnBuild"
            case isOpenStdin = "OpenStdin"
            case isStdinOnce = "StdinOnce"
            case isTty = "Tty"
            case user = "User"
            case volumes = "Volumes"
            case workingDir = "WorkingDir"
        }
    }

    public init(architecture: String? = nil, config: Config? = nil, container: String? = nil, containerConfig: ContainerConfig? = nil, created: String? = nil, dockerVersion: String? = nil, id: String? = nil, os: String? = nil, parent: String? = nil, size: Int? = nil, tag: String? = nil, throwaway: String? = nil, virtualSize: Int? = nil) {
        self.architecture = architecture
        self.config = config
        self.container = container
        self.containerConfig = containerConfig
        self.created = created
        self.dockerVersion = dockerVersion
        self.id = id
        self.os = os
        self.parent = parent
        self.size = size
        self.tag = tag
        self.throwaway = throwaway
        self.virtualSize = virtualSize
    }

    private enum CodingKeys: String, CodingKey {
        case architecture = "Architecture"
        case config = "Config"
        case container = "Container"
        case containerConfig = "ContainerConfig"
        case created = "Created"
        case dockerVersion = "DockerVersion"
        case id = "Id"
        case os = "Os"
        case parent = "Parent"
        case size = "Size"
        case tag = "Tag"
        case throwaway = "Throwaway"
        case virtualSize = "VirtualSize"
    }
}

public struct Fileshare: Codable {
    /// The size of the file share in gigabyte.
    public var capacity: Int?
    /// The timestamp when the file share was created.
    public var createdDate: String?
    /// The name of the file share.
    public var fsName: String?
    /// The path to the volume on the host node.
    public var hostPath: String?
    /// The number of Input/Output operations per second.
    public var iops: Double?
    /// The total number of IOPS considering the size of the file share. The size of your file share in gigabyte multiplied with the number of IOPS indicates the total number of IOPS. The higher the number of IOPS the faster you can read from and write to your volumes.
    public var iopsTotal: Int?
    /// The ID received from softlayer when the file share was ordered to be set up in softlayer.
    public var orderID: String?
    /// The provider of the file share.
    public var provider: String?
    /// The unique ID representing a Bluemix space in which the file share was created.
    public var spaceGuid: String?
    /// The current state of the file share. When the file share is ready to be used, this attribute is set to `READY`.
    public var state: String?
    /// The timestamp when the file share last was updated.
    public var updatedDate: String?

    public init(capacity: Int? = nil, createdDate: String? = nil, fsName: String? = nil, hostPath: String? = nil, iops: Double? = nil, iopsTotal: Int? = nil, orderID: String? = nil, provider: String? = nil, spaceGuid: String? = nil, state: String? = nil, updatedDate: String? = nil) {
        self.capacity = capacity
        self.createdDate = createdDate
        self.fsName = fsName
        self.hostPath = hostPath
        self.iops = iops
        self.iopsTotal = iopsTotal
        self.orderID = orderID
        self.provider = provider
        self.spaceGuid = spaceGuid
        self.state = state
        self.updatedDate = updatedDate
    }

    private enum CodingKeys: String, CodingKey {
        case capacity
        case createdDate = "created_date"
        case fsName
        case hostPath
        case iops
        case iopsTotal
        case orderID = "orderId"
        case provider
        case spaceGuid
        case state
        case updatedDate = "updated_date"
    }
}

public struct GetFileshareDetails: Codable {
    public var fs: [Fileshare]?
    public var fsUsage: [FileshareUsage]?
    /// A list of volume names that are mounted to the file share.
    public var volnames: [String]?

    public init(fs: [Fileshare]? = nil, fsUsage: [FileshareUsage]? = nil, volnames: [String]? = nil) {
        self.fs = fs
        self.fsUsage = fsUsage
        self.volnames = volnames
    }
}

public struct FileshareUsage: Codable {
    /// The amount of space that is available in the file share in gigabytes.
    public var availableSpace: String?
    /// The total size of the file share in gigabytes.
    public var totalSpace: String?
    /// The amount of space that is currently used from the file share.
    public var usedSpace: String?
    /// The amount of space that is currently used from the file share in percentage.
    public var usedSpacePercentage: String?

    public init(availableSpace: String? = nil, totalSpace: String? = nil, usedSpace: String? = nil, usedSpacePercentage: String? = nil) {
        self.availableSpace = availableSpace
        self.totalSpace = totalSpace
        self.usedSpace = usedSpace
        self.usedSpacePercentage = usedSpacePercentage
    }

    private enum CodingKeys: String, CodingKey {
        case availableSpace = "available_space"
        case totalSpace = "total_space"
        case usedSpace = "used_space"
        case usedSpacePercentage = "used_space_percentage"
    }
}

public struct FileshareParam: Codable {
    /// The name of the new file share that you want to create. The name can contain uppercase letters, lowercase letters, numbers, underscores (_), and hyphens (-).
    public var fsName: String
    /// The size of the file share in gigabyte. Run `cf ic volume fs-flavor-list` or call the GET /volumes/fs/flavors/json API endpoint to retrieve a list of available file share sizes.
    public var fsSize: Int
    /// The number of input/output transactions per second. Available values are 0.25, 2 or 4.
    public var fsIOPS: Double

    public init(fsName: String, fsSize: Int, fsIOPS: Double) {
        self.fsName = fsName
        self.fsSize = fsSize
        self.fsIOPS = fsIOPS
    }
}

public enum AnyJSON: Equatable, Codable {
    case string(String)
    case number(Double)
    case object([String: AnyJSON])
    case array([AnyJSON])
    case bool(Bool)

    var value: Any {
        switch self {
        case .string(let string): return string
        case .number(let double): return double
        case .object(let dictionary): return dictionary
        case .array(let array): return array
        case .bool(let bool): return bool
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .array(array): try container.encode(array)
        case let .object(object): try container.encode(object)
        case let .string(string): try container.encode(string)
        case let .number(number): try container.encode(number)
        case let .bool(bool): try container.encode(bool)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let object = try? container.decode([String: AnyJSON].self) {
            self = .object(object)
        } else if let array = try? container.decode([AnyJSON].self) {
            self = .array(array)
        } else if let string = try? container.decode(String.self) {
            self = .string(string)
        } else if let bool = try? container.decode(Bool.self) {
            self = .bool(bool)
        } else if let number = try? container.decode(Double.self) {
            self = .number(number)
        } else {
            throw DecodingError.dataCorrupted(
                .init(codingPath: decoder.codingPath, debugDescription: "Invalid JSON value.")
            )
        }
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
