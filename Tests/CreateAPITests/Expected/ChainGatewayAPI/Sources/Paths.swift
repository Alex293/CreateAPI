// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import Get

extension Paths {
    public static var getToken: GetToken {
        GetToken(path: "/getToken")
    }

    public struct GetToken {
        /// Path: `/getToken`
        public let path: String

        /// GetToken
        ///
        /// Returns information about a specific ERC20 token like name, symbol, decimal places and total supply.
        public func post(_ body: ChainGatewayAPI.GetTokenRequest) -> Request<ChainGatewayAPI.GetToken> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var getLastBlockNumber: GetLastBlockNumber {
        GetLastBlockNumber(path: "/getLastBlockNumber")
    }

    public struct GetLastBlockNumber {
        /// Path: `/getLastBlockNumber`
        public let path: String

        /// GetLastBlockNumber
        ///
        /// Returns the block number of the last mined ethereum block.
        public var post: Request<ChainGatewayAPI.GetLastBlockNumber> {
            .post(path)
        }
    }
}

extension Paths {
    public static var getGasPrice: GetGasPrice {
        GetGasPrice(path: "/getGasPrice")
    }

    public struct GetGasPrice {
        /// Path: `/getGasPrice`
        public let path: String

        /// GetGasPrice
        ///
        /// Returns the current gas price in GWEI.
        public var post: Request<ChainGatewayAPI.GetGasPrice> {
            .post(path)
        }
    }
}

extension Paths {
    public static var getExchangeRate: GetExchangeRate {
        GetExchangeRate(path: "/getExchangeRate")
    }

    public struct GetExchangeRate {
        /// Path: `/getExchangeRate`
        public let path: String

        /// GetExchangeRate
        ///
        /// Returns the current Ethereum price in Euro or US Dollar.
        public func post(_ body: ChainGatewayAPI.GetExchangeRateRequest) -> Request<ChainGatewayAPI.GetExchangeRate> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var getEthereumBalance: GetEthereumBalance {
        GetEthereumBalance(path: "/getEthereumBalance")
    }

    public struct GetEthereumBalance {
        /// Path: `/getEthereumBalance`
        public let path: String

        /// GetEthereumBalance
        ///
        /// Returns the ethereum balance of a given address.
        public func post(_ body: ChainGatewayAPI.GetEthereumBalanceRequest) -> Request<ChainGatewayAPI.GetEthereumBalance> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var getTokenBalance: GetTokenBalance {
        GetTokenBalance(path: "/getTokenBalance")
    }

    public struct GetTokenBalance {
        /// Path: `/getTokenBalance`
        public let path: String

        /// GetTokenBalance
        ///
        /// Returns the token balance of a given address.
        public func post(_ body: ChainGatewayAPI.GetTokenBalanceRequest) -> Request<ChainGatewayAPI.GetTokenBalance> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var getTransactions: GetTransactions {
        GetTransactions(path: "/getTransactions")
    }

    public struct GetTransactions {
        /// Path: `/getTransactions`
        public let path: String

        /// GetTransactions
        ///
        /// Returns information like confirmations, token contract address, amount, gas price and more of a given transaction.
        public func post(_ body: ChainGatewayAPI.GetTransactionsRequest) -> Request<ChainGatewayAPI.GetTransactions> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var getBlock: GetBlock {
        GetBlock(path: "/getBlock")
    }

    public struct GetBlock {
        /// Path: `/getBlock`
        public let path: String

        /// GetBlock
        ///
        /// Returns information of an ethereum block with or without transactions
        public func post(_ body: ChainGatewayAPI.GetBlockRequest) -> Request<ChainGatewayAPI.GetBlock> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var newAddress: NewAddress {
        NewAddress(path: "/newAddress")
    }

    public struct NewAddress {
        /// Path: `/newAddress`
        public let path: String

        /// NewAddress
        ///
        /// Generates a new ethereum addresses you can use to send or receive funds. Do not lose the password! We can't restore access to an address if you lose it.
        public func post(_ body: ChainGatewayAPI.NewAddressRequest) -> Request<ChainGatewayAPI.NewAddress> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var deleteAddress: DeleteAddress {
        DeleteAddress(path: "/deleteAddress")
    }

    public struct DeleteAddress {
        /// Path: `/deleteAddress`
        public let path: String

        /// DeleteAddress
        ///
        /// Deletes an existing ethereum address. Be careful when using this function.
        public func post(_ body: ChainGatewayAPI.DeleteAddressRequest) -> Request<ChainGatewayAPI.DeleteAddress> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var listAddresses: ListAddresses {
        ListAddresses(path: "/listAddresses")
    }

    public struct ListAddresses {
        /// Path: `/listAddresses`
        public let path: String

        /// ListAddresses
        ///
        /// Returns all ethereum addresses created with an account.
        public var post: Request<ChainGatewayAPI.ListAddresses> {
            .post(path)
        }
    }
}

extension Paths {
    public static var importAddress: ImportAddress {
        ImportAddress(path: "/importAddress")
    }

    public struct ImportAddress {
        /// Path: `/importAddress`
        public let path: String

        /// ImportAddress
        ///
        /// Returns all ethereum addresses created with an account.
        public func post(_ body: ChainGatewayAPI.ImportAddressRequest) -> Request<ChainGatewayAPI.ImportAddress> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var exportAddress: ExportAddress {
        ExportAddress(path: "/exportAddress")
    }

    public struct ExportAddress {
        /// Path: `/exportAddress`
        public let path: String

        /// ExportAddress
        ///
        /// Returns all ethereum addresses created with an account.
        public func post(_ body: ChainGatewayAPI.ExportAddressRequest) -> Request<ChainGatewayAPI.ExportAddress> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var subscribeAddress: SubscribeAddress {
        SubscribeAddress(path: "/subscribeAddress")
    }

    public struct SubscribeAddress {
        /// Path: `/subscribeAddress`
        public let path: String

        /// SubscribeAddress
        ///
        /// Creates a new subscription/IPN for the given address (and contractaddress). You will receive a notification to the given url every time a deposit is received. Unsubscribe the address before sending tokens/ETH from it or you won't get reliable notifications anymore.
        public func post(_ body: ChainGatewayAPI.SubscribeAddressRequest) -> Request<ChainGatewayAPI.SubscribeAddress> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var unsubscribeAddress: UnsubscribeAddress {
        UnsubscribeAddress(path: "/unsubscribeAddress")
    }

    public struct UnsubscribeAddress {
        /// Path: `/unsubscribeAddress`
        public let path: String

        /// UnsubscribeAddress
        ///
        /// Deletes an existing subscription/IPN for the given address (and contractaddress).
        public func post(_ body: ChainGatewayAPI.UnsubscribeAddressRequest) -> Request<ChainGatewayAPI.UnsubscribeAddress> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var listSubscribedAddresses: ListSubscribedAddresses {
        ListSubscribedAddresses(path: "/listSubscribedAddresses")
    }

    public struct ListSubscribedAddresses {
        /// Path: `/listSubscribedAddresses`
        public let path: String

        /// ListSubscribedAddresses
        ///
        /// Returns all subscriptions/IPNs created with an account.
        public var post: Request<ChainGatewayAPI.ListSubscribedAddresses> {
            .post(path)
        }
    }
}

extension Paths {
    public static var listFailedIPNs: ListFailedIPNs {
        ListFailedIPNs(path: "/listFailedIPNs")
    }

    public struct ListFailedIPNs {
        /// Path: `/listFailedIPNs`
        public let path: String

        /// ListFailedIPNs
        ///
        /// Returns all subscriptions/IPNs created with an account.
        public var post: Request<ChainGatewayAPI.ListFailedIPNs> {
            .post(path)
        }
    }
}

extension Paths {
    public static var resendFailedIPN: ResendFailedIPN {
        ResendFailedIPN(path: "/resendFailedIPN")
    }

    public struct ResendFailedIPN {
        /// Path: `/resendFailedIPN`
        public let path: String

        /// ResendFailedIPN
        ///
        /// Returns all subscriptions/IPNs created with an account.
        public func post(_ body: ChainGatewayAPI.ResendFailedIPNRequest) -> Request<ChainGatewayAPI.ResendFailedIPN> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var sendEthereum: SendEthereum {
        SendEthereum(path: "/sendEthereum")
    }

    public struct SendEthereum {
        /// Path: `/sendEthereum`
        public let path: String

        /// SendEthereum
        ///
        /// Sends ethereum from an address controlled by the account to a specified receiver address.
        public func post(_ body: ChainGatewayAPI.SendEthereumRequest) -> Request<ChainGatewayAPI.SendEthereum> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var clearAddress: ClearAddress {
        ClearAddress(path: "/clearAddress")
    }

    public struct ClearAddress {
        /// Path: `/clearAddress`
        public let path: String

        /// ClearAddress
        ///
        /// Sends all available ethereum funds of an address to a specified receiver address.
        public func post(_ body: ChainGatewayAPI.ClearAddressRequest) -> Request<ChainGatewayAPI.ClearAddress> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var sendToken: SendToken {
        SendToken(path: "/sendToken")
    }

    public struct SendToken {
        /// Path: `/sendToken`
        public let path: String

        /// SendToken
        ///
        /// Sends ERC20 tokens from an address controlled by the account to a specified receiver address. The token contract address is needed to specify the token. The use of the identifier parameter is recommend and awaits an unique string. Whenever a transaction is beeing sent, the identifier is checked and the transaction gets dropped if there is one with that identifier already.
        public func post(_ body: ChainGatewayAPI.SendTokenRequest) -> Request<ChainGatewayAPI.SendToken> {
            .post(path, body: body)
        }
    }
}

public enum Paths {}
