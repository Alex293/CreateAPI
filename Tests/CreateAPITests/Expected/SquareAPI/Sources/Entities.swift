// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation

/// ACH-specific details about `BANK_ACCOUNT` type payments with the `transfer_type` of `ACH`.
public struct ACHDetails: Codable {
    /// The last few digits of the bank account number.
    public var accountNumberSuffix: String?
    /// The type of the bank account performing the transfer. The account type can be `CHECKING`,
    /// `SAVINGS`, or `UNKNOWN`.
    public var accountType: String?
    /// The routing number for the bank account.
    public var routingNumber: String?

    public init(accountNumberSuffix: String? = nil, accountType: String? = nil, routingNumber: String? = nil) {
        self.accountNumberSuffix = accountNumberSuffix
        self.accountType = accountType
        self.routingNumber = routingNumber
    }

    private enum CodingKeys: String, CodingKey {
        case accountNumberSuffix = "account_number_suffix"
        case accountType = "account_type"
        case routingNumber = "routing_number"
    }
}

/// Defines the request parameters for the `AcceptDispute` endpoint.
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct AcceptDisputeRequest: Codable {
    public init() {}
}

/// Defines the fields in an `AcceptDispute` response.
///
/// Example:
///
/// {
///   "dispute" : {
///     "amount_money" : {
///       "amount" : 2000,
///       "currency" : "USD"
///     },
///     "brand_dispute_id" : "100000282394",
///     "card_brand" : "VISA",
///     "created_at" : "2018-10-18T15:59:13.613Z",
///     "disputed_payments" : [
///       {
///         "payment_id" : "6Ee10wvqhfipStz297mtUhBXvaB"
///       }
///     ],
///     "due_at" : "2018-11-01T00:00:00.000Z",
///     "id" : "XDgyFu7yo1E2S5lQGGpYn",
///     "reason" : "NO_KNOWLEDGE",
///     "state" : "LOST",
///     "updated_at" : "2018-10-18T15:59:13.613Z"
///   }
/// }
public struct AcceptDisputeResponse: Codable {
    /// Represents a dispute a cardholder initiated with their bank.
    public var dispute: Dispute?
    /// Information about errors encountered during the request.
    public var errors: [Error]?

    public init(dispute: Dispute? = nil, errors: [Error]? = nil) {
        self.dispute = dispute
        self.errors = errors
    }
}

/// A request to accumulate points for a purchase.
///
/// Example:
///
/// {
///   "request_body" : {
///     "accumulate_points" : {
///       "order_id" : "RFZfrdtm3mhO1oGzf5Cx7fEMsmGZY"
///     },
///     "idempotency_key" : "58b90739-c3e8-4b11-85f7-e636d48d72cb",
///     "location_id" : "P034NEENMD09F"
///   },
///   "request_params" : "?account_id=5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd"
/// }
public struct AccumulateLoyaltyPointsRequest: Codable {
    /// Provides metadata when the event `type` is `ACCUMULATE_POINTS`.
    public var accumulatePoints: LoyaltyEventAccumulatePoints
    /// A unique string that identifies the `AccumulateLoyaltyPoints` request.
    /// Keys can be any valid string but must be unique for every request.
    public var idempotencyKey: String
    /// The [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the purchase was made.
    public var locationID: String

    public init(accumulatePoints: LoyaltyEventAccumulatePoints, idempotencyKey: String, locationID: String) {
        self.accumulatePoints = accumulatePoints
        self.idempotencyKey = idempotencyKey
        self.locationID = locationID
    }

    private enum CodingKeys: String, CodingKey {
        case accumulatePoints = "accumulate_points"
        case idempotencyKey = "idempotency_key"
        case locationID = "location_id"
    }
}

/// A response containing the resulting loyalty event.
///
/// Example:
///
/// {
///   "event" : {
///     "accumulate_points" : {
///       "loyalty_program_id" : "d619f755-2d17-41f3-990d-c04ecedd64dd",
///       "order_id" : "RFZfrdtm3mhO1oGzf5Cx7fEMsmGZY",
///       "points" : 6
///     },
///     "created_at" : "2020-05-08T21:41:12Z",
///     "id" : "ee46aafd-1af6-3695-a385-276e2ef0be26",
///     "location_id" : "P034NEENMD09F",
///     "loyalty_account_id" : "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
///     "source" : "LOYALTY_API",
///     "type" : "ACCUMULATE_POINTS"
///   }
/// }
public struct AccumulateLoyaltyPointsResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Provides information about a loyalty event.
    /// For more information, see [Loyalty events](https://developer.squareup.com/docs/loyalty-api/overview/#loyalty-events).
    public var event: LoyaltyEvent?

    public init(errors: [Error]? = nil, event: LoyaltyEvent? = nil) {
        self.errors = errors
        self.event = event
    }
}

public enum ActionCancelReason: String, Codable, CaseIterable {
    case buyerCanceled = "BUYER_CANCELED"
    case sellerCanceled = "SELLER_CANCELED"
    case timedOut = "TIMED_OUT"
}

/// Defines the fields that are included in the request body of
/// a request to the [AddGroupToCustomer](https://developer.squareup.com/reference/square_2021-08-18/customers-api/add-group-to-customer) endpoint.
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct AddGroupToCustomerRequest: Codable {
    public init() {}
}

/// Defines the fields that are included in the response body of
/// a request to the [AddGroupToCustomer](https://developer.squareup.com/reference/square_2021-08-18/customers-api/add-group-to-customer) endpoint.
///
/// Example:
///
/// {
/// 
/// }
public struct AddGroupToCustomerResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(errors: [Error]? = nil) {
        self.errors = errors
    }
}

/// Represents an additional recipient (other than the merchant) receiving a portion of this tender.
public struct AdditionalRecipient: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money
    /// The description of the additional recipient.
    public var description: String?
    /// The location ID for a recipient (other than the merchant) receiving a portion of this tender.
    public var locationID: String
    /// The unique ID for this [AdditionalRecipientReceivable](https://developer.squareup.com/reference/square_2021-08-18/objects/AdditionalRecipientReceivable), assigned by the server.
    public var receivableID: String?

    public init(amountMoney: Money, description: String? = nil, locationID: String, receivableID: String? = nil) {
        self.amountMoney = amountMoney
        self.description = description
        self.locationID = locationID
        self.receivableID = receivableID
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
        case description
        case locationID = "location_id"
        case receivableID = "receivable_id"
    }
}

/// Represents a postal address in a country. The address format is based
/// on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
/// see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
/// This format has dedicated fields for four address components: postal code,
/// locality (city), administrative district (state, prefecture, or province), and
/// sublocality (town or village). These components have dedicated fields in the
/// `Address` object because software sometimes behaves differently based on them.
/// For example, sales tax software may charge different amounts of sales tax
/// based on the postal code, and some software is only available in
/// certain states due to compliance reasons.
/// 
/// For the remaining address components, the `Address` type provides the
/// `address_line_1` and `address_line_2` fields for free-form data entry.
/// These fields are free-form because the remaining address components have
/// too many variations around the world and typical software does not parse
/// these components. These fields enable users to enter anything they want.
/// 
/// Note that, in the current implementation, all other `Address` type fields are blank.
/// These include `address_line_3`, `sublocality_2`, `sublocality_3`,
/// `administrative_district_level_2`, `administrative_district_level_3`,
/// `first_name`, `last_name`, and `organization`.
/// 
/// When it comes to localization, the seller's language preferences
/// (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
/// are ignored for addresses. Even though Square products (such as Square Point of Sale
/// and the Seller Dashboard) mostly use a seller's language preference in
/// communication, when it comes to addresses, they will use English for a US address,
/// Japanese for an address in Japan, and so on.
public struct Address: Codable {
    /// The first line of the address.
    /// 
    /// Fields that start with `address_line` provide the address's most specific
    /// details, like street number, street name, and building name. They do *not*
    /// provide less specific details like city, state/province, or country (these
    /// details are provided in other fields).
    public var addressLine1: String?
    /// The second line of the address, if any.
    public var addressLine2: String?
    /// The third line of the address, if any.
    public var addressLine3: String?
    /// A civil entity within the address's country. In the US, this
    /// is the state.
    public var administrativeDistrictLevel1: String?
    /// A civil entity within the address's `administrative_district_level_1`.
    /// In the US, this is the county.
    public var administrativeDistrictLevel2: String?
    /// A civil entity within the address's `administrative_district_level_2`,
    /// if any.
    public var administrativeDistrictLevel3: String?
    /// The address's country, in ISO 3166-1-alpha-2 format.
    public var country: String?
    /// Optional first name when it's representing recipient.
    public var firstName: String?
    /// Optional last name when it's representing recipient.
    public var lastName: String?
    /// The city or town of the address.
    public var locality: String?
    /// Optional organization name when it's representing recipient.
    public var organization: String?
    /// The address's postal code.
    public var postalCode: String?
    /// A civil region within the address's `locality`, if any.
    public var sublocality: String?
    /// A civil region within the address's `sublocality`, if any.
    public var sublocality2: String?
    /// A civil region within the address's `sublocality_2`, if any.
    public var sublocality3: String?

    public init(addressLine1: String? = nil, addressLine2: String? = nil, addressLine3: String? = nil, administrativeDistrictLevel1: String? = nil, administrativeDistrictLevel2: String? = nil, administrativeDistrictLevel3: String? = nil, country: String? = nil, firstName: String? = nil, lastName: String? = nil, locality: String? = nil, organization: String? = nil, postalCode: String? = nil, sublocality: String? = nil, sublocality2: String? = nil, sublocality3: String? = nil) {
        self.addressLine1 = addressLine1
        self.addressLine2 = addressLine2
        self.addressLine3 = addressLine3
        self.administrativeDistrictLevel1 = administrativeDistrictLevel1
        self.administrativeDistrictLevel2 = administrativeDistrictLevel2
        self.administrativeDistrictLevel3 = administrativeDistrictLevel3
        self.country = country
        self.firstName = firstName
        self.lastName = lastName
        self.locality = locality
        self.organization = organization
        self.postalCode = postalCode
        self.sublocality = sublocality
        self.sublocality2 = sublocality2
        self.sublocality3 = sublocality3
    }

    private enum CodingKeys: String, CodingKey {
        case addressLine1 = "address_line_1"
        case addressLine2 = "address_line_2"
        case addressLine3 = "address_line_3"
        case administrativeDistrictLevel1 = "administrative_district_level_1"
        case administrativeDistrictLevel2 = "administrative_district_level_2"
        case administrativeDistrictLevel3 = "administrative_district_level_3"
        case country
        case firstName = "first_name"
        case lastName = "last_name"
        case locality
        case organization
        case postalCode = "postal_code"
        case sublocality
        case sublocality2 = "sublocality_2"
        case sublocality3 = "sublocality_3"
    }
}

/// A request to adjust (add or subtract) points manually.
///
/// Example:
///
/// {
///   "request_body" : {
///     "adjust_points" : {
///       "points" : 10,
///       "reason" : "Complimentary points"
///     },
///     "idempotency_key" : "bc29a517-3dc9-450e-aa76-fae39ee849d1"
///   },
///   "request_params" : "?account_id=5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd"
/// }
public struct AdjustLoyaltyPointsRequest: Codable {
    /// Provides metadata when the event `type` is `ADJUST_POINTS`.
    public var adjustPoints: LoyaltyEventAdjustPoints
    /// A unique string that identifies this `AdjustLoyaltyPoints` request.
    /// Keys can be any valid string, but must be unique for every request.
    public var idempotencyKey: String

    public init(adjustPoints: LoyaltyEventAdjustPoints, idempotencyKey: String) {
        self.adjustPoints = adjustPoints
        self.idempotencyKey = idempotencyKey
    }

    private enum CodingKeys: String, CodingKey {
        case adjustPoints = "adjust_points"
        case idempotencyKey = "idempotency_key"
    }
}

/// A response that includes the loyalty event that
/// resulted from the successful API call.
///
/// Example:
///
/// {
///   "event" : {
///     "adjust_points" : {
///       "loyalty_program_id" : "d619f755-2d17-41f3-990d-c04ecedd64dd",
///       "points" : 10,
///       "reason" : "Complimentary points"
///     },
///     "created_at" : "2020-05-08T21:42:32Z",
///     "id" : "613a6fca-8d67-39d0-bad2-3b4bc45c8637",
///     "loyalty_account_id" : "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
///     "source" : "LOYALTY_API",
///     "type" : "ADJUST_POINTS"
///   }
/// }
public struct AdjustLoyaltyPointsResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Provides information about a loyalty event.
    /// For more information, see [Loyalty events](https://developer.squareup.com/docs/loyalty-api/overview/#loyalty-events).
    public var event: LoyaltyEvent?

    public init(errors: [Error]? = nil, event: LoyaltyEvent? = nil) {
        self.errors = errors
        self.event = event
    }
}

/// Defines an appointment segment of a booking.
public struct AppointmentSegment: Codable {
    /// The time span in minutes of an appointment segment.
    public var durationMinutes: Int
    /// The ID of the [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) object representing the service booked in this segment.
    public var serviceVariationID: String
    /// The current version of the item variation representing the service booked in this segment.
    public var serviceVariationVersion: Int
    /// The ID of the [TeamMember](https://developer.squareup.com/reference/square_2021-08-18/objects/TeamMember) object representing the team member booked in this segment.
    public var teamMemberID: String

    public init(durationMinutes: Int, serviceVariationID: String, serviceVariationVersion: Int, teamMemberID: String) {
        self.durationMinutes = durationMinutes
        self.serviceVariationID = serviceVariationID
        self.serviceVariationVersion = serviceVariationVersion
        self.teamMemberID = teamMemberID
    }

    private enum CodingKeys: String, CodingKey {
        case durationMinutes = "duration_minutes"
        case serviceVariationID = "service_variation_id"
        case serviceVariationVersion = "service_variation_version"
        case teamMemberID = "team_member_id"
    }
}

/// Describes a slot available for booking, encapsulating appointment segments, the location and starting time.
public struct Availability: Codable {
    /// The list of appointment segments available for booking
    public var appointmentSegments: [AppointmentSegment]?
    /// The ID of the location available for booking.
    public var locationID: String?
    /// The RFC 3339 timestamp specifying the beginning time of the slot available for booking.
    public var startAt: String?

    public init(appointmentSegments: [AppointmentSegment]? = nil, locationID: String? = nil, startAt: String? = nil) {
        self.appointmentSegments = appointmentSegments
        self.locationID = locationID
        self.startAt = startAt
    }

    private enum CodingKeys: String, CodingKey {
        case appointmentSegments = "appointment_segments"
        case locationID = "location_id"
        case startAt = "start_at"
    }
}

/// Represents a bank account. For more information about
/// linking a bank account to a Square account, see
/// [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
public struct BankAccount: Codable {
    /// The last few digits of the account number.
    public var accountNumberSuffix: String
    /// The financial purpose of the associated bank account.
    public var accountType: String
    /// Read only. Name of actual financial institution.
    /// For example "Bank of America".
    public var bankName: String?
    /// The ISO 3166 Alpha-2 country code where the bank account is based.
    public var country: String
    /// Indicates whether it is possible for Square to send money to this bank account.
    public var isCreditable: Bool
    /// The 3-character ISO 4217 currency code indicating the operating
    /// currency of the bank account. For example, the currency code for US dollars
    /// is `USD`.
    public var currency: String
    /// Reference identifier that will be displayed to UK bank account owners
    /// when collecting direct debit authorization. Only required for UK bank accounts.
    public var debitMandateReferenceID: String?
    /// Indicates whether it is possible for Square to take money from this
    /// bank account.
    public var isDebitable: Bool
    /// A Square-assigned, unique identifier for the bank account based on the
    /// account information. The account fingerprint can be used to compare account
    /// entries and determine if the they represent the same real-world bank account.
    public var fingerprint: String?
    /// Name of the account holder. This name must match the name
    /// on the targeted bank account record.
    public var holderName: String
    /// The unique, Square-issued identifier for the bank account.
    public var id: String
    /// The location to which the bank account belongs.
    public var locationID: String?
    /// Primary identifier for the bank. For more information, see
    /// [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
    public var primaryBankIdentificationNumber: String
    /// Client-provided identifier for linking the banking account to an entity
    /// in a third-party system (for example, a bank account number or a user identifier).
    public var referenceID: String?
    /// Secondary identifier for the bank. For more information, see
    /// [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
    public var secondaryBankIdentificationNumber: String?
    /// Read-only. The current verification status of this BankAccount object.
    public var status: String
    /// The current version of the `BankAccount`.
    public var version: Int?

    public init(accountNumberSuffix: String, accountType: String, bankName: String? = nil, country: String, isCreditable: Bool, currency: String, debitMandateReferenceID: String? = nil, isDebitable: Bool, fingerprint: String? = nil, holderName: String, id: String, locationID: String? = nil, primaryBankIdentificationNumber: String, referenceID: String? = nil, secondaryBankIdentificationNumber: String? = nil, status: String, version: Int? = nil) {
        self.accountNumberSuffix = accountNumberSuffix
        self.accountType = accountType
        self.bankName = bankName
        self.country = country
        self.isCreditable = isCreditable
        self.currency = currency
        self.debitMandateReferenceID = debitMandateReferenceID
        self.isDebitable = isDebitable
        self.fingerprint = fingerprint
        self.holderName = holderName
        self.id = id
        self.locationID = locationID
        self.primaryBankIdentificationNumber = primaryBankIdentificationNumber
        self.referenceID = referenceID
        self.secondaryBankIdentificationNumber = secondaryBankIdentificationNumber
        self.status = status
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case accountNumberSuffix = "account_number_suffix"
        case accountType = "account_type"
        case bankName = "bank_name"
        case country
        case isCreditable = "creditable"
        case currency
        case debitMandateReferenceID = "debit_mandate_reference_id"
        case isDebitable = "debitable"
        case fingerprint
        case holderName = "holder_name"
        case id
        case locationID = "location_id"
        case primaryBankIdentificationNumber = "primary_bank_identification_number"
        case referenceID = "reference_id"
        case secondaryBankIdentificationNumber = "secondary_bank_identification_number"
        case status
        case version
    }
}

/// Additional details about BANK_ACCOUNT type payments.
public struct BankAccountPaymentDetails: Codable {
    /// The ownership type of the bank account performing the transfer.
    /// The type can be `INDIVIDUAL`, `COMPANY`, or `UNKNOWN`.
    public var accountOwnershipType: String?
    /// ACH-specific details about `BANK_ACCOUNT` type payments with the `transfer_type` of `ACH`.
    public var achDetails: ACHDetails?
    /// The name of the bank associated with the bank account.
    public var bankName: String?
    /// The two-letter ISO code representing the country the bank account is located in.
    public var country: String?
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// Uniquely identifies the bank account for this seller and can be used
    /// to determine if payments are from the same bank account.
    public var fingerprint: String?
    /// The statement description as sent to the bank.
    public var statementDescription: String?
    /// The type of the bank transfer. The type can be `ACH` or `UNKNOWN`.
    public var transferType: String?

    public init(accountOwnershipType: String? = nil, achDetails: ACHDetails? = nil, bankName: String? = nil, country: String? = nil, errors: [Error]? = nil, fingerprint: String? = nil, statementDescription: String? = nil, transferType: String? = nil) {
        self.accountOwnershipType = accountOwnershipType
        self.achDetails = achDetails
        self.bankName = bankName
        self.country = country
        self.errors = errors
        self.fingerprint = fingerprint
        self.statementDescription = statementDescription
        self.transferType = transferType
    }

    private enum CodingKeys: String, CodingKey {
        case accountOwnershipType = "account_ownership_type"
        case achDetails = "ach_details"
        case bankName = "bank_name"
        case country
        case errors
        case fingerprint
        case statementDescription = "statement_description"
        case transferType = "transfer_type"
    }
}

/// Indicates the current verification status of a `BankAccount` object.
public enum BankAccountStatus: String, Codable, CaseIterable {
    case verificationInProgress = "VERIFICATION_IN_PROGRESS"
    case verified = "VERIFIED"
    case disabled = "DISABLED"
}

/// Indicates the financial purpose of the bank account.
public enum BankAccountType: String, Codable, CaseIterable {
    case checking = "CHECKING"
    case savings = "SAVINGS"
    case investment = "INVESTMENT"
    case other = "OTHER"
    case businessChecking = "BUSINESS_CHECKING"
}

/// Example:
///
/// {
///   "request_body" : {
///     "changes" : [
///       {
///         "physical_count" : {
///           "catalog_object_id" : "W62UWFY35CWMYGVWK6TWJDNI",
///           "employee_id" : "LRK57NSQ5X7PUD05",
///           "location_id" : "C6W5YS5QM06F5",
///           "occurred_at" : "2016-11-16T22:25:24.878Z",
///           "quantity" : "53",
///           "reference_id" : "1536bfbf-efed-48bf-b17d-a197141b2a92",
///           "state" : "IN_STOCK"
///         },
///         "type" : "PHYSICAL_COUNT"
///       }
///     ],
///     "idempotency_key" : "8fc6a5b0-9fe8-4b46-b46b-2ef95793abbe",
///     "ignore_unchanged_counts" : true
///   }
/// }
public struct BatchChangeInventoryRequest: Codable {
    /// The set of physical counts and inventory adjustments to be made.
    /// Changes are applied based on the client-supplied timestamp and may be sent
    /// out of order.
    public var changes: [InventoryChange]?
    /// A client-supplied, universally unique identifier (UUID) for the
    /// request.
    /// 
    /// See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) in the
    /// [API Development 101](https://developer.squareup.com/docs/basics/api101/overview) section for more
    /// information.
    public var idempotencyKey: String
    /// Indicates whether the current physical count should be ignored if
    /// the quantity is unchanged since the last physical count. Default: `true`.
    public var isIgnoreUnchangedCounts: Bool?

    public init(changes: [InventoryChange]? = nil, idempotencyKey: String, isIgnoreUnchangedCounts: Bool? = nil) {
        self.changes = changes
        self.idempotencyKey = idempotencyKey
        self.isIgnoreUnchangedCounts = isIgnoreUnchangedCounts
    }

    private enum CodingKeys: String, CodingKey {
        case changes
        case idempotencyKey = "idempotency_key"
        case isIgnoreUnchangedCounts = "ignore_unchanged_counts"
    }
}

/// Example:
///
/// {
///   "counts" : [
///     {
///       "calculated_at" : "2016-11-16T22:28:01.223Z",
///       "catalog_object_id" : "W62UWFY35CWMYGVWK6TWJDNI",
///       "catalog_object_type" : "ITEM_VARIATION",
///       "location_id" : "C6W5YS5QM06F5",
///       "quantity" : "53",
///       "state" : "IN_STOCK"
///     }
///   ],
///   "errors" : [
/// 
///   ]
/// }
public struct BatchChangeInventoryResponse: Codable {
    /// Changes created for the request.
    public var changes: [InventoryChange]?
    /// The current counts for all objects referenced in the request.
    public var counts: [InventoryCount]?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(changes: [InventoryChange]? = nil, counts: [InventoryCount]? = nil, errors: [Error]? = nil) {
        self.changes = changes
        self.counts = counts
        self.errors = errors
    }
}

/// Example:
///
/// {
///   "request_body" : {
///     "object_ids" : [
///       "W62UWFY35CWMYGVWK6TWJDNI",
///       "AA27W3M2GGTF3H6AVPNB77CK"
///     ]
///   }
/// }
public struct BatchDeleteCatalogObjectsRequest: Codable {
    /// The IDs of the CatalogObjects to be deleted. When an object is deleted, other objects
    /// in the graph that depend on that object will be deleted as well (for example, deleting a
    /// CatalogItem will delete its CatalogItemVariation.
    public var objectIDs: [String]?

    public init(objectIDs: [String]? = nil) {
        self.objectIDs = objectIDs
    }

    private enum CodingKeys: String, CodingKey {
        case objectIDs = "object_ids"
    }
}

/// Example:
///
/// {
///   "deleted_at" : "2016-11-16T22:25:24.878Z",
///   "deleted_object_ids" : [
///     "W62UWFY35CWMYGVWK6TWJDNI",
///     "AA27W3M2GGTF3H6AVPNB77CK"
///   ]
/// }
public struct BatchDeleteCatalogObjectsResponse: Codable {
    /// The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) of this deletion in RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
    public var deletedAt: String?
    /// The IDs of all CatalogObjects deleted by this request.
    public var deletedObjectIDs: [String]?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(deletedAt: String? = nil, deletedObjectIDs: [String]? = nil, errors: [Error]? = nil) {
        self.deletedAt = deletedAt
        self.deletedObjectIDs = deletedObjectIDs
        self.errors = errors
    }

    private enum CodingKeys: String, CodingKey {
        case deletedAt = "deleted_at"
        case deletedObjectIDs = "deleted_object_ids"
        case errors
    }
}

/// Example:
///
/// {
///   "request_body" : {
///     "include_related_objects" : true,
///     "object_ids" : [
///       "W62UWFY35CWMYGVWK6TWJDNI",
///       "AA27W3M2GGTF3H6AVPNB77CK"
///     ]
///   }
/// }
public struct BatchRetrieveCatalogObjectsRequest: Codable {
    /// The specific version of the catalog objects to be included in the response.
    /// This allows you to retrieve historical versions of objects. The specified version value is matched against
    /// the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s' `version` attribute.
    public var catalogVersion: Int?
    /// If `true`, the response will include additional objects that are related to the
    /// requested objects, as follows:
    /// 
    /// If the `objects` field of the response contains a CatalogItem, its associated
    /// CatalogCategory objects, CatalogTax objects, CatalogImage objects and
    /// CatalogModifierLists will be returned in the `related_objects` field of the
    /// response. If the `objects` field of the response contains a CatalogItemVariation,
    /// its parent CatalogItem will be returned in the `related_objects` field of
    /// the response.
    public var isIncludeRelatedObjects: Bool?
    /// The IDs of the CatalogObjects to be retrieved.
    public var objectIDs: [String]

    public init(catalogVersion: Int? = nil, isIncludeRelatedObjects: Bool? = nil, objectIDs: [String]) {
        self.catalogVersion = catalogVersion
        self.isIncludeRelatedObjects = isIncludeRelatedObjects
        self.objectIDs = objectIDs
    }

    private enum CodingKeys: String, CodingKey {
        case catalogVersion = "catalog_version"
        case isIncludeRelatedObjects = "include_related_objects"
        case objectIDs = "object_ids"
    }
}

/// Example:
///
/// {
///   "objects" : [
///     {
///       "id" : "W62UWFY35CWMYGVWK6TWJDNI",
///       "is_deleted" : false,
///       "item_data" : {
///         "category_id" : "BJNQCF2FJ6S6UIDT65ABHLRX",
///         "description" : "Hot Leaf Juice",
///         "name" : "Tea",
///         "tax_ids" : [
///           "HURXQOOAIC4IZSI2BEXQRYFY"
///         ],
///         "variations" : [
///           {
///             "id" : "2TZFAOHWGG7PAK2QEXWYPZSP",
///             "is_deleted" : false,
///             "item_variation_data" : {
///               "item_id" : "W62UWFY35CWMYGVWK6TWJDNI",
///               "name" : "Mug",
///               "ordinal" : 0,
///               "price_money" : {
///                 "amount" : 150,
///                 "currency" : "USD"
///               },
///               "pricing_type" : "FIXED_PRICING"
///             },
///             "present_at_all_locations" : true,
///             "type" : "ITEM_VARIATION",
///             "updated_at" : "2016-11-16T22:25:24.878Z",
///             "version" : 1479335124878
///           }
///         ]
///       },
///       "present_at_all_locations" : true,
///       "type" : "ITEM",
///       "updated_at" : "2016-11-16T22:25:24.878Z",
///       "version" : 1479335124878
///     },
///     {
///       "id" : "AA27W3M2GGTF3H6AVPNB77CK",
///       "is_deleted" : false,
///       "item_data" : {
///         "category_id" : "BJNQCF2FJ6S6UIDT65ABHLRX",
///         "description" : "Hot Bean Juice",
///         "name" : "Coffee",
///         "tax_ids" : [
///           "HURXQOOAIC4IZSI2BEXQRYFY"
///         ],
///         "variations" : [
///           {
///             "id" : "LBTYIHNHU52WOIHWT7SNRIYH",
///             "is_deleted" : false,
///             "item_variation_data" : {
///               "item_id" : "AA27W3M2GGTF3H6AVPNB77CK",
///               "name" : "Regular",
///               "ordinal" : 0,
///               "price_money" : {
///                 "amount" : 250,
///                 "currency" : "USD"
///               },
///               "pricing_type" : "FIXED_PRICING"
///             },
///             "present_at_all_locations" : true,
///             "type" : "ITEM_VARIATION",
///             "updated_at" : "2016-11-16T22:25:24.878Z",
///             "version" : 1479335124878
///           },
///           {
///             "id" : "PKYIC7HGGKW5CYVSCVDEIMHY",
///             "is_deleted" : false,
///             "item_variation_data" : {
///               "item_id" : "AA27W3M2GGTF3H6AVPNB77CK",
///               "name" : "Large",
///               "ordinal" : 1,
///               "price_money" : {
///                 "amount" : 350,
///                 "currency" : "USD"
///               },
///               "pricing_type" : "FIXED_PRICING"
///             },
///             "present_at_all_locations" : true,
///             "type" : "ITEM_VARIATION",
///             "updated_at" : "2016-11-16T22:25:24.878Z",
///             "version" : 1479335124878
///           }
///         ]
///       },
///       "present_at_all_locations" : true,
///       "type" : "ITEM",
///       "updated_at" : "2016-11-16T22:25:24.878Z",
///       "version" : 1479335124878
///     }
///   ],
///   "related_objects" : [
///     {
///       "category_data" : {
///         "name" : "Beverages"
///       },
///       "id" : "BJNQCF2FJ6S6UIDT65ABHLRX",
///       "is_deleted" : false,
///       "present_at_all_locations" : true,
///       "type" : "CATEGORY",
///       "updated_at" : "2016-11-16T22:25:24.878Z",
///       "version" : 1479335124878
///     },
///     {
///       "id" : "HURXQOOAIC4IZSI2BEXQRYFY",
///       "is_deleted" : false,
///       "present_at_all_locations" : true,
///       "tax_data" : {
///         "calculation_phase" : "TAX_SUBTOTAL_PHASE",
///         "enabled" : true,
///         "inclusion_type" : "ADDITIVE",
///         "name" : "Sales Tax",
///         "percentage" : "5.0"
///       },
///       "type" : "TAX",
///       "updated_at" : "2016-11-16T22:25:24.878Z",
///       "version" : 1479335124878
///     }
///   ]
/// }
public struct BatchRetrieveCatalogObjectsResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// A list of [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s returned.
    public var objects: [CatalogObject]?
    /// A list of [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s referenced by the object in the `objects` field.
    public var relatedObjects: [CatalogObject]?

    public init(errors: [Error]? = nil, objects: [CatalogObject]? = nil, relatedObjects: [CatalogObject]? = nil) {
        self.errors = errors
        self.objects = objects
        self.relatedObjects = relatedObjects
    }

    private enum CodingKeys: String, CodingKey {
        case errors
        case objects
        case relatedObjects = "related_objects"
    }
}

/// Example:
///
/// {
///   "request_body" : {
///     "catalog_object_ids" : [
///       "W62UWFY35CWMYGVWK6TWJDNI"
///     ],
///     "location_ids" : [
///       "C6W5YS5QM06F5"
///     ],
///     "states" : [
///       "IN_STOCK"
///     ],
///     "types" : [
///       "PHYSICAL_COUNT"
///     ],
///     "updated_after" : "2016-11-01T00:00:00.000Z",
///     "updated_before" : "2016-12-01T00:00:00.000Z"
///   }
/// }
public struct BatchRetrieveInventoryChangesRequest: Codable {
    /// The filter to return results by `CatalogObject` ID.
    /// The filter is only applicable when set. The default value is null.
    public var catalogObjectIDs: [String]?
    /// A pagination cursor returned by a previous call to this endpoint.
    /// Provide this to retrieve the next set of results for the original query.
    /// 
    /// See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
    public var cursor: String?
    /// The filter to return results by `Location` ID.
    /// The filter is only applicable when set. The default value is null.
    public var locationIDs: [String]?
    /// The filter to return `ADJUSTMENT` query results by
    /// `InventoryState`. This filter is only applied when set.
    /// The default value is null.
    public var states: [String]?
    /// The filter to return results by `InventoryChangeType` values other than `TRANSFER`.
    /// The default value is `[PHYSICAL_COUNT, ADJUSTMENT]`.
    public var types: [String]?
    /// The filter to return results with their `calculated_at` value
    /// after the given time as specified in an RFC 3339 timestamp.
    /// The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).
    public var updatedAfter: String?
    /// The filter to return results with their `created_at` or `calculated_at` value
    /// strictly before the given time as specified in an RFC 3339 timestamp.
    /// The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).
    public var updatedBefore: String?

    public init(catalogObjectIDs: [String]? = nil, cursor: String? = nil, locationIDs: [String]? = nil, states: [String]? = nil, types: [String]? = nil, updatedAfter: String? = nil, updatedBefore: String? = nil) {
        self.catalogObjectIDs = catalogObjectIDs
        self.cursor = cursor
        self.locationIDs = locationIDs
        self.states = states
        self.types = types
        self.updatedAfter = updatedAfter
        self.updatedBefore = updatedBefore
    }

    private enum CodingKeys: String, CodingKey {
        case catalogObjectIDs = "catalog_object_ids"
        case cursor
        case locationIDs = "location_ids"
        case states
        case types
        case updatedAfter = "updated_after"
        case updatedBefore = "updated_before"
    }
}

/// Example:
///
/// {
///   "changes" : [
///     {
///       "physical_count" : {
///         "catalog_object_id" : "W62UWFY35CWMYGVWK6TWJDNI",
///         "catalog_object_type" : "ITEM_VARIATION",
///         "created_at" : "2016-11-16T22:25:24.878Z",
///         "employee_id" : "LRK57NSQ5X7PUD05",
///         "id" : "46YDTW253DWGGK9HMAE6XCAO",
///         "location_id" : "C6W5YS5QM06F5",
///         "occurred_at" : "2016-11-16T22:24:49.028Z",
///         "quantity" : "86",
///         "reference_id" : "22c07cf4-5626-4224-89f9-691112019399",
///         "source" : {
///           "application_id" : "416ff29c-86c4-4feb-b58c-9705f21f3ea0",
///           "name" : "Square Point of Sale 4.37",
///           "product" : "SQUARE_POS"
///         },
///         "state" : "IN_STOCK"
///       },
///       "type" : "PHYSICAL_COUNT"
///     }
///   ],
///   "errors" : [
/// 
///   ]
/// }
public struct BatchRetrieveInventoryChangesResponse: Codable {
    /// The current calculated inventory changes for the requested objects
    /// and locations.
    public var changes: [InventoryChange]?
    /// The pagination cursor to be used in a subsequent request. If unset,
    /// this is the final response.
    /// See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
    public var cursor: String?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(changes: [InventoryChange]? = nil, cursor: String? = nil, errors: [Error]? = nil) {
        self.changes = changes
        self.cursor = cursor
        self.errors = errors
    }
}

/// Example:
///
/// {
///   "request_body" : {
///     "catalog_object_ids" : [
///       "W62UWFY35CWMYGVWK6TWJDNI"
///     ],
///     "location_ids" : [
///       "59TNP9SA8VGDA"
///     ],
///     "updated_after" : "2016-11-16T00:00:00.000Z"
///   }
/// }
public struct BatchRetrieveInventoryCountsRequest: Codable {
    /// The filter to return results by `CatalogObject` ID.
    /// The filter is applicable only when set.  The default is null.
    public var catalogObjectIDs: [String]?
    /// A pagination cursor returned by a previous call to this endpoint.
    /// Provide this to retrieve the next set of results for the original query.
    /// 
    /// See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
    public var cursor: String?
    /// The filter to return results by `Location` ID.
    /// This filter is applicable only when set. The default is null.
    public var locationIDs: [String]?
    /// The filter to return results by `InventoryState`. The filter is only applicable when set.
    /// Ignored are untracked states of `NONE`, `SOLD`, and `UNLINKED_RETURN`.
    /// The default is null.
    public var states: [String]?
    /// The filter to return results with their `calculated_at` value
    /// after the given time as specified in an RFC 3339 timestamp.
    /// The default value is the UNIX epoch of (`1970-01-01T00:00:00Z`).
    public var updatedAfter: String?

    public init(catalogObjectIDs: [String]? = nil, cursor: String? = nil, locationIDs: [String]? = nil, states: [String]? = nil, updatedAfter: String? = nil) {
        self.catalogObjectIDs = catalogObjectIDs
        self.cursor = cursor
        self.locationIDs = locationIDs
        self.states = states
        self.updatedAfter = updatedAfter
    }

    private enum CodingKeys: String, CodingKey {
        case catalogObjectIDs = "catalog_object_ids"
        case cursor
        case locationIDs = "location_ids"
        case states
        case updatedAfter = "updated_after"
    }
}

/// Example:
///
/// {
///   "counts" : [
///     {
///       "calculated_at" : "2016-11-16T22:28:01.223Z",
///       "catalog_object_id" : "W62UWFY35CWMYGVWK6TWJDNI",
///       "catalog_object_type" : "ITEM_VARIATION",
///       "location_id" : "59TNP9SA8VGDA",
///       "quantity" : "79",
///       "state" : "IN_STOCK"
///     }
///   ],
///   "errors" : [
/// 
///   ]
/// }
public struct BatchRetrieveInventoryCountsResponse: Codable {
    /// The current calculated inventory counts for the requested objects
    /// and locations.
    public var counts: [InventoryCount]?
    /// The pagination cursor to be used in a subsequent request. If unset,
    /// this is the final response.
    /// 
    /// See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
    public var cursor: String?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(counts: [InventoryCount]? = nil, cursor: String? = nil, errors: [Error]? = nil) {
        self.counts = counts
        self.cursor = cursor
        self.errors = errors
    }
}

/// Defines the fields that are included in requests to the
/// `BatchRetrieveOrders` endpoint.
///
/// Example:
///
/// {
///   "request_body" : {
///     "location_id" : "057P5VYJ4A5X1",
///     "order_ids" : [
///       "CAISEM82RcpmcFBM0TfOyiHV3es",
///       "CAISENgvlJ6jLWAzERDzjyHVybY"
///     ]
///   }
/// }
public struct BatchRetrieveOrdersRequest: Codable {
    /// The ID of the location for these orders. This field is optional: omit it to retrieve
    /// orders within the scope of the current authorization's merchant ID.
    public var locationID: String?
    /// The IDs of the orders to retrieve. A maximum of 100 orders can be retrieved per request.
    public var orderIDs: [String]

    public init(locationID: String? = nil, orderIDs: [String]) {
        self.locationID = locationID
        self.orderIDs = orderIDs
    }

    private enum CodingKeys: String, CodingKey {
        case locationID = "location_id"
        case orderIDs = "order_ids"
    }
}

/// Defines the fields that are included in the response body of
/// a request to the `BatchRetrieveOrders` endpoint.
///
/// Example:
///
/// {
///   "orders" : [
///     {
///       "id" : "CAISEM82RcpmcFBM0TfOyiHV3es",
///       "line_items" : [
///         {
///           "base_price_money" : {
///             "amount" : 1599,
///             "currency" : "USD"
///           },
///           "name" : "Awesome product",
///           "quantity" : "1",
///           "total_money" : {
///             "amount" : 1599,
///             "currency" : "USD"
///           },
///           "uid" : "945986d1-9586-11e6-ad5a-28cfe92138cf"
///         },
///         {
///           "base_price_money" : {
///             "amount" : 2000,
///             "currency" : "USD"
///           },
///           "name" : "Another awesome product",
///           "quantity" : "3",
///           "total_money" : {
///             "amount" : 6000,
///             "currency" : "USD"
///           },
///           "uid" : "a8f4168c-9586-11e6-bdf0-28cfe92138cf"
///         }
///       ],
///       "location_id" : "057P5VYJ4A5X1",
///       "reference_id" : "my-order-001",
///       "total_money" : {
///         "amount" : 7599,
///         "currency" : "USD"
///       }
///     }
///   ]
/// }
public struct BatchRetrieveOrdersResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// The requested orders. This will omit any requested orders that do not exist.
    public var orders: [Order]?

    public init(errors: [Error]? = nil, orders: [Order]? = nil) {
        self.errors = errors
        self.orders = orders
    }
}

/// Example:
///
/// {
///   "request_body" : {
///     "batches" : [
///       {
///         "objects" : [
///           {
///             "id" : "#Tea",
///             "item_data" : {
///               "category_id" : "#Beverages",
///               "description" : "Hot Leaf Juice",
///               "name" : "Tea",
///               "tax_ids" : [
///                 "#SalesTax"
///               ],
///               "variations" : [
///                 {
///                   "id" : "#Tea_Mug",
///                   "item_variation_data" : {
///                     "item_id" : "#Tea",
///                     "name" : "Mug",
///                     "price_money" : {
///                       "amount" : 150,
///                       "currency" : "USD"
///                     },
///                     "pricing_type" : "FIXED_PRICING"
///                   },
///                   "present_at_all_locations" : true,
///                   "type" : "ITEM_VARIATION"
///                 }
///               ]
///             },
///             "present_at_all_locations" : true,
///             "type" : "ITEM"
///           },
///           {
///             "id" : "#Coffee",
///             "item_data" : {
///               "category_id" : "#Beverages",
///               "description" : "Hot Bean Juice",
///               "name" : "Coffee",
///               "tax_ids" : [
///                 "#SalesTax"
///               ],
///               "variations" : [
///                 {
///                   "id" : "#Coffee_Regular",
///                   "item_variation_data" : {
///                     "item_id" : "#Coffee",
///                     "name" : "Regular",
///                     "price_money" : {
///                       "amount" : 250,
///                       "currency" : "USD"
///                     },
///                     "pricing_type" : "FIXED_PRICING"
///                   },
///                   "present_at_all_locations" : true,
///                   "type" : "ITEM_VARIATION"
///                 },
///                 {
///                   "id" : "#Coffee_Large",
///                   "item_variation_data" : {
///                     "item_id" : "#Coffee",
///                     "name" : "Large",
///                     "price_money" : {
///                       "amount" : 350,
///                       "currency" : "USD"
///                     },
///                     "pricing_type" : "FIXED_PRICING"
///                   },
///                   "present_at_all_locations" : true,
///                   "type" : "ITEM_VARIATION"
///                 }
///               ]
///             },
///             "present_at_all_locations" : true,
///             "type" : "ITEM"
///           },
///           {
///             "category_data" : {
///               "name" : "Beverages"
///             },
///             "id" : "#Beverages",
///             "present_at_all_locations" : true,
///             "type" : "CATEGORY"
///           },
///           {
///             "id" : "#SalesTax",
///             "present_at_all_locations" : true,
///             "tax_data" : {
///               "applies_to_custom_amounts" : true,
///               "calculation_phase" : "TAX_SUBTOTAL_PHASE",
///               "enabled" : true,
///               "inclusion_type" : "ADDITIVE",
///               "name" : "Sales Tax",
///               "percentage" : "5.0"
///             },
///             "type" : "TAX"
///           }
///         ]
///       }
///     ],
///     "idempotency_key" : "789ff020-f723-43a9-b4b5-43b5dc1fa3dc"
///   }
/// }
public struct BatchUpsertCatalogObjectsRequest: Codable {
    /// A batch of CatalogObjects to be inserted/updated atomically.
    /// The objects within a batch will be inserted in an all-or-nothing fashion, i.e., if an error occurs
    /// attempting to insert or update an object within a batch, the entire batch will be rejected. However, an error
    /// in one batch will not affect other batches within the same request.
    /// 
    /// For each object, its `updated_at` field is ignored and replaced with a current [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates), and its
    /// `is_deleted` field must not be set to `true`.
    /// 
    /// To modify an existing object, supply its ID. To create a new object, use an ID starting
    /// with `#`. These IDs may be used to create relationships between an object and attributes of
    /// other objects that reference it. For example, you can create a CatalogItem with
    /// ID `#ABC` and a CatalogItemVariation with its `item_id` attribute set to
    /// `#ABC` in order to associate the CatalogItemVariation with its parent
    /// CatalogItem.
    /// 
    /// Any `#`-prefixed IDs are valid only within a single atomic batch, and will be replaced by server-generated IDs.
    /// 
    /// Each batch may contain up to 1,000 objects. The total number of objects across all batches for a single request
    /// may not exceed 10,000. If either of these limits is violated, an error will be returned and no objects will
    /// be inserted or updated.
    public var batches: [CatalogObjectBatch]
    /// A value you specify that uniquely identifies this
    /// request among all your requests. A common way to create
    /// a valid idempotency key is to use a Universally unique
    /// identifier (UUID).
    /// 
    /// If you're unsure whether a particular request was successful,
    /// you can reattempt it with the same idempotency key without
    /// worrying about creating duplicate objects.
    /// 
    /// See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
    public var idempotencyKey: String

    public init(batches: [CatalogObjectBatch], idempotencyKey: String) {
        self.batches = batches
        self.idempotencyKey = idempotencyKey
    }

    private enum CodingKeys: String, CodingKey {
        case batches
        case idempotencyKey = "idempotency_key"
    }
}

/// Example:
///
/// {
///   "id_mappings" : [
///     {
///       "client_object_id" : "#Tea",
///       "object_id" : "ZSDZN34NAXDLC6D5ZQMNSOUM"
///     },
///     {
///       "client_object_id" : "#Coffee",
///       "object_id" : "PJMCEBHHUS3OKDB6PYUHLCPP"
///     },
///     {
///       "client_object_id" : "#Beverages",
///       "object_id" : "LYT72K3WGJFFCIMB63XARP3I"
///     },
///     {
///       "client_object_id" : "#SalesTax",
///       "object_id" : "XHSHLHNWSI3HVI4BW5ZUZXI3"
///     },
///     {
///       "client_object_id" : "#Tea_Mug",
///       "object_id" : "NAYHET5R52MIYCEF34ZMAHFM"
///     },
///     {
///       "client_object_id" : "#Coffee_Regular",
///       "object_id" : "OTYDX45SPG7LJQUVCBZI4INH"
///     },
///     {
///       "client_object_id" : "#Coffee_Large",
///       "object_id" : "GZDA3JB37FYVOPI4AOEBOITI"
///     }
///   ],
///   "objects" : [
///     {
///       "id" : "ZSDZN34NAXDLC6D5ZQMNSOUM",
///       "is_deleted" : false,
///       "item_data" : {
///         "category_id" : "LYT72K3WGJFFCIMB63XARP3I",
///         "description" : "Hot Leaf Juice",
///         "name" : "Tea",
///         "tax_ids" : [
///           "XHSHLHNWSI3HVI4BW5ZUZXI3"
///         ],
///         "variations" : [
///           {
///             "id" : "NAYHET5R52MIYCEF34ZMAHFM",
///             "is_deleted" : false,
///             "item_variation_data" : {
///               "item_id" : "ZSDZN34NAXDLC6D5ZQMNSOUM",
///               "name" : "Mug",
///               "ordinal" : 0,
///               "price_money" : {
///                 "amount" : 150,
///                 "currency" : "USD"
///               },
///               "pricing_type" : "FIXED_PRICING"
///             },
///             "present_at_all_locations" : true,
///             "type" : "ITEM_VARIATION",
///             "updated_at" : "2017-05-10T18:48:39.798Z",
///             "version" : 1494442119798
///           }
///         ]
///       },
///       "present_at_all_locations" : true,
///       "type" : "ITEM",
///       "updated_at" : "2017-05-10T18:48:39.798Z",
///       "version" : 1494442119798
///     },
///     {
///       "id" : "PJMCEBHHUS3OKDB6PYUHLCPP",
///       "is_deleted" : false,
///       "item_data" : {
///         "category_id" : "LYT72K3WGJFFCIMB63XARP3I",
///         "description" : "Hot Bean Juice",
///         "name" : "Coffee",
///         "tax_ids" : [
///           "XHSHLHNWSI3HVI4BW5ZUZXI3"
///         ],
///         "variations" : [
///           {
///             "id" : "OTYDX45SPG7LJQUVCBZI4INH",
///             "is_deleted" : false,
///             "item_variation_data" : {
///               "item_id" : "PJMCEBHHUS3OKDB6PYUHLCPP",
///               "name" : "Regular",
///               "ordinal" : 0,
///               "price_money" : {
///                 "amount" : 250,
///                 "currency" : "USD"
///               },
///               "pricing_type" : "FIXED_PRICING"
///             },
///             "present_at_all_locations" : true,
///             "type" : "ITEM_VARIATION",
///             "updated_at" : "2017-05-10T18:48:39.798Z",
///             "version" : 1494442119798
///           },
///           {
///             "id" : "GZDA3JB37FYVOPI4AOEBOITI",
///             "is_deleted" : false,
///             "item_variation_data" : {
///               "item_id" : "PJMCEBHHUS3OKDB6PYUHLCPP",
///               "name" : "Large",
///               "ordinal" : 1,
///               "price_money" : {
///                 "amount" : 350,
///                 "currency" : "USD"
///               },
///               "pricing_type" : "FIXED_PRICING"
///             },
///             "present_at_all_locations" : true,
///             "type" : "ITEM_VARIATION",
///             "updated_at" : "2017-05-10T18:48:39.798Z",
///             "version" : 1494442119798
///           }
///         ]
///       },
///       "present_at_all_locations" : true,
///       "type" : "ITEM",
///       "updated_at" : "2017-05-10T18:48:39.798Z",
///       "version" : 1494442119798
///     },
///     {
///       "category_data" : {
///         "name" : "Beverages"
///       },
///       "id" : "LYT72K3WGJFFCIMB63XARP3I",
///       "is_deleted" : false,
///       "present_at_all_locations" : true,
///       "type" : "CATEGORY",
///       "updated_at" : "2017-05-10T18:48:39.798Z",
///       "version" : 1494442119798
///     },
///     {
///       "id" : "XHSHLHNWSI3HVI4BW5ZUZXI3",
///       "is_deleted" : false,
///       "present_at_all_locations" : true,
///       "tax_data" : {
///         "applies_to_custom_amounts" : true,
///         "calculation_phase" : "TAX_SUBTOTAL_PHASE",
///         "enabled" : true,
///         "inclusion_type" : "ADDITIVE",
///         "name" : "Sales Tax",
///         "percentage" : "5.0"
///       },
///       "type" : "TAX",
///       "updated_at" : "2017-05-10T18:48:39.798Z",
///       "version" : 1494442119798
///     }
///   ]
/// }
public struct BatchUpsertCatalogObjectsResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// The mapping between client and server IDs for this upsert.
    public var idMappings: [CatalogIDMapping]?
    /// The created successfully created CatalogObjects.
    public var objects: [CatalogObject]?
    /// The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) of this update in RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
    public var updatedAt: String?

    public init(errors: [Error]? = nil, idMappings: [CatalogIDMapping]? = nil, objects: [CatalogObject]? = nil, updatedAt: String? = nil) {
        self.errors = errors
        self.idMappings = idMappings
        self.objects = objects
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case errors
        case idMappings = "id_mappings"
        case objects
        case updatedAt = "updated_at"
    }
}

/// Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service
/// at a given location to a requesting customer in one or more appointment segments.
public struct Booking: Codable {
    /// A list of appointment segments for this booking.
    public var appointmentSegments: [AppointmentSegment]?
    /// The timestamp specifying the creation time of this booking, in RFC 3339 format.
    public var createdAt: String?
    /// The ID of the [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) object representing the customer attending this booking
    public var customerID: String?
    /// The free-text field for the customer to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a relevant [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance.
    public var customerNote: String?
    /// A unique ID of this object representing a booking.
    public var id: String?
    /// The ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) object representing the location where the booked service is provided.
    public var locationID: String?
    /// The free-text field for the seller to supply notes about the booking. For example, the note can be preferences that cannot be expressed by supported attributes of a specific [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance.
    /// This field should not be visible to customers.
    public var sellerNote: String?
    /// The timestamp specifying the starting time of this booking, in RFC 3339 format.
    public var startAt: String?
    /// The status of the booking, describing where the booking stands with respect to the booking state machine.
    public var status: String?
    /// The timestamp specifying the most recent update time of this booking, in RFC 3339 format.
    public var updatedAt: String?
    /// The revision number for the booking used for optimistic concurrency.
    public var version: Int?

    public init(appointmentSegments: [AppointmentSegment]? = nil, createdAt: String? = nil, customerID: String? = nil, customerNote: String? = nil, id: String? = nil, locationID: String? = nil, sellerNote: String? = nil, startAt: String? = nil, status: String? = nil, updatedAt: String? = nil, version: Int? = nil) {
        self.appointmentSegments = appointmentSegments
        self.createdAt = createdAt
        self.customerID = customerID
        self.customerNote = customerNote
        self.id = id
        self.locationID = locationID
        self.sellerNote = sellerNote
        self.startAt = startAt
        self.status = status
        self.updatedAt = updatedAt
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case appointmentSegments = "appointment_segments"
        case createdAt = "created_at"
        case customerID = "customer_id"
        case customerNote = "customer_note"
        case id
        case locationID = "location_id"
        case sellerNote = "seller_note"
        case startAt = "start_at"
        case status
        case updatedAt = "updated_at"
        case version
    }
}

/// Supported booking statuses.
public enum BookingStatus: String, Codable, CaseIterable {
    case pending = "PENDING"
    case cancelledByCustomer = "CANCELLED_BY_CUSTOMER"
    case cancelledBySeller = "CANCELLED_BY_SELLER"
    case declined = "DECLINED"
    case accepted = "ACCEPTED"
    case noShow = "NO_SHOW"
}

/// A record of an employee's break during a shift.
public struct Break: Codable {
    /// The `BreakType` that this `Break` was templated on.
    public var breakTypeID: String
    /// RFC 3339; follows the same timezone information as `Shift`. Precision up to
    /// the minute is respected; seconds are truncated.
    public var endAt: String?
    /// Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of
    /// the break.
    public var expectedDuration: String
    /// The UUID for this object.
    public var id: String?
    /// Whether this break counts towards time worked for compensation
    /// purposes.
    public var isPaid: Bool
    /// A human-readable name.
    public var name: String
    /// RFC 3339; follows the same timezone information as `Shift`. Precision up to
    /// the minute is respected; seconds are truncated.
    public var startAt: String

    public init(breakTypeID: String, endAt: String? = nil, expectedDuration: String, id: String? = nil, isPaid: Bool, name: String, startAt: String) {
        self.breakTypeID = breakTypeID
        self.endAt = endAt
        self.expectedDuration = expectedDuration
        self.id = id
        self.isPaid = isPaid
        self.name = name
        self.startAt = startAt
    }

    private enum CodingKeys: String, CodingKey {
        case breakTypeID = "break_type_id"
        case endAt = "end_at"
        case expectedDuration = "expected_duration"
        case id
        case isPaid = "is_paid"
        case name
        case startAt = "start_at"
    }
}

/// A defined break template that sets an expectation for possible `Break`
/// instances on a `Shift`.
public struct BreakType: Codable {
    /// A human-readable name for this type of break. The name is displayed to
    /// employees in Square products.
    public var breakName: String
    /// A read-only timestamp in RFC 3339 format.
    public var createdAt: String?
    /// Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of
    /// this break. Precision less than minutes is truncated.
    public var expectedDuration: String
    /// The UUID for this object.
    public var id: String?
    /// Whether this break counts towards time worked for compensation
    /// purposes.
    public var isPaid: Bool
    /// The ID of the business location this type of break applies to.
    public var locationID: String
    /// A read-only timestamp in RFC 3339 format.
    public var updatedAt: String?
    /// Used for resolving concurrency issues. The request fails if the version
    /// provided does not match the server version at the time of the request. If a value is not
    /// provided, Square's servers execute a "blind" write; potentially
    /// overwriting another writer's data.
    public var version: Int?

    public init(breakName: String, createdAt: String? = nil, expectedDuration: String, id: String? = nil, isPaid: Bool, locationID: String, updatedAt: String? = nil, version: Int? = nil) {
        self.breakName = breakName
        self.createdAt = createdAt
        self.expectedDuration = expectedDuration
        self.id = id
        self.isPaid = isPaid
        self.locationID = locationID
        self.updatedAt = updatedAt
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case breakName = "break_name"
        case createdAt = "created_at"
        case expectedDuration = "expected_duration"
        case id
        case isPaid = "is_paid"
        case locationID = "location_id"
        case updatedAt = "updated_at"
        case version
    }
}

/// Represents a bulk create request for `TeamMember` objects.
///
/// Example:
///
/// {
///   "request_body" : {
///     "team_members" : {
///       "idempotency-key-1" : {
///         "team_member" : {
///           "assigned_locations" : {
///             "assignment_type" : "EXPLICIT_LOCATIONS",
///             "location_ids" : [
///               "YSGH2WBKG94QZ",
///               "GA2Y9HSJ8KRYT"
///             ]
///           },
///           "email_address" : "joe_doe@gmail.com",
///           "family_name" : "Doe",
///           "given_name" : "Joe",
///           "phone_number" : "+14159283333",
///           "reference_id" : "reference_id_1"
///         }
///       },
///       "idempotency-key-2" : {
///         "team_member" : {
///           "assigned_locations" : {
///             "assignment_type" : "ALL_CURRENT_AND_FUTURE_LOCATIONS"
///           },
///           "email_address" : "jane_smith@gmail.com",
///           "family_name" : "Smith",
///           "given_name" : "Jane",
///           "phone_number" : "+14159223334",
///           "reference_id" : "reference_id_2"
///         }
///       }
///     }
///   }
/// }
public struct BulkCreateTeamMembersRequest: Codable {
    /// The data used to create the `TeamMember` objects. Each key is the `idempotency_key` that maps to the `CreateTeamMemberRequest`.
    public var teamMembers: [String: CreateTeamMemberRequest]

    public init(teamMembers: [String: CreateTeamMemberRequest]) {
        self.teamMembers = teamMembers
    }

    private enum CodingKeys: String, CodingKey {
        case teamMembers = "team_members"
    }
}

/// Represents a response from a bulk create request containing the created `TeamMember` objects or error messages.
///
/// Example:
///
/// {
///   "team_members" : {
///     "idempotency-key-1" : {
///       "team_member" : {
///         "assigned_locations" : {
///           "assignment_type" : "EXPLICIT_LOCATIONS",
///           "location_ids" : [
///             "GA2Y9HSJ8KRYT",
///             "YSGH2WBKG94QZ"
///           ]
///         },
///         "email_address" : "joe_doe@gmail.com",
///         "family_name" : "Doe",
///         "given_name" : "Joe",
///         "id" : "ywhG1qfIOoqsHfVRubFV",
///         "is_owner" : false,
///         "phone_number" : "+14159283333",
///         "reference_id" : "reference_id_1",
///         "status" : "ACTIVE"
///       }
///     },
///     "idempotency-key-2" : {
///       "team_member" : {
///         "assigned_locations" : {
///           "assignment_type" : "ALL_CURRENT_AND_FUTURE_LOCATIONS"
///         },
///         "email_address" : "jane_smith@gmail.com",
///         "family_name" : "Smith",
///         "given_name" : "Jane",
///         "id" : "IF_Ncrg7fHhCqxVI9T6R",
///         "is_owner" : false,
///         "phone_number" : "+14159223334",
///         "reference_id" : "reference_id_2",
///         "status" : "ACTIVE"
///       }
///     }
///   }
/// }
public struct BulkCreateTeamMembersResponse: Codable {
    /// The errors that occurred during the request.
    public var errors: [Error]?
    /// The successfully created `TeamMember` objects. Each key is the `idempotency_key` that maps to the `CreateTeamMemberRequest`.
    public var teamMembers: [String: CreateTeamMemberResponse]?

    public init(errors: [Error]? = nil, teamMembers: [String: CreateTeamMemberResponse]? = nil) {
        self.errors = errors
        self.teamMembers = teamMembers
    }

    private enum CodingKeys: String, CodingKey {
        case errors
        case teamMembers = "team_members"
    }
}

/// Represents a bulk update request for `TeamMember` objects.
///
/// Example:
///
/// {
///   "request_body" : {
///     "team_members" : {
///       "AFMwA08kR-MIF-3Vs0OE" : {
///         "team_member" : {
///           "assigned_locations" : {
///             "assignment_type" : "ALL_CURRENT_AND_FUTURE_LOCATIONS"
///           },
///           "email_address" : "jane_smith@gmail.com",
///           "family_name" : "Smith",
///           "given_name" : "Jane",
///           "is_owner" : false,
///           "phone_number" : "+14159223334",
///           "reference_id" : "reference_id_2",
///           "status" : "ACTIVE"
///         }
///       },
///       "fpgteZNMaf0qOK-a4t6P" : {
///         "team_member" : {
///           "assigned_locations" : {
///             "assignment_type" : "EXPLICIT_LOCATIONS",
///             "location_ids" : [
///               "YSGH2WBKG94QZ",
///               "GA2Y9HSJ8KRYT"
///             ]
///           },
///           "email_address" : "joe_doe@gmail.com",
///           "family_name" : "Doe",
///           "given_name" : "Joe",
///           "is_owner" : false,
///           "phone_number" : "+14159283333",
///           "reference_id" : "reference_id_1",
///           "status" : "ACTIVE"
///         }
///       }
///     }
///   }
/// }
public struct BulkUpdateTeamMembersRequest: Codable {
    /// The data used to update the `TeamMember` objects. Each key is the `team_member_id` that maps to the `UpdateTeamMemberRequest`.
    public var teamMembers: [String: UpdateTeamMemberRequest]

    public init(teamMembers: [String: UpdateTeamMemberRequest]) {
        self.teamMembers = teamMembers
    }

    private enum CodingKeys: String, CodingKey {
        case teamMembers = "team_members"
    }
}

/// Represents a response from a bulk update request containing the updated `TeamMember` objects or error messages.
///
/// Example:
///
/// {
///   "team_members" : {
///     "AFMwA08kR-MIF-3Vs0OE" : {
///       "team_member" : {
///         "assigned_locations" : {
///           "assignment_type" : "ALL_CURRENT_AND_FUTURE_LOCATIONS"
///         },
///         "created_at" : "2020-06-11T22:46:57.001Z",
///         "email_address" : "jane_smith@gmail.com",
///         "family_name" : "Smith",
///         "given_name" : "Jane",
///         "id" : "AFMwA08kR-MIF-3Vs0OE",
///         "is_owner" : false,
///         "phone_number" : "+14159223334",
///         "reference_id" : "reference_id_2",
///         "status" : "ACTIVE"
///       }
///     },
///     "fpgteZNMaf0qOK-a4t6P" : {
///       "team_member" : {
///         "assigned_locations" : {
///           "assignment_type" : "EXPLICIT_LOCATIONS",
///           "location_ids" : [
///             "GA2Y9HSJ8KRYT",
///             "YSGH2WBKG94QZ"
///           ]
///         },
///         "created_at" : "2020-06-11T22:46:57.095Z",
///         "email_address" : "joe_doe@gmail.com",
///         "family_name" : "Doe",
///         "given_name" : "Joe",
///         "id" : "fpgteZNMaf0qOK-a4t6P",
///         "is_owner" : false,
///         "phone_number" : "+14159283333",
///         "reference_id" : "reference_id_1",
///         "status" : "ACTIVE"
///       }
///     }
///   }
/// }
public struct BulkUpdateTeamMembersResponse: Codable {
    /// The errors that occurred during the request.
    public var errors: [Error]?
    /// The successfully updated `TeamMember` objects. Each key is the `team_member_id` that maps to the `UpdateTeamMemberRequest`.
    public var teamMembers: [String: UpdateTeamMemberResponse]?

    public init(errors: [Error]? = nil, teamMembers: [String: UpdateTeamMemberResponse]? = nil) {
        self.errors = errors
        self.teamMembers = teamMembers
    }

    private enum CodingKeys: String, CodingKey {
        case errors
        case teamMembers = "team_members"
    }
}

/// The service appointment settings, including where and how the service is provided.
public struct BusinessAppointmentSettings: Codable {
    /// The time unit of the service duration for bookings.
    public var alignmentTime: String?
    /// Indicates whether a customer can choose from all available time slots and have a staff member assigned
    /// automatically (`true`) or not (`false`).
    public var isAnyTeamMemberBookingEnabled: Bool?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var cancellationFeeMoney: Money?
    /// The cancellation policy adopted by the seller.
    public var cancellationPolicy: String?
    /// The free-form text of the seller's cancellation policy.
    public var cancellationPolicyText: String?
    /// The cut-off time in seconds for allowing clients to cancel or reschedule an appointment.
    public var cancellationWindowSeconds: Int?
    /// Types of the location allowed for bookings.
    public var locationTypes: [String]?
    /// The maximum number of daily appointments per team member or per location.
    public var maxAppointmentsPerDayLimit: Int?
    /// Indicates whether the daily appointment limit applies to team members or to
    /// business locations.
    public var maxAppointmentsPerDayLimitType: String?
    /// The maximum lead time in seconds before a service can be booked. Bookings must be created at most this far ahead of the booking's starting time.
    public var maxBookingLeadTimeSeconds: Int?
    /// The minimum lead time in seconds before a service can be booked. Bookings must be created at least this far ahead of the booking's starting time.
    public var minBookingLeadTimeSeconds: Int?
    /// Indicates whether a customer can book multiple services in a single online booking.
    public var isMultipleServiceBookingEnabled: Bool?
    /// Indicates whether customers has an assigned staff member (`true`) or can select s staff member of their choice (`false`).
    public var isSkipBookingFlowStaffSelection: Bool?

    public init(alignmentTime: String? = nil, isAnyTeamMemberBookingEnabled: Bool? = nil, cancellationFeeMoney: Money? = nil, cancellationPolicy: String? = nil, cancellationPolicyText: String? = nil, cancellationWindowSeconds: Int? = nil, locationTypes: [String]? = nil, maxAppointmentsPerDayLimit: Int? = nil, maxAppointmentsPerDayLimitType: String? = nil, maxBookingLeadTimeSeconds: Int? = nil, minBookingLeadTimeSeconds: Int? = nil, isMultipleServiceBookingEnabled: Bool? = nil, isSkipBookingFlowStaffSelection: Bool? = nil) {
        self.alignmentTime = alignmentTime
        self.isAnyTeamMemberBookingEnabled = isAnyTeamMemberBookingEnabled
        self.cancellationFeeMoney = cancellationFeeMoney
        self.cancellationPolicy = cancellationPolicy
        self.cancellationPolicyText = cancellationPolicyText
        self.cancellationWindowSeconds = cancellationWindowSeconds
        self.locationTypes = locationTypes
        self.maxAppointmentsPerDayLimit = maxAppointmentsPerDayLimit
        self.maxAppointmentsPerDayLimitType = maxAppointmentsPerDayLimitType
        self.maxBookingLeadTimeSeconds = maxBookingLeadTimeSeconds
        self.minBookingLeadTimeSeconds = minBookingLeadTimeSeconds
        self.isMultipleServiceBookingEnabled = isMultipleServiceBookingEnabled
        self.isSkipBookingFlowStaffSelection = isSkipBookingFlowStaffSelection
    }

    private enum CodingKeys: String, CodingKey {
        case alignmentTime = "alignment_time"
        case isAnyTeamMemberBookingEnabled = "any_team_member_booking_enabled"
        case cancellationFeeMoney = "cancellation_fee_money"
        case cancellationPolicy = "cancellation_policy"
        case cancellationPolicyText = "cancellation_policy_text"
        case cancellationWindowSeconds = "cancellation_window_seconds"
        case locationTypes = "location_types"
        case maxAppointmentsPerDayLimit = "max_appointments_per_day_limit"
        case maxAppointmentsPerDayLimitType = "max_appointments_per_day_limit_type"
        case maxBookingLeadTimeSeconds = "max_booking_lead_time_seconds"
        case minBookingLeadTimeSeconds = "min_booking_lead_time_seconds"
        case isMultipleServiceBookingEnabled = "multiple_service_booking_enabled"
        case isSkipBookingFlowStaffSelection = "skip_booking_flow_staff_selection"
    }
}

/// Time units of a service duration for bookings.
public enum BusinessAppointmentSettingsAlignmentTime: String, Codable, CaseIterable {
    case serviceDuration = "SERVICE_DURATION"
    case quarterHourly = "QUARTER_HOURLY"
    case halfHourly = "HALF_HOURLY"
    case hourly = "HOURLY"
}

/// Types of location where service is provided.
public enum BusinessAppointmentSettingsBookingLocationType: String, Codable, CaseIterable {
    case businessLocation = "BUSINESS_LOCATION"
    case customerLocation = "CUSTOMER_LOCATION"
    case phone = "PHONE"
}

/// The category of the sellerâ€™s cancellation policy.
public enum BusinessAppointmentSettingsCancellationPolicy: String, Codable, CaseIterable {
    case cancellationTreatedAsNoShow = "CANCELLATION_TREATED_AS_NO_SHOW"
    case customPolicy = "CUSTOM_POLICY"
}

/// Types of daily appointment limits.
public enum BusinessAppointmentSettingsMaxAppointmentsPerDayLimitType: String, Codable, CaseIterable {
    case perTeamMember = "PER_TEAM_MEMBER"
    case perLocation = "PER_LOCATION"
}

public struct BusinessBookingProfile: Codable {
    /// Indicates whether customers can cancel or reschedule their own bookings (`true`) or not (`false`).
    public var allowUserCancel: Bool?
    /// Indicates whether the seller is open for booking.
    public var isBookingEnabled: Bool?
    /// The policy for the seller to automatically accept booking requests (`ACCEPT_ALL`) or not (`REQUIRES_ACCEPTANCE`).
    public var bookingPolicy: String?
    /// The service appointment settings, including where and how the service is provided.
    public var businessAppointmentSettings: BusinessAppointmentSettings?
    /// The RFC 3339 timestamp specifying the booking's creation time.
    public var createdAt: String?
    /// The choice of customer's time zone information of a booking.
    /// The Square online booking site and all notifications to customers uses either the seller locationâ€™s time zone
    /// or the time zone the customer chooses at booking.
    public var customerTimezoneChoice: String?
    /// The ID of the seller, obtainable using the Merchants API.
    public var sellerID: String?

    public init(allowUserCancel: Bool? = nil, isBookingEnabled: Bool? = nil, bookingPolicy: String? = nil, businessAppointmentSettings: BusinessAppointmentSettings? = nil, createdAt: String? = nil, customerTimezoneChoice: String? = nil, sellerID: String? = nil) {
        self.allowUserCancel = allowUserCancel
        self.isBookingEnabled = isBookingEnabled
        self.bookingPolicy = bookingPolicy
        self.businessAppointmentSettings = businessAppointmentSettings
        self.createdAt = createdAt
        self.customerTimezoneChoice = customerTimezoneChoice
        self.sellerID = sellerID
    }

    private enum CodingKeys: String, CodingKey {
        case allowUserCancel = "allow_user_cancel"
        case isBookingEnabled = "booking_enabled"
        case bookingPolicy = "booking_policy"
        case businessAppointmentSettings = "business_appointment_settings"
        case createdAt = "created_at"
        case customerTimezoneChoice = "customer_timezone_choice"
        case sellerID = "seller_id"
    }
}

/// Policies for accepting bookings.
public enum BusinessBookingProfileBookingPolicy: String, Codable, CaseIterable {
    case acceptAll = "ACCEPT_ALL"
    case requiresAcceptance = "REQUIRES_ACCEPTANCE"
}

/// Choices of customer-facing time zone used for bookings.
public enum BusinessBookingProfileCustomerTimezoneChoice: String, Codable, CaseIterable {
    case businessLocationTimezone = "BUSINESS_LOCATION_TIMEZONE"
    case customerChoice = "CUSTOMER_CHOICE"
}

/// Represents the hours of operation for a business location.
public struct BusinessHours: Codable {
    /// The list of time periods during which the business is open. There may be at most 10
    /// periods per day.
    public var periods: [BusinessHoursPeriod]?

    public init(periods: [BusinessHoursPeriod]? = nil) {
        self.periods = periods
    }
}

/// Represents a period of time during which a business location is open.
public struct BusinessHoursPeriod: Codable {
    /// The day of week for this time period.
    public var dayOfWeek: String?
    /// The end time of a business hours period, specified in local time using partial-time
    /// RFC 3339 format.
    public var endLocalTime: String?
    /// The start time of a business hours period, specified in local time using partial-time
    /// RFC 3339 format.
    public var startLocalTime: String?

    public init(dayOfWeek: String? = nil, endLocalTime: String? = nil, startLocalTime: String? = nil) {
        self.dayOfWeek = dayOfWeek
        self.endLocalTime = endLocalTime
        self.startLocalTime = startLocalTime
    }

    private enum CodingKeys: String, CodingKey {
        case dayOfWeek = "day_of_week"
        case endLocalTime = "end_local_time"
        case startLocalTime = "start_local_time"
    }
}

/// A request to calculate the points that a buyer can earn from
/// a specified purchase.
///
/// Example:
///
/// {
///   "request_body" : {
///     "order_id" : "RFZfrdtm3mhO1oGzf5Cx7fEMsmGZY"
///   },
///   "request_params" : "?program_id=d619f755-2d17-41f3-990d-c04ecedd64dd"
/// }
public struct CalculateLoyaltyPointsRequest: Codable {
    /// The [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) ID for which to calculate the points.
    /// Specify this field if your application uses the Orders API to process orders.
    /// Otherwise, specify the `transaction_amount_money`.
    public var orderID: String?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var transactionAmountMoney: Money?

    public init(orderID: String? = nil, transactionAmountMoney: Money? = nil) {
        self.orderID = orderID
        self.transactionAmountMoney = transactionAmountMoney
    }

    private enum CodingKeys: String, CodingKey {
        case orderID = "order_id"
        case transactionAmountMoney = "transaction_amount_money"
    }
}

/// A response that includes the points that the buyer can earn from
/// a specified purchase.
///
/// Example:
///
/// {
///   "points" : 6
/// }
public struct CalculateLoyaltyPointsResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// The points that the buyer can earn from a specified purchase.
    public var points: Int?

    public init(errors: [Error]? = nil, points: Int? = nil) {
        self.errors = errors
        self.points = points
    }
}

/// Example:
///
/// {
///   "request_body" : {
///     "idempotency_key" : "b3e98fe3-b8de-471c-82f1-545f371e637c",
///     "order" : {
///       "discounts" : [
///         {
///           "name" : "50% Off",
///           "percentage" : "50",
///           "scope" : "ORDER"
///         }
///       ],
///       "line_items" : [
///         {
///           "base_price_money" : {
///             "amount" : 500,
///             "currency" : "USD"
///           },
///           "name" : "Item 1",
///           "quantity" : "1"
///         },
///         {
///           "base_price_money" : {
///             "amount" : 300,
///             "currency" : "USD"
///           },
///           "name" : "Item 2",
///           "quantity" : "2"
///         }
///       ],
///       "location_id" : "D7AVYMEAPJ3A3"
///     }
///   }
/// }
public struct CalculateOrderRequest: Codable {
    /// Contains all information related to a single order to process with Square,
    /// including line items that specify the products to purchase. `Order` objects also
    /// include information about any associated tenders, refunds, and returns.
    /// 
    /// All Connect V2 Transactions have all been converted to Orders including all associated
    /// itemization data.
    public var order: Order
    /// Identifies one or more loyalty reward tiers to apply during the order calculation.
    /// The discounts defined by the reward tiers are added to the order only to preview the
    /// effect of applying the specified rewards. The rewards do not correspond to actual
    /// redemptions; that is, no `reward`s are created. Therefore, the reward `id`s are
    /// random strings used only to reference the reward tier.
    public var proposedRewards: [OrderReward]?

    public init(order: Order, proposedRewards: [OrderReward]? = nil) {
        self.order = order
        self.proposedRewards = proposedRewards
    }

    private enum CodingKeys: String, CodingKey {
        case order
        case proposedRewards = "proposed_rewards"
    }
}

/// Example:
///
/// {
///   "order" : {
///     "created_at" : "2020-05-18T16:30:49.614Z",
///     "discounts" : [
///       {
///         "applied_money" : {
///           "amount" : 550,
///           "currency" : "USD"
///         },
///         "name" : "50% Off",
///         "percentage" : "50",
///         "scope" : "ORDER",
///         "type" : "FIXED_PERCENTAGE",
///         "uid" : "zGsRZP69aqSSR9lq9euSPB"
///       }
///     ],
///     "line_items" : [
///       {
///         "applied_discounts" : [
///           {
///             "applied_money" : {
///               "amount" : 250,
///               "currency" : "USD"
///             },
///             "discount_uid" : "zGsRZP69aqSSR9lq9euSPB",
///             "uid" : "9zr9S4dxvPAixvn0lpa1VC"
///           }
///         ],
///         "base_price_money" : {
///           "amount" : 500,
///           "currency" : "USD"
///         },
///         "gross_sales_money" : {
///           "amount" : 500,
///           "currency" : "USD"
///         },
///         "name" : "Item 1",
///         "quantity" : "1",
///         "total_discount_money" : {
///           "amount" : 250,
///           "currency" : "USD"
///         },
///         "total_money" : {
///           "amount" : 250,
///           "currency" : "USD"
///         },
///         "total_tax_money" : {
///           "amount" : 0,
///           "currency" : "USD"
///         },
///         "uid" : "ULkg0tQTRK2bkU9fNv3IJD",
///         "variation_total_price_money" : {
///           "amount" : 500,
///           "currency" : "USD"
///         }
///       },
///       {
///         "applied_discounts" : [
///           {
///             "applied_money" : {
///               "amount" : 300,
///               "currency" : "USD"
///             },
///             "discount_uid" : "zGsRZP69aqSSR9lq9euSPB",
///             "uid" : "qa8LwwZK82FgSEkQc2HYVC"
///           }
///         ],
///         "base_price_money" : {
///           "amount" : 300,
///           "currency" : "USD"
///         },
///         "gross_sales_money" : {
///           "amount" : 600,
///           "currency" : "USD"
///         },
///         "name" : "Item 2",
///         "quantity" : "2",
///         "total_discount_money" : {
///           "amount" : 300,
///           "currency" : "USD"
///         },
///         "total_money" : {
///           "amount" : 300,
///           "currency" : "USD"
///         },
///         "total_tax_money" : {
///           "amount" : 0,
///           "currency" : "USD"
///         },
///         "uid" : "mumY8Nun4BC5aKe2yyx5a",
///         "variation_total_price_money" : {
///           "amount" : 600,
///           "currency" : "USD"
///         }
///       }
///     ],
///     "location_id" : "D7AVYMEAPJ3A3",
///     "net_amounts" : {
///       "discount_money" : {
///         "amount" : 550,
///         "currency" : "USD"
///       },
///       "service_charge_money" : {
///         "amount" : 0,
///         "currency" : "USD"
///       },
///       "tax_money" : {
///         "amount" : 0,
///         "currency" : "USD"
///       },
///       "tip_money" : {
///         "amount" : 0,
///         "currency" : "USD"
///       },
///       "total_money" : {
///         "amount" : 550,
///         "currency" : "USD"
///       }
///     },
///     "state" : "OPEN",
///     "total_discount_money" : {
///       "amount" : 550,
///       "currency" : "USD"
///     },
///     "total_money" : {
///       "amount" : 550,
///       "currency" : "USD"
///     },
///     "total_service_charge_money" : {
///       "amount" : 0,
///       "currency" : "USD"
///     },
///     "total_tax_money" : {
///       "amount" : 0,
///       "currency" : "USD"
///     },
///     "total_tip_money" : {
///       "amount" : 0,
///       "currency" : "USD"
///     },
///     "updated_at" : "2020-05-18T16:30:49.614Z",
///     "version" : 1
///   }
/// }
public struct CalculateOrderResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Contains all information related to a single order to process with Square,
    /// including line items that specify the products to purchase. `Order` objects also
    /// include information about any associated tenders, refunds, and returns.
    /// 
    /// All Connect V2 Transactions have all been converted to Orders including all associated
    /// itemization data.
    public var order: Order?

    public init(errors: [Error]? = nil, order: Order? = nil) {
        self.errors = errors
        self.order = order
    }
}

/// Example:
///
/// {
///   "booking_version" : 1
/// }
public struct CancelBookingRequest: Codable {
    /// The revision number for the booking used for optimistic concurrency.
    public var bookingVersion: Int?
    /// A unique key to make this request an idempotent operation.
    public var idempotencyKey: String?

    public init(bookingVersion: Int? = nil, idempotencyKey: String? = nil) {
        self.bookingVersion = bookingVersion
        self.idempotencyKey = idempotencyKey
    }

    private enum CodingKeys: String, CodingKey {
        case bookingVersion = "booking_version"
        case idempotencyKey = "idempotency_key"
    }
}

/// Example:
///
/// {
///   "booking" : {
///     "appointment_segments" : [
///       {
///         "duration_minutes" : 60,
///         "service_variation_id" : "RU3PBTZTK7DXZDQFCJHOK2MC",
///         "service_variation_version" : 1599775456731,
///         "team_member_id" : "TMXUrsBWWcHTt79t"
///       }
///     ],
///     "created_at" : "2020-10-28T15:47:41Z",
///     "customer_id" : "EX2QSVGTZN4K1E5QE1CBFNVQ8M",
///     "customer_note" : null,
///     "id" : "zkras0xv0xwswx",
///     "location_id" : "LEQHH0YY8B42M",
///     "seller_note" : null,
///     "start_at" : "2020-11-26T13:00:00Z",
///     "status" : "CANCELLED_BY_CUSTOMER",
///     "updated_at" : "2020-10-28T15:49:25Z",
///     "version" : 1
///   },
///   "errors" : [
/// 
///   ]
/// }
public struct CancelBookingResponse: Codable {
    /// Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service
    /// at a given location to a requesting customer in one or more appointment segments.
    public var booking: Booking?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(booking: Booking? = nil, errors: [Error]? = nil) {
        self.booking = booking
        self.errors = errors
    }
}

/// Describes a `CancelInvoice` request.
///
/// Example:
///
/// {
///   "request_body" : {
///     "version" : 0
///   }
/// }
public struct CancelInvoiceRequest: Codable {
    /// The version of the [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) to cancel.
    /// If you do not know the version, you can call
    /// [GetInvoice](https://developer.squareup.com/reference/square_2021-08-18/invoices-api/get-invoice) or [ListInvoices](https://developer.squareup.com/reference/square_2021-08-18/invoices-api/list-invoices).
    public var version: Int

    public init(version: Int) {
        self.version = version
    }
}

/// The response returned by the `CancelInvoice` request.
///
/// Example:
///
/// {
///   "invoice" : {
///     "accepted_payment_methods" : {
///       "bank_account" : false,
///       "card" : true,
///       "square_gift_card" : false
///     },
///     "created_at" : "2020-06-18T17:45:13Z",
///     "custom_fields" : [
///       {
///         "label" : "Event Reference Number",
///         "placement" : "ABOVE_LINE_ITEMS",
///         "value" : "Ref. #1234"
///       },
///       {
///         "label" : "Terms of Service",
///         "placement" : "BELOW_LINE_ITEMS",
///         "value" : "The terms of service are..."
///       }
///     ],
///     "delivery_method" : "EMAIL",
///     "description" : "We appreciate your business!",
///     "id" : "inv:0-ChCHu2mZEabLeeHahQnXDjZQECY",
///     "invoice_number" : "inv-100",
///     "location_id" : "ES0RJRZYEC39A",
///     "order_id" : "CAISENgvlJ6jLWAzERDzjyHVybY",
///     "payment_requests" : [
///       {
///         "automatic_payment_source" : "NONE",
///         "computed_amount_money" : {
///           "amount" : 10000,
///           "currency" : "USD"
///         },
///         "due_date" : "2030-01-24",
///         "reminders" : [
///           {
///             "message" : "Your invoice is due tomorrow",
///             "relative_scheduled_days" : -1,
///             "status" : "PENDING",
///             "uid" : "beebd363-e47f-4075-8785-c235aaa7df11"
///           }
///         ],
///         "request_type" : "BALANCE",
///         "tipping_enabled" : true,
///         "total_completed_amount_money" : {
///           "amount" : 0,
///           "currency" : "USD"
///         },
///         "uid" : "2da7964f-f3d2-4f43-81e8-5aa220bf3355"
///       }
///     ],
///     "primary_recipient" : {
///       "customer_id" : "JDKYHBWT1D4F8MFH63DBMEN8Y4",
///       "email_address" : "Amelia.Earhart@example.com",
///       "family_name" : "Earhart",
///       "given_name" : "Amelia",
///       "phone_number" : "1-212-555-4240"
///     },
///     "scheduled_at" : "2030-01-13T10:00:00Z",
///     "status" : "CANCELED",
///     "timezone" : "America\/Los_Angeles",
///     "title" : "Event Planning Services",
///     "updated_at" : "2020-06-18T18:23:11Z",
///     "version" : 1
///   }
/// }
public struct CancelInvoiceResponse: Codable {
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// Stores information about an invoice. You use the Invoices API to create and manage
    /// invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
    public var invoice: Invoice?

    public init(errors: [Error]? = nil, invoice: Invoice? = nil) {
        self.errors = errors
        self.invoice = invoice
    }
}

/// Describes a request to cancel a payment using
/// [CancelPaymentByIdempotencyKey](https://developer.squareup.com/reference/square_2021-08-18/payments-api/cancel-payment-by-idempotency-key).
///
/// Example:
///
/// {
///   "request_body" : {
///     "idempotency_key" : "a7e36d40-d24b-11e8-b568-0800200c9a66"
///   }
/// }
public struct CancelPaymentByIdempotencyKeyRequest: Codable {
    /// The `idempotency_key` identifying the payment to be canceled.
    public var idempotencyKey: String

    public init(idempotencyKey: String) {
        self.idempotencyKey = idempotencyKey
    }

    private enum CodingKeys: String, CodingKey {
        case idempotencyKey = "idempotency_key"
    }
}

/// Defines the response returned by
/// [CancelPaymentByIdempotencyKey](https://developer.squareup.com/reference/square_2021-08-18/payments-api/cancel-payment-by-idempotency-key).
/// On success, `errors` is empty.
///
/// Example:
///
/// {
/// 
/// }
public struct CancelPaymentByIdempotencyKeyResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(errors: [Error]? = nil) {
        self.errors = errors
    }
}

/// Describes the request to cancel (void) a payment using
/// [CancelPayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/cancel-payment).
/// You can only cancel a payment that is approved (not completed).
/// For more information, see
/// [Delayed capture of a payment](https://developer.squareup.com/docs/payments-api/take-payments/card-payments#delayed-capture-of-a-card-payment).
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct CancelPaymentRequest: Codable {
    public init() {}
}

/// Defines the response returned by [CancelPayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/cancel-payment).
///
/// Example:
///
/// {
///   "payment" : {
///     "amount_money" : {
///       "amount" : 200,
///       "currency" : "USD"
///     },
///     "app_fee_money" : {
///       "amount" : 10,
///       "currency" : "USD"
///     },
///     "approved_money" : {
///       "amount" : 200,
///       "currency" : "USD"
///     },
///     "card_details" : {
///       "auth_result_code" : "eWZBDh",
///       "avs_status" : "AVS_ACCEPTED",
///       "card" : {
///         "bin" : "411111",
///         "card_brand" : "VISA",
///         "card_type" : "DEBIT",
///         "exp_month" : 2,
///         "exp_year" : 2024,
///         "fingerprint" : "sq-1-9PP0tWfcM6vIsYmfsesdjfhduHSDFNdJFNDfDNFjdfjpseirDErsaP",
///         "last_4" : "1234",
///         "prepaid_type" : "PREPAID"
///       },
///       "card_payment_timeline" : {
///         "authorized_at" : "2018-10-17T20:38:46.753Z",
///         "voided_at" : "2018-10-17T20:38:57.793Z"
///       },
///       "cvv_status" : "CVV_ACCEPTED",
///       "entry_method" : "KEYED",
///       "statement_description" : "SQ *MY MERCHANT",
///       "status" : "VOIDED"
///     },
///     "created_at" : "2018-10-17T20:38:46.743Z",
///     "customer_id" : "RDX9Z4XTIZR7MRZJUXNY9HUK6I",
///     "id" : "GQTFp1ZlXdpoW4o6eGiZhbjosiDFf",
///     "location_id" : "XTI0H92143A39",
///     "note" : "Brief description",
///     "order_id" : "m2Hr8Hk8A3CTyQQ1k4ynExg92tO3",
///     "reference_id" : "123456",
///     "source_type" : "CARD",
///     "status" : "CANCELED",
///     "total_money" : {
///       "amount" : 200,
///       "currency" : "USD"
///     },
///     "updated_at" : "2018-10-17T20:38:57.693Z",
///     "version_token" : "lAITJ6l8I8tFu62mCf2W4sxJQxN9FOaH5zwfsdPf7Dm6o"
///   }
/// }
public struct CancelPaymentResponse: Codable {
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// Represents a payment processed by the Square API.
    public var payment: Payment?

    public init(errors: [Error]? = nil, payment: Payment? = nil) {
        self.errors = errors
        self.payment = payment
    }
}

/// Defines parameters in a
/// [CancelSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/cancel-subscription) endpoint request.
public struct CancelSubscriptionRequest: Codable {
    public init() {}
}

/// Defines fields that are included in a
/// [CancelSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/cancel-subscription) response.
///
/// Example:
///
/// {
///   "subscription" : {
///     "canceled_date" : "2020-05-01",
///     "card_id" : "ccof:qy5x8hHGYsgLrp4Q4GB",
///     "created_at" : "2020-08-03T21:53:10Z",
///     "customer_id" : "CHFGVKYY8RSV93M5KCYTG4PN0G",
///     "id" : "910afd30-464a-4e00-a8d8-2296eEXAMPLE",
///     "location_id" : "S8GWD5R9QB376",
///     "paid_until_date" : "2020-05-01",
///     "plan_id" : "6JHXF3B2CW3YKHDV4XEM674H",
///     "start_date" : "2020-04-24",
///     "status" : "ACTIVE",
///     "timezone" : "America\/Los_Angeles",
///     "version" : 1594311617331
///   }
/// }
public struct CancelSubscriptionResponse: Codable {
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// Represents a customer subscription to a subscription plan.
    /// For an overview of the `Subscription` type, see
    /// [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
    public var subscription: Subscription?

    public init(errors: [Error]? = nil, subscription: Subscription? = nil) {
        self.errors = errors
        self.subscription = subscription
    }
}

/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct CancelTerminalCheckoutRequest: Codable {
    public init() {}
}

/// Example:
///
/// {
///   "checkout" : {
///     "amount_money" : {
///       "amount" : 123,
///       "currency" : "USD"
///     },
///     "app_id" : "APP_ID",
///     "cancel_reason" : "SELLER_CANCELED",
///     "created_at" : "2020-03-16T15:31:19.934Z",
///     "deadline_duration" : "PT10M",
///     "device_options" : {
///       "device_id" : "dbb5d83a-7838-11ea-bc55-0242ac130003",
///       "skip_receipt_screen" : true,
///       "tip_settings" : {
///         "allow_tipping" : true
///       }
///     },
///     "id" : "S1yDlPQx7slqO",
///     "reference_id" : "id36815",
///     "status" : "CANCELED",
///     "updated_at" : "2020-03-16T15:31:45.787Z"
///   }
/// }
public struct CancelTerminalCheckoutResponse: Codable {
    public var checkout: TerminalCheckout?
    /// Information about errors encountered during the request.
    public var errors: [Error]?

    public init(checkout: TerminalCheckout? = nil, errors: [Error]? = nil) {
        self.checkout = checkout
        self.errors = errors
    }
}

/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct CancelTerminalRefundRequest: Codable {
    public init() {}
}

/// Example:
///
/// {
///   "refund" : {
///     "amount_money" : {
///       "amount" : 100,
///       "currency" : "CAD"
///     },
///     "app_id" : "sandbox-sq0idb-c2OuYt13YaCAeJq_2cd8OQ",
///     "cancel_reason" : "SELLER_CANCELED",
///     "card" : {
///       "bin" : "411111",
///       "card_brand" : "INTERAC",
///       "card_type" : "CREDIT",
///       "exp_month" : 1,
///       "exp_year" : 2022,
///       "fingerprint" : "sq-1-B1fP9MNNmZgVVaPKRND6oDKYbz25S2cTvg9Mzwg3RMTK1zT1PiGRT-AE3nTA8vSmmw",
///       "last_4" : "1111"
///     },
///     "created_at" : "2020-10-21T22:47:23.241Z",
///     "deadline_duration" : "PT5M",
///     "device_id" : "42690809-faa2-4701-a24b-19d3d34c9aaa",
///     "id" : "g6ycb6HD-5O5OvgkcNUhl7JBuINflcjKqUzXZY",
///     "location_id" : "76C9W6K8CNNQ5",
///     "order_id" : "kcuKDKreRaI4gF4TjmEgZjHk8Z7YY",
///     "payment_id" : "5O5OvgkcNUhl7JBuINflcjKqUzXZY",
///     "reason" : "reason",
///     "status" : "CANCELED",
///     "updated_at" : "2020-10-21T22:47:30.096Z"
///   }
/// }
public struct CancelTerminalRefundResponse: Codable {
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    public var refund: TerminalRefund?

    public init(errors: [Error]? = nil, refund: TerminalRefund? = nil) {
        self.errors = errors
        self.refund = refund
    }
}

/// Example:
///
/// {
/// 
/// }
public struct CaptureTransactionRequest: Codable {
    public init() {}
}

/// Defines the fields that are included in the response body of
/// a request to the [CaptureTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/capture-transaction) endpoint.
///
/// Example:
///
/// {
/// 
/// }
public struct CaptureTransactionResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(errors: [Error]? = nil) {
        self.errors = errors
    }
}

/// Represents the payment details of a card to be used for payments. These
/// details are determined by the payment token generated by Web Payments SDK.
public struct Card: Codable {
    /// Represents a postal address in a country. The address format is based
    /// on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
    /// see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
    /// This format has dedicated fields for four address components: postal code,
    /// locality (city), administrative district (state, prefecture, or province), and
    /// sublocality (town or village). These components have dedicated fields in the
    /// `Address` object because software sometimes behaves differently based on them.
    /// For example, sales tax software may charge different amounts of sales tax
    /// based on the postal code, and some software is only available in
    /// certain states due to compliance reasons.
    /// 
    /// For the remaining address components, the `Address` type provides the
    /// `address_line_1` and `address_line_2` fields for free-form data entry.
    /// These fields are free-form because the remaining address components have
    /// too many variations around the world and typical software does not parse
    /// these components. These fields enable users to enter anything they want.
    /// 
    /// Note that, in the current implementation, all other `Address` type fields are blank.
    /// These include `address_line_3`, `sublocality_2`, `sublocality_3`,
    /// `administrative_district_level_2`, `administrative_district_level_3`,
    /// `first_name`, `last_name`, and `organization`.
    /// 
    /// When it comes to localization, the seller's language preferences
    /// (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
    /// are ignored for addresses. Even though Square products (such as Square Point of Sale
    /// and the Seller Dashboard) mostly use a seller's language preference in
    /// communication, when it comes to addresses, they will use English for a US address,
    /// Japanese for an address in Japan, and so on.
    public var billingAddress: Address?
    /// The first six digits of the card number, known as the Bank Identification Number (BIN). Only the Payments API
    /// returns this field.
    public var bin: String?
    /// The card's brand.
    public var cardBrand: String?
    /// The type of the card.
    /// The Card object includes this field only in response to Payments API calls.
    public var cardType: String?
    /// The name of the cardholder.
    public var cardholderName: String?
    /// The ID of a customer created using the Customers API to be associated with the card.
    public var customerID: String?
    /// Indicates whether or not a card can be used for payments.
    public var isEnabled: Bool?
    /// The expiration month of the associated card as an integer between 1 and 12.
    public var expMonth: Int?
    /// The four-digit year of the card's expiration date.
    public var expYear: Int?
    /// __Not currently set.__ Intended as a Square-assigned identifier, based
    /// on the card number, to identify the card across multiple locations within a
    /// single application.
    public var fingerprint: String?
    /// Unique ID for this card. Generated by Square.
    public var id: String?
    /// The last 4 digits of the card number.
    public var last4: String?
    /// Indicates whether the Card is prepaid or not.
    /// The Card object includes this field only in response to Payments API calls.
    public var prepaidType: String?
    /// An optional user-defined reference ID that associates this card with
    /// another entity in an external system. For example, a customer ID from an
    /// external customer management system.
    public var referenceID: String?
    /// Current version number of the card. Increments with each card update. Requests to update an
    /// existing Card object will be rejected unless the version in the request matches the current
    /// version for the Card.
    public var version: Int?

    public init(billingAddress: Address? = nil, bin: String? = nil, cardBrand: String? = nil, cardType: String? = nil, cardholderName: String? = nil, customerID: String? = nil, isEnabled: Bool? = nil, expMonth: Int? = nil, expYear: Int? = nil, fingerprint: String? = nil, id: String? = nil, last4: String? = nil, prepaidType: String? = nil, referenceID: String? = nil, version: Int? = nil) {
        self.billingAddress = billingAddress
        self.bin = bin
        self.cardBrand = cardBrand
        self.cardType = cardType
        self.cardholderName = cardholderName
        self.customerID = customerID
        self.isEnabled = isEnabled
        self.expMonth = expMonth
        self.expYear = expYear
        self.fingerprint = fingerprint
        self.id = id
        self.last4 = last4
        self.prepaidType = prepaidType
        self.referenceID = referenceID
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case billingAddress = "billing_address"
        case bin
        case cardBrand = "card_brand"
        case cardType = "card_type"
        case cardholderName = "cardholder_name"
        case customerID = "customer_id"
        case isEnabled = "enabled"
        case expMonth = "exp_month"
        case expYear = "exp_year"
        case fingerprint
        case id
        case last4 = "last_4"
        case prepaidType = "prepaid_type"
        case referenceID = "reference_id"
        case version
    }
}

/// Indicates a card's brand, such as `VISA` or `MASTERCARD`.
public enum CardBrand: String, Codable, CaseIterable {
    case otherBrand = "OTHER_BRAND"
    case visa = "VISA"
    case mastercard = "MASTERCARD"
    case americanExpress = "AMERICAN_EXPRESS"
    case discover = "DISCOVER"
    case discoverDiners = "DISCOVER_DINERS"
    case jcb = "JCB"
    case chinaUnionpay = "CHINA_UNIONPAY"
    case squareGiftCard = "SQUARE_GIFT_CARD"
    case squareCapitalCard = "SQUARE_CAPITAL_CARD"
    case interac = "INTERAC"
    case eftpos = "EFTPOS"
    case felica = "FELICA"
    case ebt = "EBT"
}

/// Reflects the current status of a card payment. Contains only non-confidential information.
public struct CardPaymentDetails: Codable {
    /// For EMV payments, the cryptogram generated for the payment.
    public var applicationCryptogram: String?
    /// For EMV payments, the application ID identifies the EMV application used for the payment.
    public var applicationIdentifier: String?
    /// For EMV payments, the human-readable name of the EMV application used for the payment.
    public var applicationName: String?
    /// The status code returned by the card issuer that describes the payment's
    /// authorization status.
    public var authResultCode: String?
    /// The status code returned from the Address Verification System (AVS) check. The code can be
    /// `AVS_ACCEPTED`, `AVS_REJECTED`, or `AVS_NOT_CHECKED`.
    public var avsStatus: String?
    /// Represents the payment details of a card to be used for payments. These
    /// details are determined by the payment token generated by Web Payments SDK.
    public var card: Card?
    /// The timeline for card payments.
    public var cardPaymentTimeline: CardPaymentTimeline?
    /// The status code returned from the Card Verification Value (CVV) check. The code can be
    /// `CVV_ACCEPTED`, `CVV_REJECTED`, or `CVV_NOT_CHECKED`.
    public var cvvStatus: String?
    /// Details about the device that took the payment.
    public var deviceDetails: DeviceDetails?
    /// The method used to enter the card's details for the payment. The method can be
    /// `KEYED`, `SWIPED`, `EMV`, `ON_FILE`, or `CONTACTLESS`.
    public var entryMethod: String?
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// Whether the card must be physically present for the payment to
    /// be refunded.  If set to `true`, the card must be present.
    public var refundRequiresCardPresence: Bool?
    /// The statement description sent to the card networks.
    /// 
    /// Note: The actual statement description varies and is likely to be truncated and appended with
    /// additional information on a per issuer basis.
    public var statementDescription: String?
    /// The card payment's current state. The state can be AUTHORIZED, CAPTURED, VOIDED, or
    /// FAILED.
    public var status: String?
    /// For EMV payments, the method used to verify the cardholder's identity. The method can be
    /// `PIN`, `SIGNATURE`, `PIN_AND_SIGNATURE`, `ON_DEVICE`, or `NONE`.
    public var verificationMethod: String?
    /// For EMV payments, the results of the cardholder verification. The result can be
    /// `SUCCESS`, `FAILURE`, or `UNKNOWN`.
    public var verificationResults: String?

    public init(applicationCryptogram: String? = nil, applicationIdentifier: String? = nil, applicationName: String? = nil, authResultCode: String? = nil, avsStatus: String? = nil, card: Card? = nil, cardPaymentTimeline: CardPaymentTimeline? = nil, cvvStatus: String? = nil, deviceDetails: DeviceDetails? = nil, entryMethod: String? = nil, errors: [Error]? = nil, refundRequiresCardPresence: Bool? = nil, statementDescription: String? = nil, status: String? = nil, verificationMethod: String? = nil, verificationResults: String? = nil) {
        self.applicationCryptogram = applicationCryptogram
        self.applicationIdentifier = applicationIdentifier
        self.applicationName = applicationName
        self.authResultCode = authResultCode
        self.avsStatus = avsStatus
        self.card = card
        self.cardPaymentTimeline = cardPaymentTimeline
        self.cvvStatus = cvvStatus
        self.deviceDetails = deviceDetails
        self.entryMethod = entryMethod
        self.errors = errors
        self.refundRequiresCardPresence = refundRequiresCardPresence
        self.statementDescription = statementDescription
        self.status = status
        self.verificationMethod = verificationMethod
        self.verificationResults = verificationResults
    }

    private enum CodingKeys: String, CodingKey {
        case applicationCryptogram = "application_cryptogram"
        case applicationIdentifier = "application_identifier"
        case applicationName = "application_name"
        case authResultCode = "auth_result_code"
        case avsStatus = "avs_status"
        case card
        case cardPaymentTimeline = "card_payment_timeline"
        case cvvStatus = "cvv_status"
        case deviceDetails = "device_details"
        case entryMethod = "entry_method"
        case errors
        case refundRequiresCardPresence = "refund_requires_card_presence"
        case statementDescription = "statement_description"
        case status
        case verificationMethod = "verification_method"
        case verificationResults = "verification_results"
    }
}

/// The timeline for card payments.
public struct CardPaymentTimeline: Codable {
    /// The timestamp when the payment was authorized, in RFC 3339 format.
    public var authorizedAt: String?
    /// The timestamp when the payment was captured, in RFC 3339 format.
    public var capturedAt: String?
    /// The timestamp when the payment was voided, in RFC 3339 format.
    public var voidedAt: String?

    public init(authorizedAt: String? = nil, capturedAt: String? = nil, voidedAt: String? = nil) {
        self.authorizedAt = authorizedAt
        self.capturedAt = capturedAt
        self.voidedAt = voidedAt
    }

    private enum CodingKeys: String, CodingKey {
        case authorizedAt = "authorized_at"
        case capturedAt = "captured_at"
        case voidedAt = "voided_at"
    }
}

/// Indicates a card's prepaid type, such as `NOT_PREPAID` or `PREPAID`.
public enum CardPrepaidType: String, Codable, CaseIterable {
    case unknownPrepaidType = "UNKNOWN_PREPAID_TYPE"
    case notPrepaid = "NOT_PREPAID"
    case prepaid = "PREPAID"
}

public enum CardSquareProduct: String, Codable, CaseIterable {
    case unknownSquareProduct = "UNKNOWN_SQUARE_PRODUCT"
    case connectAPI = "CONNECT_API"
    case dashboard = "DASHBOARD"
    case registerClient = "REGISTER_CLIENT"
    case buyerDashboard = "BUYER_DASHBOARD"
    case web = "WEB"
    case invoices = "INVOICES"
    case giftCard = "GIFT_CARD"
    case virtualTerminal = "VIRTUAL_TERMINAL"
    case readerSdk = "READER_SDK"
}

/// Indicates a card's type, such as `CREDIT` or `DEBIT`.
public enum CardType: String, Codable, CaseIterable {
    case unknownCardType = "UNKNOWN_CARD_TYPE"
    case credit = "CREDIT"
    case debit = "DEBIT"
}

public struct CashDrawerDevice: Codable {
    /// The device Square-issued ID
    public var id: String?
    /// The device merchant-specified name.
    public var name: String?

    public init(id: String? = nil, name: String? = nil) {
        self.id = id
        self.name = name
    }
}

/// The types of events on a CashDrawerShift.
/// Each event type represents an employee action on the actual cash drawer
/// represented by a CashDrawerShift.
public enum CashDrawerEventType: String, Codable, CaseIterable {
    case noSale = "NO_SALE"
    case cashTenderPayment = "CASH_TENDER_PAYMENT"
    case otherTenderPayment = "OTHER_TENDER_PAYMENT"
    case cashTenderCancelledPayment = "CASH_TENDER_CANCELLED_PAYMENT"
    case otherTenderCancelledPayment = "OTHER_TENDER_CANCELLED_PAYMENT"
    case cashTenderRefund = "CASH_TENDER_REFUND"
    case otherTenderRefund = "OTHER_TENDER_REFUND"
    case paidIn = "PAID_IN"
    case paidOut = "PAID_OUT"
}

/// This model gives the details of a cash drawer shift.
/// The cash_payment_money, cash_refund_money, cash_paid_in_money,
/// and cash_paid_out_money fields are all computed by summing their respective
/// event types.
public struct CashDrawerShift: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var cashPaidInMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var cashPaidOutMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var cashPaymentMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var cashRefundsMoney: Money?
    /// The time when the shift was closed, in ISO 8601 format.
    public var closedAt: String?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var closedCashMoney: Money?
    /// The ID of the employee that closed the cash drawer shift by auditing
    /// the cash drawer contents.
    public var closingEmployeeID: String?
    /// The free-form text description of a cash drawer by an employee.
    public var description: String?
    public var device: CashDrawerDevice?
    /// The IDs of all employees that were logged into Square Point of Sale at any
    /// point while the cash drawer shift was open.
    public var employeeIDs: [String]?
    /// The time when the shift ended, in ISO 8601 format.
    public var endedAt: String?
    /// The ID of the employee that ended the cash drawer shift.
    public var endingEmployeeID: String?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var expectedCashMoney: Money?
    /// The shift unique ID.
    public var id: String?
    /// The time when the shift began, in ISO 8601 format.
    public var openedAt: String?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var openedCashMoney: Money?
    /// The ID of the employee that started the cash drawer shift.
    public var openingEmployeeID: String?
    /// The shift current state.
    public var state: String?

    public init(cashPaidInMoney: Money? = nil, cashPaidOutMoney: Money? = nil, cashPaymentMoney: Money? = nil, cashRefundsMoney: Money? = nil, closedAt: String? = nil, closedCashMoney: Money? = nil, closingEmployeeID: String? = nil, description: String? = nil, device: CashDrawerDevice? = nil, employeeIDs: [String]? = nil, endedAt: String? = nil, endingEmployeeID: String? = nil, expectedCashMoney: Money? = nil, id: String? = nil, openedAt: String? = nil, openedCashMoney: Money? = nil, openingEmployeeID: String? = nil, state: String? = nil) {
        self.cashPaidInMoney = cashPaidInMoney
        self.cashPaidOutMoney = cashPaidOutMoney
        self.cashPaymentMoney = cashPaymentMoney
        self.cashRefundsMoney = cashRefundsMoney
        self.closedAt = closedAt
        self.closedCashMoney = closedCashMoney
        self.closingEmployeeID = closingEmployeeID
        self.description = description
        self.device = device
        self.employeeIDs = employeeIDs
        self.endedAt = endedAt
        self.endingEmployeeID = endingEmployeeID
        self.expectedCashMoney = expectedCashMoney
        self.id = id
        self.openedAt = openedAt
        self.openedCashMoney = openedCashMoney
        self.openingEmployeeID = openingEmployeeID
        self.state = state
    }

    private enum CodingKeys: String, CodingKey {
        case cashPaidInMoney = "cash_paid_in_money"
        case cashPaidOutMoney = "cash_paid_out_money"
        case cashPaymentMoney = "cash_payment_money"
        case cashRefundsMoney = "cash_refunds_money"
        case closedAt = "closed_at"
        case closedCashMoney = "closed_cash_money"
        case closingEmployeeID = "closing_employee_id"
        case description
        case device
        case employeeIDs = "employee_ids"
        case endedAt = "ended_at"
        case endingEmployeeID = "ending_employee_id"
        case expectedCashMoney = "expected_cash_money"
        case id
        case openedAt = "opened_at"
        case openedCashMoney = "opened_cash_money"
        case openingEmployeeID = "opening_employee_id"
        case state
    }
}

public struct CashDrawerShiftEvent: Codable {
    /// The event time in ISO 8601 format.
    public var createdAt: String?
    /// An optional description of the event, entered by the employee that
    /// created the event.
    public var description: String?
    /// The ID of the employee that created the event.
    public var employeeID: String?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var eventMoney: Money?
    /// The type of cash drawer shift event.
    public var eventType: String?
    /// The unique ID of the event.
    public var id: String?

    public init(createdAt: String? = nil, description: String? = nil, employeeID: String? = nil, eventMoney: Money? = nil, eventType: String? = nil, id: String? = nil) {
        self.createdAt = createdAt
        self.description = description
        self.employeeID = employeeID
        self.eventMoney = eventMoney
        self.eventType = eventType
        self.id = id
    }

    private enum CodingKeys: String, CodingKey {
        case createdAt = "created_at"
        case description
        case employeeID = "employee_id"
        case eventMoney = "event_money"
        case eventType = "event_type"
        case id
    }
}

/// The current state of a cash drawer shift.
public enum CashDrawerShiftState: String, Codable, CaseIterable {
    case `open` = "OPEN"
    case ended = "ENDED"
    case closed = "CLOSED"
}

/// The summary of a closed cash drawer shift.
/// This model contains only the money counted to start a cash drawer shift, counted
/// at the end of the shift, and the amount that should be in the drawer at shift
/// end based on summing all cash drawer shift events.
public struct CashDrawerShiftSummary: Codable {
    /// The shift close time in ISO 8601 format.
    public var closedAt: String?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var closedCashMoney: Money?
    /// An employee free-text description of a cash drawer shift.
    public var description: String?
    /// The shift end time in ISO 8601 format.
    public var endedAt: String?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var expectedCashMoney: Money?
    /// The shift unique ID.
    public var id: String?
    /// The shift start time in ISO 8601 format.
    public var openedAt: String?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var openedCashMoney: Money?
    /// The shift current state.
    public var state: String?

    public init(closedAt: String? = nil, closedCashMoney: Money? = nil, description: String? = nil, endedAt: String? = nil, expectedCashMoney: Money? = nil, id: String? = nil, openedAt: String? = nil, openedCashMoney: Money? = nil, state: String? = nil) {
        self.closedAt = closedAt
        self.closedCashMoney = closedCashMoney
        self.description = description
        self.endedAt = endedAt
        self.expectedCashMoney = expectedCashMoney
        self.id = id
        self.openedAt = openedAt
        self.openedCashMoney = openedCashMoney
        self.state = state
    }

    private enum CodingKeys: String, CodingKey {
        case closedAt = "closed_at"
        case closedCashMoney = "closed_cash_money"
        case description
        case endedAt = "ended_at"
        case expectedCashMoney = "expected_cash_money"
        case id
        case openedAt = "opened_at"
        case openedCashMoney = "opened_cash_money"
        case state
    }
}

/// Stores details about a cash payment. Contains only non-confidential information. For more information, see
/// [Take Cash Payments](https://developer.squareup.com/docs/payments-api/take-payments/cash-payments).
public struct CashPaymentDetails: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var buyerSuppliedMoney: Money
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var changeBackMoney: Money?

    public init(buyerSuppliedMoney: Money, changeBackMoney: Money? = nil) {
        self.buyerSuppliedMoney = buyerSuppliedMoney
        self.changeBackMoney = changeBackMoney
    }

    private enum CodingKeys: String, CodingKey {
        case buyerSuppliedMoney = "buyer_supplied_money"
        case changeBackMoney = "change_back_money"
    }
}

/// A category to which a `CatalogItem` instance belongs.
///
/// Example:
///
/// {
///   "object" : {
///     "category_data" : {
///       "name" : "Beverages"
///     },
///     "id" : "#Beverages",
///     "present_at_all_locations" : true,
///     "type" : "CATEGORY"
///   }
/// }
public struct CatalogCategory: Codable {
    /// The category name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
    public var name: String?

    public init(name: String? = nil) {
        self.name = name
    }
}

/// Contains information defining a custom attribute. Custom attributes are
/// intended to store additional information about a catalog object or to associate a
/// catalog object with an entity in another system. Do not use custom attributes
/// to store any sensitive information (personally identifiable information, card details, etc.).
/// [Read more about custom attributes](https://developer.squareup.com/docs/catalog-api/add-custom-attributes)
public struct CatalogCustomAttributeDefinition: Codable {
    /// The set of Catalog Object Types that this Custom Attribute may be applied to.
    /// Currently, only `ITEM` and `ITEM_VARIATION` are allowed. At least one type must be included.
    public var allowedObjectTypes: [String]
    /// The visibility of a custom attribute to applications other than the application
    /// that created the attribute.
    public var appVisibility: String?
    /// __Read-only.__ The number of custom attributes that reference this
    /// custom attribute definition. Set by the server in response to a ListCatalog
    /// request with `include_counts` set to `true`.  If the actual count is greater
    /// than 100, `custom_attribute_usage_count` will be set to `100`.
    public var customAttributeUsageCount: Int?
    /// Seller-oriented description of the meaning of this Custom Attribute,
    /// any constraints that the seller should observe, etc. May be displayed as a tooltip in Square UIs.
    public var description: String?
    /// The name of the desired custom attribute key that can be used to access
    /// the custom attribute value on catalog objects. Cannot be modified after the
    /// custom attribute definition has been created.
    /// Must be between 1 and 60 characters, and may only contain the characters `[a-zA-Z0-9_-]`.
    public var key: String?
    /// The name of this definition for API and seller-facing UI purposes.
    /// The name must be unique within the (merchant, application) pair. Required.
    /// May not be empty and may not exceed 255 characters. Can be modified after creation.
    public var name: String
    public var numberConfig: CatalogCustomAttributeDefinitionNumberConfig?
    /// Configuration associated with `SELECTION`-type custom attribute definitions.
    public var selectionConfig: CatalogCustomAttributeDefinitionSelectionConfig?
    /// The visibility of a custom attribute in seller-facing UIs (including Square Point
    /// of Sale applications and Square Dashboard). May be modified.
    public var sellerVisibility: String?
    /// Provides information about the application used to generate a change.
    public var sourceApplication: SourceApplication?
    /// Configuration associated with Custom Attribute Definitions of type `STRING`.
    public var stringConfig: CatalogCustomAttributeDefinitionStringConfig?
    /// The type of this custom attribute. Cannot be modified after creation.
    /// Required.
    public var type: String

    public init(allowedObjectTypes: [String], appVisibility: String? = nil, customAttributeUsageCount: Int? = nil, description: String? = nil, key: String? = nil, name: String, numberConfig: CatalogCustomAttributeDefinitionNumberConfig? = nil, selectionConfig: CatalogCustomAttributeDefinitionSelectionConfig? = nil, sellerVisibility: String? = nil, sourceApplication: SourceApplication? = nil, stringConfig: CatalogCustomAttributeDefinitionStringConfig? = nil, type: String) {
        self.allowedObjectTypes = allowedObjectTypes
        self.appVisibility = appVisibility
        self.customAttributeUsageCount = customAttributeUsageCount
        self.description = description
        self.key = key
        self.name = name
        self.numberConfig = numberConfig
        self.selectionConfig = selectionConfig
        self.sellerVisibility = sellerVisibility
        self.sourceApplication = sourceApplication
        self.stringConfig = stringConfig
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case allowedObjectTypes = "allowed_object_types"
        case appVisibility = "app_visibility"
        case customAttributeUsageCount = "custom_attribute_usage_count"
        case description
        case key
        case name
        case numberConfig = "number_config"
        case selectionConfig = "selection_config"
        case sellerVisibility = "seller_visibility"
        case sourceApplication = "source_application"
        case stringConfig = "string_config"
        case type
    }
}

/// Defines the visibility of a custom attribute to applications other than their
/// creating application.
public enum CatalogCustomAttributeDefinitionAppVisibility: String, Codable, CaseIterable {
    case appVisibilityHidden = "APP_VISIBILITY_HIDDEN"
    case appVisibilityReadOnly = "APP_VISIBILITY_READ_ONLY"
    case appVisibilityReadWriteValues = "APP_VISIBILITY_READ_WRITE_VALUES"
}

public struct CatalogCustomAttributeDefinitionNumberConfig: Codable {
    /// An integer between 0 and 5 that represents the maximum number of
    /// positions allowed after the decimal in number custom attribute values
    /// For example:
    /// 
    /// - if the precision is 0, the quantity can be 1, 2, 3, etc.
    /// - if the precision is 1, the quantity can be 0.1, 0.2, etc.
    /// - if the precision is 2, the quantity can be 0.01, 0.12, etc.
    /// 
    /// Default: 5
    public var precision: Int?

    public init(precision: Int? = nil) {
        self.precision = precision
    }
}

/// Configuration associated with `SELECTION`-type custom attribute definitions.
public struct CatalogCustomAttributeDefinitionSelectionConfig: Codable {
    /// The set of valid `CatalogCustomAttributeSelections`. Up to a maximum of 100
    /// selections can be defined. Can be modified.
    public var allowedSelections: [CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection]?
    /// The maximum number of selections that can be set. The maximum value for this
    /// attribute is 100. The default value is 1. The value can be modified, but changing the value will not
    /// affect existing custom attribute values on objects. Clients need to
    /// handle custom attributes with more selected values than allowed by this limit.
    public var maxAllowedSelections: Int?

    public init(allowedSelections: [CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection]? = nil, maxAllowedSelections: Int? = nil) {
        self.allowedSelections = allowedSelections
        self.maxAllowedSelections = maxAllowedSelections
    }

    private enum CodingKeys: String, CodingKey {
        case allowedSelections = "allowed_selections"
        case maxAllowedSelections = "max_allowed_selections"
    }
}

/// A named selection for this `SELECTION`-type custom attribute definition.
public struct CatalogCustomAttributeDefinitionSelectionConfigCustomAttributeSelection: Codable {
    /// Selection name, unique within `allowed_selections`.
    public var name: String
    /// Unique ID set by Square.
    public var uid: String?

    public init(name: String, uid: String? = nil) {
        self.name = name
        self.uid = uid
    }
}

/// Defines the visibility of a custom attribute to sellers in Square
/// client applications, Square APIs or in Square UIs (including Square Point
/// of Sale applications and Square Dashboard).
public enum CatalogCustomAttributeDefinitionSellerVisibility: String, Codable, CaseIterable {
    case sellerVisibilityHidden = "SELLER_VISIBILITY_HIDDEN"
    case sellerVisibilityReadWriteValues = "SELLER_VISIBILITY_READ_WRITE_VALUES"
}

/// Configuration associated with Custom Attribute Definitions of type `STRING`.
public struct CatalogCustomAttributeDefinitionStringConfig: Codable {
    /// If true, each Custom Attribute instance associated with this Custom Attribute
    /// Definition must have a unique value within the seller's catalog. For
    /// example, this may be used for a value like a SKU that should not be
    /// duplicated within a seller's catalog. May not be modified after the
    /// definition has been created.
    public var enforceUniqueness: Bool?

    public init(enforceUniqueness: Bool? = nil) {
        self.enforceUniqueness = enforceUniqueness
    }

    private enum CodingKeys: String, CodingKey {
        case enforceUniqueness = "enforce_uniqueness"
    }
}

/// Defines the possible types for a custom attribute.
public enum CatalogCustomAttributeDefinitionType: String, Codable, CaseIterable {
    case string = "STRING"
    case boolean = "BOOLEAN"
    case number = "NUMBER"
    case selection = "SELECTION"
}

/// An instance of a custom attribute. Custom attributes can be defined and
/// added to `ITEM` and `ITEM_VARIATION` type catalog objects.
/// [Read more about custom attributes](https://developer.squareup.com/docs/catalog-api/add-custom-attributes).
public struct CatalogCustomAttributeValue: Codable {
    /// A `true` or `false` value. Populated if `type` = `BOOLEAN`.
    public var isBooleanValue: Bool?
    /// __Read-only.__ The id of the [CatalogCustomAttributeDefinition](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeDefinition) this value belongs to.
    public var customAttributeDefinitionID: String?
    /// __Read-only.__ A copy of key from the associated `CatalogCustomAttributeDefinition`.
    public var key: String?
    /// The name of the custom attribute.
    public var name: String?
    /// Populated if `type` = `NUMBER`. Contains a string
    /// representation of a decimal number, using a `.` as the decimal separator.
    public var numberValue: String?
    /// One or more choices from `allowed_selections`. Populated if `type` = `SELECTION`.
    public var selectionUidValues: [String]?
    /// The string value of the custom attribute.  Populated if `type` = `STRING`.
    public var stringValue: String?
    /// __Read-only.__ A copy of type from the associated `CatalogCustomAttributeDefinition`.
    public var type: String?

    public init(isBooleanValue: Bool? = nil, customAttributeDefinitionID: String? = nil, key: String? = nil, name: String? = nil, numberValue: String? = nil, selectionUidValues: [String]? = nil, stringValue: String? = nil, type: String? = nil) {
        self.isBooleanValue = isBooleanValue
        self.customAttributeDefinitionID = customAttributeDefinitionID
        self.key = key
        self.name = name
        self.numberValue = numberValue
        self.selectionUidValues = selectionUidValues
        self.stringValue = stringValue
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case isBooleanValue = "boolean_value"
        case customAttributeDefinitionID = "custom_attribute_definition_id"
        case key
        case name
        case numberValue = "number_value"
        case selectionUidValues = "selection_uid_values"
        case stringValue = "string_value"
        case type
    }
}

/// A discount applicable to items.
///
/// Example:
///
/// {
///   "object" : {
///     "discount_data" : {
///       "discount_type" : "FIXED_PERCENTAGE",
///       "label_color" : "red",
///       "name" : "Welcome to the Dark(Roast) Side!",
///       "percentage" : "5.4",
///       "pin_required" : false
///     },
///     "id" : "#Maythe4th",
///     "present_at_all_locations" : true,
///     "type" : "DISCOUNT"
///   }
/// }
public struct CatalogDiscount: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money?
    /// Indicates whether the discount is a fixed amount or percentage, or entered at the time of sale.
    public var discountType: String?
    /// The color of the discount display label in the Square Point of Sale app. This must be a valid hex color code.
    public var labelColor: String?
    /// Indicates whether this discount should reduce the price used to calculate tax.
    /// 
    /// Most discounts should use `MODIFY_TAX_BASIS`. However, in some circumstances taxes must
    /// be calculated based on an item's price, ignoring a particular discount. For example,
    /// in many US jurisdictions, a manufacturer coupon or instant rebate reduces the price a
    /// customer pays but does not reduce the sale price used to calculate how much sales tax is
    /// due. In this case, the discount representing that manufacturer coupon should have
    /// `DO_NOT_MODIFY_TAX_BASIS` for this field.
    /// 
    /// If you are unsure whether you need to use this field, consult your tax professional.
    public var modifyTaxBasis: String?
    /// The discount name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
    public var name: String?
    /// The percentage of the discount as a string representation of a decimal number, using a `.` as the decimal
    /// separator and without a `%` sign. A value of `7.5` corresponds to `7.5%`. Specify a percentage of `0` if `discount_type`
    /// is `VARIABLE_PERCENTAGE`.
    /// 
    /// Do not use this field for amount-based or variable discounts.
    public var percentage: String?
    /// Indicates whether a mobile staff member needs to enter their PIN to apply the
    /// discount to a payment in the Square Point of Sale app.
    public var isPinRequired: Bool?

    public init(amountMoney: Money? = nil, discountType: String? = nil, labelColor: String? = nil, modifyTaxBasis: String? = nil, name: String? = nil, percentage: String? = nil, isPinRequired: Bool? = nil) {
        self.amountMoney = amountMoney
        self.discountType = discountType
        self.labelColor = labelColor
        self.modifyTaxBasis = modifyTaxBasis
        self.name = name
        self.percentage = percentage
        self.isPinRequired = isPinRequired
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
        case discountType = "discount_type"
        case labelColor = "label_color"
        case modifyTaxBasis = "modify_tax_basis"
        case name
        case percentage
        case isPinRequired = "pin_required"
    }
}

public enum CatalogDiscountModifyTaxBasis: String, Codable, CaseIterable {
    case modifyTaxBasis = "MODIFY_TAX_BASIS"
    case doNotModifyTaxBasis = "DO_NOT_MODIFY_TAX_BASIS"
}

/// How to apply a CatalogDiscount to a CatalogItem.
public enum CatalogDiscountType: String, Codable, CaseIterable {
    case fixedPercentage = "FIXED_PERCENTAGE"
    case fixedAmount = "FIXED_AMOUNT"
    case variablePercentage = "VARIABLE_PERCENTAGE"
    case variableAmount = "VARIABLE_AMOUNT"
}

/// A mapping between a temporary client-supplied ID and a permanent server-generated ID.
/// 
/// When calling [UpsertCatalogObject](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/upsert-catalog-object) or
/// [BatchUpsertCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/batch-upsert-catalog-objects) to
/// create a [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance, you can supply
/// a temporary ID for the to-be-created object, especially when the object is to be referenced
/// elsewhere in the same request body. This temporary ID can be any string unique within
/// the call, but must be prefixed by "#".
/// 
/// After the request is submitted and the object created, a permanent server-generated ID is assigned
/// to the new object. The permanent ID is unique across the Square catalog.
public struct CatalogIDMapping: Codable {
    /// The client-supplied temporary `#`-prefixed ID for a new `CatalogObject`.
    public var clientObjectID: String?
    /// The permanent ID for the CatalogObject created by the server.
    public var objectID: String?

    public init(clientObjectID: String? = nil, objectID: String? = nil) {
        self.clientObjectID = clientObjectID
        self.objectID = objectID
    }

    private enum CodingKeys: String, CodingKey {
        case clientObjectID = "client_object_id"
        case objectID = "object_id"
    }
}

/// An image file to use in Square catalogs. It can be associated with catalog
/// items, item variations, and categories.
public struct CatalogImage: Codable {
    /// A caption that describes what is shown in the image. Displayed in the
    /// Square Online Store. This is a searchable attribute for use in applicable query filters
    /// using the [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects).
    public var caption: String?
    /// The internal name to identify this image in calls to the Square API.
    /// This is a searchable attribute for use in applicable query filters
    /// using the [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects).
    /// It is not unique and should not be shown in a buyer facing context.
    public var name: String?
    /// The URL of this image, generated by Square after an image is uploaded
    /// using the [CreateCatalogImage](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/create-catalog-image) endpoint.
    public var url: String?

    public init(caption: String? = nil, name: String? = nil, url: String? = nil) {
        self.caption = caption
        self.name = name
        self.url = url
    }
}

/// Example:
///
/// {
/// 
/// }
public struct CatalogInfoRequest: Codable {
    public init() {}
}

/// Example:
///
/// {
///   "limits" : {
///     "batch_delete_max_object_ids" : 200,
///     "batch_retrieve_max_object_ids" : 1000,
///     "batch_upsert_max_objects_per_batch" : 1000,
///     "batch_upsert_max_total_objects" : 10000,
///     "search_max_page_limit" : 1000,
///     "update_item_modifier_lists_max_item_ids" : 1000,
///     "update_item_modifier_lists_max_modifier_lists_to_disable" : 1000,
///     "update_item_modifier_lists_max_modifier_lists_to_enable" : 1000,
///     "update_item_taxes_max_item_ids" : 1000,
///     "update_item_taxes_max_taxes_to_disable" : 1000,
///     "update_item_taxes_max_taxes_to_enable" : 1000
///   }
/// }
public struct CatalogInfoResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    public var limits: CatalogInfoResponseLimits?
    /// Group of standard measurement units.
    public var standardUnitDescriptionGroup: StandardUnitDescriptionGroup?

    public init(errors: [Error]? = nil, limits: CatalogInfoResponseLimits? = nil, standardUnitDescriptionGroup: StandardUnitDescriptionGroup? = nil) {
        self.errors = errors
        self.limits = limits
        self.standardUnitDescriptionGroup = standardUnitDescriptionGroup
    }

    private enum CodingKeys: String, CodingKey {
        case errors
        case limits
        case standardUnitDescriptionGroup = "standard_unit_description_group"
    }
}

public struct CatalogInfoResponseLimits: Codable {
    /// The maximum number of object IDs that may be included in a single
    /// `/v2/catalog/batch-delete` request.
    public var batchDeleteMaxObjectIDs: Int?
    /// The maximum number of object IDs that may appear in a `/v2/catalog/batch-retrieve`
    /// request.
    public var batchRetrieveMaxObjectIDs: Int?
    /// The maximum number of objects that may appear within a single batch in a
    /// `/v2/catalog/batch-upsert` request.
    public var batchUpsertMaxObjectsPerBatch: Int?
    /// The maximum number of objects that may appear across all batches in a
    /// `/v2/catalog/batch-upsert` request.
    public var batchUpsertMaxTotalObjects: Int?
    /// The maximum number of results that may be returned in a page of a
    /// `/v2/catalog/search` response.
    public var searchMaxPageLimit: Int?
    /// The maximum number of item IDs that may be included in a single
    /// `/v2/catalog/update-item-modifier-lists` request.
    public var updateItemModifierListsMaxItemIDs: Int?
    /// The maximum number of modifier list IDs to be disabled that may be included in
    /// a single `/v2/catalog/update-item-modifier-lists` request.
    public var updateItemModifierListsMaxModifierListsToDisable: Int?
    /// The maximum number of modifier list IDs to be enabled that may be included in
    /// a single `/v2/catalog/update-item-modifier-lists` request.
    public var updateItemModifierListsMaxModifierListsToEnable: Int?
    /// The maximum number of item IDs that may be included in a single
    /// `/v2/catalog/update-item-taxes` request.
    public var updateItemTaxesMaxItemIDs: Int?
    /// The maximum number of tax IDs to be disabled that may be included in a single
    /// `/v2/catalog/update-item-taxes` request.
    public var updateItemTaxesMaxTaxesToDisable: Int?
    /// The maximum number of tax IDs to be enabled that may be included in a single
    /// `/v2/catalog/update-item-taxes` request.
    public var updateItemTaxesMaxTaxesToEnable: Int?

    public init(batchDeleteMaxObjectIDs: Int? = nil, batchRetrieveMaxObjectIDs: Int? = nil, batchUpsertMaxObjectsPerBatch: Int? = nil, batchUpsertMaxTotalObjects: Int? = nil, searchMaxPageLimit: Int? = nil, updateItemModifierListsMaxItemIDs: Int? = nil, updateItemModifierListsMaxModifierListsToDisable: Int? = nil, updateItemModifierListsMaxModifierListsToEnable: Int? = nil, updateItemTaxesMaxItemIDs: Int? = nil, updateItemTaxesMaxTaxesToDisable: Int? = nil, updateItemTaxesMaxTaxesToEnable: Int? = nil) {
        self.batchDeleteMaxObjectIDs = batchDeleteMaxObjectIDs
        self.batchRetrieveMaxObjectIDs = batchRetrieveMaxObjectIDs
        self.batchUpsertMaxObjectsPerBatch = batchUpsertMaxObjectsPerBatch
        self.batchUpsertMaxTotalObjects = batchUpsertMaxTotalObjects
        self.searchMaxPageLimit = searchMaxPageLimit
        self.updateItemModifierListsMaxItemIDs = updateItemModifierListsMaxItemIDs
        self.updateItemModifierListsMaxModifierListsToDisable = updateItemModifierListsMaxModifierListsToDisable
        self.updateItemModifierListsMaxModifierListsToEnable = updateItemModifierListsMaxModifierListsToEnable
        self.updateItemTaxesMaxItemIDs = updateItemTaxesMaxItemIDs
        self.updateItemTaxesMaxTaxesToDisable = updateItemTaxesMaxTaxesToDisable
        self.updateItemTaxesMaxTaxesToEnable = updateItemTaxesMaxTaxesToEnable
    }

    private enum CodingKeys: String, CodingKey {
        case batchDeleteMaxObjectIDs = "batch_delete_max_object_ids"
        case batchRetrieveMaxObjectIDs = "batch_retrieve_max_object_ids"
        case batchUpsertMaxObjectsPerBatch = "batch_upsert_max_objects_per_batch"
        case batchUpsertMaxTotalObjects = "batch_upsert_max_total_objects"
        case searchMaxPageLimit = "search_max_page_limit"
        case updateItemModifierListsMaxItemIDs = "update_item_modifier_lists_max_item_ids"
        case updateItemModifierListsMaxModifierListsToDisable = "update_item_modifier_lists_max_modifier_lists_to_disable"
        case updateItemModifierListsMaxModifierListsToEnable = "update_item_modifier_lists_max_modifier_lists_to_enable"
        case updateItemTaxesMaxItemIDs = "update_item_taxes_max_item_ids"
        case updateItemTaxesMaxTaxesToDisable = "update_item_taxes_max_taxes_to_disable"
        case updateItemTaxesMaxTaxesToEnable = "update_item_taxes_max_taxes_to_enable"
    }
}

/// A [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance of the `ITEM` type, also referred to as an item, in the catalog.
///
/// Example:
///
/// {
///   "object" : {
///     "id" : "#Cocoa",
///     "item_data" : {
///       "abbreviation" : "Ch",
///       "description" : "Hot chocolate",
///       "name" : "Cocoa",
///       "visibility" : "PRIVATE"
///     },
///     "present_at_all_locations" : true,
///     "type" : "ITEM"
///   }
/// }
public struct CatalogItem: Codable {
    /// The text of the item's display label in the Square Point of Sale app. Only up to the first five characters of the string are used.
    /// This attribute is searchable, and its value length is of Unicode code points.
    public var abbreviation: String?
    /// If `true`, the item can be added to electronically fulfilled orders from the merchant's online store.
    public var isAvailableElectronically: Bool?
    /// If `true`, the item can be added to pickup orders from the merchant's online store.
    public var isAvailableForPickup: Bool?
    /// If `true`, the item can be added to shipping orders from the merchant's online store.
    public var isAvailableOnline: Bool?
    /// The ID of the item's category, if any.
    public var categoryID: String?
    /// The item's description. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
    public var description: String?
    /// List of item options IDs for this item. Used to manage and group item
    /// variations in a specified order.
    /// 
    /// Maximum: 6 item options.
    public var itemOptions: [CatalogItemOptionForItem]?
    /// The color of the item's display label in the Square Point of Sale app. This must be a valid hex color code.
    public var labelColor: String?
    /// A set of `CatalogItemModifierListInfo` objects
    /// representing the modifier lists that apply to this item, along with the overrides and min
    /// and max limits that are specific to this item. Modifier lists
    /// may also be added to or deleted from an item using `UpdateItemModifierLists`.
    public var modifierListInfo: [CatalogItemModifierListInfo]?
    /// The item's name. This is a searchable attribute for use in applicable query filters, its value must not be empty, and the length is of Unicode code points.
    public var name: String?
    /// The product type of the item. May not be changed once an item has been created.
    /// 
    /// Only items of product type `REGULAR` or `APPOINTMENTS_SERVICE` may be created by this API; items with other product
    /// types are read-only.
    public var productType: String?
    /// If `false`, the Square Point of Sale app will present the `CatalogItem`'s
    /// details screen immediately, allowing the merchant to choose `CatalogModifier`s
    /// before adding the item to the cart.  This is the default behavior.
    /// 
    /// If `true`, the Square Point of Sale app will immediately add the item to the cart with the pre-selected
    /// modifiers, and merchants can edit modifiers by drilling down onto the item's details.
    /// 
    /// Third-party clients are encouraged to implement similar behaviors.
    public var isSkipModifierScreen: Bool?
    /// A name to sort the item by. If this name is unspecified, namely, the `sort_name` field is absent, the regular `name` field is used for sorting.
    /// 
    /// It is currently supported for sellers of the Japanese locale only.
    public var sortName: String?
    /// A set of IDs indicating the taxes enabled for
    /// this item. When updating an item, any taxes listed here will be added to the item.
    /// Taxes may also be added to or deleted from an item using `UpdateItemTaxes`.
    public var taxIDs: [String]?
    /// A list of [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) objects for this item. An item must have
    /// at least one variation.
    public var variations: [CatalogObject]?

    public init(abbreviation: String? = nil, isAvailableElectronically: Bool? = nil, isAvailableForPickup: Bool? = nil, isAvailableOnline: Bool? = nil, categoryID: String? = nil, description: String? = nil, itemOptions: [CatalogItemOptionForItem]? = nil, labelColor: String? = nil, modifierListInfo: [CatalogItemModifierListInfo]? = nil, name: String? = nil, productType: String? = nil, isSkipModifierScreen: Bool? = nil, sortName: String? = nil, taxIDs: [String]? = nil, variations: [CatalogObject]? = nil) {
        self.abbreviation = abbreviation
        self.isAvailableElectronically = isAvailableElectronically
        self.isAvailableForPickup = isAvailableForPickup
        self.isAvailableOnline = isAvailableOnline
        self.categoryID = categoryID
        self.description = description
        self.itemOptions = itemOptions
        self.labelColor = labelColor
        self.modifierListInfo = modifierListInfo
        self.name = name
        self.productType = productType
        self.isSkipModifierScreen = isSkipModifierScreen
        self.sortName = sortName
        self.taxIDs = taxIDs
        self.variations = variations
    }

    private enum CodingKeys: String, CodingKey {
        case abbreviation
        case isAvailableElectronically = "available_electronically"
        case isAvailableForPickup = "available_for_pickup"
        case isAvailableOnline = "available_online"
        case categoryID = "category_id"
        case description
        case itemOptions = "item_options"
        case labelColor = "label_color"
        case modifierListInfo = "modifier_list_info"
        case name
        case productType = "product_type"
        case isSkipModifierScreen = "skip_modifier_screen"
        case sortName = "sort_name"
        case taxIDs = "tax_ids"
        case variations
    }
}

/// Options to control the properties of a `CatalogModifierList` applied to a `CatalogItem` instance.
public struct CatalogItemModifierListInfo: Codable {
    /// If `true`, enable this `CatalogModifierList`. The default value is `true`.
    public var isEnabled: Bool?
    /// If 0 or larger, the largest number of `CatalogModifier`s that can be selected from this `CatalogModifierList`.
    public var maxSelectedModifiers: Int?
    /// If 0 or larger, the smallest number of `CatalogModifier`s that must be selected from this `CatalogModifierList`.
    public var minSelectedModifiers: Int?
    /// The ID of the `CatalogModifierList` controlled by this `CatalogModifierListInfo`.
    public var modifierListID: String
    /// A set of `CatalogModifierOverride` objects that override whether a given `CatalogModifier` is enabled by default.
    public var modifierOverrides: [CatalogModifierOverride]?

    public init(isEnabled: Bool? = nil, maxSelectedModifiers: Int? = nil, minSelectedModifiers: Int? = nil, modifierListID: String, modifierOverrides: [CatalogModifierOverride]? = nil) {
        self.isEnabled = isEnabled
        self.maxSelectedModifiers = maxSelectedModifiers
        self.minSelectedModifiers = minSelectedModifiers
        self.modifierListID = modifierListID
        self.modifierOverrides = modifierOverrides
    }

    private enum CodingKeys: String, CodingKey {
        case isEnabled = "enabled"
        case maxSelectedModifiers = "max_selected_modifiers"
        case minSelectedModifiers = "min_selected_modifiers"
        case modifierListID = "modifier_list_id"
        case modifierOverrides = "modifier_overrides"
    }
}

/// A group of variations for a `CatalogItem`.
public struct CatalogItemOption: Codable {
    /// The item option's human-readable description. Displayed in the Square
    /// Point of Sale app for the seller and in the Online Store or on receipts for
    /// the buyer. This is a searchable attribute for use in applicable query filters.
    public var description: String?
    /// The item option's display name for the customer. This is a searchable attribute for use in applicable query filters.
    public var displayName: String?
    /// The item option's display name for the seller. Must be unique across
    /// all item options. This is a searchable attribute for use in applicable query filters.
    public var name: String?
    /// If true, display colors for entries in `values` when present.
    public var isShowColors: Bool?
    /// A list of CatalogObjects containing the
    /// `CatalogItemOptionValue`s for this item.
    public var values: [CatalogObject]?

    public init(description: String? = nil, displayName: String? = nil, name: String? = nil, isShowColors: Bool? = nil, values: [CatalogObject]? = nil) {
        self.description = description
        self.displayName = displayName
        self.name = name
        self.isShowColors = isShowColors
        self.values = values
    }

    private enum CodingKeys: String, CodingKey {
        case description
        case displayName = "display_name"
        case name
        case isShowColors = "show_colors"
        case values
    }
}

/// An option that can be assigned to an item.
/// For example, a t-shirt item may offer a color option or a size option.
public struct CatalogItemOptionForItem: Codable {
    /// The unique id of the item option, used to form the dimensions of the item option matrix in a specified order.
    public var itemOptionID: String?

    public init(itemOptionID: String? = nil) {
        self.itemOptionID = itemOptionID
    }

    private enum CodingKeys: String, CodingKey {
        case itemOptionID = "item_option_id"
    }
}

/// An enumerated value that can link a
/// `CatalogItemVariation` to an item option as one of
/// its item option values.
public struct CatalogItemOptionValue: Codable {
    /// The HTML-supported hex color for the item option (e.g., "#ff8d4e85").
    /// Only displayed if `show_colors` is enabled on the parent `ItemOption`. When
    /// left unset, `color` defaults to white ("#ffffff") when `show_colors` is
    /// enabled on the parent `ItemOption`.
    public var color: String?
    /// A human-readable description for the option value. This is a searchable attribute for use in applicable query filters.
    public var description: String?
    /// Unique ID of the associated item option.
    public var itemOptionID: String?
    /// Name of this item option value. This is a searchable attribute for use in applicable query filters.
    public var name: String?
    /// Determines where this option value appears in a list of option values.
    public var ordinal: Int?

    public init(color: String? = nil, description: String? = nil, itemOptionID: String? = nil, name: String? = nil, ordinal: Int? = nil) {
        self.color = color
        self.description = description
        self.itemOptionID = itemOptionID
        self.name = name
        self.ordinal = ordinal
    }

    private enum CodingKeys: String, CodingKey {
        case color
        case description
        case itemOptionID = "item_option_id"
        case name
        case ordinal
    }
}

/// A `CatalogItemOptionValue` links an item variation to an item option as
/// an item option value. For example, a t-shirt item may offer a color option and
/// a size option. An item option value would represent each variation of t-shirt:
/// For example, "Color:Red, Size:Small" or "Color:Blue, Size:Medium".
public struct CatalogItemOptionValueForItemVariation: Codable {
    /// The unique id of an item option.
    public var itemOptionID: String?
    /// The unique id of the selected value for the item option.
    public var itemOptionValueID: String?

    public init(itemOptionID: String? = nil, itemOptionValueID: String? = nil) {
        self.itemOptionID = itemOptionID
        self.itemOptionValueID = itemOptionValueID
    }

    private enum CodingKeys: String, CodingKey {
        case itemOptionID = "item_option_id"
        case itemOptionValueID = "item_option_value_id"
    }
}

/// The type of a CatalogItem. Connect V2 only allows the creation of `REGULAR` or `APPOINTMENTS_SERVICE` items.
public enum CatalogItemProductType: String, Codable, CaseIterable {
    case regular = "REGULAR"
    case giftCard = "GIFT_CARD"
    case appointmentsService = "APPOINTMENTS_SERVICE"
}

/// An item variation (i.e., product) in the Catalog object model. Each item
/// may have a maximum of 250 item variations.
public struct CatalogItemVariation: Codable {
    /// If the `CatalogItem` that owns this item variation is of type
    /// `APPOINTMENTS_SERVICE`, a bool representing whether this service is available for booking.
    public var isAvailableForBooking: Bool?
    /// If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type`
    /// is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.
    /// 
    /// This value is always an integer.
    public var inventoryAlertThreshold: Int?
    /// Indicates whether the item variation displays an alert when its inventory quantity is less than or equal
    /// to its `inventory_alert_threshold`.
    public var inventoryAlertType: String?
    /// The ID of the `CatalogItem` associated with this item variation.
    public var itemID: String?
    /// List of item option values associated with this item variation. Listed
    /// in the same order as the item options of the parent item.
    public var itemOptionValues: [CatalogItemOptionValueForItemVariation]?
    /// Per-location price and inventory overrides.
    public var locationOverrides: [ItemVariationLocationOverrides]?
    /// ID of the â€˜CatalogMeasurementUnitâ€™ that is used to measure the quantity
    /// sold of this item variation. If left unset, the item will be sold in
    /// whole quantities.
    public var measurementUnitID: String?
    /// The item variation's name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
    public var name: String?
    /// The order in which this item variation should be displayed. This value is read-only. On writes, the ordinal
    /// for each item variation within a parent `CatalogItem` is set according to the item variations's
    /// position. On reads, the value is not guaranteed to be sequential or unique.
    public var ordinal: Int?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var priceMoney: Money?
    /// Indicates whether the item variation's price is fixed or determined at the time
    /// of sale.
    public var pricingType: String?
    /// If the `CatalogItem` that owns this item variation is of type
    /// `APPOINTMENTS_SERVICE`, then this is the duration of the service in milliseconds. For
    /// example, a 30 minute appointment would have the value `1800000`, which is equal to
    /// 30 (minutes) * 60 (seconds per minute) * 1000 (milliseconds per second).
    public var serviceDuration: Int?
    /// The item variation's SKU, if any. This is a searchable attribute for use in applicable query filters.
    public var sku: String?
    /// Whether stock is counted directly on this variation (TRUE) or only on its components (FALSE).
    /// For backward compatibility missing values will be interpreted as TRUE.
    public var isStockable: Bool?
    /// Represents the rule of conversion between a stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)
    /// and a non-stockable sell-by or receive-by `CatalogItemVariation` that
    /// share the same underlying stock.
    public var stockableConversion: CatalogStockConversion?
    /// Tokens of employees that can perform the service represented by this variation. Only valid for
    /// variations of type `APPOINTMENTS_SERVICE`.
    public var teamMemberIDs: [String]?
    /// If `true`, inventory tracking is active for the variation.
    public var isTrackInventory: Bool?
    /// The universal product code (UPC) of the item variation, if any. This is a searchable attribute for use in applicable query filters.
    /// 
    /// The value of this attribute should be a number of 12-14 digits long.  This restriction is enforced on the Square Seller Dashboard,
    /// Square Point of Sale or Retail Point of Sale apps, where this attribute shows in the GTIN field. If a non-compliant UPC value is assigned
    /// to this attribute using the API, the value is not editable on the Seller Dashboard, Square Point of Sale or Retail Point of Sale apps
    /// unless it is updated to fit the expected format.
    public var upc: String?
    /// Arbitrary user metadata to associate with the item variation. This attribute value length is of Unicode code points.
    public var userData: String?

    public init(isAvailableForBooking: Bool? = nil, inventoryAlertThreshold: Int? = nil, inventoryAlertType: String? = nil, itemID: String? = nil, itemOptionValues: [CatalogItemOptionValueForItemVariation]? = nil, locationOverrides: [ItemVariationLocationOverrides]? = nil, measurementUnitID: String? = nil, name: String? = nil, ordinal: Int? = nil, priceMoney: Money? = nil, pricingType: String? = nil, serviceDuration: Int? = nil, sku: String? = nil, isStockable: Bool? = nil, stockableConversion: CatalogStockConversion? = nil, teamMemberIDs: [String]? = nil, isTrackInventory: Bool? = nil, upc: String? = nil, userData: String? = nil) {
        self.isAvailableForBooking = isAvailableForBooking
        self.inventoryAlertThreshold = inventoryAlertThreshold
        self.inventoryAlertType = inventoryAlertType
        self.itemID = itemID
        self.itemOptionValues = itemOptionValues
        self.locationOverrides = locationOverrides
        self.measurementUnitID = measurementUnitID
        self.name = name
        self.ordinal = ordinal
        self.priceMoney = priceMoney
        self.pricingType = pricingType
        self.serviceDuration = serviceDuration
        self.sku = sku
        self.isStockable = isStockable
        self.stockableConversion = stockableConversion
        self.teamMemberIDs = teamMemberIDs
        self.isTrackInventory = isTrackInventory
        self.upc = upc
        self.userData = userData
    }

    private enum CodingKeys: String, CodingKey {
        case isAvailableForBooking = "available_for_booking"
        case inventoryAlertThreshold = "inventory_alert_threshold"
        case inventoryAlertType = "inventory_alert_type"
        case itemID = "item_id"
        case itemOptionValues = "item_option_values"
        case locationOverrides = "location_overrides"
        case measurementUnitID = "measurement_unit_id"
        case name
        case ordinal
        case priceMoney = "price_money"
        case pricingType = "pricing_type"
        case serviceDuration = "service_duration"
        case sku
        case isStockable = "stockable"
        case stockableConversion = "stockable_conversion"
        case teamMemberIDs = "team_member_ids"
        case isTrackInventory = "track_inventory"
        case upc
        case userData = "user_data"
    }
}

/// Represents the unit used to measure a `CatalogItemVariation` and
/// specifies the precision for decimal quantities.
public struct CatalogMeasurementUnit: Codable {
    /// Represents a unit of measurement to use with a quantity, such as ounces
    /// or inches. Exactly one of the following fields are required: `custom_unit`,
    /// `area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.
    public var measurementUnit: MeasurementUnit?
    /// An integer between 0 and 5 that represents the maximum number of
    /// positions allowed after the decimal in quantities measured with this unit.
    /// For example:
    /// 
    /// - if the precision is 0, the quantity can be 1, 2, 3, etc.
    /// - if the precision is 1, the quantity can be 0.1, 0.2, etc.
    /// - if the precision is 2, the quantity can be 0.01, 0.12, etc.
    /// 
    /// Default: 3
    public var precision: Int?

    public init(measurementUnit: MeasurementUnit? = nil, precision: Int? = nil) {
        self.measurementUnit = measurementUnit
        self.precision = precision
    }

    private enum CodingKeys: String, CodingKey {
        case measurementUnit = "measurement_unit"
        case precision
    }
}

/// A modifier applicable to items at the time of sale.
///
/// Example:
///
/// {
///   "object" : {
///     "modifier_data" : {
///       "name" : "Almond Milk",
///       "price_money" : {
///         "amount" : 250,
///         "currency" : "USD"
///       }
///     },
///     "present_at_all_locations" : true,
///     "type" : "MODIFIER"
///   }
/// }
public struct CatalogModifier: Codable {
    /// The ID of the `CatalogModifierList` associated with this modifier.
    public var modifierListID: String?
    /// The modifier name.  This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
    public var name: String?
    /// Determines where this `CatalogModifier` appears in the `CatalogModifierList`.
    public var ordinal: Int?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var priceMoney: Money?

    public init(modifierListID: String? = nil, name: String? = nil, ordinal: Int? = nil, priceMoney: Money? = nil) {
        self.modifierListID = modifierListID
        self.name = name
        self.ordinal = ordinal
        self.priceMoney = priceMoney
    }

    private enum CodingKeys: String, CodingKey {
        case modifierListID = "modifier_list_id"
        case name
        case ordinal
        case priceMoney = "price_money"
    }
}

/// A list of modifiers applicable to items at the time of sale.
/// 
/// For example, a "Condiments" modifier list applicable to a "Hot Dog" item
/// may contain "Ketchup", "Mustard", and "Relish" modifiers.
/// Use the `selection_type` field to specify whether or not multiple selections from
/// the modifier list are allowed.
///
/// Example:
///
/// {
///   "id" : "#MilkType",
///   "modifier_list_data" : {
///     "modifiers" : [
///       {
///         "modifier_data" : {
///           "name" : "Whole Milk",
///           "price_money" : {
///             "amount" : 0,
///             "currency" : "USD"
///           }
///         },
///         "present_at_all_locations" : true,
///         "type" : "MODIFIER"
///       },
///       {
///         "modifier_data" : {
///           "name" : "Almond Milk",
///           "price_money" : {
///             "amount" : 250,
///             "currency" : "USD"
///           }
///         },
///         "present_at_all_locations" : true,
///         "type" : "MODIFIER"
///       },
///       {
///         "modifier_data" : {
///           "name" : "Soy Milk",
///           "price_money" : {
///             "amount" : 250,
///             "currency" : "USD"
///           }
///         },
///         "present_at_all_locations" : true,
///         "type" : "MODIFIER"
///       }
///     ],
///     "name" : "Milk Type",
///     "selection_type" : "SINGLE"
///   },
///   "present_at_all_locations" : true,
///   "type" : "MODIFIER_LIST"
/// }
public struct CatalogModifierList: Codable {
    /// The options included in the `CatalogModifierList`.
    /// You must include at least one `CatalogModifier`.
    /// Each CatalogObject must have type `MODIFIER` and contain
    /// `CatalogModifier` data.
    public var modifiers: [CatalogObject]?
    /// The name for the `CatalogModifierList` instance. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
    public var name: String?
    /// Determines where this modifier list appears in a list of `CatalogModifierList` values.
    public var ordinal: Int?
    /// Indicates whether multiple options from the modifier list
    /// can be applied to a single `CatalogItem`.
    public var selectionType: String?

    public init(modifiers: [CatalogObject]? = nil, name: String? = nil, ordinal: Int? = nil, selectionType: String? = nil) {
        self.modifiers = modifiers
        self.name = name
        self.ordinal = ordinal
        self.selectionType = selectionType
    }

    private enum CodingKeys: String, CodingKey {
        case modifiers
        case name
        case ordinal
        case selectionType = "selection_type"
    }
}

/// Indicates whether a CatalogModifierList supports multiple selections.
public enum CatalogModifierListSelectionType: String, Codable, CaseIterable {
    case single = "SINGLE"
    case multiple = "MULTIPLE"
}

/// Options to control how to override the default behavior of the specified modifier.
public struct CatalogModifierOverride: Codable {
    /// The ID of the `CatalogModifier` whose default behavior is being overridden.
    public var modifierID: String
    /// If `true`, this `CatalogModifier` should be selected by default for this `CatalogItem`.
    public var isOnByDefault: Bool?

    public init(modifierID: String, isOnByDefault: Bool? = nil) {
        self.modifierID = modifierID
        self.isOnByDefault = isOnByDefault
    }

    private enum CodingKeys: String, CodingKey {
        case modifierID = "modifier_id"
        case isOnByDefault = "on_by_default"
    }
}

/// The wrapper object for the Catalog entries of a given object type.
/// 
/// The type of a particular `CatalogObject` is determined by the value of the
/// `type` attribute and only the corresponding data attribute can be set on the `CatalogObject` instance.
/// For example, the following list shows some instances of `CatalogObject` of a given `type` and
/// their corresponding data attribute that can be set:
/// - For a `CatalogObject` of the `ITEM` type, set the `item_data` attribute to yield the `CatalogItem` object.
/// - For a `CatalogObject` of the `ITEM_VARIATION` type, set the `item_variation_data` attribute to yield the `CatalogItemVariation` object.
/// - For a `CatalogObject` of the `MODIFIER` type, set the `modifier_data` attribute to yield the `CatalogModifier` object.
/// - For a `CatalogObject` of the `MODIFIER_LIST` type, set the `modifier_list_data` attribute to yield the `CatalogModifierList` object.
/// - For a `CatalogObject` of the `CATEGORY` type, set the `category_data` attribute to yield the `CatalogCategory` object.
/// - For a `CatalogObject` of the `DISCOUNT` type, set the `discount_data` attribute to yield the `CatalogDiscount` object.
/// - For a `CatalogObject` of the `TAX` type, set the `tax_data` attribute to yield the `CatalogTax` object.
/// - For a `CatalogObject` of the `IMAGE` type, set the `image_data` attribute to yield the `CatalogImageData`  object.
/// - For a `CatalogObject` of the `QUICK_AMOUNTS_SETTINGS` type, set the `quick_amounts_settings_data` attribute to yield the `CatalogQuickAmountsSettings` object.
/// - For a `CatalogObject` of the `PRICING_RULE` type, set the `pricing_rule_data` attribute to yield the `CatalogPricingRule` object.
/// - For a `CatalogObject` of the `TIME_PERIOD` type, set the `time_period_data` attribute to yield the `CatalogTimePeriod` object.
/// - For a `CatalogObject` of the `PRODUCT_SET` type, set the `product_set_data` attribute to yield the `CatalogProductSet`  object.
/// - For a `CatalogObject` of the `SUBSCRIPTION_PLAN` type, set the `subscription_plan_data` attribute to yield the `CatalogSubscriptionPlan` object.
/// 
/// 
/// For a more detailed discussion of the Catalog data model, please see the
/// [Design a Catalog](https://developer.squareup.com/docs/catalog-api/design-a-catalog) guide.
///
/// Example:
///
/// {
///   "catalog_object" : {
///     "absent_at_location_ids" : [
///       "{{ LOCATIONID-1 }}",
///       "{{ LOCATIONID-N }}"
///     ],
///     "category_data" : "{{ CatalogCategory object only if type=CATEGORY }}",
///     "connect_v1_ids" : {
///       "catalog_v1_id" : "{{ itemID from Catalog v1 }}",
///       "location_id" : "{{ location where v1 ID is used }}"
///     },
///     "discount_data" : "{{ CatalogDiscount object only if type=DISCOUNT }}",
///     "id" : "{{ set by Catalog during object creation }}",
///     "is_deleted" : "{{ [true | false] }}",
///     "item_data" : "{{ CatalogItem object only if type=ITEM }}",
///     "item_variation_data" : "{{ CatalogItemVariation object only if type=ITEM_VARIATION }}",
///     "modifier_data" : "{{ CatalogModifier object only if type=MODIFIER }}",
///     "modifier_list_data" : "{{ CatalogModifierList object only if type=MODIFIER_LIST }}",
///     "present_at_all_locations" : "{{ [true | false] }}",
///     "present_at_location_ids" : [
///       "{{ LOCATIONID-1 }}",
///       "{{ LOCATIONID-N }}"
///     ],
///     "tax_data" : "{{ CatalogTax object only if type=TAX }}",
///     "type" : "{{ [ITEM | ITEM_VARIATION | MODIFIER | MODIFIER_LIST | CATEGORY | DISCOUNT | TAX] }}",
///     "updated_at" : "{{ date & time of most recent update }}",
///     "version" : "{{ version of the CatalogObject }}"
///   }
/// }
public struct CatalogObject: Codable {
    /// A list of locations where the object is not present, even if `present_at_all_locations` is `true`.
    /// This can include locations that are deactivated.
    public var absentAtLocationIDs: [String]?
    /// The Connect v1 IDs for this object at each location where it is present, where they
    /// differ from the object's Connect V2 ID. The field will only be present for objects that
    /// have been created or modified by legacy APIs.
    public var catalogV1IDs: [CatalogV1ID]?
    /// A category to which a `CatalogItem` instance belongs.
    ///
    /// Example:
    ///
    /// {
    ///   "object" : {
    ///     "category_data" : {
    ///       "name" : "Beverages"
    ///     },
    ///     "id" : "#Beverages",
    ///     "present_at_all_locations" : true,
    ///     "type" : "CATEGORY"
    ///   }
    /// }
    public var categoryData: CatalogCategory?
    /// Contains information defining a custom attribute. Custom attributes are
    /// intended to store additional information about a catalog object or to associate a
    /// catalog object with an entity in another system. Do not use custom attributes
    /// to store any sensitive information (personally identifiable information, card details, etc.).
    /// [Read more about custom attributes](https://developer.squareup.com/docs/catalog-api/add-custom-attributes)
    public var customAttributeDefinitionData: CatalogCustomAttributeDefinition?
    /// A map (key-value pairs) of application-defined custom attribute values. The value of a key-value pair
    /// is a [CatalogCustomAttributeValue](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeValue) object. The key is the `key` attribute
    /// value defined in the associated [CatalogCustomAttributeDefinition](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogCustomAttributeDefinition)
    /// object defined by the application making the request.
    /// 
    /// If the `CatalogCustomAttributeDefinition` object is
    /// defined by another application, the `CatalogCustomAttributeDefinition`'s key attribute value is prefixed by
    /// the defining application ID. For example, if the `CatalogCustomAttributeDefinition` has a `key` attribute of
    /// `"cocoa_brand"` and the defining application ID is `"abcd1234"`, the key in the map is `"abcd1234:cocoa_brand"`
    /// if the application making the request is different from the application defining the custom attribute definition.
    /// Otherwise, the key used in the map is simply `"cocoa_brand"`.
    /// 
    /// Application-defined custom attributes that are set at a global (location-independent) level.
    /// Custom attribute values are intended to store additional information about a catalog object
    /// or associations with an entity in another system. Do not use custom attributes
    /// to store any sensitive information (personally identifiable information, card details, etc.).
    public var customAttributeValues: [String: CatalogCustomAttributeValue]?
    /// A discount applicable to items.
    ///
    /// Example:
    ///
    /// {
    ///   "object" : {
    ///     "discount_data" : {
    ///       "discount_type" : "FIXED_PERCENTAGE",
    ///       "label_color" : "red",
    ///       "name" : "Welcome to the Dark(Roast) Side!",
    ///       "percentage" : "5.4",
    ///       "pin_required" : false
    ///     },
    ///     "id" : "#Maythe4th",
    ///     "present_at_all_locations" : true,
    ///     "type" : "DISCOUNT"
    ///   }
    /// }
    public var discountData: CatalogDiscount?
    /// An identifier to reference this object in the catalog. When a new `CatalogObject`
    /// is inserted, the client should set the id to a temporary identifier starting with
    /// a "`#`" character. Other objects being inserted or updated within the same request
    /// may use this identifier to refer to the new object.
    /// 
    /// When the server receives the new object, it will supply a unique identifier that
    /// replaces the temporary identifier for all future references.
    public var id: String
    /// An image file to use in Square catalogs. It can be associated with catalog
    /// items, item variations, and categories.
    public var imageData: CatalogImage?
    /// Identifies the `CatalogImage` attached to this `CatalogObject`.
    public var imageID: String?
    /// If `true`, the object has been deleted from the database. Must be `false` for new objects
    /// being inserted. When deleted, the `updated_at` field will equal the deletion time.
    public var isDeleted: Bool?
    public var itemData: CatalogItem?
    public var itemOptionData: CatalogItemOption?
    /// An enumerated value that can link a
    /// `CatalogItemVariation` to an item option as one of
    /// its item option values.
    public var itemOptionValueData: CatalogItemOptionValue?
    /// An item variation (i.e., product) in the Catalog object model. Each item
    /// may have a maximum of 250 item variations.
    public var itemVariationData: CatalogItemVariation?
    /// Represents the unit used to measure a `CatalogItemVariation` and
    /// specifies the precision for decimal quantities.
    public var measurementUnitData: CatalogMeasurementUnit?
    /// A modifier applicable to items at the time of sale.
    ///
    /// Example:
    ///
    /// {
    ///   "object" : {
    ///     "modifier_data" : {
    ///       "name" : "Almond Milk",
    ///       "price_money" : {
    ///         "amount" : 250,
    ///         "currency" : "USD"
    ///       }
    ///     },
    ///     "present_at_all_locations" : true,
    ///     "type" : "MODIFIER"
    ///   }
    /// }
    public var modifierData: CatalogModifier?
    public var modifierListData: CatalogModifierList?
    /// If `true`, this object is present at all locations (including future locations), except where specified in
    /// the `absent_at_location_ids` field. If `false`, this object is not present at any locations (including future locations),
    /// except where specified in the `present_at_location_ids` field. If not specified, defaults to `true`.
    public var isPresentAtAllLocations: Bool?
    /// A list of locations where the object is present, even if `present_at_all_locations` is `false`.
    /// This can include locations that are deactivated.
    public var presentAtLocationIDs: [String]?
    /// Defines how discounts are automatically applied to a set of items that match the pricing rule
    /// during the active time period.
    public var pricingRuleData: CatalogPricingRule?
    /// Represents a collection of catalog objects for the purpose of applying a
    /// `PricingRule`. Including a catalog object will include all of its subtypes.
    /// For example, including a category in a product set will include all of its
    /// items and associated item variations in the product set. Including an item in
    /// a product set will also include its item variations.
    public var productSetData: CatalogProductSet?
    /// A parent Catalog Object model represents a set of Quick Amounts and the settings control the amounts.
    public var quickAmountsSettingsData: CatalogQuickAmountsSettings?
    /// Describes a subscription plan. For more information, see
    /// [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan).
    public var subscriptionPlanData: CatalogSubscriptionPlan?
    /// A tax applicable to an item.
    ///
    /// Example:
    ///
    /// {
    ///   "object" : {
    ///     "id" : "#SalesTax",
    ///     "present_at_all_locations" : true,
    ///     "tax_data" : {
    ///       "calculation_phase" : "TAX_SUBTOTAL_PHASE",
    ///       "enabled" : true,
    ///       "fee_applies_to_custom_amounts" : true,
    ///       "inclusion_type" : "ADDITIVE",
    ///       "name" : "Sales Tax",
    ///       "percentage" : "5.0"
    ///     },
    ///     "type" : "TAX"
    ///   }
    /// }
    public var taxData: CatalogTax?
    /// Represents a time period - either a single period or a repeating period.
    public var timePeriodData: CatalogTimePeriod?
    /// The type of this object. Each object type has expected
    /// properties expressed in a structured format within its corresponding `*_data` field below.
    public var type: String
    /// Last modification [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) in RFC 3339 format, e.g., `"2016-08-15T23:59:33.123Z"`
    /// would indicate the UTC time (denoted by `Z`) of August 15, 2016 at 23:59:33 and 123 milliseconds.
    public var updatedAt: String?
    /// The version of the object. When updating an object, the version supplied
    /// must match the version in the database, otherwise the write will be rejected as conflicting.
    public var version: Int?

    public init(absentAtLocationIDs: [String]? = nil, catalogV1IDs: [CatalogV1ID]? = nil, categoryData: CatalogCategory? = nil, customAttributeDefinitionData: CatalogCustomAttributeDefinition? = nil, customAttributeValues: [String: CatalogCustomAttributeValue]? = nil, discountData: CatalogDiscount? = nil, id: String, imageData: CatalogImage? = nil, imageID: String? = nil, isDeleted: Bool? = nil, itemData: CatalogItem? = nil, itemOptionData: CatalogItemOption? = nil, itemOptionValueData: CatalogItemOptionValue? = nil, itemVariationData: CatalogItemVariation? = nil, measurementUnitData: CatalogMeasurementUnit? = nil, modifierData: CatalogModifier? = nil, modifierListData: CatalogModifierList? = nil, isPresentAtAllLocations: Bool? = nil, presentAtLocationIDs: [String]? = nil, pricingRuleData: CatalogPricingRule? = nil, productSetData: CatalogProductSet? = nil, quickAmountsSettingsData: CatalogQuickAmountsSettings? = nil, subscriptionPlanData: CatalogSubscriptionPlan? = nil, taxData: CatalogTax? = nil, timePeriodData: CatalogTimePeriod? = nil, type: String, updatedAt: String? = nil, version: Int? = nil) {
        self.absentAtLocationIDs = absentAtLocationIDs
        self.catalogV1IDs = catalogV1IDs
        self.categoryData = categoryData
        self.customAttributeDefinitionData = customAttributeDefinitionData
        self.customAttributeValues = customAttributeValues
        self.discountData = discountData
        self.id = id
        self.imageData = imageData
        self.imageID = imageID
        self.isDeleted = isDeleted
        self.itemData = itemData
        self.itemOptionData = itemOptionData
        self.itemOptionValueData = itemOptionValueData
        self.itemVariationData = itemVariationData
        self.measurementUnitData = measurementUnitData
        self.modifierData = modifierData
        self.modifierListData = modifierListData
        self.isPresentAtAllLocations = isPresentAtAllLocations
        self.presentAtLocationIDs = presentAtLocationIDs
        self.pricingRuleData = pricingRuleData
        self.productSetData = productSetData
        self.quickAmountsSettingsData = quickAmountsSettingsData
        self.subscriptionPlanData = subscriptionPlanData
        self.taxData = taxData
        self.timePeriodData = timePeriodData
        self.type = type
        self.updatedAt = updatedAt
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case absentAtLocationIDs = "absent_at_location_ids"
        case catalogV1IDs = "catalog_v1_ids"
        case categoryData = "category_data"
        case customAttributeDefinitionData = "custom_attribute_definition_data"
        case customAttributeValues = "custom_attribute_values"
        case discountData = "discount_data"
        case id
        case imageData = "image_data"
        case imageID = "image_id"
        case isDeleted = "is_deleted"
        case itemData = "item_data"
        case itemOptionData = "item_option_data"
        case itemOptionValueData = "item_option_value_data"
        case itemVariationData = "item_variation_data"
        case measurementUnitData = "measurement_unit_data"
        case modifierData = "modifier_data"
        case modifierListData = "modifier_list_data"
        case isPresentAtAllLocations = "present_at_all_locations"
        case presentAtLocationIDs = "present_at_location_ids"
        case pricingRuleData = "pricing_rule_data"
        case productSetData = "product_set_data"
        case quickAmountsSettingsData = "quick_amounts_settings_data"
        case subscriptionPlanData = "subscription_plan_data"
        case taxData = "tax_data"
        case timePeriodData = "time_period_data"
        case type
        case updatedAt = "updated_at"
        case version
    }
}

/// A batch of catalog objects.
public struct CatalogObjectBatch: Codable {
    /// A list of CatalogObjects belonging to this batch.
    public var objects: [CatalogObject]

    public init(objects: [CatalogObject]) {
        self.objects = objects
    }
}

/// A reference to a Catalog object at a specific version. In general this is
/// used as an entry point into a graph of catalog objects, where the objects exist
/// at a specific version.
public struct CatalogObjectReference: Codable {
    /// The version of the object.
    public var catalogVersion: Int?
    /// The ID of the referenced object.
    public var objectID: String?

    public init(catalogVersion: Int? = nil, objectID: String? = nil) {
        self.catalogVersion = catalogVersion
        self.objectID = objectID
    }

    private enum CodingKeys: String, CodingKey {
        case catalogVersion = "catalog_version"
        case objectID = "object_id"
    }
}

/// Possible types of CatalogObjects returned from the Catalog, each
/// containing type-specific properties in the `*_data` field corresponding to the object type.
public enum CatalogObjectType: String, Codable, CaseIterable {
    case item = "ITEM"
    case image = "IMAGE"
    case category = "CATEGORY"
    case itemVariation = "ITEM_VARIATION"
    case tax = "TAX"
    case discount = "DISCOUNT"
    case modifierList = "MODIFIER_LIST"
    case modifier = "MODIFIER"
    case pricingRule = "PRICING_RULE"
    case productSet = "PRODUCT_SET"
    case timePeriod = "TIME_PERIOD"
    case measurementUnit = "MEASUREMENT_UNIT"
    case subscriptionPlan = "SUBSCRIPTION_PLAN"
    case itemOption = "ITEM_OPTION"
    case itemOptionVal = "ITEM_OPTION_VAL"
    case customAttributeDefinition = "CUSTOM_ATTRIBUTE_DEFINITION"
    case quickAmountsSettings = "QUICK_AMOUNTS_SETTINGS"
}

/// Defines how discounts are automatically applied to a set of items that match the pricing rule
/// during the active time period.
public struct CatalogPricingRule: Codable {
    /// __Deprecated__: Please use the `exclude_products_id` field to apply
    /// an exclude set instead. Exclude sets allow better control over quantity
    /// ranges and offer more flexibility for which matched items receive a discount.
    /// 
    /// `CatalogProductSet` to apply the pricing to.
    /// An apply rule matches within the subset of the cart that fits the match rules (the match set).
    /// An apply rule can only match once in the match set.
    /// If not supplied, the pricing will be applied to all products in the match set.
    /// Other products retain their base price, or a price generated by other rules.
    public var applyProductsID: String?
    /// A list of IDs of customer groups, the members of which are eligible for discounts specified in this pricing rule.
    /// Notice that a group ID is generated by the Customers API.
    /// If this field is not set, the specified discount applies to matched products sold to anyone whether the buyer
    /// has a customer profile created or not. If this `customer_group_ids_any` field is set, the specified discount
    /// applies only to matched products sold to customers belonging to the specified customer groups.
    public var customerGroupIDsAny: [String]?
    /// Unique ID for the `CatalogDiscount` to take off
    /// the price of all matched items.
    public var discountID: String?
    /// `CatalogProductSet` to exclude from the pricing rule.
    /// An exclude rule matches within the subset of the cart that fits the match rules (the match set).
    /// An exclude rule can only match once in the match set.
    /// If not supplied, the pricing will be applied to all products in the match set.
    /// Other products retain their base price, or a price generated by other rules.
    public var excludeProductsID: String?
    /// If an `exclude_products_id` was given, controls which subset of matched
    /// products is excluded from any discounts.
    /// 
    /// Default value: `LEAST_EXPENSIVE`
    public var excludeStrategy: String?
    /// Unique ID for the `CatalogProductSet` that will be matched by this rule. A match rule
    /// matches within the entire cart, and can match multiple times. This field will always be set.
    public var matchProductsID: String?
    /// User-defined name for the pricing rule. For example, "Buy one get one
    /// free" or "10% off".
    public var name: String?
    /// A list of unique IDs for the catalog time periods when
    /// this pricing rule is in effect. If left unset, the pricing rule is always
    /// in effect.
    public var timePeriodIDs: [String]?
    /// Represents the date the Pricing Rule is valid from. Represented in RFC 3339 full-date format (YYYY-MM-DD).
    public var validFromDate: String?
    /// Represents the local time the pricing rule should be valid from. Represented in RFC 3339 partial-time format
    /// (HH:MM:SS). Partial seconds will be truncated.
    public var validFromLocalTime: String?
    /// Represents the date the Pricing Rule is valid until. Represented in RFC 3339 full-date format (YYYY-MM-DD).
    public var validUntilDate: String?
    /// Represents the local time the pricing rule should be valid until. Represented in RFC 3339 partial-time format
    /// (HH:MM:SS). Partial seconds will be truncated.
    public var validUntilLocalTime: String?

    public init(applyProductsID: String? = nil, customerGroupIDsAny: [String]? = nil, discountID: String? = nil, excludeProductsID: String? = nil, excludeStrategy: String? = nil, matchProductsID: String? = nil, name: String? = nil, timePeriodIDs: [String]? = nil, validFromDate: String? = nil, validFromLocalTime: String? = nil, validUntilDate: String? = nil, validUntilLocalTime: String? = nil) {
        self.applyProductsID = applyProductsID
        self.customerGroupIDsAny = customerGroupIDsAny
        self.discountID = discountID
        self.excludeProductsID = excludeProductsID
        self.excludeStrategy = excludeStrategy
        self.matchProductsID = matchProductsID
        self.name = name
        self.timePeriodIDs = timePeriodIDs
        self.validFromDate = validFromDate
        self.validFromLocalTime = validFromLocalTime
        self.validUntilDate = validUntilDate
        self.validUntilLocalTime = validUntilLocalTime
    }

    private enum CodingKeys: String, CodingKey {
        case applyProductsID = "apply_products_id"
        case customerGroupIDsAny = "customer_group_ids_any"
        case discountID = "discount_id"
        case excludeProductsID = "exclude_products_id"
        case excludeStrategy = "exclude_strategy"
        case matchProductsID = "match_products_id"
        case name
        case timePeriodIDs = "time_period_ids"
        case validFromDate = "valid_from_date"
        case validFromLocalTime = "valid_from_local_time"
        case validUntilDate = "valid_until_date"
        case validUntilLocalTime = "valid_until_local_time"
    }
}

/// Indicates whether the price of a CatalogItemVariation should be entered manually at the time of sale.
public enum CatalogPricingType: String, Codable, CaseIterable {
    case fixedPricing = "FIXED_PRICING"
    case variablePricing = "VARIABLE_PRICING"
}

/// Represents a collection of catalog objects for the purpose of applying a
/// `PricingRule`. Including a catalog object will include all of its subtypes.
/// For example, including a category in a product set will include all of its
/// items and associated item variations in the product set. Including an item in
/// a product set will also include its item variations.
public struct CatalogProductSet: Codable {
    /// If set to `true`, the product set will include every item in the catalog.
    /// Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.
    public var isAllProducts: Bool?
    /// User-defined name for the product set. For example, "Clearance Items"
    /// or "Winter Sale Items".
    public var name: String?
    /// Unique IDs for any `CatalogObject` included in this product set.
    /// All objects in this set must be included in an order for a pricing rule to apply.
    /// 
    /// Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.
    /// 
    /// Max: 500 catalog object IDs.
    public var productIDsAll: [String]?
    /// Unique IDs for any `CatalogObject` included in this product set. Any
    /// number of these catalog objects can be in an order for a pricing rule to apply.
    /// 
    /// This can be used with `product_ids_all` in a parent `CatalogProductSet` to
    /// match groups of products for a bulk discount, such as a discount for an
    /// entree and side combo.
    /// 
    /// Only one of `product_ids_all`, `product_ids_any`, or `all_products` can be set.
    /// 
    /// Max: 500 catalog object IDs.
    public var productIDsAny: [String]?
    /// If set, there must be exactly this many items from `products_any` or `products_all`
    /// in the cart for the discount to apply.
    /// 
    /// Cannot be combined with either `quantity_min` or `quantity_max`.
    public var quantityExact: Int?
    /// If set, the pricing rule will apply to a maximum of this many items from
    /// `products_any` or `products_all`.
    public var quantityMax: Int?
    /// If set, there must be at least this many items from `products_any` or `products_all`
    /// in a cart for the discount to apply. See `quantity_exact`. Defaults to 0 if
    /// `quantity_exact`, `quantity_min` and `quantity_max` are all unspecified.
    public var quantityMin: Int?

    public init(isAllProducts: Bool? = nil, name: String? = nil, productIDsAll: [String]? = nil, productIDsAny: [String]? = nil, quantityExact: Int? = nil, quantityMax: Int? = nil, quantityMin: Int? = nil) {
        self.isAllProducts = isAllProducts
        self.name = name
        self.productIDsAll = productIDsAll
        self.productIDsAny = productIDsAny
        self.quantityExact = quantityExact
        self.quantityMax = quantityMax
        self.quantityMin = quantityMin
    }

    private enum CodingKeys: String, CodingKey {
        case isAllProducts = "all_products"
        case name
        case productIDsAll = "product_ids_all"
        case productIDsAny = "product_ids_any"
        case quantityExact = "quantity_exact"
        case quantityMax = "quantity_max"
        case quantityMin = "quantity_min"
    }
}

/// A query composed of one or more different types of filters to narrow the scope of targeted objects when calling the `SearchCatalogObjects` endpoint.
/// 
/// Although a query can have multiple filters, only certain query types can be combined per call to [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects).
/// Any combination of the following types may be used together:
/// - [exact_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryExact)
/// - [prefix_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryPrefix)
/// - [range_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryRange)
/// - [sorted_attribute_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQuerySortedAttribute)
/// - [text_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryText)
/// All other query types cannot be combined with any others.
/// 
/// When a query filter is based on an attribute, the attribute must be searchable.
/// Searchable attributes are listed as follows, along their parent types that can be searched for with applicable query filters.
/// 
/// * Searchable attribute and objects queryable by searchable attributes **
/// - `name`:  `CatalogItem`, `CatalogItemVariation`, `CatalogCategory`, `CatalogTax`, `CatalogDiscount`, `CatalogModifier`, 'CatalogModifierList`, `CatalogItemOption`, `CatalogItemOptionValue`
/// - `description`: `CatalogItem`, `CatalogItemOptionValue`
/// - `abbreviation`: `CatalogItem`
/// - `upc`: `CatalogItemVariation`
/// - `sku`: `CatalogItemVariation`
/// - `caption`: `CatalogImage`
/// - `display_name`: `CatalogItemOption`
/// 
/// For example, to search for [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) objects by searchable attributes, you can use
/// the `"name"`, `"description"`, or `"abbreviation"` attribute in an applicable query filter.
public struct CatalogQuery: Codable {
    /// The query filter to return the search result by exact match of the specified attribute name and value.
    public var exactQuery: CatalogQueryExact?
    /// The query filter to return the item variations containing the specified item option value IDs.
    public var itemVariationsForItemOptionValuesQuery: CatalogQueryItemVariationsForItemOptionValues?
    /// The query filter to return the items containing the specified item option IDs.
    public var itemsForItemOptionsQuery: CatalogQueryItemsForItemOptions?
    /// The query filter to return the items containing the specified modifier list IDs.
    public var itemsForModifierListQuery: CatalogQueryItemsForModifierList?
    /// The query filter to return the items containing the specified tax IDs.
    public var itemsForTaxQuery: CatalogQueryItemsForTax?
    /// The query filter to return the search result whose named attribute values are prefixed by the specified attribute value.
    public var prefixQuery: CatalogQueryPrefix?
    /// The query filter to return the search result whose named attribute values fall between the specified range.
    public var rangeQuery: CatalogQueryRange?
    /// The query filter to return the search result(s) by exact match of the specified `attribute_name` and any of
    /// the `attribute_values`.
    public var setQuery: CatalogQuerySet?
    /// The query expression to specify the key to sort search results.
    public var sortedAttributeQuery: CatalogQuerySortedAttribute?
    /// The query filter to return the search result whose searchable attribute values contain all of the specified keywords or tokens, independent of the token order or case.
    public var textQuery: CatalogQueryText?

    public init(exactQuery: CatalogQueryExact? = nil, itemVariationsForItemOptionValuesQuery: CatalogQueryItemVariationsForItemOptionValues? = nil, itemsForItemOptionsQuery: CatalogQueryItemsForItemOptions? = nil, itemsForModifierListQuery: CatalogQueryItemsForModifierList? = nil, itemsForTaxQuery: CatalogQueryItemsForTax? = nil, prefixQuery: CatalogQueryPrefix? = nil, rangeQuery: CatalogQueryRange? = nil, setQuery: CatalogQuerySet? = nil, sortedAttributeQuery: CatalogQuerySortedAttribute? = nil, textQuery: CatalogQueryText? = nil) {
        self.exactQuery = exactQuery
        self.itemVariationsForItemOptionValuesQuery = itemVariationsForItemOptionValuesQuery
        self.itemsForItemOptionsQuery = itemsForItemOptionsQuery
        self.itemsForModifierListQuery = itemsForModifierListQuery
        self.itemsForTaxQuery = itemsForTaxQuery
        self.prefixQuery = prefixQuery
        self.rangeQuery = rangeQuery
        self.setQuery = setQuery
        self.sortedAttributeQuery = sortedAttributeQuery
        self.textQuery = textQuery
    }

    private enum CodingKeys: String, CodingKey {
        case exactQuery = "exact_query"
        case itemVariationsForItemOptionValuesQuery = "item_variations_for_item_option_values_query"
        case itemsForItemOptionsQuery = "items_for_item_options_query"
        case itemsForModifierListQuery = "items_for_modifier_list_query"
        case itemsForTaxQuery = "items_for_tax_query"
        case prefixQuery = "prefix_query"
        case rangeQuery = "range_query"
        case setQuery = "set_query"
        case sortedAttributeQuery = "sorted_attribute_query"
        case textQuery = "text_query"
    }
}

/// The query filter to return the search result by exact match of the specified attribute name and value.
public struct CatalogQueryExact: Codable {
    /// The name of the attribute to be searched. Matching of the attribute name is exact.
    public var attributeName: String
    /// The desired value of the search attribute. Matching of the attribute value is case insensitive and can be partial.
    /// For example, if a specified value of "sma", objects with the named attribute value of "Small", "small" are both matched.
    public var attributeValue: String

    public init(attributeName: String, attributeValue: String) {
        self.attributeName = attributeName
        self.attributeValue = attributeValue
    }

    private enum CodingKeys: String, CodingKey {
        case attributeName = "attribute_name"
        case attributeValue = "attribute_value"
    }
}

/// The query filter to return the item variations containing the specified item option value IDs.
public struct CatalogQueryItemVariationsForItemOptionValues: Codable {
    /// A set of `CatalogItemOptionValue` IDs to be used to find associated
    /// `CatalogItemVariation`s. All ItemVariations that contain all of the given
    /// Item Option Values (in any order) will be returned.
    public var itemOptionValueIDs: [String]?

    public init(itemOptionValueIDs: [String]? = nil) {
        self.itemOptionValueIDs = itemOptionValueIDs
    }

    private enum CodingKeys: String, CodingKey {
        case itemOptionValueIDs = "item_option_value_ids"
    }
}

/// The query filter to return the items containing the specified item option IDs.
public struct CatalogQueryItemsForItemOptions: Codable {
    /// A set of `CatalogItemOption` IDs to be used to find associated
    /// `CatalogItem`s. All Items that contain all of the given Item Options (in any order)
    /// will be returned.
    public var itemOptionIDs: [String]?

    public init(itemOptionIDs: [String]? = nil) {
        self.itemOptionIDs = itemOptionIDs
    }

    private enum CodingKeys: String, CodingKey {
        case itemOptionIDs = "item_option_ids"
    }
}

/// The query filter to return the items containing the specified modifier list IDs.
public struct CatalogQueryItemsForModifierList: Codable {
    /// A set of `CatalogModifierList` IDs to be used to find associated `CatalogItem`s.
    public var modifierListIDs: [String]

    public init(modifierListIDs: [String]) {
        self.modifierListIDs = modifierListIDs
    }

    private enum CodingKeys: String, CodingKey {
        case modifierListIDs = "modifier_list_ids"
    }
}

/// The query filter to return the items containing the specified tax IDs.
public struct CatalogQueryItemsForTax: Codable {
    /// A set of `CatalogTax` IDs to be used to find associated `CatalogItem`s.
    public var taxIDs: [String]

    public init(taxIDs: [String]) {
        self.taxIDs = taxIDs
    }

    private enum CodingKeys: String, CodingKey {
        case taxIDs = "tax_ids"
    }
}

/// The query filter to return the search result whose named attribute values are prefixed by the specified attribute value.
public struct CatalogQueryPrefix: Codable {
    /// The name of the attribute to be searched.
    public var attributeName: String
    /// The desired prefix of the search attribute value.
    public var attributePrefix: String

    public init(attributeName: String, attributePrefix: String) {
        self.attributeName = attributeName
        self.attributePrefix = attributePrefix
    }

    private enum CodingKeys: String, CodingKey {
        case attributeName = "attribute_name"
        case attributePrefix = "attribute_prefix"
    }
}

/// The query filter to return the search result whose named attribute values fall between the specified range.
public struct CatalogQueryRange: Codable {
    /// The desired maximum value for the search attribute (inclusive).
    public var attributeMaxValue: Int?
    /// The desired minimum value for the search attribute (inclusive).
    public var attributeMinValue: Int?
    /// The name of the attribute to be searched.
    public var attributeName: String

    public init(attributeMaxValue: Int? = nil, attributeMinValue: Int? = nil, attributeName: String) {
        self.attributeMaxValue = attributeMaxValue
        self.attributeMinValue = attributeMinValue
        self.attributeName = attributeName
    }

    private enum CodingKeys: String, CodingKey {
        case attributeMaxValue = "attribute_max_value"
        case attributeMinValue = "attribute_min_value"
        case attributeName = "attribute_name"
    }
}

/// The query filter to return the search result(s) by exact match of the specified `attribute_name` and any of
/// the `attribute_values`.
public struct CatalogQuerySet: Codable {
    /// The name of the attribute to be searched. Matching of the attribute name is exact.
    public var attributeName: String
    /// The desired values of the search attribute. Matching of the attribute values is exact and case insensitive.
    /// A maximum of 250 values may be searched in a request.
    public var attributeValues: [String]

    public init(attributeName: String, attributeValues: [String]) {
        self.attributeName = attributeName
        self.attributeValues = attributeValues
    }

    private enum CodingKeys: String, CodingKey {
        case attributeName = "attribute_name"
        case attributeValues = "attribute_values"
    }
}

/// The query expression to specify the key to sort search results.
public struct CatalogQuerySortedAttribute: Codable {
    /// The attribute whose value is used as the sort key.
    public var attributeName: String
    /// The first attribute value to be returned by the query. Ascending sorts will return only
    /// objects with this value or greater, while descending sorts will return only objects with this value
    /// or less. If unset, start at the beginning (for ascending sorts) or end (for descending sorts).
    public var initialAttributeValue: String?
    /// The desired sort order, `"ASC"` (ascending) or `"DESC"` (descending).
    public var sortOrder: String?

    public init(attributeName: String, initialAttributeValue: String? = nil, sortOrder: String? = nil) {
        self.attributeName = attributeName
        self.initialAttributeValue = initialAttributeValue
        self.sortOrder = sortOrder
    }

    private enum CodingKeys: String, CodingKey {
        case attributeName = "attribute_name"
        case initialAttributeValue = "initial_attribute_value"
        case sortOrder = "sort_order"
    }
}

/// The query filter to return the search result whose searchable attribute values contain all of the specified keywords or tokens, independent of the token order or case.
public struct CatalogQueryText: Codable {
    /// A list of 1, 2, or 3 search keywords. Keywords with fewer than 3 characters are ignored.
    public var keywords: [String]

    public init(keywords: [String]) {
        self.keywords = keywords
    }
}

/// Represents a Quick Amount in the Catalog.
public struct CatalogQuickAmount: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amount: Money
    /// The order in which this Quick Amount should be displayed.
    public var ordinal: Int?
    /// Describes the ranking of the Quick Amount provided by machine learning model, in the range [0, 100].
    /// MANUAL type amount will always have score = 100.
    public var score: Int?
    /// Represents the type of the Quick Amount.
    public var type: String

    public init(amount: Money, ordinal: Int? = nil, score: Int? = nil, type: String) {
        self.amount = amount
        self.ordinal = ordinal
        self.score = score
        self.type = type
    }
}

/// Determines the type of a specific Quick Amount.
public enum CatalogQuickAmountType: String, Codable, CaseIterable {
    case quickAmountTypeManual = "QUICK_AMOUNT_TYPE_MANUAL"
    case quickAmountTypeAuto = "QUICK_AMOUNT_TYPE_AUTO"
}

/// A parent Catalog Object model represents a set of Quick Amounts and the settings control the amounts.
public struct CatalogQuickAmountsSettings: Codable {
    /// Represents a set of Quick Amounts at this location.
    public var amounts: [CatalogQuickAmount]?
    /// Represents location's eligibility for auto amounts
    /// The boolean should be consistent with whether there are AUTO amounts in the `amounts`.
    public var isEligibleForAutoAmounts: Bool?
    /// Represents the option seller currently uses on Quick Amounts.
    public var option: String

    public init(amounts: [CatalogQuickAmount]? = nil, isEligibleForAutoAmounts: Bool? = nil, option: String) {
        self.amounts = amounts
        self.isEligibleForAutoAmounts = isEligibleForAutoAmounts
        self.option = option
    }

    private enum CodingKeys: String, CodingKey {
        case amounts
        case isEligibleForAutoAmounts = "eligible_for_auto_amounts"
        case option
    }
}

/// Determines a seller's option on Quick Amounts feature.
public enum CatalogQuickAmountsSettingsOption: String, Codable, CaseIterable {
    case disabled = "DISABLED"
    case manual = "MANUAL"
    case auto = "AUTO"
}

/// Represents the rule of conversion between a stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)
/// and a non-stockable sell-by or receive-by `CatalogItemVariation` that
/// share the same underlying stock.
public struct CatalogStockConversion: Codable {
    /// The converted equivalent quantity of the non-stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)
    /// in its measurement unit. The `stockable_quantity` value and this `nonstockable_quantity` value together
    /// define the conversion ratio between stockable item variation and the non-stockable item variation.
    /// It accepts a decimal number in a string format that can take up to 10 digits before the decimal point
    /// and up to 5 digits after the decimal point.
    public var nonstockableQuantity: String
    /// References to the stockable [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation)
    /// for this stock conversion. Selling, receiving or recounting the non-stockable `CatalogItemVariation`
    /// defined with a stock conversion results in adjustments of this stockable `CatalogItemVariation`.
    /// This immutable field must reference a stockable `CatalogItemVariation`
    /// that shares the parent [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) of the converted `CatalogItemVariation.`
    public var stockableItemVariationID: String
    /// The quantity of the stockable item variation (as identified by `stockable_item_variation_id`)
    /// equivalent to the non-stockable item variation quantity (as specified in `nonstockable_quantity`)
    /// as defined by this stock conversion.  It accepts a decimal number in a string format that can take
    /// up to 10 digits before the decimal point and up to 5 digits after the decimal point.
    public var stockableQuantity: String

    public init(nonstockableQuantity: String, stockableItemVariationID: String, stockableQuantity: String) {
        self.nonstockableQuantity = nonstockableQuantity
        self.stockableItemVariationID = stockableItemVariationID
        self.stockableQuantity = stockableQuantity
    }

    private enum CodingKeys: String, CodingKey {
        case nonstockableQuantity = "nonstockable_quantity"
        case stockableItemVariationID = "stockable_item_variation_id"
        case stockableQuantity = "stockable_quantity"
    }
}

/// Describes a subscription plan. For more information, see
/// [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan).
public struct CatalogSubscriptionPlan: Codable {
    /// The name of the plan.
    public var name: String
    /// A list of SubscriptionPhase containing the [SubscriptionPhase](https://developer.squareup.com/reference/square_2021-08-18/objects/SubscriptionPhase) for this plan.
    public var phases: [SubscriptionPhase]

    public init(name: String, phases: [SubscriptionPhase]) {
        self.name = name
        self.phases = phases
    }
}

/// A tax applicable to an item.
///
/// Example:
///
/// {
///   "object" : {
///     "id" : "#SalesTax",
///     "present_at_all_locations" : true,
///     "tax_data" : {
///       "calculation_phase" : "TAX_SUBTOTAL_PHASE",
///       "enabled" : true,
///       "fee_applies_to_custom_amounts" : true,
///       "inclusion_type" : "ADDITIVE",
///       "name" : "Sales Tax",
///       "percentage" : "5.0"
///     },
///     "type" : "TAX"
///   }
/// }
public struct CatalogTax: Codable {
    /// If `true`, the fee applies to custom amounts entered into the Square Point of Sale
    /// app that are not associated with a particular `CatalogItem`.
    public var isAppliesToCustomAmounts: Bool?
    /// Whether the tax is calculated based on a payment's subtotal or total.
    public var calculationPhase: String?
    /// A Boolean flag to indicate whether the tax is displayed as enabled (`true`) in the Square Point of Sale app or not (`false`).
    public var isEnabled: Bool?
    /// Whether the tax is `ADDITIVE` or `INCLUSIVE`.
    public var inclusionType: String?
    /// The tax's name. This is a searchable attribute for use in applicable query filters, and its value length is of Unicode code points.
    public var name: String?
    /// The percentage of the tax in decimal form, using a `'.'` as the decimal separator and without a `'%'` sign.
    /// A value of `7.5` corresponds to 7.5%.
    public var percentage: String?

    public init(isAppliesToCustomAmounts: Bool? = nil, calculationPhase: String? = nil, isEnabled: Bool? = nil, inclusionType: String? = nil, name: String? = nil, percentage: String? = nil) {
        self.isAppliesToCustomAmounts = isAppliesToCustomAmounts
        self.calculationPhase = calculationPhase
        self.isEnabled = isEnabled
        self.inclusionType = inclusionType
        self.name = name
        self.percentage = percentage
    }

    private enum CodingKeys: String, CodingKey {
        case isAppliesToCustomAmounts = "applies_to_custom_amounts"
        case calculationPhase = "calculation_phase"
        case isEnabled = "enabled"
        case inclusionType = "inclusion_type"
        case name
        case percentage
    }
}

/// Represents a time period - either a single period or a repeating period.
public struct CatalogTimePeriod: Codable {
    /// An iCalendar (RFC 5545) [event](https://tools.ietf.org/html/rfc5545#section-3.6.1), which
    /// specifies the name, timing, duration and recurrence of this time period.
    /// 
    /// Example:
    /// 
    /// ```
    /// DTSTART:20190707T180000
    /// DURATION:P2H
    /// RRULE:FREQ=WEEKLY;BYDAY=MO,WE,FR
    /// ```
    /// 
    /// Only `SUMMARY`, `DTSTART`, `DURATION` and `RRULE` fields are supported.
    /// `DTSTART` must be in local (unzoned) time format. Note that while `BEGIN:VEVENT`
    /// and `END:VEVENT` is not required in the request. The response will always
    /// include them.
    public var event: String?

    public init(event: String? = nil) {
        self.event = event
    }
}

/// A Square API V1 identifier of an item, including the object ID and its associated location ID.
public struct CatalogV1ID: Codable {
    /// The ID for an object used in the Square API V1, if the object ID differs from the Square API V2 object ID.
    public var catalogV1ID: String?
    /// The ID of the `Location` this Connect V1 ID is associated with.
    public var locationID: String?

    public init(catalogV1ID: String? = nil, locationID: String? = nil) {
        self.catalogV1ID = catalogV1ID
        self.locationID = locationID
    }

    private enum CodingKeys: String, CodingKey {
        case catalogV1ID = "catalog_v1_id"
        case locationID = "location_id"
    }
}

/// Defines the parameters that can be included in the body of
/// a request to the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge) endpoint.
/// 
/// Deprecated - recommend using [CreatePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/create-payment)
///
/// Example:
///
/// {
///   "request_body" : {
///     "additional_recipients" : [
///       {
///         "amount_money" : {
///           "amount" : 20,
///           "currency" : "USD"
///         },
///         "description" : "Application fees",
///         "location_id" : "057P5VYJ4A5X1"
///       }
///     ],
///     "amount_money" : {
///       "amount" : 200,
///       "currency" : "USD"
///     },
///     "billing_address" : {
///       "address_line_1" : "500 Electric Ave",
///       "address_line_2" : "Suite 600",
///       "administrative_district_level_1" : "NY",
///       "country" : "US",
///       "locality" : "New York",
///       "postal_code" : "10003"
///     },
///     "card_nonce" : "card_nonce_from_square_123",
///     "delay_capture" : false,
///     "idempotency_key" : "74ae1696-b1e3-4328-af6d-f1e04d947a13",
///     "note" : "some optional note",
///     "reference_id" : "some optional reference id",
///     "shipping_address" : {
///       "address_line_1" : "123 Main St",
///       "administrative_district_level_1" : "CA",
///       "country" : "US",
///       "locality" : "San Francisco",
///       "postal_code" : "94114"
///     }
///   }
/// }
public struct ChargeRequest: Codable {
    /// The basic primitive of multi-party transaction. The value is optional.
    /// The transaction facilitated by you can be split from here.
    /// 
    /// If you provide this value, the `amount_money` value in your additional_recipients
    /// must not be more than 90% of the `amount_money` value in the charge request.
    /// The `location_id` must be the valid location of the app owner merchant.
    /// 
    /// This field requires the `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.
    /// 
    /// This field is currently not supported in sandbox.
    public var additionalRecipients: [AdditionalRecipient]?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money
    /// Represents a postal address in a country. The address format is based
    /// on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
    /// see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
    /// This format has dedicated fields for four address components: postal code,
    /// locality (city), administrative district (state, prefecture, or province), and
    /// sublocality (town or village). These components have dedicated fields in the
    /// `Address` object because software sometimes behaves differently based on them.
    /// For example, sales tax software may charge different amounts of sales tax
    /// based on the postal code, and some software is only available in
    /// certain states due to compliance reasons.
    /// 
    /// For the remaining address components, the `Address` type provides the
    /// `address_line_1` and `address_line_2` fields for free-form data entry.
    /// These fields are free-form because the remaining address components have
    /// too many variations around the world and typical software does not parse
    /// these components. These fields enable users to enter anything they want.
    /// 
    /// Note that, in the current implementation, all other `Address` type fields are blank.
    /// These include `address_line_3`, `sublocality_2`, `sublocality_3`,
    /// `administrative_district_level_2`, `administrative_district_level_3`,
    /// `first_name`, `last_name`, and `organization`.
    /// 
    /// When it comes to localization, the seller's language preferences
    /// (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
    /// are ignored for addresses. Even though Square products (such as Square Point of Sale
    /// and the Seller Dashboard) mostly use a seller's language preference in
    /// communication, when it comes to addresses, they will use English for a US address,
    /// Japanese for an address in Japan, and so on.
    public var billingAddress: Address?
    /// The buyer's email address, if available. This value is optional,
    /// but this transaction is ineligible for chargeback protection if it is not
    /// provided.
    public var buyerEmailAddress: String?
    /// A payment token generated from the [Card.tokenize()](https://developer.squareup.com/reference/sdks/web/payments/objects/Card#Card.tokenize) that represents the card
    /// to charge.
    /// 
    /// The application that provides a payment token to this endpoint must be the
    /// _same application_ that generated the payment token with the Web Payments SDK.
    /// Otherwise, the nonce is invalid.
    /// 
    /// Do not provide a value for this field if you provide a value for
    /// `customer_card_id`.
    public var cardNonce: String?
    /// The ID of the customer card on file to charge. Do
    /// not provide a value for this field if you provide a value for `card_nonce`.
    /// 
    /// If you provide this value, you _must_ also provide a value for
    /// `customer_id`.
    public var customerCardID: String?
    /// The ID of the customer to associate this transaction with. This field
    /// is required if you provide a value for `customer_card_id`, and optional
    /// otherwise.
    public var customerID: String?
    /// If `true`, the request will only perform an Auth on the provided
    /// card. You can then later perform either a Capture (with the
    /// [CaptureTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/capture-transaction) endpoint) or a Void
    /// (with the [VoidTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/void-transaction) endpoint).
    /// 
    /// Default value: `false`
    public var isDelayCapture: Bool?
    /// A value you specify that uniquely identifies this
    /// transaction among transactions you've created.
    /// 
    /// If you're unsure whether a particular transaction succeeded,
    /// you can reattempt it with the same idempotency key without
    /// worrying about double-charging the buyer.
    /// 
    /// See [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency) for more information.
    public var idempotencyKey: String
    /// An optional note to associate with the transaction.
    /// 
    /// This value cannot exceed 60 characters.
    public var note: String?
    /// The ID of the order to associate with this transaction.
    /// 
    /// If you provide this value, the `amount_money` value of your request must
    /// __exactly match__ the value of the order's `total_money` field.
    public var orderID: String?
    /// An optional ID you can associate with the transaction for your own
    /// purposes (such as to associate the transaction with an entity ID in your
    /// own database).
    /// 
    /// This value cannot exceed 40 characters.
    public var referenceID: String?
    /// Represents a postal address in a country. The address format is based
    /// on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
    /// see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
    /// This format has dedicated fields for four address components: postal code,
    /// locality (city), administrative district (state, prefecture, or province), and
    /// sublocality (town or village). These components have dedicated fields in the
    /// `Address` object because software sometimes behaves differently based on them.
    /// For example, sales tax software may charge different amounts of sales tax
    /// based on the postal code, and some software is only available in
    /// certain states due to compliance reasons.
    /// 
    /// For the remaining address components, the `Address` type provides the
    /// `address_line_1` and `address_line_2` fields for free-form data entry.
    /// These fields are free-form because the remaining address components have
    /// too many variations around the world and typical software does not parse
    /// these components. These fields enable users to enter anything they want.
    /// 
    /// Note that, in the current implementation, all other `Address` type fields are blank.
    /// These include `address_line_3`, `sublocality_2`, `sublocality_3`,
    /// `administrative_district_level_2`, `administrative_district_level_3`,
    /// `first_name`, `last_name`, and `organization`.
    /// 
    /// When it comes to localization, the seller's language preferences
    /// (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
    /// are ignored for addresses. Even though Square products (such as Square Point of Sale
    /// and the Seller Dashboard) mostly use a seller's language preference in
    /// communication, when it comes to addresses, they will use English for a US address,
    /// Japanese for an address in Japan, and so on.
    public var shippingAddress: Address?
    /// A token generated by SqPaymentForm's verifyBuyer() that represents
    /// customer's device info and 3ds challenge result.
    public var verificationToken: String?

    public init(additionalRecipients: [AdditionalRecipient]? = nil, amountMoney: Money, billingAddress: Address? = nil, buyerEmailAddress: String? = nil, cardNonce: String? = nil, customerCardID: String? = nil, customerID: String? = nil, isDelayCapture: Bool? = nil, idempotencyKey: String, note: String? = nil, orderID: String? = nil, referenceID: String? = nil, shippingAddress: Address? = nil, verificationToken: String? = nil) {
        self.additionalRecipients = additionalRecipients
        self.amountMoney = amountMoney
        self.billingAddress = billingAddress
        self.buyerEmailAddress = buyerEmailAddress
        self.cardNonce = cardNonce
        self.customerCardID = customerCardID
        self.customerID = customerID
        self.isDelayCapture = isDelayCapture
        self.idempotencyKey = idempotencyKey
        self.note = note
        self.orderID = orderID
        self.referenceID = referenceID
        self.shippingAddress = shippingAddress
        self.verificationToken = verificationToken
    }

    private enum CodingKeys: String, CodingKey {
        case additionalRecipients = "additional_recipients"
        case amountMoney = "amount_money"
        case billingAddress = "billing_address"
        case buyerEmailAddress = "buyer_email_address"
        case cardNonce = "card_nonce"
        case customerCardID = "customer_card_id"
        case customerID = "customer_id"
        case isDelayCapture = "delay_capture"
        case idempotencyKey = "idempotency_key"
        case note
        case orderID = "order_id"
        case referenceID = "reference_id"
        case shippingAddress = "shipping_address"
        case verificationToken = "verification_token"
    }
}

/// Represents an additional recipient (other than the merchant) entitled to a portion of the tender.
/// Support is currently limited to USD, CAD and GBP currencies
public struct ChargeRequestAdditionalRecipient: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money
    /// The description of the additional recipient.
    public var description: String
    /// The location ID for a recipient (other than the merchant) receiving a portion of the tender.
    public var locationID: String

    public init(amountMoney: Money, description: String, locationID: String) {
        self.amountMoney = amountMoney
        self.description = description
        self.locationID = locationID
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
        case description
        case locationID = "location_id"
    }
}

/// Defines the fields that are included in the response body of
/// a request to the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge) endpoint.
/// 
/// One of `errors` or `transaction` is present in a given response (never both).
///
/// Example:
///
/// {
///   "transaction" : {
///     "created_at" : "2016-03-10T22:57:56Z",
///     "id" : "KnL67ZIwXCPtzOrqj0HrkxMF",
///     "location_id" : "18YC4JDH91E1H",
///     "product" : "EXTERNAL_API",
///     "reference_id" : "some optional reference id",
///     "tenders" : [
///       {
///         "additional_recipients" : [
///           {
///             "amount_money" : {
///               "amount" : 20,
///               "currency" : "USD"
///             },
///             "description" : "Application fees",
///             "location_id" : "057P5VYJ4A5X1",
///             "receivable_id" : "ISu5xwxJ5v0CMJTQq7RvqyMF"
///           }
///         ],
///         "amount_money" : {
///           "amount" : 200,
///           "currency" : "USD"
///         },
///         "card_details" : {
///           "card" : {
///             "card_brand" : "VISA",
///             "last_4" : "1111"
///           },
///           "entry_method" : "KEYED",
///           "status" : "CAPTURED"
///         },
///         "created_at" : "2016-03-10T22:57:56Z",
///         "id" : "MtZRYYdDrYNQbOvV7nbuBvMF",
///         "location_id" : "18YC4JDH91E1H",
///         "note" : "some optional note",
///         "transaction_id" : "KnL67ZIwXCPtzOrqj0HrkxMF",
///         "type" : "CARD"
///       }
///     ]
///   }
/// }
public struct ChargeResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Represents a transaction processed with Square, either with the
    /// Connect API or with Square Point of Sale.
    /// 
    /// The `tenders` field of this object lists all methods of payment used to pay in
    /// the transaction.
    public var transaction: Transaction?

    public init(errors: [Error]? = nil, transaction: Transaction? = nil) {
        self.errors = errors
        self.transaction = transaction
    }
}

public struct CheckAppointmentsOnboardedRequest: Codable {
    public init() {}
}

/// Square Checkout lets merchants accept online payments for supported
/// payment types using a checkout workflow hosted on squareup.com.
public struct Checkout: Codable {
    /// Additional recipients (other than the merchant) receiving a portion of this checkout.
    /// For example, fees assessed on the purchase by a third party integration.
    public var additionalRecipients: [AdditionalRecipient]?
    /// If `true`, Square Checkout will collect shipping information on your
    /// behalf and store that information with the transaction information in your
    /// Square Dashboard.
    /// 
    /// Default: `false`.
    public var isAskForShippingAddress: Bool?
    /// The URL that the buyer's browser should be redirected to after the
    /// checkout is completed.
    public var checkoutPageURL: String?
    /// The time when the checkout was created, in RFC 3339 format.
    public var createdAt: String?
    /// ID generated by Square Checkout when a new checkout is requested.
    public var id: String?
    /// The email address to display on the Square Checkout confirmation page
    /// and confirmation email that the buyer can use to contact the merchant.
    /// 
    /// If this value is not set, the confirmation page and email will display the
    /// primary email address associated with the merchant's Square account.
    /// 
    /// Default: none; only exists if explicitly set.
    public var merchantSupportEmail: String?
    /// Contains all information related to a single order to process with Square,
    /// including line items that specify the products to purchase. `Order` objects also
    /// include information about any associated tenders, refunds, and returns.
    /// 
    /// All Connect V2 Transactions have all been converted to Orders including all associated
    /// itemization data.
    public var order: Order?
    /// If provided, the buyer's email is pre-populated on the checkout page
    /// as an editable text field.
    /// 
    /// Default: none; only exists if explicitly set.
    public var prePopulateBuyerEmail: String?
    /// Represents a postal address in a country. The address format is based
    /// on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
    /// see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
    /// This format has dedicated fields for four address components: postal code,
    /// locality (city), administrative district (state, prefecture, or province), and
    /// sublocality (town or village). These components have dedicated fields in the
    /// `Address` object because software sometimes behaves differently based on them.
    /// For example, sales tax software may charge different amounts of sales tax
    /// based on the postal code, and some software is only available in
    /// certain states due to compliance reasons.
    /// 
    /// For the remaining address components, the `Address` type provides the
    /// `address_line_1` and `address_line_2` fields for free-form data entry.
    /// These fields are free-form because the remaining address components have
    /// too many variations around the world and typical software does not parse
    /// these components. These fields enable users to enter anything they want.
    /// 
    /// Note that, in the current implementation, all other `Address` type fields are blank.
    /// These include `address_line_3`, `sublocality_2`, `sublocality_3`,
    /// `administrative_district_level_2`, `administrative_district_level_3`,
    /// `first_name`, `last_name`, and `organization`.
    /// 
    /// When it comes to localization, the seller's language preferences
    /// (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
    /// are ignored for addresses. Even though Square products (such as Square Point of Sale
    /// and the Seller Dashboard) mostly use a seller's language preference in
    /// communication, when it comes to addresses, they will use English for a US address,
    /// Japanese for an address in Japan, and so on.
    public var prePopulateShippingAddress: Address?
    /// The URL to redirect to after checkout is completed with `checkoutId`,
    /// Square's `orderId`, `transactionId`, and `referenceId` appended as URL
    /// parameters. For example, if the provided redirect_url is
    /// `http://www.example.com/order-complete`, a successful transaction redirects
    /// the customer to:
    /// 
    /// <pre><code>http://www.example.com/order-complete?checkoutId=xxxxxx&amp;orderId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx</code></pre>
    /// 
    /// If you do not provide a redirect URL, Square Checkout will display an order
    /// confirmation page on your behalf; however Square strongly recommends that
    /// you provide a redirect URL so you can verify the transaction results and
    /// finalize the order through your existing/normal confirmation workflow.
    public var redirectURL: String?

    public init(additionalRecipients: [AdditionalRecipient]? = nil, isAskForShippingAddress: Bool? = nil, checkoutPageURL: String? = nil, createdAt: String? = nil, id: String? = nil, merchantSupportEmail: String? = nil, order: Order? = nil, prePopulateBuyerEmail: String? = nil, prePopulateShippingAddress: Address? = nil, redirectURL: String? = nil) {
        self.additionalRecipients = additionalRecipients
        self.isAskForShippingAddress = isAskForShippingAddress
        self.checkoutPageURL = checkoutPageURL
        self.createdAt = createdAt
        self.id = id
        self.merchantSupportEmail = merchantSupportEmail
        self.order = order
        self.prePopulateBuyerEmail = prePopulateBuyerEmail
        self.prePopulateShippingAddress = prePopulateShippingAddress
        self.redirectURL = redirectURL
    }

    private enum CodingKeys: String, CodingKey {
        case additionalRecipients = "additional_recipients"
        case isAskForShippingAddress = "ask_for_shipping_address"
        case checkoutPageURL = "checkout_page_url"
        case createdAt = "created_at"
        case id
        case merchantSupportEmail = "merchant_support_email"
        case order
        case prePopulateBuyerEmail = "pre_populate_buyer_email"
        case prePopulateShippingAddress = "pre_populate_shipping_address"
        case redirectURL = "redirect_url"
    }
}

public enum CheckoutOptionsPaymentType: String, Codable, CaseIterable {
    case cardPresent = "CARD_PRESENT"
    case manualCardEntry = "MANUAL_CARD_ENTRY"
    case felicaID = "FELICA_ID"
    case felicaQuicpay = "FELICA_QUICPAY"
    case felicaTransportationGroup = "FELICA_TRANSPORTATION_GROUP"
    case felicaAll = "FELICA_ALL"
}

/// Describes a request to complete (capture) a payment using
/// [CompletePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/complete-payment).
/// 
/// By default, payments are set to `autocomplete` immediately after they are created.
/// To complete payments manually, set `autocomplete` to `false`.
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct CompletePaymentRequest: Codable {
    public init() {}
}

/// Defines the response returned by[CompletePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/complete-payment).
///
/// Example:
///
/// {
///   "payment" : {
///     "amount_money" : {
///       "amount" : 200,
///       "currency" : "USD"
///     },
///     "app_fee_money" : {
///       "amount" : 10,
///       "currency" : "USD"
///     },
///     "approved_money" : {
///       "amount" : 200,
///       "currency" : "USD"
///     },
///     "card_details" : {
///       "auth_result_code" : "MhIjEN",
///       "avs_status" : "AVS_ACCEPTED",
///       "card" : {
///         "bin" : "411111",
///         "card_brand" : "VISA",
///         "card_type" : "DEBIT",
///         "exp_month" : 7,
///         "exp_year" : 2026,
///         "fingerprint" : "sq-1-TpmjbNBMFdibiIjpQI5LiRgNUBC7u1689i0TgHjnlyHEWYB7tnn-K4QbW4ttvtaqXw",
///         "last_4" : "2796",
///         "prepaid_type" : "PREPAID"
///       },
///       "card_payment_timeline" : {
///         "authorized_at" : "2019-07-10T13:23:49.234Z",
///         "captured_at" : "2019-07-10T13:23:49.446Z"
///       },
///       "cvv_status" : "CVV_ACCEPTED",
///       "entry_method" : "ON_FILE",
///       "statement_description" : "SQ *MY MERCHANT",
///       "status" : "CAPTURED"
///     },
///     "created_at" : "2019-07-10T13:39:55.317Z",
///     "customer_id" : "RDX9Z4XTIZR7MRZJUXNY9HUK6I",
///     "id" : "GQTFp1ZlXdpoW4o6eGiZhbjosiDFf",
///     "location_id" : "XTI0H92143A39",
///     "note" : "Brief description",
///     "order_id" : "m2Hr8Hk8A3CTyQQ1k4ynExg92tO3",
///     "receipt_number" : "GQTF",
///     "receipt_url" : "https:\/\/squareup.com\/receipt\/preview\/GQTFp1ZlXdpoW4o6eGiZhbjosiDFf",
///     "reference_id" : "123456",
///     "source_type" : "CARD",
///     "status" : "COMPLETED",
///     "total_money" : {
///       "amount" : 200,
///       "currency" : "USD"
///     },
///     "updated_at" : "2019-07-10T13:40:05.982Z",
///     "version_token" : "7knzZI16u3QBh2xXD7FH4GFwESqgam7Z9w2Ya0aSD9i6o"
///   }
/// }
public struct CompletePaymentResponse: Codable {
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// Represents a payment processed by the Square API.
    public var payment: Payment?

    public init(errors: [Error]? = nil, payment: Payment? = nil) {
        self.errors = errors
        self.payment = payment
    }
}

/// Latitude and longitude coordinates.
public struct Coordinates: Codable {
    /// The latitude of the coordinate expressed in degrees.
    public var latitude: Double?
    /// The longitude of the coordinate expressed in degrees.
    public var longitude: Double?

    public init(latitude: Double? = nil, longitude: Double? = nil) {
        self.latitude = latitude
        self.longitude = longitude
    }
}

/// Indicates the country associated with another entity, such as a business.
/// Values are in [ISO 3166-1-alpha-2 format](http://www.iso.org/iso/home/standards/country_codes.htm).
public enum Country: String, Codable, CaseIterable {
    case zz = "ZZ"
    case ad = "AD"
    case ae = "AE"
    case af = "AF"
    case ag = "AG"
    case ai = "AI"
    case al = "AL"
    case am = "AM"
    case ao = "AO"
    case aq = "AQ"
    case ar = "AR"
    case `as` = "AS"
    case at = "AT"
    case au = "AU"
    case aw = "AW"
    case ax = "AX"
    case az = "AZ"
    case ba = "BA"
    case bb = "BB"
    case bd = "BD"
    case be = "BE"
    case bf = "BF"
    case bg = "BG"
    case bh = "BH"
    case bi = "BI"
    case bj = "BJ"
    case bl = "BL"
    case bm = "BM"
    case bn = "BN"
    case bo = "BO"
    case bq = "BQ"
    case br = "BR"
    case bs = "BS"
    case bt = "BT"
    case bv = "BV"
    case bw = "BW"
    case by = "BY"
    case bz = "BZ"
    case ca = "CA"
    case cc = "CC"
    case cd = "CD"
    case cf = "CF"
    case cg = "CG"
    case ch = "CH"
    case ci = "CI"
    case ck = "CK"
    case cl = "CL"
    case cm = "CM"
    case cn = "CN"
    case co = "CO"
    case cr = "CR"
    case cu = "CU"
    case cv = "CV"
    case cw = "CW"
    case cx = "CX"
    case cy = "CY"
    case cz = "CZ"
    case de = "DE"
    case dj = "DJ"
    case dk = "DK"
    case dm = "DM"
    case `do` = "DO"
    case dz = "DZ"
    case ec = "EC"
    case ee = "EE"
    case eg = "EG"
    case eh = "EH"
    case er = "ER"
    case es = "ES"
    case et = "ET"
    case fi = "FI"
    case fj = "FJ"
    case fk = "FK"
    case fm = "FM"
    case fo = "FO"
    case fr = "FR"
    case ga = "GA"
    case gb = "GB"
    case gd = "GD"
    case ge = "GE"
    case gf = "GF"
    case gg = "GG"
    case gh = "GH"
    case gi = "GI"
    case gl = "GL"
    case gm = "GM"
    case gn = "GN"
    case gp = "GP"
    case gq = "GQ"
    case gr = "GR"
    case gs = "GS"
    case gt = "GT"
    case gu = "GU"
    case gw = "GW"
    case gy = "GY"
    case hk = "HK"
    case hm = "HM"
    case hn = "HN"
    case hr = "HR"
    case ht = "HT"
    case hu = "HU"
    case id = "ID"
    case ie = "IE"
    case il = "IL"
    case im = "IM"
    case `in` = "IN"
    case io = "IO"
    case iq = "IQ"
    case ir = "IR"
    case `is` = "IS"
    case it = "IT"
    case je = "JE"
    case jm = "JM"
    case jo = "JO"
    case jp = "JP"
    case ke = "KE"
    case kg = "KG"
    case kh = "KH"
    case ki = "KI"
    case km = "KM"
    case kn = "KN"
    case kp = "KP"
    case kr = "KR"
    case kw = "KW"
    case ky = "KY"
    case kz = "KZ"
    case la = "LA"
    case lb = "LB"
    case lc = "LC"
    case li = "LI"
    case lk = "LK"
    case lr = "LR"
    case ls = "LS"
    case lt = "LT"
    case lu = "LU"
    case lv = "LV"
    case ly = "LY"
    case ma = "MA"
    case mc = "MC"
    case md = "MD"
    case me = "ME"
    case mf = "MF"
    case mg = "MG"
    case mh = "MH"
    case mk = "MK"
    case ml = "ML"
    case mm = "MM"
    case mn = "MN"
    case mo = "MO"
    case mp = "MP"
    case mq = "MQ"
    case mr = "MR"
    case ms = "MS"
    case mt = "MT"
    case mu = "MU"
    case mv = "MV"
    case mw = "MW"
    case mx = "MX"
    case my = "MY"
    case mz = "MZ"
    case na = "NA"
    case nc = "NC"
    case ne = "NE"
    case nf = "NF"
    case ng = "NG"
    case ni = "NI"
    case nl = "NL"
    case no = "NO"
    case np = "NP"
    case nr = "NR"
    case nu = "NU"
    case nz = "NZ"
    case om = "OM"
    case pa = "PA"
    case pe = "PE"
    case pf = "PF"
    case pg = "PG"
    case ph = "PH"
    case pk = "PK"
    case pl = "PL"
    case pm = "PM"
    case pn = "PN"
    case pr = "PR"
    case ps = "PS"
    case pt = "PT"
    case pw = "PW"
    case py = "PY"
    case qa = "QA"
    case re = "RE"
    case ro = "RO"
    case rs = "RS"
    case ru = "RU"
    case rw = "RW"
    case sa = "SA"
    case sb = "SB"
    case sc = "SC"
    case sd = "SD"
    case se = "SE"
    case sg = "SG"
    case sh = "SH"
    case si = "SI"
    case sj = "SJ"
    case sk = "SK"
    case sl = "SL"
    case sm = "SM"
    case sn = "SN"
    case so = "SO"
    case sr = "SR"
    case ss = "SS"
    case st = "ST"
    case sv = "SV"
    case sx = "SX"
    case sy = "SY"
    case sz = "SZ"
    case tc = "TC"
    case td = "TD"
    case tf = "TF"
    case tg = "TG"
    case th = "TH"
    case tj = "TJ"
    case tk = "TK"
    case tl = "TL"
    case tm = "TM"
    case tn = "TN"
    case to = "TO"
    case tr = "TR"
    case tt = "TT"
    case tv = "TV"
    case tw = "TW"
    case tz = "TZ"
    case ua = "UA"
    case ug = "UG"
    case um = "UM"
    case us = "US"
    case uy = "UY"
    case uz = "UZ"
    case va = "VA"
    case vc = "VC"
    case ve = "VE"
    case vg = "VG"
    case vi = "VI"
    case vn = "VN"
    case vu = "VU"
    case wf = "WF"
    case ws = "WS"
    case ye = "YE"
    case yt = "YT"
    case za = "ZA"
    case zm = "ZM"
    case zw = "ZW"
}

/// Example:
///
/// {
///   "booking" : {
///     "appointment_segments" : [
///       {
///         "duration_minutes" : 60,
///         "service_variation_id" : "RU3PBTZTK7DXZDQFCJHOK2MC",
///         "service_variation_version" : 1599775456731,
///         "team_member_id" : "TMXUrsBWWcHTt79t"
///       }
///     ],
///     "customer_id" : "EX2QSVGTZN4K1E5QE1CBFNVQ8M",
///     "location_id" : "LEQHH0YY8B42M",
///     "start_at" : "2020-11-26T13:00:00Z"
///   }
/// }
public struct CreateBookingRequest: Codable {
    /// Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service
    /// at a given location to a requesting customer in one or more appointment segments.
    public var booking: Booking
    /// A unique key to make this request an idempotent operation.
    public var idempotencyKey: String?

    public init(booking: Booking, idempotencyKey: String? = nil) {
        self.booking = booking
        self.idempotencyKey = idempotencyKey
    }

    private enum CodingKeys: String, CodingKey {
        case booking
        case idempotencyKey = "idempotency_key"
    }
}

/// Example:
///
/// {
///   "booking" : {
///     "appointment_segments" : [
///       {
///         "duration_minutes" : 60,
///         "service_variation_id" : "RU3PBTZTK7DXZDQFCJHOK2MC",
///         "service_variation_version" : 1599775456731,
///         "team_member_id" : "TMXUrsBWWcHTt79t"
///       }
///     ],
///     "created_at" : "2020-10-28T15:47:41Z",
///     "customer_id" : "EX2QSVGTZN4K1E5QE1CBFNVQ8M",
///     "customer_note" : null,
///     "id" : "zkras0xv0xwswx",
///     "location_id" : "LEQHH0YY8B42M",
///     "seller_note" : null,
///     "start_at" : "2020-11-26T13:00:00Z",
///     "status" : "ACCEPTED",
///     "updated_at" : "2020-10-28T15:47:41Z",
///     "version" : 0
///   },
///   "errors" : [
/// 
///   ]
/// }
public struct CreateBookingResponse: Codable {
    /// Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service
    /// at a given location to a requesting customer in one or more appointment segments.
    public var booking: Booking?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(booking: Booking? = nil, errors: [Error]? = nil) {
        self.booking = booking
        self.errors = errors
    }
}

/// A request to create a new `BreakType`.
///
/// Example:
///
/// {
///   "request_body" : {
///     "break_type" : {
///       "break_name" : "Lunch Break",
///       "expected_duration" : "PT30M",
///       "is_paid" : true,
///       "location_id" : "CGJN03P1D08GF"
///     },
///     "idempotency_key" : "PAD3NG5KSN2GL"
///   }
/// }
public struct CreateBreakTypeRequest: Codable {
    /// A defined break template that sets an expectation for possible `Break`
    /// instances on a `Shift`.
    public var breakType: BreakType
    /// A unique string value to ensure the idempotency of the operation.
    public var idempotencyKey: String?

    public init(breakType: BreakType, idempotencyKey: String? = nil) {
        self.breakType = breakType
        self.idempotencyKey = idempotencyKey
    }

    private enum CodingKeys: String, CodingKey {
        case breakType = "break_type"
        case idempotencyKey = "idempotency_key"
    }
}

/// The response to the request to create a `BreakType`. The response contains
/// the created `BreakType` object and might contain a set of `Error` objects if
/// the request resulted in errors.
///
/// Example:
///
/// {
///   "break_type" : {
///     "break_name" : "Lunch Break",
///     "created_at" : "2019-02-26T22:42:54Z",
///     "expected_duration" : "PT30M",
///     "id" : "49SSVDJG76WF3",
///     "is_paid" : true,
///     "location_id" : "CGJN03P1D08GF",
///     "updated_at" : "2019-02-26T22:42:54Z",
///     "version" : 1
///   }
/// }
public struct CreateBreakTypeResponse: Codable {
    /// A defined break template that sets an expectation for possible `Break`
    /// instances on a `Shift`.
    public var breakType: BreakType?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(breakType: BreakType? = nil, errors: [Error]? = nil) {
        self.breakType = breakType
        self.errors = errors
    }

    private enum CodingKeys: String, CodingKey {
        case breakType = "break_type"
        case errors
    }
}

/// Creates a card from the source (nonce, payment id, etc). Accessible via
/// HTTP requests at POST https://connect.squareup.com/v2/cards
///
/// Example:
///
/// {
///   "request_body" : {
///     "card" : {
///       "billing_address" : {
///         "address_line_1" : "500 Electric Ave",
///         "address_line_2" : "Suite 600",
///         "administrative_district_level_1" : "NY",
///         "country" : "US",
///         "locality" : "New York",
///         "postal_code" : "10003"
///       },
///       "cardholder_name" : "Amelia Earhart",
///       "customer_id" : "VDKXEEKPJN48QDG3BGGFAK05P8",
///       "reference_id" : "user-id-1"
///     },
///     "idempotency_key" : "4935a656-a929-4792-b97c-8848be85c27c",
///     "source_id" : "cnon:uIbfJXhXETSP197M3GB"
///   },
///   "request_url" : "\/v2\/cards"
/// }
public struct CreateCardRequest: Codable {
    /// Represents the payment details of a card to be used for payments. These
    /// details are determined by the payment token generated by Web Payments SDK.
    public var card: Card
    /// A unique string that identifies this CreateCard request. Keys can be
    /// any valid string and must be unique for every request.
    /// 
    /// Max: 45 characters
    /// 
    /// See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
    public var idempotencyKey: String
    /// The ID of the source which represents the card information to be stored. This can be a card nonce or a payment id.
    public var sourceID: String
    /// An identifying token generated by [Payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer).
    /// Verification tokens encapsulate customer device information and 3-D Secure
    /// challenge results to indicate that Square has verified the buyer identity.
    /// 
    /// See the [SCA Overview](https://developer.squareup.com/docs/sca-overview).
    public var verificationToken: String?

    public init(card: Card, idempotencyKey: String, sourceID: String, verificationToken: String? = nil) {
        self.card = card
        self.idempotencyKey = idempotencyKey
        self.sourceID = sourceID
        self.verificationToken = verificationToken
    }

    private enum CodingKeys: String, CodingKey {
        case card
        case idempotencyKey = "idempotency_key"
        case sourceID = "source_id"
        case verificationToken = "verification_token"
    }
}

/// Defines the fields that are included in the response body of
/// a request to the [CreateCard](#endpoint-cards-createcard) endpoint.
/// 
/// Note: if there are errors processing the request, the card field will not be
/// present.
///
/// Example:
///
/// {
///   "card" : {
///     "billing_address" : {
///       "address_line_1" : "500 Electric Ave",
///       "address_line_2" : "Suite 600",
///       "administrative_district_level_1" : "NY",
///       "country" : "US",
///       "locality" : "New York",
///       "postal_code" : "10003"
///     },
///     "bin" : "411111",
///     "card_brand" : "VISA",
///     "card_type" : "CREDIT",
///     "cardholder_name" : "Amelia Earhart",
///     "customer_id" : "VDKXEEKPJN48QDG3BGGFAK05P8",
///     "enabled" : true,
///     "exp_month" : 11,
///     "exp_year" : 2022,
///     "fingerprint" : "ex-p-cs80EK9Flz7LsCMv-szbptQ_ssAGrhemzSTsPFgt9nzyE6t7okiLIQc-qw_quqKX4Q",
///     "id" : "ccof:uIbfJXhXETSP197M3GB",
///     "last_4" : "1111",
///     "prepaid_type" : "NOT_PREPAID",
///     "reference_id" : "user-id-1",
///     "version" : 1
///   }
/// }
public struct CreateCardResponse: Codable {
    /// Represents the payment details of a card to be used for payments. These
    /// details are determined by the payment token generated by Web Payments SDK.
    public var card: Card?
    /// Information on errors encountered during the request.
    public var errors: [Error]?

    public init(card: Card? = nil, errors: [Error]? = nil) {
        self.card = card
        self.errors = errors
    }
}

/// Defines the parameters that can be included in the body of
/// a request to the `CreateCheckout` endpoint.
///
/// Example:
///
/// {
///   "request_body" : {
///     "additional_recipients" : [
///       {
///         "amount_money" : {
///           "amount" : 60,
///           "currency" : "USD"
///         },
///         "description" : "Application fees",
///         "location_id" : "057P5VYJ4A5X1"
///       }
///     ],
///     "ask_for_shipping_address" : true,
///     "idempotency_key" : "86ae1696-b1e3-4328-af6d-f1e04d947ad6",
///     "merchant_support_email" : "merchant+support@website.com",
///     "order" : {
///       "idempotency_key" : "12ae1696-z1e3-4328-af6d-f1e04d947gd4",
///       "order" : {
///         "customer_id" : "customer_id",
///         "discounts" : [
///           {
///             "amount_money" : {
///               "amount" : 100,
///               "currency" : "USD"
///             },
///             "scope" : "LINE_ITEM",
///             "type" : "FIXED_AMOUNT",
///             "uid" : "56ae1696-z1e3-9328-af6d-f1e04d947gd4"
///           }
///         ],
///         "line_items" : [
///           {
///             "applied_discounts" : [
///               {
///                 "discount_uid" : "56ae1696-z1e3-9328-af6d-f1e04d947gd4"
///               }
///             ],
///             "applied_taxes" : [
///               {
///                 "tax_uid" : "38ze1696-z1e3-5628-af6d-f1e04d947fg3"
///               }
///             ],
///             "base_price_money" : {
///               "amount" : 1500,
///               "currency" : "USD"
///             },
///             "name" : "Printed T Shirt",
///             "quantity" : "2"
///           },
///           {
///             "base_price_money" : {
///               "amount" : 2500,
///               "currency" : "USD"
///             },
///             "name" : "Slim Jeans",
///             "quantity" : "1"
///           },
///           {
///             "base_price_money" : {
///               "amount" : 3500,
///               "currency" : "USD"
///             },
///             "name" : "Woven Sweater",
///             "quantity" : "3"
///           }
///         ],
///         "location_id" : "location_id",
///         "reference_id" : "reference_id",
///         "taxes" : [
///           {
///             "percentage" : "7.75",
///             "scope" : "LINE_ITEM",
///             "type" : "INCLUSIVE",
///             "uid" : "38ze1696-z1e3-5628-af6d-f1e04d947fg3"
///           }
///         ]
///       }
///     },
///     "pre_populate_buyer_email" : "example@email.com",
///     "pre_populate_shipping_address" : {
///       "address_line_1" : "1455 Market St.",
///       "address_line_2" : "Suite 600",
///       "administrative_district_level_1" : "CA",
///       "country" : "US",
///       "first_name" : "Jane",
///       "last_name" : "Doe",
///       "locality" : "San Francisco",
///       "postal_code" : "94103"
///     },
///     "redirect_url" : "https:\/\/merchant.website.com\/order-confirm"
///   }
/// }
public struct CreateCheckoutRequest: Codable {
    /// The basic primitive of a multi-party transaction. The value is optional.
    /// The transaction facilitated by you can be split from here.
    /// 
    /// If you provide this value, the `amount_money` value in your `additional_recipients` field
    /// cannot be more than 90% of the `total_money` calculated by Square for your order.
    /// The `location_id` must be a valid seller location where the checkout is occurring.
    /// 
    /// This field requires `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.
    /// 
    /// This field is currently not supported in the Square Sandbox.
    public var additionalRecipients: [ChargeRequestAdditionalRecipient]?
    /// If `true`, Square Checkout collects shipping information on your behalf and stores
    /// that information with the transaction information in the Square Seller Dashboard.
    /// 
    /// Default: `false`.
    public var isAskForShippingAddress: Bool?
    /// A unique string that identifies this checkout among others you have created. It can be
    /// any valid string but must be unique for every order sent to Square Checkout for a given location ID.
    /// 
    /// The idempotency key is used to avoid processing the same order more than once. If you are
    /// unsure whether a particular checkout was created successfully, you can attempt it again with
    /// the same idempotency key and all the same other parameters without worrying about creating duplicates.
    /// 
    /// You should use a random number/string generator native to the language
    /// you are working in to generate strings for your idempotency keys.
    /// 
    /// For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
    public var idempotencyKey: String
    /// The email address to display on the Square Checkout confirmation page
    /// and confirmation email that the buyer can use to contact the seller.
    /// 
    /// If this value is not set, the confirmation page and email display the
    /// primary email address associated with the seller's Square account.
    /// 
    /// Default: none; only exists if explicitly set.
    public var merchantSupportEmail: String?
    /// An optional note to associate with the `checkout` object.
    /// 
    /// This value cannot exceed 60 characters.
    public var note: String?
    /// Example:
    ///
    /// {
    ///   "request_body" : {
    ///     "idempotency_key" : "8193148c-9586-11e6-99f9-28cfe92138cf",
    ///     "order" : {
    ///       "discounts" : [
    ///         {
    ///           "name" : "Labor Day Sale",
    ///           "percentage" : "5",
    ///           "scope" : "ORDER",
    ///           "uid" : "labor-day-sale"
    ///         },
    ///         {
    ///           "catalog_object_id" : "DB7L55ZH2BGWI4H23ULIWOQ7",
    ///           "scope" : "ORDER",
    ///           "uid" : "membership-discount"
    ///         },
    ///         {
    ///           "amount_money" : {
    ///             "amount" : 100,
    ///             "currency" : "USD"
    ///           },
    ///           "name" : "Sale - $1.00 off",
    ///           "scope" : "LINE_ITEM",
    ///           "uid" : "one-dollar-off"
    ///         }
    ///       ],
    ///       "line_items" : [
    ///         {
    ///           "base_price_money" : {
    ///             "amount" : 1599,
    ///             "currency" : "USD"
    ///           },
    ///           "name" : "New York Strip Steak",
    ///           "quantity" : "1"
    ///         },
    ///         {
    ///           "applied_discounts" : [
    ///             {
    ///               "discount_uid" : "one-dollar-off"
    ///             }
    ///           ],
    ///           "catalog_object_id" : "BEMYCSMIJL46OCDV4KYIKXIB",
    ///           "modifiers" : [
    ///             {
    ///               "catalog_object_id" : "CHQX7Y4KY6N5KINJKZCFURPZ"
    ///             }
    ///           ],
    ///           "quantity" : "2"
    ///         }
    ///       ],
    ///       "location_id" : "057P5VYJ4A5X1",
    ///       "reference_id" : "my-order-001",
    ///       "taxes" : [
    ///         {
    ///           "name" : "State Sales Tax",
    ///           "percentage" : "9",
    ///           "scope" : "ORDER",
    ///           "uid" : "state-sales-tax"
    ///         }
    ///       ]
    ///     }
    ///   }
    /// }
    public var order: CreateOrderRequest
    /// If provided, the buyer's email is prepopulated on the checkout page
    /// as an editable text field.
    /// 
    /// Default: none; only exists if explicitly set.
    public var prePopulateBuyerEmail: String?
    /// Represents a postal address in a country. The address format is based
    /// on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
    /// see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
    /// This format has dedicated fields for four address components: postal code,
    /// locality (city), administrative district (state, prefecture, or province), and
    /// sublocality (town or village). These components have dedicated fields in the
    /// `Address` object because software sometimes behaves differently based on them.
    /// For example, sales tax software may charge different amounts of sales tax
    /// based on the postal code, and some software is only available in
    /// certain states due to compliance reasons.
    /// 
    /// For the remaining address components, the `Address` type provides the
    /// `address_line_1` and `address_line_2` fields for free-form data entry.
    /// These fields are free-form because the remaining address components have
    /// too many variations around the world and typical software does not parse
    /// these components. These fields enable users to enter anything they want.
    /// 
    /// Note that, in the current implementation, all other `Address` type fields are blank.
    /// These include `address_line_3`, `sublocality_2`, `sublocality_3`,
    /// `administrative_district_level_2`, `administrative_district_level_3`,
    /// `first_name`, `last_name`, and `organization`.
    /// 
    /// When it comes to localization, the seller's language preferences
    /// (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
    /// are ignored for addresses. Even though Square products (such as Square Point of Sale
    /// and the Seller Dashboard) mostly use a seller's language preference in
    /// communication, when it comes to addresses, they will use English for a US address,
    /// Japanese for an address in Japan, and so on.
    public var prePopulateShippingAddress: Address?
    /// The URL to redirect to after the checkout is completed with `checkoutId`,
    /// `transactionId`, and `referenceId` appended as URL parameters. For example,
    /// if the provided redirect URL is `http://www.example.com/order-complete`, a
    /// successful transaction redirects the customer to:
    /// 
    /// <pre><code>http://www.example.com/order-complete?checkoutId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx</code></pre>
    /// 
    /// If you do not provide a redirect URL, Square Checkout displays an order
    /// confirmation page on your behalf; however, it is strongly recommended that
    /// you provide a redirect URL so you can verify the transaction results and
    /// finalize the order through your existing/normal confirmation workflow.
    /// 
    /// Default: none; only exists if explicitly set.
    public var redirectURL: String?

    public init(additionalRecipients: [ChargeRequestAdditionalRecipient]? = nil, isAskForShippingAddress: Bool? = nil, idempotencyKey: String, merchantSupportEmail: String? = nil, note: String? = nil, order: CreateOrderRequest, prePopulateBuyerEmail: String? = nil, prePopulateShippingAddress: Address? = nil, redirectURL: String? = nil) {
        self.additionalRecipients = additionalRecipients
        self.isAskForShippingAddress = isAskForShippingAddress
        self.idempotencyKey = idempotencyKey
        self.merchantSupportEmail = merchantSupportEmail
        self.note = note
        self.order = order
        self.prePopulateBuyerEmail = prePopulateBuyerEmail
        self.prePopulateShippingAddress = prePopulateShippingAddress
        self.redirectURL = redirectURL
    }

    private enum CodingKeys: String, CodingKey {
        case additionalRecipients = "additional_recipients"
        case isAskForShippingAddress = "ask_for_shipping_address"
        case idempotencyKey = "idempotency_key"
        case merchantSupportEmail = "merchant_support_email"
        case note
        case order
        case prePopulateBuyerEmail = "pre_populate_buyer_email"
        case prePopulateShippingAddress = "pre_populate_shipping_address"
        case redirectURL = "redirect_url"
    }
}

/// Defines the fields that are included in the response body of
/// a request to the `CreateCheckout` endpoint.
///
/// Example:
///
/// {
///   "checkout" : {
///     "additional_recipients" : [
///       {
///         "amount_money" : {
///           "amount" : 60,
///           "currency" : "USD"
///         },
///         "description" : "Application fees",
///         "location_id" : "057P5VYJ4A5X1"
///       }
///     ],
///     "ask_for_shipping_address" : true,
///     "checkout_page_url" : "https:\/\/connect.squareup.com\/v2\/checkout?c=CAISEHGimXh-C3RIT4og1a6u1qw&l=CYTKRM7R7JMV8",
///     "created_at" : "2017-06-16T22:25:35Z",
///     "id" : "CAISEHGimXh-C3RIT4og1a6u1qw",
///     "merchant_support_email" : "merchant+support@website.com",
///     "order" : {
///       "customer_id" : "customer_id",
///       "discounts" : [
///         {
///           "amount_money" : {
///             "amount" : 100,
///             "currency" : "USD"
///           },
///           "applied_money" : {
///             "amount" : 100,
///             "currency" : "USD"
///           },
///           "scope" : "LINE_ITEM",
///           "type" : "FIXED_AMOUNT",
///           "uid" : "56ae1696-z1e3-9328-af6d-f1e04d947gd4"
///         }
///       ],
///       "line_items" : [
///         {
///           "applied_discounts" : [
///             {
///               "applied_money" : {
///                 "amount" : 100,
///                 "currency" : "USD"
///               },
///               "discount_uid" : "56ae1696-z1e3-9328-af6d-f1e04d947gd4"
///             }
///           ],
///           "applied_taxes" : [
///             {
///               "applied_money" : {
///                 "amount" : 103,
///                 "currency" : "USD"
///               },
///               "tax_uid" : "38ze1696-z1e3-5628-af6d-f1e04d947fg3"
///             }
///           ],
///           "base_price_money" : {
///             "amount" : 1500,
///             "currency" : "USD"
///           },
///           "name" : "Printed T Shirt",
///           "quantity" : "2",
///           "total_discount_money" : {
///             "amount" : 100,
///             "currency" : "USD"
///           },
///           "total_money" : {
///             "amount" : 1503,
///             "currency" : "USD"
///           },
///           "total_tax_money" : {
///             "amount" : 103,
///             "currency" : "USD"
///           }
///         },
///         {
///           "base_price_money" : {
///             "amount" : 2500,
///             "currency" : "USD"
///           },
///           "name" : "Slim Jeans",
///           "quantity" : "1",
///           "total_money" : {
///             "amount" : 2500,
///             "currency" : "USD"
///           }
///         },
///         {
///           "base_price_money" : {
///             "amount" : 3500,
///             "currency" : "USD"
///           },
///           "name" : "Woven Sweater",
///           "quantity" : "3",
///           "total_money" : {
///             "amount" : 10500,
///             "currency" : "USD"
///           }
///         }
///       ],
///       "location_id" : "location_id",
///       "reference_id" : "reference_id",
///       "taxes" : [
///         {
///           "percentage" : "7.75",
///           "scope" : "LINE_ITEM",
///           "type" : "INCLUSIVE",
///           "uid" : "38ze1696-z1e3-5628-af6d-f1e04d947fg3"
///         }
///       ],
///       "total_discount_money" : {
///         "amount" : 100,
///         "currency" : "USD"
///       },
///       "total_money" : {
///         "amount" : 14503,
///         "currency" : "USD"
///       },
///       "total_tax_money" : {
///         "amount" : 103,
///         "currency" : "USD"
///       }
///     },
///     "pre_populate_buyer_email" : "example@email.com",
///     "pre_populate_shipping_address" : {
///       "address_line_1" : "1455 Market St.",
///       "address_line_2" : "Suite 600",
///       "administrative_district_level_1" : "CA",
///       "country" : "US",
///       "first_name" : "Jane",
///       "last_name" : "Doe",
///       "locality" : "San Francisco",
///       "postal_code" : "94103"
///     },
///     "redirect_url" : "https:\/\/merchant.website.com\/order-confirm",
///     "version" : 1
///   }
/// }
public struct CreateCheckoutResponse: Codable {
    /// Square Checkout lets merchants accept online payments for supported
    /// payment types using a checkout workflow hosted on squareup.com.
    public var checkout: Checkout?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(checkout: Checkout? = nil, errors: [Error]? = nil) {
        self.checkout = checkout
        self.errors = errors
    }
}

/// Defines the fields that are included in the request body of a request
/// to the `CreateCustomerCard` endpoint.
///
/// Example:
///
/// {
///   "request_body" : {
///     "billing_address" : {
///       "address_line_1" : "500 Electric Ave",
///       "address_line_2" : "Suite 600",
///       "administrative_district_level_1" : "NY",
///       "country" : "US",
///       "locality" : "New York",
///       "postal_code" : "10003"
///     },
///     "card_nonce" : "YOUR_CARD_NONCE",
///     "cardholder_name" : "Amelia Earhart"
///   }
/// }
public struct CreateCustomerCardRequest: Codable {
    /// Represents a postal address in a country. The address format is based
    /// on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
    /// see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
    /// This format has dedicated fields for four address components: postal code,
    /// locality (city), administrative district (state, prefecture, or province), and
    /// sublocality (town or village). These components have dedicated fields in the
    /// `Address` object because software sometimes behaves differently based on them.
    /// For example, sales tax software may charge different amounts of sales tax
    /// based on the postal code, and some software is only available in
    /// certain states due to compliance reasons.
    /// 
    /// For the remaining address components, the `Address` type provides the
    /// `address_line_1` and `address_line_2` fields for free-form data entry.
    /// These fields are free-form because the remaining address components have
    /// too many variations around the world and typical software does not parse
    /// these components. These fields enable users to enter anything they want.
    /// 
    /// Note that, in the current implementation, all other `Address` type fields are blank.
    /// These include `address_line_3`, `sublocality_2`, `sublocality_3`,
    /// `administrative_district_level_2`, `administrative_district_level_3`,
    /// `first_name`, `last_name`, and `organization`.
    /// 
    /// When it comes to localization, the seller's language preferences
    /// (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
    /// are ignored for addresses. Even though Square products (such as Square Point of Sale
    /// and the Seller Dashboard) mostly use a seller's language preference in
    /// communication, when it comes to addresses, they will use English for a US address,
    /// Japanese for an address in Japan, and so on.
    public var billingAddress: Address?
    /// A card nonce representing the credit card to link to the customer.
    /// 
    /// Card nonces are generated by the Square payment form when customers enter
    /// their card information. For more information, see
    /// [Walkthrough: Integrate Square Payments in a Website](https://developer.squareup.com/docs/web-payments/take-card-payment).
    /// 
    /// __NOTE:__ Card nonces generated by digital wallets (such as Apple Pay)
    /// cannot be used to create a customer card.
    public var cardNonce: String
    /// The full name printed on the credit card.
    public var cardholderName: String?
    /// An identifying token generated by [Payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer).
    /// Verification tokens encapsulate customer device information and 3-D Secure
    /// challenge results to indicate that Square has verified the buyer identity.
    public var verificationToken: String?

    public init(billingAddress: Address? = nil, cardNonce: String, cardholderName: String? = nil, verificationToken: String? = nil) {
        self.billingAddress = billingAddress
        self.cardNonce = cardNonce
        self.cardholderName = cardholderName
        self.verificationToken = verificationToken
    }

    private enum CodingKeys: String, CodingKey {
        case billingAddress = "billing_address"
        case cardNonce = "card_nonce"
        case cardholderName = "cardholder_name"
        case verificationToken = "verification_token"
    }
}

/// Defines the fields that are included in the response body of
/// a request to the `CreateCustomerCard` endpoint.
/// 
/// Either `errors` or `card` is present in a given response (never both).
///
/// Example:
///
/// {
///   "card" : {
///     "billing_address" : {
///       "address_line_1" : "500 Electric Ave",
///       "address_line_2" : "Suite 600",
///       "administrative_district_level_1" : "NY",
///       "country" : "US",
///       "locality" : "New York",
///       "postal_code" : "10003"
///     },
///     "card_brand" : "VISA",
///     "cardholder_name" : "Amelia Earhart",
///     "exp_month" : 11,
///     "exp_year" : 2018,
///     "id" : "icard-card_id",
///     "last_4" : "1111"
///   }
/// }
public struct CreateCustomerCardResponse: Codable {
    /// Represents the payment details of a card to be used for payments. These
    /// details are determined by the payment token generated by Web Payments SDK.
    public var card: Card?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(card: Card? = nil, errors: [Error]? = nil) {
        self.card = card
        self.errors = errors
    }
}

/// Defines the body parameters that can be included in a request to the
/// [CreateCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/create-customer-group) endpoint.
///
/// Example:
///
/// {
///   "request_body" : {
///     "group" : {
///       "name" : "Loyal Customers"
///     }
///   }
/// }
public struct CreateCustomerGroupRequest: Codable {
    /// Represents a group of customer profiles.
    /// 
    /// Customer groups can be created, be modified, and have their membership defined using
    /// the Customers API or within the Customer Directory in the Square Seller Dashboard or Point of Sale.
    public var group: CustomerGroup
    /// The idempotency key for the request. For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).
    public var idempotencyKey: String?

    public init(group: CustomerGroup, idempotencyKey: String? = nil) {
        self.group = group
        self.idempotencyKey = idempotencyKey
    }

    private enum CodingKeys: String, CodingKey {
        case group
        case idempotencyKey = "idempotency_key"
    }
}

/// Defines the fields that are included in the response body of
/// a request to the [CreateCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/create-customer-group) endpoint.
/// 
/// Either `errors` or `group` is present in a given response (never both).
///
/// Example:
///
/// {
///   "group" : {
///     "created_at" : "2020-04-13T21:54:57.863Z",
///     "id" : "2TAT3CMH4Q0A9M87XJZED0WMR3",
///     "name" : "Loyal Customers",
///     "updated_at" : "2020-04-13T21:54:58Z"
///   }
/// }
public struct CreateCustomerGroupResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Represents a group of customer profiles.
    /// 
    /// Customer groups can be created, be modified, and have their membership defined using
    /// the Customers API or within the Customer Directory in the Square Seller Dashboard or Point of Sale.
    public var group: CustomerGroup?

    public init(errors: [Error]? = nil, group: CustomerGroup? = nil) {
        self.errors = errors
        self.group = group
    }
}

/// Defines the body parameters that can be included in a request to the
/// `CreateCustomer` endpoint.
///
/// Example:
///
/// {
///   "request_body" : {
///     "address" : {
///       "address_line_1" : "500 Electric Ave",
///       "address_line_2" : "Suite 600",
///       "administrative_district_level_1" : "NY",
///       "country" : "US",
///       "locality" : "New York",
///       "postal_code" : "10003"
///     },
///     "email_address" : "Amelia.Earhart@example.com",
///     "family_name" : "Earhart",
///     "given_name" : "Amelia",
///     "note" : "a customer",
///     "phone_number" : "1-212-555-4240",
///     "reference_id" : "YOUR_REFERENCE_ID"
///   }
/// }
public struct CreateCustomerRequest: Codable {
    /// Represents a postal address in a country. The address format is based
    /// on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
    /// see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
    /// This format has dedicated fields for four address components: postal code,
    /// locality (city), administrative district (state, prefecture, or province), and
    /// sublocality (town or village). These components have dedicated fields in the
    /// `Address` object because software sometimes behaves differently based on them.
    /// For example, sales tax software may charge different amounts of sales tax
    /// based on the postal code, and some software is only available in
    /// certain states due to compliance reasons.
    /// 
    /// For the remaining address components, the `Address` type provides the
    /// `address_line_1` and `address_line_2` fields for free-form data entry.
    /// These fields are free-form because the remaining address components have
    /// too many variations around the world and typical software does not parse
    /// these components. These fields enable users to enter anything they want.
    /// 
    /// Note that, in the current implementation, all other `Address` type fields are blank.
    /// These include `address_line_3`, `sublocality_2`, `sublocality_3`,
    /// `administrative_district_level_2`, `administrative_district_level_3`,
    /// `first_name`, `last_name`, and `organization`.
    /// 
    /// When it comes to localization, the seller's language preferences
    /// (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
    /// are ignored for addresses. Even though Square products (such as Square Point of Sale
    /// and the Seller Dashboard) mostly use a seller's language preference in
    /// communication, when it comes to addresses, they will use English for a US address,
    /// Japanese for an address in Japan, and so on.
    public var address: Address?
    /// The birthday associated with the customer profile, in RFC 3339 format. The year is optional. The timezone and time are not allowed.
    /// For example, `0000-09-21T00:00:00-00:00` represents a birthday on September 21 and `1998-09-21T00:00:00-00:00` represents a birthday on September 21, 1998.
    /// You can also specify this value in `YYYY-MM-DD` format.
    public var birthday: String?
    /// A business name associated with the customer profile.
    public var companyName: String?
    /// The email address associated with the customer profile.
    public var emailAddress: String?
    /// The family name (that is, the last name) associated with the customer profile.
    public var familyName: String?
    /// The given name (that is, the first name) associated with the customer profile.
    public var givenName: String?
    /// The idempotency key for the request.    For more information, see
    /// [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
    public var idempotencyKey: String?
    /// A nickname for the customer profile.
    public var nickname: String?
    /// A custom note associated with the customer profile.
    public var note: String?
    /// The 11-digit phone number associated with the customer profile.
    public var phoneNumber: String?
    /// An optional second ID used to associate the customer profile with an
    /// entity in another system.
    public var referenceID: String?

    public init(address: Address? = nil, birthday: String? = nil, companyName: String? = nil, emailAddress: String? = nil, familyName: String? = nil, givenName: String? = nil, idempotencyKey: String? = nil, nickname: String? = nil, note: String? = nil, phoneNumber: String? = nil, referenceID: String? = nil) {
        self.address = address
        self.birthday = birthday
        self.companyName = companyName
        self.emailAddress = emailAddress
        self.familyName = familyName
        self.givenName = givenName
        self.idempotencyKey = idempotencyKey
        self.nickname = nickname
        self.note = note
        self.phoneNumber = phoneNumber
        self.referenceID = referenceID
    }

    private enum CodingKeys: String, CodingKey {
        case address
        case birthday
        case companyName = "company_name"
        case emailAddress = "email_address"
        case familyName = "family_name"
        case givenName = "given_name"
        case idempotencyKey = "idempotency_key"
        case nickname
        case note
        case phoneNumber = "phone_number"
        case referenceID = "reference_id"
    }
}

/// Defines the fields that are included in the response body of
/// a request to the `CreateCustomer` endpoint.
/// 
/// Either `errors` or `customer` is present in a given response (never both).
///
/// Example:
///
/// {
///   "customer" : {
///     "address" : {
///       "address_line_1" : "500 Electric Ave",
///       "address_line_2" : "Suite 600",
///       "administrative_district_level_1" : "NY",
///       "country" : "US",
///       "locality" : "New York",
///       "postal_code" : "10003"
///     },
///     "created_at" : "2016-03-23T20:21:54.859Z",
///     "creation_source" : "THIRD_PARTY",
///     "email_address" : "Amelia.Earhart@example.com",
///     "family_name" : "Earhart",
///     "given_name" : "Amelia",
///     "id" : "JDKYHBWT1D4F8MFH63DBMEN8Y4",
///     "note" : "a customer",
///     "phone_number" : "1-212-555-4240",
///     "preferences" : {
///       "email_unsubscribed" : false
///     },
///     "reference_id" : "YOUR_REFERENCE_ID",
///     "updated_at" : "2016-03-23T20:21:54.859Z",
///     "version" : 0
///   }
/// }
public struct CreateCustomerResponse: Codable {
    /// Represents a Square customer profile in the Customer Directory of a Square seller.
    public var customer: Customer?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(customer: Customer? = nil, errors: [Error]? = nil) {
        self.customer = customer
        self.errors = errors
    }
}

/// Example:
///
/// {
///   "request_body" : {
///     "device_code" : {
///       "location_id" : "B5E4484SHHNYH",
///       "name" : "Counter 1",
///       "product_type" : "TERMINAL_API"
///     },
///     "idempotency_key" : "01bb00a6-0c86-4770-94ed-f5fca973cd56"
///   }
/// }
public struct CreateDeviceCodeRequest: Codable {
    public var deviceCode: DeviceCode
    /// A unique string that identifies this CreateDeviceCode request. Keys can
    /// be any valid string but must be unique for every CreateDeviceCode request.
    /// 
    /// See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
    public var idempotencyKey: String

    public init(deviceCode: DeviceCode, idempotencyKey: String) {
        self.deviceCode = deviceCode
        self.idempotencyKey = idempotencyKey
    }

    private enum CodingKeys: String, CodingKey {
        case deviceCode = "device_code"
        case idempotencyKey = "idempotency_key"
    }
}

/// Example:
///
/// {
///   "device_code" : {
///     "code" : "EBCARJ",
///     "created_at" : "2020-02-06T18:44:33.000Z",
///     "id" : "B3Z6NAMYQSMTM",
///     "location_id" : "B5E4484SHHNYH",
///     "name" : "Counter 1",
///     "pair_by" : "2020-02-06T18:49:33.000Z",
///     "product_type" : "TERMINAL_API",
///     "status" : "UNPAIRED",
///     "status_changed_at" : "2020-02-06T18:44:33.000Z"
///   }
/// }
public struct CreateDeviceCodeResponse: Codable {
    public var deviceCode: DeviceCode?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(deviceCode: DeviceCode? = nil, errors: [Error]? = nil) {
        self.deviceCode = deviceCode
        self.errors = errors
    }

    private enum CodingKeys: String, CodingKey {
        case deviceCode = "device_code"
        case errors
    }
}

/// Defines the parameters for a `CreateDisputeEvidenceText` request.
///
/// Example:
///
/// {
///   "request_body" : {
///     "evidence_text" : "1Z8888888888888888",
///     "evidence_type" : "TRACKING_NUMBER",
///     "idempotency_key" : "ed3ee3933d946f1514d505d173c82648"
///   }
/// }
public struct CreateDisputeEvidenceTextRequest: Codable {
    /// The evidence string.
    public var evidenceText: String
    /// The type of evidence you are uploading.
    public var evidenceType: String?
    /// The Unique ID. For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
    public var idempotencyKey: String

    public init(evidenceText: String, evidenceType: String? = nil, idempotencyKey: String) {
        self.evidenceText = evidenceText
        self.evidenceType = evidenceType
        self.idempotencyKey = idempotencyKey
    }

    private enum CodingKeys: String, CodingKey {
        case evidenceText = "evidence_text"
        case evidenceType = "evidence_type"
        case idempotencyKey = "idempotency_key"
    }
}

/// Defines the fields in a `CreateDisputeEvidenceText` response.
///
/// Example:
///
/// {
///   "evidence" : {
///     "dispute_id" : "bVTprrwk0gygTLZ96VX1oB",
///     "evidence_text" : "1Z8888888888888888",
///     "evidence_type" : "TRACKING_NUMBER",
///     "id" : "TOomLInj6iWmP3N8qfCXrB",
///     "uploaded_at" : "2018-10-18T16:01:10.000Z"
///   }
/// }
public struct CreateDisputeEvidenceTextResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    public var evidence: DisputeEvidence?

    public init(errors: [Error]? = nil, evidence: DisputeEvidence? = nil) {
        self.errors = errors
        self.evidence = evidence
    }
}

/// A request to create a gift card activity.
///
/// Example:
///
/// {
///   "request_body" : {
///     "gift_card_activity" : {
///       "activate_activity_details" : {
///         "line_item_uid" : "eIWl7X0nMuO9Ewbh0ChIx",
///         "order_id" : "jJNGHm4gLI6XkFbwtiSLqK72KkAZY"
///       },
///       "gift_card_id" : "gftc:6d55a72470d940c6ba09c0ab8ad08d20",
///       "location_id" : "81FN9BNFZTKS4",
///       "type" : "ACTIVATE"
///     },
///     "idempotency_key" : "U16kfr-kA70er-q4Rsym-7U7NnY"
///   }
/// }
public struct CreateGiftCardActivityRequest: Codable {
    /// Represents an action performed on a gift card that affects its state or balance.
    public var giftCardActivity: GiftCardActivity
    /// A unique string that identifies the `CreateGiftCardActivity` request.
    public var idempotencyKey: String

    public init(giftCardActivity: GiftCardActivity, idempotencyKey: String) {
        self.giftCardActivity = giftCardActivity
        self.idempotencyKey = idempotencyKey
    }

    private enum CodingKeys: String, CodingKey {
        case giftCardActivity = "gift_card_activity"
        case idempotencyKey = "idempotency_key"
    }
}

/// A response that contains a `GiftCardActivity` that was created.
/// The response might contain a set of `Error` objects if the request resulted in errors.
///
/// Example:
///
/// {
///   "gift_card_activity" : {
///     "activate_activity_details" : {
///       "amount_money" : {
///         "amount" : 1000,
///         "currency" : "USD"
///       },
///       "line_item_uid" : "eIWl7X0nMuO9Ewbh0ChIx",
///       "order_id" : "jJNGHm4gLI6XkFbwtiSLqK72KkAZY"
///     },
///     "created_at" : "2021-05-20T22:26:54.000Z",
///     "gift_card_balance_money" : {
///       "amount" : 1000,
///       "currency" : "USD"
///     },
///     "gift_card_gan" : "7783320002929081",
///     "gift_card_id" : "gftc:6d55a72470d940c6ba09c0ab8ad08d20",
///     "id" : "gcact_c8f8cbf1f24b448d8ecf39ed03f97864",
///     "location_id" : "81FN9BNFZTKS4",
///     "type" : "ACTIVATE"
///   }
/// }
public struct CreateGiftCardActivityResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Represents an action performed on a gift card that affects its state or balance.
    public var giftCardActivity: GiftCardActivity?

    public init(errors: [Error]? = nil, giftCardActivity: GiftCardActivity? = nil) {
        self.errors = errors
        self.giftCardActivity = giftCardActivity
    }

    private enum CodingKeys: String, CodingKey {
        case errors
        case giftCardActivity = "gift_card_activity"
    }
}

/// A request to create a gift card.
///
/// Example:
///
/// {
///   "request_body" : {
///     "gift_card" : {
///       "type" : "DIGITAL"
///     },
///     "idempotency_key" : "NC9Tm69EjbjtConu",
///     "location_id" : "81FN9BNFZTKS4"
///   }
/// }
public struct CreateGiftCardRequest: Codable {
    /// Represents a Square gift card.
    public var giftCard: GiftCard
    /// A unique string that identifies the `CreateGiftCard` request.
    public var idempotencyKey: String
    /// The location ID where the gift card that will be created should be registered.
    public var locationID: String

    public init(giftCard: GiftCard, idempotencyKey: String, locationID: String) {
        self.giftCard = giftCard
        self.idempotencyKey = idempotencyKey
        self.locationID = locationID
    }

    private enum CodingKeys: String, CodingKey {
        case giftCard = "gift_card"
        case idempotencyKey = "idempotency_key"
        case locationID = "location_id"
    }
}

/// A response that contains a `GiftCard`. The response might contain a set of `Error` objects if the request
/// resulted in errors.
///
/// Example:
///
/// {
///   "gift_card" : {
///     "balance_money" : {
///       "amount" : 0,
///       "currency" : "USD"
///     },
///     "created_at" : "2021-05-20T22:26:54.000Z",
///     "gan" : "7783320006753271",
///     "gan_source" : "SQUARE",
///     "id" : "gftc:6cbacbb64cf54e2ca9f573d619038059",
///     "state" : "PENDING",
///     "type" : "DIGITAL"
///   }
/// }
public struct CreateGiftCardResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Represents a Square gift card.
    public var giftCard: GiftCard?

    public init(errors: [Error]? = nil, giftCard: GiftCard? = nil) {
        self.errors = errors
        self.giftCard = giftCard
    }

    private enum CodingKeys: String, CodingKey {
        case errors
        case giftCard = "gift_card"
    }
}

/// Describes a `CreateInvoice` request.
///
/// Example:
///
/// {
///   "request_body" : {
///     "idempotency_key" : "ce3748f9-5fc1-4762-aa12-aae5e843f1f4",
///     "invoice" : {
///       "accepted_payment_methods" : {
///         "bank_account" : false,
///         "card" : true,
///         "square_gift_card" : false
///       },
///       "custom_fields" : [
///         {
///           "label" : "Event Reference Number",
///           "placement" : "ABOVE_LINE_ITEMS",
///           "value" : "Ref. #1234"
///         },
///         {
///           "label" : "Terms of Service",
///           "placement" : "BELOW_LINE_ITEMS",
///           "value" : "The terms of service are..."
///         }
///       ],
///       "delivery_method" : "EMAIL",
///       "description" : "We appreciate your business!",
///       "invoice_number" : "inv-100",
///       "location_id" : "ES0RJRZYEC39A",
///       "order_id" : "CAISENgvlJ6jLWAzERDzjyHVybY",
///       "payment_requests" : [
///         {
///           "automatic_payment_source" : "NONE",
///           "due_date" : "2030-01-24",
///           "reminders" : [
///             {
///               "message" : "Your invoice is due tomorrow",
///               "relative_scheduled_days" : -1
///             }
///           ],
///           "request_type" : "BALANCE",
///           "tipping_enabled" : true
///         }
///       ],
///       "primary_recipient" : {
///         "customer_id" : "JDKYHBWT1D4F8MFH63DBMEN8Y4"
///       },
///       "scheduled_at" : "2030-01-13T10:00:00Z",
///       "title" : "Event Planning Services"
///     }
///   }
/// }
public struct CreateInvoiceRequest: Codable {
    /// A unique string that identifies the `CreateInvoice` request. If you do not
    /// provide `idempotency_key` (or provide an empty string as the value), the endpoint
    /// treats each request as independent.
    /// 
    /// For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
    public var idempotencyKey: String?
    /// Stores information about an invoice. You use the Invoices API to create and manage
    /// invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
    public var invoice: Invoice

    public init(idempotencyKey: String? = nil, invoice: Invoice) {
        self.idempotencyKey = idempotencyKey
        self.invoice = invoice
    }

    private enum CodingKeys: String, CodingKey {
        case idempotencyKey = "idempotency_key"
        case invoice
    }
}

/// The response returned by the `CreateInvoice` request.
///
/// Example:
///
/// {
///   "invoice" : {
///     "accepted_payment_methods" : {
///       "bank_account" : false,
///       "card" : true,
///       "square_gift_card" : false
///     },
///     "created_at" : "2020-06-18T17:45:13Z",
///     "custom_fields" : [
///       {
///         "label" : "Event Reference Number",
///         "placement" : "ABOVE_LINE_ITEMS",
///         "value" : "Ref. #1234"
///       },
///       {
///         "label" : "Terms of Service",
///         "placement" : "BELOW_LINE_ITEMS",
///         "value" : "The terms of service are..."
///       }
///     ],
///     "delivery_method" : "EMAIL",
///     "description" : "We appreciate your business!",
///     "id" : "inv:0-ChCHu2mZEabLeeHahQnXDjZQECY",
///     "invoice_number" : "inv-100",
///     "location_id" : "ES0RJRZYEC39A",
///     "order_id" : "CAISENgvlJ6jLWAzERDzjyHVybY",
///     "payment_requests" : [
///       {
///         "automatic_payment_source" : "NONE",
///         "computed_amount_money" : {
///           "amount" : 10000,
///           "currency" : "USD"
///         },
///         "due_date" : "2030-01-24",
///         "reminders" : [
///           {
///             "message" : "Your invoice is due tomorrow",
///             "relative_scheduled_days" : -1,
///             "status" : "PENDING",
///             "uid" : "beebd363-e47f-4075-8785-c235aaa7df11"
///           }
///         ],
///         "request_type" : "BALANCE",
///         "tipping_enabled" : true,
///         "total_completed_amount_money" : {
///           "amount" : 0,
///           "currency" : "USD"
///         },
///         "uid" : "2da7964f-f3d2-4f43-81e8-5aa220bf3355"
///       }
///     ],
///     "primary_recipient" : {
///       "customer_id" : "JDKYHBWT1D4F8MFH63DBMEN8Y4",
///       "email_address" : "Amelia.Earhart@example.com",
///       "family_name" : "Earhart",
///       "given_name" : "Amelia",
///       "phone_number" : "1-212-555-4240"
///     },
///     "scheduled_at" : "2030-01-13T10:00:00Z",
///     "status" : "DRAFT",
///     "timezone" : "America\/Los_Angeles",
///     "title" : "Event Planning Services",
///     "updated_at" : "2020-06-18T17:45:13Z",
///     "version" : 0
///   }
/// }
public struct CreateInvoiceResponse: Codable {
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// Stores information about an invoice. You use the Invoices API to create and manage
    /// invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
    public var invoice: Invoice?

    public init(errors: [Error]? = nil, invoice: Invoice? = nil) {
        self.errors = errors
        self.invoice = invoice
    }
}

/// Request object for the [CreateLocation](https://developer.squareup.com/reference/square_2021-08-18/locations-api/create-location) endpoint.
///
/// Example:
///
/// {
///   "request_body" : {
///     "location" : {
///       "address" : {
///         "address_line_1" : "1234 Peachtree St. NE",
///         "administrative_district_level_1" : "GA",
///         "locality" : "Atlanta",
///         "postal_code" : "30309"
///       },
///       "description" : "My new location.",
///       "facebook_url" : null,
///       "name" : "New location name"
///     }
///   }
/// }
public struct CreateLocationRequest: Codable {
    public var location: Location?

    public init(location: Location? = nil) {
        self.location = location
    }
}

/// Response object returned by the [CreateLocation](https://developer.squareup.com/reference/square_2021-08-18/locations-api/create-location) endpoint.
///
/// Example:
///
/// {
///   "location" : {
///     "address" : {
///       "address_line_1" : "1234 Peachtree St. NE",
///       "administrative_district_level_1" : "GA",
///       "locality" : "Atlanta",
///       "postal_code" : "30309"
///     },
///     "capabilities" : [
///       "CREDIT_CARD_PROCESSING"
///     ],
///     "coordinates" : {
///       "latitude" : 33.788567,
///       "longitude" : -84.466947000000005
///     },
///     "country" : "US",
///     "created_at" : "2019-07-19T17:58:25Z",
///     "currency" : "USD",
///     "description" : "My new location.",
///     "id" : "LOCATION_ID",
///     "instagram_username" : "instagram",
///     "language_code" : "en-US",
///     "mcc" : "1234",
///     "merchant_id" : "MERCHANT_ID",
///     "name" : "New location name",
///     "status" : "ACTIVE",
///     "twitter_username" : "twitter",
///     "type" : "PHYSICAL",
///     "website_url" : "examplewebsite.com"
///   }
/// }
public struct CreateLocationResponse: Codable {
    /// Information on errors encountered during the request.
    public var errors: [Error]?
    public var location: Location?

    public init(errors: [Error]? = nil, location: Location? = nil) {
        self.errors = errors
        self.location = location
    }
}

/// A request to create a new loyalty account.
///
/// Example:
///
/// {
///   "request_body" : {
///     "idempotency_key" : "ec78c477-b1c3-4899-a209-a4e71337c996",
///     "loyalty_account" : {
///       "mapping" : {
///         "phone_number" : "+14155551234"
///       },
///       "program_id" : "d619f755-2d17-41f3-990d-c04ecedd64dd"
///     }
///   }
/// }
public struct CreateLoyaltyAccountRequest: Codable {
    /// A unique string that identifies this `CreateLoyaltyAccount` request.
    /// Keys can be any valid string, but must be unique for every request.
    public var idempotencyKey: String
    /// Describes a loyalty account. For more information, see
    /// [Manage Loyalty Accounts Using the Loyalty API](https://developer.squareup.com/docs/loyalty-api/overview).
    public var loyaltyAccount: LoyaltyAccount

    public init(idempotencyKey: String, loyaltyAccount: LoyaltyAccount) {
        self.idempotencyKey = idempotencyKey
        self.loyaltyAccount = loyaltyAccount
    }

    private enum CodingKeys: String, CodingKey {
        case idempotencyKey = "idempotency_key"
        case loyaltyAccount = "loyalty_account"
    }
}

/// A response that includes loyalty account created.
///
/// Example:
///
/// {
///   "loyalty_account" : {
///     "balance" : 0,
///     "created_at" : "2020-05-08T21:44:32Z",
///     "id" : "79b807d2-d786-46a9-933b-918028d7a8c5",
///     "lifetime_points" : 0,
///     "mapping" : {
///       "created_at" : "2020-05-08T21:44:32Z",
///       "id" : "66aaab3f-da99-49ed-8b19-b87f851c844f",
///       "phone_number" : "+14155551234"
///     },
///     "program_id" : "d619f755-2d17-41f3-990d-c04ecedd64dd",
///     "updated_at" : "2020-05-08T21:44:32Z"
///   }
/// }
public struct CreateLoyaltyAccountResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Describes a loyalty account. For more information, see
    /// [Manage Loyalty Accounts Using the Loyalty API](https://developer.squareup.com/docs/loyalty-api/overview).
    public var loyaltyAccount: LoyaltyAccount?

    public init(errors: [Error]? = nil, loyaltyAccount: LoyaltyAccount? = nil) {
        self.errors = errors
        self.loyaltyAccount = loyaltyAccount
    }

    private enum CodingKeys: String, CodingKey {
        case errors
        case loyaltyAccount = "loyalty_account"
    }
}

/// A request to create a loyalty reward.
///
/// Example:
///
/// {
///   "request_body" : {
///     "idempotency_key" : "18c2e5ea-a620-4b1f-ad60-7b167285e451",
///     "reward" : {
///       "loyalty_account_id" : "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
///       "order_id" : "RFZfrdtm3mhO1oGzf5Cx7fEMsmGZY",
///       "reward_tier_id" : "e1b39225-9da5-43d1-a5db-782cdd8ad94f"
///     }
///   }
/// }
public struct CreateLoyaltyRewardRequest: Codable {
    /// A unique string that identifies this `CreateLoyaltyReward` request.
    /// Keys can be any valid string, but must be unique for every request.
    public var idempotencyKey: String
    /// Represents a contract to redeem loyalty points for a [reward tier](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgramRewardTier) discount. Loyalty rewards can be in an ISSUED, REDEEMED, or DELETED state. For more information, see [Redeem loyalty rewards](https://developer.squareup.com/docs/loyalty-api/overview#redeem-loyalty-rewards).
    public var reward: LoyaltyReward

    public init(idempotencyKey: String, reward: LoyaltyReward) {
        self.idempotencyKey = idempotencyKey
        self.reward = reward
    }

    private enum CodingKeys: String, CodingKey {
        case idempotencyKey = "idempotency_key"
        case reward
    }
}

/// A response that includes the loyalty reward created.
///
/// Example:
///
/// {
///   "reward" : {
///     "created_at" : "2020-05-01T21:49:54Z",
///     "id" : "a8f43ebe-2ad6-3001-bdd5-7d7c2da08943",
///     "loyalty_account_id" : "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
///     "order_id" : "RFZfrdtm3mhO1oGzf5Cx7fEMsmGZY",
///     "points" : 10,
///     "reward_tier_id" : "e1b39225-9da5-43d1-a5db-782cdd8ad94f",
///     "status" : "ISSUED",
///     "updated_at" : "2020-05-01T21:49:54Z"
///   }
/// }
public struct CreateLoyaltyRewardResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Represents a contract to redeem loyalty points for a [reward tier](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgramRewardTier) discount. Loyalty rewards can be in an ISSUED, REDEEMED, or DELETED state. For more information, see [Redeem loyalty rewards](https://developer.squareup.com/docs/loyalty-api/overview#redeem-loyalty-rewards).
    public var reward: LoyaltyReward?

    public init(errors: [Error]? = nil, reward: LoyaltyReward? = nil) {
        self.errors = errors
        self.reward = reward
    }
}

/// Defines the body parameters that can be provided in a request to the
/// __CreateMobileAuthorizationCode__ endpoint.
///
/// Example:
///
/// {
///   "request_body" : {
///     "location_id" : "YOUR_LOCATION_ID"
///   },
///   "request_url" : "\/mobile\/authorization-code"
/// }
public struct CreateMobileAuthorizationCodeRequest: Codable {
    /// The Square location ID the authorization code should be tied to.
    public var locationID: String?

    public init(locationID: String? = nil) {
        self.locationID = locationID
    }

    private enum CodingKeys: String, CodingKey {
        case locationID = "location_id"
    }
}

/// Defines the fields that are included in the response body of
/// a request to the __CreateMobileAuthorizationCode__ endpoint.
///
/// Example:
///
/// {
///   "authorization_code" : "YOUR_MOBILE_AUTHORIZATION_CODE",
///   "expires_at" : "2019-01-10T19:42:08Z"
/// }
public struct CreateMobileAuthorizationCodeResponse: Codable {
    /// Generated authorization code that connects a mobile application instance
    /// to a Square account.
    public var authorizationCode: String?
    /// Represents an error encountered during a request to the Connect API.
    /// 
    /// See [Handling errors](https://developer.squareup.com/docs/build-basics/handling-errors) for more information.
    public var error: Error?
    /// The timestamp when `authorization_code` expires in
    /// [RFC 3339](https://tools.ietf.org/html/rfc3339) format, e.g., "2016-09-04T23:59:33.123Z".
    public var expiresAt: String?

    public init(authorizationCode: String? = nil, error: Error? = nil, expiresAt: String? = nil) {
        self.authorizationCode = authorizationCode
        self.error = error
        self.expiresAt = expiresAt
    }

    private enum CodingKeys: String, CodingKey {
        case authorizationCode = "authorization_code"
        case error
        case expiresAt = "expires_at"
    }
}

/// Example:
///
/// {
///   "request_body" : {
///     "idempotency_key" : "8193148c-9586-11e6-99f9-28cfe92138cf",
///     "order" : {
///       "discounts" : [
///         {
///           "name" : "Labor Day Sale",
///           "percentage" : "5",
///           "scope" : "ORDER",
///           "uid" : "labor-day-sale"
///         },
///         {
///           "catalog_object_id" : "DB7L55ZH2BGWI4H23ULIWOQ7",
///           "scope" : "ORDER",
///           "uid" : "membership-discount"
///         },
///         {
///           "amount_money" : {
///             "amount" : 100,
///             "currency" : "USD"
///           },
///           "name" : "Sale - $1.00 off",
///           "scope" : "LINE_ITEM",
///           "uid" : "one-dollar-off"
///         }
///       ],
///       "line_items" : [
///         {
///           "base_price_money" : {
///             "amount" : 1599,
///             "currency" : "USD"
///           },
///           "name" : "New York Strip Steak",
///           "quantity" : "1"
///         },
///         {
///           "applied_discounts" : [
///             {
///               "discount_uid" : "one-dollar-off"
///             }
///           ],
///           "catalog_object_id" : "BEMYCSMIJL46OCDV4KYIKXIB",
///           "modifiers" : [
///             {
///               "catalog_object_id" : "CHQX7Y4KY6N5KINJKZCFURPZ"
///             }
///           ],
///           "quantity" : "2"
///         }
///       ],
///       "location_id" : "057P5VYJ4A5X1",
///       "reference_id" : "my-order-001",
///       "taxes" : [
///         {
///           "name" : "State Sales Tax",
///           "percentage" : "9",
///           "scope" : "ORDER",
///           "uid" : "state-sales-tax"
///         }
///       ]
///     }
///   }
/// }
public struct CreateOrderRequest: Codable {
    /// A value you specify that uniquely identifies this
    /// order among orders you have created.
    /// 
    /// If you are unsure whether a particular order was created successfully,
    /// you can try it again with the same idempotency key without
    /// worrying about creating duplicate orders.
    /// 
    /// For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).
    public var idempotencyKey: String?
    /// Contains all information related to a single order to process with Square,
    /// including line items that specify the products to purchase. `Order` objects also
    /// include information about any associated tenders, refunds, and returns.
    /// 
    /// All Connect V2 Transactions have all been converted to Orders including all associated
    /// itemization data.
    public var order: Order?

    public init(idempotencyKey: String? = nil, order: Order? = nil) {
        self.idempotencyKey = idempotencyKey
        self.order = order
    }

    private enum CodingKeys: String, CodingKey {
        case idempotencyKey = "idempotency_key"
        case order
    }
}

/// Defines the fields that are included in the response body of
/// a request to the `CreateOrder` endpoint.
/// 
/// Either `errors` or `order` is present in a given response, but never both.
///
/// Example:
///
/// {
///   "order" : {
///     "created_at" : "2020-01-17T20:47:53.293Z",
///     "discounts" : [
///       {
///         "applied_money" : {
///           "amount" : 30,
///           "currency" : "USD"
///         },
///         "catalog_object_id" : "DB7L55ZH2BGWI4H23ULIWOQ7",
///         "name" : "Membership Discount",
///         "percentage" : "0.5",
///         "scope" : "ORDER",
///         "type" : "FIXED_PERCENTAGE",
///         "uid" : "membership-discount"
///       },
///       {
///         "applied_money" : {
///           "amount" : 303,
///           "currency" : "USD"
///         },
///         "name" : "Labor Day Sale",
///         "percentage" : "5",
///         "scope" : "ORDER",
///         "type" : "FIXED_PERCENTAGE",
///         "uid" : "labor-day-sale"
///       },
///       {
///         "amount_money" : {
///           "amount" : 100,
///           "currency" : "USD"
///         },
///         "applied_money" : {
///           "amount" : 100,
///           "currency" : "USD"
///         },
///         "name" : "Sale - $1.00 off",
///         "scope" : "LINE_ITEM",
///         "type" : "FIXED_AMOUNT",
///         "uid" : "one-dollar-off"
///       }
///     ],
///     "id" : "CAISENgvlJ6jLWAzERDzjyHVybY",
///     "line_items" : [
///       {
///         "applied_discounts" : [
///           {
///             "applied_money" : {
///               "amount" : 8,
///               "currency" : "USD"
///             },
///             "discount_uid" : "membership-discount",
///             "uid" : "jWdgP1TpHPFBuVrz81mXVC"
///           },
///           {
///             "applied_money" : {
///               "amount" : 79,
///               "currency" : "USD"
///             },
///             "discount_uid" : "labor-day-sale",
///             "uid" : "jnZOjjVY57eRcQAVgEwFuC"
///           }
///         ],
///         "applied_taxes" : [
///           {
///             "applied_money" : {
///               "amount" : 136,
///               "currency" : "USD"
///             },
///             "tax_uid" : "state-sales-tax",
///             "uid" : "aKG87ArnDpvMLSZJHxWUl"
///           }
///         ],
///         "base_price_money" : {
///           "amount" : 1599,
///           "currency" : "USD"
///         },
///         "gross_sales_money" : {
///           "amount" : 1599,
///           "currency" : "USD"
///         },
///         "name" : "New York Strip Steak",
///         "quantity" : "1",
///         "total_discount_money" : {
///           "amount" : 87,
///           "currency" : "USD"
///         },
///         "total_money" : {
///           "amount" : 1648,
///           "currency" : "USD"
///         },
///         "total_tax_money" : {
///           "amount" : 136,
///           "currency" : "USD"
///         },
///         "uid" : "8uSwfzvUImn3IRrvciqlXC",
///         "variation_total_price_money" : {
///           "amount" : 1599,
///           "currency" : "USD"
///         }
///       },
///       {
///         "applied_discounts" : [
///           {
///             "applied_money" : {
///               "amount" : 22,
///               "currency" : "USD"
///             },
///             "discount_uid" : "membership-discount",
///             "uid" : "nUXvdsIItfKko0dbYtY58C"
///           },
///           {
///             "applied_money" : {
///               "amount" : 224,
///               "currency" : "USD"
///             },
///             "discount_uid" : "labor-day-sale",
///             "uid" : "qSdkOOOernlVQqsJ94SPjB"
///           },
///           {
///             "applied_money" : {
///               "amount" : 100,
///               "currency" : "USD"
///             },
///             "discount_uid" : "one-dollar-off",
///             "uid" : "y7bVl4njrWAnfDwmz19izB"
///           }
///         ],
///         "applied_taxes" : [
///           {
///             "applied_money" : {
///               "amount" : 374,
///               "currency" : "USD"
///             },
///             "tax_uid" : "state-sales-tax",
///             "uid" : "v1dAgrfUVUPTnVTf9sRPz"
///           }
///         ],
///         "base_price_money" : {
///           "amount" : 2200,
///           "currency" : "USD"
///         },
///         "catalog_object_id" : "BEMYCSMIJL46OCDV4KYIKXIB",
///         "gross_sales_money" : {
///           "amount" : 4500,
///           "currency" : "USD"
///         },
///         "modifiers" : [
///           {
///             "base_price_money" : {
///               "amount" : 50,
///               "currency" : "USD"
///             },
///             "catalog_object_id" : "CHQX7Y4KY6N5KINJKZCFURPZ",
///             "name" : "Well",
///             "total_price_money" : {
///               "amount" : 100,
///               "currency" : "USD"
///             },
///             "uid" : "Lo3qMMckDluu9Qsb58d4CC"
///           }
///         ],
///         "name" : "New York Steak",
///         "quantity" : "2",
///         "total_discount_money" : {
///           "amount" : 346,
///           "currency" : "USD"
///         },
///         "total_money" : {
///           "amount" : 4528,
///           "currency" : "USD"
///         },
///         "total_tax_money" : {
///           "amount" : 374,
///           "currency" : "USD"
///         },
///         "uid" : "v8ZuEXpOJpb0bazLuvrLDB",
///         "variation_name" : "Larger",
///         "variation_total_price_money" : {
///           "amount" : 4400,
///           "currency" : "USD"
///         }
///       }
///     ],
///     "location_id" : "057P5VYJ4A5X1",
///     "net_amounts" : {
///       "discount_money" : {
///         "amount" : 433,
///         "currency" : "USD"
///       },
///       "service_charge_money" : {
///         "amount" : 0,
///         "currency" : "USD"
///       },
///       "tax_money" : {
///         "amount" : 510,
///         "currency" : "USD"
///       },
///       "tip_money" : {
///         "amount" : 0,
///         "currency" : "USD"
///       },
///       "total_money" : {
///         "amount" : 6176,
///         "currency" : "USD"
///       }
///     },
///     "reference_id" : "my-order-001",
///     "source" : {
///       "name" : "My App"
///     },
///     "state" : "OPEN",
///     "taxes" : [
///       {
///         "applied_money" : {
///           "amount" : 510,
///           "currency" : "USD"
///         },
///         "name" : "State Sales Tax",
///         "percentage" : "9",
///         "scope" : "ORDER",
///         "type" : "ADDITIVE",
///         "uid" : "state-sales-tax"
///       }
///     ],
///     "total_discount_money" : {
///       "amount" : 433,
///       "currency" : "USD"
///     },
///     "total_money" : {
///       "amount" : 6176,
///       "currency" : "USD"
///     },
///     "total_service_charge_money" : {
///       "amount" : 0,
///       "currency" : "USD"
///     },
///     "total_tax_money" : {
///       "amount" : 510,
///       "currency" : "USD"
///     },
///     "total_tip_money" : {
///       "amount" : 0,
///       "currency" : "USD"
///     },
///     "updated_at" : "2020-01-17T20:47:53.293Z",
///     "version" : 1
///   }
/// }
public struct CreateOrderResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Contains all information related to a single order to process with Square,
    /// including line items that specify the products to purchase. `Order` objects also
    /// include information about any associated tenders, refunds, and returns.
    /// 
    /// All Connect V2 Transactions have all been converted to Orders including all associated
    /// itemization data.
    public var order: Order?

    public init(errors: [Error]? = nil, order: Order? = nil) {
        self.errors = errors
        self.order = order
    }
}

/// Describes a request to create a payment using
/// [CreatePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/create-payment).
///
/// Example:
///
/// {
///   "request_body" : {
///     "amount_money" : {
///       "amount" : 200,
///       "currency" : "USD"
///     },
///     "app_fee_money" : {
///       "amount" : 10,
///       "currency" : "USD"
///     },
///     "autocomplete" : true,
///     "customer_id" : "VDKXEEKPJN48QDG3BGGFAK05P8",
///     "idempotency_key" : "4935a656-a929-4792-b97c-8848be85c27c",
///     "location_id" : "XK3DBG77NJBFX",
///     "note" : "Brief description",
///     "reference_id" : "123456",
///     "source_id" : "ccof:uIbfJXhXETSP197M3GB"
///   }
/// }
public struct CreatePaymentRequest: Codable {
    /// If set to `true` and charging a Square Gift Card, a payment might be returned with
    /// `amount_money` equal to less than what was requested. For example, a request for $20 when charging
    /// a Square Gift Card with a balance of $5 results in an APPROVED payment of $5. You might choose
    /// to prompt the buyer for an additional payment to cover the remainder or cancel the Gift Card
    /// payment. This field cannot be `true` when `autocomplete = true`.
    /// 
    /// For more information, see
    /// [Partial amount with Square Gift Cards](https://developer.squareup.com/docs/payments-api/take-payments#partial-payment-gift-card).
    /// 
    /// Default: false
    public var isAcceptPartialAuthorization: Bool?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var appFeeMoney: Money?
    /// If set to `true`, this payment will be completed when possible. If
    /// set to `false`, this payment is held in an approved state until either
    /// explicitly completed (captured) or canceled (voided). For more information, see
    /// [Delayed capture](https://developer.squareup.com/docs/payments-api/take-payments/card-payments#delayed-capture-of-a-card-payment).
    /// 
    /// Default: true
    public var isAutocomplete: Bool?
    /// Represents a postal address in a country. The address format is based
    /// on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
    /// see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
    /// This format has dedicated fields for four address components: postal code,
    /// locality (city), administrative district (state, prefecture, or province), and
    /// sublocality (town or village). These components have dedicated fields in the
    /// `Address` object because software sometimes behaves differently based on them.
    /// For example, sales tax software may charge different amounts of sales tax
    /// based on the postal code, and some software is only available in
    /// certain states due to compliance reasons.
    /// 
    /// For the remaining address components, the `Address` type provides the
    /// `address_line_1` and `address_line_2` fields for free-form data entry.
    /// These fields are free-form because the remaining address components have
    /// too many variations around the world and typical software does not parse
    /// these components. These fields enable users to enter anything they want.
    /// 
    /// Note that, in the current implementation, all other `Address` type fields are blank.
    /// These include `address_line_3`, `sublocality_2`, `sublocality_3`,
    /// `administrative_district_level_2`, `administrative_district_level_3`,
    /// `first_name`, `last_name`, and `organization`.
    /// 
    /// When it comes to localization, the seller's language preferences
    /// (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
    /// are ignored for addresses. Even though Square products (such as Square Point of Sale
    /// and the Seller Dashboard) mostly use a seller's language preference in
    /// communication, when it comes to addresses, they will use English for a US address,
    /// Japanese for an address in Japan, and so on.
    public var billingAddress: Address?
    /// The buyer's email address.
    public var buyerEmailAddress: String?
    /// Stores details about a cash payment. Contains only non-confidential information. For more information, see
    /// [Take Cash Payments](https://developer.squareup.com/docs/payments-api/take-payments/cash-payments).
    public var cashDetails: CashPaymentDetails?
    /// The [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) ID of the customer associated with the payment.
    /// 
    /// This is required if the `source_id` refers to a card on file created using the Customers API.
    public var customerID: String?
    /// The duration of time after the payment's creation when Square automatically cancels the
    /// payment. This automatic cancellation applies only to payments that do not reach a terminal state
    /// (COMPLETED, CANCELED, or FAILED) before the `delay_duration` time period.
    /// 
    /// This parameter should be specified as a time duration, in RFC 3339 format, with a minimum value
    /// of 1 minute.
    /// 
    /// Note: This feature is only supported for card payments. This parameter can only be set for a delayed
    /// capture payment (`autocomplete=false`).
    /// 
    /// Default:
    /// 
    /// - Card-present payments: "PT36H" (36 hours) from the creation time.
    /// - Card-not-present payments: "P7D" (7 days) from the creation time.
    public var delayDuration: String?
    /// Stores details about an external payment. Contains only non-confidential information.
    /// For more information, see
    /// [Take External Payments](https://developer.squareup.com/docs/payments-api/take-payments/external-payments).
    public var externalDetails: ExternalPaymentDetails?
    /// A unique string that identifies this `CreatePayment` request. Keys can be any valid string
    /// but must be unique for every `CreatePayment` request.
    /// 
    /// Max: 45 characters
    /// 
    /// Note: The number of allowed characters might be less than the stated maximum, if multi-byte
    /// characters are used.
    /// 
    /// For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
    public var idempotencyKey: String
    /// The location ID to associate with the payment. If not specified, the default location is
    /// used.
    public var locationID: String?
    /// An optional note to be entered by the developer when creating a payment.
    /// 
    /// Limit 500 characters.
    public var note: String?
    /// Associates a previously created order with this payment.
    public var orderID: String?
    /// A user-defined ID to associate with the payment.
    /// 
    /// You can use this field to associate the payment to an entity in an external system
    /// (for example, you might specify an order ID that is generated by a third-party shopping cart).
    /// 
    /// Limit 40 characters.
    public var referenceID: String?
    /// Represents a postal address in a country. The address format is based
    /// on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
    /// see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
    /// This format has dedicated fields for four address components: postal code,
    /// locality (city), administrative district (state, prefecture, or province), and
    /// sublocality (town or village). These components have dedicated fields in the
    /// `Address` object because software sometimes behaves differently based on them.
    /// For example, sales tax software may charge different amounts of sales tax
    /// based on the postal code, and some software is only available in
    /// certain states due to compliance reasons.
    /// 
    /// For the remaining address components, the `Address` type provides the
    /// `address_line_1` and `address_line_2` fields for free-form data entry.
    /// These fields are free-form because the remaining address components have
    /// too many variations around the world and typical software does not parse
    /// these components. These fields enable users to enter anything they want.
    /// 
    /// Note that, in the current implementation, all other `Address` type fields are blank.
    /// These include `address_line_3`, `sublocality_2`, `sublocality_3`,
    /// `administrative_district_level_2`, `administrative_district_level_3`,
    /// `first_name`, `last_name`, and `organization`.
    /// 
    /// When it comes to localization, the seller's language preferences
    /// (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
    /// are ignored for addresses. Even though Square products (such as Square Point of Sale
    /// and the Seller Dashboard) mostly use a seller's language preference in
    /// communication, when it comes to addresses, they will use English for a US address,
    /// Japanese for an address in Japan, and so on.
    public var shippingAddress: Address?
    /// The ID for the source of funds for this payment. This can be a payment token
    /// (card nonce) generated by the Square payment form or a card on file made with the
    /// Customers API. If recording a payment that the seller
    /// received outside of Square, specify either "CASH" or "EXTERNAL".
    /// For more information, see
    /// [Take Payments](https://developer.squareup.com/docs/payments-api/take-payments).
    public var sourceID: String
    /// Optional additional payment information to include on the customer's card statement
    /// as part of the statement description. This can be, for example, an invoice number, ticket number,
    /// or short description that uniquely identifies the purchase.
    /// 
    /// Note that the `statement_description_identifier` might get truncated on the statement description
    /// to fit the required information including the Square identifier (SQ *) and name of the
    /// seller taking the payment.
    public var statementDescriptionIdentifier: String?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var tipMoney: Money?
    /// An identifying token generated by [payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer).
    /// Verification tokens encapsulate customer device information and 3-D Secure
    /// challenge results to indicate that Square has verified the buyer identity.
    /// 
    /// For more information, see [SCA Overview](https://developer.squareup.com/docs/sca-overview).
    public var verificationToken: String?

    public init(isAcceptPartialAuthorization: Bool? = nil, amountMoney: Money, appFeeMoney: Money? = nil, isAutocomplete: Bool? = nil, billingAddress: Address? = nil, buyerEmailAddress: String? = nil, cashDetails: CashPaymentDetails? = nil, customerID: String? = nil, delayDuration: String? = nil, externalDetails: ExternalPaymentDetails? = nil, idempotencyKey: String, locationID: String? = nil, note: String? = nil, orderID: String? = nil, referenceID: String? = nil, shippingAddress: Address? = nil, sourceID: String, statementDescriptionIdentifier: String? = nil, tipMoney: Money? = nil, verificationToken: String? = nil) {
        self.isAcceptPartialAuthorization = isAcceptPartialAuthorization
        self.amountMoney = amountMoney
        self.appFeeMoney = appFeeMoney
        self.isAutocomplete = isAutocomplete
        self.billingAddress = billingAddress
        self.buyerEmailAddress = buyerEmailAddress
        self.cashDetails = cashDetails
        self.customerID = customerID
        self.delayDuration = delayDuration
        self.externalDetails = externalDetails
        self.idempotencyKey = idempotencyKey
        self.locationID = locationID
        self.note = note
        self.orderID = orderID
        self.referenceID = referenceID
        self.shippingAddress = shippingAddress
        self.sourceID = sourceID
        self.statementDescriptionIdentifier = statementDescriptionIdentifier
        self.tipMoney = tipMoney
        self.verificationToken = verificationToken
    }

    private enum CodingKeys: String, CodingKey {
        case isAcceptPartialAuthorization = "accept_partial_authorization"
        case amountMoney = "amount_money"
        case appFeeMoney = "app_fee_money"
        case isAutocomplete = "autocomplete"
        case billingAddress = "billing_address"
        case buyerEmailAddress = "buyer_email_address"
        case cashDetails = "cash_details"
        case customerID = "customer_id"
        case delayDuration = "delay_duration"
        case externalDetails = "external_details"
        case idempotencyKey = "idempotency_key"
        case locationID = "location_id"
        case note
        case orderID = "order_id"
        case referenceID = "reference_id"
        case shippingAddress = "shipping_address"
        case sourceID = "source_id"
        case statementDescriptionIdentifier = "statement_description_identifier"
        case tipMoney = "tip_money"
        case verificationToken = "verification_token"
    }
}

/// Defines the response returned by [CreatePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/create-payment).
/// 
/// If there are errors processing the request, the `payment` field might not be
/// present, or it might be present with a status of `FAILED`.
///
/// Example:
///
/// {
///   "payment" : {
///     "amount_money" : {
///       "amount" : 200,
///       "currency" : "USD"
///     },
///     "app_fee_money" : {
///       "amount" : 10,
///       "currency" : "USD"
///     },
///     "approved_money" : {
///       "amount" : 200,
///       "currency" : "USD"
///     },
///     "card_details" : {
///       "auth_result_code" : "nsAyY2",
///       "avs_status" : "AVS_ACCEPTED",
///       "card" : {
///         "bin" : "411111",
///         "card_brand" : "VISA",
///         "card_type" : "DEBIT",
///         "exp_month" : 7,
///         "exp_year" : 2026,
///         "fingerprint" : "sq-1-TpmjbNBMFdibiIjpQI5LiRgNUBC7u1689i0TgHjnlyHEWYB7tnn-K4QbW4ttvtaqXw",
///         "last_4" : "1111",
///         "prepaid_type" : "PREPAID"
///       },
///       "card_payment_timeline" : {
///         "authorized_at" : "2019-07-10T13:23:49.234Z",
///         "captured_at" : "2019-07-10T13:23:49.446Z"
///       },
///       "cvv_status" : "CVV_ACCEPTED",
///       "entry_method" : "ON_FILE",
///       "statement_description" : "SQ *MY MERCHANT",
///       "status" : "CAPTURED"
///     },
///     "created_at" : "2019-07-10T13:23:49.154Z",
///     "customer_id" : "RDX9Z4XTIZR7MRZJUXNY9HUK6I",
///     "id" : "GQTFp1ZlXdpoW4o6eGiZhbjosiDFf",
///     "location_id" : "XTI0H92143A39",
///     "note" : "Brief description",
///     "order_id" : "m2Hr8Hk8A3CTyQQ1k4ynExg92tO3",
///     "receipt_number" : "GQTF",
///     "receipt_url" : "https:\/\/squareup.com\/receipt\/preview\/GQTFp1ZlXdpoW4o6eGiZhbjosiDFf",
///     "reference_id" : "123456",
///     "source_type" : "CARD",
///     "status" : "COMPLETED",
///     "total_money" : {
///       "amount" : 200,
///       "currency" : "USD"
///     },
///     "updated_at" : "2019-07-10T13:23:49.446Z",
///     "version_token" : "H8Vnk5Z11SKcueuRti79jGpszSEsSVdhKRrSKCOzILG6o"
///   }
/// }
public struct CreatePaymentResponse: Codable {
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// Represents a payment processed by the Square API.
    public var payment: Payment?

    public init(errors: [Error]? = nil, payment: Payment? = nil) {
        self.errors = errors
        self.payment = payment
    }
}

/// Defines the body parameters that can be included in
/// a request to the [CreateRefund](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/create-refund) endpoint.
/// 
/// Deprecated - recommend using [RefundPayment](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/refund-payment)
///
/// Example:
///
/// {
///   "request_body" : {
///     "amount_money" : {
///       "amount" : 100,
///       "currency" : "USD"
///     },
///     "idempotency_key" : "86ae1696-b1e3-4328-af6d-f1e04d947ad2",
///     "reason" : "a reason",
///     "tender_id" : "MtZRYYdDrYNQbOvV7nbuBvMF"
///   }
/// }
public struct CreateRefundRequest: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money
    /// A value you specify that uniquely identifies this
    /// refund among refunds you've created for the tender.
    /// 
    /// If you're unsure whether a particular refund succeeded,
    /// you can reattempt it with the same idempotency key without
    /// worrying about duplicating the refund.
    /// 
    /// See [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency) for more information.
    public var idempotencyKey: String
    /// A description of the reason for the refund.
    /// 
    /// Default value: `Refund via API`
    public var reason: String?
    /// The ID of the tender to refund.
    /// 
    /// A [`Transaction`](https://developer.squareup.com/reference/square_2021-08-18/objects/Transaction) has one or more `tenders` (i.e., methods
    /// of payment) associated with it, and you refund each tender separately with
    /// the Connect API.
    public var tenderID: String

    public init(amountMoney: Money, idempotencyKey: String, reason: String? = nil, tenderID: String) {
        self.amountMoney = amountMoney
        self.idempotencyKey = idempotencyKey
        self.reason = reason
        self.tenderID = tenderID
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
        case idempotencyKey = "idempotency_key"
        case reason
        case tenderID = "tender_id"
    }
}

/// Defines the fields that are included in the response body of
/// a request to the [CreateRefund](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/create-refund) endpoint.
/// 
/// One of `errors` or `refund` is present in a given response (never both).
///
/// Example:
///
/// {
///   "refund" : {
///     "additional_recipients" : [
///       {
///         "amount_money" : {
///           "amount" : 10,
///           "currency" : "USD"
///         },
///         "description" : "Application fees",
///         "location_id" : "057P5VYJ4A5X1",
///         "receivable_id" : "ISu5xwxJ5v0CMJTQq7RvqyMF"
///       }
///     ],
///     "amount_money" : {
///       "amount" : 100,
///       "currency" : "USD"
///     },
///     "created_at" : "2016-02-12T00:28:18Z",
///     "id" : "b27436d1-7f8e-5610-45c6-417ef71434b4-SW",
///     "location_id" : "18YC4JDH91E1H",
///     "reason" : "some reason",
///     "status" : "PENDING",
///     "tender_id" : "MtZRYYdDrYNQbOvV7nbuBvMF",
///     "transaction_id" : "KnL67ZIwXCPtzOrqj0HrkxMF"
///   }
/// }
public struct CreateRefundResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Represents a refund processed for a Square transaction.
    public var refund: Refund?

    public init(errors: [Error]? = nil, refund: Refund? = nil) {
        self.errors = errors
        self.refund = refund
    }
}

/// Represents a request to create a `Shift`.
///
/// Example:
///
/// {
///   "request_body" : {
///     "idempotency_key" : "HIDSNG5KS478L",
///     "shift" : {
///       "breaks" : [
///         {
///           "break_type_id" : "REGS1EQR1TPZ5",
///           "end_at" : "2019-01-25T06:16:00-05:00",
///           "expected_duration" : "PT5M",
///           "is_paid" : true,
///           "name" : "Tea Break",
///           "start_at" : "2019-01-25T06:11:00-05:00"
///         }
///       ],
///       "end_at" : "2019-01-25T13:11:00-05:00",
///       "location_id" : "PAA1RJZZKXBFG",
///       "start_at" : "2019-01-25T03:11:00-05:00",
///       "team_member_id" : "ormj0jJJZ5OZIzxrZYJI",
///       "wage" : {
///         "hourly_rate" : {
///           "amount" : 1100,
///           "currency" : "USD"
///         },
///         "title" : "Barista"
///       }
///     }
///   }
/// }
public struct CreateShiftRequest: Codable {
    /// A unique string value to ensure the idempotency of the operation.
    public var idempotencyKey: String?
    /// A record of the hourly rate, start, and end times for a single work shift
    /// for an employee. This might include a record of the start and end times for breaks
    /// taken during the shift.
    public var shift: Shift

    public init(idempotencyKey: String? = nil, shift: Shift) {
        self.idempotencyKey = idempotencyKey
        self.shift = shift
    }

    private enum CodingKeys: String, CodingKey {
        case idempotencyKey = "idempotency_key"
        case shift
    }
}

/// The response to a request to create a `Shift`. The response contains
/// the created `Shift` object and might contain a set of `Error` objects if
/// the request resulted in errors.
///
/// Example:
///
/// {
///   "shift" : {
///     "breaks" : [
///       {
///         "break_type_id" : "REGS1EQR1TPZ5",
///         "end_at" : "2019-01-25T06:16:00-05:00",
///         "expected_duration" : "PT5M",
///         "id" : "X7GAQYVVRRG6P",
///         "is_paid" : true,
///         "name" : "Tea Break",
///         "start_at" : "2019-01-25T06:11:00-05:00"
///       }
///     ],
///     "created_at" : "2019-02-28T00:39:02Z",
///     "employee_id" : "ormj0jJJZ5OZIzxrZYJI",
///     "end_at" : "2019-01-25T13:11:00-05:00",
///     "id" : "K0YH4CV5462JB",
///     "location_id" : "PAA1RJZZKXBFG",
///     "start_at" : "2019-01-25T03:11:00-05:00",
///     "status" : "CLOSED",
///     "team_member_id" : "ormj0jJJZ5OZIzxrZYJI",
///     "timezone" : "America\/New_York",
///     "updated_at" : "2019-02-28T00:39:02Z",
///     "version" : 1,
///     "wage" : {
///       "hourly_rate" : {
///         "amount" : 1100,
///         "currency" : "USD"
///       },
///       "title" : "Barista"
///     }
///   }
/// }
public struct CreateShiftResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// A record of the hourly rate, start, and end times for a single work shift
    /// for an employee. This might include a record of the start and end times for breaks
    /// taken during the shift.
    public var shift: Shift?

    public init(errors: [Error]? = nil, shift: Shift? = nil) {
        self.errors = errors
        self.shift = shift
    }
}

/// Defines parameters in a
/// [CreateSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/create-subscription) endpoint request.
///
/// Example:
///
/// {
///   "request_body" : {
///     "card_id" : "ccof:qy5x8hHGYsgLrp4Q4GB",
///     "customer_id" : "CHFGVKYY8RSV93M5KCYTG4PN0G",
///     "idempotency_key" : "8193148c-9586-11e6-99f9-28cfe92138cf",
///     "location_id" : "S8GWD5R9QB376",
///     "plan_id" : "6JHXF3B2CW3YKHDV4XEM674H",
///     "price_override_money" : {
///       "amount" : 100,
///       "currency" : "USD"
///     },
///     "start_date" : "2020-08-01",
///     "tax_percentage" : "5",
///     "timezone" : "America\/Los_Angeles"
///   }
/// }
public struct CreateSubscriptionRequest: Codable {
    /// The date when the subscription should be canceled, in
    /// YYYY-MM-DD format (for example, 2025-02-29). This overrides the plan configuration
    /// if it comes before the date the subscription would otherwise end.
    public var canceledDate: String?
    /// The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) [card](https://developer.squareup.com/reference/square_2021-08-18/objects/Card) to charge.
    /// If not specified, Square sends an invoice via email. For an example to
    /// create a customer and add a card on file, see [Subscriptions Walkthrough](https://developer.squareup.com/docs/subscriptions-api/walkthrough).
    public var cardID: String?
    /// The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) profile.
    public var customerID: String
    /// A unique string that identifies this `CreateSubscription` request.
    /// If you do not provide a unique string (or provide an empty string as the value),
    /// the endpoint treats each request as independent.
    /// 
    /// For more information, see [Idempotency keys](https://developer.squareup.com/docs/working-with-apis/idempotency).
    public var idempotencyKey: String?
    /// The ID of the location the subscription is associated with.
    public var locationID: String
    /// The ID of the subscription plan created using the Catalog API.
    /// For more information, see
    /// [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan) and
    /// [Subscriptions Walkthrough](https://developer.squareup.com/docs/subscriptions-api/walkthrough).
    public var planID: String
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var priceOverrideMoney: Money?
    /// The start date of the subscription, in YYYY-MM-DD format. For example,
    /// 2013-01-15. If the start date is left empty, the subscription begins
    /// immediately.
    public var startDate: String?
    /// The tax to add when billing the subscription.
    /// The percentage is expressed in decimal form, using a `'.'` as the decimal
    /// separator and without a `'%'` sign. For example, a value of 7.5
    /// corresponds to 7.5%.
    public var taxPercentage: String?
    /// The timezone that is used in date calculations for the subscription. If unset, defaults to
    /// the location timezone. If a timezone is not configured for the location, defaults to "America/New_York".
    /// Format: the IANA Timezone Database identifier for the location timezone. For
    /// a list of time zones, see [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
    public var timezone: String?

    public init(canceledDate: String? = nil, cardID: String? = nil, customerID: String, idempotencyKey: String? = nil, locationID: String, planID: String, priceOverrideMoney: Money? = nil, startDate: String? = nil, taxPercentage: String? = nil, timezone: String? = nil) {
        self.canceledDate = canceledDate
        self.cardID = cardID
        self.customerID = customerID
        self.idempotencyKey = idempotencyKey
        self.locationID = locationID
        self.planID = planID
        self.priceOverrideMoney = priceOverrideMoney
        self.startDate = startDate
        self.taxPercentage = taxPercentage
        self.timezone = timezone
    }

    private enum CodingKeys: String, CodingKey {
        case canceledDate = "canceled_date"
        case cardID = "card_id"
        case customerID = "customer_id"
        case idempotencyKey = "idempotency_key"
        case locationID = "location_id"
        case planID = "plan_id"
        case priceOverrideMoney = "price_override_money"
        case startDate = "start_date"
        case taxPercentage = "tax_percentage"
        case timezone
    }
}

/// Defines the fields that are included in the response from the
/// [CreateSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/create-subscription) endpoint.
///
/// Example:
///
/// {
///   "subscription" : {
///     "card_id" : "ccof:qy5x8hHGYsgLrp4Q4GB",
///     "created_at" : "2020-08-03T21:53:10Z",
///     "customer_id" : "CHFGVKYY8RSV93M5KCYTG4PN0G",
///     "id" : "56214fb2-cc85-47a1-93bc-44f3766bb56f",
///     "location_id" : "S8GWD5R9QB376",
///     "plan_id" : "6JHXF3B2CW3YKHDV4XEM674H",
///     "price_override_money" : {
///       "amount" : 100,
///       "currency" : "USD"
///     },
///     "start_date" : "2020-08-01",
///     "status" : "PENDING",
///     "tax_percentage" : "5",
///     "timezone" : "America\/Los_Angeles",
///     "version" : 1594155459464
///   }
/// }
public struct CreateSubscriptionResponse: Codable {
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// Represents a customer subscription to a subscription plan.
    /// For an overview of the `Subscription` type, see
    /// [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
    public var subscription: Subscription?

    public init(errors: [Error]? = nil, subscription: Subscription? = nil) {
        self.errors = errors
        self.subscription = subscription
    }
}

/// Represents a create request for a `TeamMember` object.
///
/// Example:
///
/// {
///   "request_body" : {
///     "idempotency_key" : "idempotency-key-0",
///     "team_member" : {
///       "assigned_locations" : {
///         "assignment_type" : "EXPLICIT_LOCATIONS",
///         "location_ids" : [
///           "YSGH2WBKG94QZ",
///           "GA2Y9HSJ8KRYT"
///         ]
///       },
///       "email_address" : "joe_doe@gmail.com",
///       "family_name" : "Doe",
///       "given_name" : "Joe",
///       "phone_number" : "+14159283333",
///       "reference_id" : "reference_id_1",
///       "status" : "ACTIVE"
///     }
///   }
/// }
public struct CreateTeamMemberRequest: Codable {
    /// A unique string that identifies this `CreateTeamMember` request.
    /// Keys can be any valid string, but must be unique for every request.
    /// For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).
    /// 
    /// The minimum length is 1 and the maximum length is 45.
    public var idempotencyKey: String?
    /// A record representing an individual team member for a business.
    public var teamMember: TeamMember?

    public init(idempotencyKey: String? = nil, teamMember: TeamMember? = nil) {
        self.idempotencyKey = idempotencyKey
        self.teamMember = teamMember
    }

    private enum CodingKeys: String, CodingKey {
        case idempotencyKey = "idempotency_key"
        case teamMember = "team_member"
    }
}

/// Represents a response from a create request containing the created `TeamMember` object or error messages.
///
/// Example:
///
/// {
///   "team_member" : {
///     "assigned_locations" : {
///       "assignment_type" : "EXPLICIT_LOCATIONS",
///       "location_ids" : [
///         "GA2Y9HSJ8KRYT",
///         "YSGH2WBKG94QZ"
///       ]
///     },
///     "email_address" : "joe_doe@gmail.com",
///     "family_name" : "Doe",
///     "given_name" : "Joe",
///     "id" : "1yJlHapkseYnNPETIU1B",
///     "is_owner" : false,
///     "phone_number" : "+14159283333",
///     "reference_id" : "reference_id_1",
///     "status" : "ACTIVE"
///   }
/// }
public struct CreateTeamMemberResponse: Codable {
    /// The errors that occurred during the request.
    public var errors: [Error]?
    /// A record representing an individual team member for a business.
    public var teamMember: TeamMember?

    public init(errors: [Error]? = nil, teamMember: TeamMember? = nil) {
        self.errors = errors
        self.teamMember = teamMember
    }

    private enum CodingKeys: String, CodingKey {
        case errors
        case teamMember = "team_member"
    }
}

/// Example:
///
/// {
///   "request_body" : {
///     "checkout" : {
///       "amount_money" : {
///         "amount" : 2610,
///         "currency" : "USD"
///       },
///       "device_options" : {
///         "device_id" : "dbb5d83a-7838-11ea-bc55-0242ac130003"
///       },
///       "note" : "A brief note",
///       "reference_id" : "id11572"
///     },
///     "idempotency_key" : "28a0c3bc-7839-11ea-bc55-0242ac130003"
///   }
/// }
public struct CreateTerminalCheckoutRequest: Codable {
    public var checkout: TerminalCheckout
    /// A unique string that identifies this `CreateCheckout` request. Keys can be any valid string but
    /// must be unique for every `CreateCheckout` request.
    /// 
    /// See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
    public var idempotencyKey: String

    public init(checkout: TerminalCheckout, idempotencyKey: String) {
        self.checkout = checkout
        self.idempotencyKey = idempotencyKey
    }

    private enum CodingKeys: String, CodingKey {
        case checkout
        case idempotencyKey = "idempotency_key"
    }
}

/// Example:
///
/// {
///   "checkout" : {
///     "amount_money" : {
///       "amount" : 2610,
///       "currency" : "USD"
///     },
///     "app_id" : "APP_ID",
///     "created_at" : "2020-04-06T16:39:32.545Z",
///     "deadline_duration" : "PT10M",
///     "device_options" : {
///       "device_id" : "dbb5d83a-7838-11ea-bc55-0242ac130003",
///       "skip_receipt_screen" : false,
///       "tip_settings" : {
///         "allow_tipping" : false
///       }
///     },
///     "id" : "08YceKh7B3ZqO",
///     "note" : "A brief note",
///     "payment_type" : "CARD_PRESENT",
///     "reference_id" : "id11572",
///     "status" : "PENDING",
///     "updated_at" : "2020-04-06T16:39:32.545Z"
///   }
/// }
public struct CreateTerminalCheckoutResponse: Codable {
    public var checkout: TerminalCheckout?
    /// Information about errors encountered during the request.
    public var errors: [Error]?

    public init(checkout: TerminalCheckout? = nil, errors: [Error]? = nil) {
        self.checkout = checkout
        self.errors = errors
    }
}

/// Example:
///
/// {
///   "request_body" : {
///     "idempotency_key" : "402a640b-b26f-401f-b406-46f839590c04",
///     "refund" : {
///       "amount_money" : {
///         "amount" : 111,
///         "currency" : "CAD"
///       },
///       "device_id" : "f72dfb8e-4d65-4e56-aade-ec3fb8d33291",
///       "payment_id" : "5O5OvgkcNUhl7JBuINflcjKqUzXZY",
///       "reason" : "Returning items"
///     }
///   }
/// }
public struct CreateTerminalRefundRequest: Codable {
    /// A unique string that identifies this `CreateRefund` request. Keys can be any valid string but
    /// must be unique for every `CreateRefund` request.
    /// 
    /// See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
    public var idempotencyKey: String
    public var refund: TerminalRefund?

    public init(idempotencyKey: String, refund: TerminalRefund? = nil) {
        self.idempotencyKey = idempotencyKey
        self.refund = refund
    }

    private enum CodingKeys: String, CodingKey {
        case idempotencyKey = "idempotency_key"
        case refund
    }
}

/// Example:
///
/// {
///   "refund" : {
///     "amount_money" : {
///       "amount" : 111,
///       "currency" : "CAD"
///     },
///     "app_id" : "sandbox-sq0idb-c2OuYt13YaCAeJq_2cd8OQ",
///     "card" : {
///       "bin" : "411111",
///       "card_brand" : "INTERAC",
///       "card_type" : "CREDIT",
///       "exp_month" : 1,
///       "exp_year" : 2022,
///       "fingerprint" : "sq-1-B1fP9MNNmZgVVaPKRND6oDKYbz25S2cTvg9Mzwg3RMTK1zT1PiGRT-AE3nTA8vSmmw",
///       "last_4" : "1111"
///     },
///     "created_at" : "2020-09-29T15:21:46.771Z",
///     "deadline_duration" : "PT5M",
///     "device_id" : "f72dfb8e-4d65-4e56-aade-ec3fb8d33291",
///     "id" : "009DP5HD-5O5OvgkcNUhl7JBuINflcjKqUzXZY",
///     "location_id" : "76C9W6K8CNNQ5",
///     "order_id" : "kcuKDKreRaI4gF4TjmEgZjHk8Z7YY",
///     "payment_id" : "5O5OvgkcNUhl7JBuINflcjKqUzXZY",
///     "reason" : "Returning items",
///     "status" : "PENDING",
///     "updated_at" : "2020-09-29T15:21:46.771Z"
///   }
/// }
public struct CreateTerminalRefundResponse: Codable {
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    public var refund: TerminalRefund?

    public init(errors: [Error]? = nil, refund: TerminalRefund? = nil) {
        self.errors = errors
        self.refund = refund
    }
}

/// Indicates the associated currency for an amount of money. Values correspond
/// to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).
public enum Currency: String, Codable, CaseIterable {
    case unknownCurrency = "UNKNOWN_CURRENCY"
    case aed = "AED"
    case afn = "AFN"
    case all = "ALL"
    case amd = "AMD"
    case ang = "ANG"
    case aoa = "AOA"
    case ars = "ARS"
    case aud = "AUD"
    case awg = "AWG"
    case azn = "AZN"
    case bam = "BAM"
    case bbd = "BBD"
    case bdt = "BDT"
    case bgn = "BGN"
    case bhd = "BHD"
    case bif = "BIF"
    case bmd = "BMD"
    case bnd = "BND"
    case bob = "BOB"
    case bov = "BOV"
    case brl = "BRL"
    case bsd = "BSD"
    case btn = "BTN"
    case bwp = "BWP"
    case byr = "BYR"
    case bzd = "BZD"
    case cad = "CAD"
    case cdf = "CDF"
    case che = "CHE"
    case chf = "CHF"
    case chw = "CHW"
    case clf = "CLF"
    case clp = "CLP"
    case cny = "CNY"
    case cop = "COP"
    case cou = "COU"
    case crc = "CRC"
    case cuc = "CUC"
    case cup = "CUP"
    case cve = "CVE"
    case czk = "CZK"
    case djf = "DJF"
    case dkk = "DKK"
    case dop = "DOP"
    case dzd = "DZD"
    case egp = "EGP"
    case ern = "ERN"
    case etb = "ETB"
    case eur = "EUR"
    case fjd = "FJD"
    case fkp = "FKP"
    case gbp = "GBP"
    case gel = "GEL"
    case ghs = "GHS"
    case gip = "GIP"
    case gmd = "GMD"
    case gnf = "GNF"
    case gtq = "GTQ"
    case gyd = "GYD"
    case hkd = "HKD"
    case hnl = "HNL"
    case hrk = "HRK"
    case htg = "HTG"
    case huf = "HUF"
    case idr = "IDR"
    case ils = "ILS"
    case inr = "INR"
    case iqd = "IQD"
    case irr = "IRR"
    case isk = "ISK"
    case jmd = "JMD"
    case jod = "JOD"
    case jpy = "JPY"
    case kes = "KES"
    case kgs = "KGS"
    case khr = "KHR"
    case kmf = "KMF"
    case kpw = "KPW"
    case krw = "KRW"
    case kwd = "KWD"
    case kyd = "KYD"
    case kzt = "KZT"
    case lak = "LAK"
    case lbp = "LBP"
    case lkr = "LKR"
    case lrd = "LRD"
    case lsl = "LSL"
    case ltl = "LTL"
    case lvl = "LVL"
    case lyd = "LYD"
    case mad = "MAD"
    case mdl = "MDL"
    case mga = "MGA"
    case mkd = "MKD"
    case mmk = "MMK"
    case mnt = "MNT"
    case mop = "MOP"
    case mro = "MRO"
    case mur = "MUR"
    case mvr = "MVR"
    case mwk = "MWK"
    case mxn = "MXN"
    case mxv = "MXV"
    case myr = "MYR"
    case mzn = "MZN"
    case nad = "NAD"
    case ngn = "NGN"
    case nio = "NIO"
    case nok = "NOK"
    case npr = "NPR"
    case nzd = "NZD"
    case omr = "OMR"
    case pab = "PAB"
    case pen = "PEN"
    case pgk = "PGK"
    case php = "PHP"
    case pkr = "PKR"
    case pln = "PLN"
    case pyg = "PYG"
    case qar = "QAR"
    case ron = "RON"
    case rsd = "RSD"
    case rub = "RUB"
    case rwf = "RWF"
    case sar = "SAR"
    case sbd = "SBD"
    case scr = "SCR"
    case sdg = "SDG"
    case sek = "SEK"
    case sgd = "SGD"
    case shp = "SHP"
    case sll = "SLL"
    case sos = "SOS"
    case srd = "SRD"
    case ssp = "SSP"
    case std = "STD"
    case svc = "SVC"
    case syp = "SYP"
    case szl = "SZL"
    case thb = "THB"
    case tjs = "TJS"
    case tmt = "TMT"
    case tnd = "TND"
    case top = "TOP"
    case `try` = "TRY"
    case ttd = "TTD"
    case twd = "TWD"
    case tzs = "TZS"
    case uah = "UAH"
    case ugx = "UGX"
    case usd = "USD"
    case usn = "USN"
    case uss = "USS"
    case uyi = "UYI"
    case uyu = "UYU"
    case uzs = "UZS"
    case vef = "VEF"
    case vnd = "VND"
    case vuv = "VUV"
    case wst = "WST"
    case xaf = "XAF"
    case xag = "XAG"
    case xau = "XAU"
    case xba = "XBA"
    case xbb = "XBB"
    case xbc = "XBC"
    case xbd = "XBD"
    case xcd = "XCD"
    case xdr = "XDR"
    case xof = "XOF"
    case xpd = "XPD"
    case xpf = "XPF"
    case xpt = "XPT"
    case xts = "XTS"
    case xxx = "XXX"
    case yer = "YER"
    case zar = "ZAR"
    case zmk = "ZMK"
    case zmw = "ZMW"
    case btc = "BTC"
}

/// Supported custom attribute query expressions for calling the
/// [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items)
/// endpoint to search for items or item variations.
public struct CustomAttributeFilter: Codable {
    /// A query expression to filter items or item variations by matching their custom attributes'
    /// `boolean_value` property values
    /// against the specified Boolean expression.
    public var isBoolFilter: Bool?
    /// A query expression to filter items or item variations by matching their custom attributes'
    /// `custom_attribute_definition_id`
    /// property value against the the specified id.
    public var customAttributeDefinitionID: String?
    /// A query expression to filter items or item variations by matching their custom attributes'
    /// `key` property value against
    /// the specified key.
    public var key: String?
    /// The range of a number value between the specified lower and upper bounds.
    public var numberFilter: Range?
    /// A query expression to filter items or item variations by matching  their custom attributes'
    /// `selection_uid_values`
    /// values against the specified selection uids.
    public var selectionUidsFilter: [String]?
    /// A query expression to filter items or item variations by matching their custom attributes'
    /// `string_value`  property value
    /// against the specified text.
    public var stringFilter: String?

    public init(isBoolFilter: Bool? = nil, customAttributeDefinitionID: String? = nil, key: String? = nil, numberFilter: Range? = nil, selectionUidsFilter: [String]? = nil, stringFilter: String? = nil) {
        self.isBoolFilter = isBoolFilter
        self.customAttributeDefinitionID = customAttributeDefinitionID
        self.key = key
        self.numberFilter = numberFilter
        self.selectionUidsFilter = selectionUidsFilter
        self.stringFilter = stringFilter
    }

    private enum CodingKeys: String, CodingKey {
        case isBoolFilter = "bool_filter"
        case customAttributeDefinitionID = "custom_attribute_definition_id"
        case key
        case numberFilter = "number_filter"
        case selectionUidsFilter = "selection_uids_filter"
        case stringFilter = "string_filter"
    }
}

/// Represents a Square customer profile in the Customer Directory of a Square seller.
public struct Customer: Codable {
    /// Represents a postal address in a country. The address format is based
    /// on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
    /// see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
    /// This format has dedicated fields for four address components: postal code,
    /// locality (city), administrative district (state, prefecture, or province), and
    /// sublocality (town or village). These components have dedicated fields in the
    /// `Address` object because software sometimes behaves differently based on them.
    /// For example, sales tax software may charge different amounts of sales tax
    /// based on the postal code, and some software is only available in
    /// certain states due to compliance reasons.
    /// 
    /// For the remaining address components, the `Address` type provides the
    /// `address_line_1` and `address_line_2` fields for free-form data entry.
    /// These fields are free-form because the remaining address components have
    /// too many variations around the world and typical software does not parse
    /// these components. These fields enable users to enter anything they want.
    /// 
    /// Note that, in the current implementation, all other `Address` type fields are blank.
    /// These include `address_line_3`, `sublocality_2`, `sublocality_3`,
    /// `administrative_district_level_2`, `administrative_district_level_3`,
    /// `first_name`, `last_name`, and `organization`.
    /// 
    /// When it comes to localization, the seller's language preferences
    /// (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
    /// are ignored for addresses. Even though Square products (such as Square Point of Sale
    /// and the Seller Dashboard) mostly use a seller's language preference in
    /// communication, when it comes to addresses, they will use English for a US address,
    /// Japanese for an address in Japan, and so on.
    public var address: Address?
    /// The birthday associated with the customer profile, in RFC 3339 format. The year is optional. The timezone and time are not allowed.
    /// For example, `0000-09-21T00:00:00-00:00` represents a birthday on September 21 and `1998-09-21T00:00:00-00:00` represents a birthday on September 21, 1998.
    public var birthday: String?
    /// Payment details of the credit, debit, and gift cards stored on file for the customer profile.
    /// 
    /// DEPRECATED at version 2021-06-16. Replaced by calling [ListCards](https://developer.squareup.com/reference/square_2021-08-18/cards-api/list-cards) (for credit and debit cards on file)
    /// or [ListGiftCards](https://developer.squareup.com/reference/square_2021-08-18/gift-cards-api/list-gift-cards) (for gift cards on file) and including the `customer_id` query parameter.
    /// For more information, see [Migrate to the Cards API and Gift Cards API](https://developer.squareup.com/docs/customers-api/use-the-api/integrate-with-other-services#migrate-customer-cards).
    public var cards: [Card]?
    /// A business name associated with the customer profile.
    public var companyName: String?
    /// The timestamp when the customer profile was created, in RFC 3339 format.
    public var createdAt: String?
    /// A creation source represents the method used to create the
    /// customer profile.
    public var creationSource: String?
    /// The email address associated with the customer profile.
    public var emailAddress: String?
    /// The family (i.e., last) name associated with the customer profile.
    public var familyName: String?
    /// The given (i.e., first) name associated with the customer profile.
    public var givenName: String?
    /// The IDs of customer groups the customer belongs to.
    public var groupIDs: [String]?
    /// A unique Square-assigned ID for the customer profile.
    public var id: String?
    /// A nickname for the customer profile.
    public var nickname: String?
    /// A custom note associated with the customer profile.
    public var note: String?
    /// The 11-digit phone number associated with the customer profile.
    public var phoneNumber: String?
    /// Represents communication preferences for the customer profile.
    public var preferences: CustomerPreferences?
    /// An optional second ID used to associate the customer profile with an
    /// entity in another system.
    public var referenceID: String?
    /// The IDs of segments the customer belongs to.
    public var segmentIDs: [String]?
    /// The timestamp when the customer profile was last updated, in RFC 3339 format.
    public var updatedAt: String?
    /// The Square-assigned version number of the customer profile. The version number is incremented each time an update is committed to the customer profile, except for changes to customer segment membership and cards on file.
    public var version: Int?

    public init(address: Address? = nil, birthday: String? = nil, cards: [Card]? = nil, companyName: String? = nil, createdAt: String? = nil, creationSource: String? = nil, emailAddress: String? = nil, familyName: String? = nil, givenName: String? = nil, groupIDs: [String]? = nil, id: String? = nil, nickname: String? = nil, note: String? = nil, phoneNumber: String? = nil, preferences: CustomerPreferences? = nil, referenceID: String? = nil, segmentIDs: [String]? = nil, updatedAt: String? = nil, version: Int? = nil) {
        self.address = address
        self.birthday = birthday
        self.cards = cards
        self.companyName = companyName
        self.createdAt = createdAt
        self.creationSource = creationSource
        self.emailAddress = emailAddress
        self.familyName = familyName
        self.givenName = givenName
        self.groupIDs = groupIDs
        self.id = id
        self.nickname = nickname
        self.note = note
        self.phoneNumber = phoneNumber
        self.preferences = preferences
        self.referenceID = referenceID
        self.segmentIDs = segmentIDs
        self.updatedAt = updatedAt
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case address
        case birthday
        case cards
        case companyName = "company_name"
        case createdAt = "created_at"
        case creationSource = "creation_source"
        case emailAddress = "email_address"
        case familyName = "family_name"
        case givenName = "given_name"
        case groupIDs = "group_ids"
        case id
        case nickname
        case note
        case phoneNumber = "phone_number"
        case preferences
        case referenceID = "reference_id"
        case segmentIDs = "segment_ids"
        case updatedAt = "updated_at"
        case version
    }
}

/// Indicates the method used to create the customer profile.
public enum CustomerCreationSource: String, Codable, CaseIterable {
    case other = "OTHER"
    case appointments = "APPOINTMENTS"
    case coupon = "COUPON"
    case deletionRecovery = "DELETION_RECOVERY"
    case directory = "DIRECTORY"
    case egifting = "EGIFTING"
    case emailCollection = "EMAIL_COLLECTION"
    case feedback = "FEEDBACK"
    case `import` = "IMPORT"
    case invoices = "INVOICES"
    case loyalty = "LOYALTY"
    case marketing = "MARKETING"
    case merge = "MERGE"
    case onlineStore = "ONLINE_STORE"
    case instantProfile = "INSTANT_PROFILE"
    case terminal = "TERMINAL"
    case thirdParty = "THIRD_PARTY"
    case thirdPartyImport = "THIRD_PARTY_IMPORT"
    case unmergeRecovery = "UNMERGE_RECOVERY"
}

/// The creation source filter.
/// 
/// If one or more creation sources are set, customer profiles are included in,
/// or excluded from, the result if they match at least one of the filter criteria.
public struct CustomerCreationSourceFilter: Codable {
    /// Indicates whether a customer profile matching the filter criteria
    /// should be included in the result or excluded from the result.
    /// 
    /// Default: `INCLUDE`.
    public var rule: String?
    /// The list of creation sources used as filtering criteria.
    public var values: [String]?

    public init(rule: String? = nil, values: [String]? = nil) {
        self.rule = rule
        self.values = values
    }
}

/// Represents a set of `CustomerQuery` filters used to limit the set of
/// customers returned by the [SearchCustomers](https://developer.squareup.com/reference/square_2021-08-18/customers-api/search-customers) endpoint.
public struct CustomerFilter: Codable {
    /// Represents a generic time range. The start and end values are
    /// represented in RFC 3339 format. Time ranges are customized to be
    /// inclusive or exclusive based on the needs of a particular endpoint.
    /// Refer to the relevant endpoint-specific documentation to determine
    /// how time ranges are handled.
    public var createdAt: TimeRange?
    /// The creation source filter.
    /// 
    /// If one or more creation sources are set, customer profiles are included in,
    /// or excluded from, the result if they match at least one of the filter criteria.
    public var creationSource: CustomerCreationSourceFilter?
    /// A filter to select customers based on exact or fuzzy matching of
    /// customer attributes against a specified query. Depending on the customer attributes,
    /// the filter can be case-sensitive. This filter can be exact or fuzzy, but it cannot be both.
    public var emailAddress: CustomerTextFilter?
    /// A filter to select resources based on an exact field value. For any given
    /// value, the value can only be in one property. Depending on the field, either
    /// all properties can be set or only a subset will be available.
    /// 
    /// Refer to the documentation of the field.
    public var groupIDs: FilterValue?
    /// A filter to select customers based on exact or fuzzy matching of
    /// customer attributes against a specified query. Depending on the customer attributes,
    /// the filter can be case-sensitive. This filter can be exact or fuzzy, but it cannot be both.
    public var phoneNumber: CustomerTextFilter?
    /// A filter to select customers based on exact or fuzzy matching of
    /// customer attributes against a specified query. Depending on the customer attributes,
    /// the filter can be case-sensitive. This filter can be exact or fuzzy, but it cannot be both.
    public var referenceID: CustomerTextFilter?
    /// Represents a generic time range. The start and end values are
    /// represented in RFC 3339 format. Time ranges are customized to be
    /// inclusive or exclusive based on the needs of a particular endpoint.
    /// Refer to the relevant endpoint-specific documentation to determine
    /// how time ranges are handled.
    public var updatedAt: TimeRange?

    public init(createdAt: TimeRange? = nil, creationSource: CustomerCreationSourceFilter? = nil, emailAddress: CustomerTextFilter? = nil, groupIDs: FilterValue? = nil, phoneNumber: CustomerTextFilter? = nil, referenceID: CustomerTextFilter? = nil, updatedAt: TimeRange? = nil) {
        self.createdAt = createdAt
        self.creationSource = creationSource
        self.emailAddress = emailAddress
        self.groupIDs = groupIDs
        self.phoneNumber = phoneNumber
        self.referenceID = referenceID
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case createdAt = "created_at"
        case creationSource = "creation_source"
        case emailAddress = "email_address"
        case groupIDs = "group_ids"
        case phoneNumber = "phone_number"
        case referenceID = "reference_id"
        case updatedAt = "updated_at"
    }
}

/// Represents a group of customer profiles.
/// 
/// Customer groups can be created, be modified, and have their membership defined using
/// the Customers API or within the Customer Directory in the Square Seller Dashboard or Point of Sale.
public struct CustomerGroup: Codable {
    /// The timestamp when the customer group was created, in RFC 3339 format.
    public var createdAt: String?
    /// A unique Square-generated ID for the customer group.
    public var id: String?
    /// The name of the customer group.
    public var name: String
    /// The timestamp when the customer group was last updated, in RFC 3339 format.
    public var updatedAt: String?

    public init(createdAt: String? = nil, id: String? = nil, name: String, updatedAt: String? = nil) {
        self.createdAt = createdAt
        self.id = id
        self.name = name
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case createdAt = "created_at"
        case id
        case name
        case updatedAt = "updated_at"
    }
}

/// Indicates whether customers should be included in, or excluded from,
/// the result set when they match the filtering criteria.
public enum CustomerInclusionExclusion: String, Codable, CaseIterable {
    case include = "INCLUDE"
    case exclude = "EXCLUDE"
}

/// Represents communication preferences for the customer profile.
public struct CustomerPreferences: Codable {
    /// Indicates whether the customer has unsubscribed from marketing campaign emails. A value of `true` means that the customer chose to opt out of email marketing from the current Square seller or from all Square sellers. This value is read-only from the Customers API.
    public var isEmailUnsubscribed: Bool?

    public init(isEmailUnsubscribed: Bool? = nil) {
        self.isEmailUnsubscribed = isEmailUnsubscribed
    }

    private enum CodingKeys: String, CodingKey {
        case isEmailUnsubscribed = "email_unsubscribed"
    }
}

/// Represents a query (including filtering criteria, sorting criteria, or both) used to search
/// for customer profiles.
public struct CustomerQuery: Codable {
    /// Represents a set of `CustomerQuery` filters used to limit the set of
    /// customers returned by the [SearchCustomers](https://developer.squareup.com/reference/square_2021-08-18/customers-api/search-customers) endpoint.
    public var filter: CustomerFilter?
    /// Specifies how searched customers profiles are sorted, including the sort key and sort order.
    public var sort: CustomerSort?

    public init(filter: CustomerFilter? = nil, sort: CustomerSort? = nil) {
        self.filter = filter
        self.sort = sort
    }
}

/// Represents a group of customer profiles that match one or more predefined filter criteria.
/// 
/// Segments (also known as Smart Groups) are defined and created within the Customer Directory in the
/// Square Seller Dashboard or Point of Sale.
public struct CustomerSegment: Codable {
    /// The timestamp when the segment was created, in RFC 3339 format.
    public var createdAt: String?
    /// A unique Square-generated ID for the segment.
    public var id: String?
    /// The name of the segment.
    public var name: String
    /// The timestamp when the segment was last updated, in RFC 3339 format.
    public var updatedAt: String?

    public init(createdAt: String? = nil, id: String? = nil, name: String, updatedAt: String? = nil) {
        self.createdAt = createdAt
        self.id = id
        self.name = name
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case createdAt = "created_at"
        case id
        case name
        case updatedAt = "updated_at"
    }
}

/// Specifies how searched customers profiles are sorted, including the sort key and sort order.
public struct CustomerSort: Codable {
    /// Use one or more customer attributes as the sort key to sort searched customer profiles.
    /// For example, use the creation date (`created_at`) of customers or default attributes as the sort key.
    /// 
    /// 
    /// Default: `DEFAULT`.
    public var field: String?
    /// Indicates the order in which results should be sorted based on the
    /// sort field value. Strings use standard alphabetic comparison
    /// to determine order. Strings representing numbers are sorted as strings.
    /// 
    /// Default: `ASC`.
    public var order: String?

    public init(field: String? = nil, order: String? = nil) {
        self.field = field
        self.order = order
    }
}

/// Specifies customer attributes as the sort key to customer profiles returned from a search.
public enum CustomerSortField: String, Codable, CaseIterable {
    case `default` = "DEFAULT"
    case createdAt = "CREATED_AT"
}

/// A filter to select customers based on exact or fuzzy matching of
/// customer attributes against a specified query. Depending on the customer attributes,
/// the filter can be case-sensitive. This filter can be exact or fuzzy, but it cannot be both.
public struct CustomerTextFilter: Codable {
    /// Use the exact filter to select customers whose attributes match exactly the specified query.
    public var exact: String?
    /// Use the fuzzy filter to select customers whose attributes match the specified query
    /// in a fuzzy manner. When the fuzzy option is used, search queries are tokenized, and then
    /// each query token must be matched somewhere in the searched attribute. For single token queries,
    /// this is effectively the same behavior as a partial match operation.
    public var fuzzy: String?

    public init(exact: String? = nil, fuzzy: String? = nil) {
        self.exact = exact
        self.fuzzy = fuzzy
    }
}

/// A range defined by two dates. Used for filtering a query for Connect v2
/// objects that have date properties.
public struct DateRange: Codable {
    /// A string in `YYYY-MM-DD` format, such as `2017-10-31`, per the ISO 8601
    /// extended format for calendar dates.
    /// The end of a date range (inclusive).
    public var endDate: String?
    /// A string in `YYYY-MM-DD` format, such as `2017-10-31`, per the ISO 8601
    /// extended format for calendar dates.
    /// The beginning of a date range (inclusive).
    public var startDate: String?

    public init(endDate: String? = nil, startDate: String? = nil) {
        self.endDate = endDate
        self.startDate = startDate
    }

    private enum CodingKeys: String, CodingKey {
        case endDate = "end_date"
        case startDate = "start_date"
    }
}

/// Indicates the specific day  of the week.
public enum DayOfWeek: String, Codable, CaseIterable {
    case sun = "SUN"
    case mon = "MON"
    case tue = "TUE"
    case wed = "WED"
    case thu = "THU"
    case fri = "FRI"
    case sat = "SAT"
}

/// A request to delete a `BreakType`.
///
/// Example:
///
/// {
/// 
/// }
public struct DeleteBreakTypeRequest: Codable {
    public init() {}
}

/// The response to a request to delete a `BreakType`. The response might contain a set
/// of `Error` objects if the request resulted in errors.
///
/// Example:
///
/// {
/// 
/// }
public struct DeleteBreakTypeResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(errors: [Error]? = nil) {
        self.errors = errors
    }
}

/// Example:
///
/// {
/// 
/// }
public struct DeleteCatalogObjectRequest: Codable {
    public init() {}
}

/// Example:
///
/// {
///   "deleted_at" : "2016-11-16T22:25:24.878Z",
///   "deleted_object_ids" : [
///     "7SB3ZQYJ5GDMVFL7JK46JCHT",
///     "KQLFFHA6K6J3YQAQAWDQAL57"
///   ]
/// }
public struct DeleteCatalogObjectResponse: Codable {
    /// The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
    /// of this deletion in RFC 3339 format, e.g., `2016-09-04T23:59:33.123Z`.
    public var deletedAt: String?
    /// The IDs of all catalog objects deleted by this request.
    /// Multiple IDs may be returned when associated objects are also deleted, for example
    /// a catalog item variation will be deleted (and its ID included in this field)
    /// when its parent catalog item is deleted.
    public var deletedObjectIDs: [String]?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(deletedAt: String? = nil, deletedObjectIDs: [String]? = nil, errors: [Error]? = nil) {
        self.deletedAt = deletedAt
        self.deletedObjectIDs = deletedObjectIDs
        self.errors = errors
    }

    private enum CodingKeys: String, CodingKey {
        case deletedAt = "deleted_at"
        case deletedObjectIDs = "deleted_object_ids"
        case errors
    }
}

/// Defines the fields that are included in requests to the
/// `DeleteCustomerCard` endpoint.
///
/// Example:
///
/// {
/// 
/// }
public struct DeleteCustomerCardRequest: Codable {
    public init() {}
}

/// Defines the fields that are included in the response body of
/// a request to the `DeleteCustomerCard` endpoint.
///
/// Example:
///
/// {
/// 
/// }
public struct DeleteCustomerCardResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(errors: [Error]? = nil) {
        self.errors = errors
    }
}

/// Defines the fields that can be included in a request to the
/// [DeleteCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/delete-customer-group) endpoint.
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct DeleteCustomerGroupRequest: Codable {
    public init() {}
}

/// Defines the fields that are included in the response body of
/// a request to the [DeleteCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/delete-customer-group) endpoint.
///
/// Example:
///
/// {
/// 
/// }
public struct DeleteCustomerGroupResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(errors: [Error]? = nil) {
        self.errors = errors
    }
}

/// Defines the fields that are included in a request to the `DeleteCustomer`
/// endpoint.
///
/// Example:
///
/// {
///   "request_params" : "?version=11"
/// }
public struct DeleteCustomerRequest: Codable {
    /// The current version of the customer profile.
    /// 
    /// As a best practice, you should include this parameter to enable [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency) control.  For more information, see [Delete a customer profile](https://developer.squareup.com/docs/customers-api/use-the-api/keep-records#delete-customer-profile).
    public var version: Int?

    public init(version: Int? = nil) {
        self.version = version
    }
}

/// Defines the fields that are included in the response body of
/// a request to the `DeleteCustomer` endpoint.
///
/// Example:
///
/// {
/// 
/// }
public struct DeleteCustomerResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(errors: [Error]? = nil) {
        self.errors = errors
    }
}

/// Defines the parameters for a `DeleteDisputeEvidence` request.
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct DeleteDisputeEvidenceRequest: Codable {
    public init() {}
}

/// Defines the fields in a `DeleteDisputeEvidence` response.
///
/// Example:
///
/// {
/// 
/// }
public struct DeleteDisputeEvidenceResponse: Codable {
    /// Information about errors encountered during the request.
    public var errors: [Error]?

    public init(errors: [Error]? = nil) {
        self.errors = errors
    }
}

/// Describes a `DeleteInvoice` request.
public struct DeleteInvoiceRequest: Codable {
    /// The version of the [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) to delete.
    /// If you do not know the version, you can call [GetInvoice](https://developer.squareup.com/reference/square_2021-08-18/invoices-api/get-invoice) or
    /// [ListInvoices](https://developer.squareup.com/reference/square_2021-08-18/invoices-api/list-invoices).
    public var version: Int?

    public init(version: Int? = nil) {
        self.version = version
    }
}

/// Describes a `DeleteInvoice` response.
///
/// Example:
///
/// {
/// 
/// }
public struct DeleteInvoiceResponse: Codable {
    /// Information about errors encountered during the request.
    public var errors: [Error]?

    public init(errors: [Error]? = nil) {
        self.errors = errors
    }
}

/// A request to delete a loyalty reward.
///
/// Example:
///
/// {
///   "request_params" : "?reward_id=9f18ac21-233a-31c3-be77-b45840f5a810"
/// }
public struct DeleteLoyaltyRewardRequest: Codable {
    public init() {}
}

/// A response returned by the API call.
///
/// Example:
///
/// {
/// 
/// }
public struct DeleteLoyaltyRewardResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(errors: [Error]? = nil) {
        self.errors = errors
    }
}

/// A request to delete a `Shift`.
///
/// Example:
///
/// {
/// 
/// }
public struct DeleteShiftRequest: Codable {
    public init() {}
}

/// The response to a request to delete a `Shift`. The response might contain a set of
/// `Error` objects if the request resulted in errors.
///
/// Example:
///
/// {
/// 
/// }
public struct DeleteShiftResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(errors: [Error]? = nil) {
        self.errors = errors
    }
}

/// Represents a `DeleteSnippet` request.
public struct DeleteSnippetRequest: Codable {
    public init() {}
}

/// Represents a `DeleteSnippet` response.
///
/// Example:
///
/// {
/// 
/// }
public struct DeleteSnippetResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(errors: [Error]? = nil) {
        self.errors = errors
    }
}

/// Defines the parameters for a `DeprecatedCreateDisputeEvidenceFile` request.
///
/// Example:
///
/// {
/// 
/// }
public struct DeprecatedCreateDisputeEvidenceFileRequest: Codable {
    /// The MIME type of the uploaded file.
    /// The type can be image/heic, image/heif, image/jpeg, application/pdf, image/png, or image/tiff.
    public var contentType: String?
    /// The type of evidence you are uploading.
    public var evidenceType: String?
    /// The Unique ID. For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
    public var idempotencyKey: String

    public init(contentType: String? = nil, evidenceType: String? = nil, idempotencyKey: String) {
        self.contentType = contentType
        self.evidenceType = evidenceType
        self.idempotencyKey = idempotencyKey
    }

    private enum CodingKeys: String, CodingKey {
        case contentType = "content_type"
        case evidenceType = "evidence_type"
        case idempotencyKey = "idempotency_key"
    }
}

/// Defines the fields in a `DeprecatedCreateDisputeEvidenceFile` response.
///
/// Example:
///
/// {
///   "evidence" : {
///     "dispute_id" : "bVTprrwk0gygTLZ96VX1oB",
///     "evidence_file" : {
///       "filename" : "evidence.tiff",
///       "filetype" : "image\/tiff"
///     },
///     "evidence_id" : "TOomLInj6iWmP3N8qfCXrB",
///     "evidence_type" : "GENERIC_EVIDENCE",
///     "uploaded_at" : "2018-10-18T16:01:10.000Z"
///   }
/// }
public struct DeprecatedCreateDisputeEvidenceFileResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    public var evidence: DisputeEvidence?

    public init(errors: [Error]? = nil, evidence: DisputeEvidence? = nil) {
        self.errors = errors
        self.evidence = evidence
    }
}

/// Defines the parameters for a `DeprecatedCreateDisputeEvidenceText` request.
///
/// Example:
///
/// {
///   "request_body" : {
///     "evidence_text" : "1Z8888888888888888",
///     "evidence_type" : "TRACKING_NUMBER",
///     "idempotency_key" : "ed3ee3933d946f1514d505d173c82648"
///   }
/// }
public struct DeprecatedCreateDisputeEvidenceTextRequest: Codable {
    /// The evidence string.
    public var evidenceText: String
    /// The type of evidence you are uploading.
    public var evidenceType: String?
    /// The Unique ID. For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
    public var idempotencyKey: String

    public init(evidenceText: String, evidenceType: String? = nil, idempotencyKey: String) {
        self.evidenceText = evidenceText
        self.evidenceType = evidenceType
        self.idempotencyKey = idempotencyKey
    }

    private enum CodingKeys: String, CodingKey {
        case evidenceText = "evidence_text"
        case evidenceType = "evidence_type"
        case idempotencyKey = "idempotency_key"
    }
}

/// Defines the fields in a `DeprecatedCreateDisputeEvidenceText` response.
///
/// Example:
///
/// {
///   "evidence" : {
///     "dispute_id" : "bVTprrwk0gygTLZ96VX1oB",
///     "evidence_text" : "1Z8888888888888888",
///     "evidence_type" : "TRACKING_NUMBER",
///     "id" : "TOomLInj6iWmP3N8qfCXrB",
///     "uploaded_at" : "2018-10-18T16:01:10.000Z"
///   }
/// }
public struct DeprecatedCreateDisputeEvidenceTextResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    public var evidence: DisputeEvidence?

    public init(errors: [Error]? = nil, evidence: DisputeEvidence? = nil) {
        self.errors = errors
        self.evidence = evidence
    }
}

public struct Device: Codable {
    /// The device's Square-issued ID.
    public var id: String?
    /// The device's merchant-specified name.
    public var name: String?

    public init(id: String? = nil, name: String? = nil) {
        self.id = id
        self.name = name
    }
}

public struct DeviceCheckoutOptions: Codable {
    /// The unique ID of the device intended for this `TerminalCheckout`.
    /// A list of `DeviceCode` objects can be retrieved from the /v2/devices/codes endpoint.
    /// Match a `DeviceCode.device_id` value with `device_id` to get the associated device code.
    public var deviceID: String
    /// Instructs the device to skip the receipt screen. Defaults to false.
    public var isSkipReceiptScreen: Bool?
    public var tipSettings: TipSettings?

    public init(deviceID: String, isSkipReceiptScreen: Bool? = nil, tipSettings: TipSettings? = nil) {
        self.deviceID = deviceID
        self.isSkipReceiptScreen = isSkipReceiptScreen
        self.tipSettings = tipSettings
    }

    private enum CodingKeys: String, CodingKey {
        case deviceID = "device_id"
        case isSkipReceiptScreen = "skip_receipt_screen"
        case tipSettings = "tip_settings"
    }
}

public struct DeviceCode: Codable {
    /// The unique code that can be used to login.
    public var code: String?
    /// When this DeviceCode was created. Timestamp in RFC 3339 format.
    public var createdAt: String?
    /// The unique id of the device that used this code. Populated when the device is paired up.
    public var deviceID: String?
    /// The unique id for this device code.
    public var id: String?
    /// The location assigned to this code.
    public var locationID: String?
    /// An optional user-defined name for the device code.
    public var name: String?
    /// When this DeviceCode will expire and no longer login. Timestamp in RFC 3339 format.
    public var pairBy: String?
    /// When this DeviceCode was paired. Timestamp in RFC 3339 format.
    public var pairedAt: String?
    /// The targeting product type of the device code.
    public var productType: String
    /// The pairing status of the device code.
    public var status: String?
    /// When this DeviceCode's status was last changed. Timestamp in RFC 3339 format.
    public var statusChangedAt: String?

    public init(code: String? = nil, createdAt: String? = nil, deviceID: String? = nil, id: String? = nil, locationID: String? = nil, name: String? = nil, pairBy: String? = nil, pairedAt: String? = nil, productType: String, status: String? = nil, statusChangedAt: String? = nil) {
        self.code = code
        self.createdAt = createdAt
        self.deviceID = deviceID
        self.id = id
        self.locationID = locationID
        self.name = name
        self.pairBy = pairBy
        self.pairedAt = pairedAt
        self.productType = productType
        self.status = status
        self.statusChangedAt = statusChangedAt
    }

    private enum CodingKeys: String, CodingKey {
        case code
        case createdAt = "created_at"
        case deviceID = "device_id"
        case id
        case locationID = "location_id"
        case name
        case pairBy = "pair_by"
        case pairedAt = "paired_at"
        case productType = "product_type"
        case status
        case statusChangedAt = "status_changed_at"
    }
}

/// DeviceCode.Status enum.
public enum DeviceCodeStatus: String, Codable, CaseIterable {
    case unknown = "UNKNOWN"
    case unpaired = "UNPAIRED"
    case paired = "PAIRED"
    case expired = "EXPIRED"
}

/// Details about the device that took the payment.
public struct DeviceDetails: Codable {
    /// The Square-issued ID of the device.
    public var deviceID: String?
    /// The Square-issued installation ID for the device.
    public var deviceInstallationID: String?
    /// The name of the device set by the seller.
    public var deviceName: String?

    public init(deviceID: String? = nil, deviceInstallationID: String? = nil, deviceName: String? = nil) {
        self.deviceID = deviceID
        self.deviceInstallationID = deviceInstallationID
        self.deviceName = deviceName
    }

    private enum CodingKeys: String, CodingKey {
        case deviceID = "device_id"
        case deviceInstallationID = "device_installation_id"
        case deviceName = "device_name"
    }
}

/// Additional details about `WALLET` type payments. Contains only non-confidential information.
public struct DigitalWalletDetails: Codable {
    /// The status of the `WALLET` payment. The status can be `AUTHORIZED`, `CAPTURED`, `VOIDED`, or
    /// `FAILED`.
    public var status: String?

    public init(status: String? = nil) {
        self.status = status
    }
}

/// Disables the card, preventing any further updates or charges. Disabling
/// an already disabled card is allowed but has no effect. Accessible via
/// HTTP requests at POST https://connect.squareup.com/v2/cards/{card_id}/disable
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct DisableCardRequest: Codable {
    public init() {}
}

/// Defines the fields that are included in the response body of
/// a request to the [DisableCard](#endpoint-cards-disablecard) endpoint.
/// 
/// Note: if there are errors processing the request, the card field will not be
/// present.
///
/// Example:
///
/// {
///   "card" : {
///     "billing_address" : {
///       "address_line_1" : "500 Electric Ave",
///       "address_line_2" : "Suite 600",
///       "administrative_district_level_1" : "NY",
///       "country" : "US",
///       "locality" : "New York",
///       "postal_code" : "10003"
///     },
///     "bin" : "411111",
///     "card_brand" : "VISA",
///     "card_type" : "CREDIT",
///     "cardholder_name" : "Amelia Earhart",
///     "customer_id" : "VDKXEEKPJN48QDG3BGGFAK05P8",
///     "enabled" : false,
///     "exp_month" : 11,
///     "exp_year" : 2022,
///     "fingerprint" : "ex-p-cs80EK9Flz7LsCMv-szbptQ_ssAGrhemzSTsPFgt9nzyE6t7okiLIQc-qw_quqKX4Q",
///     "id" : "ccof:uIbfJXhXETSP197M3GB",
///     "last_4" : "1111",
///     "prepaid_type" : "NOT_PREPAID",
///     "reference_id" : "user-id-1",
///     "version" : 2
///   }
/// }
public struct DisableCardResponse: Codable {
    /// Represents the payment details of a card to be used for payments. These
    /// details are determined by the payment token generated by Web Payments SDK.
    public var card: Card?
    /// Information on errors encountered during the request.
    public var errors: [Error]?

    public init(card: Card? = nil, errors: [Error]? = nil) {
        self.card = card
        self.errors = errors
    }
}

/// Represents a dispute a cardholder initiated with their bank.
public struct Dispute: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money?
    /// The ID of the dispute in the card brand system, generated by the card brand.
    public var brandDisputeID: String?
    /// The card brand used in the disputed payment.
    public var cardBrand: String?
    /// The timestamp when the dispute was created, in RFC 3339 format.
    public var createdAt: String?
    /// The unique ID for this `Dispute`, generated by Square.
    public var disputeID: String?
    /// The payment the cardholder disputed.
    public var disputedPayment: DisputedPayment?
    /// The time when the next action is due, in RFC 3339 format.
    public var dueAt: String?
    /// The IDs of the evidence associated with the dispute.
    public var evidenceIDs: [String]?
    /// The unique ID for this `Dispute`, generated by Square.
    public var id: String?
    /// The ID of the location where the dispute originated.
    public var locationID: String?
    /// The dispute reason why the cardholder initiated the dispute with their bank.
    public var reason: String?
    /// The timestamp when the dispute was reported, in RFC 3339 format.
    public var reportedAt: String?
    /// The timestamp when the dispute was reported, in RFC 3339 format.
    public var reportedDate: String?
    /// The current state of this dispute.
    public var state: String?
    /// The timestamp when the dispute was last updated, in RFC 3339 format.
    public var updatedAt: String?
    /// The current version of the `Dispute`.
    public var version: Int?

    public init(amountMoney: Money? = nil, brandDisputeID: String? = nil, cardBrand: String? = nil, createdAt: String? = nil, disputeID: String? = nil, disputedPayment: DisputedPayment? = nil, dueAt: String? = nil, evidenceIDs: [String]? = nil, id: String? = nil, locationID: String? = nil, reason: String? = nil, reportedAt: String? = nil, reportedDate: String? = nil, state: String? = nil, updatedAt: String? = nil, version: Int? = nil) {
        self.amountMoney = amountMoney
        self.brandDisputeID = brandDisputeID
        self.cardBrand = cardBrand
        self.createdAt = createdAt
        self.disputeID = disputeID
        self.disputedPayment = disputedPayment
        self.dueAt = dueAt
        self.evidenceIDs = evidenceIDs
        self.id = id
        self.locationID = locationID
        self.reason = reason
        self.reportedAt = reportedAt
        self.reportedDate = reportedDate
        self.state = state
        self.updatedAt = updatedAt
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
        case brandDisputeID = "brand_dispute_id"
        case cardBrand = "card_brand"
        case createdAt = "created_at"
        case disputeID = "dispute_id"
        case disputedPayment = "disputed_payment"
        case dueAt = "due_at"
        case evidenceIDs = "evidence_ids"
        case id
        case locationID = "location_id"
        case reason
        case reportedAt = "reported_at"
        case reportedDate = "reported_date"
        case state
        case updatedAt = "updated_at"
        case version
    }
}

public struct DisputeEvidence: Codable {
    /// The ID of the dispute the evidence is associated with.
    public var disputeID: String?
    /// A file to be uploaded as dispute evidence.
    public var evidenceFile: DisputeEvidenceFile?
    /// The Square-generated ID of the evidence.
    public var evidenceID: String?
    /// Raw text
    public var evidenceText: String?
    /// The type of the evidence.
    public var evidenceType: String?
    /// The Square-generated ID of the evidence.
    public var id: String?
    /// The time when the next action is due, in RFC 3339 format.
    public var uploadedAt: String?

    public init(disputeID: String? = nil, evidenceFile: DisputeEvidenceFile? = nil, evidenceID: String? = nil, evidenceText: String? = nil, evidenceType: String? = nil, id: String? = nil, uploadedAt: String? = nil) {
        self.disputeID = disputeID
        self.evidenceFile = evidenceFile
        self.evidenceID = evidenceID
        self.evidenceText = evidenceText
        self.evidenceType = evidenceType
        self.id = id
        self.uploadedAt = uploadedAt
    }

    private enum CodingKeys: String, CodingKey {
        case disputeID = "dispute_id"
        case evidenceFile = "evidence_file"
        case evidenceID = "evidence_id"
        case evidenceText = "evidence_text"
        case evidenceType = "evidence_type"
        case id
        case uploadedAt = "uploaded_at"
    }
}

/// Published when evidence is added to a [Dispute](https://developer.squareup.com/reference/square_2021-08-18/objects/Dispute)
/// from the Disputes Dashboard in the Seller Dashboard, the Square Point of Sale app,
/// or by calling either [CreateDisputeEvidenceFile](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-file) or [CreateDisputeEvidenceText](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-text).
///
/// Example:
///
/// {
///   "created_at" : "2020-02-19T21:27:28.851Z",
///   "data" : {
///     "id" : "ORSEVtZAJxb37RA1EiGw",
///     "object" : {
///       "dispute" : {
///         "amount_money" : {
///           "amount" : 8801,
///           "currency" : "USD"
///         },
///         "brand_dispute_id" : "r9rKGSBBQbywBNnWWIiGFg",
///         "card_brand" : "VISA",
///         "created_at" : "2020-02-19T21:24:53.258Z",
///         "disputed_payment" : {
///           "payment_id" : "fbmsaEOpoARDKxiSGH1fqPuqoqFZY"
///         },
///         "due_at" : "2020-03-04T00:00:00.000Z",
///         "id" : "ORSEVtZAJxb37RA1EiGw",
///         "location_id" : "VJDQQP3CG14EY",
///         "reason" : "AMOUNT_DIFFERS",
///         "reported_at" : "2020-02-19T00:00:00.000Z",
///         "state" : "EVIDENCE_REQUIRED",
///         "updated_at" : "2020-02-19T21:27:28.851Z",
///         "version" : 2
///       }
///     },
///     "type" : "dispute"
///   },
///   "event_id" : "6f606f30-53d0-495a-87f0-958576fc954f",
///   "location_id" : "VJDQQP3CG14EY",
///   "merchant_id" : "0HPGX5JYE6EE1",
///   "type" : "dispute.evidence.created"
/// }
public struct DisputeEvidenceCreatedWebhook: Codable {
    /// Timestamp of when the webhook event was created, in RFC 3339 format.
    public var createdAt: String?
    public var data: DisputeEvidenceCreatedWebhookData?
    /// A unique ID for the webhook event.
    public var eventID: String?
    /// The ID of the target location associated with the event.
    public var locationID: String?
    /// The ID of the target merchant associated with the event.
    public var merchantID: String?
    /// The type of event this represents.
    public var type: String?

    public init(createdAt: String? = nil, data: DisputeEvidenceCreatedWebhookData? = nil, eventID: String? = nil, locationID: String? = nil, merchantID: String? = nil, type: String? = nil) {
        self.createdAt = createdAt
        self.data = data
        self.eventID = eventID
        self.locationID = locationID
        self.merchantID = merchantID
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case createdAt = "created_at"
        case data
        case eventID = "event_id"
        case locationID = "location_id"
        case merchantID = "merchant_id"
        case type
    }
}

public struct DisputeEvidenceCreatedWebhookData: Codable {
    /// ID of the affected dispute.
    public var id: String?
    public var object: DisputeEvidenceCreatedWebhookObject?
    /// Name of the affected dispute's type.
    public var type: String?

    public init(id: String? = nil, object: DisputeEvidenceCreatedWebhookObject? = nil, type: String? = nil) {
        self.id = id
        self.object = object
        self.type = type
    }
}

public struct DisputeEvidenceCreatedWebhookObject: Codable {
    /// Represents a dispute a cardholder initiated with their bank.
    public var object: Dispute?

    public init(object: Dispute? = nil) {
        self.object = object
    }
}

/// A file to be uploaded as dispute evidence.
public struct DisputeEvidenceFile: Codable {
    /// The file name including the file extension. For example: "receipt.tiff".
    public var filename: String?
    /// Dispute evidence files must be application/pdf, image/heic, image/heif, image/jpeg, image/png, or image/tiff formats.
    public var filetype: String?

    public init(filename: String? = nil, filetype: String? = nil) {
        self.filename = filename
        self.filetype = filetype
    }
}

/// The type of the dispute evidence.
public enum DisputeEvidenceType: String, Codable, CaseIterable {
    case genericEvidence = "GENERIC_EVIDENCE"
    case onlineOrAppAccessLog = "ONLINE_OR_APP_ACCESS_LOG"
    case authorizationDocumentation = "AUTHORIZATION_DOCUMENTATION"
    case cancellationOrRefundDocumentation = "CANCELLATION_OR_REFUND_DOCUMENTATION"
    case cardholderCommunication = "CARDHOLDER_COMMUNICATION"
    case cardholderInformation = "CARDHOLDER_INFORMATION"
    case purchaseAcknowledgement = "PURCHASE_ACKNOWLEDGEMENT"
    case duplicateChargeDocumentation = "DUPLICATE_CHARGE_DOCUMENTATION"
    case productOrServiceDescription = "PRODUCT_OR_SERVICE_DESCRIPTION"
    case receipt = "RECEIPT"
    case serviceReceivedDocumentation = "SERVICE_RECEIVED_DOCUMENTATION"
    case proofOfDeliveryDocumentation = "PROOF_OF_DELIVERY_DOCUMENTATION"
    case relatedTransactionDocumentation = "RELATED_TRANSACTION_DOCUMENTATION"
    case rebuttalExplanation = "REBUTTAL_EXPLANATION"
    case trackingNumber = "TRACKING_NUMBER"
}

/// The list of possible reasons why a cardholder might initiate a
/// dispute with their bank.
public enum DisputeReason: String, Codable, CaseIterable {
    case amountDiffers = "AMOUNT_DIFFERS"
    case cancelled = "CANCELLED"
    case duplicate = "DUPLICATE"
    case noKnowledge = "NO_KNOWLEDGE"
    case notAsDescribed = "NOT_AS_DESCRIBED"
    case notReceived = "NOT_RECEIVED"
    case paidByOtherMeans = "PAID_BY_OTHER_MEANS"
    case customerRequestsCredit = "CUSTOMER_REQUESTS_CREDIT"
    case emvLiabilityShift = "EMV_LIABILITY_SHIFT"
}

/// The list of possible dispute states.
public enum DisputeState: String, Codable, CaseIterable {
    case unknownState = "UNKNOWN_STATE"
    case inquiryEvidenceRequired = "INQUIRY_EVIDENCE_REQUIRED"
    case inquiryProcessing = "INQUIRY_PROCESSING"
    case inquiryClosed = "INQUIRY_CLOSED"
    case evidenceRequired = "EVIDENCE_REQUIRED"
    case processing = "PROCESSING"
    case won = "WON"
    case lost = "LOST"
    case accepted = "ACCEPTED"
    case waitingThirdParty = "WAITING_THIRD_PARTY"
}

/// The payment the cardholder disputed.
public struct DisputedPayment: Codable {
    /// Square-generated unique ID of the payment being disputed.
    public var paymentID: String?

    public init(paymentID: String? = nil) {
        self.paymentID = paymentID
    }

    private enum CodingKeys: String, CodingKey {
        case paymentID = "payment_id"
    }
}

/// Determines item visibility in Ecom (Online Store) and Online Checkout.
public enum EcomVisibility: String, Codable, CaseIterable {
    case unindexed = "UNINDEXED"
    case unavailable = "UNAVAILABLE"
    case hidden = "HIDDEN"
    case visible = "VISIBLE"
}

/// An employee object that is used by the external API.
public struct Employee: Codable {
    /// A read-only timestamp in RFC 3339 format.
    public var createdAt: String?
    /// The employee's email address
    public var email: String?
    /// The employee's first name.
    public var firstName: String?
    /// UUID for this object.
    public var id: String?
    /// Whether this employee is the owner of the merchant. Each merchant
    /// has one owner employee, and that employee has full authority over
    /// the account.
    public var isOwner: Bool?
    /// The employee's last name.
    public var lastName: String?
    /// A list of location IDs where this employee has access to.
    public var locationIDs: [String]?
    /// The employee's phone number in E.164 format, i.e. "+12125554250"
    public var phoneNumber: String?
    /// Specifies the status of the employees being fetched.
    public var status: String?
    /// A read-only timestamp in RFC 3339 format.
    public var updatedAt: String?

    public init(createdAt: String? = nil, email: String? = nil, firstName: String? = nil, id: String? = nil, isOwner: Bool? = nil, lastName: String? = nil, locationIDs: [String]? = nil, phoneNumber: String? = nil, status: String? = nil, updatedAt: String? = nil) {
        self.createdAt = createdAt
        self.email = email
        self.firstName = firstName
        self.id = id
        self.isOwner = isOwner
        self.lastName = lastName
        self.locationIDs = locationIDs
        self.phoneNumber = phoneNumber
        self.status = status
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case createdAt = "created_at"
        case email
        case firstName = "first_name"
        case id
        case isOwner = "is_owner"
        case lastName = "last_name"
        case locationIDs = "location_ids"
        case phoneNumber = "phone_number"
        case status
        case updatedAt = "updated_at"
    }
}

/// The status of the Employee being retrieved.
public enum EmployeeStatus: String, Codable, CaseIterable {
    case active = "ACTIVE"
    case inactive = "INACTIVE"
}

/// The hourly wage rate that an employee earns on a `Shift` for doing the job
/// specified by the `title` property of this object. Deprecated at version 2020-08-26. Use `TeamMemberWage` instead.
public struct EmployeeWage: Codable {
    /// The `Employee` that this wage is assigned to.
    public var employeeID: String?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var hourlyRate: Money?
    /// The UUID for this object.
    public var id: String?
    /// The job title that this wage relates to.
    public var title: String?

    public init(employeeID: String? = nil, hourlyRate: Money? = nil, id: String? = nil, title: String? = nil) {
        self.employeeID = employeeID
        self.hourlyRate = hourlyRate
        self.id = id
        self.title = title
    }

    private enum CodingKeys: String, CodingKey {
        case employeeID = "employee_id"
        case hourlyRate = "hourly_rate"
        case id
        case title
    }
}

/// Represents an error encountered during a request to the Connect API.
/// 
/// See [Handling errors](https://developer.squareup.com/docs/build-basics/handling-errors) for more information.
public struct Error: Codable {
    /// The high-level category for the error.
    public var category: String
    /// The specific code of the error.
    public var code: String
    /// A human-readable description of the error for debugging purposes.
    public var detail: String?
    /// The name of the field provided in the original request (if any) that
    /// the error pertains to.
    public var field: String?

    public init(category: String, code: String, detail: String? = nil, field: String? = nil) {
        self.category = category
        self.code = code
        self.detail = detail
        self.field = field
    }
}

/// Indicates which high-level category of error has occurred during a
/// request to the Connect API.
public enum ErrorCategory: String, Codable, CaseIterable {
    case apiError = "API_ERROR"
    case authenticationError = "AUTHENTICATION_ERROR"
    case invalidRequestError = "INVALID_REQUEST_ERROR"
    case rateLimitError = "RATE_LIMIT_ERROR"
    case paymentMethodError = "PAYMENT_METHOD_ERROR"
    case refundError = "REFUND_ERROR"
    case merchantSubscriptionError = "MERCHANT_SUBSCRIPTION_ERROR"
}

/// Indicates the specific error that occurred during a request to a
/// Square API.
public enum ErrorCode: String, Codable, CaseIterable {
    case internalServerError = "INTERNAL_SERVER_ERROR"
    case unauthorized = "UNAUTHORIZED"
    case accessTokenExpired = "ACCESS_TOKEN_EXPIRED"
    case accessTokenRevoked = "ACCESS_TOKEN_REVOKED"
    case clientDisabled = "CLIENT_DISABLED"
    case forbidden = "FORBIDDEN"
    case insufficientScopes = "INSUFFICIENT_SCOPES"
    case applicationDisabled = "APPLICATION_DISABLED"
    case v1Application = "V1_APPLICATION"
    case v1AccessToken = "V1_ACCESS_TOKEN"
    case cardProcessingNotEnabled = "CARD_PROCESSING_NOT_ENABLED"
    case merchantSubscriptionNotFound = "MERCHANT_SUBSCRIPTION_NOT_FOUND"
    case badRequest = "BAD_REQUEST"
    case missingRequiredParameter = "MISSING_REQUIRED_PARAMETER"
    case incorrectType = "INCORRECT_TYPE"
    case invalidTime = "INVALID_TIME"
    case invalidTimeRange = "INVALID_TIME_RANGE"
    case invalidValue = "INVALID_VALUE"
    case invalidCursor = "INVALID_CURSOR"
    case unknownQueryParameter = "UNKNOWN_QUERY_PARAMETER"
    case conflictingParameters = "CONFLICTING_PARAMETERS"
    case expectedJSONBody = "EXPECTED_JSON_BODY"
    case invalidSortOrder = "INVALID_SORT_ORDER"
    case valueRegexMismatch = "VALUE_REGEX_MISMATCH"
    case valueTooShort = "VALUE_TOO_SHORT"
    case valueTooLong = "VALUE_TOO_LONG"
    case valueTooLow = "VALUE_TOO_LOW"
    case valueTooHigh = "VALUE_TOO_HIGH"
    case valueEmpty = "VALUE_EMPTY"
    case arrayLengthTooLong = "ARRAY_LENGTH_TOO_LONG"
    case arrayLengthTooShort = "ARRAY_LENGTH_TOO_SHORT"
    case arrayEmpty = "ARRAY_EMPTY"
    case expectedBoolean = "EXPECTED_BOOLEAN"
    case expectedInteger = "EXPECTED_INTEGER"
    case expectedFloat = "EXPECTED_FLOAT"
    case expectedString = "EXPECTED_STRING"
    case expectedObject = "EXPECTED_OBJECT"
    case expectedArray = "EXPECTED_ARRAY"
    case expectedMap = "EXPECTED_MAP"
    case expectedBase64EncodedByteArray = "EXPECTED_BASE64_ENCODED_BYTE_ARRAY"
    case invalidArrayValue = "INVALID_ARRAY_VALUE"
    case invalidEnumValue = "INVALID_ENUM_VALUE"
    case invalidContentType = "INVALID_CONTENT_TYPE"
    case invalidFormValue = "INVALID_FORM_VALUE"
    case customerNotFound = "CUSTOMER_NOT_FOUND"
    case oneInstrumentExpected = "ONE_INSTRUMENT_EXPECTED"
    case noFieldsSet = "NO_FIELDS_SET"
    case tooManyMapEntries = "TOO_MANY_MAP_ENTRIES"
    case mapKeyLengthTooShort = "MAP_KEY_LENGTH_TOO_SHORT"
    case mapKeyLengthTooLong = "MAP_KEY_LENGTH_TOO_LONG"
    case cardExpired = "CARD_EXPIRED"
    case invalidExpiration = "INVALID_EXPIRATION"
    case invalidExpirationYear = "INVALID_EXPIRATION_YEAR"
    case invalidExpirationDate = "INVALID_EXPIRATION_DATE"
    case unsupportedCardBrand = "UNSUPPORTED_CARD_BRAND"
    case unsupportedEntryMethod = "UNSUPPORTED_ENTRY_METHOD"
    case invalidEncryptedCard = "INVALID_ENCRYPTED_CARD"
    case invalidCard = "INVALID_CARD"
    case genericDecline = "GENERIC_DECLINE"
    case cvvFailure = "CVV_FAILURE"
    case addressVerificationFailure = "ADDRESS_VERIFICATION_FAILURE"
    case invalidAccount = "INVALID_ACCOUNT"
    case currencyMismatch = "CURRENCY_MISMATCH"
    case insufficientFunds = "INSUFFICIENT_FUNDS"
    case insufficientPermissions = "INSUFFICIENT_PERMISSIONS"
    case cardholderInsufficientPermissions = "CARDHOLDER_INSUFFICIENT_PERMISSIONS"
    case invalidLocation = "INVALID_LOCATION"
    case transactionLimit = "TRANSACTION_LIMIT"
    case voiceFailure = "VOICE_FAILURE"
    case panFailure = "PAN_FAILURE"
    case expirationFailure = "EXPIRATION_FAILURE"
    case cardNotSupported = "CARD_NOT_SUPPORTED"
    case invalidPin = "INVALID_PIN"
    case missingPin = "MISSING_PIN"
    case missingAccountType = "MISSING_ACCOUNT_TYPE"
    case invalidPostalCode = "INVALID_POSTAL_CODE"
    case invalidFees = "INVALID_FEES"
    case manuallyEnteredPaymentNotSupported = "MANUALLY_ENTERED_PAYMENT_NOT_SUPPORTED"
    case paymentLimitExceeded = "PAYMENT_LIMIT_EXCEEDED"
    case giftCardAvailableAmount = "GIFT_CARD_AVAILABLE_AMOUNT"
    case accountUnusable = "ACCOUNT_UNUSABLE"
    case buyerRefusedPayment = "BUYER_REFUSED_PAYMENT"
    case delayedTransactionExpired = "DELAYED_TRANSACTION_EXPIRED"
    case delayedTransactionCanceled = "DELAYED_TRANSACTION_CANCELED"
    case delayedTransactionCaptured = "DELAYED_TRANSACTION_CAPTURED"
    case delayedTransactionFailed = "DELAYED_TRANSACTION_FAILED"
    case cardTokenExpired = "CARD_TOKEN_EXPIRED"
    case cardTokenUsed = "CARD_TOKEN_USED"
    case amountTooHigh = "AMOUNT_TOO_HIGH"
    case unsupportedInstrumentType = "UNSUPPORTED_INSTRUMENT_TYPE"
    case refundAmountInvalid = "REFUND_AMOUNT_INVALID"
    case refundAlreadyPending = "REFUND_ALREADY_PENDING"
    case paymentNotRefundable = "PAYMENT_NOT_REFUNDABLE"
    case refundDeclined = "REFUND_DECLINED"
    case invalidCardData = "INVALID_CARD_DATA"
    case sourceUsed = "SOURCE_USED"
    case sourceExpired = "SOURCE_EXPIRED"
    case unsupportedLoyaltyRewardTier = "UNSUPPORTED_LOYALTY_REWARD_TIER"
    case locationMismatch = "LOCATION_MISMATCH"
    case idempotencyKeyReused = "IDEMPOTENCY_KEY_REUSED"
    case unexpectedValue = "UNEXPECTED_VALUE"
    case sandboxNotSupported = "SANDBOX_NOT_SUPPORTED"
    case invalidEmailAddress = "INVALID_EMAIL_ADDRESS"
    case invalidPhoneNumber = "INVALID_PHONE_NUMBER"
    case checkoutExpired = "CHECKOUT_EXPIRED"
    case badCertificate = "BAD_CERTIFICATE"
    case invalidSquareVersionFormat = "INVALID_SQUARE_VERSION_FORMAT"
    case apiVersionIncompatible = "API_VERSION_INCOMPATIBLE"
    case cardDeclined = "CARD_DECLINED"
    case verifyCvvFailure = "VERIFY_CVV_FAILURE"
    case verifyAvsFailure = "VERIFY_AVS_FAILURE"
    case cardDeclinedCallIssuer = "CARD_DECLINED_CALL_ISSUER"
    case cardDeclinedVerificationRequired = "CARD_DECLINED_VERIFICATION_REQUIRED"
    case badExpiration = "BAD_EXPIRATION"
    case chipInsertionRequired = "CHIP_INSERTION_REQUIRED"
    case allowablePinTriesExceeded = "ALLOWABLE_PIN_TRIES_EXCEEDED"
    case reservationDeclined = "RESERVATION_DECLINED"
    case notFound = "NOT_FOUND"
    case applePaymentProcessingCertificateHashNotFound = "APPLE_PAYMENT_PROCESSING_CERTIFICATE_HASH_NOT_FOUND"
    case methodNotAllowed = "METHOD_NOT_ALLOWED"
    case notAcceptable = "NOT_ACCEPTABLE"
    case requestTimeout = "REQUEST_TIMEOUT"
    case conflict = "CONFLICT"
    case gone = "GONE"
    case requestEntityTooLarge = "REQUEST_ENTITY_TOO_LARGE"
    case unsupportedMediaType = "UNSUPPORTED_MEDIA_TYPE"
    case unprocessableEntity = "UNPROCESSABLE_ENTITY"
    case rateLimited = "RATE_LIMITED"
    case notImplemented = "NOT_IMPLEMENTED"
    case badGateway = "BAD_GATEWAY"
    case serviceUnavailable = "SERVICE_UNAVAILABLE"
    case temporaryError = "TEMPORARY_ERROR"
    case gatewayTimeout = "GATEWAY_TIMEOUT"
}

/// Indicates which products matched by a CatalogPricingRule
/// will be excluded if the pricing rule uses an exclude set.
public enum ExcludeStrategy: String, Codable, CaseIterable {
    case leastExpensive = "LEAST_EXPENSIVE"
    case mostExpensive = "MOST_EXPENSIVE"
}

/// Stores details about an external payment. Contains only non-confidential information.
/// For more information, see
/// [Take External Payments](https://developer.squareup.com/docs/payments-api/take-payments/external-payments).
public struct ExternalPaymentDetails: Codable {
    /// A description of the external payment source. For example,
    /// "Food Delivery Service".
    public var source: String
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var sourceFeeMoney: Money?
    /// An ID to associate the payment to its originating source.
    public var sourceID: String?
    /// The type of external payment the seller received. It can be one of the following:
    /// - CHECK - Paid using a physical check.
    /// - BANK_TRANSFER - Paid using external bank transfer.
    /// - OTHER\_GIFT\_CARD - Paid using a non-Square gift card.
    /// - CRYPTO - Paid using a crypto currency.
    /// - SQUARE_CASH - Paid using Square Cash App.
    /// - SOCIAL - Paid using peer-to-peer payment applications.
    /// - EXTERNAL - A third-party application gathered this payment outside of Square.
    /// - EMONEY - Paid using an E-money provider.
    /// - CARD - A credit or debit card that Square does not support.
    /// - STORED_BALANCE - Use for house accounts, store credit, and so forth.
    /// - FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals
    /// - OTHER - A type not listed here.
    public var type: String

    public init(source: String, sourceFeeMoney: Money? = nil, sourceID: String? = nil, type: String) {
        self.source = source
        self.sourceFeeMoney = sourceFeeMoney
        self.sourceID = sourceID
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case source
        case sourceFeeMoney = "source_fee_money"
        case sourceID = "source_id"
        case type
    }
}

/// A filter to select resources based on an exact field value. For any given
/// value, the value can only be in one property. Depending on the field, either
/// all properties can be set or only a subset will be available.
/// 
/// Refer to the documentation of the field.
public struct FilterValue: Codable {
    /// A list of terms that must be present on the field of the resource.
    public var all: [String]?
    /// A list of terms where at least one of them must be present on the
    /// field of the resource.
    public var any: [String]?
    /// A list of terms that must not be present on the field the resource
    public var `none`: [String]?

    public init(all: [String]? = nil, any: [String]? = nil, `none`: [String]? = nil) {
        self.all = all
        self.any = any
        self.none = `none`
    }

    private enum CodingKeys: String, CodingKey {
        case all
        case any
        case `none` = "none"
    }
}

/// Request object for fetching a specific `BankAccount`
/// by the object ID.
public struct GetBankAccountByV1IDRequest: Codable {
    public init() {}
}

/// Response object returned by GetBankAccountByV1Id.
///
/// Example:
///
/// {
///   "bank_account" : {
///     "account_number_suffix" : "971",
///     "account_type" : "CHECKING",
///     "bank_name" : "Bank Name",
///     "country" : "US",
///     "creditable" : false,
///     "currency" : "USD",
///     "debitable" : false,
///     "holder_name" : "Jane Doe",
///     "id" : "w3yRgCGYQnwmdl0R3GB",
///     "location_id" : "S8GWD5example",
///     "primary_bank_identification_number" : "112200303",
///     "status" : "VERIFICATION_IN_PROGRESS",
///     "version" : 5
///   }
/// }
public struct GetBankAccountByV1IDResponse: Codable {
    /// Represents a bank account. For more information about
    /// linking a bank account to a Square account, see
    /// [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
    public var bankAccount: BankAccount?
    /// Information on errors encountered during the request.
    public var errors: [Error]?

    public init(bankAccount: BankAccount? = nil, errors: [Error]? = nil) {
        self.bankAccount = bankAccount
        self.errors = errors
    }

    private enum CodingKeys: String, CodingKey {
        case bankAccount = "bank_account"
        case errors
    }
}

/// Request object to fetch a specific `BankAccount`
/// by the object ID.
public struct GetBankAccountRequest: Codable {
    public init() {}
}

/// Response object returned by `GetBankAccount`.
///
/// Example:
///
/// {
///   "bank_account" : {
///     "account_number_suffix" : "971",
///     "account_type" : "CHECKING",
///     "bank_name" : "Bank Name",
///     "country" : "US",
///     "creditable" : false,
///     "currency" : "USD",
///     "debitable" : false,
///     "holder_name" : "Jane Doe",
///     "id" : "w3yRgCGYQnwmdl0R3GB",
///     "location_id" : "S8GWD5example",
///     "primary_bank_identification_number" : "112200303",
///     "status" : "VERIFICATION_IN_PROGRESS",
///     "version" : 5
///   }
/// }
public struct GetBankAccountResponse: Codable {
    /// Represents a bank account. For more information about
    /// linking a bank account to a Square account, see
    /// [Bank Accounts API](https://developer.squareup.com/docs/bank-accounts-api).
    public var bankAccount: BankAccount?
    /// Information on errors encountered during the request.
    public var errors: [Error]?

    public init(bankAccount: BankAccount? = nil, errors: [Error]? = nil) {
        self.bankAccount = bankAccount
        self.errors = errors
    }

    private enum CodingKeys: String, CodingKey {
        case bankAccount = "bank_account"
        case errors
    }
}

/// A request to get a `BreakType` by ID.
///
/// Example:
///
/// {
/// 
/// }
public struct GetBreakTypeRequest: Codable {
    public init() {}
}

/// The response to a request to get a `BreakType`. The response contains
/// the requested `BreakType` objects and might contain a set of `Error` objects if
/// the request resulted in errors.
///
/// Example:
///
/// {
///   "break_type" : {
///     "break_name" : "Lunch Break",
///     "created_at" : "2019-02-21T17:50:00Z",
///     "expected_duration" : "PT30M",
///     "id" : "lA0mj_RSOprNPwMUXdYp",
///     "is_paid" : true,
///     "location_id" : "059SB0E0WCNWS",
///     "updated_at" : "2019-02-21T17:50:00Z",
///     "version" : 1
///   }
/// }
public struct GetBreakTypeResponse: Codable {
    /// A defined break template that sets an expectation for possible `Break`
    /// instances on a `Shift`.
    public var breakType: BreakType?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(breakType: BreakType? = nil, errors: [Error]? = nil) {
        self.breakType = breakType
        self.errors = errors
    }

    private enum CodingKeys: String, CodingKey {
        case breakType = "break_type"
        case errors
    }
}

/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct GetDeviceCodeRequest: Codable {
    public init() {}
}

/// Example:
///
/// {
///   "device_code" : {
///     "code" : "EBCARJ",
///     "created_at" : "2020-02-06T18:44:33.000Z",
///     "device_id" : "907CS13101300122",
///     "id" : "B3Z6NAMYQSMTM",
///     "location_id" : "B5E4484SHHNYH",
///     "name" : "Counter 1",
///     "pair_by" : "2020-02-06T18:49:33.000Z",
///     "product_type" : "TERMINAL_API",
///     "status" : "PAIRED",
///     "status_changed_at" : "2020-02-06T18:47:28.000Z"
///   }
/// }
public struct GetDeviceCodeResponse: Codable {
    public var deviceCode: DeviceCode?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(deviceCode: DeviceCode? = nil, errors: [Error]? = nil) {
        self.deviceCode = deviceCode
        self.errors = errors
    }

    private enum CodingKeys: String, CodingKey {
        case deviceCode = "device_code"
        case errors
    }
}

/// A request to get an `EmployeeWage`.
///
/// Example:
///
/// {
/// 
/// }
public struct GetEmployeeWageRequest: Codable {
    public init() {}
}

/// A response to a request to get an `EmployeeWage`. The response contains
/// the requested `EmployeeWage` objects and might contain a set of `Error` objects if
/// the request resulted in errors.
///
/// Example:
///
/// {
///   "employee_wage" : {
///     "employee_id" : "33fJchumvVdJwxV0H6L9",
///     "hourly_rate" : {
///       "amount" : 2000,
///       "currency" : "USD"
///     },
///     "id" : "pXS3qCv7BERPnEGedM4S8mhm",
///     "title" : "Manager"
///   }
/// }
public struct GetEmployeeWageResponse: Codable {
    /// The hourly wage rate that an employee earns on a `Shift` for doing the job
    /// specified by the `title` property of this object. Deprecated at version 2020-08-26. Use `TeamMemberWage` instead.
    public var employeeWage: EmployeeWage?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(employeeWage: EmployeeWage? = nil, errors: [Error]? = nil) {
        self.employeeWage = employeeWage
        self.errors = errors
    }

    private enum CodingKeys: String, CodingKey {
        case employeeWage = "employee_wage"
        case errors
    }
}

/// Describes a `GetInvoice` request.
public struct GetInvoiceRequest: Codable {
    public init() {}
}

/// Describes a `GetInvoice` response.
///
/// Example:
///
/// {
///   "invoice" : {
///     "accepted_payment_methods" : {
///       "bank_account" : false,
///       "card" : true,
///       "square_gift_card" : false
///     },
///     "created_at" : "2020-06-18T17:45:13Z",
///     "custom_fields" : [
///       {
///         "label" : "Event Reference Number",
///         "placement" : "ABOVE_LINE_ITEMS",
///         "value" : "Ref. #1234"
///       },
///       {
///         "label" : "Terms of Service",
///         "placement" : "BELOW_LINE_ITEMS",
///         "value" : "The terms of service are..."
///       }
///     ],
///     "delivery_method" : "EMAIL",
///     "description" : "We appreciate your business!",
///     "id" : "inv:0-ChCHu2mZEabLeeHahQnXDjZQECY",
///     "invoice_number" : "inv-100",
///     "location_id" : "ES0RJRZYEC39A",
///     "order_id" : "CAISENgvlJ6jLWAzERDzjyHVybY",
///     "payment_requests" : [
///       {
///         "automatic_payment_source" : "NONE",
///         "computed_amount_money" : {
///           "amount" : 10000,
///           "currency" : "USD"
///         },
///         "due_date" : "2030-01-24",
///         "reminders" : [
///           {
///             "message" : "Your invoice is due tomorrow",
///             "relative_scheduled_days" : -1,
///             "status" : "PENDING",
///             "uid" : "beebd363-e47f-4075-8785-c235aaa7df11"
///           }
///         ],
///         "request_type" : "BALANCE",
///         "tipping_enabled" : true,
///         "total_completed_amount_money" : {
///           "amount" : 0,
///           "currency" : "USD"
///         },
///         "uid" : "2da7964f-f3d2-4f43-81e8-5aa220bf3355"
///       }
///     ],
///     "primary_recipient" : {
///       "customer_id" : "JDKYHBWT1D4F8MFH63DBMEN8Y4",
///       "email_address" : "Amelia.Earhart@example.com",
///       "family_name" : "Earhart",
///       "given_name" : "Amelia",
///       "phone_number" : "1-212-555-4240"
///     },
///     "scheduled_at" : "2030-01-13T10:00:00Z",
///     "status" : "DRAFT",
///     "timezone" : "America\/Los_Angeles",
///     "title" : "Event Planning Services",
///     "updated_at" : "2020-06-18T17:45:13Z",
///     "version" : 0
///   }
/// }
public struct GetInvoiceResponse: Codable {
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// Stores information about an invoice. You use the Invoices API to create and manage
    /// invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
    public var invoice: Invoice?

    public init(errors: [Error]? = nil, invoice: Invoice? = nil) {
        self.errors = errors
        self.invoice = invoice
    }
}

/// Describes a request to retrieve a refund using
/// [GetPaymentRefund](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/get-payment-refund).
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct GetPaymentRefundRequest: Codable {
    public init() {}
}

/// Defines the response returned by [GetRefund](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/get-payment-refund).
/// 
/// Note: If there are errors processing the request, the refund field might not be
/// present or it might be present in a FAILED state.
///
/// Example:
///
/// {
///   "refund" : {
///     "amount_money" : {
///       "amount" : 1000,
///       "currency" : "USD"
///     },
///     "created_at" : "2019-07-06T18:01:22.123Z",
///     "id" : "O2QAAhTYs7rUfzlxT38GMO7LvaB_q7JwCHtxmgXrh8fAhV468WQ44VxDtL7CU4yVRlsbXmI",
///     "location_id" : "XK3DBG77NJBFX",
///     "order_id" : "2duiyoqbfeXY0DBi15GEyk5Epa4F",
///     "payment_id" : "O2QAAhTYs7rUfzlxT38GMO7LvaB",
///     "processing_fee" : [
///       {
///         "amount_money" : {
///           "amount" : -59,
///           "currency" : "USD"
///         },
///         "effective_at" : "2019-07-06T20:01:12.000Z",
///         "type" : "INITIAL"
///       }
///     ],
///     "status" : "COMPLETED",
///     "updated_at" : "2019-07-06T18:06:03.874Z"
///   }
/// }
public struct GetPaymentRefundResponse: Codable {
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// Represents a refund of a payment made using Square. Contains information about
    /// the original payment and the amount of money refunded.
    public var refund: PaymentRefund?

    public init(errors: [Error]? = nil, refund: PaymentRefund? = nil) {
        self.errors = errors
        self.refund = refund
    }
}

/// Describes a request to retrieve a payment using
/// [GetPayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/get-payment).
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct GetPaymentRequest: Codable {
    public init() {}
}

/// Defines the response returned by [GetPayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/get-payment).
///
/// Example:
///
/// {
///   "payment" : {
///     "amount_money" : {
///       "amount" : 200,
///       "currency" : "USD"
///     },
///     "app_fee_money" : {
///       "amount" : 10,
///       "currency" : "USD"
///     },
///     "approved_money" : {
///       "amount" : 200,
///       "currency" : "USD"
///     },
///     "card_details" : {
///       "auth_result_code" : "nsAyY2",
///       "avs_status" : "AVS_ACCEPTED",
///       "card" : {
///         "bin" : "411111",
///         "card_brand" : "VISA",
///         "card_type" : "DEBIT",
///         "exp_month" : 7,
///         "exp_year" : 2026,
///         "fingerprint" : "sq-1-TpmjbNBMFdibiIjpQI5LiRgNUBC7u1689i0TgHjnlyHEWYB7tnn-K4QbW4ttvtaqXw",
///         "last_4" : "1111",
///         "prepaid_type" : "PREPAID"
///       },
///       "card_payment_timeline" : {
///         "authorized_at" : "2019-07-10T13:23:49.234Z",
///         "captured_at" : "2019-07-10T13:23:49.446Z"
///       },
///       "cvv_status" : "CVV_ACCEPTED",
///       "entry_method" : "ON_FILE",
///       "statement_description" : "SQ *MY MERCHANT",
///       "status" : "CAPTURED"
///     },
///     "created_at" : "2019-07-10T13:23:49.154Z",
///     "customer_id" : "RDX9Z4XTIZR7MRZJUXNY9HUK6I",
///     "id" : "GQTFp1ZlXdpoW4o6eGiZhbjosiDFf",
///     "location_id" : "XTI0H92143A39",
///     "note" : "Brief description",
///     "order_id" : "m2Hr8Hk8A3CTyQQ1k4ynExg92tO3",
///     "processing_fee" : [
///       {
///         "amount_money" : {
///           "amount" : 36,
///           "currency" : "USD"
///         },
///         "effective_at" : "2019-07-10T15:23:49.000Z",
///         "type" : "INITIAL"
///       }
///     ],
///     "receipt_number" : "GQTF",
///     "receipt_url" : "https:\/\/squareup.com\/receipt\/preview\/GQTFp1ZlXdpoW4o6eGiZhbjosiDFf",
///     "reference_id" : "123456",
///     "source_type" : "CARD",
///     "status" : "COMPLETED",
///     "total_money" : {
///       "amount" : 200,
///       "currency" : "USD"
///     },
///     "updated_at" : "2019-07-10T13:23:49.446Z",
///     "version_token" : "hj8JqHWu9R1Kkfu63UuIUmYc7zm6YFOt92g8d2fb9fz6o"
///   }
/// }
public struct GetPaymentResponse: Codable {
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// Represents a payment processed by the Square API.
    public var payment: Payment?

    public init(errors: [Error]? = nil, payment: Payment? = nil) {
        self.errors = errors
        self.payment = payment
    }
}

/// A request to get a `Shift` by ID.
///
/// Example:
///
/// {
/// 
/// }
public struct GetShiftRequest: Codable {
    public init() {}
}

/// A response to a request to get a `Shift`. The response contains
/// the requested `Shift` object and might contain a set of `Error` objects if
/// the request resulted in errors.
///
/// Example:
///
/// {
///   "shift" : {
///     "breaks" : [
///       {
///         "break_type_id" : "92EPDRQKJ5088",
///         "end_at" : "2019-02-23T20:00:00-05:00",
///         "expected_duration" : "PT1H",
///         "id" : "M9BBKEPQAQD2T",
///         "is_paid" : true,
///         "name" : "Lunch Break",
///         "start_at" : "2019-02-23T19:00:00-05:00"
///       }
///     ],
///     "created_at" : "2019-02-27T00:12:12Z",
///     "employee_id" : "D71KRMQof6cXGUW0aAv7",
///     "end_at" : "2019-02-23T21:00:00-05:00",
///     "id" : "T35HMQSN89SV4",
///     "location_id" : "PAA1RJZZKXBFG",
///     "start_at" : "2019-02-23T18:00:00-05:00",
///     "status" : "CLOSED",
///     "team_member_id" : "D71KRMQof6cXGUW0aAv7",
///     "timezone" : "America\/New_York",
///     "updated_at" : "2019-02-27T00:12:12Z",
///     "version" : 1,
///     "wage" : {
///       "hourly_rate" : {
///         "amount" : 1457,
///         "currency" : "USD"
///       },
///       "title" : "Cashier"
///     }
///   }
/// }
public struct GetShiftResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// A record of the hourly rate, start, and end times for a single work shift
    /// for an employee. This might include a record of the start and end times for breaks
    /// taken during the shift.
    public var shift: Shift?

    public init(errors: [Error]? = nil, shift: Shift? = nil) {
        self.errors = errors
        self.shift = shift
    }
}

/// A request to get a `TeamMemberWage`.
///
/// Example:
///
/// {
/// 
/// }
public struct GetTeamMemberWageRequest: Codable {
    public init() {}
}

/// A response to a request to get a `TeamMemberWage`. The response contains
/// the requested `TeamMemberWage` objects and might contain a set of `Error` objects if
/// the request resulted in errors.
///
/// Example:
///
/// {
///   "team_member_wage" : {
///     "hourly_rate" : {
///       "amount" : 2000,
///       "currency" : "USD"
///     },
///     "id" : "pXS3qCv7BERPnEGedM4S8mhm",
///     "team_member_id" : "33fJchumvVdJwxV0H6L9",
///     "title" : "Manager"
///   }
/// }
public struct GetTeamMemberWageResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// The hourly wage rate that a team member earns on a `Shift` for doing the job
    /// specified by the `title` property of this object.
    public var teamMemberWage: TeamMemberWage?

    public init(errors: [Error]? = nil, teamMemberWage: TeamMemberWage? = nil) {
        self.errors = errors
        self.teamMemberWage = teamMemberWage
    }

    private enum CodingKeys: String, CodingKey {
        case errors
        case teamMemberWage = "team_member_wage"
    }
}

/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct GetTerminalCheckoutRequest: Codable {
    public init() {}
}

/// Example:
///
/// {
///   "checkout" : {
///     "amount_money" : {
///       "amount" : 2610,
///       "currency" : "USD"
///     },
///     "app_id" : "APP_ID",
///     "created_at" : "2020-04-06T16:39:32.545Z",
///     "deadline_duration" : "PT10M",
///     "device_options" : {
///       "device_id" : "dbb5d83a-7838-11ea-bc55-0242ac130003",
///       "skip_receipt_screen" : false,
///       "tip_settings" : {
///         "allow_tipping" : false
///       }
///     },
///     "id" : "08YceKh7B3ZqO",
///     "note" : "A brief note",
///     "reference_id" : "id11572",
///     "status" : "IN_PROGRESS",
///     "updated_at" : "2020-04-06T16:39:323.001Z"
///   }
/// }
public struct GetTerminalCheckoutResponse: Codable {
    public var checkout: TerminalCheckout?
    /// Information about errors encountered during the request.
    public var errors: [Error]?

    public init(checkout: TerminalCheckout? = nil, errors: [Error]? = nil) {
        self.checkout = checkout
        self.errors = errors
    }
}

/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct GetTerminalRefundRequest: Codable {
    public init() {}
}

/// Example:
///
/// {
///   "refund" : {
///     "amount_money" : {
///       "amount" : 111,
///       "currency" : "CAD"
///     },
///     "app_id" : "sandbox-sq0idb-c2OuYt13YaCAeJq_2cd8OQ",
///     "card" : {
///       "bin" : "411111",
///       "card_brand" : "INTERAC",
///       "card_type" : "CREDIT",
///       "exp_month" : 1,
///       "exp_year" : 2022,
///       "fingerprint" : "sq-1-B1fP9MNNmZgVVaPKRND6oDKYbz25S2cTvg9Mzwg3RMTK1zT1PiGRT-AE3nTA8vSmmw",
///       "last_4" : "1111"
///     },
///     "created_at" : "2020-09-29T15:21:46.771Z",
///     "deadline_duration" : "PT5M",
///     "device_id" : "f72dfb8e-4d65-4e56-aade-ec3fb8d33291",
///     "id" : "009DP5HD-5O5OvgkcNUhl7JBuINflcjKqUzXZY",
///     "location_id" : "76C9W6K8CNNQ5",
///     "order_id" : "kcuKDKreRaI4gF4TjmEgZjHk8Z7YY",
///     "payment_id" : "5O5OvgkcNUhl7JBuINflcjKqUzXZY",
///     "reason" : "Returning item",
///     "refund_id" : "5O5OvgkcNUhl7JBuINflcjKqUzXZY_43Q4iGp7sNeATiWrUruA1EYeMRUXaddXXlDDJ1EQLvb",
///     "status" : "COMPLETED",
///     "updated_at" : "2020-09-29T15:21:48.675Z"
///   }
/// }
public struct GetTerminalRefundResponse: Codable {
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    public var refund: TerminalRefund?

    public init(errors: [Error]? = nil, refund: TerminalRefund? = nil) {
        self.errors = errors
        self.refund = refund
    }
}

/// Represents a Square gift card.
public struct GiftCard: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var balanceMoney: Money?
    /// The timestamp when the gift card was created, in RFC 3339 format.
    /// In the case of a digital gift card, it is the time when you create a card
    /// (using the Square Point of Sale application, Seller Dashboard, or Gift Cards API).
    /// In the case of a plastic gift card, it is the time when Square associates the card with the
    /// seller at the time of activation.
    public var createdAt: String?
    /// The IDs of the customers to whom this gift card is linked.
    public var customerIDs: [String]?
    /// The gift card account number.
    public var gan: String?
    public var ganSource: AnyJSON?
    /// The Square-assigned ID of the gift card.
    public var id: String?
    public var state: AnyJSON?
    public var type: AnyJSON

    public init(balanceMoney: Money? = nil, createdAt: String? = nil, customerIDs: [String]? = nil, gan: String? = nil, ganSource: AnyJSON? = nil, id: String? = nil, state: AnyJSON? = nil, type: AnyJSON) {
        self.balanceMoney = balanceMoney
        self.createdAt = createdAt
        self.customerIDs = customerIDs
        self.gan = gan
        self.ganSource = ganSource
        self.id = id
        self.state = state
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case balanceMoney = "balance_money"
        case createdAt = "created_at"
        case customerIDs = "customer_ids"
        case gan
        case ganSource = "gan_source"
        case id
        case state
        case type
    }
}

/// Represents an action performed on a gift card that affects its state or balance.
public struct GiftCardActivity: Codable {
    /// Describes a gift card activity of the ACTIVATE type.
    public var activateActivityDetails: GiftCardActivityActivate?
    /// Describes a gift card activity of the ADJUST_DECREMENT type.
    public var adjustDecrementActivityDetails: GiftCardActivityAdjustDecrement?
    /// Describes a gift card activity of the ADJUST_INCREMENT type.
    public var adjustIncrementActivityDetails: GiftCardActivityAdjustIncrement?
    /// Describes a gift card activity of the BLOCK type.
    public var blockActivityDetails: GiftCardActivityBlock?
    /// Describes a gift card activity of the CLEAR_BALANCE type.
    public var clearBalanceActivityDetails: GiftCardActivityClearBalance?
    /// The timestamp when the gift card activity was created, in RFC 3339 format.
    public var createdAt: String?
    /// Describes a gift card activity of the DEACTIVATE type.
    public var deactivateActivityDetails: GiftCardActivityDeactivate?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var giftCardBalanceMoney: Money?
    /// The gift card GAN. The GAN is not required if `gift_card_id` is present.
    public var giftCardGan: String?
    /// The gift card ID. The ID is not required if a GAN is present.
    public var giftCardID: String?
    /// The unique ID of the gift card activity.
    public var id: String?
    /// Describes a gift card activity of the IMPORT type and the `GiftCardGANSource` is OTHER
    /// (a third-party gift card).
    public var importActivityDetails: GiftCardActivityImport?
    /// Present only when GiftCardActivityType is IMPORT_REVERSAL and GiftCardGANSource is OTHER
    public var importReversalActivityDetails: GiftCardActivityImportReversal?
    /// Present only when `GiftCardActivityType` is LOAD.
    public var loadActivityDetails: GiftCardActivityLoad?
    /// The ID of the location at which the activity occurred.
    public var locationID: String
    /// Present only when `GiftCardActivityType` is REDEEM.
    public var redeemActivityDetails: GiftCardActivityRedeem?
    /// Present only when `GiftCardActivityType` is REFUND.
    public var refundActivityDetails: GiftCardActivityRefund?
    public var type: AnyJSON
    /// Present only when `GiftCardActivityType` is UNBLOCK.
    public var unblockActivityDetails: GiftCardActivityUnblock?
    /// Present only when `GiftCardActivityType` is UNLINKED_ACTIVITY_REFUND.
    public var unlinkedActivityRefundActivityDetails: GiftCardActivityUnlinkedActivityRefund?

    public init(activateActivityDetails: GiftCardActivityActivate? = nil, adjustDecrementActivityDetails: GiftCardActivityAdjustDecrement? = nil, adjustIncrementActivityDetails: GiftCardActivityAdjustIncrement? = nil, blockActivityDetails: GiftCardActivityBlock? = nil, clearBalanceActivityDetails: GiftCardActivityClearBalance? = nil, createdAt: String? = nil, deactivateActivityDetails: GiftCardActivityDeactivate? = nil, giftCardBalanceMoney: Money? = nil, giftCardGan: String? = nil, giftCardID: String? = nil, id: String? = nil, importActivityDetails: GiftCardActivityImport? = nil, importReversalActivityDetails: GiftCardActivityImportReversal? = nil, loadActivityDetails: GiftCardActivityLoad? = nil, locationID: String, redeemActivityDetails: GiftCardActivityRedeem? = nil, refundActivityDetails: GiftCardActivityRefund? = nil, type: AnyJSON, unblockActivityDetails: GiftCardActivityUnblock? = nil, unlinkedActivityRefundActivityDetails: GiftCardActivityUnlinkedActivityRefund? = nil) {
        self.activateActivityDetails = activateActivityDetails
        self.adjustDecrementActivityDetails = adjustDecrementActivityDetails
        self.adjustIncrementActivityDetails = adjustIncrementActivityDetails
        self.blockActivityDetails = blockActivityDetails
        self.clearBalanceActivityDetails = clearBalanceActivityDetails
        self.createdAt = createdAt
        self.deactivateActivityDetails = deactivateActivityDetails
        self.giftCardBalanceMoney = giftCardBalanceMoney
        self.giftCardGan = giftCardGan
        self.giftCardID = giftCardID
        self.id = id
        self.importActivityDetails = importActivityDetails
        self.importReversalActivityDetails = importReversalActivityDetails
        self.loadActivityDetails = loadActivityDetails
        self.locationID = locationID
        self.redeemActivityDetails = redeemActivityDetails
        self.refundActivityDetails = refundActivityDetails
        self.type = type
        self.unblockActivityDetails = unblockActivityDetails
        self.unlinkedActivityRefundActivityDetails = unlinkedActivityRefundActivityDetails
    }

    private enum CodingKeys: String, CodingKey {
        case activateActivityDetails = "activate_activity_details"
        case adjustDecrementActivityDetails = "adjust_decrement_activity_details"
        case adjustIncrementActivityDetails = "adjust_increment_activity_details"
        case blockActivityDetails = "block_activity_details"
        case clearBalanceActivityDetails = "clear_balance_activity_details"
        case createdAt = "created_at"
        case deactivateActivityDetails = "deactivate_activity_details"
        case giftCardBalanceMoney = "gift_card_balance_money"
        case giftCardGan = "gift_card_gan"
        case giftCardID = "gift_card_id"
        case id
        case importActivityDetails = "import_activity_details"
        case importReversalActivityDetails = "import_reversal_activity_details"
        case loadActivityDetails = "load_activity_details"
        case locationID = "location_id"
        case redeemActivityDetails = "redeem_activity_details"
        case refundActivityDetails = "refund_activity_details"
        case type
        case unblockActivityDetails = "unblock_activity_details"
        case unlinkedActivityRefundActivityDetails = "unlinked_activity_refund_activity_details"
    }
}

/// Describes a gift card activity of the ACTIVATE type.
public struct GiftCardActivityActivate: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money?
    /// Required if your application does not use the Square Orders API.
    /// This is a list of client-provided payment instrument IDs.
    /// Square uses this information to perform compliance checks.
    /// If you use the Square Orders API, Square has the necessary instrument IDs to perform necessary
    /// compliance checks.
    public var buyerPaymentInstrumentIDs: [String]?
    /// The `line_item_uid` of the gift card line item in an order.
    /// This is required if your application uses the Square Orders API.
    public var lineItemUid: String?
    /// The ID of the order associated with the activity.
    /// This is required if your application uses the Square Orders API.
    public var orderID: String?
    /// If your application does not use the Square Orders API, you can optionally use this field
    /// to associate the gift card activity with a client-side entity.
    public var referenceID: String?

    public init(amountMoney: Money? = nil, buyerPaymentInstrumentIDs: [String]? = nil, lineItemUid: String? = nil, orderID: String? = nil, referenceID: String? = nil) {
        self.amountMoney = amountMoney
        self.buyerPaymentInstrumentIDs = buyerPaymentInstrumentIDs
        self.lineItemUid = lineItemUid
        self.orderID = orderID
        self.referenceID = referenceID
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
        case buyerPaymentInstrumentIDs = "buyer_payment_instrument_ids"
        case lineItemUid = "line_item_uid"
        case orderID = "order_id"
        case referenceID = "reference_id"
    }
}

/// Describes a gift card activity of the ADJUST_DECREMENT type.
public struct GiftCardActivityAdjustDecrement: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money
    public var reason: AnyJSON

    public init(amountMoney: Money, reason: AnyJSON) {
        self.amountMoney = amountMoney
        self.reason = reason
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
        case reason
    }
}

public enum GiftCardActivityAdjustDecrementReason: String, Codable, CaseIterable {
    case suspiciousActivity = "SUSPICIOUS_ACTIVITY"
    case balanceAccidentallyIncreased = "BALANCE_ACCIDENTALLY_INCREASED"
    case supportIssue = "SUPPORT_ISSUE"
}

/// Describes a gift card activity of the ADJUST_INCREMENT type.
public struct GiftCardActivityAdjustIncrement: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money
    public var reason: AnyJSON

    public init(amountMoney: Money, reason: AnyJSON) {
        self.amountMoney = amountMoney
        self.reason = reason
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
        case reason
    }
}

public enum GiftCardActivityAdjustIncrementReason: String, Codable, CaseIterable {
    case complimentary = "COMPLIMENTARY"
    case supportIssue = "SUPPORT_ISSUE"
    case transactionVoided = "TRANSACTION_VOIDED"
}

/// Describes a gift card activity of the BLOCK type.
public struct GiftCardActivityBlock: Codable {
    public var reason: AnyJSON

    public init(reason: AnyJSON) {
        self.reason = reason
    }
}

public enum GiftCardActivityBlockReason: String, Codable, CaseIterable {
    case chargebackBlock = "CHARGEBACK_BLOCK"
}

/// Describes a gift card activity of the CLEAR_BALANCE type.
public struct GiftCardActivityClearBalance: Codable {
    public var reason: AnyJSON

    public init(reason: AnyJSON) {
        self.reason = reason
    }
}

public enum GiftCardActivityClearBalanceReason: String, Codable, CaseIterable {
    case suspiciousActivity = "SUSPICIOUS_ACTIVITY"
    case reuseGiftcard = "REUSE_GIFTCARD"
    case unknownReason = "UNKNOWN_REASON"
}

/// Describes a gift card activity of the DEACTIVATE type.
public struct GiftCardActivityDeactivate: Codable {
    public var reason: AnyJSON

    public init(reason: AnyJSON) {
        self.reason = reason
    }
}

public enum GiftCardActivityDeactivateReason: String, Codable, CaseIterable {
    case suspiciousActivity = "SUSPICIOUS_ACTIVITY"
    case unknownReason = "UNKNOWN_REASON"
    case chargebackDeactivate = "CHARGEBACK_DEACTIVATE"
}

/// Describes a gift card activity of the IMPORT type and the `GiftCardGANSource` is OTHER
/// (a third-party gift card).
public struct GiftCardActivityImport: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money

    public init(amountMoney: Money) {
        self.amountMoney = amountMoney
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
    }
}

/// Present only when GiftCardActivityType is IMPORT_REVERSAL and GiftCardGANSource is OTHER
public struct GiftCardActivityImportReversal: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money

    public init(amountMoney: Money) {
        self.amountMoney = amountMoney
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
    }
}

/// Present only when `GiftCardActivityType` is LOAD.
public struct GiftCardActivityLoad: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money?
    /// If you are not using the Orders API, this field is required because it is used to identify a buyer
    /// to perform compliance checks.
    public var buyerPaymentInstrumentIDs: [String]?
    /// The `line_item_uid` of the gift cardâ€™s line item in the order associated with the activity.
    /// It is populated along with `order_id` and is required if using the Square Orders API.
    public var lineItemUid: String?
    /// The `order_id` of the order associated with the activity.
    /// It is populated along with `line_item_uid` and is required if using the Square Orders API.
    public var orderID: String?
    /// A client-specified ID to associate an entity, in another system, with this gift card
    /// activity. This can be used to track the order or payment related information when the Square Orders
    /// API is not being used.
    public var referenceID: String?

    public init(amountMoney: Money? = nil, buyerPaymentInstrumentIDs: [String]? = nil, lineItemUid: String? = nil, orderID: String? = nil, referenceID: String? = nil) {
        self.amountMoney = amountMoney
        self.buyerPaymentInstrumentIDs = buyerPaymentInstrumentIDs
        self.lineItemUid = lineItemUid
        self.orderID = orderID
        self.referenceID = referenceID
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
        case buyerPaymentInstrumentIDs = "buyer_payment_instrument_ids"
        case lineItemUid = "line_item_uid"
        case orderID = "order_id"
        case referenceID = "reference_id"
    }
}

/// Present only when `GiftCardActivityType` is REDEEM.
public struct GiftCardActivityRedeem: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money
    /// When the Square Payments API is used, Redeem is not called on the Gift Cards API.
    /// However, when Square reads a Redeem activity from the Gift Cards API, developers need to know the
    /// associated `payment_id`.
    public var paymentID: String?
    /// A client-specified ID to associate an entity, in another system, with this gift card
    /// activity. This can be used to track the order or payment related information when the Square Orders
    /// API is not being used.
    public var referenceID: String?

    public init(amountMoney: Money, paymentID: String? = nil, referenceID: String? = nil) {
        self.amountMoney = amountMoney
        self.paymentID = paymentID
        self.referenceID = referenceID
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
        case paymentID = "payment_id"
        case referenceID = "reference_id"
    }
}

/// Present only when `GiftCardActivityType` is REFUND.
public struct GiftCardActivityRefund: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money?
    /// When the Square Payments API is used, Refund is not called on the Gift Cards API.
    /// However, when Square reads a Refund activity from the Gift Cards API, the developer needs to know the
    /// ID of the payment (made using this gift card) that is being refunded.
    public var paymentID: String?
    /// The ID for the Redeem activity that needs to be refunded. Hence, the activity it
    /// refers to has to be of the REDEEM type.
    public var redeemActivityID: String
    /// A client-specified ID to associate an entity, in another system, with this gift card
    /// activity. This can be used to track the order or payment related information when the Square Orders
    /// API is not being used.
    public var referenceID: String?

    public init(amountMoney: Money? = nil, paymentID: String? = nil, redeemActivityID: String, referenceID: String? = nil) {
        self.amountMoney = amountMoney
        self.paymentID = paymentID
        self.redeemActivityID = redeemActivityID
        self.referenceID = referenceID
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
        case paymentID = "payment_id"
        case redeemActivityID = "redeem_activity_id"
        case referenceID = "reference_id"
    }
}

public enum GiftCardActivityType: String, Codable, CaseIterable {
    case activate = "ACTIVATE"
    case load = "LOAD"
    case redeem = "REDEEM"
    case clearBalance = "CLEAR_BALANCE"
    case deactivate = "DEACTIVATE"
    case adjustIncrement = "ADJUST_INCREMENT"
    case adjustDecrement = "ADJUST_DECREMENT"
    case refund = "REFUND"
    case unlinkedActivityRefund = "UNLINKED_ACTIVITY_REFUND"
    case `import` = "IMPORT"
    case block = "BLOCK"
    case unblock = "UNBLOCK"
    case importReversal = "IMPORT_REVERSAL"
}

/// Present only when `GiftCardActivityType` is UNBLOCK.
public struct GiftCardActivityUnblock: Codable {
    public var reason: AnyJSON

    public init(reason: AnyJSON) {
        self.reason = reason
    }
}

public enum GiftCardActivityUnblockReason: String, Codable, CaseIterable {
    case chargebackUnblock = "CHARGEBACK_UNBLOCK"
}

/// Present only when `GiftCardActivityType` is UNLINKED_ACTIVITY_REFUND.
public struct GiftCardActivityUnlinkedActivityRefund: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money
    /// When using the Square Payments API, the ID of the payment that was refunded to this gift
    /// card.
    public var paymentID: String?
    /// A client-specified ID to associate an entity, in another system, with this gift card
    /// activity. This can be used to track the order or payment related information when the Square Payments
    /// API is not being used.
    public var referenceID: String?

    public init(amountMoney: Money, paymentID: String? = nil, referenceID: String? = nil) {
        self.amountMoney = amountMoney
        self.paymentID = paymentID
        self.referenceID = referenceID
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
        case paymentID = "payment_id"
        case referenceID = "reference_id"
    }
}

/// Indicates the source that generated the gift card
/// account number (GAN).
public enum GiftCardGANSource: String, Codable, CaseIterable {
    case square = "SQUARE"
    case other = "OTHER"
}

/// Indicates the gift card state.
public enum GiftCardStatus: String, Codable, CaseIterable {
    case active = "ACTIVE"
    case deactivated = "DEACTIVATED"
    case blocked = "BLOCKED"
    case pending = "PENDING"
}

public enum GiftCardType: String, Codable, CaseIterable {
    case physical = "PHYSICAL"
    case digital = "DIGITAL"
}

/// Object types to inline under their respective parent object in certain connect v2 responses
public enum InlineTypes: String, Codable, CaseIterable {
    case inlineNone = "INLINE_NONE"
    case inlineVariations = "INLINE_VARIATIONS"
    case inlineAll = "INLINE_ALL"
}

/// Represents a change in state or quantity of product inventory at a
/// particular time and location.
public struct InventoryAdjustment: Codable {
    public var adjustmentGroup: InventoryAdjustmentGroup?
    /// The Square-generated ID of the
    /// [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.
    public var catalogObjectID: String?
    /// The [type](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) of the
    /// [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked. Tracking is only
    /// supported for the `ITEM_VARIATION` type.
    public var catalogObjectType: String?
    /// An RFC 3339-formatted timestamp that indicates when the inventory adjustment is received.
    public var createdAt: String?
    /// The Square-generated ID of the [Employee](https://developer.squareup.com/reference/square_2021-08-18/objects/Employee) responsible for the
    /// inventory adjustment.
    public var employeeID: String?
    /// The [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) of the related quantity
    /// of items before the adjustment.
    public var fromState: String?
    /// The Square-generated ID of the goods receipt that caused the
    /// adjustment. Only relevant for state transitions from the Square for Retail
    /// app.
    public var goodsReceiptID: String?
    /// A unique ID generated by Square for the
    /// `InventoryAdjustment`.
    public var id: String?
    /// The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related
    /// quantity of items is being tracked.
    public var locationID: String?
    /// A client-generated RFC 3339-formatted timestamp that indicates when
    /// the inventory adjustment took place. For inventory adjustment updates, the `occurred_at`
    /// timestamp cannot be older than 24 hours or in the future relative to the
    /// time of the request.
    public var occurredAt: String?
    /// The Square-generated ID of the purchase order that caused the
    /// adjustment. Only relevant for state transitions from the Square for Retail
    /// app.
    public var purchaseOrderID: String?
    /// The number of items affected by the adjustment as a decimal string.
    /// Can support up to 5 digits after the decimal point.
    public var quantity: String?
    /// An optional ID provided by the application to tie the
    /// `InventoryAdjustment` to an external
    /// system.
    public var referenceID: String?
    /// The Square-generated ID of the [Refund][#type-refund] that
    /// caused the adjustment. Only relevant for refund-related state
    /// transitions.
    public var refundID: String?
    /// Provides information about the application used to generate a change.
    public var source: SourceApplication?
    /// The [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) of the related quantity
    /// of items after the adjustment.
    public var toState: String?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var totalPriceMoney: Money?
    /// The Square-generated ID of the [Transaction][#type-transaction] that
    /// caused the adjustment. Only relevant for payment-related state
    /// transitions.
    public var transactionID: String?

    public init(adjustmentGroup: InventoryAdjustmentGroup? = nil, catalogObjectID: String? = nil, catalogObjectType: String? = nil, createdAt: String? = nil, employeeID: String? = nil, fromState: String? = nil, goodsReceiptID: String? = nil, id: String? = nil, locationID: String? = nil, occurredAt: String? = nil, purchaseOrderID: String? = nil, quantity: String? = nil, referenceID: String? = nil, refundID: String? = nil, source: SourceApplication? = nil, toState: String? = nil, totalPriceMoney: Money? = nil, transactionID: String? = nil) {
        self.adjustmentGroup = adjustmentGroup
        self.catalogObjectID = catalogObjectID
        self.catalogObjectType = catalogObjectType
        self.createdAt = createdAt
        self.employeeID = employeeID
        self.fromState = fromState
        self.goodsReceiptID = goodsReceiptID
        self.id = id
        self.locationID = locationID
        self.occurredAt = occurredAt
        self.purchaseOrderID = purchaseOrderID
        self.quantity = quantity
        self.referenceID = referenceID
        self.refundID = refundID
        self.source = source
        self.toState = toState
        self.totalPriceMoney = totalPriceMoney
        self.transactionID = transactionID
    }

    private enum CodingKeys: String, CodingKey {
        case adjustmentGroup = "adjustment_group"
        case catalogObjectID = "catalog_object_id"
        case catalogObjectType = "catalog_object_type"
        case createdAt = "created_at"
        case employeeID = "employee_id"
        case fromState = "from_state"
        case goodsReceiptID = "goods_receipt_id"
        case id
        case locationID = "location_id"
        case occurredAt = "occurred_at"
        case purchaseOrderID = "purchase_order_id"
        case quantity
        case referenceID = "reference_id"
        case refundID = "refund_id"
        case source
        case toState = "to_state"
        case totalPriceMoney = "total_price_money"
        case transactionID = "transaction_id"
    }
}

public struct InventoryAdjustmentGroup: Codable {
    /// Representative `from_state` for adjustments within the group. For example, for a group adjustment from `IN_STOCK` to `SOLD`,
    /// there can be two component adjustments in the group: one from `IN_STOCK`to `COMPOSED` and the other one from `COMPOSED` to `SOLD`.
    /// Here, the representative `from_state` for the `InventoryAdjustmentGroup` is `IN_STOCK`.
    public var fromState: String?
    /// A unique ID generated by Square for the
    /// `InventoryAdjustmentGroup`.
    public var id: String?
    /// The inventory adjustment of the composed variation.
    public var rootAdjustmentID: String?
    /// Representative `to_state` for adjustments within group. For example, for a group adjustment from `IN_STOCK` to `SOLD`,
    /// the two component adjustments in the group can be from `IN_STOCK` to `COMPOSED` and from `COMPOSED` to `SOLD`.
    /// Here, the representative `to_state` of the `InventoryAdjustmentGroup` is `SOLD`.
    public var toState: String?

    public init(fromState: String? = nil, id: String? = nil, rootAdjustmentID: String? = nil, toState: String? = nil) {
        self.fromState = fromState
        self.id = id
        self.rootAdjustmentID = rootAdjustmentID
        self.toState = toState
    }

    private enum CodingKeys: String, CodingKey {
        case fromState = "from_state"
        case id
        case rootAdjustmentID = "root_adjustment_id"
        case toState = "to_state"
    }
}

/// Indicates whether Square should alert the merchant when the inventory quantity of a CatalogItemVariation is low.
public enum InventoryAlertType: String, Codable, CaseIterable {
    case `none` = "NONE"
    case lowQuantity = "LOW_QUANTITY"
}

/// Represents a single physical count, inventory, adjustment, or transfer
/// that is part of the history of inventory changes for a particular
/// [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) instance.
public struct InventoryChange: Codable {
    /// Represents a change in state or quantity of product inventory at a
    /// particular time and location.
    public var adjustment: InventoryAdjustment?
    /// Represents the unit used to measure a `CatalogItemVariation` and
    /// specifies the precision for decimal quantities.
    public var measurementUnit: CatalogMeasurementUnit?
    /// The ID of the [CatalogMeasurementUnit](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogMeasurementUnit) object representing the catalog measurement unit associated with the inventory change.
    public var measurementUnitID: String?
    /// Represents the quantity of an item variation that is physically present
    /// at a specific location, verified by a seller or a seller's employee. For example,
    /// a physical count might come from an employee counting the item variations on
    /// hand or from syncing with an external system.
    public var physicalCount: InventoryPhysicalCount?
    /// Represents the transfer of a quantity of product inventory at a
    /// particular time from one location to another.
    public var transfer: InventoryTransfer?
    /// Indicates how the inventory change is applied. See
    /// [InventoryChangeType](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryChangeType) for all possible values.
    public var type: String?

    public init(adjustment: InventoryAdjustment? = nil, measurementUnit: CatalogMeasurementUnit? = nil, measurementUnitID: String? = nil, physicalCount: InventoryPhysicalCount? = nil, transfer: InventoryTransfer? = nil, type: String? = nil) {
        self.adjustment = adjustment
        self.measurementUnit = measurementUnit
        self.measurementUnitID = measurementUnitID
        self.physicalCount = physicalCount
        self.transfer = transfer
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case adjustment
        case measurementUnit = "measurement_unit"
        case measurementUnitID = "measurement_unit_id"
        case physicalCount = "physical_count"
        case transfer
        case type
    }
}

/// Indicates how the inventory change was applied to a tracked product quantity.
public enum InventoryChangeType: String, Codable, CaseIterable {
    case physicalCount = "PHYSICAL_COUNT"
    case adjustment = "ADJUSTMENT"
    case transfer = "TRANSFER"
}

/// Represents Square-estimated quantity of items in a particular state at a
/// particular seller location based on the known history of physical counts and
/// inventory adjustments.
public struct InventoryCount: Codable {
    /// An RFC 3339-formatted timestamp that indicates when the most recent physical count or adjustment affecting
    /// the estimated count is received.
    public var calculatedAt: String?
    /// The Square-generated ID of the
    /// [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.
    public var catalogObjectID: String?
    /// The [type](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) of the
    /// [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked. Tracking is only
    /// supported for the `ITEM_VARIATION` type.
    public var catalogObjectType: String?
    /// Whether the inventory count is for composed variation (TRUE) or not (FALSE). If true, the inventory count will not be present in the response of
    /// any of these endpoints: [BatchChangeInventory](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-change-inventory),
    /// [BatchRetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-changes),
    /// [BatchRetrieveInventoryCounts](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/batch-retrieve-inventory-counts), and
    /// [RetrieveInventoryChanges](https://developer.squareup.com/reference/square_2021-08-18/inventory-api/retrieve-inventory-changes).
    public var isEstimated: Bool?
    /// The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related
    /// quantity of items is being tracked.
    public var locationID: String?
    /// The number of items affected by the estimated count as a decimal string.
    /// Can support up to 5 digits after the decimal point.
    public var quantity: String?
    /// The current [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) for the related
    /// quantity of items.
    public var state: String?

    public init(calculatedAt: String? = nil, catalogObjectID: String? = nil, catalogObjectType: String? = nil, isEstimated: Bool? = nil, locationID: String? = nil, quantity: String? = nil, state: String? = nil) {
        self.calculatedAt = calculatedAt
        self.catalogObjectID = catalogObjectID
        self.catalogObjectType = catalogObjectType
        self.isEstimated = isEstimated
        self.locationID = locationID
        self.quantity = quantity
        self.state = state
    }

    private enum CodingKeys: String, CodingKey {
        case calculatedAt = "calculated_at"
        case catalogObjectID = "catalog_object_id"
        case catalogObjectType = "catalog_object_type"
        case isEstimated = "is_estimated"
        case locationID = "location_id"
        case quantity
        case state
    }
}

/// Represents the quantity of an item variation that is physically present
/// at a specific location, verified by a seller or a seller's employee. For example,
/// a physical count might come from an employee counting the item variations on
/// hand or from syncing with an external system.
public struct InventoryPhysicalCount: Codable {
    /// The Square-generated ID of the
    /// [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.
    public var catalogObjectID: String?
    /// The [type](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) of the
    /// [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked. Tracking is only
    /// supported for the `ITEM_VARIATION` type.
    public var catalogObjectType: String?
    /// An RFC 3339-formatted timestamp that indicates when the physical count is received.
    public var createdAt: String?
    /// The Square-generated ID of the [Employee](https://developer.squareup.com/reference/square_2021-08-18/objects/Employee) responsible for the
    /// physical count.
    public var employeeID: String?
    /// A unique Square-generated ID for the
    /// [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount).
    public var id: String?
    /// The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related
    /// quantity of items is being tracked.
    public var locationID: String?
    /// A client-generated RFC 3339-formatted timestamp that indicates when
    /// the physical count was examined. For physical count updates, the `occurred_at`
    /// timestamp cannot be older than 24 hours or in the future relative to the
    /// time of the request.
    public var occurredAt: String?
    /// The number of items affected by the physical count as a decimal string.
    /// The number can support up to 5 digits after the decimal point.
    public var quantity: String?
    /// An optional ID provided by the application to tie the
    /// [InventoryPhysicalCount](https://developer.squareup.com/reference/square_2021-08-18/objects/InventoryPhysicalCount) to an external
    /// system.
    public var referenceID: String?
    /// Provides information about the application used to generate a change.
    public var source: SourceApplication?
    /// The current [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) for the related
    /// quantity of items.
    public var state: String?

    public init(catalogObjectID: String? = nil, catalogObjectType: String? = nil, createdAt: String? = nil, employeeID: String? = nil, id: String? = nil, locationID: String? = nil, occurredAt: String? = nil, quantity: String? = nil, referenceID: String? = nil, source: SourceApplication? = nil, state: String? = nil) {
        self.catalogObjectID = catalogObjectID
        self.catalogObjectType = catalogObjectType
        self.createdAt = createdAt
        self.employeeID = employeeID
        self.id = id
        self.locationID = locationID
        self.occurredAt = occurredAt
        self.quantity = quantity
        self.referenceID = referenceID
        self.source = source
        self.state = state
    }

    private enum CodingKeys: String, CodingKey {
        case catalogObjectID = "catalog_object_id"
        case catalogObjectType = "catalog_object_type"
        case createdAt = "created_at"
        case employeeID = "employee_id"
        case id
        case locationID = "location_id"
        case occurredAt = "occurred_at"
        case quantity
        case referenceID = "reference_id"
        case source
        case state
    }
}

/// Indicates the state of a tracked item quantity in the lifecycle of goods.
public enum InventoryState: String, Codable, CaseIterable {
    case custom = "CUSTOM"
    case inStock = "IN_STOCK"
    case sold = "SOLD"
    case returnedByCustomer = "RETURNED_BY_CUSTOMER"
    case reservedForSale = "RESERVED_FOR_SALE"
    case soldOnline = "SOLD_ONLINE"
    case orderedFromVendor = "ORDERED_FROM_VENDOR"
    case receivedFromVendor = "RECEIVED_FROM_VENDOR"
    case inTransitTo = "IN_TRANSIT_TO"
    case `none` = "NONE"
    case waste = "WASTE"
    case unlinkedReturn = "UNLINKED_RETURN"
    case composed = "COMPOSED"
    case decomposed = "DECOMPOSED"
    case supportedByNewerVersion = "SUPPORTED_BY_NEWER_VERSION"
}

/// Represents the transfer of a quantity of product inventory at a
/// particular time from one location to another.
public struct InventoryTransfer: Codable {
    /// The Square-generated ID of the
    /// [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.
    public var catalogObjectID: String?
    /// The [type](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) of the
    /// [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) being tracked.Tracking is only
    /// supported for the `ITEM_VARIATION` type.
    public var catalogObjectType: String?
    /// An RFC 3339-formatted timestamp that indicates when Square
    /// received the transfer request.
    public var createdAt: String?
    /// The Square-generated ID of the [Employee](https://developer.squareup.com/reference/square_2021-08-18/objects/Employee) responsible for the
    /// inventory transfer.
    public var employeeID: String?
    /// The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related
    /// quantity of items was tracked before the transfer.
    public var fromLocationID: String?
    /// A unique ID generated by Square for the
    /// `InventoryTransfer`.
    public var id: String?
    /// A client-generated RFC 3339-formatted timestamp that indicates when
    /// the transfer took place. For write actions, the `occurred_at` timestamp
    /// cannot be older than 24 hours or in the future relative to the time of the
    /// request.
    public var occurredAt: String?
    /// The number of items affected by the transfer as a decimal string.
    /// Can support up to 5 digits after the decimal point.
    public var quantity: String?
    /// An optional ID provided by the application to tie the
    /// `InventoryTransfer` to an external system.
    public var referenceID: String?
    /// Provides information about the application used to generate a change.
    public var source: SourceApplication?
    /// The [inventory state](https://developer.squareup.com/reference/square_2021-08-18/enums/InventoryState) for the quantity of
    /// items being transferred.
    public var state: String?
    /// The Square-generated ID of the [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the related
    /// quantity of items was tracked after the transfer.
    public var toLocationID: String?

    public init(catalogObjectID: String? = nil, catalogObjectType: String? = nil, createdAt: String? = nil, employeeID: String? = nil, fromLocationID: String? = nil, id: String? = nil, occurredAt: String? = nil, quantity: String? = nil, referenceID: String? = nil, source: SourceApplication? = nil, state: String? = nil, toLocationID: String? = nil) {
        self.catalogObjectID = catalogObjectID
        self.catalogObjectType = catalogObjectType
        self.createdAt = createdAt
        self.employeeID = employeeID
        self.fromLocationID = fromLocationID
        self.id = id
        self.occurredAt = occurredAt
        self.quantity = quantity
        self.referenceID = referenceID
        self.source = source
        self.state = state
        self.toLocationID = toLocationID
    }

    private enum CodingKeys: String, CodingKey {
        case catalogObjectID = "catalog_object_id"
        case catalogObjectType = "catalog_object_type"
        case createdAt = "created_at"
        case employeeID = "employee_id"
        case fromLocationID = "from_location_id"
        case id
        case occurredAt = "occurred_at"
        case quantity
        case referenceID = "reference_id"
        case source
        case state
        case toLocationID = "to_location_id"
    }
}

/// Stores information about an invoice. You use the Invoices API to create and manage
/// invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
public struct Invoice: Codable {
    /// The payment methods that customers can use to pay an invoice on the Square-hosted invoice page.
    public var acceptedPaymentMethods: InvoiceAcceptedPaymentMethods?
    /// The timestamp when the invoice was created, in RFC 3339 format.
    public var createdAt: String?
    /// Additional seller-defined fields to render on the invoice. These fields are visible to sellers and buyers
    /// on the Square-hosted invoice page and in emailed or PDF copies of invoices. For more information, see
    /// [Custom fields](https://developer.squareup.com/docs/invoices-api/overview#custom-fields).
    /// 
    /// Adding custom fields to an invoice requires an
    /// [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
    /// 
    /// Max: 2 custom fields
    public var customFields: [InvoiceCustomField]?
    public var deliveryMethod: AnyJSON?
    /// The description of the invoice. This is visible to the customer receiving the invoice.
    public var description: String?
    /// The Square-assigned ID of the invoice.
    public var id: String?
    /// A user-friendly invoice number. The value is unique within a location.
    /// If not provided when creating an invoice, Square assigns a value.
    /// It increments from 1 and padded with zeros making it 7 characters long
    /// (for example, 0000001 and 0000002).
    public var invoiceNumber: String?
    /// The ID of the location that this invoice is associated with.
    /// 
    /// If specified in a `CreateInvoice` request, the value must match the `location_id` of the associated order.
    public var locationID: String?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var nextPaymentAmountMoney: Money?
    /// The ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) for which the invoice is created.
    /// This field is required when creating an invoice, and the order must be in the `OPEN` state.
    /// 
    /// To view the line items and other information for the associated order, call the
    /// [RetrieveOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/retrieve-order) endpoint using the order ID.
    public var orderID: String?
    /// The payment schedule for the invoice, represented by one or more payment requests that
    /// define payment settings, such as amount due and due date. An invoice supports the following payment request combinations:
    /// - One balance
    /// - One deposit with one balance
    /// - 2â€“12 installments
    /// - One deposit with 2â€“12 installments
    /// 
    /// This field is required when creating an invoice. It must contain at least one payment request.
    /// All payment requests for the invoice must equal the total order amount. For more information, see
    /// [Payment requests](https://developer.squareup.com/docs/invoices-api/overview#payment-requests).
    /// 
    /// Adding `INSTALLMENT` payment requests to an invoice requires an
    /// [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
    public var paymentRequests: [InvoicePaymentRequest]?
    /// Provides customer data that Square uses to deliver an invoice.
    public var primaryRecipient: InvoiceRecipient?
    /// The URL of the Square-hosted invoice page.
    /// After you publish the invoice using the `PublishInvoice` endpoint, Square hosts the invoice
    /// page and returns the page URL in the response.
    public var publicURL: String?
    /// The timestamp when the invoice is scheduled for processing, in RFC 3339 format.
    /// After the invoice is published, Square processes the invoice on the specified date,
    /// according to the delivery method and payment request settings.
    /// 
    /// If the field is not set, Square processes the invoice immediately after it is published.
    public var scheduledAt: String?
    /// The status of the invoice.
    public var status: String?
    /// The ID of the [subscription](https://developer.squareup.com/reference/square_2021-08-18/objects/Subscription) associated with the invoice.
    /// This field is present only on subscription billing invoices.
    public var subscriptionID: String?
    /// The time zone used to interpret calendar dates on the invoice, such as `due_date`.
    /// When an invoice is created, this field is set to the `timezone` specified for the seller
    /// location. The value cannot be changed.
    /// 
    /// For example, a payment `due_date` of 2021-03-09 with a `timezone` of America/Los\_Angeles
    /// becomes overdue at midnight on March 9 in America/Los\_Angeles (which equals a UTC timestamp
    /// of 2021-03-10T08:00:00Z).
    public var timezone: String?
    /// The title of the invoice.
    public var title: String?
    /// The timestamp when the invoice was last updated, in RFC 3339 format.
    public var updatedAt: String?
    /// The Square-assigned version number, which is incremented each time an update is committed to the invoice.
    public var version: Int?

    public init(acceptedPaymentMethods: InvoiceAcceptedPaymentMethods? = nil, createdAt: String? = nil, customFields: [InvoiceCustomField]? = nil, deliveryMethod: AnyJSON? = nil, description: String? = nil, id: String? = nil, invoiceNumber: String? = nil, locationID: String? = nil, nextPaymentAmountMoney: Money? = nil, orderID: String? = nil, paymentRequests: [InvoicePaymentRequest]? = nil, primaryRecipient: InvoiceRecipient? = nil, publicURL: String? = nil, scheduledAt: String? = nil, status: String? = nil, subscriptionID: String? = nil, timezone: String? = nil, title: String? = nil, updatedAt: String? = nil, version: Int? = nil) {
        self.acceptedPaymentMethods = acceptedPaymentMethods
        self.createdAt = createdAt
        self.customFields = customFields
        self.deliveryMethod = deliveryMethod
        self.description = description
        self.id = id
        self.invoiceNumber = invoiceNumber
        self.locationID = locationID
        self.nextPaymentAmountMoney = nextPaymentAmountMoney
        self.orderID = orderID
        self.paymentRequests = paymentRequests
        self.primaryRecipient = primaryRecipient
        self.publicURL = publicURL
        self.scheduledAt = scheduledAt
        self.status = status
        self.subscriptionID = subscriptionID
        self.timezone = timezone
        self.title = title
        self.updatedAt = updatedAt
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case acceptedPaymentMethods = "accepted_payment_methods"
        case createdAt = "created_at"
        case customFields = "custom_fields"
        case deliveryMethod = "delivery_method"
        case description
        case id
        case invoiceNumber = "invoice_number"
        case locationID = "location_id"
        case nextPaymentAmountMoney = "next_payment_amount_money"
        case orderID = "order_id"
        case paymentRequests = "payment_requests"
        case primaryRecipient = "primary_recipient"
        case publicURL = "public_url"
        case scheduledAt = "scheduled_at"
        case status
        case subscriptionID = "subscription_id"
        case timezone
        case title
        case updatedAt = "updated_at"
        case version
    }
}

/// The payment methods that customers can use to pay an invoice on the Square-hosted invoice page.
public struct InvoiceAcceptedPaymentMethods: Codable {
    /// Indicates whether bank transfer payments are accepted. The default value is `false`.
    /// 
    /// This option is allowed only for invoices that have a single payment request of type `BALANCE`.
    public var isBankAccount: Bool?
    /// Indicates whether credit card or debit card payments are accepted. The default value is `false`.
    public var isCard: Bool?
    /// Indicates whether Square gift card payments are accepted. The default value is `false`.
    public var isSquareGiftCard: Bool?

    public init(isBankAccount: Bool? = nil, isCard: Bool? = nil, isSquareGiftCard: Bool? = nil) {
        self.isBankAccount = isBankAccount
        self.isCard = isCard
        self.isSquareGiftCard = isSquareGiftCard
    }

    private enum CodingKeys: String, CodingKey {
        case isBankAccount = "bank_account"
        case isCard = "card"
        case isSquareGiftCard = "square_gift_card"
    }
}

/// Indicates the automatic payment method for an [invoice payment request](https://developer.squareup.com/reference/square_2021-08-18/objects/InvoicePaymentRequest).
public enum InvoiceAutomaticPaymentSource: String, Codable, CaseIterable {
    case `none` = "NONE"
    case cardOnFile = "CARD_ON_FILE"
    case bankOnFile = "BANK_ON_FILE"
}

/// An additional seller-defined and customer-facing field to include on the invoice. For more information,
/// see [Custom fields](https://developer.squareup.com/docs/invoices-api/overview#custom-fields).
/// 
/// Adding custom fields to an invoice requires an
/// [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
public struct InvoiceCustomField: Codable {
    /// The label or title of the custom field. This field is required for a custom field.
    public var label: String?
    /// The location of the custom field on the invoice. This field is required for a custom field.
    public var placement: String?
    /// The text of the custom field. If omitted, only the label is rendered.
    public var value: String?

    public init(label: String? = nil, placement: String? = nil, value: String? = nil) {
        self.label = label
        self.placement = placement
        self.value = value
    }
}

/// Indicates where to render a custom field on the Square-hosted invoice page and in emailed or PDF
/// copies of the invoice.
public enum InvoiceCustomFieldPlacement: String, Codable, CaseIterable {
    case aboveLineItems = "ABOVE_LINE_ITEMS"
    case belowLineItems = "BELOW_LINE_ITEMS"
}

/// Indicates how Square delivers the [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) to the customer.
public enum InvoiceDeliveryMethod: String, Codable, CaseIterable {
    case email = "EMAIL"
    case shareManually = "SHARE_MANUALLY"
    case sms = "SMS"
}

/// Describes query filters to apply.
public struct InvoiceFilter: Codable {
    /// Limits the search to the specified customers, within the specified locations.
    /// Specifying a customer is optional. In the current implementation,
    /// a maximum of one customer can be specified.
    public var customerIDs: [String]?
    /// Limits the search to the specified locations. A location is required.
    /// In the current implementation, only one location can be specified.
    public var locationIDs: [String]

    public init(customerIDs: [String]? = nil, locationIDs: [String]) {
        self.customerIDs = customerIDs
        self.locationIDs = locationIDs
    }

    private enum CodingKeys: String, CodingKey {
        case customerIDs = "customer_ids"
        case locationIDs = "location_ids"
    }
}

/// Describes a payment request reminder (automatic notification) that Square sends
/// to the customer. You configure a reminder relative to the payment request
/// `due_date`.
public struct InvoicePaymentReminder: Codable {
    /// The reminder message.
    public var message: String?
    /// The number of days before (a negative number) or after (a positive number)
    /// the payment request `due_date` when the reminder is sent. For example, -3 indicates that
    /// the reminder should be sent 3 days before the payment request `due_date`.
    public var relativeScheduledDays: Int?
    /// If sent, the timestamp when the reminder was sent, in RFC 3339 format.
    public var sentAt: String?
    /// The status of the reminder.
    public var status: String?
    /// A Square-assigned ID that uniquely identifies the reminder within the
    /// `InvoicePaymentRequest`.
    public var uid: String?

    public init(message: String? = nil, relativeScheduledDays: Int? = nil, sentAt: String? = nil, status: String? = nil, uid: String? = nil) {
        self.message = message
        self.relativeScheduledDays = relativeScheduledDays
        self.sentAt = sentAt
        self.status = status
        self.uid = uid
    }

    private enum CodingKeys: String, CodingKey {
        case message
        case relativeScheduledDays = "relative_scheduled_days"
        case sentAt = "sent_at"
        case status
        case uid
    }
}

/// The status of a payment request reminder.
public enum InvoicePaymentReminderStatus: String, Codable, CaseIterable {
    case pending = "PENDING"
    case notApplicable = "NOT_APPLICABLE"
    case sent = "SENT"
}

/// Represents a payment request for an [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice). Invoices can specify a maximum
/// of 13 payment requests, with up to 12 `INSTALLMENT` request types. For more information,
/// see [Payment requests](https://developer.squareup.com/docs/invoices-api/overview#payment-requests).
/// 
/// Adding `INSTALLMENT` payment requests to an invoice requires an
/// [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
public struct InvoicePaymentRequest: Codable {
    /// The payment method for an automatic payment.
    /// 
    /// The default value is `NONE`.
    public var automaticPaymentSource: String?
    /// The ID of the credit or debit card on file to charge for the payment request. To get the cards on file for a customer,
    /// call [ListCards](https://developer.squareup.com/reference/square_2021-08-18/cards-api/list-cards) and include the `customer_id` of the invoice recipient.
    public var cardID: String?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var computedAmountMoney: Money?
    /// The due date (in the invoice's time zone) for the payment request, in `YYYY-MM-DD` format. This field
    /// is required to create a payment request.
    /// 
    /// After this date, the invoice becomes overdue. For example, a payment `due_date` of 2021-03-09 with a `timezone`
    /// of America/Los\_Angeles becomes overdue at midnight on March 9 in America/Los\_Angeles (which equals a UTC
    /// timestamp of 2021-03-10T08:00:00Z).
    public var dueDate: String?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var fixedAmountRequestedMoney: Money?
    /// Specifies the amount for the payment request in percentage:
    /// 
    /// - When the payment `request_type` is `DEPOSIT`, it is the percentage of the order's total amount.
    /// - When the payment `request_type` is `INSTALLMENT`, it is the percentage of the order's total less
    /// the deposit, if requested. The sum of the `percentage_requested` in all installment
    /// payment requests must be equal to 100.
    /// 
    /// You cannot specify this when the payment `request_type` is `BALANCE` or when the
    /// payment request specifies the `fixed_amount_requested_money` field.
    public var percentageRequested: String?
    /// A list of one or more reminders to send for the payment request.
    public var reminders: [InvoicePaymentReminder]?
    /// Indicates how Square processes the payment request. DEPRECATED at version 2021-01-21. Replaced by the
    /// `Invoice.delivery_method` and `InvoicePaymentRequest.automatic_payment_source` fields.
    /// 
    /// One of the following is required when creating an invoice:
    /// - (Recommended) The `delivery_method` field of the invoice. To configure an automatic payment, the
    /// `automatic_payment_source` field of the payment request is also required.
    /// - This `request_method` field. Note that `invoice` objects returned in responses do not include `request_method`.
    public var requestMethod: String?
    /// Identifies the payment request type. This type defines how the payment request amount is determined.
    /// This field is required to create a payment request.
    public var requestType: String?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var roundingAdjustmentIncludedMoney: Money?
    /// If set to true, the Square-hosted invoice page (the `public_url` field of the invoice)
    /// provides a place for the customer to pay a tip.
    /// 
    /// This field is allowed only on the final payment request
    /// and the payment `request_type` must be `BALANCE` or `INSTALLMENT`.
    public var isTippingEnabled: Bool?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var totalCompletedAmountMoney: Money?
    /// The Square-generated ID of the payment request in an [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice).
    public var uid: String?

    public init(automaticPaymentSource: String? = nil, cardID: String? = nil, computedAmountMoney: Money? = nil, dueDate: String? = nil, fixedAmountRequestedMoney: Money? = nil, percentageRequested: String? = nil, reminders: [InvoicePaymentReminder]? = nil, requestMethod: String? = nil, requestType: String? = nil, roundingAdjustmentIncludedMoney: Money? = nil, isTippingEnabled: Bool? = nil, totalCompletedAmountMoney: Money? = nil, uid: String? = nil) {
        self.automaticPaymentSource = automaticPaymentSource
        self.cardID = cardID
        self.computedAmountMoney = computedAmountMoney
        self.dueDate = dueDate
        self.fixedAmountRequestedMoney = fixedAmountRequestedMoney
        self.percentageRequested = percentageRequested
        self.reminders = reminders
        self.requestMethod = requestMethod
        self.requestType = requestType
        self.roundingAdjustmentIncludedMoney = roundingAdjustmentIncludedMoney
        self.isTippingEnabled = isTippingEnabled
        self.totalCompletedAmountMoney = totalCompletedAmountMoney
        self.uid = uid
    }

    private enum CodingKeys: String, CodingKey {
        case automaticPaymentSource = "automatic_payment_source"
        case cardID = "card_id"
        case computedAmountMoney = "computed_amount_money"
        case dueDate = "due_date"
        case fixedAmountRequestedMoney = "fixed_amount_requested_money"
        case percentageRequested = "percentage_requested"
        case reminders
        case requestMethod = "request_method"
        case requestType = "request_type"
        case roundingAdjustmentIncludedMoney = "rounding_adjustment_included_money"
        case isTippingEnabled = "tipping_enabled"
        case totalCompletedAmountMoney = "total_completed_amount_money"
        case uid
    }
}

/// Describes query criteria for searching invoices.
public struct InvoiceQuery: Codable {
    /// Describes query filters to apply.
    public var filter: InvoiceFilter
    /// Identifies the sort field and sort order.
    public var sort: InvoiceSort?

    public init(filter: InvoiceFilter, sort: InvoiceSort? = nil) {
        self.filter = filter
        self.sort = sort
    }
}

/// Provides customer data that Square uses to deliver an invoice.
public struct InvoiceRecipient: Codable {
    /// Represents a postal address in a country. The address format is based
    /// on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
    /// see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
    /// This format has dedicated fields for four address components: postal code,
    /// locality (city), administrative district (state, prefecture, or province), and
    /// sublocality (town or village). These components have dedicated fields in the
    /// `Address` object because software sometimes behaves differently based on them.
    /// For example, sales tax software may charge different amounts of sales tax
    /// based on the postal code, and some software is only available in
    /// certain states due to compliance reasons.
    /// 
    /// For the remaining address components, the `Address` type provides the
    /// `address_line_1` and `address_line_2` fields for free-form data entry.
    /// These fields are free-form because the remaining address components have
    /// too many variations around the world and typical software does not parse
    /// these components. These fields enable users to enter anything they want.
    /// 
    /// Note that, in the current implementation, all other `Address` type fields are blank.
    /// These include `address_line_3`, `sublocality_2`, `sublocality_3`,
    /// `administrative_district_level_2`, `administrative_district_level_3`,
    /// `first_name`, `last_name`, and `organization`.
    /// 
    /// When it comes to localization, the seller's language preferences
    /// (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
    /// are ignored for addresses. Even though Square products (such as Square Point of Sale
    /// and the Seller Dashboard) mostly use a seller's language preference in
    /// communication, when it comes to addresses, they will use English for a US address,
    /// Japanese for an address in Japan, and so on.
    public var address: Address?
    /// The name of the recipient's company.
    public var companyName: String?
    /// The ID of the customer. This is the customer profile ID that
    /// you provide when creating a draft invoice.
    public var customerID: String?
    /// The recipient's email address.
    public var emailAddress: String?
    /// The recipient's family (that is, last) name.
    public var familyName: String?
    /// The recipient's given (that is, first) name.
    public var givenName: String?
    /// The recipient's phone number.
    public var phoneNumber: String?

    public init(address: Address? = nil, companyName: String? = nil, customerID: String? = nil, emailAddress: String? = nil, familyName: String? = nil, givenName: String? = nil, phoneNumber: String? = nil) {
        self.address = address
        self.companyName = companyName
        self.customerID = customerID
        self.emailAddress = emailAddress
        self.familyName = familyName
        self.givenName = givenName
        self.phoneNumber = phoneNumber
    }

    private enum CodingKeys: String, CodingKey {
        case address
        case companyName = "company_name"
        case customerID = "customer_id"
        case emailAddress = "email_address"
        case familyName = "family_name"
        case givenName = "given_name"
        case phoneNumber = "phone_number"
    }
}

/// Specifies the action for Square to take for processing the invoice. For example,
/// email the invoice, charge a customer's card on file, or do nothing. DEPRECATED at
/// version 2021-01-21. The corresponding `request_method` field is replaced by the
/// `Invoice.delivery_method` and `InvoicePaymentRequest.automatic_payment_source` fields.
public enum InvoiceRequestMethod: String, Codable, CaseIterable {
    case email = "EMAIL"
    case chargeCardOnFile = "CHARGE_CARD_ON_FILE"
    case shareManually = "SHARE_MANUALLY"
    case chargeBankOnFile = "CHARGE_BANK_ON_FILE"
    case sms = "SMS"
    case smsChargeCardOnFile = "SMS_CHARGE_CARD_ON_FILE"
    case smsChargeBankOnFile = "SMS_CHARGE_BANK_ON_FILE"
}

/// Indicates the type of the payment request. For more information, see
/// [Payment requests](https://developer.squareup.com/docs/invoices-api/overview#payment-requests).
public enum InvoiceRequestType: String, Codable, CaseIterable {
    case balance = "BALANCE"
    case deposit = "DEPOSIT"
    case installment = "INSTALLMENT"
}

/// Identifies the sort field and sort order.
public struct InvoiceSort: Codable {
    /// The field to use for sorting.
    public var field: String
    /// The order to use for sorting the results.
    public var order: String?

    public init(field: String, order: String? = nil) {
        self.field = field
        self.order = order
    }
}

/// The field to use for sorting.
public enum InvoiceSortField: String, Codable, CaseIterable {
    case invoiceSortDate = "INVOICE_SORT_DATE"
}

/// Indicates the status of an invoice.
public enum InvoiceStatus: String, Codable, CaseIterable {
    case draft = "DRAFT"
    case unpaid = "UNPAID"
    case scheduled = "SCHEDULED"
    case partiallyPaid = "PARTIALLY_PAID"
    case paid = "PAID"
    case partiallyRefunded = "PARTIALLY_REFUNDED"
    case refunded = "REFUNDED"
    case canceled = "CANCELED"
    case failed = "FAILED"
    case paymentPending = "PAYMENT_PENDING"
}

/// Price and inventory alerting overrides for a `CatalogItemVariation` at a specific `Location`.
public struct ItemVariationLocationOverrides: Codable {
    /// If the inventory quantity for the variation is less than or equal to this value and `inventory_alert_type`
    /// is `LOW_QUANTITY`, the variation displays an alert in the merchant dashboard.
    /// 
    /// This value is always an integer.
    public var inventoryAlertThreshold: Int?
    /// Indicates whether the `CatalogItemVariation` displays an alert when its inventory
    /// quantity is less than or equal to its `inventory_alert_threshold`.
    public var inventoryAlertType: String?
    /// The ID of the `Location`. This can include locations that are deactivated.
    public var locationID: String?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var priceMoney: Money?
    /// The pricing type (fixed or variable) for the `CatalogItemVariation` at the given `Location`.
    public var pricingType: String?
    /// If `true`, inventory tracking is active for the `CatalogItemVariation` at this `Location`.
    public var isTrackInventory: Bool?

    public init(inventoryAlertThreshold: Int? = nil, inventoryAlertType: String? = nil, locationID: String? = nil, priceMoney: Money? = nil, pricingType: String? = nil, isTrackInventory: Bool? = nil) {
        self.inventoryAlertThreshold = inventoryAlertThreshold
        self.inventoryAlertType = inventoryAlertType
        self.locationID = locationID
        self.priceMoney = priceMoney
        self.pricingType = pricingType
        self.isTrackInventory = isTrackInventory
    }

    private enum CodingKeys: String, CodingKey {
        case inventoryAlertThreshold = "inventory_alert_threshold"
        case inventoryAlertType = "inventory_alert_type"
        case locationID = "location_id"
        case priceMoney = "price_money"
        case pricingType = "pricing_type"
        case isTrackInventory = "track_inventory"
    }
}

/// An object describing a job that a team member is assigned to.
public struct JobAssignment: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var annualRate: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var hourlyRate: Money?
    /// The title of the job.
    public var jobTitle: String
    /// The current pay type for the job assignment used to
    /// calculate the pay amount in a pay period.
    public var payType: String
    /// The planned hours per week for the job. Set if the job `PayType` is `SALARY`.
    public var weeklyHours: Int?

    public init(annualRate: Money? = nil, hourlyRate: Money? = nil, jobTitle: String, payType: String, weeklyHours: Int? = nil) {
        self.annualRate = annualRate
        self.hourlyRate = hourlyRate
        self.jobTitle = jobTitle
        self.payType = payType
        self.weeklyHours = weeklyHours
    }

    private enum CodingKeys: String, CodingKey {
        case annualRate = "annual_rate"
        case hourlyRate = "hourly_rate"
        case jobTitle = "job_title"
        case payType = "pay_type"
        case weeklyHours = "weekly_hours"
    }
}

/// Enumerates the possible pay types that a job can be assigned.
public enum JobAssignmentPayType: String, Codable, CaseIterable {
    case `none` = "NONE"
    case hourly = "HOURLY"
    case salary = "SALARY"
}

/// A request to link a customer to a gift card
///
/// Example:
///
/// {
///   "request_body" : {
///     "customer_id" : "GKY0FZ3V717AH8Q2D821PNT2ZW"
///   },
///   "request_params" : "?gift_card_id=gftc:71ea002277a34f8a945e284b04822edb"
/// }
public struct LinkCustomerToGiftCardRequest: Codable {
    /// The ID of the customer to be linked.
    public var customerID: String

    public init(customerID: String) {
        self.customerID = customerID
    }

    private enum CodingKeys: String, CodingKey {
        case customerID = "customer_id"
    }
}

/// A response that contains one `GiftCard` that was linked. The response might contain a set of `Error`
/// objects if the request resulted in errors.
///
/// Example:
///
/// {
///   "gift_card" : {
///     "balance_money" : {
///       "amount" : 2500,
///       "currency" : "USD"
///     },
///     "created_at" : "2021-03-25T05:13:01Z",
///     "customer_ids" : [
///       "GKY0FZ3V717AH8Q2D821PNT2ZW"
///     ],
///     "gan" : "7783320005440920",
///     "gan_source" : "SQUARE",
///     "id" : "gftc:71ea002277a34f8a945e284b04822edb",
///     "state" : "ACTIVE",
///     "type" : "DIGITAL"
///   }
/// }
public struct LinkCustomerToGiftCardResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Represents a Square gift card.
    public var giftCard: GiftCard?

    public init(errors: [Error]? = nil, giftCard: GiftCard? = nil) {
        self.errors = errors
        self.giftCard = giftCard
    }

    private enum CodingKeys: String, CodingKey {
        case errors
        case giftCard = "gift_card"
    }
}

/// Request object for fetching all `BankAccount`
/// objects linked to a account.
public struct ListBankAccountsRequest: Codable {
    /// The pagination cursor returned by a previous call to this endpoint.
    /// Use it in the next `ListBankAccounts` request to retrieve the next set
    /// of results.
    /// 
    /// See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
    public var cursor: String?
    /// Upper limit on the number of bank accounts to return in the response.
    /// Currently, 1000 is the largest supported limit. You can specify a limit
    /// of up to 1000 bank accounts. This is also the default limit.
    public var limit: Int?
    /// Location ID. You can specify this optional filter
    /// to retrieve only the linked bank accounts belonging to a specific location.
    public var locationID: String?

    public init(cursor: String? = nil, limit: Int? = nil, locationID: String? = nil) {
        self.cursor = cursor
        self.limit = limit
        self.locationID = locationID
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case limit
        case locationID = "location_id"
    }
}

/// Response object returned by ListBankAccounts.
///
/// Example:
///
/// {
///   "bank_accounts" : [
///     {
///       "account_number_suffix" : "971",
///       "account_type" : "CHECKING",
///       "bank_name" : "Bank Name",
///       "country" : "US",
///       "creditable" : false,
///       "currency" : "USD",
///       "debitable" : false,
///       "holder_name" : "Jane Doe",
///       "id" : "ao6iaQ9vhDiaQD7n3GB",
///       "location_id" : "S8GWD5example",
///       "primary_bank_identification_number" : "112200303",
///       "status" : "VERIFICATION_IN_PROGRESS",
///       "version" : 5
///     },
///     {
///       "account_number_suffix" : "972",
///       "account_type" : "CHECKING",
///       "bank_name" : "Bank Name",
///       "country" : "US",
///       "creditable" : false,
///       "currency" : "USD",
///       "debitable" : false,
///       "holder_name" : "Jane Doe",
///       "id" : "4x7WXuaxrkQkVlka3GB",
///       "location_id" : "S8GWD5example",
///       "primary_bank_identification_number" : "112200303",
///       "status" : "VERIFICATION_IN_PROGRESS",
///       "version" : 5
///     }
///   ]
/// }
public struct ListBankAccountsResponse: Codable {
    /// List of BankAccounts associated with this account.
    public var bankAccounts: [BankAccount]?
    /// When a response is truncated, it includes a cursor that you can
    /// use in a subsequent request to fetch next set of bank accounts.
    /// If empty, this is the final response.
    /// 
    /// For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
    public var cursor: String?
    /// Information on errors encountered during the request.
    public var errors: [Error]?

    public init(bankAccounts: [BankAccount]? = nil, cursor: String? = nil, errors: [Error]? = nil) {
        self.bankAccounts = bankAccounts
        self.cursor = cursor
        self.errors = errors
    }

    private enum CodingKeys: String, CodingKey {
        case bankAccounts = "bank_accounts"
        case cursor
        case errors
    }
}

/// A request for a filtered set of `BreakType` objects.
///
/// Example:
///
/// {
///   "request_params" : "?location_id=PAA1RJZZKXBFG&limit=2&cursor=s4R0Z6ecFTzTC4jz8sUDBQTudX3KE313OT9fCt3VUgsXM4sMgED"
/// }
public struct ListBreakTypesRequest: Codable {
    /// A pointer to the next page of `BreakType` results to fetch.
    public var cursor: String?
    /// The maximum number of `BreakType` results to return per page. The number can range between 1
    /// and 200. The default is 200.
    public var limit: Int?
    /// Filter the returned `BreakType` results to only those that are associated with the
    /// specified location.
    public var locationID: String?

    public init(cursor: String? = nil, limit: Int? = nil, locationID: String? = nil) {
        self.cursor = cursor
        self.limit = limit
        self.locationID = locationID
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case limit
        case locationID = "location_id"
    }
}

/// The response to a request for a set of `BreakType` objects. The response contains
/// the requested `BreakType` objects and might contain a set of `Error` objects if
/// the request resulted in errors.
///
/// Example:
///
/// {
///   "break_types" : [
///     {
///       "break_name" : "Coffee Break",
///       "created_at" : "2019-01-22T20:47:37Z",
///       "expected_duration" : "PT5M",
///       "id" : "REGS1EQR1TPZ5",
///       "is_paid" : false,
///       "location_id" : "PAA1RJZZKXBFG",
///       "updated_at" : "2019-01-22T20:47:37Z",
///       "version" : 1
///     },
///     {
///       "break_name" : "Lunch Break",
///       "created_at" : "2019-01-25T19:26:30Z",
///       "expected_duration" : "PT1H",
///       "id" : "92EPDRQKJ5088",
///       "is_paid" : true,
///       "location_id" : "PAA1RJZZKXBFG",
///       "updated_at" : "2019-01-25T19:26:30Z",
///       "version" : 3
///     }
///   ],
///   "cursor" : "2fofTniCgT0yIPAq26kmk0YyFQJZfbWkh73OOnlTHmTAx13NgED"
/// }
public struct ListBreakTypesResponse: Codable {
    /// A page of `BreakType` results.
    public var breakTypes: [BreakType]?
    /// The value supplied in the subsequent request to fetch the next page
    /// of `BreakType` results.
    public var cursor: String?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(breakTypes: [BreakType]? = nil, cursor: String? = nil, errors: [Error]? = nil) {
        self.breakTypes = breakTypes
        self.cursor = cursor
        self.errors = errors
    }

    private enum CodingKeys: String, CodingKey {
        case breakTypes = "break_types"
        case cursor
        case errors
    }
}

/// Retrieves details for a specific Card. Accessible via
/// HTTP requests at GET https://connect.squareup.com/v2/cards
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct ListCardsRequest: Codable {
    /// A pagination cursor returned by a previous call to this endpoint.
    /// Provide this to retrieve the next set of results for your original query.
    /// 
    /// See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
    public var cursor: String?
    /// Limit results to cards associated with the customer supplied.
    /// By default, all cards owned by the merchant are returned.
    public var customerID: String?
    /// Includes disabled cards.
    /// By default, all enabled cards owned by the merchant are returned.
    public var isIncludeDisabled: Bool?
    /// Limit results to cards associated with the reference_id supplied.
    public var referenceID: String?
    /// Sorts the returned list by when the card was created with the specified order.
    /// This field defaults to ASC.
    public var sortOrder: String?

    public init(cursor: String? = nil, customerID: String? = nil, isIncludeDisabled: Bool? = nil, referenceID: String? = nil, sortOrder: String? = nil) {
        self.cursor = cursor
        self.customerID = customerID
        self.isIncludeDisabled = isIncludeDisabled
        self.referenceID = referenceID
        self.sortOrder = sortOrder
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case customerID = "customer_id"
        case isIncludeDisabled = "include_disabled"
        case referenceID = "reference_id"
        case sortOrder = "sort_order"
    }
}

/// Defines the fields that are included in the response body of
/// a request to the [ListCards](#endpoint-cards-listcards) endpoint.
/// 
/// Note: if there are errors processing the request, the card field will not be
/// present.
///
/// Example:
///
/// {
///   "cards" : [
///     {
///       "card" : {
///         "billing_address" : {
///           "address_line_1" : "500 Electric Ave",
///           "address_line_2" : "Suite 600",
///           "administrative_district_level_1" : "NY",
///           "country" : "US",
///           "locality" : "New York",
///           "postal_code" : "10003"
///         },
///         "bin" : "411111",
///         "card_brand" : "VISA",
///         "card_type" : "CREDIT",
///         "cardholder_name" : "Amelia Earhart",
///         "customer_id" : "VDKXEEKPJN48QDG3BGGFAK05P8",
///         "enabled" : true,
///         "exp_month" : 11,
///         "exp_year" : 2022,
///         "fingerprint" : "ex-p-cs80EK9Flz7LsCMv-szbptQ_ssAGrhemzSTsPFgt9nzyE6t7okiLIQc-qw_quqKX4Q",
///         "id" : "ccof:uIbfJXhXETSP197M3GB",
///         "last_4" : "1111",
///         "prepaid_type" : "NOT_PREPAID",
///         "reference_id" : "user-id-1",
///         "version" : 1
///       }
///     }
///   ]
/// }
public struct ListCardsResponse: Codable {
    /// The requested list of `Card`s.
    public var cards: [Card]?
    /// The pagination cursor to be used in a subsequent request. If empty,
    /// this is the final response.
    /// 
    /// See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
    public var cursor: String?
    /// Information on errors encountered during the request.
    public var errors: [Error]?

    public init(cards: [Card]? = nil, cursor: String? = nil, errors: [Error]? = nil) {
        self.cards = cards
        self.cursor = cursor
        self.errors = errors
    }
}

/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct ListCashDrawerShiftEventsRequest: Codable {
    /// Opaque cursor for fetching the next page of results.
    public var cursor: String?
    /// Number of resources to be returned in a page of results (200 by
    /// default, 1000 max).
    public var limit: Int?
    /// The ID of the location to list cash drawer shifts for.
    public var locationID: String

    public init(cursor: String? = nil, limit: Int? = nil, locationID: String) {
        self.cursor = cursor
        self.limit = limit
        self.locationID = locationID
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case limit
        case locationID = "location_id"
    }
}

/// Example:
///
/// {
///   "events" : [
///     {
///       "created_at" : "2019-11-22T00:43:02.000Z",
///       "description" : null,
///       "event_money" : {
///         "amount" : 100,
///         "currency" : "USD"
///       },
///       "event_type" : "CASH_TENDER_PAYMENT",
///       "id" : "9F07DB01-D85A-4B77-88C3-D5C64CEB5155"
///     },
///     {
///       "created_at" : "2019-11-22T00:43:12.000Z",
///       "description" : null,
///       "event_money" : {
///         "amount" : 250,
///         "currency" : "USD"
///       },
///       "event_type" : "CASH_TENDER_PAYMENT",
///       "id" : "B2854CEA-A781-49B3-8F31-C64558231F48"
///     },
///     {
///       "created_at" : "2019-11-22T00:43:23.000Z",
///       "description" : null,
///       "event_money" : {
///         "amount" : 250,
///         "currency" : "USD"
///       },
///       "event_type" : "CASH_TENDER_CANCELLED_PAYMENT",
///       "id" : "B5FB7F72-95CD-44A3-974D-26C41064D042"
///     },
///     {
///       "created_at" : "2019-11-22T00:43:46.000Z",
///       "description" : null,
///       "event_money" : {
///         "amount" : 100,
///         "currency" : "USD"
///       },
///       "event_type" : "CASH_TENDER_REFUND",
///       "id" : "0B425480-8504-40B4-A867-37B23543931B"
///     },
///     {
///       "created_at" : "2019-11-22T00:44:18.000Z",
///       "description" : "Transfer from another drawer",
///       "event_money" : {
///         "amount" : 10000,
///         "currency" : "USD"
///       },
///       "event_type" : "PAID_IN",
///       "id" : "8C66E60E-FDCF-4EEF-A98D-3B14B7ED5CBE"
///     },
///     {
///       "created_at" : "2019-11-22T00:44:29.000Z",
///       "description" : "Transfer out to another drawer",
///       "event_money" : {
///         "amount" : 10000,
///         "currency" : "USD"
///       },
///       "event_type" : "PAID_OUT",
///       "id" : "D5ACA7FE-C64D-4ADA-8BC8-82118A2DAE4F"
///     }
///   ]
/// }
public struct ListCashDrawerShiftEventsResponse: Codable {
    /// Opaque cursor for fetching the next page. Cursor is not present in
    /// the last page of results.
    public var cursor: String?
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// All of the events (payments, refunds, etc.) for a cash drawer during
    /// the shift.
    public var events: [CashDrawerShiftEvent]?

    public init(cursor: String? = nil, errors: [Error]? = nil, events: [CashDrawerShiftEvent]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.events = events
    }
}

/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct ListCashDrawerShiftsRequest: Codable {
    /// The inclusive start time of the query on opened_at, in ISO 8601 format.
    public var beginTime: String?
    /// Opaque cursor for fetching the next page of results.
    public var cursor: String?
    /// The exclusive end date of the query on opened_at, in ISO 8601 format.
    public var endTime: String?
    /// Number of cash drawer shift events in a page of results (200 by
    /// default, 1000 max).
    public var limit: Int?
    /// The ID of the location to query for a list of cash drawer shifts.
    public var locationID: String
    /// The order in which cash drawer shifts are listed in the response,
    /// based on their opened_at field. Default value: ASC
    public var sortOrder: String?

    public init(beginTime: String? = nil, cursor: String? = nil, endTime: String? = nil, limit: Int? = nil, locationID: String, sortOrder: String? = nil) {
        self.beginTime = beginTime
        self.cursor = cursor
        self.endTime = endTime
        self.limit = limit
        self.locationID = locationID
        self.sortOrder = sortOrder
    }

    private enum CodingKeys: String, CodingKey {
        case beginTime = "begin_time"
        case cursor
        case endTime = "end_time"
        case limit
        case locationID = "location_id"
        case sortOrder = "sort_order"
    }
}

/// Example:
///
/// {
///   "items" : [
///     {
///       "closed_at" : "2019-11-22T00:44:49.000Z",
///       "closed_cash_money" : {
///         "amount" : 9970,
///         "currency" : "USD"
///       },
///       "description" : "Misplaced some change",
///       "ended_at" : "2019-11-22T00:44:49.000Z",
///       "expected_cash_money" : {
///         "amount" : 10000,
///         "currency" : "USD"
///       },
///       "id" : "DCC99978-09A6-4926-849F-300BE9C5793A",
///       "opened_at" : "2019-11-22T00:42:54.000Z",
///       "opened_cash_money" : {
///         "amount" : 10000,
///         "currency" : "USD"
///       },
///       "state" : "CLOSED"
///     }
///   ]
/// }
public struct ListCashDrawerShiftsResponse: Codable {
    /// Opaque cursor for fetching the next page of results. Cursor is not
    /// present in the last page of results.
    public var cursor: String?
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// A collection of CashDrawerShiftSummary objects for shifts that match
    /// the query.
    public var items: [CashDrawerShiftSummary]?

    public init(cursor: String? = nil, errors: [Error]? = nil, items: [CashDrawerShiftSummary]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.items = items
    }
}

/// Example:
///
/// {
///   "request_params" : "?types=category,tax"
/// }
public struct ListCatalogRequest: Codable {
    /// The specific version of the catalog objects to be included in the response.
    /// This allows you to retrieve historical
    /// versions of objects. The specified version value is matched against
    /// the [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s' `version` attribute.
    public var catalogVersion: Int?
    /// The pagination cursor returned in the previous response. Leave unset for an initial request.
    /// The page size is currently set to be 100.
    /// See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
    public var cursor: String?
    /// An optional case-insensitive, comma-separated list of object types to retrieve.
    /// 
    /// The valid values are defined in the [CatalogObjectType](https://developer.squareup.com/reference/square_2021-08-18/enums/CatalogObjectType) enum, including
    /// `ITEM`, `ITEM_VARIATION`, `CATEGORY`, `DISCOUNT`, `TAX`,
    /// `MODIFIER`, `MODIFIER_LIST`, or `IMAGE`.
    /// 
    /// If this is unspecified, the operation returns objects of all the types at the version of the Square API used to make the request.
    public var types: String?

    public init(catalogVersion: Int? = nil, cursor: String? = nil, types: String? = nil) {
        self.catalogVersion = catalogVersion
        self.cursor = cursor
        self.types = types
    }

    private enum CodingKeys: String, CodingKey {
        case catalogVersion = "catalog_version"
        case cursor
        case types
    }
}

/// Example:
///
/// {
///   "objects" : [
///     {
///       "category_data" : {
///         "name" : "Beverages"
///       },
///       "id" : "5ZYQZZ2IECPVJ2IJ5KQPRDC3",
///       "is_deleted" : false,
///       "present_at_all_locations" : true,
///       "type" : "CATEGORY",
///       "updated_at" : "2017-02-21T14:50:26.495Z",
///       "version" : 1487688626495
///     },
///     {
///       "id" : "L5R47DGBZOOVKCAFIXC56AEN",
///       "is_deleted" : false,
///       "present_at_all_locations" : true,
///       "tax_data" : {
///         "calculation_phase" : "TAX_SUBTOTAL_PHASE",
///         "enabled" : true,
///         "inclusion_type" : "ADDITIVE",
///         "name" : "Sales Tax",
///         "percentage" : "5.0"
///       },
///       "type" : "TAX",
///       "updated_at" : "2017-02-21T14:50:26.495Z",
///       "version" : 1487688626495
///     }
///   ]
/// }
public struct ListCatalogResponse: Codable {
    /// The pagination cursor to be used in a subsequent request. If unset, this is the final response.
    /// See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
    public var cursor: String?
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// The CatalogObjects returned.
    public var objects: [CatalogObject]?

    public init(cursor: String? = nil, errors: [Error]? = nil, objects: [CatalogObject]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.objects = objects
    }
}

/// Defines the query parameters that can be included in a request to the
/// [ListCustomerGroups](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/list-customer-groups) endpoint.
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct ListCustomerGroupsRequest: Codable {
    /// A pagination cursor returned by a previous call to this endpoint.
    /// Provide this cursor to retrieve the next set of results for your original query.
    /// 
    /// For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
    public var cursor: String?
    /// The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results.
    /// The limit is ignored if it is less than 1 or greater than 50. The default value is 50.
    /// 
    /// For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
    public var limit: Int?

    public init(cursor: String? = nil, limit: Int? = nil) {
        self.cursor = cursor
        self.limit = limit
    }
}

/// Defines the fields that are included in the response body of
/// a request to the [ListCustomerGroups](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/list-customer-groups) endpoint.
/// 
/// Either `errors` or `groups` is present in a given response (never both).
///
/// Example:
///
/// {
///   "groups" : [
///     {
///       "created_at" : "2020-04-13T21:54:57.863Z",
///       "id" : "2TAT3CMH4Q0A9M87XJZED0WMR3",
///       "name" : "Loyal Customers",
///       "updated_at" : "2020-04-13T21:54:58Z"
///     },
///     {
///       "created_at" : "2020-04-13T21:55:18.795Z",
///       "id" : "4XMEHESXJBNE9S9JAKZD2FGB14",
///       "name" : "Super Loyal Customers",
///       "updated_at" : "2020-04-13T21:55:19Z"
///     }
///   ]
/// }
public struct ListCustomerGroupsResponse: Codable {
    /// A pagination cursor to retrieve the next set of results for your
    /// original query to the endpoint. This value is present only if the request
    /// succeeded and additional results are available.
    /// 
    /// For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
    public var cursor: String?
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// A list of customer groups belonging to the current seller.
    public var groups: [CustomerGroup]?

    public init(cursor: String? = nil, errors: [Error]? = nil, groups: [CustomerGroup]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.groups = groups
    }
}

/// Defines the valid parameters for requests to the `ListCustomerSegments` endpoint.
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct ListCustomerSegmentsRequest: Codable {
    /// A pagination cursor returned by previous calls to `ListCustomerSegments`.
    /// This cursor is used to retrieve the next set of query results.
    /// 
    /// For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
    public var cursor: String?
    /// The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results.
    /// The limit is ignored if it is less than 1 or greater than 50. The default value is 50.
    /// 
    /// For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
    public var limit: Int?

    public init(cursor: String? = nil, limit: Int? = nil) {
        self.cursor = cursor
        self.limit = limit
    }
}

/// Defines the fields that are included in the response body for requests to the `ListCustomerSegments` endpoint.
/// 
/// Either `errors` or `segments` is present in a given response (never both).
///
/// Example:
///
/// {
///   "segments" : [
///     {
///       "created_at" : "2020-01-09T19:33:24.469Z",
///       "id" : "GMNXRZVEXNQDF.CHURN_RISK",
///       "name" : "Lapsed",
///       "updated_at" : "2020-04-13T21:47:04Z"
///     },
///     {
///       "created_at" : "2020-01-09T19:33:24.486Z",
///       "id" : "GMNXRZVEXNQDF.LOYAL",
///       "name" : "Regulars",
///       "updated_at" : "2020-04-13T21:47:04Z"
///     },
///     {
///       "created_at" : "2020-01-09T19:33:21.813Z",
///       "id" : "GMNXRZVEXNQDF.REACHABLE",
///       "name" : "Reachable",
///       "updated_at" : "2020-04-13T21:47:04Z"
///     },
///     {
///       "created_at" : "2020-01-09T19:33:25Z",
///       "id" : "gv2:KF92J19VXN5FK30GX2E8HSGQ20",
///       "name" : "Instant Profile",
///       "updated_at" : "2020-04-13T23:01:03Z"
///     }
///   ]
/// }
public struct ListCustomerSegmentsResponse: Codable {
    /// A pagination cursor to be used in subsequent calls to `ListCustomerSegments`
    /// to retrieve the next set of query results. The cursor is only present if the request succeeded and
    /// additional results are available.
    /// 
    /// For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
    public var cursor: String?
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// The list of customer segments belonging to the associated Square account.
    public var segments: [CustomerSegment]?

    public init(cursor: String? = nil, errors: [Error]? = nil, segments: [CustomerSegment]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.segments = segments
    }
}

/// Defines the query parameters that can be included in a request to the
/// `ListCustomers` endpoint.
///
/// Example:
///
/// {
/// 
/// }
public struct ListCustomersRequest: Codable {
    /// A pagination cursor returned by a previous call to this endpoint.
    /// Provide this cursor to retrieve the next set of results for your original query.
    /// 
    /// For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
    public var cursor: String?
    /// The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results.
    /// The limit is ignored if it is less than 1 or greater than 100. The default value is 100.
    /// 
    /// For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
    public var limit: Int?
    /// Indicates how customers should be sorted.
    /// 
    /// The default value is `DEFAULT`.
    public var sortField: String?
    /// Indicates whether customers should be sorted in ascending (`ASC`) or
    /// descending (`DESC`) order.
    /// 
    /// The default value is `ASC`.
    public var sortOrder: String?

    public init(cursor: String? = nil, limit: Int? = nil, sortField: String? = nil, sortOrder: String? = nil) {
        self.cursor = cursor
        self.limit = limit
        self.sortField = sortField
        self.sortOrder = sortOrder
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case limit
        case sortField = "sort_field"
        case sortOrder = "sort_order"
    }
}

/// Defines the fields that are included in the response body of
/// a request to the `ListCustomers` endpoint.
/// 
/// Either `errors` or `customers` is present in a given response (never both).
///
/// Example:
///
/// {
///   "customers" : [
///     {
///       "address" : {
///         "address_line_1" : "500 Electric Ave",
///         "address_line_2" : "Suite 600",
///         "administrative_district_level_1" : "NY",
///         "country" : "US",
///         "locality" : "New York",
///         "postal_code" : "10003"
///       },
///       "created_at" : "2016-03-23T20:21:54.859Z",
///       "creation_source" : "THIRD_PARTY",
///       "email_address" : "Amelia.Earhart@example.com",
///       "family_name" : "Earhart",
///       "given_name" : "Amelia",
///       "group_ids" : [
///         "545AXB44B4XXWMVQ4W8SBT3HHF"
///       ],
///       "id" : "JDKYHBWT1D4F8MFH63DBMEN8Y4",
///       "note" : "a customer",
///       "phone_number" : "1-212-555-4240",
///       "preferences" : {
///         "email_unsubscribed" : false
///       },
///       "reference_id" : "YOUR_REFERENCE_ID",
///       "segment_ids" : [
///         "1KB9JE5EGJXCW.REACHABLE"
///       ],
///       "updated_at" : "2016-03-23T20:21:55Z",
///       "version" : 1
///     }
///   ]
/// }
public struct ListCustomersResponse: Codable {
    /// A pagination cursor to retrieve the next set of results for the
    /// original query. A cursor is only present if the request succeeded and additional results
    /// are available.
    /// 
    /// For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
    public var cursor: String?
    /// An array of `Customer` objects that match the provided query.
    public var customers: [Customer]?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(cursor: String? = nil, customers: [Customer]? = nil, errors: [Error]? = nil) {
        self.cursor = cursor
        self.customers = customers
        self.errors = errors
    }
}

/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct ListDeviceCodesRequest: Codable {
    /// A pagination cursor returned by a previous call to this endpoint.
    /// Provide this to retrieve the next set of results for your original query.
    /// 
    /// See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
    public var cursor: String?
    /// If specified, only returns DeviceCodes of the specified location.
    /// Returns DeviceCodes of all locations if empty.
    public var locationID: String?
    /// If specified, only returns DeviceCodes targeting the specified product type.
    /// Returns DeviceCodes of all product types if empty.
    public var productType: String?
    /// If specified, returns DeviceCodes with the specified statuses.
    /// Returns DeviceCodes of status `PAIRED` and `UNPAIRED` if empty.
    public var status: [String]?

    public init(cursor: String? = nil, locationID: String? = nil, productType: String? = nil, status: [String]? = nil) {
        self.cursor = cursor
        self.locationID = locationID
        self.productType = productType
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case locationID = "location_id"
        case productType = "product_type"
        case status
    }
}

/// Example:
///
/// {
///   "device_codes" : [
///     {
///       "code" : "EBCARJ",
///       "created_at" : "2020-02-06T18:44:33.000Z",
///       "device_id" : "907CS13101300122",
///       "id" : "B3Z6NAMYQSMTM",
///       "location_id" : "B5E4484SHHNYH",
///       "name" : "Counter 1",
///       "pair_by" : "2020-02-06T18:49:33.000Z",
///       "product_type" : "TERMINAL_API",
///       "status" : "PAIRED",
///       "status_changed_at" : "2020-02-06T18:47:28.000Z"
///     },
///     {
///       "code" : "GVXNYN",
///       "created_at" : "2020-02-07T19:55:04.000Z",
///       "id" : "YKGMJMYK8H4PQ",
///       "location_id" : "A6SYFRSV4WAFW",
///       "name" : "Unused device code",
///       "pair_by" : "2020-02-07T20:00:04.000Z",
///       "product_type" : "TERMINAL_API",
///       "status" : "UNPAIRED",
///       "status_changed_at" : "2020-02-07T19:55:04.000Z"
///     }
///   ]
/// }
public struct ListDeviceCodesResponse: Codable {
    /// A pagination cursor to retrieve the next set of results for your
    /// original query to the endpoint. This value is present only if the request
    /// succeeded and additional results are available.
    /// 
    /// See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
    public var cursor: String?
    /// The queried DeviceCode.
    public var deviceCodes: [DeviceCode]?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(cursor: String? = nil, deviceCodes: [DeviceCode]? = nil, errors: [Error]? = nil) {
        self.cursor = cursor
        self.deviceCodes = deviceCodes
        self.errors = errors
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case deviceCodes = "device_codes"
        case errors
    }
}

/// Defines the parameters for a `ListDisputeEvidence` request.
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct ListDisputeEvidenceRequest: Codable {
    /// A pagination cursor returned by a previous call to this endpoint.
    /// Provide this cursor to retrieve the next set of results for the original query.
    /// For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
    public var cursor: String?

    public init(cursor: String? = nil) {
        self.cursor = cursor
    }
}

/// Defines the fields in a `ListDisputeEvidence` response.
///
/// Example:
///
/// {
///   "cursor" : "G1aSTRm48CLjJsg6Sg3hQN1b1OMaoVuG",
///   "evidence" : [
///     {
///       "dispute_id" : "bVTprrwk0gygTLZ96VX1oB",
///       "evidence_text" : "1Z8888888888888888",
///       "evidence_type" : "TRACKING_NUMBER",
///       "id" : "TOomLInj6iWmP3N8qfCXrB",
///       "uploaded_at" : "2018-10-18T16:01:10.000Z"
///     },
///     {
///       "dispute_id" : "bVTprrwk0gygTLZ96VX1oB",
///       "evidence_file" : {
///         "filename" : "evidence.tiff",
///         "filetype" : "image\/tiff"
///       },
///       "evidence_id" : "TOomLInj6iWmP3N8qfCXrB",
///       "evidence_type" : "GENERIC_EVIDENCE",
///       "uploaded_at" : "2018-10-18T16:01:10.000Z"
///     }
///   ]
/// }
public struct ListDisputeEvidenceResponse: Codable {
    /// The pagination cursor to be used in a subsequent request.
    /// If unset, this is the final response. For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
    public var cursor: String?
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// The list of evidence previously uploaded to the specified dispute.
    public var evidence: [DisputeEvidence]?

    public init(cursor: String? = nil, errors: [Error]? = nil, evidence: [DisputeEvidence]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.evidence = evidence
    }
}

/// Defines the request parameters for the `ListDisputes` endpoint.
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct ListDisputesRequest: Codable {
    /// A pagination cursor returned by a previous call to this endpoint.
    /// Provide this cursor to retrieve the next set of results for the original query.
    /// For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
    public var cursor: String?
    /// The ID of the location for which to return a list of disputes. If not specified, the endpoint returns
    /// all open disputes (the dispute status is not `INQUIRY_CLOSED`, `WON`, or `LOST`) associated with all locations.
    public var locationID: String?
    /// The dispute states to filter the result.
    /// If not specified, the endpoint returns all open disputes (the dispute status is not `INQUIRY_CLOSED`, `WON`,
    /// or `LOST`).
    public var states: [String]?

    public init(cursor: String? = nil, locationID: String? = nil, states: [String]? = nil) {
        self.cursor = cursor
        self.locationID = locationID
        self.states = states
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case locationID = "location_id"
        case states
    }
}

/// Defines fields in a `ListDisputes` response.
///
/// Example:
///
/// {
///   "cursor" : "G1aSTRm48CLjJsg6Sg3hQN1b1OMaoVuG",
///   "disputes" : [
///     {
///       "amount_money" : {
///         "amount" : 1000,
///         "currency" : "USD"
///       },
///       "brand_dispute_id" : "100000809947",
///       "card_brand" : "VISA",
///       "created_at" : "2018-10-12T02:20:25.577Z",
///       "disputed_payments" : [
///         {
///           "payment_id" : "APgIq6RX2jM6DKDhMHiC6QEkuaB"
///         }
///       ],
///       "due_at" : "2018-10-11T00:00:00.000Z",
///       "id" : "OnY1AZwhSi775rbNIK4gv",
///       "reason" : "NO_KNOWLEDGE",
///       "state" : "EVIDENCE_REQUIRED",
///       "updated_at" : "2018-10-12T02:20:25.577Z"
///     }
///   ]
/// }
public struct ListDisputesResponse: Codable {
    /// The pagination cursor to be used in a subsequent request.
    /// If unset, this is the final response. For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
    public var cursor: String?
    /// The list of disputes.
    public var disputes: [Dispute]?
    /// Information about errors encountered during the request.
    public var errors: [Error]?

    public init(cursor: String? = nil, disputes: [Dispute]? = nil, errors: [Error]? = nil) {
        self.cursor = cursor
        self.disputes = disputes
        self.errors = errors
    }
}

/// A request for a set of `EmployeeWage` objects.
///
/// Example:
///
/// {
///   "request_params" : "?employee_id=33fJchumvVdJwxV0H6L9&limit=4&cursor=s4R0Z6ecFTzTC4jz8sUDBQTudX3KE313OT9fCt3VUgsXM4sMgED"
/// }
public struct ListEmployeeWagesRequest: Codable {
    /// A pointer to the next page of `EmployeeWage` results to fetch.
    public var cursor: String?
    /// Filter the returned wages to only those that are associated with the specified employee.
    public var employeeID: String?
    /// The maximum number of `EmployeeWage` results to return per page. The number can range between
    /// 1 and 200. The default is 200.
    public var limit: Int?

    public init(cursor: String? = nil, employeeID: String? = nil, limit: Int? = nil) {
        self.cursor = cursor
        self.employeeID = employeeID
        self.limit = limit
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case employeeID = "employee_id"
        case limit
    }
}

/// The response to a request for a set of `EmployeeWage` objects. The response contains
/// a set of `EmployeeWage` objects.
///
/// Example:
///
/// {
///   "cursor" : "2fofTniCgT0yIPAq26kmk0YyFQJZfbWkh73OOnlTHmTAx13NgED",
///   "employee_wages" : [
///     {
///       "employee_id" : "33fJchumvVdJwxV0H6L9",
///       "hourly_rate" : {
///         "amount" : 3250,
///         "currency" : "USD"
///       },
///       "id" : "pXS3qCv7BERPnEGedM4S8mhm",
///       "title" : "Manager"
///     },
///     {
///       "employee_id" : "33fJchumvVdJwxV0H6L9",
///       "hourly_rate" : {
///         "amount" : 2600,
///         "currency" : "USD"
///       },
///       "id" : "rZduCkzYDUVL3ovh1sQgbue6",
///       "title" : "Cook"
///     },
///     {
///       "employee_id" : "33fJchumvVdJwxV0H6L9",
///       "hourly_rate" : {
///         "amount" : 1600,
///         "currency" : "USD"
///       },
///       "id" : "FxLbs5KpPUHa8wyt5ctjubDX",
///       "title" : "Barista"
///     },
///     {
///       "employee_id" : "33fJchumvVdJwxV0H6L9",
///       "hourly_rate" : {
///         "amount" : 1700,
///         "currency" : "USD"
///       },
///       "id" : "vD1wCgijMDR3cX5TPnu7VXto",
///       "title" : "Cashier"
///     }
///   ]
/// }
public struct ListEmployeeWagesResponse: Codable {
    /// The value supplied in the subsequent request to fetch the next page
    /// of `EmployeeWage` results.
    public var cursor: String?
    /// A page of `EmployeeWage` results.
    public var employeeWages: [EmployeeWage]?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(cursor: String? = nil, employeeWages: [EmployeeWage]? = nil, errors: [Error]? = nil) {
        self.cursor = cursor
        self.employeeWages = employeeWages
        self.errors = errors
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case employeeWages = "employee_wages"
        case errors
    }
}

public struct ListEmployeesRequest: Codable {
    /// The token required to retrieve the specified page of results.
    public var cursor: String?
    /// The number of employees to be returned on each page.
    public var limit: Int?
    public var locationID: String?
    /// Specifies the EmployeeStatus to filter the employee by.
    public var status: String?

    public init(cursor: String? = nil, limit: Int? = nil, locationID: String? = nil, status: String? = nil) {
        self.cursor = cursor
        self.limit = limit
        self.locationID = locationID
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case limit
        case locationID = "location_id"
        case status
    }
}

public struct ListEmployeesResponse: Codable {
    /// The token to be used to retrieve the next page of results.
    public var cursor: String?
    public var employees: [Employee]?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(cursor: String? = nil, employees: [Employee]? = nil, errors: [Error]? = nil) {
        self.cursor = cursor
        self.employees = employees
        self.errors = errors
    }
}

/// Returns a list of gift card activities. You can optionally specify a filter to retrieve a
/// subset of activites.
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct ListGiftCardActivitiesRequest: Codable {
    /// The timestamp for the beginning of the reporting period, in RFC 3339 format.
    /// Inclusive. Default: The current time minus one year.
    public var beginTime: String?
    /// A pagination cursor returned by a previous call to this endpoint.
    /// Provide this cursor to retrieve the next set of results for the original query.
    /// If you do not provide the cursor, the call returns the first page of the results.
    public var cursor: String?
    /// The timestamp for the end of the reporting period, in RFC 3339 format.
    /// Inclusive. Default: The current time.
    public var endTime: String?
    /// If you provide a gift card ID, the endpoint returns activities that belong
    /// to the specified gift card. Otherwise, the endpoint returns all gift card activities for
    /// the seller.
    public var giftCardID: String?
    /// If you provide a limit value, the endpoint returns the specified number
    /// of results (or less) per page. A maximum value is 100. The default value is 50.
    public var limit: Int?
    /// If you provide a location ID, the endpoint returns gift card activities for that location.
    /// Otherwise, the endpoint returns gift card activities for all locations.
    public var locationID: String?
    /// The order in which the endpoint returns the activities, based on `created_at`.
    /// - `ASC` - Oldest to newest.
    /// - `DESC` - Newest to oldest (default).
    public var sortOrder: String?
    /// If you provide a type, the endpoint returns gift card activities of this type.
    /// Otherwise, the endpoint returns all types of gift card activities.
    public var type: String?

    public init(beginTime: String? = nil, cursor: String? = nil, endTime: String? = nil, giftCardID: String? = nil, limit: Int? = nil, locationID: String? = nil, sortOrder: String? = nil, type: String? = nil) {
        self.beginTime = beginTime
        self.cursor = cursor
        self.endTime = endTime
        self.giftCardID = giftCardID
        self.limit = limit
        self.locationID = locationID
        self.sortOrder = sortOrder
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case beginTime = "begin_time"
        case cursor
        case endTime = "end_time"
        case giftCardID = "gift_card_id"
        case limit
        case locationID = "location_id"
        case sortOrder = "sort_order"
        case type
    }
}

/// A response that contains one or more `GiftCardActivity`. The response might contain a set of `Error` objects
/// if the request resulted in errors.
///
/// Example:
///
/// {
///   "gift_card_activities" : [
///     {
///       "created_at" : "2021-06-02T22:26:38.000Z",
///       "gift_card_balance_money" : {
///         "amount" : 700,
///         "currency" : "USD"
///       },
///       "gift_card_gan" : "7783320002929081",
///       "gift_card_id" : "gftc:6d55a72470d940c6ba09c0ab8ad08d20",
///       "id" : "gcact_897698f894b44b3db46c6147e26a0e19",
///       "location_id" : "81FN9BNFZTKS4",
///       "redeem_activity_details" : {
///         "amount_money" : {
///           "amount" : 300,
///           "currency" : "USD"
///         }
///       },
///       "type" : "REDEEM"
///     },
///     {
///       "activate_activity_details" : {
///         "amount_money" : {
///           "amount" : 1000,
///           "currency" : "USD"
///         },
///         "line_item_uid" : "eIWl7X0nMuO9Ewbh0ChIx",
///         "order_id" : "jJNGHm4gLI6XkFbwtiSLqK72KkAZY"
///       },
///       "created_at" : "2021-05-20T22:26:54.000Z",
///       "gift_card_balance_money" : {
///         "amount" : 1000,
///         "currency" : "USD"
///       },
///       "gift_card_gan" : "7783320002929081",
///       "gift_card_id" : "gftc:6d55a72470d940c6ba09c0ab8ad08d20",
///       "id" : "gcact_b968ebfc7d46437b945be7b9e09123b4",
///       "location_id" : "81FN9BNFZTKS4",
///       "type" : "ACTIVATE"
///     }
///   ]
/// }
public struct ListGiftCardActivitiesResponse: Codable {
    /// When a response is truncated, it includes a cursor that you can use in a
    /// subsequent request to fetch the next set of activities. If empty, this is
    /// the final response.
    public var cursor: String?
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Gift card activities retrieved.
    public var giftCardActivities: [GiftCardActivity]?

    public init(cursor: String? = nil, errors: [Error]? = nil, giftCardActivities: [GiftCardActivity]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.giftCardActivities = giftCardActivities
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case errors
        case giftCardActivities = "gift_card_activities"
    }
}

/// A request to list gift cards. You can optionally specify a filter to retrieve a subset of
/// gift cards.
///
/// Example:
///
/// {
///   "request_params" : "?type=DIGITAL&state=ACTIVE&cursor=Jj0rA9-rrDW5k-PsorOq-m4BiGf"
/// }
public struct ListGiftCardsRequest: Codable {
    /// A pagination cursor returned by a previous call to this endpoint.
    /// Provide this cursor to retrieve the next set of results for the original query.
    /// If a cursor is not provided, it returns the first page of the results.
    /// For more information, see [Pagination](https://developer.squareup.com/docs/docs/working-with-apis/pagination).
    public var cursor: String?
    /// If a value is provided, returns only the gift cards linked to the specified customer
    public var customerID: String?
    /// If a value is provided, it returns only that number of results per page.
    /// The maximum number of results allowed per page is 50. The default value is 30.
    public var limit: Int?
    /// If the state is provided, it returns the gift cards in the specified state
    /// (see [GiftCardStatus](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardStatus)).
    /// Otherwise, it returns the gift cards of all states.
    public var state: String?
    /// If a type is provided, gift cards of this type are returned
    /// (see [GiftCardType](https://developer.squareup.com/reference/square_2021-08-18/enums/GiftCardType)).
    /// If no type is provided, it returns gift cards of all types.
    public var type: String?

    public init(cursor: String? = nil, customerID: String? = nil, limit: Int? = nil, state: String? = nil, type: String? = nil) {
        self.cursor = cursor
        self.customerID = customerID
        self.limit = limit
        self.state = state
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case customerID = "customer_id"
        case limit
        case state
        case type
    }
}

/// A response that contains one or more `GiftCard`. The response might contain a set of `Error`
/// objects if the request resulted in errors.
///
/// Example:
///
/// {
///   "cursor" : "JbFmyvUpaNKsfC1hoLSA4WlqkgkZXTWeKuStajR5BkP7OE0ETAbeWSi6U6u7sH",
///   "gift_cards" : [
///     {
///       "balance_money" : {
///         "amount" : 3900,
///         "currency" : "USD"
///       },
///       "created_at" : "2021-06-09T22:26:54.000Z",
///       "gan" : "7783320008524605",
///       "gan_source" : "SQUARE",
///       "id" : "gftc:00113070ba5745f0b2377c1b9570cb03",
///       "state" : "ACTIVE",
///       "type" : "DIGITAL"
///     },
///     {
///       "balance_money" : {
///         "amount" : 2000,
///         "currency" : "USD"
///       },
///       "created_at" : "2021-05-20T22:26:54.000Z",
///       "gan" : "7783320002692465",
///       "gan_source" : "SQUARE",
///       "id" : "gftc:00128a12725b41e58e0de1d20497a9dd",
///       "state" : "ACTIVE",
///       "type" : "DIGITAL"
///     }
///   ]
/// }
public struct ListGiftCardsResponse: Codable {
    /// When a response is truncated, it includes a cursor that you can use in a
    /// subsequent request to fetch the next set of gift cards. If empty, this is
    /// the final response.
    public var cursor: String?
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Gift cards retrieved.
    public var giftCards: [GiftCard]?

    public init(cursor: String? = nil, errors: [Error]? = nil, giftCards: [GiftCard]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.giftCards = giftCards
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case errors
        case giftCards = "gift_cards"
    }
}

/// Describes a `ListInvoice` request.
///
/// Example:
///
/// {
///   "request_params" : "?location_id=ES0RJRZYEC39A"
/// }
public struct ListInvoicesRequest: Codable {
    /// A pagination cursor returned by a previous call to this endpoint.
    /// Provide this cursor to retrieve the next set of results for your original query.
    /// 
    /// For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
    public var cursor: String?
    /// The maximum number of invoices to return (200 is the maximum `limit`).
    /// If not provided, the server uses a default limit of 100 invoices.
    public var limit: Int?
    /// The ID of the location for which to list invoices.
    public var locationID: String

    public init(cursor: String? = nil, limit: Int? = nil, locationID: String) {
        self.cursor = cursor
        self.limit = limit
        self.locationID = locationID
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case limit
        case locationID = "location_id"
    }
}

/// Describes a `ListInvoice` response.
///
/// Example:
///
/// {
///   "cursor" : "ChoIDhIWVm54ZVRhLXhySFBOejBBM2xJb2daUQoFCI4IGAE",
///   "invoices" : [
///     {
///       "accepted_payment_methods" : {
///         "bank_account" : false,
///         "card" : true,
///         "square_gift_card" : false
///       },
///       "created_at" : "2020-06-18T17:45:13Z",
///       "custom_fields" : [
///         {
///           "label" : "Event Reference Number",
///           "placement" : "ABOVE_LINE_ITEMS",
///           "value" : "Ref. #1234"
///         },
///         {
///           "label" : "Terms of Service",
///           "placement" : "BELOW_LINE_ITEMS",
///           "value" : "The terms of service are..."
///         }
///       ],
///       "delivery_method" : "EMAIL",
///       "description" : "We appreciate your business!",
///       "id" : "inv:0-ChCHu2mZEabLeeHahQnXDjZQECY",
///       "invoice_number" : "inv-100",
///       "location_id" : "ES0RJRZYEC39A",
///       "order_id" : "CAISENgvlJ6jLWAzERDzjyHVybY",
///       "payment_requests" : [
///         {
///           "automatic_payment_source" : "NONE",
///           "computed_amount_money" : {
///             "amount" : 10000,
///             "currency" : "USD"
///           },
///           "due_date" : "2030-01-24",
///           "reminders" : [
///             {
///               "message" : "Your invoice is due tomorrow",
///               "relative_scheduled_days" : -1,
///               "status" : "PENDING",
///               "uid" : "beebd363-e47f-4075-8785-c235aaa7df11"
///             }
///           ],
///           "request_type" : "BALANCE",
///           "tipping_enabled" : true,
///           "total_completed_amount_money" : {
///             "amount" : 0,
///             "currency" : "USD"
///           },
///           "uid" : "2da7964f-f3d2-4f43-81e8-5aa220bf3355"
///         }
///       ],
///       "primary_recipient" : {
///         "customer_id" : "JDKYHBWT1D4F8MFH63DBMEN8Y4",
///         "email_address" : "Amelia.Earhart@example.com",
///         "family_name" : "Earhart",
///         "given_name" : "Amelia",
///         "phone_number" : "1-212-555-4240"
///       },
///       "scheduled_at" : "2030-01-13T10:00:00Z",
///       "status" : "DRAFT",
///       "timezone" : "America\/Los_Angeles",
///       "title" : "Event Planning Services",
///       "updated_at" : "2020-06-18T17:45:13Z",
///       "version" : 0
///     },
///     {
///       "accepted_payment_methods" : {
///         "bank_account" : false,
///         "card" : true,
///         "square_gift_card" : true
///       },
///       "created_at" : "2021-01-23T15:29:12Z",
///       "delivery_method" : "EMAIL",
///       "id" : "inv:0-ChC366qAfskpGrBI_1bozs9mEA3",
///       "invoice_number" : "inv-455",
///       "location_id" : "ES0RJRZYEC39A",
///       "next_payment_amount_money" : {
///         "amount" : 3000,
///         "currency" : "USD"
///       },
///       "order_id" : "a65jnS8NXbfprvGJzY9F4fQTuaB",
///       "payment_requests" : [
///         {
///           "automatic_payment_source" : "CARD_ON_FILE",
///           "card_id" : "ccof:IkWfpLj4tNHMyFii3GB",
///           "computed_amount_money" : {
///             "amount" : 1000,
///             "currency" : "USD"
///           },
///           "due_date" : "2021-01-23",
///           "percentage_requested" : "25",
///           "request_type" : "DEPOSIT",
///           "tipping_enabled" : false,
///           "total_completed_amount_money" : {
///             "amount" : 1000,
///             "currency" : "USD"
///           },
///           "uid" : "66c3bdfd-5090-4ff9-a8a0-c1e1a2ffa176"
///         },
///         {
///           "automatic_payment_source" : "CARD_ON_FILE",
///           "card_id" : "ccof:IkWfpLj4tNHMyFii3GB",
///           "computed_amount_money" : {
///             "amount" : 3000,
///             "currency" : "USD"
///           },
///           "due_date" : "2021-06-15",
///           "request_type" : "BALANCE",
///           "tipping_enabled" : false,
///           "total_completed_amount_money" : {
///             "amount" : 0,
///             "currency" : "USD"
///           },
///           "uid" : "120c5e18-4f80-4f6b-b159-774cb9bf8f99"
///         }
///       ],
///       "primary_recipient" : {
///         "customer_id" : "JDKYHBWT1D4F8MFH63DBMEN8Y4",
///         "email_address" : "Amelia.Earhart@example.com",
///         "family_name" : "Earhart",
///         "given_name" : "Amelia",
///         "phone_number" : "1-212-555-4240"
///       },
///       "public_url" : "https:\/\/squareup.com\/pay-invoice\/h9sfsfTGTSnYEhISUDBhEQ",
///       "status" : "PARTIALLY_PAID",
///       "timezone" : "America\/Los_Angeles",
///       "updated_at" : "2021-01-23T15:29:56Z",
///       "version" : 3
///     }
///   ]
/// }
public struct ListInvoicesResponse: Codable {
    /// When a response is truncated, it includes a cursor that you can use in a
    /// subsequent request to retrieve the next set of invoices. If empty, this is the final
    /// response.
    /// For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
    public var cursor: String?
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// The invoices retrieved.
    public var invoices: [Invoice]?

    public init(cursor: String? = nil, errors: [Error]? = nil, invoices: [Invoice]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.invoices = invoices
    }
}

/// Defines the fields that are included in requests to
/// the __ListLocations__ endpoint.
///
/// Example:
///
/// {
/// 
/// }
public struct ListLocationsRequest: Codable {
    public init() {}
}

/// Defines the fields that are included in the response body of
/// a request to the __ListLocations__ endpoint.
/// 
/// One of `errors` or `locations` is present in a given response (never both).
///
/// Example:
///
/// {
///   "locations" : [
///     {
///       "address" : {
///         "address_line_1" : "123 Main St",
///         "administrative_district_level_1" : "CA",
///         "country" : "US",
///         "locality" : "San Francisco",
///         "postal_code" : "94114"
///       },
///       "business_name" : "Pumbaa's business name",
///       "capabilities" : [
///         "CREDIT_CARD_PROCESSING"
///       ],
///       "country" : "US",
///       "created_at" : "2016-09-19T17:33:12Z",
///       "currency" : "USD",
///       "id" : "18YC4JDH91E1H",
///       "language_code" : "en-US",
///       "merchant_id" : "3MYCJG5GVYQ8Q",
///       "name" : "your location name",
///       "phone_number" : "+1 650-354-7217",
///       "status" : "ACTIVE",
///       "timezone" : "America\/Los_Angeles"
///     }
///   ]
/// }
public struct ListLocationsResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// The business locations.
    public var locations: [Location]?

    public init(errors: [Error]? = nil, locations: [Location]? = nil) {
        self.errors = errors
        self.locations = locations
    }
}

/// A request to list `LoyaltyProgram`.
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct ListLoyaltyProgramsRequest: Codable {
    public init() {}
}

/// A response that contains all loyalty programs.
///
/// Example:
///
/// {
///   "programs" : [
///     {
///       "accrual_rules" : [
///         {
///           "accrual_type" : "SPEND",
///           "excluded_category_ids" : [
///             "7ZERJKO5PVYXCVUHV2JCZ2UG",
///             "FQKAOJE5C4FIMF5A2URMLW6V"
///           ],
///           "excluded_item_variation_ids" : [
///             "CBZXBUVVTYUBZGQO44RHMR6B",
///             "EDILT24Z2NISEXDKGY6HP7XV"
///           ],
///           "points" : 1,
///           "spend_amount_money" : {
///             "amount" : 100
///           }
///         }
///       ],
///       "created_at" : "2020-04-20T16:55:11Z",
///       "id" : "d619f755-2d17-41f3-990d-c04ecedd64dd",
///       "location_ids" : [
///         "P034NEENMD09F"
///       ],
///       "reward_tiers" : [
///         {
///           "created_at" : "2020-04-20T16:55:11Z",
///           "definition" : {
///             "discount_type" : "FIXED_PERCENTAGE",
///             "percentage_discount" : "10",
///             "scope" : "ORDER"
///           },
///           "id" : "e1b39225-9da5-43d1-a5db-782cdd8ad94f",
///           "name" : "10% off entire sale",
///           "points" : 10,
///           "pricing_rule_reference" : {
///             "catalog_version" : "1605486402527",
///             "object_id" : "74C4JSHESNLTB2A7ITO5HO6F"
///           }
///         }
///       ],
///       "status" : "ACTIVE",
///       "terminology" : {
///         "one" : "Point",
///         "other" : "Points"
///       },
///       "updated_at" : "2020-05-01T02:00:02Z"
///     }
///   ]
/// }
public struct ListLoyaltyProgramsResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// A list of `LoyaltyProgram` for the merchant.
    public var programs: [LoyaltyProgram]?

    public init(errors: [Error]? = nil, programs: [LoyaltyProgram]? = nil) {
        self.errors = errors
        self.programs = programs
    }
}

/// Request object for the [ListMerchant](https://developer.squareup.com/reference/square_2021-08-18/merchants-api/list-merchants) endpoint.
public struct ListMerchantsRequest: Codable {
    /// The cursor generated by the previous response.
    public var cursor: Int?

    public init(cursor: Int? = nil) {
        self.cursor = cursor
    }
}

/// The response object returned by the [ListMerchant](https://developer.squareup.com/reference/square_2021-08-18/merchants-api/list-merchants) endpoint.
///
/// Example:
///
/// {
///   "merchant" : [
///     {
///       "business_name" : "Apple A Day",
///       "country" : "US",
///       "currency" : "USD",
///       "id" : "DM7VKY8Q63GNP",
///       "language_code" : "en-US",
///       "main_location_id" : "9A65CGC72ZQG1",
///       "status" : "ACTIVE"
///     }
///   ]
/// }
public struct ListMerchantsResponse: Codable {
    /// If the  response is truncated, the cursor to use in next  request to fetch next set of objects.
    public var cursor: Int?
    /// Information on errors encountered during the request.
    public var errors: [Error]?
    /// The requested `Merchant` entities.
    public var merchant: [Merchant]?

    public init(cursor: Int? = nil, errors: [Error]? = nil, merchant: [Merchant]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.merchant = merchant
    }
}

/// Describes a request to list refunds using
/// [ListPaymentRefunds](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/list-payment-refunds).
/// 
/// The maximum results per page is 100.
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct ListPaymentRefundsRequest: Codable {
    /// The timestamp for the beginning of the requested reporting period, in RFC 3339 format.
    /// 
    /// Default: The current time minus one year.
    public var beginTime: String?
    /// A pagination cursor returned by a previous call to this endpoint.
    /// Provide this cursor to retrieve the next set of results for the original query.
    /// 
    /// For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
    public var cursor: String?
    /// The timestamp for the end of the requested reporting period, in RFC 3339 format.
    /// 
    /// Default: The current time.
    public var endTime: String?
    /// The maximum number of results to be returned in a single page.
    /// 
    /// It is possible to receive fewer results than the specified limit on a given page.
    /// 
    /// If the supplied value is greater than 100, no more than 100 results are returned.
    /// 
    /// Default: 100
    public var limit: Int?
    /// Limit results to the location supplied. By default, results are returned
    /// for all locations associated with the seller.
    public var locationID: String?
    /// The order in which results are listed:
    /// - `ASC` - Oldest to newest.
    /// - `DESC` - Newest to oldest (default).
    public var sortOrder: String?
    /// If provided, only refunds with the given source type are returned.
    /// - `CARD` - List refunds only for payments where `CARD` was specified as the payment
    /// source.
    /// 
    /// Default: If omitted, refunds are returned regardless of the source type.
    public var sourceType: String?
    /// If provided, only refunds with the given status are returned.
    /// For a list of refund status values, see [PaymentRefund](https://developer.squareup.com/reference/square_2021-08-18/objects/PaymentRefund).
    /// 
    /// Default: If omitted, refunds are returned regardless of their status.
    public var status: String?

    public init(beginTime: String? = nil, cursor: String? = nil, endTime: String? = nil, limit: Int? = nil, locationID: String? = nil, sortOrder: String? = nil, sourceType: String? = nil, status: String? = nil) {
        self.beginTime = beginTime
        self.cursor = cursor
        self.endTime = endTime
        self.limit = limit
        self.locationID = locationID
        self.sortOrder = sortOrder
        self.sourceType = sourceType
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case beginTime = "begin_time"
        case cursor
        case endTime = "end_time"
        case limit
        case locationID = "location_id"
        case sortOrder = "sort_order"
        case sourceType = "source_type"
        case status
    }
}

/// Defines the response returned by [ListPaymentRefunds](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/list-payment-refunds).
/// 
/// Either `errors` or `refunds` is present in a given response (never both).
///
/// Example:
///
/// {
///   "cursor" : "5evquW1YswHoT4EoyUhzMmTsCnsSXBU9U0WJ4FU4623nrMQcocH0RGU6Up1YkwfiMcF59ood58EBTEGgzMTGHQJpocic7ExOL0NtrTXCeWcv0UJIJNk8eXb",
///   "refunds" : [
///     {
///       "amount_money" : {
///         "amount" : 1000,
///         "currency" : "USD"
///       },
///       "created_at" : "2019-07-06T18:01:22.335Z",
///       "id" : "O2QAAhTYs7rUfzlxT38GMO7LvaB_q7JwCHtxmgXrh8fAhV468WQ44VxDtL7CU4yVRlsbXmI",
///       "location_id" : "XK3DBG77NJBFX",
///       "order_id" : "2duiyoqbfeXY0DBi15GEyk5Epa4F",
///       "payment_id" : "O2QAAhTYs7rUfzlxT38GMO7LvaB",
///       "processing_fee" : [
///         {
///           "amount_money" : {
///             "amount" : -59,
///             "currency" : "USD"
///           },
///           "effective_at" : "2019-07-06T20:01:12.000Z",
///           "type" : "INITIAL"
///         }
///       ],
///       "status" : "COMPLETED",
///       "updated_at" : "2019-07-06T18:06:04.653Z"
///     },
///     {
///       "amount_money" : {
///         "amount" : 1000,
///         "currency" : "USD"
///       },
///       "created_at" : "2019-07-06T17:01:54.232Z",
///       "id" : "8TDIQvFw8PeDIxhSfd5yyX7GuaB_13px5Vrz01qzzuoGzmjsZIxDjfHhbkm2XppBUX1dW7I",
///       "location_id" : "XK3DBG77NJBFX",
///       "order_id" : "w6EXfEwS03oTQsnZTCqfE6f67e4F",
///       "payment_id" : "8TDIQvFw8PeDIxhSfd5yyX7GuaB",
///       "processing_fee" : [
///         {
///           "amount_money" : {
///             "amount" : -59,
///             "currency" : "USD"
///           },
///           "effective_at" : "2019-07-06T19:01:45.000Z",
///           "type" : "INITIAL"
///         }
///       ],
///       "status" : "COMPLETED",
///       "updated_at" : "2019-07-06T17:21:04.684Z"
///     }
///   ]
/// }
public struct ListPaymentRefundsResponse: Codable {
    /// The pagination cursor to be used in a subsequent request. If empty,
    /// this is the final response.
    /// 
    /// For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
    public var cursor: String?
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// The list of requested refunds.
    public var refunds: [PaymentRefund]?

    public init(cursor: String? = nil, errors: [Error]? = nil, refunds: [PaymentRefund]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.refunds = refunds
    }
}

/// Describes a request to list payments using
/// [ListPayments](https://developer.squareup.com/reference/square_2021-08-18/payments-api/list-payments).
/// 
/// The maximum results per page is 100.
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct ListPaymentsRequest: Codable {
    /// The timestamp for the beginning of the reporting period, in RFC 3339 format.
    /// Inclusive. Default: The current time minus one year.
    public var beginTime: String?
    /// The brand of the payment card (for example, VISA).
    public var cardBrand: String?
    /// A pagination cursor returned by a previous call to this endpoint.
    /// Provide this cursor to retrieve the next set of results for the original query.
    /// 
    /// For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
    public var cursor: String?
    /// The timestamp for the end of the reporting period, in RFC 3339 format.
    /// 
    /// Default: The current time.
    public var endTime: String?
    /// The last four digits of a payment card.
    public var last4: String?
    /// The maximum number of results to be returned in a single page.
    /// It is possible to receive fewer results than the specified limit on a given page.
    /// 
    /// The default value of 100 is also the maximum allowed value. If the provided value is
    /// greater than 100, it is ignored and the default value is used instead.
    /// 
    /// Default: `100`
    public var limit: Int?
    /// Limit results to the location supplied. By default, results are returned
    /// for the default (main) location associated with the seller.
    public var locationID: String?
    /// The order in which results are listed:
    /// - `ASC` - Oldest to newest.
    /// - `DESC` - Newest to oldest (default).
    public var sortOrder: String?
    /// The exact amount in the `total_money` for a payment.
    public var total: Int?

    public init(beginTime: String? = nil, cardBrand: String? = nil, cursor: String? = nil, endTime: String? = nil, last4: String? = nil, limit: Int? = nil, locationID: String? = nil, sortOrder: String? = nil, total: Int? = nil) {
        self.beginTime = beginTime
        self.cardBrand = cardBrand
        self.cursor = cursor
        self.endTime = endTime
        self.last4 = last4
        self.limit = limit
        self.locationID = locationID
        self.sortOrder = sortOrder
        self.total = total
    }

    private enum CodingKeys: String, CodingKey {
        case beginTime = "begin_time"
        case cardBrand = "card_brand"
        case cursor
        case endTime = "end_time"
        case last4 = "last_4"
        case limit
        case locationID = "location_id"
        case sortOrder = "sort_order"
        case total
    }
}

/// Defines the response returned by [ListPayments](https://developer.squareup.com/reference/square_2021-08-18/payments-api/list-payments).
///
/// Example:
///
/// {
///   "cursor" : "2TTnuq0yRYDdBRSFF2XuFkgO1Bclt4ZHNI7YrFNeyZ6rL1WZXkdnLn10H8fBIwFKdKW1Af6ifRa",
///   "payments" : [
///     {
///       "amount_money" : {
///         "amount" : 1000,
///         "currency" : "USD"
///       },
///       "approved_money" : {
///         "amount" : 1000,
///         "currency" : "USD"
///       },
///       "capabilities" : [
///         "EDIT_AMOUNT_UP",
///         "EDIT_AMOUNT_DOWN",
///         "EDIT_TIP_AMOUNT_UP",
///         "EDIT_TIP_AMOUNT_DOWN"
///       ],
///       "card_details" : {
///         "auth_result_code" : "NQbV3A",
///         "avs_status" : "AVS_ACCEPTED",
///         "card" : {
///           "card_brand" : "VISA",
///           "exp_month" : 2,
///           "exp_year" : 2022,
///           "fingerprint" : "sq-1-lHpUJIUyqOPQmH89b6GuQEljmc-mZmu4kSTaMlkLDkJI7NVjAl4Zirn2sk3OeyVKVA",
///           "last_4" : "1111"
///         },
///         "card_payment_timeline" : {
///           "authorized_at" : "2019-07-09T14:36:13.798Z"
///         },
///         "cvv_status" : "CVV_ACCEPTED",
///         "entry_method" : "KEYED",
///         "status" : "AUTHORIZED"
///       },
///       "created_at" : "2019-07-09T14:36:13.745Z",
///       "id" : "ifrBnAil7rRfDtd27cdf9g9WO8paB",
///       "location_id" : "QLIJX16Q3UZ0A",
///       "order_id" : "MvfIilKnIYKBium4rauH67wFzRxv",
///       "source_type" : "CARD",
///       "status" : "APPROVED",
///       "total_money" : {
///         "amount" : 1000,
///         "currency" : "USD"
///       },
///       "updated_at" : "2019-07-09T14:36:13.883Z",
///       "version_token" : "v6orqdHcW2TwuzCQRdF6a4ktbG8T8nbDcBx8eyrkoZl6o"
///     },
///     {
///       "amount_money" : {
///         "amount" : 1000,
///         "currency" : "USD"
///       },
///       "approved_money" : {
///         "amount" : 1000,
///         "currency" : "USD"
///       },
///       "card_details" : {
///         "auth_result_code" : "vPIr0K",
///         "avs_status" : "AVS_ACCEPTED",
///         "card" : {
///           "card_brand" : "VISA",
///           "exp_month" : 7,
///           "exp_year" : 2026,
///           "fingerprint" : "sq-1-TpmjbNBMFdibiIjpQI5LiRgNUBC7u1689i0TgHjnlyHEWYB7tnn-K4QbW4ttvtaqXw",
///           "last_4" : "2796"
///         },
///         "card_payment_timeline" : {
///           "authorized_at" : "2019-07-08T01:00:51.617Z",
///           "captured_at" : "2019-07-08T01:13:58.508Z"
///         },
///         "cvv_status" : "CVV_ACCEPTED",
///         "entry_method" : "ON_FILE",
///         "status" : "CAPTURED"
///       },
///       "created_at" : "2019-07-08T01:00:51.607Z",
///       "customer_id" : "RDX9Z4XTIZR7MRZJUXNY9HUK6I",
///       "id" : "GQTFp1ZlXdpoW4o6eGiZhbjosiDFf",
///       "location_id" : "XTI0H92143A39",
///       "order_id" : "m2Hr8Hk8A3CTyQQ1k4ynExg92tO3",
///       "processing_fee" : [
///         {
///           "amount_money" : {
///             "amount" : 59,
///             "currency" : "USD"
///           },
///           "effective_at" : "2019-07-08T03:00:53.000Z",
///           "type" : "INITIAL"
///         }
///       ],
///       "source_type" : "CARD",
///       "status" : "COMPLETED",
///       "total_money" : {
///         "amount" : 1000,
///         "currency" : "USD"
///       },
///       "updated_at" : "2019-07-08T01:13:58.508Z",
///       "version_token" : "pE0wanQBErcnO4ubL49pHCV1yAs4BUScWXb8fVvkRqa6o"
///     }
///   ]
/// }
public struct ListPaymentsResponse: Codable {
    /// The pagination cursor to be used in a subsequent request. If empty,
    /// this is the final response.
    /// 
    /// For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
    public var cursor: String?
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// The requested list of payments.
    public var payments: [Payment]?

    public init(cursor: String? = nil, errors: [Error]? = nil, payments: [Payment]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.payments = payments
    }
}

/// Defines the query parameters that can be included in
/// a request to the [ListRefunds](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/list-refunds) endpoint.
/// 
/// Deprecated - recommend using [SearchOrders](https://developer.squareup.com/reference/square_2021-08-18/orders-api/search-orders)
///
/// Example:
///
/// {
///   "request_params" : "?begin_time=2016-01-15T00:00:00Z&end_time=2016-01-31T00:00:00Z"
/// }
public struct ListRefundsRequest: Codable {
    /// The beginning of the requested reporting period, in RFC 3339 format.
    /// 
    /// See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.
    /// 
    /// Default value: The current time minus one year.
    public var beginTime: String?
    /// A pagination cursor returned by a previous call to this endpoint.
    /// Provide this to retrieve the next set of results for your original query.
    /// 
    /// See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
    public var cursor: String?
    /// The end of the requested reporting period, in RFC 3339 format.
    /// 
    /// See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.
    /// 
    /// Default value: The current time.
    public var endTime: String?
    /// The order in which results are listed in the response (`ASC` for
    /// oldest first, `DESC` for newest first).
    /// 
    /// Default value: `DESC`
    public var sortOrder: String?

    public init(beginTime: String? = nil, cursor: String? = nil, endTime: String? = nil, sortOrder: String? = nil) {
        self.beginTime = beginTime
        self.cursor = cursor
        self.endTime = endTime
        self.sortOrder = sortOrder
    }

    private enum CodingKeys: String, CodingKey {
        case beginTime = "begin_time"
        case cursor
        case endTime = "end_time"
        case sortOrder = "sort_order"
    }
}

/// Defines the fields that are included in the response body of
/// a request to the [ListRefunds](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/list-refunds) endpoint.
/// 
/// One of `errors` or `refunds` is present in a given response (never both).
///
/// Example:
///
/// {
///   "refunds" : [
///     {
///       "additional_recipients" : [
///         {
///           "amount_money" : {
///             "amount" : 10,
///             "currency" : "USD"
///           },
///           "description" : "Application fees",
///           "location_id" : "057P5VYJ4A5X1"
///         }
///       ],
///       "amount_money" : {
///         "amount" : 100,
///         "currency" : "USD"
///       },
///       "created_at" : "2016-01-20T00:28:18Z",
///       "id" : "b27436d1-7f8e-5610-45c6-417ef71434b4-SW",
///       "location_id" : "18YC4JDH91E1H",
///       "reason" : "some reason",
///       "status" : "APPROVED",
///       "tender_id" : "MtZRYYdDrYNQbOvV7nbuBvMF",
///       "transaction_id" : "KnL67ZIwXCPtzOrqj0HrkxMF"
///     }
///   ]
/// }
public struct ListRefundsResponse: Codable {
    /// A pagination cursor for retrieving the next set of results,
    /// if any remain. Provide this value as the `cursor` parameter in a subsequent
    /// request to this endpoint.
    /// 
    /// See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
    public var cursor: String?
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// An array of refunds that match your query.
    public var refunds: [Refund]?

    public init(cursor: String? = nil, errors: [Error]? = nil, refunds: [Refund]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.refunds = refunds
    }
}

/// Represents a `ListSites` request.
public struct ListSitesRequest: Codable {
    public init() {}
}

/// Represents a `ListSites` response. The response can include either `sites` or `errors`.
///
/// Example:
///
/// {
///   "sites" : [
///     {
///       "created_at" : "2020-02-28T13:22:51Z",
///       "domain" : "mysite1.square.site",
///       "id" : "site_278075276488921835",
///       "is_published" : true,
///       "site_title" : "My First Site",
///       "updated_at" : "2021-01-13T09:58:32Z"
///     },
///     {
///       "created_at" : "2020-06-18T17:45:13Z",
///       "domain" : "mysite2.square.site",
///       "id" : "site_102725345836253849",
///       "is_published" : true,
///       "site_title" : "My Second Site",
///       "updated_at" : "2020-11-23T02:19:10Z"
///     }
///   ]
/// }
public struct ListSitesResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// The sites that belong to the seller.
    public var sites: [Site]?

    public init(errors: [Error]? = nil, sites: [Site]? = nil) {
        self.errors = errors
        self.sites = sites
    }
}

/// Defines parameters in a
/// [ListSubscriptionEvents](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/list-subscription-events)
/// endpoint request.
public struct ListSubscriptionEventsRequest: Codable {
    /// A pagination cursor returned by a previous call to this endpoint.
    /// Provide this to retrieve the next set of results for the original query.
    /// 
    /// For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
    public var cursor: String?
    /// The upper limit on the number of subscription events to return
    /// in the response.
    /// 
    /// Default: `200`
    public var limit: Int?

    public init(cursor: String? = nil, limit: Int? = nil) {
        self.cursor = cursor
        self.limit = limit
    }
}

/// Defines the fields that are included in the response from the
/// [ListSubscriptionEvents](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/list-subscription-events)
/// endpoint.
///
/// Example:
///
/// {
///   "subscription_events" : [
///     {
///       "effective_date" : "2020-04-24",
///       "id" : "06809161-3867-4598-8269-8aea5be4f9de",
///       "plan_id" : "6JHXF3B2CW3YKHDV4XEM674H",
///       "subscription_event_type" : "START_SUBSCRIPTION"
///     },
///     {
///       "effective_date" : "2020-05-06",
///       "id" : "a0c08083-5db0-4800-85c7-d398de4fbb6e",
///       "plan_id" : "6JHXF3B2CW3YKHDV4XEM674H",
///       "subscription_event_type" : "STOP_SUBSCRIPTION"
///     }
///   ]
/// }
public struct ListSubscriptionEventsResponse: Codable {
    /// When a response is truncated, it includes a cursor that you can
    /// use in a subsequent request to fetch the next set of events.
    /// If empty, this is the final response.
    /// 
    /// For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
    public var cursor: String?
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// The `SubscriptionEvents` retrieved.
    public var subscriptionEvents: [SubscriptionEvent]?

    public init(cursor: String? = nil, errors: [Error]? = nil, subscriptionEvents: [SubscriptionEvent]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.subscriptionEvents = subscriptionEvents
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case errors
        case subscriptionEvents = "subscription_events"
    }
}

public struct ListTeamMemberBookingProfilesRequest: Codable {
    /// Indicates whether to include only bookable team members in the returned result (`true`) or not (`false`).
    public var isBookableOnly: Bool?
    /// The cursor for paginating through the results.
    public var cursor: String?
    /// The maximum number of results to return.
    public var limit: Int?
    /// Indicates whether to include only team members enabled at the given location in the returned result.
    public var locationID: String?

    public init(isBookableOnly: Bool? = nil, cursor: String? = nil, limit: Int? = nil, locationID: String? = nil) {
        self.isBookableOnly = isBookableOnly
        self.cursor = cursor
        self.limit = limit
        self.locationID = locationID
    }

    private enum CodingKeys: String, CodingKey {
        case isBookableOnly = "bookable_only"
        case cursor
        case limit
        case locationID = "location_id"
    }
}

/// Example:
///
/// {
///   "errors" : [
/// 
///   ],
///   "team_member_booking_profiles" : [
///     {
///       "display_name" : "Sandbox Seller",
///       "is_bookable" : true,
///       "team_member_id" : "TMXUrsBWWcHTt79t"
///     },
///     {
///       "display_name" : "Sandbox Staff",
///       "is_bookable" : true,
///       "team_member_id" : "TMaJcbiRqPIGZuS9"
///     }
///   ]
/// }
public struct ListTeamMemberBookingProfilesResponse: Codable {
    /// The cursor for paginating through the results.
    public var cursor: String?
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// The list of team member booking profiles.
    public var teamMemberBookingProfiles: [TeamMemberBookingProfile]?

    public init(cursor: String? = nil, errors: [Error]? = nil, teamMemberBookingProfiles: [TeamMemberBookingProfile]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.teamMemberBookingProfiles = teamMemberBookingProfiles
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case errors
        case teamMemberBookingProfiles = "team_member_booking_profiles"
    }
}

/// A request for a set of `TeamMemberWage` objects.
///
/// Example:
///
/// {
///   "request_params" : "?team_member_id=33fJchumvVdJwxV0H6L9&limit=4&cursor=s4R0Z6ecFTzTC4jz8sUDBQTudX3KE313OT9fCt3VUgsXM4sMgED"
/// }
public struct ListTeamMemberWagesRequest: Codable {
    /// A pointer to the next page of `EmployeeWage` results to fetch.
    public var cursor: String?
    /// The maximum number of `TeamMemberWage` results to return per page. The number can range between
    /// 1 and 200. The default is 200.
    public var limit: Int?
    /// Filter the returned wages to only those that are associated with the
    /// specified team member.
    public var teamMemberID: String?

    public init(cursor: String? = nil, limit: Int? = nil, teamMemberID: String? = nil) {
        self.cursor = cursor
        self.limit = limit
        self.teamMemberID = teamMemberID
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case limit
        case teamMemberID = "team_member_id"
    }
}

/// The response to a request for a set of `TeamMemberWage` objects. The response contains
/// a set of `TeamMemberWage` objects.
///
/// Example:
///
/// {
///   "cursor" : "2fofTniCgT0yIPAq26kmk0YyFQJZfbWkh73OOnlTHmTAx13NgED",
///   "team_member_wages" : [
///     {
///       "hourly_rate" : {
///         "amount" : 3250,
///         "currency" : "USD"
///       },
///       "id" : "pXS3qCv7BERPnEGedM4S8mhm",
///       "team_member_id" : "33fJchumvVdJwxV0H6L9",
///       "title" : "Manager"
///     },
///     {
///       "hourly_rate" : {
///         "amount" : 2600,
///         "currency" : "USD"
///       },
///       "id" : "rZduCkzYDUVL3ovh1sQgbue6",
///       "team_member_id" : "33fJchumvVdJwxV0H6L9",
///       "title" : "Cook"
///     },
///     {
///       "hourly_rate" : {
///         "amount" : 1600,
///         "currency" : "USD"
///       },
///       "id" : "FxLbs5KpPUHa8wyt5ctjubDX",
///       "team_member_id" : "33fJchumvVdJwxV0H6L9",
///       "title" : "Barista"
///     },
///     {
///       "hourly_rate" : {
///         "amount" : 1700,
///         "currency" : "USD"
///       },
///       "id" : "vD1wCgijMDR3cX5TPnu7VXto",
///       "team_member_id" : "33fJchumvVdJwxV0H6L9",
///       "title" : "Cashier"
///     }
///   ]
/// }
public struct ListTeamMemberWagesResponse: Codable {
    /// The value supplied in the subsequent request to fetch the next page
    /// of `TeamMemberWage` results.
    public var cursor: String?
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// A page of `TeamMemberWage` results.
    public var teamMemberWages: [TeamMemberWage]?

    public init(cursor: String? = nil, errors: [Error]? = nil, teamMemberWages: [TeamMemberWage]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.teamMemberWages = teamMemberWages
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case errors
        case teamMemberWages = "team_member_wages"
    }
}

/// Defines the query parameters that can be included in
/// a request to the [ListTransactions](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/list-transactions) endpoint.
/// 
/// Deprecated - recommend using [SearchOrders](https://developer.squareup.com/reference/square_2021-08-18/orders-api/search-orders)
///
/// Example:
///
/// {
///   "request_params" : "?begin_time=2016-01-15T00:00:00Z&end_time=2016-01-31T00:00:00Z"
/// }
public struct ListTransactionsRequest: Codable {
    /// The beginning of the requested reporting period, in RFC 3339 format.
    /// 
    /// See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.
    /// 
    /// Default value: The current time minus one year.
    public var beginTime: String?
    /// A pagination cursor returned by a previous call to this endpoint.
    /// Provide this to retrieve the next set of results for your original query.
    /// 
    /// See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
    public var cursor: String?
    /// The end of the requested reporting period, in RFC 3339 format.
    /// 
    /// See [Date ranges](https://developer.squareup.com/docs/build-basics/working-with-dates) for details on date inclusivity/exclusivity.
    /// 
    /// Default value: The current time.
    public var endTime: String?
    /// The order in which results are listed in the response (`ASC` for
    /// oldest first, `DESC` for newest first).
    /// 
    /// Default value: `DESC`
    public var sortOrder: String?

    public init(beginTime: String? = nil, cursor: String? = nil, endTime: String? = nil, sortOrder: String? = nil) {
        self.beginTime = beginTime
        self.cursor = cursor
        self.endTime = endTime
        self.sortOrder = sortOrder
    }

    private enum CodingKeys: String, CodingKey {
        case beginTime = "begin_time"
        case cursor
        case endTime = "end_time"
        case sortOrder = "sort_order"
    }
}

/// Defines the fields that are included in the response body of
/// a request to the [ListTransactions](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/list-transactions) endpoint.
/// 
/// One of `errors` or `transactions` is present in a given response (never both).
///
/// Example:
///
/// {
///   "transactions" : [
///     {
///       "created_at" : "2016-01-20T22:57:56Z",
///       "id" : "KnL67ZIwXCPtzOrqj0HrkxMF",
///       "location_id" : "18YC4JDH91E1H",
///       "product" : "EXTERNAL_API",
///       "reference_id" : "some optional reference id",
///       "refunds" : [
///         {
///           "additional_recipients" : [
///             {
///               "amount_money" : {
///                 "amount" : 100,
///                 "currency" : "USD"
///               },
///               "description" : "Application fees",
///               "location_id" : "057P5VYJ4A5X1"
///             }
///           ],
///           "amount_money" : {
///             "amount" : 5000,
///             "currency" : "USD"
///           },
///           "created_at" : "2016-01-20T22:59:20Z",
///           "id" : "7a5RcVI0CxbOcJ2wMOkE",
///           "location_id" : "18YC4JDH91E1H",
///           "processing_fee_money" : {
///             "amount" : 138,
///             "currency" : "USD"
///           },
///           "reason" : "some reason why",
///           "status" : "APPROVED",
///           "tender_id" : "MtZRYYdDrYNQbOvV7nbuBvMF",
///           "transaction_id" : "KnL67ZIwXCPtzOrqj0HrkxMF"
///         }
///       ],
///       "tenders" : [
///         {
///           "additional_recipients" : [
///             {
///               "amount_money" : {
///                 "amount" : 20,
///                 "currency" : "USD"
///               },
///               "description" : "Application fees",
///               "location_id" : "057P5VYJ4A5X1"
///             }
///           ],
///           "amount_money" : {
///             "amount" : 5000,
///             "currency" : "USD"
///           },
///           "card_details" : {
///             "card" : {
///               "card_brand" : "VISA",
///               "last_4" : "1111"
///             },
///             "entry_method" : "KEYED",
///             "status" : "CAPTURED"
///           },
///           "created_at" : "2016-01-20T22:57:56Z",
///           "id" : "MtZRYYdDrYNQbOvV7nbuBvMF",
///           "location_id" : "18YC4JDH91E1H",
///           "note" : "some optional note",
///           "processing_fee_money" : {
///             "amount" : 138,
///             "currency" : "USD"
///           },
///           "transaction_id" : "KnL67ZIwXCPtzOrqj0HrkxMF",
///           "type" : "CARD"
///         }
///       ]
///     }
///   ]
/// }
public struct ListTransactionsResponse: Codable {
    /// A pagination cursor for retrieving the next set of results,
    /// if any remain. Provide this value as the `cursor` parameter in a subsequent
    /// request to this endpoint.
    /// 
    /// See [Paginating results](https://developer.squareup.com/docs/working-with-apis/pagination) for more information.
    public var cursor: String?
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// An array of transactions that match your query.
    public var transactions: [Transaction]?

    public init(cursor: String? = nil, errors: [Error]? = nil, transactions: [Transaction]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.transactions = transactions
    }
}

/// A request for a set of `WorkweekConfig` objects.
///
/// Example:
///
/// {
///   "request_params" : "?limit=1&cursor=s4R0Z6ecFTzTC4jz8sUDBQTudX3KE313OT9fCt3VUgsXM4sMgED"
/// }
public struct ListWorkweekConfigsRequest: Codable {
    /// A pointer to the next page of `WorkweekConfig` results to fetch.
    public var cursor: String?
    /// The maximum number of `WorkweekConfigs` results to return per page.
    public var limit: Int?

    public init(cursor: String? = nil, limit: Int? = nil) {
        self.cursor = cursor
        self.limit = limit
    }
}

/// The response to a request for a set of `WorkweekConfig` objects. The response contains
/// the requested `WorkweekConfig` objects and might contain a set of `Error` objects if
/// the request resulted in errors.
///
/// Example:
///
/// {
///   "cursor" : "2fofTniCgT0yIPAq26kmk0YyFQJZfbWkh73OOnlTHmTAx13NgED",
///   "workweek_configs" : [
///     {
///       "created_at" : "2016-02-04T00:58:24Z",
///       "id" : "FY4VCAQN700GM",
///       "start_of_day_local_time" : "10:00",
///       "start_of_week" : "MON",
///       "updated_at" : "2019-02-28T01:04:35Z",
///       "version" : 11
///     }
///   ]
/// }
public struct ListWorkweekConfigsResponse: Codable {
    /// The value supplied in the subsequent request to fetch the next page of
    /// `EmployeeWage` results.
    public var cursor: String?
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// A page of `EmployeeWage` results.
    public var workweekConfigs: [WorkweekConfig]?

    public init(cursor: String? = nil, errors: [Error]? = nil, workweekConfigs: [WorkweekConfig]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.workweekConfigs = workweekConfigs
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case errors
        case workweekConfigs = "workweek_configs"
    }
}

public struct Location: Codable {
    /// Represents a postal address in a country. The address format is based
    /// on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
    /// see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
    /// This format has dedicated fields for four address components: postal code,
    /// locality (city), administrative district (state, prefecture, or province), and
    /// sublocality (town or village). These components have dedicated fields in the
    /// `Address` object because software sometimes behaves differently based on them.
    /// For example, sales tax software may charge different amounts of sales tax
    /// based on the postal code, and some software is only available in
    /// certain states due to compliance reasons.
    /// 
    /// For the remaining address components, the `Address` type provides the
    /// `address_line_1` and `address_line_2` fields for free-form data entry.
    /// These fields are free-form because the remaining address components have
    /// too many variations around the world and typical software does not parse
    /// these components. These fields enable users to enter anything they want.
    /// 
    /// Note that, in the current implementation, all other `Address` type fields are blank.
    /// These include `address_line_3`, `sublocality_2`, `sublocality_3`,
    /// `administrative_district_level_2`, `administrative_district_level_3`,
    /// `first_name`, `last_name`, and `organization`.
    /// 
    /// When it comes to localization, the seller's language preferences
    /// (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
    /// are ignored for addresses. Even though Square products (such as Square Point of Sale
    /// and the Seller Dashboard) mostly use a seller's language preference in
    /// communication, when it comes to addresses, they will use English for a US address,
    /// Japanese for an address in Japan, and so on.
    public var address: Address?
    /// The email of the location.
    /// This email is visible to the customers of the location.
    /// For example, the email appears on customer receipts.
    /// For example, `help&#64;squareup.com`.
    public var businessEmail: String?
    /// Represents the hours of operation for a business location.
    public var businessHours: BusinessHours?
    /// The business name of the location
    /// This is the name visible to the customers of the location.
    /// For example, this name appears on customer receipts.
    public var businessName: String?
    /// The Square features that are enabled for the location.
    /// See [LocationCapability](https://developer.squareup.com/reference/square_2021-08-18/enums/LocationCapability) for possible values.
    public var capabilities: [String]?
    /// Latitude and longitude coordinates.
    public var coordinates: Coordinates?
    /// The country of the location, in ISO 3166-1-alpha-2 format.
    /// 
    /// See [Country](https://developer.squareup.com/reference/square_2021-08-18/enums/Country) for possible values.
    public var country: String?
    /// The time when the location was created, in RFC 3339 format.
    /// For more information, see [Working with Dates](https://developer.squareup.com/docs/build-basics/working-with-dates).
    public var createdAt: String?
    /// The currency used for all transactions at this location,
    /// in ISO 4217 format.
    /// See [Currency](https://developer.squareup.com/reference/square_2021-08-18/enums/Currency) for possible values.
    public var currency: String?
    /// The description of the location.
    public var description: String?
    /// The Facebook profile URL of the location. The URL should begin with 'facebook.com/'. For example, `https://www.facebook.com/square`.
    public var facebookURL: String?
    /// The URL of a full-format logo image for the location. The Seller must choose this logo in the
    /// Seller dashboard (Receipts section) for the logo to appear on transactions (such as receipts, invoices)
    /// that Square generates on behalf of the Seller. This image can have an aspect ratio of 2:1 or greater
    /// and is recommended to be at least 1280x648 pixels.
    public var fullFormatLogoURL: String?
    /// The Square-issued ID of the location.
    public var id: String?
    /// The Instagram username of the location without the '&#64;' symbol. For example, `square`.
    public var instagramUsername: String?
    /// The language associated with the location, in
    /// [BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A).
    /// For more information, see [Location language code](https://developer.squareup.com/docs/locations-api#location-language-code).
    public var languageCode: String?
    /// The URL of the logo image for the location. The Seller must choose this logo in the Seller
    /// dashboard (Receipts section) for the logo to appear on transactions (such as receipts, invoices)
    /// that Square generates on behalf of the Seller. This image should have an aspect ratio
    /// close to 1:1 and is recommended to be at least 200x200 pixels.
    public var logoURL: String?
    /// The merchant category code (MCC) of the location, as standardized by ISO 18245.
    /// The MCC describes the kind of goods or services sold at the location.
    public var mcc: String?
    /// The ID of the merchant that owns the location.
    public var merchantID: String?
    /// The name of the location.
    /// This information appears in the dashboard as the nickname.
    /// A location name must be unique within a seller account.
    public var name: String?
    /// The phone number of the location in human readable format. For example, `+353 80 0 098 8099`.
    public var phoneNumber: String?
    /// The URL of the Point of Sale background image for the location.
    public var posBackgroundURL: String?
    /// The status of the location, either active or inactive.
    public var status: String?
    /// The tax IDs that a Location is operating under.
    public var taxIDs: TaxIDs?
    /// The [IANA Timezone](https://www.iana.org/time-zones) identifier for
    /// the timezone of the location.
    public var timezone: String?
    /// The Twitter username of the location without the '&#64;' symbol. For example, `Square`.
    public var twitterUsername: String?
    /// The type of the location, either physical or mobile.
    public var type: String?
    /// The website URL of the location.  For example, `https://squareup.com`.
    public var websiteURL: String?

    public init(address: Address? = nil, businessEmail: String? = nil, businessHours: BusinessHours? = nil, businessName: String? = nil, capabilities: [String]? = nil, coordinates: Coordinates? = nil, country: String? = nil, createdAt: String? = nil, currency: String? = nil, description: String? = nil, facebookURL: String? = nil, fullFormatLogoURL: String? = nil, id: String? = nil, instagramUsername: String? = nil, languageCode: String? = nil, logoURL: String? = nil, mcc: String? = nil, merchantID: String? = nil, name: String? = nil, phoneNumber: String? = nil, posBackgroundURL: String? = nil, status: String? = nil, taxIDs: TaxIDs? = nil, timezone: String? = nil, twitterUsername: String? = nil, type: String? = nil, websiteURL: String? = nil) {
        self.address = address
        self.businessEmail = businessEmail
        self.businessHours = businessHours
        self.businessName = businessName
        self.capabilities = capabilities
        self.coordinates = coordinates
        self.country = country
        self.createdAt = createdAt
        self.currency = currency
        self.description = description
        self.facebookURL = facebookURL
        self.fullFormatLogoURL = fullFormatLogoURL
        self.id = id
        self.instagramUsername = instagramUsername
        self.languageCode = languageCode
        self.logoURL = logoURL
        self.mcc = mcc
        self.merchantID = merchantID
        self.name = name
        self.phoneNumber = phoneNumber
        self.posBackgroundURL = posBackgroundURL
        self.status = status
        self.taxIDs = taxIDs
        self.timezone = timezone
        self.twitterUsername = twitterUsername
        self.type = type
        self.websiteURL = websiteURL
    }

    private enum CodingKeys: String, CodingKey {
        case address
        case businessEmail = "business_email"
        case businessHours = "business_hours"
        case businessName = "business_name"
        case capabilities
        case coordinates
        case country
        case createdAt = "created_at"
        case currency
        case description
        case facebookURL = "facebook_url"
        case fullFormatLogoURL = "full_format_logo_url"
        case id
        case instagramUsername = "instagram_username"
        case languageCode = "language_code"
        case logoURL = "logo_url"
        case mcc
        case merchantID = "merchant_id"
        case name
        case phoneNumber = "phone_number"
        case posBackgroundURL = "pos_background_url"
        case status
        case taxIDs = "tax_ids"
        case timezone
        case twitterUsername = "twitter_username"
        case type
        case websiteURL = "website_url"
    }
}

/// The capabilities a location may have.
public enum LocationCapability: String, Codable, CaseIterable {
    case creditCardProcessing = "CREDIT_CARD_PROCESSING"
    case automaticTransfers = "AUTOMATIC_TRANSFERS"
}

/// The status of the location, whether a location is active or inactive.
public enum LocationStatus: String, Codable, CaseIterable {
    case active = "ACTIVE"
    case inactive = "INACTIVE"
}

/// A location's physical or mobile type.
public enum LocationType: String, Codable, CaseIterable {
    case physical = "PHYSICAL"
    case mobile = "MOBILE"
}

/// Describes a loyalty account. For more information, see
/// [Manage Loyalty Accounts Using the Loyalty API](https://developer.squareup.com/docs/loyalty-api/overview).
public struct LoyaltyAccount: Codable {
    /// The available point balance in the loyalty account. If points are scheduled to expire, they are listed in the `expiring_point_deadlines` field.
    /// 
    /// Your application should be able to handle loyalty accounts that have a negative point balance (`balance` is less than 0). This might occur if a seller makes a manual adjustment or as a result of a refund or exchange.
    public var balance: Int?
    /// The timestamp when the loyalty account was created, in RFC 3339 format.
    public var createdAt: String?
    /// The Square-assigned ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) that is associated with the account.
    public var customerID: String?
    /// The timestamp when enrollment occurred, in RFC 3339 format.
    public var enrolledAt: String?
    /// The schedule for when points expire in the loyalty account balance. This field is present only if the account has points that are scheduled to expire.
    /// 
    /// The total number of points in this field equals the number of points in the `balance` field.
    public var expiringPointDeadlines: [LoyaltyAccountExpiringPointDeadline]?
    /// The Square-assigned ID of the loyalty account.
    public var id: String?
    /// The total points accrued during the lifetime of the account.
    public var lifetimePoints: Int?
    /// Represents the mapping that associates a loyalty account with a buyer.
    /// 
    /// Currently, a loyalty account can only be mapped to a buyer by phone number. For more information, see
    /// [Loyalty Overview](https://developer.squareup.com/docs/loyalty/overview).
    public var mapping: LoyaltyAccountMapping?
    /// The Square-assigned ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram) to which the account belongs.
    public var programID: String
    /// The timestamp when the loyalty account was last updated, in RFC 3339 format.
    public var updatedAt: String?

    public init(balance: Int? = nil, createdAt: String? = nil, customerID: String? = nil, enrolledAt: String? = nil, expiringPointDeadlines: [LoyaltyAccountExpiringPointDeadline]? = nil, id: String? = nil, lifetimePoints: Int? = nil, mapping: LoyaltyAccountMapping? = nil, programID: String, updatedAt: String? = nil) {
        self.balance = balance
        self.createdAt = createdAt
        self.customerID = customerID
        self.enrolledAt = enrolledAt
        self.expiringPointDeadlines = expiringPointDeadlines
        self.id = id
        self.lifetimePoints = lifetimePoints
        self.mapping = mapping
        self.programID = programID
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case balance
        case createdAt = "created_at"
        case customerID = "customer_id"
        case enrolledAt = "enrolled_at"
        case expiringPointDeadlines = "expiring_point_deadlines"
        case id
        case lifetimePoints = "lifetime_points"
        case mapping
        case programID = "program_id"
        case updatedAt = "updated_at"
    }
}

/// Represents a set of points for a loyalty account that are scheduled to expire on a specific date.
public struct LoyaltyAccountExpiringPointDeadline: Codable {
    /// The timestamp of when the points are scheduled to expire, in RFC 3339 format.
    public var expiresAt: String
    /// The number of points scheduled to expire at the `expires_at` timestamp.
    public var points: Int

    public init(expiresAt: String, points: Int) {
        self.expiresAt = expiresAt
        self.points = points
    }

    private enum CodingKeys: String, CodingKey {
        case expiresAt = "expires_at"
        case points
    }
}

/// Represents the mapping that associates a loyalty account with a buyer.
/// 
/// Currently, a loyalty account can only be mapped to a buyer by phone number. For more information, see
/// [Loyalty Overview](https://developer.squareup.com/docs/loyalty/overview).
public struct LoyaltyAccountMapping: Codable {
    /// The timestamp when the mapping was created, in RFC 3339 format.
    public var createdAt: String?
    /// The Square-assigned ID of the mapping.
    public var id: String?
    /// The phone number of the buyer, in E.164 format. For example, "+14155551111".
    public var phoneNumber: String?

    public init(createdAt: String? = nil, id: String? = nil, phoneNumber: String? = nil) {
        self.createdAt = createdAt
        self.id = id
        self.phoneNumber = phoneNumber
    }

    private enum CodingKeys: String, CodingKey {
        case createdAt = "created_at"
        case id
        case phoneNumber = "phone_number"
    }
}

/// The type of mapping.
public enum LoyaltyAccountMappingType: String, Codable, CaseIterable {
    case phone = "PHONE"
}

/// Provides information about a loyalty event.
/// For more information, see [Loyalty events](https://developer.squareup.com/docs/loyalty-api/overview/#loyalty-events).
public struct LoyaltyEvent: Codable {
    /// Provides metadata when the event `type` is `ACCUMULATE_POINTS`.
    public var accumulatePoints: LoyaltyEventAccumulatePoints?
    /// Provides metadata when the event `type` is `ADJUST_POINTS`.
    public var adjustPoints: LoyaltyEventAdjustPoints?
    /// Provides metadata when the event `type` is `CREATE_REWARD`.
    public var createReward: LoyaltyEventCreateReward?
    /// The timestamp when the event was created, in RFC 3339 format.
    public var createdAt: String
    /// Provides metadata when the event `type` is `DELETE_REWARD`.
    public var deleteReward: LoyaltyEventDeleteReward?
    /// Provides metadata when the event `type` is `EXPIRE_POINTS`.
    public var expirePoints: LoyaltyEventExpirePoints?
    /// The Square-assigned ID of the loyalty event.
    public var id: String
    /// The ID of the [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the event occurred.
    public var locationID: String?
    /// The ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) in which the event occurred.
    public var loyaltyAccountID: String
    /// Provides metadata when the event `type` is `OTHER`.
    public var otherEvent: LoyaltyEventOther?
    /// Provides metadata when the event `type` is `REDEEM_REWARD`.
    public var redeemReward: LoyaltyEventRedeemReward?
    /// Defines whether the event was generated by the Square Point of Sale.
    public var source: String
    /// The type of the loyalty event.
    public var type: String

    public init(accumulatePoints: LoyaltyEventAccumulatePoints? = nil, adjustPoints: LoyaltyEventAdjustPoints? = nil, createReward: LoyaltyEventCreateReward? = nil, createdAt: String, deleteReward: LoyaltyEventDeleteReward? = nil, expirePoints: LoyaltyEventExpirePoints? = nil, id: String, locationID: String? = nil, loyaltyAccountID: String, otherEvent: LoyaltyEventOther? = nil, redeemReward: LoyaltyEventRedeemReward? = nil, source: String, type: String) {
        self.accumulatePoints = accumulatePoints
        self.adjustPoints = adjustPoints
        self.createReward = createReward
        self.createdAt = createdAt
        self.deleteReward = deleteReward
        self.expirePoints = expirePoints
        self.id = id
        self.locationID = locationID
        self.loyaltyAccountID = loyaltyAccountID
        self.otherEvent = otherEvent
        self.redeemReward = redeemReward
        self.source = source
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case accumulatePoints = "accumulate_points"
        case adjustPoints = "adjust_points"
        case createReward = "create_reward"
        case createdAt = "created_at"
        case deleteReward = "delete_reward"
        case expirePoints = "expire_points"
        case id
        case locationID = "location_id"
        case loyaltyAccountID = "loyalty_account_id"
        case otherEvent = "other_event"
        case redeemReward = "redeem_reward"
        case source
        case type
    }
}

/// Provides metadata when the event `type` is `ACCUMULATE_POINTS`.
public struct LoyaltyEventAccumulatePoints: Codable {
    /// The ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
    public var loyaltyProgramID: String?
    /// The ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) for which the buyer accumulated the points.
    /// This field is returned only if the Orders API is used to process orders.
    public var orderID: String?
    /// The number of points accumulated by the event.
    public var points: Int?

    public init(loyaltyProgramID: String? = nil, orderID: String? = nil, points: Int? = nil) {
        self.loyaltyProgramID = loyaltyProgramID
        self.orderID = orderID
        self.points = points
    }

    private enum CodingKeys: String, CodingKey {
        case loyaltyProgramID = "loyalty_program_id"
        case orderID = "order_id"
        case points
    }
}

/// Provides metadata when the event `type` is `ADJUST_POINTS`.
public struct LoyaltyEventAdjustPoints: Codable {
    /// The Square-assigned ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
    public var loyaltyProgramID: String?
    /// The number of points added or removed.
    public var points: Int
    /// The reason for the adjustment of points.
    public var reason: String?

    public init(loyaltyProgramID: String? = nil, points: Int, reason: String? = nil) {
        self.loyaltyProgramID = loyaltyProgramID
        self.points = points
        self.reason = reason
    }

    private enum CodingKeys: String, CodingKey {
        case loyaltyProgramID = "loyalty_program_id"
        case points
        case reason
    }
}

/// Provides metadata when the event `type` is `CREATE_REWARD`.
public struct LoyaltyEventCreateReward: Codable {
    /// The ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
    public var loyaltyProgramID: String
    /// The loyalty points used to create the reward.
    public var points: Int
    /// The Square-assigned ID of the created [loyalty reward](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyReward).
    /// This field is returned only if the event source is `LOYALTY_API`.
    public var rewardID: String?

    public init(loyaltyProgramID: String, points: Int, rewardID: String? = nil) {
        self.loyaltyProgramID = loyaltyProgramID
        self.points = points
        self.rewardID = rewardID
    }

    private enum CodingKeys: String, CodingKey {
        case loyaltyProgramID = "loyalty_program_id"
        case points
        case rewardID = "reward_id"
    }
}

/// Filter events by date time range.
public struct LoyaltyEventDateTimeFilter: Codable {
    /// Represents a generic time range. The start and end values are
    /// represented in RFC 3339 format. Time ranges are customized to be
    /// inclusive or exclusive based on the needs of a particular endpoint.
    /// Refer to the relevant endpoint-specific documentation to determine
    /// how time ranges are handled.
    public var createdAt: TimeRange

    public init(createdAt: TimeRange) {
        self.createdAt = createdAt
    }

    private enum CodingKeys: String, CodingKey {
        case createdAt = "created_at"
    }
}

/// Provides metadata when the event `type` is `DELETE_REWARD`.
public struct LoyaltyEventDeleteReward: Codable {
    /// The ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
    public var loyaltyProgramID: String
    /// The number of points returned to the loyalty account.
    public var points: Int
    /// The ID of the deleted [loyalty reward](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyReward).
    /// This field is returned only if the event source is `LOYALTY_API`.
    public var rewardID: String?

    public init(loyaltyProgramID: String, points: Int, rewardID: String? = nil) {
        self.loyaltyProgramID = loyaltyProgramID
        self.points = points
        self.rewardID = rewardID
    }

    private enum CodingKeys: String, CodingKey {
        case loyaltyProgramID = "loyalty_program_id"
        case points
        case rewardID = "reward_id"
    }
}

/// Provides metadata when the event `type` is `EXPIRE_POINTS`.
public struct LoyaltyEventExpirePoints: Codable {
    /// The Square-assigned ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
    public var loyaltyProgramID: String
    /// The number of points expired.
    public var points: Int

    public init(loyaltyProgramID: String, points: Int) {
        self.loyaltyProgramID = loyaltyProgramID
        self.points = points
    }

    private enum CodingKeys: String, CodingKey {
        case loyaltyProgramID = "loyalty_program_id"
        case points
    }
}

/// The filtering criteria. If the request specifies multiple filters,
/// the endpoint uses a logical AND to evaluate them.
public struct LoyaltyEventFilter: Codable {
    /// Filter events by date time range.
    public var dateTimeFilter: LoyaltyEventDateTimeFilter?
    /// Filter events by location.
    public var locationFilter: LoyaltyEventLocationFilter?
    /// Filter events by loyalty account.
    public var loyaltyAccountFilter: LoyaltyEventLoyaltyAccountFilter?
    /// Filter events by the order associated with the event.
    public var orderFilter: LoyaltyEventOrderFilter?
    /// Filter events by event type.
    public var typeFilter: LoyaltyEventTypeFilter?

    public init(dateTimeFilter: LoyaltyEventDateTimeFilter? = nil, locationFilter: LoyaltyEventLocationFilter? = nil, loyaltyAccountFilter: LoyaltyEventLoyaltyAccountFilter? = nil, orderFilter: LoyaltyEventOrderFilter? = nil, typeFilter: LoyaltyEventTypeFilter? = nil) {
        self.dateTimeFilter = dateTimeFilter
        self.locationFilter = locationFilter
        self.loyaltyAccountFilter = loyaltyAccountFilter
        self.orderFilter = orderFilter
        self.typeFilter = typeFilter
    }

    private enum CodingKeys: String, CodingKey {
        case dateTimeFilter = "date_time_filter"
        case locationFilter = "location_filter"
        case loyaltyAccountFilter = "loyalty_account_filter"
        case orderFilter = "order_filter"
        case typeFilter = "type_filter"
    }
}

/// Filter events by location.
public struct LoyaltyEventLocationFilter: Codable {
    /// The [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) IDs for loyalty events to query.
    /// If multiple values are specified, the endpoint uses
    /// a logical OR to combine them.
    public var locationIDs: [String]

    public init(locationIDs: [String]) {
        self.locationIDs = locationIDs
    }

    private enum CodingKeys: String, CodingKey {
        case locationIDs = "location_ids"
    }
}

/// Filter events by loyalty account.
public struct LoyaltyEventLoyaltyAccountFilter: Codable {
    /// The ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) associated with loyalty events.
    public var loyaltyAccountID: String

    public init(loyaltyAccountID: String) {
        self.loyaltyAccountID = loyaltyAccountID
    }

    private enum CodingKeys: String, CodingKey {
        case loyaltyAccountID = "loyalty_account_id"
    }
}

/// Filter events by the order associated with the event.
public struct LoyaltyEventOrderFilter: Codable {
    /// The ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) associated with the event.
    public var orderID: String

    public init(orderID: String) {
        self.orderID = orderID
    }

    private enum CodingKeys: String, CodingKey {
        case orderID = "order_id"
    }
}

/// Provides metadata when the event `type` is `OTHER`.
public struct LoyaltyEventOther: Codable {
    /// The Square-assigned ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
    public var loyaltyProgramID: String
    /// The number of points added or removed.
    public var points: Int

    public init(loyaltyProgramID: String, points: Int) {
        self.loyaltyProgramID = loyaltyProgramID
        self.points = points
    }

    private enum CodingKeys: String, CodingKey {
        case loyaltyProgramID = "loyalty_program_id"
        case points
    }
}

/// Represents a query used to search for loyalty events.
public struct LoyaltyEventQuery: Codable {
    /// The filtering criteria. If the request specifies multiple filters,
    /// the endpoint uses a logical AND to evaluate them.
    public var filter: LoyaltyEventFilter?

    public init(filter: LoyaltyEventFilter? = nil) {
        self.filter = filter
    }
}

/// Provides metadata when the event `type` is `REDEEM_REWARD`.
public struct LoyaltyEventRedeemReward: Codable {
    /// The ID of the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram).
    public var loyaltyProgramID: String
    /// The ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) that redeemed the reward.
    /// This field is returned only if the Orders API is used to process orders.
    public var orderID: String?
    /// The ID of the redeemed [loyalty reward](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyReward).
    /// This field is returned only if the event source is `LOYALTY_API`.
    public var rewardID: String?

    public init(loyaltyProgramID: String, orderID: String? = nil, rewardID: String? = nil) {
        self.loyaltyProgramID = loyaltyProgramID
        self.orderID = orderID
        self.rewardID = rewardID
    }

    private enum CodingKeys: String, CodingKey {
        case loyaltyProgramID = "loyalty_program_id"
        case orderID = "order_id"
        case rewardID = "reward_id"
    }
}

/// Defines whether the event was generated by the Square Point of Sale.
public enum LoyaltyEventSource: String, Codable, CaseIterable {
    case square = "SQUARE"
    case loyaltyAPI = "LOYALTY_API"
}

/// The type of the loyalty event.
public enum LoyaltyEventType: String, Codable, CaseIterable {
    case accumulatePoints = "ACCUMULATE_POINTS"
    case createReward = "CREATE_REWARD"
    case redeemReward = "REDEEM_REWARD"
    case deleteReward = "DELETE_REWARD"
    case adjustPoints = "ADJUST_POINTS"
    case expirePoints = "EXPIRE_POINTS"
    case other = "OTHER"
}

/// Filter events by event type.
public struct LoyaltyEventTypeFilter: Codable {
    /// The loyalty event types used to filter the result.
    /// If multiple values are specified, the endpoint uses a
    /// logical OR to combine them.
    public var types: [String]

    public init(types: [String]) {
        self.types = types
    }
}

/// Represents a Square loyalty program. Loyalty programs define how buyers can earn points and redeem points for rewards.
/// Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard.
/// For more information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).
public struct LoyaltyProgram: Codable {
    /// Defines how buyers can earn loyalty points.
    public var accrualRules: [LoyaltyProgramAccrualRule]
    /// The timestamp when the program was created, in RFC 3339 format.
    public var createdAt: String
    /// Describes when the loyalty program expires.
    public var expirationPolicy: LoyaltyProgramExpirationPolicy?
    /// The Square-assigned ID of the loyalty program. Updates to
    /// the loyalty program do not modify the identifier.
    public var id: String
    /// The [locations](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) at which the program is active.
    public var locationIDs: [String]
    /// The list of rewards for buyers, sorted by ascending points.
    public var rewardTiers: [LoyaltyProgramRewardTier]
    /// Whether the program is currently active.
    public var status: String
    /// Represents the naming used for loyalty points.
    public var terminology: LoyaltyProgramTerminology
    /// The timestamp when the reward was last updated, in RFC 3339 format.
    public var updatedAt: String

    public init(accrualRules: [LoyaltyProgramAccrualRule], createdAt: String, expirationPolicy: LoyaltyProgramExpirationPolicy? = nil, id: String, locationIDs: [String], rewardTiers: [LoyaltyProgramRewardTier], status: String, terminology: LoyaltyProgramTerminology, updatedAt: String) {
        self.accrualRules = accrualRules
        self.createdAt = createdAt
        self.expirationPolicy = expirationPolicy
        self.id = id
        self.locationIDs = locationIDs
        self.rewardTiers = rewardTiers
        self.status = status
        self.terminology = terminology
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case accrualRules = "accrual_rules"
        case createdAt = "created_at"
        case expirationPolicy = "expiration_policy"
        case id
        case locationIDs = "location_ids"
        case rewardTiers = "reward_tiers"
        case status
        case terminology
        case updatedAt = "updated_at"
    }
}

/// Defines an accrual rule, which is how buyers can earn points.
public struct LoyaltyProgramAccrualRule: Codable {
    /// The type of the accrual rule that defines how buyers can earn points.
    public var accrualType: String
    /// When the accrual rule is item-based or category-based, this field specifies the ID
    /// of the [catalog object](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject) that buyers can purchase to earn points.
    /// If `accrual_type` is `ITEM_VARIATION`, the object is an item variation.
    /// If `accrual_type` is `CATEGORY`, the object is a category.
    public var catalogObjectID: String?
    /// When the accrual rule is spend-based (`accrual_type` is `SPEND`), this field
    /// lists the IDs of any `CATEGORY` catalog objects that are excluded from points accrual.
    /// 
    /// You can use the [BatchRetrieveCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/batch-retrieve-catalog-objects)
    /// endpoint to retrieve information about the excluded categories.
    public var excludedCategoryIDs: [String]?
    /// When the accrual rule is spend-based (`accrual_type` is `SPEND`), this field
    /// lists the IDs of any `ITEM_VARIATION` catalog objects that are excluded from points accrual.
    /// 
    /// You can use the [BatchRetrieveCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/batch-retrieve-catalog-objects)
    /// endpoint to retrieve information about the excluded item variations.
    public var excludedItemVariationIDs: [String]?
    /// The number of points that
    /// buyers earn based on the `accrual_type`.
    public var points: Int?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var spendAmountMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var visitMinimumAmountMoney: Money?

    public init(accrualType: String, catalogObjectID: String? = nil, excludedCategoryIDs: [String]? = nil, excludedItemVariationIDs: [String]? = nil, points: Int? = nil, spendAmountMoney: Money? = nil, visitMinimumAmountMoney: Money? = nil) {
        self.accrualType = accrualType
        self.catalogObjectID = catalogObjectID
        self.excludedCategoryIDs = excludedCategoryIDs
        self.excludedItemVariationIDs = excludedItemVariationIDs
        self.points = points
        self.spendAmountMoney = spendAmountMoney
        self.visitMinimumAmountMoney = visitMinimumAmountMoney
    }

    private enum CodingKeys: String, CodingKey {
        case accrualType = "accrual_type"
        case catalogObjectID = "catalog_object_id"
        case excludedCategoryIDs = "excluded_category_ids"
        case excludedItemVariationIDs = "excluded_item_variation_ids"
        case points
        case spendAmountMoney = "spend_amount_money"
        case visitMinimumAmountMoney = "visit_minimum_amount_money"
    }
}

/// The type of the accrual rule that defines how buyers can earn points.
public enum LoyaltyProgramAccrualRuleType: String, Codable, CaseIterable {
    case visit = "VISIT"
    case spend = "SPEND"
    case itemVariation = "ITEM_VARIATION"
    case category = "CATEGORY"
}

/// Describes when the loyalty program expires.
public struct LoyaltyProgramExpirationPolicy: Codable {
    /// The number of months before points expire, in `P[n]M` RFC 3339 duration format. For example, a value of `P12M` represents a duration of 12 months.
    /// Points are valid through the last day of the month in which they are scheduled to expire. For example, with a  `P12M` duration, points earned on July 6, 2020 expire on August 1, 2021.
    public var expirationDuration: String

    public init(expirationDuration: String) {
        self.expirationDuration = expirationDuration
    }

    private enum CodingKeys: String, CodingKey {
        case expirationDuration = "expiration_duration"
    }
}

/// Provides details about the reward tier discount. DEPRECATED at version 2020-12-16. Discount details
/// are now defined using a catalog pricing rule and other catalog objects. For more information, see
/// [Get discount details for the reward](https://developer.squareup.com/docs/loyalty-api/overview#get-discount-details).
public struct LoyaltyProgramRewardDefinition: Codable {
    /// The list of catalog objects to which this reward can be applied. They are either all item-variation ids or category ids, depending on the `type` field.
    /// DEPRECATED at version 2020-12-16. You can find this information in the `product_set_data.product_ids_any` field
    /// of the `PRODUCT_SET` catalog object referenced by the pricing rule.
    public var catalogObjectIDs: [String]?
    /// The type of discount the reward tier offers. DEPRECATED at version 2020-12-16. You can find this information
    /// in the `discount_data.discount_type` field of the `DISCOUNT` catalog object referenced by the pricing rule.
    public var discountType: String
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var fixedDiscountMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var maxDiscountMoney: Money?
    /// The fixed percentage of the discount. Present if `discount_type` is `FIXED_PERCENTAGE`.
    /// For example, a 7.25% off discount will be represented as "7.25". DEPRECATED at version 2020-12-16. You can find this
    /// information in the `discount_data.percentage` field of the `DISCOUNT` catalog object referenced by the pricing rule.
    public var percentageDiscount: String?
    /// Indicates the scope of the reward tier. DEPRECATED at version 2020-12-16. You can find this information in the
    /// `discount_target_scope` field of the `PRICING_RULE` catalog object and the `product_set_data` field of the `PRODUCT_SET`
    /// catalog object referenced by the pricing rule. For `ORDER` scopes, the target scope is `WHOLE_PURCHASE` and `all_products`
    /// is true. For `ITEM_VARIATION` and `CATEGORY` scopes, the target scope is `LINE_ITEM` and `product_ids_any` is a list of
    /// catalog object IDs of the given type.
    public var scope: String

    public init(catalogObjectIDs: [String]? = nil, discountType: String, fixedDiscountMoney: Money? = nil, maxDiscountMoney: Money? = nil, percentageDiscount: String? = nil, scope: String) {
        self.catalogObjectIDs = catalogObjectIDs
        self.discountType = discountType
        self.fixedDiscountMoney = fixedDiscountMoney
        self.maxDiscountMoney = maxDiscountMoney
        self.percentageDiscount = percentageDiscount
        self.scope = scope
    }

    private enum CodingKeys: String, CodingKey {
        case catalogObjectIDs = "catalog_object_ids"
        case discountType = "discount_type"
        case fixedDiscountMoney = "fixed_discount_money"
        case maxDiscountMoney = "max_discount_money"
        case percentageDiscount = "percentage_discount"
        case scope
    }
}

/// Indicates the scope of the reward tier. DEPRECATED at version 2020-12-16. Discount details
/// are now defined using a catalog pricing rule and other catalog objects. For more information, see
/// [Get discount details for the reward](https://developer.squareup.com/docs/loyalty-api/overview#get-discount-details).
public enum LoyaltyProgramRewardDefinitionScope: String, Codable, CaseIterable {
    case order = "ORDER"
    case itemVariation = "ITEM_VARIATION"
    case category = "CATEGORY"
}

/// The type of discount the reward tier offers. DEPRECATED at version 2020-12-16. Discount details
/// are now defined using a catalog pricing rule and other catalog objects. For more information, see
/// [Get discount details for the reward](https://developer.squareup.com/docs/loyalty-api/overview#get-discount-details).
public enum LoyaltyProgramRewardDefinitionType: String, Codable, CaseIterable {
    case fixedAmount = "FIXED_AMOUNT"
    case fixedPercentage = "FIXED_PERCENTAGE"
}

/// Represents a reward tier in a loyalty program. A reward tier defines how buyers can redeem points for a reward, such as the number of points required and the value and scope of the discount. A loyalty program can offer multiple reward tiers.
public struct LoyaltyProgramRewardTier: Codable {
    /// The timestamp when the reward tier was created, in RFC 3339 format.
    public var createdAt: String
    /// Provides details about the reward tier discount. DEPRECATED at version 2020-12-16. Discount details
    /// are now defined using a catalog pricing rule and other catalog objects. For more information, see
    /// [Get discount details for the reward](https://developer.squareup.com/docs/loyalty-api/overview#get-discount-details).
    public var definition: LoyaltyProgramRewardDefinition
    /// The Square-assigned ID of the reward tier.
    public var id: String
    /// The name of the reward tier.
    public var name: String
    /// The points exchanged for the reward tier.
    public var points: Int
    /// A reference to a Catalog object at a specific version. In general this is
    /// used as an entry point into a graph of catalog objects, where the objects exist
    /// at a specific version.
    public var pricingRuleReference: CatalogObjectReference?

    public init(createdAt: String, definition: LoyaltyProgramRewardDefinition, id: String, name: String, points: Int, pricingRuleReference: CatalogObjectReference? = nil) {
        self.createdAt = createdAt
        self.definition = definition
        self.id = id
        self.name = name
        self.points = points
        self.pricingRuleReference = pricingRuleReference
    }

    private enum CodingKeys: String, CodingKey {
        case createdAt = "created_at"
        case definition
        case id
        case name
        case points
        case pricingRuleReference = "pricing_rule_reference"
    }
}

/// Indicates whether the program is currently active.
public enum LoyaltyProgramStatus: String, Codable, CaseIterable {
    case inactive = "INACTIVE"
    case active = "ACTIVE"
}

/// Represents the naming used for loyalty points.
public struct LoyaltyProgramTerminology: Codable {
    /// A singular unit for a point (for example, 1 point is called 1 star).
    public var one: String
    /// A plural unit for point (for example, 10 points is called 10 stars).
    public var other: String

    public init(one: String, other: String) {
        self.one = one
        self.other = other
    }
}

/// Represents a contract to redeem loyalty points for a [reward tier](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgramRewardTier) discount. Loyalty rewards can be in an ISSUED, REDEEMED, or DELETED state. For more information, see [Redeem loyalty rewards](https://developer.squareup.com/docs/loyalty-api/overview#redeem-loyalty-rewards).
public struct LoyaltyReward: Codable {
    /// The timestamp when the reward was created, in RFC 3339 format.
    public var createdAt: String?
    /// The Square-assigned ID of the loyalty reward.
    public var id: String?
    /// The Square-assigned ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) to which the reward belongs.
    public var loyaltyAccountID: String
    /// The Square-assigned ID of the [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) to which the reward is attached.
    public var orderID: String?
    /// The number of loyalty points used for the reward.
    public var points: Int?
    /// The timestamp when the reward was redeemed, in RFC 3339 format.
    public var redeemedAt: String?
    /// The Square-assigned ID of the [reward tier](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgramRewardTier) used to create the reward.
    public var rewardTierID: String
    /// The status of a loyalty reward.
    public var status: String?
    /// The timestamp when the reward was last updated, in RFC 3339 format.
    public var updatedAt: String?

    public init(createdAt: String? = nil, id: String? = nil, loyaltyAccountID: String, orderID: String? = nil, points: Int? = nil, redeemedAt: String? = nil, rewardTierID: String, status: String? = nil, updatedAt: String? = nil) {
        self.createdAt = createdAt
        self.id = id
        self.loyaltyAccountID = loyaltyAccountID
        self.orderID = orderID
        self.points = points
        self.redeemedAt = redeemedAt
        self.rewardTierID = rewardTierID
        self.status = status
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case createdAt = "created_at"
        case id
        case loyaltyAccountID = "loyalty_account_id"
        case orderID = "order_id"
        case points
        case redeemedAt = "redeemed_at"
        case rewardTierID = "reward_tier_id"
        case status
        case updatedAt = "updated_at"
    }
}

/// The status of the loyalty reward.
public enum LoyaltyRewardStatus: String, Codable, CaseIterable {
    case issued = "ISSUED"
    case redeemed = "REDEEMED"
    case deleted = "DELETED"
}

/// Represents a unit of measurement to use with a quantity, such as ounces
/// or inches. Exactly one of the following fields are required: `custom_unit`,
/// `area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.
public struct MeasurementUnit: Codable {
    /// Represents a standard area unit.
    public var areaUnit: String?
    /// The information needed to define a custom unit, provided by the seller.
    public var customUnit: MeasurementUnitCustom?
    /// Reserved for API integrations that lack the ability to specify a real measurement unit
    public var genericUnit: String?
    /// Represents a standard length unit.
    public var lengthUnit: String?
    /// Represents a standard unit of time.
    public var timeUnit: String?
    /// Represents the type of the measurement unit.
    public var type: String?
    /// Represents a standard volume unit.
    public var volumeUnit: String?
    /// Represents a standard unit of weight or mass.
    public var weightUnit: String?

    public init(areaUnit: String? = nil, customUnit: MeasurementUnitCustom? = nil, genericUnit: String? = nil, lengthUnit: String? = nil, timeUnit: String? = nil, type: String? = nil, volumeUnit: String? = nil, weightUnit: String? = nil) {
        self.areaUnit = areaUnit
        self.customUnit = customUnit
        self.genericUnit = genericUnit
        self.lengthUnit = lengthUnit
        self.timeUnit = timeUnit
        self.type = type
        self.volumeUnit = volumeUnit
        self.weightUnit = weightUnit
    }

    private enum CodingKeys: String, CodingKey {
        case areaUnit = "area_unit"
        case customUnit = "custom_unit"
        case genericUnit = "generic_unit"
        case lengthUnit = "length_unit"
        case timeUnit = "time_unit"
        case type
        case volumeUnit = "volume_unit"
        case weightUnit = "weight_unit"
    }
}

/// Unit of area used to measure a quantity.
public enum MeasurementUnitArea: String, Codable, CaseIterable {
    case imperialAcre = "IMPERIAL_ACRE"
    case imperialSquareInch = "IMPERIAL_SQUARE_INCH"
    case imperialSquareFoot = "IMPERIAL_SQUARE_FOOT"
    case imperialSquareYard = "IMPERIAL_SQUARE_YARD"
    case imperialSquareMile = "IMPERIAL_SQUARE_MILE"
    case metricSquareCentimeter = "METRIC_SQUARE_CENTIMETER"
    case metricSquareMeter = "METRIC_SQUARE_METER"
    case metricSquareKilometer = "METRIC_SQUARE_KILOMETER"
}

/// The information needed to define a custom unit, provided by the seller.
public struct MeasurementUnitCustom: Codable {
    /// The abbreviation of the custom unit, such as "bsh" (bushel). This appears
    /// in the cart for the Point of Sale app, and in reports.
    public var abbreviation: String
    /// The name of the custom unit, for example "bushel".
    public var name: String

    public init(abbreviation: String, name: String) {
        self.abbreviation = abbreviation
        self.name = name
    }
}

public enum MeasurementUnitGeneric: String, Codable, CaseIterable {
    case unit = "UNIT"
}

/// The unit of length used to measure a quantity.
public enum MeasurementUnitLength: String, Codable, CaseIterable {
    case imperialInch = "IMPERIAL_INCH"
    case imperialFoot = "IMPERIAL_FOOT"
    case imperialYard = "IMPERIAL_YARD"
    case imperialMile = "IMPERIAL_MILE"
    case metricMillimeter = "METRIC_MILLIMETER"
    case metricCentimeter = "METRIC_CENTIMETER"
    case metricMeter = "METRIC_METER"
    case metricKilometer = "METRIC_KILOMETER"
}

/// Unit of time used to measure a quantity (a duration).
public enum MeasurementUnitTime: String, Codable, CaseIterable {
    case genericMillisecond = "GENERIC_MILLISECOND"
    case genericSecond = "GENERIC_SECOND"
    case genericMinute = "GENERIC_MINUTE"
    case genericHour = "GENERIC_HOUR"
    case genericDay = "GENERIC_DAY"
}

/// Describes the type of this unit and indicates which field contains the unit information. This is an â€˜openâ€™ enum.
public enum MeasurementUnitUnitType: String, Codable, CaseIterable {
    case typeCustom = "TYPE_CUSTOM"
    case typeArea = "TYPE_AREA"
    case typeLength = "TYPE_LENGTH"
    case typeVolume = "TYPE_VOLUME"
    case typeWeight = "TYPE_WEIGHT"
    case typeGeneric = "TYPE_GENERIC"
}

/// The unit of volume used to measure a quantity.
public enum MeasurementUnitVolume: String, Codable, CaseIterable {
    case genericFluidOunce = "GENERIC_FLUID_OUNCE"
    case genericShot = "GENERIC_SHOT"
    case genericCup = "GENERIC_CUP"
    case genericPint = "GENERIC_PINT"
    case genericQuart = "GENERIC_QUART"
    case genericGallon = "GENERIC_GALLON"
    case imperialCubicInch = "IMPERIAL_CUBIC_INCH"
    case imperialCubicFoot = "IMPERIAL_CUBIC_FOOT"
    case imperialCubicYard = "IMPERIAL_CUBIC_YARD"
    case metricMilliliter = "METRIC_MILLILITER"
    case metricLiter = "METRIC_LITER"
}

/// Unit of weight used to measure a quantity.
public enum MeasurementUnitWeight: String, Codable, CaseIterable {
    case imperialWeightOunce = "IMPERIAL_WEIGHT_OUNCE"
    case imperialPound = "IMPERIAL_POUND"
    case imperialStone = "IMPERIAL_STONE"
    case metricMilligram = "METRIC_MILLIGRAM"
    case metricGram = "METRIC_GRAM"
    case metricKilogram = "METRIC_KILOGRAM"
}

/// Represents a Square seller.
public struct Merchant: Codable {
    /// The business name of the merchant.
    public var businessName: String?
    /// The country code associated with the merchant account, in ISO 3166 format.
    public var country: String
    /// The currency associated with the merchant account, in ISO 4217 format.
    public var currency: String?
    /// The Square-issued ID of the merchant.
    public var id: String?
    /// The language code associated with the merchant account, in BCP 47 format.
    public var languageCode: String?
    /// The ID of the main `Location` for this merchant.
    public var mainLocationID: String?
    /// The merchant status, active or inactive.
    public var status: String?

    public init(businessName: String? = nil, country: String, currency: String? = nil, id: String? = nil, languageCode: String? = nil, mainLocationID: String? = nil, status: String? = nil) {
        self.businessName = businessName
        self.country = country
        self.currency = currency
        self.id = id
        self.languageCode = languageCode
        self.mainLocationID = mainLocationID
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case businessName = "business_name"
        case country
        case currency
        case id
        case languageCode = "language_code"
        case mainLocationID = "main_location_id"
        case status
    }
}

public enum MerchantStatus: String, Codable, CaseIterable {
    case active = "ACTIVE"
    case inactive = "INACTIVE"
}

/// Represents an amount of money. `Money` fields can be signed or unsigned.
/// Fields that do not explicitly define whether they are signed or unsigned are
/// considered unsigned and can only hold positive amounts. For signed fields, the
/// sign of the value indicates the purpose of the money transfer. See
/// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
/// for more information.
public struct Money: Codable {
    /// The amount of money, in the smallest denomination of the currency
    /// indicated by `currency`. For example, when `currency` is `USD`, `amount` is
    /// in cents. Monetary amounts can be positive or negative. See the specific
    /// field description to determine the meaning of the sign in a particular case.
    public var amount: Int?
    /// The type of currency, in __ISO 4217 format__. For example, the currency
    /// code for US dollars is `USD`.
    /// 
    /// See [Currency](https://developer.squareup.com/reference/square_2021-08-18/enums/Currency) for possible values.
    public var currency: String?

    public init(amount: Int? = nil, currency: String? = nil) {
        self.amount = amount
        self.currency = currency
    }
}

/// Example:
///
/// {
///   "request_body" : {
///     "client_id" : "APPLICATION_ID",
///     "client_secret" : "APPLICATION_SECRET",
///     "code" : "CODE_FROM_AUTHORIZE",
///     "grant_type" : "authorization_code"
///   }
/// }
public struct ObtainTokenRequest: Codable {
    /// The Square-issued ID of your application, available from the
    /// [developer dashboard](https://developer.squareup.com/apps).
    public var clientID: String
    /// The Square-issued application secret for your application, available
    /// from the [developer dashboard](https://developer.squareup.com/apps).
    public var clientSecret: String
    /// The authorization code to exchange.
    /// This is required if `grant_type` is set to `authorization_code`, to indicate that
    /// the application wants to exchange an authorization code for an OAuth access token.
    public var code: String?
    /// Specifies the method to request an OAuth access token.
    /// Valid values are: `authorization_code`, `refresh_token`, and `migration_token`
    public var grantType: String
    /// Legacy OAuth access token obtained using a Connect API version prior
    /// to 2019-03-13. This parameter is required if `grant_type` is set to
    /// `migration_token` to indicate that the application wants to get a replacement
    /// OAuth access token. The response also returns a refresh token.
    /// For more information, see [Migrate to Using Refresh Tokens](https://developer.squareup.com/docs/oauth-api/migrate-to-refresh-tokens).
    public var migrationToken: String?
    /// The redirect URL assigned in the [developer dashboard](https://developer.squareup.com/apps).
    public var redirectUri: String?
    /// A valid refresh token for generating a new OAuth access token.
    /// A valid refresh token is required if `grant_type` is set to `refresh_token` , to indicate the application wants a replacement for an expired OAuth access token.
    public var refreshToken: String?
    /// A JSON list of strings representing the permissions the application is requesting.
    /// For example: "`["MERCHANT_PROFILE_READ","PAYMENTS_READ","BANK_ACCOUNTS_READ"]`"
    /// The access token returned in the response is granted the permissions
    /// that comprise the intersection between the requested list of permissions, and those
    /// that belong to the provided refresh token.
    public var scopes: [String]?
    /// A boolean indicating a request for a short-lived access token.
    /// The short-lived access token returned in the response will expire in 24 hours.
    public var isShortLived: Bool?

    public init(clientID: String, clientSecret: String, code: String? = nil, grantType: String, migrationToken: String? = nil, redirectUri: String? = nil, refreshToken: String? = nil, scopes: [String]? = nil, isShortLived: Bool? = nil) {
        self.clientID = clientID
        self.clientSecret = clientSecret
        self.code = code
        self.grantType = grantType
        self.migrationToken = migrationToken
        self.redirectUri = redirectUri
        self.refreshToken = refreshToken
        self.scopes = scopes
        self.isShortLived = isShortLived
    }

    private enum CodingKeys: String, CodingKey {
        case clientID = "client_id"
        case clientSecret = "client_secret"
        case code
        case grantType = "grant_type"
        case migrationToken = "migration_token"
        case redirectUri = "redirect_uri"
        case refreshToken = "refresh_token"
        case scopes
        case isShortLived = "short_lived"
    }
}

/// Example:
///
/// {
///   "access_token" : "ACCESS_TOKEN",
///   "expires_at" : "2006-01-02T15:04:05Z",
///   "merchant_id" : "MERCHANT_ID",
///   "refresh_token" : "REFRESH_TOKEN",
///   "token_type" : "bearer"
/// }
public struct ObtainTokenResponse: Codable {
    /// A valid OAuth access token. OAuth access tokens are 64 bytes long.
    /// Provide the access token in a header with every request to Connect API
    /// endpoints. See [OAuth API: Walkthrough](https://developer.squareup.com/docs/oauth-api/walkthrough)
    /// for more information.
    public var accessToken: String?
    /// The date when access_token expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format.
    public var expiresAt: String?
    /// Then OpenID token belonging to this this person. Only present if the
    /// OPENID scope is included in the authorize request.
    public var idToken: String?
    /// The ID of the authorizing merchant's business.
    public var merchantID: String?
    /// __LEGACY FIELD__. The ID of the subscription plan the merchant signed
    /// up for. Only present if the merchant signed up for a subscription during
    /// authorization.
    public var planID: String?
    /// A refresh token. OAuth refresh tokens are 64 bytes long.
    /// For more information, see [OAuth access token management](https://developer.squareup.com/docs/oauth-api/how-it-works#oauth-access-token-management).
    public var refreshToken: String?
    /// A boolean indicating the access token is a short-lived access token.
    /// The short-lived access token returned in the response will expire in 24 hours.
    public var isShortLived: Bool?
    /// __LEGACY FIELD__. The ID of a subscription plan the merchant signed up
    /// for. Only present if the merchant signed up for a subscription during authorization.
    public var subscriptionID: String?
    /// This value is always _bearer_.
    public var tokenType: String?

    public init(accessToken: String? = nil, expiresAt: String? = nil, idToken: String? = nil, merchantID: String? = nil, planID: String? = nil, refreshToken: String? = nil, isShortLived: Bool? = nil, subscriptionID: String? = nil, tokenType: String? = nil) {
        self.accessToken = accessToken
        self.expiresAt = expiresAt
        self.idToken = idToken
        self.merchantID = merchantID
        self.planID = planID
        self.refreshToken = refreshToken
        self.isShortLived = isShortLived
        self.subscriptionID = subscriptionID
        self.tokenType = tokenType
    }

    private enum CodingKeys: String, CodingKey {
        case accessToken = "access_token"
        case expiresAt = "expires_at"
        case idToken = "id_token"
        case merchantID = "merchant_id"
        case planID = "plan_id"
        case refreshToken = "refresh_token"
        case isShortLived = "short_lived"
        case subscriptionID = "subscription_id"
        case tokenType = "token_type"
    }
}

public struct OnboardAppointmentsRequest: Codable {
    public init() {}
}

/// Contains all information related to a single order to process with Square,
/// including line items that specify the products to purchase. `Order` objects also
/// include information about any associated tenders, refunds, and returns.
/// 
/// All Connect V2 Transactions have all been converted to Orders including all associated
/// itemization data.
public struct Order: Codable {
    /// The timestamp for when the order reached a terminal [state](https://developer.squareup.com/reference/square_2021-08-18/enums/OrderState), in RFC 3339 format (for example "2016-09-04T23:59:33.123Z").
    public var closedAt: String?
    /// The timestamp for when the order was created, in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
    public var createdAt: String?
    /// The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) associated with the order.
    /// 
    /// __IMPORTANT:__ You should specify a `customer_id` if you want the corresponding payment transactions
    /// to be explicitly linked to the customer in the Seller Dashboard. If this field is omitted, the
    /// `customer_id` assigned to any underlying `Payment` objects is ignored and might result in the
    /// creation of new [instant profiles](https://developer.squareup.com/docs/customers-api/what-it-does#instant-profiles).
    public var customerID: String?
    /// The list of all discounts associated with the order.
    /// 
    /// Discounts can be scoped to either `ORDER` or `LINE_ITEM`. For discounts scoped to `LINE_ITEM`,
    /// an `OrderLineItemAppliedDiscount` must be added to each line item that the discount applies to.
    /// For discounts with `ORDER` scope, the server generates an `OrderLineItemAppliedDiscount`
    /// for every line item.
    /// 
    /// __IMPORTANT__: If `LINE_ITEM` scope is set on any discounts in this field, using the deprecated
    /// `line_items.discounts` field results in an error. Use `line_items.applied_discounts`
    /// instead.
    public var discounts: [OrderLineItemDiscount]?
    /// Details about order fulfillment.
    /// 
    /// Orders can only be created with at most one fulfillment. However, orders returned
    /// by the API might contain multiple fulfillments.
    public var fulfillments: [OrderFulfillment]?
    /// The order's unique ID.
    public var id: String?
    /// The line items included in the order.
    public var lineItems: [OrderLineItem]?
    /// The ID of the seller location that this order is associated with.
    public var locationID: String
    /// Application-defined data attached to this order. Metadata fields are intended
    /// to store descriptive references or associations with an entity in another system or store brief
    /// information about the object. Square does not process this field; it only stores and returns it
    /// in relevant API calls. Do not use metadata to store any sensitive information (such as personally
    /// identifiable information or card details).
    /// 
    /// Keys written by applications must be 60 characters or less and must be in the character set
    /// `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
    /// with a namespace, separated from the key with a ':' character.
    /// 
    /// Values have a maximum length of 255 characters.
    /// 
    /// An application can have up to 10 entries per metadata field.
    /// 
    /// Entries written by applications are private and can only be read or modified by the same
    /// application.
    /// 
    /// For more information, see  [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
    public var metadata: [String: String]?
    /// A collection of various money amounts.
    public var netAmounts: OrderMoneyAmounts?
    /// Pricing options for an order. The options affect how the order's price is calculated.
    /// They can be used, for example, to apply automatic price adjustments that are based on preconfigured
    /// [pricing rules](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogPricingRule).
    public var pricingOptions: OrderPricingOptions?
    /// A client-specified ID to associate an entity in another system
    /// with this order.
    public var referenceID: String?
    /// The refunds that are part of this order.
    public var refunds: [Refund]?
    /// A collection of various money amounts.
    public var returnAmounts: OrderMoneyAmounts?
    /// A collection of items from sale orders being returned in this one. Normally part of an
    /// itemized return or exchange. There is exactly one `Return` object per sale `Order` being
    /// referenced.
    public var returns: [OrderReturn]?
    /// A set-like list of Rewards that have been added to the Order.
    public var rewards: [OrderReward]?
    /// A rounding adjustment of the money being returned. Commonly used to apply cash rounding
    /// when the minimum unit of the account is smaller than the lowest physical denomination of the currency.
    public var roundingAdjustment: OrderRoundingAdjustment?
    /// A list of service charges applied to the order.
    public var serviceCharges: [OrderServiceCharge]?
    /// Represents the origination details of an order.
    public var source: OrderSource?
    /// The current state of the order: `OPEN`, `COMPLETED`, or `CANCELED`.
    public var state: String?
    /// The list of all taxes associated with the order.
    /// 
    /// Taxes can be scoped to either `ORDER` or `LINE_ITEM`. For taxes with `LINE_ITEM` scope, an
    /// `OrderLineItemAppliedTax` must be added to each line item that the tax applies to. For taxes
    /// with `ORDER` scope, the server generates an `OrderLineItemAppliedTax` for every line item.
    /// 
    /// On reads, each tax in the list includes the total amount of that tax applied to the order.
    /// 
    /// __IMPORTANT__: If `LINE_ITEM` scope is set on any taxes in this field, using the deprecated
    /// `line_items.taxes` field results in an error. Use `line_items.applied_taxes`
    /// instead.
    public var taxes: [OrderLineItemTax]?
    /// The tenders that were used to pay for the order.
    public var tenders: [Tender]?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var totalDiscountMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var totalMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var totalServiceChargeMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var totalTaxMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var totalTipMoney: Money?
    /// The timestamp for when the order was last updated, in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
    public var updatedAt: String?
    /// The version number, which is incremented each time an update is committed to the order.
    /// Orders not created through the API do not include a version number and
    /// therefore cannot be updated.
    /// 
    /// [Read more about working with versions](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders).
    public var version: Int?

    public init(closedAt: String? = nil, createdAt: String? = nil, customerID: String? = nil, discounts: [OrderLineItemDiscount]? = nil, fulfillments: [OrderFulfillment]? = nil, id: String? = nil, lineItems: [OrderLineItem]? = nil, locationID: String, metadata: [String: String]? = nil, netAmounts: OrderMoneyAmounts? = nil, pricingOptions: OrderPricingOptions? = nil, referenceID: String? = nil, refunds: [Refund]? = nil, returnAmounts: OrderMoneyAmounts? = nil, returns: [OrderReturn]? = nil, rewards: [OrderReward]? = nil, roundingAdjustment: OrderRoundingAdjustment? = nil, serviceCharges: [OrderServiceCharge]? = nil, source: OrderSource? = nil, state: String? = nil, taxes: [OrderLineItemTax]? = nil, tenders: [Tender]? = nil, totalDiscountMoney: Money? = nil, totalMoney: Money? = nil, totalServiceChargeMoney: Money? = nil, totalTaxMoney: Money? = nil, totalTipMoney: Money? = nil, updatedAt: String? = nil, version: Int? = nil) {
        self.closedAt = closedAt
        self.createdAt = createdAt
        self.customerID = customerID
        self.discounts = discounts
        self.fulfillments = fulfillments
        self.id = id
        self.lineItems = lineItems
        self.locationID = locationID
        self.metadata = metadata
        self.netAmounts = netAmounts
        self.pricingOptions = pricingOptions
        self.referenceID = referenceID
        self.refunds = refunds
        self.returnAmounts = returnAmounts
        self.returns = returns
        self.rewards = rewards
        self.roundingAdjustment = roundingAdjustment
        self.serviceCharges = serviceCharges
        self.source = source
        self.state = state
        self.taxes = taxes
        self.tenders = tenders
        self.totalDiscountMoney = totalDiscountMoney
        self.totalMoney = totalMoney
        self.totalServiceChargeMoney = totalServiceChargeMoney
        self.totalTaxMoney = totalTaxMoney
        self.totalTipMoney = totalTipMoney
        self.updatedAt = updatedAt
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case closedAt = "closed_at"
        case createdAt = "created_at"
        case customerID = "customer_id"
        case discounts
        case fulfillments
        case id
        case lineItems = "line_items"
        case locationID = "location_id"
        case metadata
        case netAmounts = "net_amounts"
        case pricingOptions = "pricing_options"
        case referenceID = "reference_id"
        case refunds
        case returnAmounts = "return_amounts"
        case returns
        case rewards
        case roundingAdjustment = "rounding_adjustment"
        case serviceCharges = "service_charges"
        case source
        case state
        case taxes
        case tenders
        case totalDiscountMoney = "total_discount_money"
        case totalMoney = "total_money"
        case totalServiceChargeMoney = "total_service_charge_money"
        case totalTaxMoney = "total_tax_money"
        case totalTipMoney = "total_tip_money"
        case updatedAt = "updated_at"
        case version
    }
}

public struct OrderCreated: Codable {
    /// The timestamp for when the order was created, in RFC 3339 format.
    public var createdAt: String?
    /// The ID of the seller location that this order is associated with.
    public var locationID: String?
    /// The order's unique ID.
    public var orderID: String?
    /// The state of the order.
    public var state: String?
    /// The version number, which is incremented each time an update is committed to the order.
    /// Orders that were not created through the API do not include a version number and
    /// therefore cannot be updated.
    /// 
    /// [Read more about working with versions.](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders)
    public var version: Int?

    public init(createdAt: String? = nil, locationID: String? = nil, orderID: String? = nil, state: String? = nil, version: Int? = nil) {
        self.createdAt = createdAt
        self.locationID = locationID
        self.orderID = orderID
        self.state = state
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case createdAt = "created_at"
        case locationID = "location_id"
        case orderID = "order_id"
        case state
        case version
    }
}

public struct OrderCreatedObject: Codable {
    public var orderCreated: OrderCreated?

    public init(orderCreated: OrderCreated? = nil) {
        self.orderCreated = orderCreated
    }

    private enum CodingKeys: String, CodingKey {
        case orderCreated = "order_created"
    }
}

/// A lightweight description of an [order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) that is returned when
/// `returned_entries` is `true` on a [SearchOrdersRequest](https://developer.squareup.com/reference/square_2021-08-18/orders-api/search-orders).
public struct OrderEntry: Codable {
    /// The location ID the order belongs to.
    public var locationID: String?
    /// The ID of the order.
    public var orderID: String?
    /// The version number, which is incremented each time an update is committed to the order.
    /// Orders that were not created through the API do not include a version number and
    /// therefore cannot be updated.
    /// 
    /// [Read more about working with versions.](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders)
    public var version: Int?

    public init(locationID: String? = nil, orderID: String? = nil, version: Int? = nil) {
        self.locationID = locationID
        self.orderID = orderID
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case locationID = "location_id"
        case orderID = "order_id"
        case version
    }
}

/// Contains details about how to fulfill this order.
public struct OrderFulfillment: Codable {
    /// Application-defined data attached to this fulfillment. Metadata fields are intended
    /// to store descriptive references or associations with an entity in another system or store brief
    /// information about the object. Square does not process this field; it only stores and returns it
    /// in relevant API calls. Do not use metadata to store any sensitive information (such as personally
    /// identifiable information or card details).
    /// 
    /// Keys written by applications must be 60 characters or less and must be in the character set
    /// `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
    /// with a namespace, separated from the key with a ':' character.
    /// 
    /// Values have a maximum length of 255 characters.
    /// 
    /// An application can have up to 10 entries per metadata field.
    /// 
    /// Entries written by applications are private and can only be read or modified by the same
    /// application.
    /// 
    /// For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
    public var metadata: [String: String]?
    /// Contains details necessary to fulfill a pickup order.
    public var pickupDetails: OrderFulfillmentPickupDetails?
    /// Contains the details necessary to fulfill a shipment order.
    public var shipmentDetails: OrderFulfillmentShipmentDetails?
    /// The state of the fulfillment.
    public var state: String?
    /// The type of the fulfillment.
    public var type: String?
    /// A unique ID that identifies the fulfillment only within this order.
    public var uid: String?

    public init(metadata: [String: String]? = nil, pickupDetails: OrderFulfillmentPickupDetails? = nil, shipmentDetails: OrderFulfillmentShipmentDetails? = nil, state: String? = nil, type: String? = nil, uid: String? = nil) {
        self.metadata = metadata
        self.pickupDetails = pickupDetails
        self.shipmentDetails = shipmentDetails
        self.state = state
        self.type = type
        self.uid = uid
    }

    private enum CodingKeys: String, CodingKey {
        case metadata
        case pickupDetails = "pickup_details"
        case shipmentDetails = "shipment_details"
        case state
        case type
        case uid
    }
}

/// Contains details necessary to fulfill a pickup order.
public struct OrderFulfillmentPickupDetails: Codable {
    /// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
    /// indicating when the fulfillment was accepted. The timestamp must be in RFC 3339 format
    /// (for example, "2016-09-04T23:59:33.123Z").
    public var acceptedAt: String?
    /// The duration of time after which an open and accepted pickup fulfillment
    /// is automatically moved to the `COMPLETED` state. The duration must be in RFC 3339
    /// format (for example, "P1W3D").
    /// 
    /// If not set, this pickup fulfillment remains accepted until it is canceled or completed.
    public var autoCompleteDuration: String?
    /// A description of why the pickup was canceled. The maximum length: 100 characters.
    public var cancelReason: String?
    /// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
    /// indicating when the fulfillment was canceled. The timestamp must be in RFC 3339 format
    /// (for example, "2016-09-04T23:59:33.123Z").
    public var canceledAt: String?
    /// Specific details for curbside pickup.
    public var curbsidePickupDetails: OrderFulfillmentPickupDetailsCurbsidePickupDetails?
    /// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
    /// indicating when the fulfillment expired. The timestamp must be in RFC 3339 format
    /// (for example, "2016-09-04T23:59:33.123Z").
    public var expiredAt: String?
    /// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
    /// indicating when this fulfillment expires if it is not accepted. The timestamp must be in RFC 3339 format
    /// (for example, "2016-09-04T23:59:33.123Z"). The expiration time can only be set up to 7 days in the future.
    /// If `expires_at` is not set, this pickup fulfillment is automatically accepted when
    /// placed.
    public var expiresAt: String?
    /// If set to `true`, indicates that this pickup order is for curbside pickup, not in-store pickup.
    public var isCurbsidePickup: Bool?
    /// A note meant to provide additional instructions about the pickup
    /// fulfillment displayed in the Square Point of Sale application and set by the API.
    public var note: String?
    /// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
    /// indicating when the fulfillment was picked up by the recipient. The timestamp must be in RFC 3339 format
    /// (for example, "2016-09-04T23:59:33.123Z").
    public var pickedUpAt: String?
    /// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
    /// that represents the start of the pickup window. Must be in RFC 3339 timestamp format, e.g.,
    /// "2016-09-04T23:59:33.123Z".
    /// 
    /// For fulfillments with the schedule type `ASAP`, this is automatically set
    /// to the current time plus the expected duration to prepare the fulfillment.
    public var pickupAt: String?
    /// The window of time in which the order should be picked up after the `pickup_at` timestamp.
    /// Must be in RFC 3339 duration format, e.g., "P1W3D". Can be used as an
    /// informational guideline for merchants.
    public var pickupWindowDuration: String?
    /// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
    /// indicating when the fulfillment was placed. The timestamp must be in RFC 3339 format
    /// (for example, "2016-09-04T23:59:33.123Z").
    public var placedAt: String?
    /// The duration of time it takes to prepare this fulfillment.
    /// The duration must be in RFC 3339 format (for example, "P1W3D").
    public var prepTimeDuration: String?
    /// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
    /// indicating when the fulfillment is marked as ready for pickup. The timestamp must be in RFC 3339 format
    /// (for example, "2016-09-04T23:59:33.123Z").
    public var readyAt: String?
    /// Contains information about the recipient of a fulfillment.
    public var recipient: OrderFulfillmentRecipient?
    /// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
    /// indicating when the fulfillment was rejected. The timestamp must be in RFC 3339 format
    /// (for example, "2016-09-04T23:59:33.123Z").
    public var rejectedAt: String?
    /// The schedule type of the pickup fulfillment. Defaults to `SCHEDULED`.
    public var scheduleType: String?

    public init(acceptedAt: String? = nil, autoCompleteDuration: String? = nil, cancelReason: String? = nil, canceledAt: String? = nil, curbsidePickupDetails: OrderFulfillmentPickupDetailsCurbsidePickupDetails? = nil, expiredAt: String? = nil, expiresAt: String? = nil, isCurbsidePickup: Bool? = nil, note: String? = nil, pickedUpAt: String? = nil, pickupAt: String? = nil, pickupWindowDuration: String? = nil, placedAt: String? = nil, prepTimeDuration: String? = nil, readyAt: String? = nil, recipient: OrderFulfillmentRecipient? = nil, rejectedAt: String? = nil, scheduleType: String? = nil) {
        self.acceptedAt = acceptedAt
        self.autoCompleteDuration = autoCompleteDuration
        self.cancelReason = cancelReason
        self.canceledAt = canceledAt
        self.curbsidePickupDetails = curbsidePickupDetails
        self.expiredAt = expiredAt
        self.expiresAt = expiresAt
        self.isCurbsidePickup = isCurbsidePickup
        self.note = note
        self.pickedUpAt = pickedUpAt
        self.pickupAt = pickupAt
        self.pickupWindowDuration = pickupWindowDuration
        self.placedAt = placedAt
        self.prepTimeDuration = prepTimeDuration
        self.readyAt = readyAt
        self.recipient = recipient
        self.rejectedAt = rejectedAt
        self.scheduleType = scheduleType
    }

    private enum CodingKeys: String, CodingKey {
        case acceptedAt = "accepted_at"
        case autoCompleteDuration = "auto_complete_duration"
        case cancelReason = "cancel_reason"
        case canceledAt = "canceled_at"
        case curbsidePickupDetails = "curbside_pickup_details"
        case expiredAt = "expired_at"
        case expiresAt = "expires_at"
        case isCurbsidePickup = "is_curbside_pickup"
        case note
        case pickedUpAt = "picked_up_at"
        case pickupAt = "pickup_at"
        case pickupWindowDuration = "pickup_window_duration"
        case placedAt = "placed_at"
        case prepTimeDuration = "prep_time_duration"
        case readyAt = "ready_at"
        case recipient
        case rejectedAt = "rejected_at"
        case scheduleType = "schedule_type"
    }
}

/// Specific details for curbside pickup.
public struct OrderFulfillmentPickupDetailsCurbsidePickupDetails: Codable {
    /// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
    /// indicating when the buyer arrived and is waiting for pickup. The timestamp must be in RFC 3339 format
    /// (for example, "2016-09-04T23:59:33.123Z").
    public var buyerArrivedAt: String?
    /// Specific details for curbside pickup, such as parking number and vehicle model.
    public var curbsideDetails: String?

    public init(buyerArrivedAt: String? = nil, curbsideDetails: String? = nil) {
        self.buyerArrivedAt = buyerArrivedAt
        self.curbsideDetails = curbsideDetails
    }

    private enum CodingKeys: String, CodingKey {
        case buyerArrivedAt = "buyer_arrived_at"
        case curbsideDetails = "curbside_details"
    }
}

/// The schedule type of the pickup fulfillment.
public enum OrderFulfillmentPickupDetailsScheduleType: String, Codable, CaseIterable {
    case scheduled = "SCHEDULED"
    case asap = "ASAP"
}

/// Contains information about the recipient of a fulfillment.
public struct OrderFulfillmentRecipient: Codable {
    /// Represents a postal address in a country. The address format is based
    /// on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
    /// see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
    /// This format has dedicated fields for four address components: postal code,
    /// locality (city), administrative district (state, prefecture, or province), and
    /// sublocality (town or village). These components have dedicated fields in the
    /// `Address` object because software sometimes behaves differently based on them.
    /// For example, sales tax software may charge different amounts of sales tax
    /// based on the postal code, and some software is only available in
    /// certain states due to compliance reasons.
    /// 
    /// For the remaining address components, the `Address` type provides the
    /// `address_line_1` and `address_line_2` fields for free-form data entry.
    /// These fields are free-form because the remaining address components have
    /// too many variations around the world and typical software does not parse
    /// these components. These fields enable users to enter anything they want.
    /// 
    /// Note that, in the current implementation, all other `Address` type fields are blank.
    /// These include `address_line_3`, `sublocality_2`, `sublocality_3`,
    /// `administrative_district_level_2`, `administrative_district_level_3`,
    /// `first_name`, `last_name`, and `organization`.
    /// 
    /// When it comes to localization, the seller's language preferences
    /// (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
    /// are ignored for addresses. Even though Square products (such as Square Point of Sale
    /// and the Seller Dashboard) mostly use a seller's language preference in
    /// communication, when it comes to addresses, they will use English for a US address,
    /// Japanese for an address in Japan, and so on.
    public var address: Address?
    /// The customer ID of the customer associated with the fulfillment.
    /// 
    /// If `customer_id` is provided, the fulfillment recipient's `display_name`,
    /// `email_address`, and `phone_number` are automatically populated from the
    /// targeted customer profile. If these fields are set in the request, the request
    /// values overrides the information from the customer profile. If the
    /// targeted customer profile does not contain the necessary information and
    /// these fields are left unset, the request results in an error.
    public var customerID: String?
    /// The display name of the fulfillment recipient.
    /// 
    /// If provided, the display name overrides the value pulled from the customer profile indicated by `customer_id`.
    public var displayName: String?
    /// The email address of the fulfillment recipient.
    /// 
    /// If provided, the email address overrides the value pulled from the customer profile indicated by `customer_id`.
    public var emailAddress: String?
    /// The phone number of the fulfillment recipient.
    /// 
    /// If provided, the phone number overrides the value pulled from the customer profile indicated by `customer_id`.
    public var phoneNumber: String?

    public init(address: Address? = nil, customerID: String? = nil, displayName: String? = nil, emailAddress: String? = nil, phoneNumber: String? = nil) {
        self.address = address
        self.customerID = customerID
        self.displayName = displayName
        self.emailAddress = emailAddress
        self.phoneNumber = phoneNumber
    }

    private enum CodingKeys: String, CodingKey {
        case address
        case customerID = "customer_id"
        case displayName = "display_name"
        case emailAddress = "email_address"
        case phoneNumber = "phone_number"
    }
}

/// Contains the details necessary to fulfill a shipment order.
public struct OrderFulfillmentShipmentDetails: Codable {
    /// A description of why the shipment was canceled.
    public var cancelReason: String?
    /// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
    /// indicating the shipment was canceled.
    /// The timestamp must be in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
    public var canceledAt: String?
    /// The shipping carrier being used to ship this fulfillment (such as UPS, FedEx, or USPS).
    public var carrier: String?
    /// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
    /// indicating when the shipment is expected to be delivered to the shipping carrier.
    /// The timestamp must be in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
    public var expectedShippedAt: String?
    /// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
    /// indicating when the shipment failed to be completed. The timestamp must be in RFC 3339 format
    /// (for example, "2016-09-04T23:59:33.123Z").
    public var failedAt: String?
    /// A description of why the shipment failed to be completed.
    public var failureReason: String?
    /// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
    /// indicating when this fulfillment was moved to the `RESERVED` state, which  indicates that preparation
    /// of this shipment has begun. The timestamp must be in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
    public var inProgressAt: String?
    /// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
    /// indicating when this fulfillment was moved to the `PREPARED` state, which indicates that the
    /// fulfillment is packaged. The timestamp must be in RFC 3339 format (for example, "2016-09-04T23:59:33.123Z").
    public var packagedAt: String?
    /// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
    /// indicating when the shipment was requested. The timestamp must be in RFC 3339 format
    /// (for example, "2016-09-04T23:59:33.123Z").
    public var placedAt: String?
    /// Contains information about the recipient of a fulfillment.
    public var recipient: OrderFulfillmentRecipient?
    /// The [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates)
    /// indicating when this fulfillment was moved to the `COMPLETED` state, which indicates that
    /// the fulfillment has been given to the shipping carrier. The timestamp must be in RFC 3339 format
    /// (for example, "2016-09-04T23:59:33.123Z").
    public var shippedAt: String?
    /// A note with additional information for the shipping carrier.
    public var shippingNote: String?
    /// A description of the type of shipping product purchased from the carrier
    /// (such as First Class, Priority, or Express).
    public var shippingType: String?
    /// The reference number provided by the carrier to track the shipment's progress.
    public var trackingNumber: String?
    /// A link to the tracking webpage on the carrier's website.
    public var trackingURL: String?

    public init(cancelReason: String? = nil, canceledAt: String? = nil, carrier: String? = nil, expectedShippedAt: String? = nil, failedAt: String? = nil, failureReason: String? = nil, inProgressAt: String? = nil, packagedAt: String? = nil, placedAt: String? = nil, recipient: OrderFulfillmentRecipient? = nil, shippedAt: String? = nil, shippingNote: String? = nil, shippingType: String? = nil, trackingNumber: String? = nil, trackingURL: String? = nil) {
        self.cancelReason = cancelReason
        self.canceledAt = canceledAt
        self.carrier = carrier
        self.expectedShippedAt = expectedShippedAt
        self.failedAt = failedAt
        self.failureReason = failureReason
        self.inProgressAt = inProgressAt
        self.packagedAt = packagedAt
        self.placedAt = placedAt
        self.recipient = recipient
        self.shippedAt = shippedAt
        self.shippingNote = shippingNote
        self.shippingType = shippingType
        self.trackingNumber = trackingNumber
        self.trackingURL = trackingURL
    }

    private enum CodingKeys: String, CodingKey {
        case cancelReason = "cancel_reason"
        case canceledAt = "canceled_at"
        case carrier
        case expectedShippedAt = "expected_shipped_at"
        case failedAt = "failed_at"
        case failureReason = "failure_reason"
        case inProgressAt = "in_progress_at"
        case packagedAt = "packaged_at"
        case placedAt = "placed_at"
        case recipient
        case shippedAt = "shipped_at"
        case shippingNote = "shipping_note"
        case shippingType = "shipping_type"
        case trackingNumber = "tracking_number"
        case trackingURL = "tracking_url"
    }
}

/// The current state of this fulfillment.
public enum OrderFulfillmentState: String, Codable, CaseIterable {
    case proposed = "PROPOSED"
    case reserved = "RESERVED"
    case prepared = "PREPARED"
    case completed = "COMPLETED"
    case canceled = "CANCELED"
    case failed = "FAILED"
}

/// The type of fulfillment.
public enum OrderFulfillmentType: String, Codable, CaseIterable {
    case pickup = "PICKUP"
    case shipment = "SHIPMENT"
}

public struct OrderFulfillmentUpdated: Codable {
    /// The timestamp for when the order was created, in RFC 3339 format.
    public var createdAt: String?
    /// The fulfillments that were updated with this version change.
    public var fulfillmentUpdate: [OrderFulfillmentUpdatedUpdate]?
    /// The ID of the seller location that this order is associated with.
    public var locationID: String?
    /// The order's unique ID.
    public var orderID: String?
    /// The state of the order.
    public var state: String?
    /// The timestamp for when the order was last updated, in RFC 3339 format.
    public var updatedAt: String?
    /// The version number, which is incremented each time an update is committed to the order.
    /// Orders that were not created through the API do not include a version number and
    /// therefore cannot be updated.
    /// 
    /// [Read more about working with versions.](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders)
    public var version: Int?

    public init(createdAt: String? = nil, fulfillmentUpdate: [OrderFulfillmentUpdatedUpdate]? = nil, locationID: String? = nil, orderID: String? = nil, state: String? = nil, updatedAt: String? = nil, version: Int? = nil) {
        self.createdAt = createdAt
        self.fulfillmentUpdate = fulfillmentUpdate
        self.locationID = locationID
        self.orderID = orderID
        self.state = state
        self.updatedAt = updatedAt
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case createdAt = "created_at"
        case fulfillmentUpdate = "fulfillment_update"
        case locationID = "location_id"
        case orderID = "order_id"
        case state
        case updatedAt = "updated_at"
        case version
    }
}

public struct OrderFulfillmentUpdatedObject: Codable {
    public var orderFulfillmentUpdated: OrderFulfillmentUpdated?

    public init(orderFulfillmentUpdated: OrderFulfillmentUpdated? = nil) {
        self.orderFulfillmentUpdated = orderFulfillmentUpdated
    }

    private enum CodingKeys: String, CodingKey {
        case orderFulfillmentUpdated = "order_fulfillment_updated"
    }
}

/// Information about fulfillment updates.
public struct OrderFulfillmentUpdatedUpdate: Codable {
    /// A unique ID that identifies the fulfillment only within this order.
    public var fulfillmentUid: String?
    /// The state of the fulfillment after the change. The state might be equal to `old_state` if a non-state
    /// field was changed on the fulfillment (such as the tracking number).
    public var newState: String?
    /// The state of the fulfillment before the change.
    /// The state is not populated if the fulfillment is created with this new `Order` version.
    public var oldState: String?

    public init(fulfillmentUid: String? = nil, newState: String? = nil, oldState: String? = nil) {
        self.fulfillmentUid = fulfillmentUid
        self.newState = newState
        self.oldState = oldState
    }

    private enum CodingKeys: String, CodingKey {
        case fulfillmentUid = "fulfillment_uid"
        case newState = "new_state"
        case oldState = "old_state"
    }
}

/// Represents a line item in an order. Each line item describes a different
/// product to purchase, with its own quantity and price details.
public struct OrderLineItem: Codable {
    /// The list of references to discounts applied to this line item. Each
    /// `OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level
    /// `OrderLineItemDiscounts` applied to the line item. On reads, the amount
    /// applied is populated.
    /// 
    /// An `OrderLineItemAppliedDiscount` is automatically created on every line item for all
    /// `ORDER` scoped discounts that are added to the order. `OrderLineItemAppliedDiscount` records
    /// for `LINE_ITEM` scoped discounts must be added in requests for the discount to apply to any
    /// line items.
    /// 
    /// To change the amount of a discount, modify the referenced top-level discount.
    public var appliedDiscounts: [OrderLineItemAppliedDiscount]?
    /// The list of references to taxes applied to this line item. Each
    /// `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a
    /// top-level `OrderLineItemTax` applied to the line item. On reads, the
    /// amount applied is populated.
    /// 
    /// An `OrderLineItemAppliedTax` is automatically created on every line
    /// item for all `ORDER` scoped taxes added to the order. `OrderLineItemAppliedTax`
    /// records for `LINE_ITEM` scoped taxes must be added in requests for the tax
    /// to apply to any line items.
    /// 
    /// To change the amount of a tax, modify the referenced top-level tax.
    public var appliedTaxes: [OrderLineItemAppliedTax]?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var basePriceMoney: Money?
    /// The [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) ID applied to this line item.
    public var catalogObjectID: String?
    /// The version of the catalog object that this line item references.
    public var catalogVersion: Int?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var grossSalesMoney: Money?
    /// The type of line item: an itemized sale, a non-itemized sale (custom amount), or the
    /// activation or reloading of a gift card.
    public var itemType: String?
    /// Application-defined data attached to this line item. Metadata fields are intended
    /// to store descriptive references or associations with an entity in another system or store brief
    /// information about the object. Square does not process this field; it only stores and returns it
    /// in relevant API calls. Do not use metadata to store any sensitive information (such as personally
    /// identifiable information or card details).
    /// 
    /// Keys written by applications must be 60 characters or less and must be in the character set
    /// `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
    /// with a namespace, separated from the key with a ':' character.
    /// 
    /// Values have a maximum length of 255 characters.
    /// 
    /// An application can have up to 10 entries per metadata field.
    /// 
    /// Entries written by applications are private and can only be read or modified by the same
    /// application.
    /// 
    /// For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
    public var metadata: [String: String]?
    /// The [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier)s applied to this line item.
    public var modifiers: [OrderLineItemModifier]?
    /// The name of the line item.
    public var name: String?
    /// The note of the line item.
    public var note: String?
    /// Describes pricing adjustments that are blocked from manual and
    /// automatic application to a line item. For more information, see
    /// [Apply Taxes and Discounts](https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts).
    public var pricingBlocklists: OrderLineItemPricingBlocklists?
    /// The quantity purchased, formatted as a decimal number.
    /// For example, `"3"`.
    /// 
    /// Line items with a quantity of `"0"` are automatically removed
    /// when paying for or otherwise completing the order.
    /// 
    /// Line items with a `quantity_unit` can have non-integer quantities.
    /// For example, `"1.70000"`.
    public var quantity: String
    /// Contains the measurement unit for a quantity and a precision that
    /// specifies the number of digits after the decimal point for decimal quantities.
    public var quantityUnit: OrderQuantityUnit?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var totalDiscountMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var totalMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var totalTaxMoney: Money?
    /// A unique ID that identifies the line item only within this order.
    public var uid: String?
    /// The name of the variation applied to this line item.
    public var variationName: String?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var variationTotalPriceMoney: Money?

    public init(appliedDiscounts: [OrderLineItemAppliedDiscount]? = nil, appliedTaxes: [OrderLineItemAppliedTax]? = nil, basePriceMoney: Money? = nil, catalogObjectID: String? = nil, catalogVersion: Int? = nil, grossSalesMoney: Money? = nil, itemType: String? = nil, metadata: [String: String]? = nil, modifiers: [OrderLineItemModifier]? = nil, name: String? = nil, note: String? = nil, pricingBlocklists: OrderLineItemPricingBlocklists? = nil, quantity: String, quantityUnit: OrderQuantityUnit? = nil, totalDiscountMoney: Money? = nil, totalMoney: Money? = nil, totalTaxMoney: Money? = nil, uid: String? = nil, variationName: String? = nil, variationTotalPriceMoney: Money? = nil) {
        self.appliedDiscounts = appliedDiscounts
        self.appliedTaxes = appliedTaxes
        self.basePriceMoney = basePriceMoney
        self.catalogObjectID = catalogObjectID
        self.catalogVersion = catalogVersion
        self.grossSalesMoney = grossSalesMoney
        self.itemType = itemType
        self.metadata = metadata
        self.modifiers = modifiers
        self.name = name
        self.note = note
        self.pricingBlocklists = pricingBlocklists
        self.quantity = quantity
        self.quantityUnit = quantityUnit
        self.totalDiscountMoney = totalDiscountMoney
        self.totalMoney = totalMoney
        self.totalTaxMoney = totalTaxMoney
        self.uid = uid
        self.variationName = variationName
        self.variationTotalPriceMoney = variationTotalPriceMoney
    }

    private enum CodingKeys: String, CodingKey {
        case appliedDiscounts = "applied_discounts"
        case appliedTaxes = "applied_taxes"
        case basePriceMoney = "base_price_money"
        case catalogObjectID = "catalog_object_id"
        case catalogVersion = "catalog_version"
        case grossSalesMoney = "gross_sales_money"
        case itemType = "item_type"
        case metadata
        case modifiers
        case name
        case note
        case pricingBlocklists = "pricing_blocklists"
        case quantity
        case quantityUnit = "quantity_unit"
        case totalDiscountMoney = "total_discount_money"
        case totalMoney = "total_money"
        case totalTaxMoney = "total_tax_money"
        case uid
        case variationName = "variation_name"
        case variationTotalPriceMoney = "variation_total_price_money"
    }
}

/// Represents an applied portion of a discount to a line item in an order.
/// 
/// Order scoped discounts have automatically applied discounts present for each line item.
/// Line-item scoped discounts must have applied discounts added manually for any applicable line
/// items. The corresponding applied money is automatically computed based on participating
/// line items.
public struct OrderLineItemAppliedDiscount: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var appliedMoney: Money?
    /// The `uid` of the discount that the applied discount represents. It must
    /// reference a discount present in the `order.discounts` field.
    /// 
    /// This field is immutable. To change which discounts apply to a line item,
    /// you must delete the discount and re-add it as a new `OrderLineItemAppliedDiscount`.
    public var discountUid: String
    /// A unique ID that identifies the applied discount only within this order.
    public var uid: String?

    public init(appliedMoney: Money? = nil, discountUid: String, uid: String? = nil) {
        self.appliedMoney = appliedMoney
        self.discountUid = discountUid
        self.uid = uid
    }

    private enum CodingKeys: String, CodingKey {
        case appliedMoney = "applied_money"
        case discountUid = "discount_uid"
        case uid
    }
}

/// Represents an applied portion of a tax to a line item in an order.
/// 
/// Order-scoped taxes automatically include the applied taxes in each line item.
/// Line item taxes must be referenced from any applicable line items.
/// The corresponding applied money is automatically computed, based on the
/// set of participating line items.
public struct OrderLineItemAppliedTax: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var appliedMoney: Money?
    /// The `uid` of the tax for which this applied tax represents. It must reference
    /// a tax present in the `order.taxes` field.
    /// 
    /// This field is immutable. To change which taxes apply to a line item, delete and add a new
    /// `OrderLineItemAppliedTax`.
    public var taxUid: String
    /// A unique ID that identifies the applied tax only within this order.
    public var uid: String?

    public init(appliedMoney: Money? = nil, taxUid: String, uid: String? = nil) {
        self.appliedMoney = appliedMoney
        self.taxUid = taxUid
        self.uid = uid
    }

    private enum CodingKeys: String, CodingKey {
        case appliedMoney = "applied_money"
        case taxUid = "tax_uid"
        case uid
    }
}

/// Represents a discount that applies to one or more line items in an
/// order.
/// 
/// Fixed-amount, order-scoped discounts are distributed across all non-zero line item totals.
/// The amount distributed to each line item is relative to the
/// amount contributed by the item to the order subtotal.
public struct OrderLineItemDiscount: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var appliedMoney: Money?
    /// The catalog object ID referencing [CatalogDiscount](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogDiscount).
    public var catalogObjectID: String?
    /// The version of the catalog object that this discount references.
    public var catalogVersion: Int?
    /// Application-defined data attached to this discount. Metadata fields are intended
    /// to store descriptive references or associations with an entity in another system or store brief
    /// information about the object. Square does not process this field; it only stores and returns it
    /// in relevant API calls. Do not use metadata to store any sensitive information (such as personally
    /// identifiable information or card details).
    /// 
    /// Keys written by applications must be 60 characters or less and must be in the character set
    /// `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
    /// with a namespace, separated from the key with a ':' character.
    /// 
    /// Values have a maximum length of 255 characters.
    /// 
    /// An application can have up to 10 entries per metadata field.
    /// 
    /// Entries written by applications are private and can only be read or modified by the same
    /// application.
    /// 
    /// For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
    public var metadata: [String: String]?
    /// The discount's name.
    public var name: String?
    /// The percentage of the discount, as a string representation of a decimal number.
    /// A value of `7.25` corresponds to a percentage of 7.25%.
    /// 
    /// `percentage` is not set for amount-based discounts.
    public var percentage: String?
    /// The object ID of a [pricing rule](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogPricingRule) to be applied
    /// automatically to this discount. The specification and application of the discounts, to
    /// which a `pricing_rule_id` is assigned, are completely controlled by the corresponding
    /// pricing rule.
    public var pricingRuleID: String?
    /// The reward IDs corresponding to this discount. The application and
    /// specification of discounts that have `reward_ids` are completely controlled by the backing
    /// criteria corresponding to the reward tiers of the rewards that are added to the order
    /// through the Loyalty API. To manually unapply discounts that are the result of added rewards,
    /// the rewards must be removed from the order through the Loyalty API.
    public var rewardIDs: [String]?
    /// Indicates the level at which the discount applies. For `ORDER` scoped discounts,
    /// Square generates references in `applied_discounts` on all order line items that do
    /// not have them. For `LINE_ITEM` scoped discounts, the discount only applies to line items
    /// with a discount reference in their `applied_discounts` field.
    /// 
    /// This field is immutable. To change the scope of a discount, you must delete
    /// the discount and re-add it as a new discount.
    public var scope: String?
    /// The type of the discount.
    /// 
    /// Discounts that do not reference a catalog object ID must have a type of
    /// `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.
    public var type: String?
    /// A unique ID that identifies the discount only within this order.
    public var uid: String?

    public init(amountMoney: Money? = nil, appliedMoney: Money? = nil, catalogObjectID: String? = nil, catalogVersion: Int? = nil, metadata: [String: String]? = nil, name: String? = nil, percentage: String? = nil, pricingRuleID: String? = nil, rewardIDs: [String]? = nil, scope: String? = nil, type: String? = nil, uid: String? = nil) {
        self.amountMoney = amountMoney
        self.appliedMoney = appliedMoney
        self.catalogObjectID = catalogObjectID
        self.catalogVersion = catalogVersion
        self.metadata = metadata
        self.name = name
        self.percentage = percentage
        self.pricingRuleID = pricingRuleID
        self.rewardIDs = rewardIDs
        self.scope = scope
        self.type = type
        self.uid = uid
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
        case appliedMoney = "applied_money"
        case catalogObjectID = "catalog_object_id"
        case catalogVersion = "catalog_version"
        case metadata
        case name
        case percentage
        case pricingRuleID = "pricing_rule_id"
        case rewardIDs = "reward_ids"
        case scope
        case type
        case uid
    }
}

/// Indicates whether this is a line-item or order-level discount.
public enum OrderLineItemDiscountScope: String, Codable, CaseIterable {
    case otherDiscountScope = "OTHER_DISCOUNT_SCOPE"
    case lineItem = "LINE_ITEM"
    case order = "ORDER"
}

/// Indicates how the discount is applied to the associated line item or order.
public enum OrderLineItemDiscountType: String, Codable, CaseIterable {
    case unknownDiscount = "UNKNOWN_DISCOUNT"
    case fixedPercentage = "FIXED_PERCENTAGE"
    case fixedAmount = "FIXED_AMOUNT"
    case variablePercentage = "VARIABLE_PERCENTAGE"
    case variableAmount = "VARIABLE_AMOUNT"
}

/// Represents the line item type.
public enum OrderLineItemItemType: String, Codable, CaseIterable {
    case item = "ITEM"
    case customAmount = "CUSTOM_AMOUNT"
    case giftCard = "GIFT_CARD"
}

/// A [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier).
public struct OrderLineItemModifier: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var basePriceMoney: Money?
    /// The catalog object ID referencing [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier).
    public var catalogObjectID: String?
    /// The version of the catalog object that this modifier references.
    public var catalogVersion: Int?
    /// The name of the item modifier.
    public var name: String?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var totalPriceMoney: Money?
    /// A unique ID that identifies the modifier only within this order.
    public var uid: String?

    public init(basePriceMoney: Money? = nil, catalogObjectID: String? = nil, catalogVersion: Int? = nil, name: String? = nil, totalPriceMoney: Money? = nil, uid: String? = nil) {
        self.basePriceMoney = basePriceMoney
        self.catalogObjectID = catalogObjectID
        self.catalogVersion = catalogVersion
        self.name = name
        self.totalPriceMoney = totalPriceMoney
        self.uid = uid
    }

    private enum CodingKeys: String, CodingKey {
        case basePriceMoney = "base_price_money"
        case catalogObjectID = "catalog_object_id"
        case catalogVersion = "catalog_version"
        case name
        case totalPriceMoney = "total_price_money"
        case uid
    }
}

/// Describes pricing adjustments that are blocked from manual and
/// automatic application to a line item. For more information, see
/// [Apply Taxes and Discounts](https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts).
public struct OrderLineItemPricingBlocklists: Codable {
    /// A list of discounts blocked from applying to the line item.
    /// Discounts can be blocked by the `discount_uid` (for ad hoc discounts) or
    /// the `discount_catalog_object_id` (for catalog discounts).
    public var blockedDiscounts: [OrderLineItemPricingBlocklistsBlockedDiscount]?
    /// A list of taxes blocked from applying to the line item.
    /// Taxes can be blocked by the `tax_uid` (for ad hoc taxes) or
    /// the `tax_catalog_object_id` (for catalog taxes).
    public var blockedTaxes: [OrderLineItemPricingBlocklistsBlockedTax]?

    public init(blockedDiscounts: [OrderLineItemPricingBlocklistsBlockedDiscount]? = nil, blockedTaxes: [OrderLineItemPricingBlocklistsBlockedTax]? = nil) {
        self.blockedDiscounts = blockedDiscounts
        self.blockedTaxes = blockedTaxes
    }

    private enum CodingKeys: String, CodingKey {
        case blockedDiscounts = "blocked_discounts"
        case blockedTaxes = "blocked_taxes"
    }
}

/// A discount to block from applying to a line item. The discount must be
/// identified by either `discount_uid` or `discount_catalog_object_id`, but not both.
public struct OrderLineItemPricingBlocklistsBlockedDiscount: Codable {
    /// The `catalog_object_id` of the discount that should be blocked.
    /// Use this field to block catalog discounts. For ad hoc discounts, use the
    /// `discount_uid` field.
    public var discountCatalogObjectID: String?
    /// The `uid` of the discount that should be blocked. Use this field to block
    /// ad hoc discounts. For catalog discounts, use the `discount_catalog_object_id` field.
    public var discountUid: String?
    /// A unique ID of the `BlockedDiscount` within the order.
    public var uid: String?

    public init(discountCatalogObjectID: String? = nil, discountUid: String? = nil, uid: String? = nil) {
        self.discountCatalogObjectID = discountCatalogObjectID
        self.discountUid = discountUid
        self.uid = uid
    }

    private enum CodingKeys: String, CodingKey {
        case discountCatalogObjectID = "discount_catalog_object_id"
        case discountUid = "discount_uid"
        case uid
    }
}

/// A tax to block from applying to a line item. The tax must be
/// identified by either `tax_uid` or `tax_catalog_object_id`, but not both.
public struct OrderLineItemPricingBlocklistsBlockedTax: Codable {
    /// The `catalog_object_id` of the tax that should be blocked.
    /// Use this field to block catalog taxes. For ad hoc taxes, use the
    /// `tax_uid` field.
    public var taxCatalogObjectID: String?
    /// The `uid` of the tax that should be blocked. Use this field to block
    /// ad hoc taxes. For catalog, taxes use the `tax_catalog_object_id` field.
    public var taxUid: String?
    /// A unique ID of the `BlockedTax` within the order.
    public var uid: String?

    public init(taxCatalogObjectID: String? = nil, taxUid: String? = nil, uid: String? = nil) {
        self.taxCatalogObjectID = taxCatalogObjectID
        self.taxUid = taxUid
        self.uid = uid
    }

    private enum CodingKeys: String, CodingKey {
        case taxCatalogObjectID = "tax_catalog_object_id"
        case taxUid = "tax_uid"
        case uid
    }
}

/// Represents a tax that applies to one or more line item in the order.
/// 
/// Fixed-amount, order-scoped taxes are distributed across all non-zero line item totals.
/// The amount distributed to each line item is relative to the amount the item
/// contributes to the order subtotal.
public struct OrderLineItemTax: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var appliedMoney: Money?
    /// Determines whether the tax was automatically applied to the order based on
    /// the catalog configuration. For an example, see
    /// [Automatically Apply Taxes to an Order](https://developer.squareup.com/docs/orders-api/apply-taxes-and-discounts/auto-apply-taxes).
    public var isAutoApplied: Bool?
    /// The catalog object ID referencing [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax).
    public var catalogObjectID: String?
    /// The version of the catalog object that this tax references.
    public var catalogVersion: Int?
    /// Application-defined data attached to this tax. Metadata fields are intended
    /// to store descriptive references or associations with an entity in another system or store brief
    /// information about the object. Square does not process this field; it only stores and returns it
    /// in relevant API calls. Do not use metadata to store any sensitive information (such as personally
    /// identifiable information or card details).
    /// 
    /// Keys written by applications must be 60 characters or less and must be in the character set
    /// `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
    /// with a namespace, separated from the key with a ':' character.
    /// 
    /// Values have a maximum length of 255 characters.
    /// 
    /// An application can have up to 10 entries per metadata field.
    /// 
    /// Entries written by applications are private and can only be read or modified by the same
    /// application.
    /// 
    /// For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
    public var metadata: [String: String]?
    /// The tax's name.
    public var name: String?
    /// The percentage of the tax, as a string representation of a decimal
    /// number. For example, a value of `"7.25"` corresponds to a percentage of
    /// 7.25%.
    public var percentage: String?
    /// Indicates the level at which the tax applies. For `ORDER` scoped taxes,
    /// Square generates references in `applied_taxes` on all order line items that do
    /// not have them. For `LINE_ITEM` scoped taxes, the tax only applies to line items
    /// with references in their `applied_taxes` field.
    /// 
    /// This field is immutable. To change the scope, you must delete the tax and
    /// re-add it as a new tax.
    public var scope: String?
    /// Indicates the calculation method used to apply the tax.
    public var type: String?
    /// A unique ID that identifies the tax only within this order.
    public var uid: String?

    public init(appliedMoney: Money? = nil, isAutoApplied: Bool? = nil, catalogObjectID: String? = nil, catalogVersion: Int? = nil, metadata: [String: String]? = nil, name: String? = nil, percentage: String? = nil, scope: String? = nil, type: String? = nil, uid: String? = nil) {
        self.appliedMoney = appliedMoney
        self.isAutoApplied = isAutoApplied
        self.catalogObjectID = catalogObjectID
        self.catalogVersion = catalogVersion
        self.metadata = metadata
        self.name = name
        self.percentage = percentage
        self.scope = scope
        self.type = type
        self.uid = uid
    }

    private enum CodingKeys: String, CodingKey {
        case appliedMoney = "applied_money"
        case isAutoApplied = "auto_applied"
        case catalogObjectID = "catalog_object_id"
        case catalogVersion = "catalog_version"
        case metadata
        case name
        case percentage
        case scope
        case type
        case uid
    }
}

/// Indicates whether this is a line-item or order-level tax.
public enum OrderLineItemTaxScope: String, Codable, CaseIterable {
    case otherTaxScope = "OTHER_TAX_SCOPE"
    case lineItem = "LINE_ITEM"
    case order = "ORDER"
}

/// Indicates how the tax is applied to the associated line item or order.
public enum OrderLineItemTaxType: String, Codable, CaseIterable {
    case unknownTax = "UNKNOWN_TAX"
    case additive = "ADDITIVE"
    case inclusive = "INCLUSIVE"
}

/// A collection of various money amounts.
public struct OrderMoneyAmounts: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var discountMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var serviceChargeMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var taxMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var tipMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var totalMoney: Money?

    public init(discountMoney: Money? = nil, serviceChargeMoney: Money? = nil, taxMoney: Money? = nil, tipMoney: Money? = nil, totalMoney: Money? = nil) {
        self.discountMoney = discountMoney
        self.serviceChargeMoney = serviceChargeMoney
        self.taxMoney = taxMoney
        self.tipMoney = tipMoney
        self.totalMoney = totalMoney
    }

    private enum CodingKeys: String, CodingKey {
        case discountMoney = "discount_money"
        case serviceChargeMoney = "service_charge_money"
        case taxMoney = "tax_money"
        case tipMoney = "tip_money"
        case totalMoney = "total_money"
    }
}

/// Pricing options for an order. The options affect how the order's price is calculated.
/// They can be used, for example, to apply automatic price adjustments that are based on preconfigured
/// [pricing rules](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogPricingRule).
public struct OrderPricingOptions: Codable {
    /// The option to determine whether pricing rule-based
    /// discounts are automatically applied to an order.
    public var isAutoApplyDiscounts: Bool?
    /// The option to determine whether rule-based taxes are automatically
    /// applied to an order when the criteria of the corresponding rules are met.
    public var isAutoApplyTaxes: Bool?

    public init(isAutoApplyDiscounts: Bool? = nil, isAutoApplyTaxes: Bool? = nil) {
        self.isAutoApplyDiscounts = isAutoApplyDiscounts
        self.isAutoApplyTaxes = isAutoApplyTaxes
    }

    private enum CodingKeys: String, CodingKey {
        case isAutoApplyDiscounts = "auto_apply_discounts"
        case isAutoApplyTaxes = "auto_apply_taxes"
    }
}

/// Contains the measurement unit for a quantity and a precision that
/// specifies the number of digits after the decimal point for decimal quantities.
public struct OrderQuantityUnit: Codable {
    /// The version of the catalog object that this measurement unit references.
    /// 
    /// This field is set when this is a catalog-backed measurement unit.
    public var catalogVersion: Int?
    /// Represents a unit of measurement to use with a quantity, such as ounces
    /// or inches. Exactly one of the following fields are required: `custom_unit`,
    /// `area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.
    public var measurementUnit: MeasurementUnit?
    /// For non-integer quantities, represents the number of digits after the decimal point that are
    /// recorded for this quantity.
    /// 
    /// For example, a precision of 1 allows quantities such as `"1.0"` and `"1.1"`, but not `"1.01"`.
    /// 
    /// Min: 0. Max: 5.
    public var precision: Int?

    public init(catalogVersion: Int? = nil, measurementUnit: MeasurementUnit? = nil, precision: Int? = nil) {
        self.catalogVersion = catalogVersion
        self.measurementUnit = measurementUnit
        self.precision = precision
    }

    private enum CodingKeys: String, CodingKey {
        case catalogVersion = "catalog_version"
        case measurementUnit = "measurement_unit"
        case precision
    }
}

/// The set of line items, service charges, taxes, discounts, tips, and other items being returned in an order.
public struct OrderReturn: Codable {
    /// A collection of various money amounts.
    public var returnAmounts: OrderMoneyAmounts?
    /// A collection of references to discounts being returned for an order, including the total
    /// applied discount amount to be returned. The discounts must reference a top-level discount ID
    /// from the source order.
    public var returnDiscounts: [OrderReturnDiscount]?
    /// A collection of line items that are being returned.
    public var returnLineItems: [OrderReturnLineItem]?
    /// A collection of service charges that are being returned.
    public var returnServiceCharges: [OrderReturnServiceCharge]?
    /// A collection of references to taxes being returned for an order, including the total
    /// applied tax amount to be returned. The taxes must reference a top-level tax ID from the source
    /// order.
    public var returnTaxes: [OrderReturnTax]?
    /// A rounding adjustment of the money being returned. Commonly used to apply cash rounding
    /// when the minimum unit of the account is smaller than the lowest physical denomination of the currency.
    public var roundingAdjustment: OrderRoundingAdjustment?
    /// An order that contains the original sale of these return line items. This is unset
    /// for unlinked returns.
    public var sourceOrderID: String?
    /// A unique ID that identifies the return only within this order.
    public var uid: String?

    public init(returnAmounts: OrderMoneyAmounts? = nil, returnDiscounts: [OrderReturnDiscount]? = nil, returnLineItems: [OrderReturnLineItem]? = nil, returnServiceCharges: [OrderReturnServiceCharge]? = nil, returnTaxes: [OrderReturnTax]? = nil, roundingAdjustment: OrderRoundingAdjustment? = nil, sourceOrderID: String? = nil, uid: String? = nil) {
        self.returnAmounts = returnAmounts
        self.returnDiscounts = returnDiscounts
        self.returnLineItems = returnLineItems
        self.returnServiceCharges = returnServiceCharges
        self.returnTaxes = returnTaxes
        self.roundingAdjustment = roundingAdjustment
        self.sourceOrderID = sourceOrderID
        self.uid = uid
    }

    private enum CodingKeys: String, CodingKey {
        case returnAmounts = "return_amounts"
        case returnDiscounts = "return_discounts"
        case returnLineItems = "return_line_items"
        case returnServiceCharges = "return_service_charges"
        case returnTaxes = "return_taxes"
        case roundingAdjustment = "rounding_adjustment"
        case sourceOrderID = "source_order_id"
        case uid
    }
}

/// Represents a discount being returned that applies to one or more return line items in an
/// order.
/// 
/// Fixed-amount, order-scoped discounts are distributed across all non-zero return line item totals.
/// The amount distributed to each return line item is relative to that itemâ€™s contribution to the
/// order subtotal.
public struct OrderReturnDiscount: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var appliedMoney: Money?
    /// The catalog object ID referencing [CatalogDiscount](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogDiscount).
    public var catalogObjectID: String?
    /// The version of the catalog object that this discount references.
    public var catalogVersion: Int?
    /// The discount's name.
    public var name: String?
    /// The percentage of the tax, as a string representation of a decimal number.
    /// A value of `"7.25"` corresponds to a percentage of 7.25%.
    /// 
    /// `percentage` is not set for amount-based discounts.
    public var percentage: String?
    /// Indicates the level at which the `OrderReturnDiscount` applies. For `ORDER` scoped
    /// discounts, the server generates references in `applied_discounts` on all
    /// `OrderReturnLineItem`s. For `LINE_ITEM` scoped discounts, the discount is only applied to
    /// `OrderReturnLineItem`s with references in their `applied_discounts` field.
    public var scope: String?
    /// The discount `uid` from the order that contains the original application of this discount.
    public var sourceDiscountUid: String?
    /// The type of the discount. If it is created by the API, it is `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.
    /// 
    /// Discounts that do not reference a catalog object ID must have a type of
    /// `FIXED_PERCENTAGE` or `FIXED_AMOUNT`.
    public var type: String?
    /// A unique ID that identifies the returned discount only within this order.
    public var uid: String?

    public init(amountMoney: Money? = nil, appliedMoney: Money? = nil, catalogObjectID: String? = nil, catalogVersion: Int? = nil, name: String? = nil, percentage: String? = nil, scope: String? = nil, sourceDiscountUid: String? = nil, type: String? = nil, uid: String? = nil) {
        self.amountMoney = amountMoney
        self.appliedMoney = appliedMoney
        self.catalogObjectID = catalogObjectID
        self.catalogVersion = catalogVersion
        self.name = name
        self.percentage = percentage
        self.scope = scope
        self.sourceDiscountUid = sourceDiscountUid
        self.type = type
        self.uid = uid
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
        case appliedMoney = "applied_money"
        case catalogObjectID = "catalog_object_id"
        case catalogVersion = "catalog_version"
        case name
        case percentage
        case scope
        case sourceDiscountUid = "source_discount_uid"
        case type
        case uid
    }
}

/// The line item being returned in an order.
public struct OrderReturnLineItem: Codable {
    /// The list of references to `OrderReturnDiscount` entities applied to the return line item. Each
    /// `OrderLineItemAppliedDiscount` has a `discount_uid` that references the `uid` of a top-level
    /// `OrderReturnDiscount` applied to the return line item. On reads, the applied amount
    /// is populated.
    public var appliedDiscounts: [OrderLineItemAppliedDiscount]?
    /// The list of references to `OrderReturnTax` entities applied to the return line item. Each
    /// `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level
    /// `OrderReturnTax` applied to the return line item. On reads, the applied amount
    /// is populated.
    public var appliedTaxes: [OrderLineItemAppliedTax]?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var basePriceMoney: Money?
    /// The [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) ID applied to this return line item.
    public var catalogObjectID: String?
    /// The version of the catalog object that this line item references.
    public var catalogVersion: Int?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var grossReturnMoney: Money?
    /// The type of line item: an itemized return, a non-itemized return (custom amount),
    /// or the return of an unactivated gift card sale.
    public var itemType: String?
    /// The name of the line item.
    public var name: String?
    /// The note of the return line item.
    public var note: String?
    /// The quantity returned, formatted as a decimal number.
    /// For example, `"3"`.
    /// 
    /// Line items with a `quantity_unit` can have non-integer quantities.
    /// For example, `"1.70000"`.
    public var quantity: String
    /// Contains the measurement unit for a quantity and a precision that
    /// specifies the number of digits after the decimal point for decimal quantities.
    public var quantityUnit: OrderQuantityUnit?
    /// The [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier)s applied to this line item.
    public var returnModifiers: [OrderReturnLineItemModifier]?
    /// The `uid` of the line item in the original sale order.
    public var sourceLineItemUid: String?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var totalDiscountMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var totalMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var totalTaxMoney: Money?
    /// A unique ID for this return line-item entry.
    public var uid: String?
    /// The name of the variation applied to this return line item.
    public var variationName: String?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var variationTotalPriceMoney: Money?

    public init(appliedDiscounts: [OrderLineItemAppliedDiscount]? = nil, appliedTaxes: [OrderLineItemAppliedTax]? = nil, basePriceMoney: Money? = nil, catalogObjectID: String? = nil, catalogVersion: Int? = nil, grossReturnMoney: Money? = nil, itemType: String? = nil, name: String? = nil, note: String? = nil, quantity: String, quantityUnit: OrderQuantityUnit? = nil, returnModifiers: [OrderReturnLineItemModifier]? = nil, sourceLineItemUid: String? = nil, totalDiscountMoney: Money? = nil, totalMoney: Money? = nil, totalTaxMoney: Money? = nil, uid: String? = nil, variationName: String? = nil, variationTotalPriceMoney: Money? = nil) {
        self.appliedDiscounts = appliedDiscounts
        self.appliedTaxes = appliedTaxes
        self.basePriceMoney = basePriceMoney
        self.catalogObjectID = catalogObjectID
        self.catalogVersion = catalogVersion
        self.grossReturnMoney = grossReturnMoney
        self.itemType = itemType
        self.name = name
        self.note = note
        self.quantity = quantity
        self.quantityUnit = quantityUnit
        self.returnModifiers = returnModifiers
        self.sourceLineItemUid = sourceLineItemUid
        self.totalDiscountMoney = totalDiscountMoney
        self.totalMoney = totalMoney
        self.totalTaxMoney = totalTaxMoney
        self.uid = uid
        self.variationName = variationName
        self.variationTotalPriceMoney = variationTotalPriceMoney
    }

    private enum CodingKeys: String, CodingKey {
        case appliedDiscounts = "applied_discounts"
        case appliedTaxes = "applied_taxes"
        case basePriceMoney = "base_price_money"
        case catalogObjectID = "catalog_object_id"
        case catalogVersion = "catalog_version"
        case grossReturnMoney = "gross_return_money"
        case itemType = "item_type"
        case name
        case note
        case quantity
        case quantityUnit = "quantity_unit"
        case returnModifiers = "return_modifiers"
        case sourceLineItemUid = "source_line_item_uid"
        case totalDiscountMoney = "total_discount_money"
        case totalMoney = "total_money"
        case totalTaxMoney = "total_tax_money"
        case uid
        case variationName = "variation_name"
        case variationTotalPriceMoney = "variation_total_price_money"
    }
}

/// A line item modifier being returned.
public struct OrderReturnLineItemModifier: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var basePriceMoney: Money?
    /// The catalog object ID referencing [CatalogModifier](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogModifier).
    public var catalogObjectID: String?
    /// The version of the catalog object that this line item modifier references.
    public var catalogVersion: Int?
    /// The name of the item modifier.
    public var name: String?
    /// The modifier `uid` from the order's line item that contains the
    /// original sale of this line item modifier.
    public var sourceModifierUid: String?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var totalPriceMoney: Money?
    /// A unique ID that identifies the return modifier only within this order.
    public var uid: String?

    public init(basePriceMoney: Money? = nil, catalogObjectID: String? = nil, catalogVersion: Int? = nil, name: String? = nil, sourceModifierUid: String? = nil, totalPriceMoney: Money? = nil, uid: String? = nil) {
        self.basePriceMoney = basePriceMoney
        self.catalogObjectID = catalogObjectID
        self.catalogVersion = catalogVersion
        self.name = name
        self.sourceModifierUid = sourceModifierUid
        self.totalPriceMoney = totalPriceMoney
        self.uid = uid
    }

    private enum CodingKeys: String, CodingKey {
        case basePriceMoney = "base_price_money"
        case catalogObjectID = "catalog_object_id"
        case catalogVersion = "catalog_version"
        case name
        case sourceModifierUid = "source_modifier_uid"
        case totalPriceMoney = "total_price_money"
        case uid
    }
}

/// Represents the service charge applied to the original order.
public struct OrderReturnServiceCharge: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var appliedMoney: Money?
    /// The list of references to `OrderReturnTax` entities applied to the
    /// `OrderReturnServiceCharge`. Each `OrderLineItemAppliedTax` has a `tax_uid`
    /// that references the `uid` of a top-level `OrderReturnTax` that is being
    /// applied to the `OrderReturnServiceCharge`. On reads, the applied amount is
    /// populated.
    public var appliedTaxes: [OrderLineItemAppliedTax]?
    /// The calculation phase after which to apply the service charge.
    public var calculationPhase: String?
    /// The catalog object ID of the associated [OrderServiceCharge](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderServiceCharge).
    public var catalogObjectID: String?
    /// The version of the catalog object that this service charge references.
    public var catalogVersion: Int?
    /// The name of the service charge.
    public var name: String?
    /// The percentage of the service charge, as a string representation of
    /// a decimal number. For example, a value of `"7.25"` corresponds to a
    /// percentage of 7.25%.
    /// 
    /// Either `percentage` or `amount_money` should be set, but not both.
    public var percentage: String?
    /// The service charge `uid` from the order containing the original
    /// service charge. `source_service_charge_uid` is `null` for
    /// unlinked returns.
    public var sourceServiceChargeUid: String?
    /// Indicates whether the surcharge can be taxed. Service charges
    /// calculated in the `TOTAL_PHASE` cannot be marked as taxable.
    public var isTaxable: Bool?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var totalMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var totalTaxMoney: Money?
    /// A unique ID that identifies the return service charge only within this order.
    public var uid: String?

    public init(amountMoney: Money? = nil, appliedMoney: Money? = nil, appliedTaxes: [OrderLineItemAppliedTax]? = nil, calculationPhase: String? = nil, catalogObjectID: String? = nil, catalogVersion: Int? = nil, name: String? = nil, percentage: String? = nil, sourceServiceChargeUid: String? = nil, isTaxable: Bool? = nil, totalMoney: Money? = nil, totalTaxMoney: Money? = nil, uid: String? = nil) {
        self.amountMoney = amountMoney
        self.appliedMoney = appliedMoney
        self.appliedTaxes = appliedTaxes
        self.calculationPhase = calculationPhase
        self.catalogObjectID = catalogObjectID
        self.catalogVersion = catalogVersion
        self.name = name
        self.percentage = percentage
        self.sourceServiceChargeUid = sourceServiceChargeUid
        self.isTaxable = isTaxable
        self.totalMoney = totalMoney
        self.totalTaxMoney = totalTaxMoney
        self.uid = uid
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
        case appliedMoney = "applied_money"
        case appliedTaxes = "applied_taxes"
        case calculationPhase = "calculation_phase"
        case catalogObjectID = "catalog_object_id"
        case catalogVersion = "catalog_version"
        case name
        case percentage
        case sourceServiceChargeUid = "source_service_charge_uid"
        case isTaxable = "taxable"
        case totalMoney = "total_money"
        case totalTaxMoney = "total_tax_money"
        case uid
    }
}

/// Represents a tax being returned that applies to one or more return line items in an order.
/// 
/// Fixed-amount, order-scoped taxes are distributed across all non-zero return line item totals.
/// The amount distributed to each return line item is relative to that itemâ€™s contribution to the
/// order subtotal.
public struct OrderReturnTax: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var appliedMoney: Money?
    /// The catalog object ID referencing [CatalogTax](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogTax).
    public var catalogObjectID: String?
    /// The version of the catalog object that this tax references.
    public var catalogVersion: Int?
    /// The tax's name.
    public var name: String?
    /// The percentage of the tax, as a string representation of a decimal number.
    /// For example, a value of `"7.25"` corresponds to a percentage of 7.25%.
    public var percentage: String?
    /// Indicates the level at which the `OrderReturnTax` applies. For `ORDER` scoped
    /// taxes, Square generates references in `applied_taxes` on all
    /// `OrderReturnLineItem`s. For `LINE_ITEM` scoped taxes, the tax is only applied to
    /// `OrderReturnLineItem`s with references in their `applied_discounts` field.
    public var scope: String?
    /// The tax `uid` from the order that contains the original tax charge.
    public var sourceTaxUid: String?
    /// Indicates the calculation method used to apply the tax.
    public var type: String?
    /// A unique ID that identifies the returned tax only within this order.
    public var uid: String?

    public init(appliedMoney: Money? = nil, catalogObjectID: String? = nil, catalogVersion: Int? = nil, name: String? = nil, percentage: String? = nil, scope: String? = nil, sourceTaxUid: String? = nil, type: String? = nil, uid: String? = nil) {
        self.appliedMoney = appliedMoney
        self.catalogObjectID = catalogObjectID
        self.catalogVersion = catalogVersion
        self.name = name
        self.percentage = percentage
        self.scope = scope
        self.sourceTaxUid = sourceTaxUid
        self.type = type
        self.uid = uid
    }

    private enum CodingKeys: String, CodingKey {
        case appliedMoney = "applied_money"
        case catalogObjectID = "catalog_object_id"
        case catalogVersion = "catalog_version"
        case name
        case percentage
        case scope
        case sourceTaxUid = "source_tax_uid"
        case type
        case uid
    }
}

/// Represents a reward that can be applied to an order if the necessary
/// reward tier criteria are met. Rewards are created through the Loyalty API.
public struct OrderReward: Codable {
    /// The identifier of the reward.
    public var id: String
    /// The identifier of the reward tier corresponding to this reward.
    public var rewardTierID: String

    public init(id: String, rewardTierID: String) {
        self.id = id
        self.rewardTierID = rewardTierID
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case rewardTierID = "reward_tier_id"
    }
}

/// A rounding adjustment of the money being returned. Commonly used to apply cash rounding
/// when the minimum unit of the account is smaller than the lowest physical denomination of the currency.
public struct OrderRoundingAdjustment: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money?
    /// The name of the rounding adjustment from the original sale order.
    public var name: String?
    /// A unique ID that identifies the rounding adjustment only within this order.
    public var uid: String?

    public init(amountMoney: Money? = nil, name: String? = nil, uid: String? = nil) {
        self.amountMoney = amountMoney
        self.name = name
        self.uid = uid
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
        case name
        case uid
    }
}

/// Represents a service charge applied to an order.
public struct OrderServiceCharge: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var appliedMoney: Money?
    /// The list of references to the taxes applied to this service charge. Each
    /// `OrderLineItemAppliedTax` has a `tax_uid` that references the `uid` of a top-level
    /// `OrderLineItemTax` that is being applied to this service charge. On reads, the amount applied
    /// is populated.
    /// 
    /// An `OrderLineItemAppliedTax` is automatically created on every taxable service charge
    /// for all `ORDER` scoped taxes that are added to the order. `OrderLineItemAppliedTax` records
    /// for `LINE_ITEM` scoped taxes must be added in requests for the tax to apply to any taxable
    /// service charge. Taxable service charges have the `taxable` field set to `true` and calculated
    /// in the `SUBTOTAL_PHASE`.
    /// 
    /// To change the amount of a tax, modify the referenced top-level tax.
    public var appliedTaxes: [OrderLineItemAppliedTax]?
    /// The calculation phase at which to apply the service charge.
    public var calculationPhase: String?
    /// The catalog object ID referencing the service charge [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject).
    public var catalogObjectID: String?
    /// The version of the catalog object that this service charge references.
    public var catalogVersion: Int?
    /// Application-defined data attached to this service charge. Metadata fields are intended
    /// to store descriptive references or associations with an entity in another system or store brief
    /// information about the object. Square does not process this field; it only stores and returns it
    /// in relevant API calls. Do not use metadata to store any sensitive information (such as personally
    /// identifiable information or card details).
    /// 
    /// Keys written by applications must be 60 characters or less and must be in the character set
    /// `[a-zA-Z0-9_-]`. Entries can also include metadata generated by Square. These keys are prefixed
    /// with a namespace, separated from the key with a ':' character.
    /// 
    /// Values have a maximum length of 255 characters.
    /// 
    /// An application can have up to 10 entries per metadata field.
    /// 
    /// Entries written by applications are private and can only be read or modified by the same
    /// application.
    /// 
    /// For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
    public var metadata: [String: String]?
    /// The name of the service charge.
    public var name: String?
    /// The service charge percentage as a string representation of a
    /// decimal number. For example, `"7.25"` indicates a service charge of 7.25%.
    /// 
    /// Exactly 1 of `percentage` or `amount_money` should be set.
    public var percentage: String?
    /// Indicates whether the service charge can be taxed. If set to `true`,
    /// order-level taxes automatically apply to the service charge. Note that
    /// service charges calculated in the `TOTAL_PHASE` cannot be marked as taxable.
    public var isTaxable: Bool?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var totalMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var totalTaxMoney: Money?
    /// The type of the service charge.
    public var type: String?
    /// A unique ID that identifies the service charge only within this order.
    public var uid: String?

    public init(amountMoney: Money? = nil, appliedMoney: Money? = nil, appliedTaxes: [OrderLineItemAppliedTax]? = nil, calculationPhase: String? = nil, catalogObjectID: String? = nil, catalogVersion: Int? = nil, metadata: [String: String]? = nil, name: String? = nil, percentage: String? = nil, isTaxable: Bool? = nil, totalMoney: Money? = nil, totalTaxMoney: Money? = nil, type: String? = nil, uid: String? = nil) {
        self.amountMoney = amountMoney
        self.appliedMoney = appliedMoney
        self.appliedTaxes = appliedTaxes
        self.calculationPhase = calculationPhase
        self.catalogObjectID = catalogObjectID
        self.catalogVersion = catalogVersion
        self.metadata = metadata
        self.name = name
        self.percentage = percentage
        self.isTaxable = isTaxable
        self.totalMoney = totalMoney
        self.totalTaxMoney = totalTaxMoney
        self.type = type
        self.uid = uid
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
        case appliedMoney = "applied_money"
        case appliedTaxes = "applied_taxes"
        case calculationPhase = "calculation_phase"
        case catalogObjectID = "catalog_object_id"
        case catalogVersion = "catalog_version"
        case metadata
        case name
        case percentage
        case isTaxable = "taxable"
        case totalMoney = "total_money"
        case totalTaxMoney = "total_tax_money"
        case type
        case uid
    }
}

/// Represents a phase in the process of calculating order totals.
/// Service charges are applied after the indicated phase.
/// 
/// [Read more about how order totals are calculated.](https://developer.squareup.com/docs/orders-api/how-it-works#how-totals-are-calculated)
public enum OrderServiceChargeCalculationPhase: String, Codable, CaseIterable {
    case subtotalPhase = "SUBTOTAL_PHASE"
    case totalPhase = "TOTAL_PHASE"
}

public enum OrderServiceChargeType: String, Codable, CaseIterable {
    case autoGratuity = "AUTO_GRATUITY"
    case custom = "CUSTOM"
}

/// Represents the origination details of an order.
public struct OrderSource: Codable {
    /// The name used to identify the place (physical or digital) that an order originates.
    /// If unset, the name defaults to the name of the application that created the order.
    public var name: String?

    public init(name: String? = nil) {
        self.name = name
    }
}

/// The state of the order.
public enum OrderState: String, Codable, CaseIterable {
    case `open` = "OPEN"
    case completed = "COMPLETED"
    case canceled = "CANCELED"
}

public struct OrderUpdated: Codable {
    /// The timestamp for when the order was created, in RFC 3339 format.
    public var createdAt: String?
    /// The ID of the seller location that this order is associated with.
    public var locationID: String?
    /// The order's unique ID.
    public var orderID: String?
    /// The state of the order.
    public var state: String?
    /// The timestamp for when the order was last updated, in RFC 3339 format.
    public var updatedAt: String?
    /// The version number, which is incremented each time an update is committed to the order.
    /// Orders that were not created through the API do not include a version number and
    /// therefore cannot be updated.
    /// 
    /// [Read more about working with versions.](https://developer.squareup.com/docs/orders-api/manage-orders#update-orders)
    public var version: Int?

    public init(createdAt: String? = nil, locationID: String? = nil, orderID: String? = nil, state: String? = nil, updatedAt: String? = nil, version: Int? = nil) {
        self.createdAt = createdAt
        self.locationID = locationID
        self.orderID = orderID
        self.state = state
        self.updatedAt = updatedAt
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case createdAt = "created_at"
        case locationID = "location_id"
        case orderID = "order_id"
        case state
        case updatedAt = "updated_at"
        case version
    }
}

public struct OrderUpdatedObject: Codable {
    public var orderUpdated: OrderUpdated?

    public init(orderUpdated: OrderUpdated? = nil) {
        self.orderUpdated = orderUpdated
    }

    private enum CodingKeys: String, CodingKey {
        case orderUpdated = "order_updated"
    }
}

/// Defines the fields that are included in requests to the
/// [PayOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/pay-order) endpoint.
///
/// Example:
///
/// {
///   "request_body" : {
///     "idempotency_key" : "c043a359-7ad9-4136-82a9-c3f1d66dcbff",
///     "payment_ids" : [
///       "EnZdNAlWCmfh6Mt5FMNST1o7taB",
///       "0LRiVlbXVwe8ozu4KbZxd12mvaB"
///     ]
///   }
/// }
public struct PayOrderRequest: Codable {
    /// A value you specify that uniquely identifies this request among requests you have sent. If
    /// you are unsure whether a particular payment request was completed successfully, you can reattempt
    /// it with the same idempotency key without worrying about duplicate payments.
    /// 
    /// For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
    public var idempotencyKey: String
    /// The version of the order being paid. If not supplied, the latest version will be paid.
    public var orderVersion: Int?
    /// The IDs of the [payments](https://developer.squareup.com/reference/square_2021-08-18/objects/Payment) to collect.
    /// The payment total must match the order total.
    public var paymentIDs: [String]?

    public init(idempotencyKey: String, orderVersion: Int? = nil, paymentIDs: [String]? = nil) {
        self.idempotencyKey = idempotencyKey
        self.orderVersion = orderVersion
        self.paymentIDs = paymentIDs
    }

    private enum CodingKeys: String, CodingKey {
        case idempotencyKey = "idempotency_key"
        case orderVersion = "order_version"
        case paymentIDs = "payment_ids"
    }
}

/// Defines the fields that are included in the response body of a request to the
/// [PayOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/pay-order) endpoint.
///
/// Example:
///
/// {
///   "order" : {
///     "closed_at" : "2019-08-06T02:47:37.140Z",
///     "created_at" : "2019-08-06T02:47:35.693Z",
///     "id" : "lgwOlEityYPJtcuvKTVKT1pA986YY",
///     "line_items" : [
///       {
///         "base_price_money" : {
///           "amount" : 500,
///           "currency" : "USD"
///         },
///         "gross_sales_money" : {
///           "amount" : 500,
///           "currency" : "USD"
///         },
///         "name" : "Item 1",
///         "quantity" : "1",
///         "total_discount_money" : {
///           "amount" : 0,
///           "currency" : "USD"
///         },
///         "total_money" : {
///           "amount" : 500,
///           "currency" : "USD"
///         },
///         "total_tax_money" : {
///           "amount" : 0,
///           "currency" : "USD"
///         },
///         "uid" : "QW6kofLHJK7JEKMjlSVP5C"
///       },
///       {
///         "base_price_money" : {
///           "amount" : 750,
///           "currency" : "USD"
///         },
///         "gross_sales_money" : {
///           "amount" : 1500,
///           "currency" : "USD"
///         },
///         "name" : "Item 2",
///         "quantity" : "2",
///         "total_discount_money" : {
///           "amount" : 0,
///           "currency" : "USD"
///         },
///         "total_money" : {
///           "amount" : 1500,
///           "currency" : "USD"
///         },
///         "total_tax_money" : {
///           "amount" : 0,
///           "currency" : "USD"
///         },
///         "uid" : "zhw8MNfRGdFQMI2WE1UBJD"
///       }
///     ],
///     "location_id" : "P3CCK6HSNDAS7",
///     "net_amounts" : {
///       "discount_money" : {
///         "amount" : 0,
///         "currency" : "USD"
///       },
///       "service_charge_money" : {
///         "amount" : 0,
///         "currency" : "USD"
///       },
///       "tax_money" : {
///         "amount" : 0,
///         "currency" : "USD"
///       },
///       "tip_money" : {
///         "amount" : 0,
///         "currency" : "USD"
///       },
///       "total_money" : {
///         "amount" : 2000,
///         "currency" : "USD"
///       }
///     },
///     "source" : {
///       "name" : "Source Name"
///     },
///     "state" : "COMPLETED",
///     "tenders" : [
///       {
///         "amount_money" : {
///           "amount" : 1000,
///           "currency" : "USD"
///         },
///         "card_details" : {
///           "card" : {
///             "card_brand" : "VISA",
///             "exp_month" : 2,
///             "exp_year" : 2022,
///             "fingerprint" : "sq-1-n_BL15KP87ClDa4-h2nXOI0fp5VnxNH6hfhzqhptTfAgxgLuGFcg6jIPngDz4IkkTQ",
///             "last_4" : "1111"
///           },
///           "entry_method" : "KEYED",
///           "status" : "CAPTURED"
///         },
///         "created_at" : "2019-08-06T02:47:36.293Z",
///         "id" : "EnZdNAlWCmfh6Mt5FMNST1o7taB",
///         "location_id" : "P3CCK6HSNDAS7",
///         "payment_id" : "EnZdNAlWCmfh6Mt5FMNST1o7taB",
///         "transaction_id" : "lgwOlEityYPJtcuvKTVKT1pA986YY",
///         "type" : "CARD"
///       },
///       {
///         "amount_money" : {
///           "amount" : 1000,
///           "currency" : "USD"
///         },
///         "card_details" : {
///           "card" : {
///             "card_brand" : "VISA",
///             "exp_month" : 2,
///             "exp_year" : 2022,
///             "fingerprint" : "sq-1-n_BL15KP87ClDa4-h2nXOI0fp5VnxNH6hfhzqhptTfAgxgLuGFcg6jIPngDz4IkkTQ",
///             "last_4" : "1111"
///           },
///           "entry_method" : "KEYED",
///           "status" : "CAPTURED"
///         },
///         "created_at" : "2019-08-06T02:47:36.809Z",
///         "id" : "0LRiVlbXVwe8ozu4KbZxd12mvaB",
///         "location_id" : "P3CCK6HSNDAS7",
///         "payment_id" : "0LRiVlbXVwe8ozu4KbZxd12mvaB",
///         "transaction_id" : "lgwOlEityYPJtcuvKTVKT1pA986YY",
///         "type" : "CARD"
///       }
///     ],
///     "total_discount_money" : {
///       "amount" : 0,
///       "currency" : "USD"
///     },
///     "total_money" : {
///       "amount" : 2000,
///       "currency" : "USD"
///     },
///     "total_service_charge_money" : {
///       "amount" : 0,
///       "currency" : "USD"
///     },
///     "total_tax_money" : {
///       "amount" : 0,
///       "currency" : "USD"
///     },
///     "updated_at" : "2019-08-06T02:47:37.140Z",
///     "version" : 4
///   }
/// }
public struct PayOrderResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Contains all information related to a single order to process with Square,
    /// including line items that specify the products to purchase. `Order` objects also
    /// include information about any associated tenders, refunds, and returns.
    /// 
    /// All Connect V2 Transactions have all been converted to Orders including all associated
    /// itemization data.
    public var order: Order?

    public init(errors: [Error]? = nil, order: Order? = nil) {
        self.errors = errors
        self.order = order
    }
}

/// Represents a payment processed by the Square API.
public struct Payment: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var appFeeMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var approvedMoney: Money?
    /// Additional details about BANK_ACCOUNT type payments.
    public var bankAccountDetails: BankAccountPaymentDetails?
    /// Represents a postal address in a country. The address format is based
    /// on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
    /// see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
    /// This format has dedicated fields for four address components: postal code,
    /// locality (city), administrative district (state, prefecture, or province), and
    /// sublocality (town or village). These components have dedicated fields in the
    /// `Address` object because software sometimes behaves differently based on them.
    /// For example, sales tax software may charge different amounts of sales tax
    /// based on the postal code, and some software is only available in
    /// certain states due to compliance reasons.
    /// 
    /// For the remaining address components, the `Address` type provides the
    /// `address_line_1` and `address_line_2` fields for free-form data entry.
    /// These fields are free-form because the remaining address components have
    /// too many variations around the world and typical software does not parse
    /// these components. These fields enable users to enter anything they want.
    /// 
    /// Note that, in the current implementation, all other `Address` type fields are blank.
    /// These include `address_line_3`, `sublocality_2`, `sublocality_3`,
    /// `administrative_district_level_2`, `administrative_district_level_3`,
    /// `first_name`, `last_name`, and `organization`.
    /// 
    /// When it comes to localization, the seller's language preferences
    /// (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
    /// are ignored for addresses. Even though Square products (such as Square Point of Sale
    /// and the Seller Dashboard) mostly use a seller's language preference in
    /// communication, when it comes to addresses, they will use English for a US address,
    /// Japanese for an address in Japan, and so on.
    public var billingAddress: Address?
    /// The buyer's email address.
    public var buyerEmailAddress: String?
    /// Actions that can be performed on this payment:
    /// - `EDIT_AMOUNT_UP` - The payment amount can be edited up.
    /// - `EDIT_AMOUNT_DOWN` - The payment amount can be edited down.
    /// - `EDIT_TIP_AMOUNT_UP` - The tip amount can be edited up.
    /// - `EDIT_TIP_AMOUNT_DOWN` - The tip amount can be edited down.
    public var capabilities: [String]?
    /// Reflects the current status of a card payment. Contains only non-confidential information.
    public var cardDetails: CardPaymentDetails?
    /// Stores details about a cash payment. Contains only non-confidential information. For more information, see
    /// [Take Cash Payments](https://developer.squareup.com/docs/payments-api/take-payments/cash-payments).
    public var cashDetails: CashPaymentDetails?
    /// The timestamp of when the payment was created, in RFC 3339 format.
    public var createdAt: String?
    /// The [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) ID of the customer associated with the payment.
    public var customerID: String?
    /// The action to be applied to the payment when the `delay_duration` has elapsed. This field
    /// is read-only.
    /// 
    /// Current values include `CANCEL`.
    public var delayAction: String?
    /// The duration of time after the payment's creation when Square automatically applies the
    /// `delay_action` to the payment. This automatic `delay_action` applies only to payments that
    /// do not reach a terminal state (COMPLETED, CANCELED, or FAILED) before the `delay_duration`
    /// time period.
    /// 
    /// This field is specified as a time duration, in RFC 3339 format.
    /// 
    /// Notes:
    /// This feature is only supported for card payments.
    /// 
    /// Default:
    /// 
    /// - Card-present payments: "PT36H" (36 hours) from the creation time.
    /// - Card-not-present payments: "P7D" (7 days) from the creation time.
    public var delayDuration: String?
    /// The read-only timestamp of when the `delay_action` is automatically applied,
    /// in RFC 3339 format.
    /// 
    /// Note that this field is calculated by summing the payment's `delay_duration` and `created_at`
    /// fields. The `created_at` field is generated by Square and might not exactly match the
    /// time on your local machine.
    public var delayedUntil: String?
    /// An optional ID of the employee associated with taking the payment.
    public var employeeID: String?
    /// Stores details about an external payment. Contains only non-confidential information.
    /// For more information, see
    /// [Take External Payments](https://developer.squareup.com/docs/payments-api/take-payments/external-payments).
    public var externalDetails: ExternalPaymentDetails?
    /// A unique ID for the payment.
    public var id: String?
    /// The ID of the location associated with the payment.
    public var locationID: String?
    /// An optional note to include when creating a payment.
    public var note: String?
    /// The ID of the order associated with the payment.
    public var orderID: String?
    /// The processing fees and fee adjustments assessed by Square for this payment.
    public var processingFee: [ProcessingFee]?
    /// The payment's receipt number.
    /// The field is missing if a payment is canceled.
    public var receiptNumber: String?
    /// The URL for the payment's receipt.
    /// The field is only populated for COMPLETED payments.
    public var receiptURL: String?
    /// An optional ID that associates the payment with an entity in
    /// another system.
    public var referenceID: String?
    /// A list of `refund_id`s identifying refunds for the payment.
    public var refundIDs: [String]?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var refundedMoney: Money?
    /// Represents fraud risk information for the associated payment.
    /// 
    /// When you take a payment through Square's Payments API (using the `CreatePayment`
    /// endpoint), Square evaluates it and assigns a risk level to the payment. Sellers
    /// can use this information to determine the course of action (for example,
    /// provide the goods/services or refund the payment).
    public var riskEvaluation: RiskEvaluation?
    /// Represents a postal address in a country. The address format is based
    /// on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
    /// see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
    /// This format has dedicated fields for four address components: postal code,
    /// locality (city), administrative district (state, prefecture, or province), and
    /// sublocality (town or village). These components have dedicated fields in the
    /// `Address` object because software sometimes behaves differently based on them.
    /// For example, sales tax software may charge different amounts of sales tax
    /// based on the postal code, and some software is only available in
    /// certain states due to compliance reasons.
    /// 
    /// For the remaining address components, the `Address` type provides the
    /// `address_line_1` and `address_line_2` fields for free-form data entry.
    /// These fields are free-form because the remaining address components have
    /// too many variations around the world and typical software does not parse
    /// these components. These fields enable users to enter anything they want.
    /// 
    /// Note that, in the current implementation, all other `Address` type fields are blank.
    /// These include `address_line_3`, `sublocality_2`, `sublocality_3`,
    /// `administrative_district_level_2`, `administrative_district_level_3`,
    /// `first_name`, `last_name`, and `organization`.
    /// 
    /// When it comes to localization, the seller's language preferences
    /// (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
    /// are ignored for addresses. Even though Square products (such as Square Point of Sale
    /// and the Seller Dashboard) mostly use a seller's language preference in
    /// communication, when it comes to addresses, they will use English for a US address,
    /// Japanese for an address in Japan, and so on.
    public var shippingAddress: Address?
    /// The source type for this payment.
    /// 
    /// Current values include `CARD`, `BANK_ACCOUNT`, `WALLET`, `CASH`, or `EXTERNAL`.
    public var sourceType: String?
    /// Additional payment information that gets added to the customer's card statement
    /// as part of the statement description.
    /// 
    /// Note that the `statement_description_identifier` might get truncated on the statement description
    /// to fit the required information including the Square identifier (SQ *) and the name of the
    /// seller taking the payment.
    public var statementDescriptionIdentifier: String?
    /// Indicates whether the payment is APPROVED, PENDING, COMPLETED, CANCELED, or FAILED.
    public var status: String?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var tipMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var totalMoney: Money?
    /// The timestamp of when the payment was last updated, in RFC 3339 format.
    public var updatedAt: String?
    /// Used for optimistic concurrency. This opaque token identifies a specific version of the
    /// `Payment` object.
    public var versionToken: String?
    /// Additional details about `WALLET` type payments. Contains only non-confidential information.
    public var walletDetails: DigitalWalletDetails?

    public init(amountMoney: Money? = nil, appFeeMoney: Money? = nil, approvedMoney: Money? = nil, bankAccountDetails: BankAccountPaymentDetails? = nil, billingAddress: Address? = nil, buyerEmailAddress: String? = nil, capabilities: [String]? = nil, cardDetails: CardPaymentDetails? = nil, cashDetails: CashPaymentDetails? = nil, createdAt: String? = nil, customerID: String? = nil, delayAction: String? = nil, delayDuration: String? = nil, delayedUntil: String? = nil, employeeID: String? = nil, externalDetails: ExternalPaymentDetails? = nil, id: String? = nil, locationID: String? = nil, note: String? = nil, orderID: String? = nil, processingFee: [ProcessingFee]? = nil, receiptNumber: String? = nil, receiptURL: String? = nil, referenceID: String? = nil, refundIDs: [String]? = nil, refundedMoney: Money? = nil, riskEvaluation: RiskEvaluation? = nil, shippingAddress: Address? = nil, sourceType: String? = nil, statementDescriptionIdentifier: String? = nil, status: String? = nil, tipMoney: Money? = nil, totalMoney: Money? = nil, updatedAt: String? = nil, versionToken: String? = nil, walletDetails: DigitalWalletDetails? = nil) {
        self.amountMoney = amountMoney
        self.appFeeMoney = appFeeMoney
        self.approvedMoney = approvedMoney
        self.bankAccountDetails = bankAccountDetails
        self.billingAddress = billingAddress
        self.buyerEmailAddress = buyerEmailAddress
        self.capabilities = capabilities
        self.cardDetails = cardDetails
        self.cashDetails = cashDetails
        self.createdAt = createdAt
        self.customerID = customerID
        self.delayAction = delayAction
        self.delayDuration = delayDuration
        self.delayedUntil = delayedUntil
        self.employeeID = employeeID
        self.externalDetails = externalDetails
        self.id = id
        self.locationID = locationID
        self.note = note
        self.orderID = orderID
        self.processingFee = processingFee
        self.receiptNumber = receiptNumber
        self.receiptURL = receiptURL
        self.referenceID = referenceID
        self.refundIDs = refundIDs
        self.refundedMoney = refundedMoney
        self.riskEvaluation = riskEvaluation
        self.shippingAddress = shippingAddress
        self.sourceType = sourceType
        self.statementDescriptionIdentifier = statementDescriptionIdentifier
        self.status = status
        self.tipMoney = tipMoney
        self.totalMoney = totalMoney
        self.updatedAt = updatedAt
        self.versionToken = versionToken
        self.walletDetails = walletDetails
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
        case appFeeMoney = "app_fee_money"
        case approvedMoney = "approved_money"
        case bankAccountDetails = "bank_account_details"
        case billingAddress = "billing_address"
        case buyerEmailAddress = "buyer_email_address"
        case capabilities
        case cardDetails = "card_details"
        case cashDetails = "cash_details"
        case createdAt = "created_at"
        case customerID = "customer_id"
        case delayAction = "delay_action"
        case delayDuration = "delay_duration"
        case delayedUntil = "delayed_until"
        case employeeID = "employee_id"
        case externalDetails = "external_details"
        case id
        case locationID = "location_id"
        case note
        case orderID = "order_id"
        case processingFee = "processing_fee"
        case receiptNumber = "receipt_number"
        case receiptURL = "receipt_url"
        case referenceID = "reference_id"
        case refundIDs = "refund_ids"
        case refundedMoney = "refunded_money"
        case riskEvaluation = "risk_evaluation"
        case shippingAddress = "shipping_address"
        case sourceType = "source_type"
        case statementDescriptionIdentifier = "statement_description_identifier"
        case status
        case tipMoney = "tip_money"
        case totalMoney = "total_money"
        case updatedAt = "updated_at"
        case versionToken = "version_token"
        case walletDetails = "wallet_details"
    }
}

public struct PaymentOptions: Codable {
    /// Indicates whether the `Payment` objects created from this `TerminalCheckout` are automatically
    /// `COMPLETED` or left in an `APPROVED` state for later modification.
    public var isAutocomplete: Bool?

    public init(isAutocomplete: Bool? = nil) {
        self.isAutocomplete = isAutocomplete
    }

    private enum CodingKeys: String, CodingKey {
        case isAutocomplete = "autocomplete"
    }
}

/// Represents a refund of a payment made using Square. Contains information about
/// the original payment and the amount of money refunded.
public struct PaymentRefund: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var appFeeMoney: Money?
    /// The timestamp of when the refund was created, in RFC 3339 format.
    public var createdAt: String?
    /// The unique ID for this refund, generated by Square.
    public var id: String
    /// The location ID associated with the payment this refund is attached to.
    public var locationID: String?
    /// The ID of the order associated with the refund.
    public var orderID: String?
    /// The ID of the payment associated with this refund.
    public var paymentID: String?
    /// Processing fees and fee adjustments assessed by Square for this refund.
    public var processingFee: [ProcessingFee]?
    /// The reason for the refund.
    public var reason: String?
    /// The refund's status:
    /// - `PENDING` - Awaiting approval.
    /// - `COMPLETED` - Successfully completed.
    /// - `REJECTED` - The refund was rejected.
    /// - `FAILED` - An error occurred.
    public var status: String?
    /// The timestamp of when the refund was last updated, in RFC 3339 format.
    public var updatedAt: String?

    public init(amountMoney: Money, appFeeMoney: Money? = nil, createdAt: String? = nil, id: String, locationID: String? = nil, orderID: String? = nil, paymentID: String? = nil, processingFee: [ProcessingFee]? = nil, reason: String? = nil, status: String? = nil, updatedAt: String? = nil) {
        self.amountMoney = amountMoney
        self.appFeeMoney = appFeeMoney
        self.createdAt = createdAt
        self.id = id
        self.locationID = locationID
        self.orderID = orderID
        self.paymentID = paymentID
        self.processingFee = processingFee
        self.reason = reason
        self.status = status
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
        case appFeeMoney = "app_fee_money"
        case createdAt = "created_at"
        case id
        case locationID = "location_id"
        case orderID = "order_id"
        case paymentID = "payment_id"
        case processingFee = "processing_fee"
        case reason
        case status
        case updatedAt = "updated_at"
    }
}

/// Represents the Square processing fee.
public struct ProcessingFee: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money?
    /// The timestamp of when the fee takes effect, in RFC 3339 format.
    public var effectiveAt: String?
    /// The type of fee assessed or adjusted. The fee type can be `INITIAL` or `ADJUSTMENT`.
    public var type: String?

    public init(amountMoney: Money? = nil, effectiveAt: String? = nil, type: String? = nil) {
        self.amountMoney = amountMoney
        self.effectiveAt = effectiveAt
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
        case effectiveAt = "effective_at"
        case type
    }
}

/// Indicates the Square product used to generate an inventory change.
public enum Product: String, Codable, CaseIterable {
    case squarePos = "SQUARE_POS"
    case externalAPI = "EXTERNAL_API"
    case billing = "BILLING"
    case appointments = "APPOINTMENTS"
    case invoices = "INVOICES"
    case onlineStore = "ONLINE_STORE"
    case payroll = "PAYROLL"
    case dashboard = "DASHBOARD"
    case itemLibraryImport = "ITEM_LIBRARY_IMPORT"
    case other = "OTHER"
}

public enum ProductType: String, Codable, CaseIterable {
    case terminalAPI = "TERMINAL_API"
}

/// Describes a `PublishInvoice` request.
///
/// Example:
///
/// {
///   "request_body" : {
///     "idempotency_key" : "32da42d0-1997-41b0-826b-f09464fc2c2e",
///     "version" : 1
///   }
/// }
public struct PublishInvoiceRequest: Codable {
    /// A unique string that identifies the `PublishInvoice` request. If you do not
    /// provide `idempotency_key` (or provide an empty string as the value), the endpoint
    /// treats each request as independent.
    /// 
    /// For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
    public var idempotencyKey: String?
    /// The version of the [invoice](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) to publish.
    /// This must match the current version of the invoice; otherwise, the request is rejected.
    public var version: Int

    public init(idempotencyKey: String? = nil, version: Int) {
        self.idempotencyKey = idempotencyKey
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case idempotencyKey = "idempotency_key"
        case version
    }
}

/// Describes a `PublishInvoice` response.
///
/// Example:
///
/// {
///   "invoice" : {
///     "accepted_payment_methods" : {
///       "bank_account" : false,
///       "card" : true,
///       "square_gift_card" : false
///     },
///     "created_at" : "2020-06-18T17:45:13Z",
///     "custom_fields" : [
///       {
///         "label" : "Event Reference Number",
///         "placement" : "ABOVE_LINE_ITEMS",
///         "value" : "Ref. #1234"
///       },
///       {
///         "label" : "Terms of Service",
///         "placement" : "BELOW_LINE_ITEMS",
///         "value" : "The terms of service are..."
///       }
///     ],
///     "delivery_method" : "EMAIL",
///     "description" : "We appreciate your business!",
///     "id" : "inv:0-ChCHu2mZEabLeeHahQnXDjZQECY",
///     "invoice_number" : "inv-100",
///     "location_id" : "ES0RJRZYEC39A",
///     "order_id" : "CAISENgvlJ6jLWAzERDzjyHVybY",
///     "payment_requests" : [
///       {
///         "automatic_payment_source" : "NONE",
///         "computed_amount_money" : {
///           "amount" : 10000,
///           "currency" : "USD"
///         },
///         "due_date" : "2030-01-24",
///         "reminders" : [
///           {
///             "message" : "Your invoice is due tomorrow",
///             "relative_scheduled_days" : -1,
///             "status" : "PENDING",
///             "uid" : "beebd363-e47f-4075-8785-c235aaa7df11"
///           }
///         ],
///         "request_type" : "BALANCE",
///         "tipping_enabled" : true,
///         "total_completed_amount_money" : {
///           "amount" : 0,
///           "currency" : "USD"
///         },
///         "uid" : "2da7964f-f3d2-4f43-81e8-5aa220bf3355"
///       }
///     ],
///     "primary_recipient" : {
///       "customer_id" : "JDKYHBWT1D4F8MFH63DBMEN8Y4",
///       "email_address" : "Amelia.Earhart@example.com",
///       "family_name" : "Earhart",
///       "given_name" : "Amelia",
///       "phone_number" : "1-212-555-4240"
///     },
///     "public_url" : "https:\/\/squareup.com\/pay-invoice\/inv:0-ChCHu2mZEabLeeHahQnXDjZQECY",
///     "scheduled_at" : "2030-01-13T10:00:00Z",
///     "status" : "SCHEDULED",
///     "timezone" : "America\/Los_Angeles",
///     "title" : "Event Planning Services",
///     "updated_at" : "2020-06-18T18:23:11Z",
///     "version" : 1
///   }
/// }
public struct PublishInvoiceResponse: Codable {
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// Stores information about an invoice. You use the Invoices API to create and manage
    /// invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
    public var invoice: Invoice?

    public init(errors: [Error]? = nil, invoice: Invoice? = nil) {
        self.errors = errors
        self.invoice = invoice
    }
}

/// A whole number or unreduced fractional ratio.
public struct QuantityRatio: Codable {
    /// The whole or fractional quantity as the numerator.
    public var quantity: Int?
    /// The whole or fractional quantity as the denominator.
    /// In the case of fractional quantity this field is the denominator and quantity is the numerator.
    /// When unspecified, the value is `1`. For example, when `quantity=3` and `quantity_donominator` is unspecified,
    /// the quantity ratio is `3` or `3/1`.
    public var quantityDenominator: Int?

    public init(quantity: Int? = nil, quantityDenominator: Int? = nil) {
        self.quantity = quantity
        self.quantityDenominator = quantityDenominator
    }

    private enum CodingKeys: String, CodingKey {
        case quantity
        case quantityDenominator = "quantity_denominator"
    }
}

/// The range of a number value between the specified lower and upper bounds.
public struct Range: Codable {
    /// The upper bound of the number range.
    public var max: String?
    /// The lower bound of the number range.
    public var min: String?

    public init(max: String? = nil, min: String? = nil) {
        self.max = max
        self.min = min
    }
}

/// A request to redeem a loyalty reward.
///
/// Example:
///
/// {
///   "request_body" : {
///     "idempotency_key" : "98adc7f7-6963-473b-b29c-f3c9cdd7d994",
///     "location_id" : "P034NEENMD09F"
///   },
///   "request_params" : "?reward_id=9f18ac21-233a-31c3-be77-b45840f5a810"
/// }
public struct RedeemLoyaltyRewardRequest: Codable {
    /// A unique string that identifies this `RedeemLoyaltyReward` request.
    /// Keys can be any valid string, but must be unique for every request.
    public var idempotencyKey: String
    /// The ID of the [location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) where the reward is redeemed.
    public var locationID: String

    public init(idempotencyKey: String, locationID: String) {
        self.idempotencyKey = idempotencyKey
        self.locationID = locationID
    }

    private enum CodingKeys: String, CodingKey {
        case idempotencyKey = "idempotency_key"
        case locationID = "location_id"
    }
}

/// A response that includes the `LoyaltyEvent` published for redeeming the reward.
///
/// Example:
///
/// {
///   "event" : {
///     "created_at" : "2020-05-08T21:56:00Z",
///     "id" : "67377a6e-dbdc-369d-aa16-2e7ed422e71f",
///     "location_id" : "P034NEENMD09F",
///     "loyalty_account_id" : "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
///     "redeem_reward" : {
///       "loyalty_program_id" : "d619f755-2d17-41f3-990d-c04ecedd64dd",
///       "reward_id" : "9f18ac21-233a-31c3-be77-b45840f5a810"
///     },
///     "source" : "LOYALTY_API",
///     "type" : "REDEEM_REWARD"
///   }
/// }
public struct RedeemLoyaltyRewardResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Provides information about a loyalty event.
    /// For more information, see [Loyalty events](https://developer.squareup.com/docs/loyalty-api/overview/#loyalty-events).
    public var event: LoyaltyEvent?

    public init(errors: [Error]? = nil, event: LoyaltyEvent? = nil) {
        self.errors = errors
        self.event = event
    }
}

/// Represents a refund processed for a Square transaction.
public struct Refund: Codable {
    /// Additional recipients (other than the merchant) receiving a portion of this refund.
    /// For example, fees assessed on a refund of a purchase by a third party integration.
    public var additionalRecipients: [AdditionalRecipient]?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money
    /// The timestamp for when the refund was created, in RFC 3339 format.
    public var createdAt: String?
    /// The refund's unique ID.
    public var id: String
    /// The ID of the refund's associated location.
    public var locationID: String
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var processingFeeMoney: Money?
    /// The reason for the refund being issued.
    public var reason: String
    /// The current status of the refund (`PENDING`, `APPROVED`, `REJECTED`,
    /// or `FAILED`).
    public var status: String
    /// The ID of the refunded tender.
    public var tenderID: String
    /// The ID of the transaction that the refunded tender is part of.
    public var transactionID: String

    public init(additionalRecipients: [AdditionalRecipient]? = nil, amountMoney: Money, createdAt: String? = nil, id: String, locationID: String, processingFeeMoney: Money? = nil, reason: String, status: String, tenderID: String, transactionID: String) {
        self.additionalRecipients = additionalRecipients
        self.amountMoney = amountMoney
        self.createdAt = createdAt
        self.id = id
        self.locationID = locationID
        self.processingFeeMoney = processingFeeMoney
        self.reason = reason
        self.status = status
        self.tenderID = tenderID
        self.transactionID = transactionID
    }

    private enum CodingKeys: String, CodingKey {
        case additionalRecipients = "additional_recipients"
        case amountMoney = "amount_money"
        case createdAt = "created_at"
        case id
        case locationID = "location_id"
        case processingFeeMoney = "processing_fee_money"
        case reason
        case status
        case tenderID = "tender_id"
        case transactionID = "transaction_id"
    }
}

/// Describes a request to refund a payment using [RefundPayment](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/refund-payment).
///
/// Example:
///
/// {
///   "request_body" : {
///     "amount_money" : {
///       "amount" : 100,
///       "currency" : "USD"
///     },
///     "idempotency_key" : "a7e36d40-d24b-11e8-b568-0800200c9a66",
///     "payment_id" : "UNOE3kv2BZwqHlJ830RCt5YCuaB"
///   }
/// }
public struct RefundPaymentRequest: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var appFeeMoney: Money?
    /// A unique string that identifies this `RefundPayment` request. The key can be any valid string
    /// but must be unique for every `RefundPayment` request.
    /// 
    /// For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
    public var idempotencyKey: String
    /// The unique ID of the payment being refunded.
    public var paymentID: String
    /// A description of the reason for the refund.
    public var reason: String?

    public init(amountMoney: Money, appFeeMoney: Money? = nil, idempotencyKey: String, paymentID: String, reason: String? = nil) {
        self.amountMoney = amountMoney
        self.appFeeMoney = appFeeMoney
        self.idempotencyKey = idempotencyKey
        self.paymentID = paymentID
        self.reason = reason
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
        case appFeeMoney = "app_fee_money"
        case idempotencyKey = "idempotency_key"
        case paymentID = "payment_id"
        case reason
    }
}

/// Defines the response returned by
/// [RefundPayment](https://developer.squareup.com/reference/square_2021-08-18/refunds-api/refund-payment).
/// 
/// If there are errors processing the request, the `refund` field might not be
/// present, or it might be present with a status of `FAILED`.
///
/// Example:
///
/// {
///   "refund" : {
///     "amount_money" : {
///       "amount" : 100,
///       "currency" : "USD"
///     },
///     "created_at" : "2018-10-17T20:41:55.520Z",
///     "id" : "UNOE3kv2BZwqHlJ830RCt5YCuaB_xVteEWVFkXDvKN1ddidfJWipt8p9whmElKT5mZtJ7wZ",
///     "payment_id" : "UNOE3kv2BZwqHlJ830RCt5YCuaB",
///     "status" : "PENDING",
///     "updated_at" : "2018-10-17T20:41:55.520Z"
///   }
/// }
public struct RefundPaymentResponse: Codable {
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// Represents a refund of a payment made using Square. Contains information about
    /// the original payment and the amount of money refunded.
    public var refund: PaymentRefund?

    public init(errors: [Error]? = nil, refund: PaymentRefund? = nil) {
        self.errors = errors
        self.refund = refund
    }
}

/// Indicates a refund's current status.
public enum RefundStatus: String, Codable, CaseIterable {
    case pending = "PENDING"
    case approved = "APPROVED"
    case rejected = "REJECTED"
    case failed = "FAILED"
}

/// Defines the parameters that can be included in the body of
/// a request to the [RegisterDomain](https://developer.squareup.com/reference/square_2021-08-18/apple-pay-api/register-domain) endpoint.
///
/// Example:
///
/// {
///   "request_body" : {
///     "domain_name" : "example.com"
///   }
/// }
public struct RegisterDomainRequest: Codable {
    /// A domain name as described in RFC-1034 that will be registered with ApplePay.
    public var domainName: String

    public init(domainName: String) {
        self.domainName = domainName
    }

    private enum CodingKeys: String, CodingKey {
        case domainName = "domain_name"
    }
}

/// Defines the fields that are included in the response body of
/// a request to the [RegisterDomain](https://developer.squareup.com/reference/square_2021-08-18/apple-pay-api/register-domain) endpoint.
/// 
/// Either `errors` or `status` are present in a given response (never both).
///
/// Example:
///
/// {
///   "status" : "VERIFIED"
/// }
public struct RegisterDomainResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// The status of the domain registration.
    /// 
    /// See [RegisterDomainResponseStatus](https://developer.squareup.com/reference/square_2021-08-18/enums/RegisterDomainResponseStatus) for possible values.
    public var status: String?

    public init(errors: [Error]? = nil, status: String? = nil) {
        self.errors = errors
        self.status = status
    }
}

/// The status of the domain registration.
public enum RegisterDomainResponseStatus: String, Codable, CaseIterable {
    case pending = "PENDING"
    case verified = "VERIFIED"
}

/// Defines the fields that are included in the request body of
/// a request to the [RemoveGroupFromCustomer](https://developer.squareup.com/reference/square_2021-08-18/customers-api/remove-group-from-customer) endpoint.
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct RemoveGroupFromCustomerRequest: Codable {
    public init() {}
}

/// Defines the fields that are included in the response body of
/// a request to the [RemoveGroupFromCustomer](https://developer.squareup.com/reference/square_2021-08-18/customers-api/remove-group-from-customer)
/// endpoint.
///
/// Example:
///
/// {
/// 
/// }
public struct RemoveGroupFromCustomerResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(errors: [Error]? = nil) {
        self.errors = errors
    }
}

/// Example:
///
/// {
///   "request_body" : {
///     "access_token" : "ACCESS_TOKEN"
///   }
/// }
public struct RenewTokenRequest: Codable {
    /// The token you want to renew.
    public var accessToken: String?

    public init(accessToken: String? = nil) {
        self.accessToken = accessToken
    }

    private enum CodingKeys: String, CodingKey {
        case accessToken = "access_token"
    }
}

/// Example:
///
/// {
///   "access_token" : "ACCESS_TOKEN",
///   "expires_at" : "2006-01-02T15:04:05Z",
///   "merchant_id" : "MERCHANT_ID",
///   "token_type" : "bearer"
/// }
public struct RenewTokenResponse: Codable {
    /// The renewed access token.
    /// This value might be different from the `access_token` you provided in your request.
    /// You provide this token in a header with every request to Connect API endpoints.
    /// See [Request and response headers](https://developer.squareup.com/docs/api/connect/v2/#requestandresponseheaders) for the format of this header.
    public var accessToken: String?
    /// The date when access_token expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format.
    public var expiresAt: String?
    /// The ID of the authorizing merchant's business.
    public var merchantID: String?
    /// __LEGACY FIELD__. The ID of the subscription plan the merchant signed
    /// up for. Only present if the merchant signed up for a subscription during
    /// authorization.
    public var planID: String?
    /// __LEGACY FIELD__. The ID of the merchant subscription associated with
    /// the authorization. Only present if the merchant signed up for a subscription
    /// during authorization..
    public var subscriptionID: String?
    /// This value is always _bearer_.
    public var tokenType: String?

    public init(accessToken: String? = nil, expiresAt: String? = nil, merchantID: String? = nil, planID: String? = nil, subscriptionID: String? = nil, tokenType: String? = nil) {
        self.accessToken = accessToken
        self.expiresAt = expiresAt
        self.merchantID = merchantID
        self.planID = planID
        self.subscriptionID = subscriptionID
        self.tokenType = tokenType
    }

    private enum CodingKeys: String, CodingKey {
        case accessToken = "access_token"
        case expiresAt = "expires_at"
        case merchantID = "merchant_id"
        case planID = "plan_id"
        case subscriptionID = "subscription_id"
        case tokenType = "token_type"
    }
}

/// Defines parameters in a
/// [ResumeSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/resume-subscription) endpoint
/// request.
public struct ResumeSubscriptionRequest: Codable {
    public init() {}
}

/// Defines parameters in a
/// [ResumeSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/resume-subscription) endpoint
/// response.
///
/// Example:
///
/// {
///   "subscription" : {
///     "created_at" : "2020-08-03T21:53:10Z",
///     "customer_id" : "CHFGVKYY8RSV93M5KCYTG4PN0G",
///     "id" : "9ba40961-995a-4a3d-8c53-048c40cafc13",
///     "location_id" : "S8GWD5R9QB376",
///     "plan_id" : "6JHXF3B2CW3YKHDV4XEM674H",
///     "price_override_money" : {
///       "amount" : 2000,
///       "currency" : "USD"
///     },
///     "status" : "ACTIVE",
///     "timezone" : "America\/Los_Angeles",
///     "version" : 1594311617331
///   }
/// }
public struct ResumeSubscriptionResponse: Codable {
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// Represents a customer subscription to a subscription plan.
    /// For an overview of the `Subscription` type, see
    /// [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
    public var subscription: Subscription?

    public init(errors: [Error]? = nil, subscription: Subscription? = nil) {
        self.errors = errors
        self.subscription = subscription
    }
}

public struct RetrieveBookingRequest: Codable {
    public init() {}
}

/// Example:
///
/// {
///   "booking" : {
///     "appointment_segments" : [
///       {
///         "duration_minutes" : 60,
///         "service_variation_id" : "RU3PBTZTK7DXZDQFCJHOK2MC",
///         "service_variation_version" : 1599775456731,
///         "team_member_id" : "TMXUrsBWWcHTt79t"
///       }
///     ],
///     "created_at" : "2020-10-28T15:47:41Z",
///     "customer_id" : "EX2QSVGTZN4K1E5QE1CBFNVQ8M",
///     "customer_note" : null,
///     "id" : "zkras0xv0xwswx",
///     "location_id" : "LEQHH0YY8B42M",
///     "seller_note" : null,
///     "start_at" : "2020-11-26T13:00:00Z",
///     "status" : "ACCEPTED",
///     "updated_at" : "2020-10-28T15:49:25Z",
///     "version" : 1
///   },
///   "errors" : [
/// 
///   ]
/// }
public struct RetrieveBookingResponse: Codable {
    /// Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service
    /// at a given location to a requesting customer in one or more appointment segments.
    public var booking: Booking?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(booking: Booking? = nil, errors: [Error]? = nil) {
        self.booking = booking
        self.errors = errors
    }
}

public struct RetrieveBusinessBookingProfileRequest: Codable {
    public init() {}
}

/// Example:
///
/// {
///   "business_booking_profile" : {
///     "allow_user_cancel" : true,
///     "booking_enabled" : true,
///     "booking_policy" : "ACCEPT_ALL",
///     "business_appointment_settings" : {
///       "alignment_time" : "HALF_HOURLY",
///       "any_team_member_booking_enabled" : true,
///       "cancellation_fee_money" : {
///         "currency" : "USD"
///       },
///       "cancellation_policy" : "CUSTOM_POLICY",
///       "location_types" : [
///         "BUSINESS_LOCATION"
///       ],
///       "max_booking_lead_time_seconds" : 31536000,
///       "min_booking_lead_time_seconds" : 0,
///       "multiple_service_booking_enabled" : true,
///       "skip_booking_flow_staff_selection" : false
///     },
///     "created_at" : "2020-09-10T21:40:38Z",
///     "customer_timezone_choice" : "CUSTOMER_CHOICE",
///     "seller_id" : "MLJQYZZRM0D3Y"
///   },
///   "errors" : [
/// 
///   ]
/// }
public struct RetrieveBusinessBookingProfileResponse: Codable {
    public var businessBookingProfile: BusinessBookingProfile?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(businessBookingProfile: BusinessBookingProfile? = nil, errors: [Error]? = nil) {
        self.businessBookingProfile = businessBookingProfile
        self.errors = errors
    }

    private enum CodingKeys: String, CodingKey {
        case businessBookingProfile = "business_booking_profile"
        case errors
    }
}

/// Retrieves details for a specific Card. Accessible via
/// HTTP requests at GET https://connect.squareup.com/v2/cards/{card_id}
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct RetrieveCardRequest: Codable {
    public init() {}
}

/// Defines the fields that are included in the response body of
/// a request to the [RetrieveCard](#endpoint-cards-retrievecard) endpoint.
/// 
/// Note: if there are errors processing the request, the card field will not be
/// present.
///
/// Example:
///
/// {
///   "card" : {
///     "billing_address" : {
///       "address_line_1" : "500 Electric Ave",
///       "address_line_2" : "Suite 600",
///       "administrative_district_level_1" : "NY",
///       "country" : "US",
///       "locality" : "New York",
///       "postal_code" : "10003"
///     },
///     "bin" : "411111",
///     "card_brand" : "VISA",
///     "card_type" : "CREDIT",
///     "cardholder_name" : "Amelia Earhart",
///     "customer_id" : "VDKXEEKPJN48QDG3BGGFAK05P8",
///     "enabled" : true,
///     "exp_month" : 11,
///     "exp_year" : 2022,
///     "fingerprint" : "ex-p-cs80EK9Flz7LsCMv-szbptQ_ssAGrhemzSTsPFgt9nzyE6t7okiLIQc-qw_quqKX4Q",
///     "id" : "ccof:uIbfJXhXETSP197M3GB",
///     "last_4" : "1111",
///     "prepaid_type" : "NOT_PREPAID",
///     "reference_id" : "user-id-1",
///     "version" : 1
///   }
/// }
public struct RetrieveCardResponse: Codable {
    /// Represents the payment details of a card to be used for payments. These
    /// details are determined by the payment token generated by Web Payments SDK.
    public var card: Card?
    /// Information on errors encountered during the request.
    public var errors: [Error]?

    public init(card: Card? = nil, errors: [Error]? = nil) {
        self.card = card
        self.errors = errors
    }
}

/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct RetrieveCashDrawerShiftRequest: Codable {
    /// The ID of the location to retrieve cash drawer shifts from.
    public var locationID: String

    public init(locationID: String) {
        self.locationID = locationID
    }

    private enum CodingKeys: String, CodingKey {
        case locationID = "location_id"
    }
}

/// Example:
///
/// {
///   "cash_drawer_shift" : {
///     "cash_paid_in_money" : {
///       "amount" : 10000,
///       "currency" : "USD"
///     },
///     "cash_paid_out_money" : {
///       "amount" : -10000,
///       "currency" : "USD"
///     },
///     "cash_payment_money" : {
///       "amount" : 100,
///       "currency" : "USD"
///     },
///     "cash_refunds_money" : {
///       "amount" : -100,
///       "currency" : "USD"
///     },
///     "closed_at" : "2019-11-22T00:44:49.000Z",
///     "closed_cash_money" : {
///       "amount" : 9970,
///       "currency" : "USD"
///     },
///     "closing_employee_id" : null,
///     "description" : "Misplaced some change",
///     "device" : {
///       "name" : "My iPad"
///     },
///     "ended_at" : "2019-11-22T00:44:49.000Z",
///     "ending_employee_id" : null,
///     "expected_cash_money" : {
///       "amount" : 10000,
///       "currency" : "USD"
///     },
///     "id" : "DCC99978-09A6-4926-849F-300BE9C5793A",
///     "opened_at" : "2019-11-22T00:42:54.000Z",
///     "opened_cash_money" : {
///       "amount" : 10000,
///       "currency" : "USD"
///     },
///     "opening_employee_id" : null,
///     "state" : "CLOSED"
///   }
/// }
public struct RetrieveCashDrawerShiftResponse: Codable {
    /// This model gives the details of a cash drawer shift.
    /// The cash_payment_money, cash_refund_money, cash_paid_in_money,
    /// and cash_paid_out_money fields are all computed by summing their respective
    /// event types.
    public var cashDrawerShift: CashDrawerShift?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(cashDrawerShift: CashDrawerShift? = nil, errors: [Error]? = nil) {
        self.cashDrawerShift = cashDrawerShift
        self.errors = errors
    }

    private enum CodingKeys: String, CodingKey {
        case cashDrawerShift = "cash_drawer_shift"
        case errors
    }
}

/// Example:
///
/// {
///   "request_params" : "?include_related_objects=true"
/// }
public struct RetrieveCatalogObjectRequest: Codable {
    /// Requests objects as of a specific version of the catalog. This allows you to retrieve historical
    /// versions of objects. The value to retrieve a specific version of an object can be found
    /// in the version field of [CatalogObject](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogObject)s.
    public var catalogVersion: Int?
    /// If `true`, the response will include additional objects that are related to the
    /// requested object, as follows:
    /// 
    /// If the `object` field of the response contains a `CatalogItem`, its associated
    /// `CatalogCategory`, `CatalogTax`, `CatalogImage` and `CatalogModifierList` objects will
    /// be returned in the `related_objects` field of the response. If the `object` field of
    /// the response contains a `CatalogItemVariation`, its parent `CatalogItem` will be returned
    /// in the `related_objects` field of the response.
    /// 
    /// Default value: `false`
    public var isIncludeRelatedObjects: Bool?

    public init(catalogVersion: Int? = nil, isIncludeRelatedObjects: Bool? = nil) {
        self.catalogVersion = catalogVersion
        self.isIncludeRelatedObjects = isIncludeRelatedObjects
    }

    private enum CodingKeys: String, CodingKey {
        case catalogVersion = "catalog_version"
        case isIncludeRelatedObjects = "include_related_objects"
    }
}

/// Example:
///
/// {
///   "object" : {
///     "id" : "W62UWFY35CWMYGVWK6TWJDNI",
///     "is_deleted" : false,
///     "item_data" : {
///       "category_id" : "BJNQCF2FJ6S6UIDT65ABHLRX",
///       "description" : "Hot Leaf Juice",
///       "name" : "Tea",
///       "tax_ids" : [
///         "HURXQOOAIC4IZSI2BEXQRYFY"
///       ],
///       "variations" : [
///         {
///           "id" : "2TZFAOHWGG7PAK2QEXWYPZSP",
///           "is_deleted" : false,
///           "item_variation_data" : {
///             "item_id" : "W62UWFY35CWMYGVWK6TWJDNI",
///             "name" : "Mug",
///             "ordinal" : 0,
///             "price_money" : {
///               "amount" : 150,
///               "currency" : "USD"
///             },
///             "pricing_type" : "FIXED_PRICING"
///           },
///           "present_at_all_locations" : true,
///           "type" : "ITEM_VARIATION",
///           "updated_at" : "2016-11-16T22:25:24.878Z",
///           "version" : 1479335124878
///         }
///       ]
///     },
///     "present_at_all_locations" : true,
///     "type" : "ITEM",
///     "updated_at" : "2016-11-16T22:25:24.878Z",
///     "version" : 1479335124878
///   },
///   "related_objects" : [
///     {
///       "category_data" : {
///         "name" : "Beverages"
///       },
///       "id" : "BJNQCF2FJ6S6UIDT65ABHLRX",
///       "is_deleted" : false,
///       "present_at_all_locations" : true,
///       "type" : "CATEGORY",
///       "updated_at" : "2016-11-16T22:25:24.878Z",
///       "version" : 1479335124878
///     },
///     {
///       "id" : "HURXQOOAIC4IZSI2BEXQRYFY",
///       "is_deleted" : false,
///       "present_at_all_locations" : true,
///       "tax_data" : {
///         "calculation_phase" : "TAX_SUBTOTAL_PHASE",
///         "enabled" : true,
///         "inclusion_type" : "ADDITIVE",
///         "name" : "Sales Tax",
///         "percentage" : "5.0"
///       },
///       "type" : "TAX",
///       "updated_at" : "2016-11-16T22:25:24.878Z",
///       "version" : 1479335124878
///     }
///   ]
/// }
public struct RetrieveCatalogObjectResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    public var object: CatalogObject?
    /// A list of `CatalogObject`s referenced by the object in the `object` field.
    public var relatedObjects: [CatalogObject]?

    public init(errors: [Error]? = nil, object: CatalogObject? = nil, relatedObjects: [CatalogObject]? = nil) {
        self.errors = errors
        self.object = object
        self.relatedObjects = relatedObjects
    }

    private enum CodingKeys: String, CodingKey {
        case errors
        case object
        case relatedObjects = "related_objects"
    }
}

/// Defines the fields that can be included in a request to the
/// [RetrieveCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/retrieve-customer-group) endpoint.
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct RetrieveCustomerGroupRequest: Codable {
    public init() {}
}

/// Defines the fields that are included in the response body of
/// a request to the [RetrieveCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/retrieve-customer-group) endpoint.
/// 
/// Either `errors` or `group` is present in a given response (never both).
///
/// Example:
///
/// {
///   "group" : {
///     "created_at" : "2020-04-13T21:54:57.863Z",
///     "id" : "2TAT3CMH4Q0A9M87XJZED0WMR3",
///     "name" : "Loyal Customers",
///     "updated_at" : "2020-04-13T21:54:58Z"
///   }
/// }
public struct RetrieveCustomerGroupResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Represents a group of customer profiles.
    /// 
    /// Customer groups can be created, be modified, and have their membership defined using
    /// the Customers API or within the Customer Directory in the Square Seller Dashboard or Point of Sale.
    public var group: CustomerGroup?

    public init(errors: [Error]? = nil, group: CustomerGroup? = nil) {
        self.errors = errors
        self.group = group
    }
}

/// Defines the fields that are included in requests to the `RetrieveCustomer`
/// endpoint.
///
/// Example:
///
/// {
/// 
/// }
public struct RetrieveCustomerRequest: Codable {
    public init() {}
}

/// Defines the fields that are included in the response body of
/// a request to the `RetrieveCustomer` endpoint.
/// 
/// Either `errors` or `customer` is present in a given response (never both).
///
/// Example:
///
/// {
///   "customer" : {
///     "address" : {
///       "address_line_1" : "500 Electric Ave",
///       "address_line_2" : "Suite 600",
///       "administrative_district_level_1" : "NY",
///       "country" : "US",
///       "locality" : "New York",
///       "postal_code" : "10003"
///     },
///     "created_at" : "2016-03-23T20:21:54.859Z",
///     "creation_source" : "THIRD_PARTY",
///     "email_address" : "Amelia.Earhart@example.com",
///     "family_name" : "Earhart",
///     "given_name" : "Amelia",
///     "group_ids" : [
///       "545AXB44B4XXWMVQ4W8SBT3HHF"
///     ],
///     "id" : "JDKYHBWT1D4F8MFH63DBMEN8Y4",
///     "note" : "a customer",
///     "phone_number" : "1-212-555-4240",
///     "preferences" : {
///       "email_unsubscribed" : false
///     },
///     "reference_id" : "YOUR_REFERENCE_ID",
///     "segment_ids" : [
///       "1KB9JE5EGJXCW.REACHABLE"
///     ],
///     "updated_at" : "2016-03-23T20:21:54.859Z",
///     "version" : 1
///   }
/// }
public struct RetrieveCustomerResponse: Codable {
    /// Represents a Square customer profile in the Customer Directory of a Square seller.
    public var customer: Customer?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(customer: Customer? = nil, errors: [Error]? = nil) {
        self.customer = customer
        self.errors = errors
    }
}

/// Defines the valid parameters for requests to the `RetrieveCustomerSegmentRequest` endpoint.
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct RetrieveCustomerSegmentRequest: Codable {
    public init() {}
}

/// Defines the fields that are included in the response body for requests to the `RetrieveCustomerSegment` endpoint.
/// 
/// Either `errors` or `segment` is present in a given response (never both).
///
/// Example:
///
/// {
///   "segment" : {
///     "created_at" : "2020-01-09T19:33:24.469Z",
///     "id" : "GMNXRZVEXNQDF.CHURN_RISK",
///     "name" : "Lapsed",
///     "updated_at" : "2020-04-13T23:01:13Z"
///   }
/// }
public struct RetrieveCustomerSegmentResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Represents a group of customer profiles that match one or more predefined filter criteria.
    /// 
    /// Segments (also known as Smart Groups) are defined and created within the Customer Directory in the
    /// Square Seller Dashboard or Point of Sale.
    public var segment: CustomerSegment?

    public init(errors: [Error]? = nil, segment: CustomerSegment? = nil) {
        self.errors = errors
        self.segment = segment
    }
}

/// Defines the parameters for a `RetrieveDisputeEvidence` request.
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct RetrieveDisputeEvidenceRequest: Codable {
    public init() {}
}

/// Defines the fields in a `RetrieveDisputeEvidence` response.
///
/// Example:
///
/// {
///   "evidence" : {
///     "dispute_id" : "bVTprrwk0gygTLZ96VX1oB",
///     "evidence_file" : {
///       "filename" : "evidence.tiff",
///       "filetype" : "image\/tiff"
///     },
///     "evidence_type" : "GENERIC_EVIDENCE",
///     "id" : "TOomLInj6iWmP3N8qfCXrB",
///     "uploaded_at" : "2018-10-18T16:01:10.000Z"
///   }
/// }
public struct RetrieveDisputeEvidenceResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    public var evidence: DisputeEvidence?

    public init(errors: [Error]? = nil, evidence: DisputeEvidence? = nil) {
        self.errors = errors
        self.evidence = evidence
    }
}

/// Defines the request parameters for the `RetrieveDispute` endpoint.
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct RetrieveDisputeRequest: Codable {
    public init() {}
}

/// Defines fields in a `RetrieveDispute` response.
///
/// Example:
///
/// {
///   "dispute" : {
///     "amount_money" : {
///       "amount" : 2000,
///       "currency" : "USD"
///     },
///     "brand_dispute_id" : "100000282394",
///     "card_brand" : "VISA",
///     "created_at" : "2018-10-18T15:59:13.613Z",
///     "disputed_payments" : [
///       {
///         "payment_id" : "6Ee10wvqhfipStz297mtUhBXvaB"
///       }
///     ],
///     "due_at" : "2018-11-01T00:00:00.000Z",
///     "id" : "XDgyFu7yo1E2S5lQGGpYn",
///     "reason" : "NO_KNOWLEDGE",
///     "state" : "LOST",
///     "updated_at" : "2018-10-18T15:59:13.613Z"
///   }
/// }
public struct RetrieveDisputeResponse: Codable {
    /// Represents a dispute a cardholder initiated with their bank.
    public var dispute: Dispute?
    /// Information about errors encountered during the request.
    public var errors: [Error]?

    public init(dispute: Dispute? = nil, errors: [Error]? = nil) {
        self.dispute = dispute
        self.errors = errors
    }
}

public struct RetrieveEmployeeRequest: Codable {
    public init() {}
}

public struct RetrieveEmployeeResponse: Codable {
    /// An employee object that is used by the external API.
    public var employee: Employee?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(employee: Employee? = nil, errors: [Error]? = nil) {
        self.employee = employee
        self.errors = errors
    }
}

/// A request to retrieve gift cards by their GANs.
///
/// Example:
///
/// {
///   "request_body" : {
///     "gan" : "7783320001001635"
///   }
/// }
public struct RetrieveGiftCardFromGANRequest: Codable {
    /// The gift card account number (GAN) of the gift card to retrieve.
    /// The maximum length of a GAN is 255 digits to account for third-party GANs that have been imported.
    /// Square-issued gift cards have 16-digit GANs.
    public var gan: String

    public init(gan: String) {
        self.gan = gan
    }
}

/// A response that contains a `GiftCard`. This response might contain a set of `Error` objects
/// if the request resulted in errors.
///
/// Example:
///
/// {
///   "gift_card" : {
///     "balance_money" : {
///       "amount" : 5000,
///       "currency" : "USD"
///     },
///     "created_at" : "2021-05-20T22:26:54.000Z",
///     "gan" : "7783320001001635",
///     "gan_source" : "SQUARE",
///     "id" : "gftc:6944163553804e439d89adb47caf806a",
///     "state" : "ACTIVE",
///     "type" : "DIGITAL"
///   }
/// }
public struct RetrieveGiftCardFromGANResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Represents a Square gift card.
    public var giftCard: GiftCard?

    public init(errors: [Error]? = nil, giftCard: GiftCard? = nil) {
        self.errors = errors
        self.giftCard = giftCard
    }

    private enum CodingKeys: String, CodingKey {
        case errors
        case giftCard = "gift_card"
    }
}

/// A request to retrieve gift cards by using nonces.
///
/// Example:
///
/// {
///   "request_body" : {
///     "nonce" : "cnon:7783322135245171"
///   }
/// }
public struct RetrieveGiftCardFromNonceRequest: Codable {
    /// The nonce of the gift card to retrieve.
    public var nonce: String

    public init(nonce: String) {
        self.nonce = nonce
    }
}

/// A response that contains a `GiftCard`. The response might contain a set of `Error` objects
/// if the request resulted in errors.
///
/// Example:
///
/// {
///   "gift_card" : {
///     "balance_money" : {
///       "amount" : 5000,
///       "currency" : "USD"
///     },
///     "created_at" : "2021-05-20T22:26:54.000Z",
///     "gan" : "7783320001001635",
///     "gan_source" : "SQUARE",
///     "id" : "gftc:6944163553804e439d89adb47caf806a",
///     "state" : "ACTIVE",
///     "type" : "DIGITAL"
///   }
/// }
public struct RetrieveGiftCardFromNonceResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Represents a Square gift card.
    public var giftCard: GiftCard?

    public init(errors: [Error]? = nil, giftCard: GiftCard? = nil) {
        self.errors = errors
        self.giftCard = giftCard
    }

    private enum CodingKeys: String, CodingKey {
        case errors
        case giftCard = "gift_card"
    }
}

/// A request to retrieve digital gift cards.
///
/// Example:
///
/// {
///   "request_params" : "?id=gftc:00113070ba5745f0b2377c1b9570cb03"
/// }
public struct RetrieveGiftCardRequest: Codable {
    public init() {}
}

/// A response that contains a `GiftCard`. The response might contain a set of `Error` objects
/// if the request resulted in errors.
///
/// Example:
///
/// {
///   "gift_card" : {
///     "balance_money" : {
///       "amount" : 1000,
///       "currency" : "USD"
///     },
///     "created_at" : "2021-05-20T22:26:54.000Z",
///     "gan" : "7783320001001635",
///     "gan_source" : "SQUARE",
///     "id" : "gftc:00113070ba5745f0b2377c1b9570cb03",
///     "state" : "ACTIVE",
///     "type" : "DIGITAL"
///   }
/// }
public struct RetrieveGiftCardResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Represents a Square gift card.
    public var giftCard: GiftCard?

    public init(errors: [Error]? = nil, giftCard: GiftCard? = nil) {
        self.errors = errors
        self.giftCard = giftCard
    }

    private enum CodingKeys: String, CodingKey {
        case errors
        case giftCard = "gift_card"
    }
}

/// Example:
///
/// {
/// 
/// }
public struct RetrieveInventoryAdjustmentRequest: Codable {
    public init() {}
}

/// Example:
///
/// {
///   "adjustment" : {
///     "catalog_object_id" : "W62UWFY35CWMYGVWK6TWJDNI",
///     "catalog_object_type" : "ITEM_VARIATION",
///     "created_at" : "2016-11-17T13:02:15.142Z",
///     "employee_id" : "LRK57NSQ5X7PUD05",
///     "from_state" : "IN_STOCK",
///     "id" : "UDMOEO78BG6GYWA2XDRYX3KB",
///     "location_id" : "C6W5YS5QM06F5",
///     "occurred_at" : "2016-11-16T25:44:22.837Z",
///     "quantity" : "7",
///     "reference_id" : "4a366069-4096-47a2-99a5-0084ac879509",
///     "source" : {
///       "application_id" : "416ff29c-86c4-4feb-b58c-9705f21f3ea0",
///       "name" : "Square Point of Sale 4.37",
///       "product" : "SQUARE_POS"
///     },
///     "to_state" : "SOLD",
///     "total_price_money" : {
///       "amount" : 4550,
///       "currency" : "USD"
///     }
///   },
///   "errors" : [
/// 
///   ]
/// }
public struct RetrieveInventoryAdjustmentResponse: Codable {
    /// Represents a change in state or quantity of product inventory at a
    /// particular time and location.
    public var adjustment: InventoryAdjustment?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(adjustment: InventoryAdjustment? = nil, errors: [Error]? = nil) {
        self.adjustment = adjustment
        self.errors = errors
    }
}

/// Example:
///
/// {
///   "request_params" : "?location_ids=&cursor="
/// }
public struct RetrieveInventoryChangesRequest: Codable {
    /// A pagination cursor returned by a previous call to this endpoint.
    /// Provide this to retrieve the next set of results for the original query.
    /// 
    /// See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
    public var cursor: String?
    /// The [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) IDs to look up as a comma-separated
    /// list. An empty list queries all locations.
    public var locationIDs: String?

    public init(cursor: String? = nil, locationIDs: String? = nil) {
        self.cursor = cursor
        self.locationIDs = locationIDs
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case locationIDs = "location_ids"
    }
}

/// Example:
///
/// {
///   "changes" : [
///     {
///       "adjustment" : {
///         "catalog_object_id" : "W62UWFY35CWMYGVWK6TWJDNI",
///         "catalog_object_type" : "ITEM_VARIATION",
///         "created_at" : "2016-11-16T22:25:24.878Z",
///         "employee_id" : "AV7YRCGI2H1J5NQ8E1XIZCNA",
///         "from_state" : "IN_STOCK",
///         "id" : "OJKJIUANKLMLQANZADNPLKAD",
///         "location_id" : "C6W5YS5QM06F5",
///         "occurred_at" : "2016-11-16T22:25:24.878Z",
///         "quantity" : "3",
///         "reference_id" : "d8207693-168f-4b44-a2fd-a7ff533ddd26",
///         "source" : {
///           "application_id" : "416ff29c-86c4-4feb-b58c-9705f21f3ea0",
///           "name" : "Square Point of Sale 4.37",
///           "product" : "SQUARE_POS"
///         },
///         "to_state" : "SOLD",
///         "total_price_money" : {
///           "amount" : 5000,
///           "currency" : "USD"
///         },
///         "transaction_id" : "5APV6JYK1SNCZD11AND2RX1Z"
///       },
///       "type" : "ADJUSTMENT"
///     }
///   ],
///   "errors" : [
/// 
///   ]
/// }
public struct RetrieveInventoryChangesResponse: Codable {
    /// The set of inventory changes for the requested object and locations.
    public var changes: [InventoryChange]?
    /// The pagination cursor to be used in a subsequent request. If unset,
    /// this is the final response.
    /// 
    /// See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
    public var cursor: String?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(changes: [InventoryChange]? = nil, cursor: String? = nil, errors: [Error]? = nil) {
        self.changes = changes
        self.cursor = cursor
        self.errors = errors
    }
}

/// Example:
///
/// {
///   "request_params" : "?location_ids=C6W5YS5QM06F5&cursor="
/// }
public struct RetrieveInventoryCountRequest: Codable {
    /// A pagination cursor returned by a previous call to this endpoint.
    /// Provide this to retrieve the next set of results for the original query.
    /// 
    /// See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
    public var cursor: String?
    /// The [Location](https://developer.squareup.com/reference/square_2021-08-18/objects/Location) IDs to look up as a comma-separated
    /// list. An empty list queries all locations.
    public var locationIDs: String?

    public init(cursor: String? = nil, locationIDs: String? = nil) {
        self.cursor = cursor
        self.locationIDs = locationIDs
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case locationIDs = "location_ids"
    }
}

/// Example:
///
/// {
///   "counts" : [
///     {
///       "calculated_at" : "2016-11-16T22:28:01.223Z",
///       "catalog_object_id" : "W62UWFY35CWMYGVWK6TWJDNI",
///       "catalog_object_type" : "ITEM_VARIATION",
///       "location_id" : "C6W5YS5QM06F5",
///       "quantity" : "22",
///       "state" : "IN_STOCK"
///     }
///   ],
///   "errors" : [
/// 
///   ]
/// }
public struct RetrieveInventoryCountResponse: Codable {
    /// The current calculated inventory counts for the requested object and
    /// locations.
    public var counts: [InventoryCount]?
    /// The pagination cursor to be used in a subsequent request. If unset,
    /// this is the final response.
    /// 
    /// See the [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination) guide for more information.
    public var cursor: String?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(counts: [InventoryCount]? = nil, cursor: String? = nil, errors: [Error]? = nil) {
        self.counts = counts
        self.cursor = cursor
        self.errors = errors
    }
}

/// Example:
///
/// {
/// 
/// }
public struct RetrieveInventoryPhysicalCountRequest: Codable {
    public init() {}
}

/// Example:
///
/// {
///   "count" : {
///     "catalog_object_id" : "W62UWFY35CWMYGVWK6TWJDNI",
///     "catalog_object_type" : "ITEM_VARIATION",
///     "created_at" : "2016-11-16T22:25:24.878Z",
///     "employee_id" : "LRK57NSQ5X7PUD05",
///     "id" : "ANZADNPLKADOJKJIUANKLMLQ",
///     "location_id" : "C6W5YS5QM06F5",
///     "occurred_at" : "2016-11-16T22:25:24.878Z",
///     "quantity" : "15",
///     "reference_id" : "f857ec37-f9a0-4458-8e23-5b5e0bea4e53",
///     "source" : {
///       "application_id" : "416ff29c-86c4-4feb-b58c-9705f21f3ea0",
///       "name" : "Square Point of Sale 4.37",
///       "product" : "SQUARE_POS"
///     },
///     "state" : "IN_STOCK"
///   },
///   "errors" : [
/// 
///   ]
/// }
public struct RetrieveInventoryPhysicalCountResponse: Codable {
    /// Represents the quantity of an item variation that is physically present
    /// at a specific location, verified by a seller or a seller's employee. For example,
    /// a physical count might come from an employee counting the item variations on
    /// hand or from syncing with an external system.
    public var count: InventoryPhysicalCount?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(count: InventoryPhysicalCount? = nil, errors: [Error]? = nil) {
        self.count = count
        self.errors = errors
    }
}

/// Example:
///
/// {
/// 
/// }
public struct RetrieveInventoryTransferRequest: Codable {
    public init() {}
}

/// Example:
///
/// {
///   "errors" : [
/// 
///   ],
///   "transfer" : {
///     "catalog_object_id" : "W62UWFY35CWMYGVWK6TWJDNI",
///     "catalog_object_type" : "ITEM_VARIATION",
///     "created_at" : "2016-11-17T13:02:15.142Z",
///     "employee_id" : "LRK57NSQ5X7PUD05",
///     "from_location_id" : "C6W5YS5QM06F5",
///     "id" : "UDMOEO78BG6GYWA2XDRYX3KB",
///     "occurred_at" : "2016-11-16T25:44:22.837Z",
///     "quantity" : "7",
///     "reference_id" : "4a366069-4096-47a2-99a5-0084ac879509",
///     "source" : {
///       "application_id" : "416ff29c-86c4-4feb-b58c-9705f21f3ea0",
///       "name" : "Square Point of Sale 4.37",
///       "product" : "SQUARE_POS"
///     },
///     "state" : "IN_STOCK",
///     "to_location_id" : "59TNP9SA8VGDA"
///   }
/// }
public struct RetrieveInventoryTransferResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Represents the transfer of a quantity of product inventory at a
    /// particular time from one location to another.
    public var transfer: InventoryTransfer?

    public init(errors: [Error]? = nil, transfer: InventoryTransfer? = nil) {
        self.errors = errors
        self.transfer = transfer
    }
}

/// Defines the fields that are included in the request body for
/// the __RetrieveLocation__ endpoint.
///
/// Example:
///
/// {
/// 
/// }
public struct RetrieveLocationRequest: Codable {
    public init() {}
}

/// Defines the fields that the
/// [RetrieveLocation](https://developer.squareup.com/reference/square_2021-08-18/locations-api/retrieve-location) endpoint returns
/// in a response.
///
/// Example:
///
/// {
///   "location" : {
///     "address" : {
///       "address_line_1" : "123 Main St",
///       "administrative_district_level_1" : "CA",
///       "country" : "US",
///       "locality" : "San Francisco",
///       "postal_code" : "94114"
///     },
///     "business_name" : "Jet Fuel Coffee",
///     "capabilities" : [
///       "CREDIT_CARD_PROCESSING"
///     ],
///     "country" : "US",
///     "created_at" : "2016-09-19T17:33:12Z",
///     "currency" : "USD",
///     "id" : "18YC4JDH91E1H",
///     "language_code" : "en-US",
///     "merchant_id" : "3MYCJG5GVYQ8Q",
///     "name" : "Jet Fuel Coffee - Grant Park",
///     "phone_number" : "+1 650-354-7217",
///     "status" : "ACTIVE",
///     "timezone" : "America\/Los_Angeles"
///   }
/// }
public struct RetrieveLocationResponse: Codable {
    /// Information on errors encountered during the request.
    public var errors: [Error]?
    public var location: Location?

    public init(errors: [Error]? = nil, location: Location? = nil) {
        self.errors = errors
        self.location = location
    }
}

/// A request to retrieve a loyalty account.
///
/// Example:
///
/// {
///   "request_params" : "?account_id=79b807d2-d786-46a9-933b-918028d7a8c5"
/// }
public struct RetrieveLoyaltyAccountRequest: Codable {
    public init() {}
}

/// A response that includes the loyalty account.
///
/// Example:
///
/// {
///   "loyalty_account" : {
///     "balance" : 10,
///     "created_at" : "2020-05-08T21:44:32Z",
///     "customer_id" : "Q8002FAM9V1EZ0ADB2T5609X6NET1H0",
///     "id" : "79b807d2-d786-46a9-933b-918028d7a8c5",
///     "lifetime_points" : 20,
///     "mapping" : {
///       "created_at" : "2020-05-08T21:44:32Z",
///       "id" : "66aaab3f-da99-49ed-8b19-b87f851c844f",
///       "phone_number" : "+14155551234"
///     },
///     "program_id" : "d619f755-2d17-41f3-990d-c04ecedd64dd",
///     "updated_at" : "2020-05-08T21:44:32Z"
///   }
/// }
public struct RetrieveLoyaltyAccountResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Describes a loyalty account. For more information, see
    /// [Manage Loyalty Accounts Using the Loyalty API](https://developer.squareup.com/docs/loyalty-api/overview).
    public var loyaltyAccount: LoyaltyAccount?

    public init(errors: [Error]? = nil, loyaltyAccount: LoyaltyAccount? = nil) {
        self.errors = errors
        self.loyaltyAccount = loyaltyAccount
    }

    private enum CodingKeys: String, CodingKey {
        case errors
        case loyaltyAccount = "loyalty_account"
    }
}

/// A request to retrieve the [loyalty program](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgram) that belongs to a seller. A seller can have only one loyalty program.
///
/// Example:
///
/// {
///   "request_params" : "?program_id=main"
/// }
public struct RetrieveLoyaltyProgramRequest: Codable {
    public init() {}
}

/// A response that contains the loyalty program.
///
/// Example:
///
/// {
///   "program" : {
///     "accrual_rules" : [
///       {
///         "accrual_type" : "SPEND",
///         "excluded_category_ids" : [
///           "7ZERJKO5PVYXCVUHV2JCZ2UG",
///           "FQKAOJE5C4FIMF5A2URMLW6V"
///         ],
///         "excluded_item_variation_ids" : [
///           "CBZXBUVVTYUBZGQO44RHMR6B",
///           "EDILT24Z2NISEXDKGY6HP7XV"
///         ],
///         "points" : 1,
///         "spend_amount_money" : {
///           "amount" : 100
///         }
///       }
///     ],
///     "created_at" : "2020-04-20T16:55:11Z",
///     "id" : "d619f755-2d17-41f3-990d-c04ecedd64dd",
///     "location_ids" : [
///       "P034NEENMD09F"
///     ],
///     "reward_tiers" : [
///       {
///         "created_at" : "2020-04-20T16:55:11Z",
///         "definition" : {
///           "discount_type" : "FIXED_PERCENTAGE",
///           "percentage_discount" : "10",
///           "scope" : "ORDER"
///         },
///         "id" : "e1b39225-9da5-43d1-a5db-782cdd8ad94f",
///         "name" : "10% off entire sale",
///         "points" : 10,
///         "pricing_rule_reference" : {
///           "catalog_version" : "1605486402527",
///           "object_id" : "74C4JSHESNLTB2A7ITO5HO6F"
///         }
///       }
///     ],
///     "status" : "ACTIVE",
///     "terminology" : {
///       "one" : "Point",
///       "other" : "Points"
///     },
///     "updated_at" : "2020-05-01T02:00:02Z"
///   }
/// }
public struct RetrieveLoyaltyProgramResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Represents a Square loyalty program. Loyalty programs define how buyers can earn points and redeem points for rewards.
    /// Square sellers can have only one loyalty program, which is created and managed from the Seller Dashboard.
    /// For more information, see [Loyalty Program Overview](https://developer.squareup.com/docs/loyalty/overview).
    public var program: LoyaltyProgram?

    public init(errors: [Error]? = nil, program: LoyaltyProgram? = nil) {
        self.errors = errors
        self.program = program
    }
}

/// A request to retrieve a loyalty reward.
///
/// Example:
///
/// {
///   "request_params" : "?reward_id=9f18ac21-233a-31c3-be77-b45840f5a810"
/// }
public struct RetrieveLoyaltyRewardRequest: Codable {
    public init() {}
}

/// A response that includes the loyalty reward.
///
/// Example:
///
/// {
///   "reward" : {
///     "created_at" : "2020-05-08T21:55:42Z",
///     "id" : "9f18ac21-233a-31c3-be77-b45840f5a810",
///     "loyalty_account_id" : "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
///     "points" : 10,
///     "redeemed_at" : "2020-05-08T21:56:00Z",
///     "reward_tier_id" : "e1b39225-9da5-43d1-a5db-782cdd8ad94f",
///     "status" : "REDEEMED",
///     "updated_at" : "2020-05-08T21:56:00Z"
///   }
/// }
public struct RetrieveLoyaltyRewardResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Represents a contract to redeem loyalty points for a [reward tier](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyProgramRewardTier) discount. Loyalty rewards can be in an ISSUED, REDEEMED, or DELETED state. For more information, see [Redeem loyalty rewards](https://developer.squareup.com/docs/loyalty-api/overview#redeem-loyalty-rewards).
    public var reward: LoyaltyReward?

    public init(errors: [Error]? = nil, reward: LoyaltyReward? = nil) {
        self.errors = errors
        self.reward = reward
    }
}

/// Request object for the [RetrieveMerchant](https://developer.squareup.com/reference/square_2021-08-18/merchants-api/retrieve-merchant) endpoint.
public struct RetrieveMerchantRequest: Codable {
    public init() {}
}

/// The response object returned by the [RetrieveMerchant](https://developer.squareup.com/reference/square_2021-08-18/merchants-api/retrieve-merchant) endpoint.
///
/// Example:
///
/// {
///   "merchant" : {
///     "business_name" : "Apple A Day",
///     "country" : "US",
///     "currency" : "USD",
///     "id" : "DM7VKY8Q63GNP",
///     "language_code" : "en-US",
///     "main_location_id" : "9A65CGC72ZQG1",
///     "status" : "ACTIVE"
///   }
/// }
public struct RetrieveMerchantResponse: Codable {
    /// Information on errors encountered during the request.
    public var errors: [Error]?
    /// Represents a Square seller.
    public var merchant: Merchant?

    public init(errors: [Error]? = nil, merchant: Merchant? = nil) {
        self.errors = errors
        self.merchant = merchant
    }
}

public struct RetrieveObsMigrationProfileRequest: Codable {
    public init() {}
}

/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct RetrieveOrderRequest: Codable {
    public init() {}
}

/// Example:
///
/// {
///   "order" : {
///     "created_at" : "2020-05-18T16:30:49.614Z",
///     "discounts" : [
///       {
///         "applied_money" : {
///           "amount" : 550,
///           "currency" : "USD"
///         },
///         "name" : "50% Off",
///         "percentage" : "50",
///         "scope" : "ORDER",
///         "type" : "FIXED_PERCENTAGE",
///         "uid" : "zGsRZP69aqSSR9lq9euSPB"
///       }
///     ],
///     "id" : "CAISENgvlJ6jLWAzERDzjyHVybY",
///     "line_items" : [
///       {
///         "applied_discounts" : [
///           {
///             "applied_money" : {
///               "amount" : 250,
///               "currency" : "USD"
///             },
///             "discount_uid" : "zGsRZP69aqSSR9lq9euSPB",
///             "uid" : "9zr9S4dxvPAixvn0lpa1VC"
///           }
///         ],
///         "base_price_money" : {
///           "amount" : 500,
///           "currency" : "USD"
///         },
///         "gross_sales_money" : {
///           "amount" : 500,
///           "currency" : "USD"
///         },
///         "name" : "Item 1",
///         "quantity" : "1",
///         "total_discount_money" : {
///           "amount" : 250,
///           "currency" : "USD"
///         },
///         "total_money" : {
///           "amount" : 250,
///           "currency" : "USD"
///         },
///         "total_tax_money" : {
///           "amount" : 0,
///           "currency" : "USD"
///         },
///         "uid" : "ULkg0tQTRK2bkU9fNv3IJD",
///         "variation_total_price_money" : {
///           "amount" : 500,
///           "currency" : "USD"
///         }
///       },
///       {
///         "applied_discounts" : [
///           {
///             "applied_money" : {
///               "amount" : 300,
///               "currency" : "USD"
///             },
///             "discount_uid" : "zGsRZP69aqSSR9lq9euSPB",
///             "uid" : "qa8LwwZK82FgSEkQc2HYVC"
///           }
///         ],
///         "base_price_money" : {
///           "amount" : 300,
///           "currency" : "USD"
///         },
///         "gross_sales_money" : {
///           "amount" : 600,
///           "currency" : "USD"
///         },
///         "name" : "Item 2",
///         "quantity" : "2",
///         "total_discount_money" : {
///           "amount" : 300,
///           "currency" : "USD"
///         },
///         "total_money" : {
///           "amount" : 300,
///           "currency" : "USD"
///         },
///         "total_tax_money" : {
///           "amount" : 0,
///           "currency" : "USD"
///         },
///         "uid" : "mumY8Nun4BC5aKe2yyx5a",
///         "variation_total_price_money" : {
///           "amount" : 600,
///           "currency" : "USD"
///         }
///       }
///     ],
///     "location_id" : "D7AVYMEAPJ3A3",
///     "net_amounts" : {
///       "discount_money" : {
///         "amount" : 550,
///         "currency" : "USD"
///       },
///       "service_charge_money" : {
///         "amount" : 0,
///         "currency" : "USD"
///       },
///       "tax_money" : {
///         "amount" : 0,
///         "currency" : "USD"
///       },
///       "tip_money" : {
///         "amount" : 0,
///         "currency" : "USD"
///       },
///       "total_money" : {
///         "amount" : 550,
///         "currency" : "USD"
///       }
///     },
///     "state" : "OPEN",
///     "total_discount_money" : {
///       "amount" : 550,
///       "currency" : "USD"
///     },
///     "total_money" : {
///       "amount" : 550,
///       "currency" : "USD"
///     },
///     "total_service_charge_money" : {
///       "amount" : 0,
///       "currency" : "USD"
///     },
///     "total_tax_money" : {
///       "amount" : 0,
///       "currency" : "USD"
///     },
///     "total_tip_money" : {
///       "amount" : 0,
///       "currency" : "USD"
///     },
///     "updated_at" : "2020-05-18T16:30:49.614Z",
///     "version" : 1
///   }
/// }
public struct RetrieveOrderResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Contains all information related to a single order to process with Square,
    /// including line items that specify the products to purchase. `Order` objects also
    /// include information about any associated tenders, refunds, and returns.
    /// 
    /// All Connect V2 Transactions have all been converted to Orders including all associated
    /// itemization data.
    public var order: Order?

    public init(errors: [Error]? = nil, order: Order? = nil) {
        self.errors = errors
        self.order = order
    }
}

/// Represents a `RetrieveSnippet` request.
public struct RetrieveSnippetRequest: Codable {
    public init() {}
}

/// Represents a `RetrieveSnippet` response. The response can include either `snippet` or `errors`.
///
/// Example:
///
/// {
///   "snippet" : {
///     "content" : "<script>var js = 1;<\/script>",
///     "created_at" : "2021-03-11T25:40:09Z",
///     "id" : "snippet_5d178150-a6c0-11eb-a9f1-437e6a2881e7",
///     "site_id" : "site_278075276488921835",
///     "updated_at" : "2021-03-11T25:40:09Z"
///   }
/// }
public struct RetrieveSnippetResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Represents the snippet that is added to a Square Online site. The snippet code is injected into the `head` element of all pages on the site, except for checkout pages.
    public var snippet: Snippet?

    public init(errors: [Error]? = nil, snippet: Snippet? = nil) {
        self.errors = errors
        self.snippet = snippet
    }
}

/// Defines parameters in a
/// [RetrieveSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/retrieve-subscription) endpoint request.
public struct RetrieveSubscriptionRequest: Codable {
    public init() {}
}

/// Defines the fields that are included in the response from the
/// [RetrieveSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/retrieve-subscription) endpoint.
///
/// Example:
///
/// {
///   "subscription" : {
///     "charged_through_date" : "2020-06-11",
///     "created_at" : "2020-08-03T21:53:10Z",
///     "customer_id" : "CHFGVKYY8RSV93M5KCYTG4PN0G",
///     "id" : "8151fc89-da15-4eb9-a685-1a70883cebfc",
///     "invoice_ids" : [
///       "grebK0Q_l8H4fqoMMVvt-Q",
///       "rcX_i3sNmHTGKhI4W2mceA"
///     ],
///     "location_id" : "S8GWD5R9QB376",
///     "paid_until_date" : "2020-06-11",
///     "plan_id" : "6JHXF3B2CW3YKHDV4XEM674H",
///     "price_override_money" : {
///       "amount" : 1000,
///       "currency" : "USD"
///     },
///     "start_date" : "2020-05-11",
///     "status" : "ACTIVE",
///     "timezone" : "America\/Los_Angeles"
///   }
/// }
public struct RetrieveSubscriptionResponse: Codable {
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// Represents a customer subscription to a subscription plan.
    /// For an overview of the `Subscription` type, see
    /// [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
    public var subscription: Subscription?

    public init(errors: [Error]? = nil, subscription: Subscription? = nil) {
        self.errors = errors
        self.subscription = subscription
    }
}

public struct RetrieveTeamMemberBookingProfileRequest: Codable {
    public init() {}
}

/// Example:
///
/// {
///   "errors" : [
/// 
///   ],
///   "team_member_booking_profile" : {
///     "display_name" : "Sandbox Staff",
///     "is_bookable" : true,
///     "team_member_id" : "TMaJcbiRqPIGZuS9"
///   }
/// }
public struct RetrieveTeamMemberBookingProfileResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// The booking profile of a seller's team member, including the team member's ID, display name, description and whether the team member can be booked as a service provider.
    public var teamMemberBookingProfile: TeamMemberBookingProfile?

    public init(errors: [Error]? = nil, teamMemberBookingProfile: TeamMemberBookingProfile? = nil) {
        self.errors = errors
        self.teamMemberBookingProfile = teamMemberBookingProfile
    }

    private enum CodingKeys: String, CodingKey {
        case errors
        case teamMemberBookingProfile = "team_member_booking_profile"
    }
}

/// Represents a retrieve request for a `TeamMember` object.
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct RetrieveTeamMemberRequest: Codable {
    public init() {}
}

/// Represents a response from a retrieve request containing a `TeamMember` object or error messages.
///
/// Example:
///
/// {
///   "team_member" : {
///     "assigned_locations" : {
///       "assignment_type" : "EXPLICIT_LOCATIONS",
///       "location_ids" : [
///         "GA2Y9HSJ8KRYT",
///         "YSGH2WBKG94QZ"
///       ]
///     },
///     "created_at" : "2020-06-11T22:55:45.867Z",
///     "email_address" : "joe_doe@gmail.com",
///     "family_name" : "Doe",
///     "given_name" : "Joe",
///     "id" : "1yJlHapkseYnNPETIU1B",
///     "is_owner" : false,
///     "phone_number" : "+14159283333",
///     "reference_id" : "reference_id_1",
///     "status" : "ACTIVE",
///     "updated_at" : "2020-06-11T22:55:45.867Z"
///   }
/// }
public struct RetrieveTeamMemberResponse: Codable {
    /// The errors that occurred during the request.
    public var errors: [Error]?
    /// A record representing an individual team member for a business.
    public var teamMember: TeamMember?

    public init(errors: [Error]? = nil, teamMember: TeamMember? = nil) {
        self.errors = errors
        self.teamMember = teamMember
    }

    private enum CodingKeys: String, CodingKey {
        case errors
        case teamMember = "team_member"
    }
}

/// Example:
///
/// {
/// 
/// }
public struct RetrieveTransactionRequest: Codable {
    public init() {}
}

/// Defines the fields that are included in the response body of
/// a request to the [RetrieveTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/retrieve-transaction) endpoint.
/// 
/// One of `errors` or `transaction` is present in a given response (never both).
///
/// Example:
///
/// {
///   "transaction" : {
///     "created_at" : "2016-03-10T22:57:56Z",
///     "id" : "KnL67ZIwXCPtzOrqj0HrkxMF",
///     "location_id" : "18YC4JDH91E1H",
///     "product" : "EXTERNAL_API",
///     "reference_id" : "some optional reference id",
///     "tenders" : [
///       {
///         "additional_recipients" : [
///           {
///             "amount_money" : {
///               "amount" : 20,
///               "currency" : "USD"
///             },
///             "description" : "Application fees",
///             "location_id" : "057P5VYJ4A5X1"
///           }
///         ],
///         "amount_money" : {
///           "amount" : 5000,
///           "currency" : "USD"
///         },
///         "card_details" : {
///           "card" : {
///             "card_brand" : "VISA",
///             "last_4" : "1111"
///           },
///           "entry_method" : "KEYED",
///           "status" : "CAPTURED"
///         },
///         "created_at" : "2016-03-10T22:57:56Z",
///         "id" : "MtZRYYdDrYNQbOvV7nbuBvMF",
///         "location_id" : "18YC4JDH91E1H",
///         "note" : "some optional note",
///         "processing_fee_money" : {
///           "amount" : 138,
///           "currency" : "USD"
///         },
///         "transaction_id" : "KnL67ZIwXCPtzOrqj0HrkxMF",
///         "type" : "CARD"
///       }
///     ]
///   }
/// }
public struct RetrieveTransactionResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Represents a transaction processed with Square, either with the
    /// Connect API or with Square Point of Sale.
    /// 
    /// The `tenders` field of this object lists all methods of payment used to pay in
    /// the transaction.
    public var transaction: Transaction?

    public init(errors: [Error]? = nil, transaction: Transaction? = nil) {
        self.errors = errors
        self.transaction = transaction
    }
}

/// Represents a retrieve request for the wage setting of a team member.
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct RetrieveWageSettingRequest: Codable {
    public init() {}
}

/// Represents a response from a retrieve request containing the specified `WageSetting` object or error messages.
///
/// Example:
///
/// {
///   "wage_setting" : {
///     "created_at" : "2020-06-11T23:01:21+00:00",
///     "is_overtime_exempt" : false,
///     "job_assignments" : [
///       {
///         "annual_rate" : {
///           "amount" : 4500000,
///           "currency" : "USD"
///         },
///         "hourly_rate" : {
///           "amount" : 2164,
///           "currency" : "USD"
///         },
///         "job_title" : "Manager",
///         "pay_type" : "SALARY",
///         "weekly_hours" : 40
///       }
///     ],
///     "team_member_id" : "1yJlHapkseYnNPETIU1B",
///     "updated_at" : "2020-06-11T23:01:21+00:00",
///     "version" : 1
///   }
/// }
public struct RetrieveWageSettingResponse: Codable {
    /// The errors that occurred during the request.
    public var errors: [Error]?
    /// An object representing a team member's wage information.
    public var wageSetting: WageSetting?

    public init(errors: [Error]? = nil, wageSetting: WageSetting? = nil) {
        self.errors = errors
        self.wageSetting = wageSetting
    }

    private enum CodingKeys: String, CodingKey {
        case errors
        case wageSetting = "wage_setting"
    }
}

/// Example:
///
/// {
///   "request_body" : {
///     "access_token" : "ACCESS_TOKEN",
///     "client_id" : "CLIENT_ID"
///   }
/// }
public struct RevokeTokenRequest: Codable {
    /// The access token of the merchant whose token you want to revoke.
    /// Do not provide a value for merchant_id if you provide this parameter.
    public var accessToken: String?
    /// The Square issued ID for your application, available from the
    /// [developer dashboard](https://developer.squareup.com/apps).
    public var clientID: String?
    /// The ID of the merchant whose token you want to revoke.
    /// Do not provide a value for access_token if you provide this parameter.
    public var merchantID: String?
    /// If `true`, terminate the given single access token, but do not
    /// terminate the entire authorization.
    /// Default: `false`
    public var isRevokeOnlyAccessToken: Bool?

    public init(accessToken: String? = nil, clientID: String? = nil, merchantID: String? = nil, isRevokeOnlyAccessToken: Bool? = nil) {
        self.accessToken = accessToken
        self.clientID = clientID
        self.merchantID = merchantID
        self.isRevokeOnlyAccessToken = isRevokeOnlyAccessToken
    }

    private enum CodingKeys: String, CodingKey {
        case accessToken = "access_token"
        case clientID = "client_id"
        case merchantID = "merchant_id"
        case isRevokeOnlyAccessToken = "revoke_only_access_token"
    }
}

/// Example:
///
/// {
///   "success" : true
/// }
public struct RevokeTokenResponse: Codable {
    /// If the request is successful, this is true.
    public var isSuccess: Bool?

    public init(isSuccess: Bool? = nil) {
        self.isSuccess = isSuccess
    }

    private enum CodingKeys: String, CodingKey {
        case isSuccess = "success"
    }
}

/// Represents fraud risk information for the associated payment.
/// 
/// When you take a payment through Square's Payments API (using the `CreatePayment`
/// endpoint), Square evaluates it and assigns a risk level to the payment. Sellers
/// can use this information to determine the course of action (for example,
/// provide the goods/services or refund the payment).
public struct RiskEvaluation: Codable {
    /// The timestamp when payment risk was evaluated, in RFC 3339 format.
    public var createdAt: String?
    /// The risk level associated with the payment
    public var riskLevel: String?
    public var status: AnyJSON

    public init(createdAt: String? = nil, riskLevel: String? = nil, status: AnyJSON) {
        self.createdAt = createdAt
        self.riskLevel = riskLevel
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case createdAt = "created_at"
        case riskLevel = "risk_level"
        case status
    }
}

public enum RiskEvaluationRiskLevel: String, Codable, CaseIterable {
    case pending = "PENDING"
    case normal = "NORMAL"
    case moderate = "MODERATE"
    case high = "HIGH"
}

/// A query filter to search for availabilities by.
public struct SearchAvailabilityFilter: Codable {
    /// The query expression to search for availabilities for an existing booking by matching the specified `booking_id` value.
    /// This is commonly used to reschedule an appointment.
    /// If this expression is specified, the `location_id` and `segment_filters` expressions are not allowed.
    public var bookingID: String?
    /// The query expression to search for availabilities matching the specified seller location IDs.
    /// This query expression is not applicable when `booking_id` is present.
    public var locationID: String?
    /// The list of segment filters to apply. A query with `n` segment filters returns availabilities with `n` segments per
    /// availability. It is not applicable when `booking_id` is present.
    public var segmentFilters: [SegmentFilter]?
    /// Represents a generic time range. The start and end values are
    /// represented in RFC 3339 format. Time ranges are customized to be
    /// inclusive or exclusive based on the needs of a particular endpoint.
    /// Refer to the relevant endpoint-specific documentation to determine
    /// how time ranges are handled.
    public var startAtRange: TimeRange

    public init(bookingID: String? = nil, locationID: String? = nil, segmentFilters: [SegmentFilter]? = nil, startAtRange: TimeRange) {
        self.bookingID = bookingID
        self.locationID = locationID
        self.segmentFilters = segmentFilters
        self.startAtRange = startAtRange
    }

    private enum CodingKeys: String, CodingKey {
        case bookingID = "booking_id"
        case locationID = "location_id"
        case segmentFilters = "segment_filters"
        case startAtRange = "start_at_range"
    }
}

/// Query conditions to search for availabilities of bookings.
public struct SearchAvailabilityQuery: Codable {
    /// A query filter to search for availabilities by.
    public var filter: SearchAvailabilityFilter

    public init(filter: SearchAvailabilityFilter) {
        self.filter = filter
    }
}

/// Example:
///
/// {
///   "query" : {
///     "filter" : {
///       "location_id" : "LEQHH0YY8B42M",
///       "segment_filters" : [
///         {
///           "service_variation_id" : "RU3PBTZTK7DXZDQFCJHOK2MC",
///           "team_member_id_filter" : {
///             "any" : [
///               "TMXUrsBWWcHTt79t",
///               "TMaJcbiRqPIGZuS9"
///             ]
///           }
///         }
///       ],
///       "start_at_range" : {
///         "end_at" : "2020-11-27T13:00:00Z",
///         "start_at" : "2020-11-26T13:00:00Z"
///       }
///     }
///   }
/// }
public struct SearchAvailabilityRequest: Codable {
    /// Query conditions to search for availabilities of bookings.
    public var query: SearchAvailabilityQuery

    public init(query: SearchAvailabilityQuery) {
        self.query = query
    }
}

/// Example:
///
/// {
///   "availabilities" : [
///     {
///       "appointment_segments" : [
///         {
///           "duration_minutes" : 60,
///           "service_variation_id" : "RU3PBTZTK7DXZDQFCJHOK2MC",
///           "service_variation_version" : 1599775456731,
///           "team_member_id" : "TMXUrsBWWcHTt79t"
///         }
///       ],
///       "location_id" : "LEQHH0YY8B42M",
///       "start_at" : "2020-11-26T13:00:00Z"
///     },
///     {
///       "appointment_segments" : [
///         {
///           "duration_minutes" : 60,
///           "service_variation_id" : "RU3PBTZTK7DXZDQFCJHOK2MC",
///           "service_variation_version" : 1599775456731,
///           "team_member_id" : "TMXUrsBWWcHTt79t"
///         }
///       ],
///       "location_id" : "LEQHH0YY8B42M",
///       "start_at" : "2020-11-26T13:30:00Z"
///     },
///     {
///       "appointment_segments" : [
///         {
///           "duration_minutes" : 60,
///           "service_variation_id" : "RU3PBTZTK7DXZDQFCJHOK2MC",
///           "service_variation_version" : 1599775456731,
///           "team_member_id" : "TMaJcbiRqPIGZuS9"
///         }
///       ],
///       "location_id" : "LEQHH0YY8B42M",
///       "start_at" : "2020-11-26T14:00:00Z"
///     },
///     {
///       "appointment_segments" : [
///         {
///           "duration_minutes" : 60,
///           "service_variation_id" : "RU3PBTZTK7DXZDQFCJHOK2MC",
///           "service_variation_version" : 1599775456731,
///           "team_member_id" : "TMaJcbiRqPIGZuS9"
///         }
///       ],
///       "location_id" : "LEQHH0YY8B42M",
///       "start_at" : "2020-11-26T14:30:00Z"
///     },
///     {
///       "appointment_segments" : [
///         {
///           "duration_minutes" : 60,
///           "service_variation_id" : "RU3PBTZTK7DXZDQFCJHOK2MC",
///           "service_variation_version" : 1599775456731,
///           "team_member_id" : "TMaJcbiRqPIGZuS9"
///         }
///       ],
///       "location_id" : "LEQHH0YY8B42M",
///       "start_at" : "2020-11-26T15:00:00Z"
///     },
///     {
///       "appointment_segments" : [
///         {
///           "duration_minutes" : 60,
///           "service_variation_id" : "RU3PBTZTK7DXZDQFCJHOK2MC",
///           "service_variation_version" : 1599775456731,
///           "team_member_id" : "TMaJcbiRqPIGZuS9"
///         }
///       ],
///       "location_id" : "LEQHH0YY8B42M",
///       "start_at" : "2020-11-26T15:30:00Z"
///     },
///     {
///       "appointment_segments" : [
///         {
///           "duration_minutes" : 60,
///           "service_variation_id" : "RU3PBTZTK7DXZDQFCJHOK2MC",
///           "service_variation_version" : 1599775456731,
///           "team_member_id" : "TMaJcbiRqPIGZuS9"
///         }
///       ],
///       "location_id" : "LEQHH0YY8B42M",
///       "start_at" : "2020-11-26T16:00:00Z"
///     },
///     {
///       "appointment_segments" : [
///         {
///           "duration_minutes" : 60,
///           "service_variation_id" : "RU3PBTZTK7DXZDQFCJHOK2MC",
///           "service_variation_version" : 1599775456731,
///           "team_member_id" : "TMXUrsBWWcHTt79t"
///         }
///       ],
///       "location_id" : "LEQHH0YY8B42M",
///       "start_at" : "2020-11-27T09:00:00Z"
///     },
///     {
///       "appointment_segments" : [
///         {
///           "duration_minutes" : 60,
///           "service_variation_id" : "RU3PBTZTK7DXZDQFCJHOK2MC",
///           "service_variation_version" : 1599775456731,
///           "team_member_id" : "TMaJcbiRqPIGZuS9"
///         }
///       ],
///       "location_id" : "LEQHH0YY8B42M",
///       "start_at" : "2020-11-27T09:30:00Z"
///     },
///     {
///       "appointment_segments" : [
///         {
///           "duration_minutes" : 60,
///           "service_variation_id" : "RU3PBTZTK7DXZDQFCJHOK2MC",
///           "service_variation_version" : 1599775456731,
///           "team_member_id" : "TMXUrsBWWcHTt79t"
///         }
///       ],
///       "location_id" : "LEQHH0YY8B42M",
///       "start_at" : "2020-11-27T10:00:00Z"
///     },
///     {
///       "appointment_segments" : [
///         {
///           "duration_minutes" : 60,
///           "service_variation_id" : "RU3PBTZTK7DXZDQFCJHOK2MC",
///           "service_variation_version" : 1599775456731,
///           "team_member_id" : "TMXUrsBWWcHTt79t"
///         }
///       ],
///       "location_id" : "LEQHH0YY8B42M",
///       "start_at" : "2020-11-27T10:30:00Z"
///     },
///     {
///       "appointment_segments" : [
///         {
///           "duration_minutes" : 60,
///           "service_variation_id" : "RU3PBTZTK7DXZDQFCJHOK2MC",
///           "service_variation_version" : 1599775456731,
///           "team_member_id" : "TMXUrsBWWcHTt79t"
///         }
///       ],
///       "location_id" : "LEQHH0YY8B42M",
///       "start_at" : "2020-11-27T11:00:00Z"
///     },
///     {
///       "appointment_segments" : [
///         {
///           "duration_minutes" : 60,
///           "service_variation_id" : "RU3PBTZTK7DXZDQFCJHOK2MC",
///           "service_variation_version" : 1599775456731,
///           "team_member_id" : "TMaJcbiRqPIGZuS9"
///         }
///       ],
///       "location_id" : "LEQHH0YY8B42M",
///       "start_at" : "2020-11-27T11:30:00Z"
///     },
///     {
///       "appointment_segments" : [
///         {
///           "duration_minutes" : 60,
///           "service_variation_id" : "RU3PBTZTK7DXZDQFCJHOK2MC",
///           "service_variation_version" : 1599775456731,
///           "team_member_id" : "TMaJcbiRqPIGZuS9"
///         }
///       ],
///       "location_id" : "LEQHH0YY8B42M",
///       "start_at" : "2020-11-27T12:00:00Z"
///     },
///     {
///       "appointment_segments" : [
///         {
///           "duration_minutes" : 60,
///           "service_variation_id" : "RU3PBTZTK7DXZDQFCJHOK2MC",
///           "service_variation_version" : 1599775456731,
///           "team_member_id" : "TMaJcbiRqPIGZuS9"
///         }
///       ],
///       "location_id" : "LEQHH0YY8B42M",
///       "start_at" : "2020-11-27T12:30:00Z"
///     },
///     {
///       "appointment_segments" : [
///         {
///           "duration_minutes" : 60,
///           "service_variation_id" : "RU3PBTZTK7DXZDQFCJHOK2MC",
///           "service_variation_version" : 1599775456731,
///           "team_member_id" : "TMXUrsBWWcHTt79t"
///         }
///       ],
///       "location_id" : "LEQHH0YY8B42M",
///       "start_at" : "2020-11-27T13:00:00Z"
///     },
///     {
///       "appointment_segments" : [
///         {
///           "duration_minutes" : 60,
///           "service_variation_id" : "RU3PBTZTK7DXZDQFCJHOK2MC",
///           "service_variation_version" : 1599775456731,
///           "team_member_id" : "TMXUrsBWWcHTt79t"
///         }
///       ],
///       "location_id" : "LEQHH0YY8B42M",
///       "start_at" : "2020-11-27T13:30:00Z"
///     },
///     {
///       "appointment_segments" : [
///         {
///           "duration_minutes" : 60,
///           "service_variation_id" : "RU3PBTZTK7DXZDQFCJHOK2MC",
///           "service_variation_version" : 1599775456731,
///           "team_member_id" : "TMaJcbiRqPIGZuS9"
///         }
///       ],
///       "location_id" : "LEQHH0YY8B42M",
///       "start_at" : "2020-11-27T14:00:00Z"
///     }
///   ],
///   "errors" : [
/// 
///   ]
/// }
public struct SearchAvailabilityResponse: Codable {
    /// List of slots available for booking.
    public var availabilities: [Availability]?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(availabilities: [Availability]? = nil, errors: [Error]? = nil) {
        self.availabilities = availabilities
        self.errors = errors
    }
}

/// Defines the request body for the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items) endpoint.
///
/// Example:
///
/// {
///   "request_body" : {
///     "category_ids" : [
///       "WINE_CATEGORY_ID"
///     ],
///     "custom_attribute_filters" : [
///       {
///         "bool_filter" : true,
///         "custom_attribute_definition_id" : "VEGAN_DEFINITION_ID"
///       },
///       {
///         "custom_attribute_definition_id" : "BRAND_DEFINITION_ID",
///         "string_filter" : "Dark Horse"
///       },
///       {
///         "key" : "VINTAGE",
///         "number_filter" : {
///           "max" : 2018,
///           "min" : 2017
///         }
///       },
///       {
///         "custom_attribute_definition_id" : "VARIETAL_DEFINITION_ID",
///         "selection_ids_filter" : "MERLOT_SELECTION_ID"
///       }
///     ],
///     "enabled_location_ids" : [
///       "ATL_LOCATION_ID"
///     ],
///     "limit" : 100,
///     "product_types" : [
///       "REGULAR"
///     ],
///     "sort_order" : "ASC",
///     "stock_levels" : [
///       "OUT",
///       "LOW"
///     ],
///     "text_filter" : "red"
///   }
/// }
public struct SearchCatalogItemsRequest: Codable {
    /// The category id query expression to return items containing the specified category IDs.
    public var categoryIDs: [String]?
    /// The pagination token, returned in the previous response, used to fetch the next batch of pending results.
    public var cursor: String?
    /// The customer-attribute filter to return items or item variations matching the specified
    /// custom attribute expressions. A maximum number of 10 custom attribute expressions are supported in
    /// a single call to the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items) endpoint.
    public var customAttributeFilters: [CustomAttributeFilter]?
    /// The enabled-location query expression to return items and item variations having specified enabled locations.
    public var enabledLocationIDs: [String]?
    /// The maximum number of results to return per page. The default value is 100.
    public var limit: Int?
    /// The product types query expression to return items or item variations having the specified product types.
    public var productTypes: [String]?
    /// The order to sort the results by item names. The default sort order is ascending (`ASC`).
    public var sortOrder: String?
    /// The stock-level query expression to return item variations with the specified stock levels.
    public var stockLevels: [String]?
    /// The text filter expression to return items or item variations containing specified text in
    /// the `name`, `description`, or `abbreviation` attribute value of an item, or in
    /// the `name`, `sku`, or `upc` attribute value of an item variation.
    public var textFilter: String?

    public init(categoryIDs: [String]? = nil, cursor: String? = nil, customAttributeFilters: [CustomAttributeFilter]? = nil, enabledLocationIDs: [String]? = nil, limit: Int? = nil, productTypes: [String]? = nil, sortOrder: String? = nil, stockLevels: [String]? = nil, textFilter: String? = nil) {
        self.categoryIDs = categoryIDs
        self.cursor = cursor
        self.customAttributeFilters = customAttributeFilters
        self.enabledLocationIDs = enabledLocationIDs
        self.limit = limit
        self.productTypes = productTypes
        self.sortOrder = sortOrder
        self.stockLevels = stockLevels
        self.textFilter = textFilter
    }

    private enum CodingKeys: String, CodingKey {
        case categoryIDs = "category_ids"
        case cursor
        case customAttributeFilters = "custom_attribute_filters"
        case enabledLocationIDs = "enabled_location_ids"
        case limit
        case productTypes = "product_types"
        case sortOrder = "sort_order"
        case stockLevels = "stock_levels"
        case textFilter = "text_filter"
    }
}

/// Defines supported stock levels of the item inventory.
public enum SearchCatalogItemsRequestStockLevel: String, Codable, CaseIterable {
    case out = "OUT"
    case low = "LOW"
}

/// Defines the response body returned from the [SearchCatalogItems](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-items) endpoint.
///
/// Example:
///
/// {
///   "items" : [
///     {
///       "custom_attribute_values" : {
///         "BRAND" : {
///           "custom_attribute_definition_id" : "BRAND_DEFINITION_ID",
///           "key" : "BRAND",
///           "name" : "Brand",
///           "string_value" : "Dark Horse",
///           "type" : "STRING"
///         },
///         "VARIETAL" : {
///           "custom_attribute_definition_id" : "VARIETAL_DEFINITION_ID",
///           "key" : "VARIETAL",
///           "name" : "Varietal",
///           "selection_uid_values" : [
///             "MERLOT_SELECTION_ID",
///             null
///           ],
///           "type" : "SELECTION"
///         },
///         "VINTAGE" : {
///           "custom_attribute_definition_id" : "EI7IJQDUKYSHULREPIPH6HNU",
///           "key" : "VINTAGE",
///           "name" : "Vintage",
///           "number_value" : 2018,
///           "type" : "NUMBER"
///         }
///       },
///       "id" : "GPOKJPTV2KDLVKCADJ7I77EZ",
///       "is_deleted" : false,
///       "item_data" : {
///         "description" : "A nice red wine",
///         "name" : "Dark Horse Merlot 2018",
///         "product_type" : "REGULAR",
///         "variations" : [
///           {
///             "id" : "VBJNPHCOKDFECR6VU25WRJUD",
///             "is_deleted" : false,
///             "item_variation_data" : {
///               "item_id" : "GPOKJPTV2KDLVKCADJ7I77EZ",
///               "name" : "750 mL",
///               "ordinal" : 0,
///               "price_money" : {
///                 "amount" : 1000,
///                 "currency" : "USD"
///               },
///               "pricing_type" : "FIXED_PRICING"
///             },
///             "present_at_all_locations" : true,
///             "type" : "ITEM_VARIATION",
///             "updated_at" : "2020-06-18T17:55:56.646Z",
///             "version" : 1592502956646
///           }
///         ]
///       },
///       "present_at_all_locations" : true,
///       "type" : "ITEM",
///       "updated_at" : "2020-06-18T17:55:56.646Z",
///       "version" : 1592502956646
///     }
///   ],
///   "matched_variation_ids" : [
///     "VBJNPHCOKDFECR6VU25WRJUD"
///   ]
/// }
public struct SearchCatalogItemsResponse: Codable {
    /// Pagination token used in the next request to return more of the search result.
    public var cursor: String?
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Returned items matching the specified query expressions.
    public var items: [CatalogObject]?
    /// Ids of returned item variations matching the specified query expression.
    public var matchedVariationIDs: [String]?

    public init(cursor: String? = nil, errors: [Error]? = nil, items: [CatalogObject]? = nil, matchedVariationIDs: [String]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.items = items
        self.matchedVariationIDs = matchedVariationIDs
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case errors
        case items
        case matchedVariationIDs = "matched_variation_ids"
    }
}

/// Example:
///
/// {
///   "request_body" : {
///     "limit" : 100,
///     "object_types" : [
///       "ITEM"
///     ],
///     "query" : {
///       "prefix_query" : {
///         "attribute_name" : "name",
///         "attribute_prefix" : "tea"
///       }
///     }
///   }
/// }
public struct SearchCatalogObjectsRequest: Codable {
    /// Return objects modified after this [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates), in RFC 3339
    /// format, e.g., `2016-09-04T23:59:33.123Z`. The timestamp is exclusive - objects with a
    /// timestamp equal to `begin_time` will not be included in the response.
    public var beginTime: String?
    /// The pagination cursor returned in the previous response. Leave unset for an initial request.
    /// See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
    public var cursor: String?
    /// If `true`, deleted objects will be included in the results. Deleted objects will have their
    /// `is_deleted` field set to `true`.
    public var isIncludeDeletedObjects: Bool?
    /// If `true`, the response will include additional objects that are related to the
    /// requested object, as follows:
    /// 
    /// If a CatalogItem is returned in the object field of the response,
    /// its associated CatalogCategory, CatalogTax objects,
    /// CatalogImage objects and CatalogModifierList objects
    /// will be included in the `related_objects` field of the response.
    /// 
    /// If a CatalogItemVariation is returned in the object field of the
    /// response, its parent CatalogItem will be included in the `related_objects` field of
    /// the response.
    public var isIncludeRelatedObjects: Bool?
    /// A limit on the number of results to be returned in a single page. The limit is advisory -
    /// the implementation may return more or fewer results. If the supplied limit is negative, zero, or
    /// is higher than the maximum limit of 1,000, it will be ignored.
    public var limit: Int?
    /// The desired set of object types to appear in the search results.
    public var objectTypes: [String]?
    /// A query composed of one or more different types of filters to narrow the scope of targeted objects when calling the `SearchCatalogObjects` endpoint.
    /// 
    /// Although a query can have multiple filters, only certain query types can be combined per call to [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects).
    /// Any combination of the following types may be used together:
    /// - [exact_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryExact)
    /// - [prefix_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryPrefix)
    /// - [range_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryRange)
    /// - [sorted_attribute_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQuerySortedAttribute)
    /// - [text_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryText)
    /// All other query types cannot be combined with any others.
    /// 
    /// When a query filter is based on an attribute, the attribute must be searchable.
    /// Searchable attributes are listed as follows, along their parent types that can be searched for with applicable query filters.
    /// 
    /// * Searchable attribute and objects queryable by searchable attributes **
    /// - `name`:  `CatalogItem`, `CatalogItemVariation`, `CatalogCategory`, `CatalogTax`, `CatalogDiscount`, `CatalogModifier`, 'CatalogModifierList`, `CatalogItemOption`, `CatalogItemOptionValue`
    /// - `description`: `CatalogItem`, `CatalogItemOptionValue`
    /// - `abbreviation`: `CatalogItem`
    /// - `upc`: `CatalogItemVariation`
    /// - `sku`: `CatalogItemVariation`
    /// - `caption`: `CatalogImage`
    /// - `display_name`: `CatalogItemOption`
    /// 
    /// For example, to search for [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) objects by searchable attributes, you can use
    /// the `"name"`, `"description"`, or `"abbreviation"` attribute in an applicable query filter.
    public var query: CatalogQuery?

    public init(beginTime: String? = nil, cursor: String? = nil, isIncludeDeletedObjects: Bool? = nil, isIncludeRelatedObjects: Bool? = nil, limit: Int? = nil, objectTypes: [String]? = nil, query: CatalogQuery? = nil) {
        self.beginTime = beginTime
        self.cursor = cursor
        self.isIncludeDeletedObjects = isIncludeDeletedObjects
        self.isIncludeRelatedObjects = isIncludeRelatedObjects
        self.limit = limit
        self.objectTypes = objectTypes
        self.query = query
    }

    private enum CodingKeys: String, CodingKey {
        case beginTime = "begin_time"
        case cursor
        case isIncludeDeletedObjects = "include_deleted_objects"
        case isIncludeRelatedObjects = "include_related_objects"
        case limit
        case objectTypes = "object_types"
        case query
    }
}

/// Example:
///
/// {
///   "objects" : [
///     {
///       "id" : "X5DZ5NWWAQ44CKBLKIFQGOWK",
///       "is_deleted" : false,
///       "item_data" : {
///         "category_id" : "E7CLE5RZZ744BHWVQQEAHI2C",
///         "description" : "A delicious blend of black tea.",
///         "name" : "Tea - Black",
///         "product_type" : "REGULAR",
///         "tax_ids" : [
///           "ZXITPM6RWHZ7GZ7EIP3YKECM"
///         ],
///         "variations" : [
///           {
///             "id" : "5GSZPX6EU7MM75S57OONG3V5",
///             "is_deleted" : false,
///             "item_variation_data" : {
///               "item_id" : "X5DZ5NWWAQ44CKBLKIFQGOWK",
///               "name" : "Regular",
///               "ordinal" : 1,
///               "price_money" : {
///                 "amount" : 150,
///                 "currency" : "USD"
///               },
///               "pricing_type" : "FIXED_PRICING"
///             },
///             "present_at_all_locations" : true,
///             "type" : "ITEM_VARIATION",
///             "updated_at" : "2017-10-26T15:27:31.626Z",
///             "version" : 1509031651626
///           },
///           {
///             "id" : "XVLBN7DU6JTWHJTG5F265B43",
///             "is_deleted" : false,
///             "item_variation_data" : {
///               "item_id" : "X5DZ5NWWAQ44CKBLKIFQGOWK",
///               "name" : "Large",
///               "ordinal" : 2,
///               "price_money" : {
///                 "amount" : 225,
///                 "currency" : "USD"
///               },
///               "pricing_type" : "FIXED_PRICING"
///             },
///             "present_at_all_locations" : true,
///             "type" : "ITEM_VARIATION",
///             "updated_at" : "2017-10-26T15:27:31.626Z",
///             "version" : 1509031651626
///           }
///         ],
///         "visibility" : "PRIVATE"
///       },
///       "present_at_all_locations" : true,
///       "type" : "ITEM",
///       "updated_at" : "2017-10-26T15:41:32.337Z",
///       "version" : 1509032492337
///     },
///     {
///       "id" : "NNNEM3LA656Q46NXLWCNI7S5",
///       "is_deleted" : false,
///       "item_data" : {
///         "category_id" : "E7CLE5RZZ744BHWVQQEAHI2C",
///         "description" : "Relaxing green herbal tea.",
///         "name" : "Tea - Green",
///         "product_type" : "REGULAR",
///         "tax_ids" : [
///           "ZXITPM6RWHZ7GZ7EIP3YKECM"
///         ],
///         "variations" : [
///           {
///             "id" : "FHYBVIA6NVBCSOVETA62WEA4",
///             "is_deleted" : false,
///             "item_variation_data" : {
///               "item_id" : "NNNEM3LA656Q46NXLWCNI7S5",
///               "name" : "Regular",
///               "ordinal" : 1,
///               "price_money" : {
///                 "amount" : 150,
///                 "currency" : "USD"
///               },
///               "pricing_type" : "FIXED_PRICING"
///             },
///             "present_at_all_locations" : true,
///             "type" : "ITEM_VARIATION",
///             "updated_at" : "2017-10-26T15:29:00.524Z",
///             "version" : 1509031740524
///           }
///         ],
///         "visibility" : "PRIVATE"
///       },
///       "present_at_all_locations" : true,
///       "type" : "ITEM",
///       "updated_at" : "2017-10-26T15:41:23.232Z",
///       "version" : 1509032483232
///     }
///   ]
/// }
public struct SearchCatalogObjectsResponse: Codable {
    /// The pagination cursor to be used in a subsequent request. If unset, this is the final response.
    /// See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
    public var cursor: String?
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// When the associated product catalog was last updated. Will
    /// match the value for `end_time` or `cursor` if either field is included in the `SearchCatalog` request.
    public var latestTime: String?
    /// The CatalogObjects returned.
    public var objects: [CatalogObject]?
    /// A list of CatalogObjects referenced by the objects in the `objects` field.
    public var relatedObjects: [CatalogObject]?

    public init(cursor: String? = nil, errors: [Error]? = nil, latestTime: String? = nil, objects: [CatalogObject]? = nil, relatedObjects: [CatalogObject]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.latestTime = latestTime
        self.objects = objects
        self.relatedObjects = relatedObjects
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case errors
        case latestTime = "latest_time"
        case objects
        case relatedObjects = "related_objects"
    }
}

/// Defines the fields that are included in the request body of a request to the
/// `SearchCustomers` endpoint.
///
/// Example:
///
/// {
///   "request_body" : {
///     "limit" : 2,
///     "query" : {
///       "filter" : {
///         "created_at" : {
///           "end_at" : "2018-02-01T00:00:00-00:00",
///           "start_at" : "2018-01-01T00:00:00-00:00"
///         },
///         "creation_source" : {
///           "rule" : "INCLUDE",
///           "values" : [
///             "THIRD_PARTY"
///           ]
///         },
///         "email_address" : {
///           "fuzzy" : "example.com"
///         },
///         "group_ids" : {
///           "all" : [
///             "545AXB44B4XXWMVQ4W8SBT3HHF"
///           ]
///         }
///       },
///       "sort" : {
///         "field" : "CREATED_AT",
///         "order" : "ASC"
///       }
///     }
///   }
/// }
public struct SearchCustomersRequest: Codable {
    /// Include the pagination cursor in subsequent calls to this endpoint to retrieve
    /// the next set of results associated with the original query.
    /// 
    /// For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
    public var cursor: String?
    /// The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results.
    /// The limit is ignored if it is less than the minimum or greater than the maximum value. The default value is 100.
    /// 
    /// For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
    public var limit: Int?
    /// Represents a query (including filtering criteria, sorting criteria, or both) used to search
    /// for customer profiles.
    public var query: CustomerQuery?

    public init(cursor: String? = nil, limit: Int? = nil, query: CustomerQuery? = nil) {
        self.cursor = cursor
        self.limit = limit
        self.query = query
    }
}

/// Defines the fields that are included in the response body of
/// a request to the `SearchCustomers` endpoint.
/// 
/// Either `errors` or `customers` is present in a given response (never both).
///
/// Example:
///
/// {
///   "cursor" : "9dpS093Uy12AzeE",
///   "customers" : [
///     {
///       "address" : {
///         "address_line_1" : "505 Electric Ave",
///         "address_line_2" : "Suite 600",
///         "administrative_district_level_1" : "NY",
///         "country" : "US",
///         "locality" : "New York",
///         "postal_code" : "10003"
///       },
///       "created_at" : "2018-01-23T20:21:54.859Z",
///       "creation_source" : "DIRECTORY",
///       "email_address" : "james.bond@example.com",
///       "family_name" : "Bond",
///       "given_name" : "James",
///       "group_ids" : [
///         "545AXB44B4XXWMVQ4W8SBT3HHF"
///       ],
///       "id" : "JDKYHBWT1D4F8MFH63DBMEN8Y4",
///       "phone_number" : "1-212-555-4250",
///       "preferences" : {
///         "email_unsubscribed" : false
///       },
///       "reference_id" : "YOUR_REFERENCE_ID_2",
///       "segment_ids" : [
///         "1KB9JE5EGJXCW.REACHABLE"
///       ],
///       "updated_at" : "2020-04-20T10:02:43.083Z",
///       "version" : 7
///     },
///     {
///       "address" : {
///         "address_line_1" : "500 Electric Ave",
///         "address_line_2" : "Suite 600",
///         "administrative_district_level_1" : "NY",
///         "country" : "US",
///         "locality" : "New York",
///         "postal_code" : "10003"
///       },
///       "created_at" : "2018-01-30T14:10:54.859Z",
///       "creation_source" : "THIRD_PARTY",
///       "email_address" : "amelia.earhart@example.com",
///       "family_name" : "Earhart",
///       "given_name" : "Amelia",
///       "group_ids" : [
///         "545AXB44B4XXWMVQ4W8SBT3HHF"
///       ],
///       "id" : "JDKYHBWT1D4F8MFH63DBMEN8Y4",
///       "note" : "a customer",
///       "phone_number" : "1-212-555-4240",
///       "preferences" : {
///         "email_unsubscribed" : false
///       },
///       "reference_id" : "YOUR_REFERENCE_ID_1",
///       "segment_ids" : [
///         "1KB9JE5EGJXCW.REACHABLE"
///       ],
///       "updated_at" : "2018-03-08T18:25:21.342Z",
///       "version" : 1
///     }
///   ]
/// }
public struct SearchCustomersResponse: Codable {
    /// A pagination cursor that can be used during subsequent calls
    /// to `SearchCustomers` to retrieve the next set of results associated
    /// with the original query. Pagination cursors are only present when
    /// a request succeeds and additional results are available.
    /// 
    /// For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
    public var cursor: String?
    /// An array of `Customer` objects that match a query.
    public var customers: [Customer]?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(cursor: String? = nil, customers: [Customer]? = nil, errors: [Error]? = nil) {
        self.cursor = cursor
        self.customers = customers
        self.errors = errors
    }
}

/// Describes a `SearchInvoices` request.
///
/// Example:
///
/// {
///   "request_body" : {
///     "query" : {
///       "filter" : {
///         "customer_ids" : [
///           "JDKYHBWT1D4F8MFH63DBMEN8Y4"
///         ],
///         "location_ids" : [
///           "ES0RJRZYEC39A"
///         ]
///       },
///       "limit" : 100,
///       "sort" : {
///         "field" : "INVOICE_SORT_DATE",
///         "order" : "DESC"
///       }
///     }
///   }
/// }
public struct SearchInvoicesRequest: Codable {
    /// A pagination cursor returned by a previous call to this endpoint.
    /// Provide this cursor to retrieve the next set of results for your original query.
    /// 
    /// For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
    public var cursor: String?
    /// The maximum number of invoices to return (200 is the maximum `limit`).
    /// If not provided, the server uses a default limit of 100 invoices.
    public var limit: Int?
    /// Describes query criteria for searching invoices.
    public var query: InvoiceQuery

    public init(cursor: String? = nil, limit: Int? = nil, query: InvoiceQuery) {
        self.cursor = cursor
        self.limit = limit
        self.query = query
    }
}

/// Describes a `SearchInvoices` response.
///
/// Example:
///
/// {
///   "cursor" : "ChoIDhIWVm54ZVRhLXhySFBOejBBM2xJb2daUQoFCI4IGAE",
///   "invoices" : [
///     {
///       "accepted_payment_methods" : {
///         "bank_account" : false,
///         "card" : true,
///         "square_gift_card" : false
///       },
///       "created_at" : "2020-06-18T17:45:13Z",
///       "custom_fields" : [
///         {
///           "label" : "Event Reference Number",
///           "placement" : "ABOVE_LINE_ITEMS",
///           "value" : "Ref. #1234"
///         },
///         {
///           "label" : "Terms of Service",
///           "placement" : "BELOW_LINE_ITEMS",
///           "value" : "The terms of service are..."
///         }
///       ],
///       "delivery_method" : "EMAIL",
///       "description" : "We appreciate your business!",
///       "id" : "inv:0-ChCHu2mZEabLeeHahQnXDjZQECY",
///       "invoice_number" : "inv-100",
///       "location_id" : "ES0RJRZYEC39A",
///       "order_id" : "CAISENgvlJ6jLWAzERDzjyHVybY",
///       "payment_requests" : [
///         {
///           "automatic_payment_source" : "NONE",
///           "computed_amount_money" : {
///             "amount" : 10000,
///             "currency" : "USD"
///           },
///           "due_date" : "2030-01-24",
///           "reminders" : [
///             {
///               "message" : "Your invoice is due tomorrow",
///               "relative_scheduled_days" : -1,
///               "status" : "PENDING",
///               "uid" : "beebd363-e47f-4075-8785-c235aaa7df11"
///             }
///           ],
///           "request_type" : "BALANCE",
///           "tipping_enabled" : true,
///           "total_completed_amount_money" : {
///             "amount" : 0,
///             "currency" : "USD"
///           },
///           "uid" : "2da7964f-f3d2-4f43-81e8-5aa220bf3355"
///         }
///       ],
///       "primary_recipient" : {
///         "customer_id" : "JDKYHBWT1D4F8MFH63DBMEN8Y4",
///         "email_address" : "Amelia.Earhart@example.com",
///         "family_name" : "Earhart",
///         "given_name" : "Amelia",
///         "phone_number" : "1-212-555-4240"
///       },
///       "scheduled_at" : "2030-01-13T10:00:00Z",
///       "status" : "DRAFT",
///       "timezone" : "America\/Los_Angeles",
///       "title" : "Event Planning Services",
///       "updated_at" : "2020-06-18T17:45:13Z",
///       "version" : 0
///     },
///     {
///       "accepted_payment_methods" : {
///         "bank_account" : false,
///         "card" : true,
///         "square_gift_card" : true
///       },
///       "created_at" : "2021-01-23T15:29:12Z",
///       "delivery_method" : "EMAIL",
///       "id" : "inv:0-ChC366qAfskpGrBI_1bozs9mEA3",
///       "invoice_number" : "inv-455",
///       "location_id" : "ES0RJRZYEC39A",
///       "next_payment_amount_money" : {
///         "amount" : 3000,
///         "currency" : "USD"
///       },
///       "order_id" : "a65jnS8NXbfprvGJzY9F4fQTuaB",
///       "payment_requests" : [
///         {
///           "automatic_payment_source" : "CARD_ON_FILE",
///           "card_id" : "ccof:IkWfpLj4tNHMyFii3GB",
///           "computed_amount_money" : {
///             "amount" : 1000,
///             "currency" : "USD"
///           },
///           "due_date" : "2021-01-23",
///           "percentage_requested" : "25",
///           "request_type" : "DEPOSIT",
///           "tipping_enabled" : false,
///           "total_completed_amount_money" : {
///             "amount" : 1000,
///             "currency" : "USD"
///           },
///           "uid" : "66c3bdfd-5090-4ff9-a8a0-c1e1a2ffa176"
///         },
///         {
///           "automatic_payment_source" : "CARD_ON_FILE",
///           "card_id" : "ccof:IkWfpLj4tNHMyFii3GB",
///           "computed_amount_money" : {
///             "amount" : 3000,
///             "currency" : "USD"
///           },
///           "due_date" : "2021-06-15",
///           "request_type" : "BALANCE",
///           "tipping_enabled" : false,
///           "total_completed_amount_money" : {
///             "amount" : 0,
///             "currency" : "USD"
///           },
///           "uid" : "120c5e18-4f80-4f6b-b159-774cb9bf8f99"
///         }
///       ],
///       "primary_recipient" : {
///         "customer_id" : "JDKYHBWT1D4F8MFH63DBMEN8Y4",
///         "email_address" : "Amelia.Earhart@example.com",
///         "family_name" : "Earhart",
///         "given_name" : "Amelia",
///         "phone_number" : "1-212-555-4240"
///       },
///       "public_url" : "https:\/\/squareup.com\/pay-invoice\/h9sfsfTGTSnYEhISUDBhEQ",
///       "status" : "PARTIALLY_PAID",
///       "timezone" : "America\/Los_Angeles",
///       "updated_at" : "2021-01-23T15:29:56Z",
///       "version" : 3
///     }
///   ]
/// }
public struct SearchInvoicesResponse: Codable {
    /// When a response is truncated, it includes a cursor that you can use in a
    /// subsequent request to fetch the next set of invoices. If empty, this is the final
    /// response.
    /// For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
    public var cursor: String?
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// The list of invoices returned by the search.
    public var invoices: [Invoice]?

    public init(cursor: String? = nil, errors: [Error]? = nil, invoices: [Invoice]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.invoices = invoices
    }
}

/// A request to search for loyalty accounts.
///
/// Example:
///
/// {
///   "request_body" : {
///     "limit" : 10,
///     "query" : {
///       "mappings" : [
///         {
///           "phone_number" : "+14155551234"
///         }
///       ]
///     }
///   }
/// }
public struct SearchLoyaltyAccountsRequest: Codable {
    /// A pagination cursor returned by a previous call to
    /// this endpoint. Provide this to retrieve the next set of
    /// results for the original query.
    /// 
    /// For more information,
    /// see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
    public var cursor: String?
    /// The maximum number of results to include in the response.
    public var limit: Int?
    /// The search criteria for the loyalty accounts.
    public var query: SearchLoyaltyAccountsRequestLoyaltyAccountQuery?

    public init(cursor: String? = nil, limit: Int? = nil, query: SearchLoyaltyAccountsRequestLoyaltyAccountQuery? = nil) {
        self.cursor = cursor
        self.limit = limit
        self.query = query
    }
}

/// The search criteria for the loyalty accounts.
public struct SearchLoyaltyAccountsRequestLoyaltyAccountQuery: Codable {
    /// The set of customer IDs to use in the loyalty account search.
    /// 
    /// This cannot be combined with `mappings`.
    /// 
    /// Max: 30 customer IDs
    public var customerIDs: [String]?
    /// The set of mappings to use in the loyalty account search.
    /// 
    /// This cannot be combined with `customer_ids`.
    /// 
    /// Max: 30 mappings
    public var mappings: [LoyaltyAccountMapping]?

    public init(customerIDs: [String]? = nil, mappings: [LoyaltyAccountMapping]? = nil) {
        self.customerIDs = customerIDs
        self.mappings = mappings
    }

    private enum CodingKeys: String, CodingKey {
        case customerIDs = "customer_ids"
        case mappings
    }
}

/// A response that includes loyalty accounts that satisfy the search criteria.
///
/// Example:
///
/// {
///   "loyalty_accounts" : [
///     {
///       "balance" : 10,
///       "created_at" : "2020-05-08T21:44:32Z",
///       "customer_id" : "Q8002FAM9V1EZ0ADB2T5609X6NET1H0",
///       "id" : "79b807d2-d786-46a9-933b-918028d7a8c5",
///       "lifetime_points" : 20,
///       "mapping" : {
///         "created_at" : "2020-05-08T21:44:32Z",
///         "id" : "66aaab3f-da99-49ed-8b19-b87f851c844f",
///         "phone_number" : "+14155551234"
///       },
///       "program_id" : "d619f755-2d17-41f3-990d-c04ecedd64dd",
///       "updated_at" : "2020-05-08T21:44:32Z"
///     }
///   ]
/// }
public struct SearchLoyaltyAccountsResponse: Codable {
    /// The pagination cursor to use in a subsequent
    /// request. If empty, this is the final response.
    /// For more information,
    /// see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
    public var cursor: String?
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// The loyalty accounts that met the search criteria,
    /// in order of creation date.
    public var loyaltyAccounts: [LoyaltyAccount]?

    public init(cursor: String? = nil, errors: [Error]? = nil, loyaltyAccounts: [LoyaltyAccount]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.loyaltyAccounts = loyaltyAccounts
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case errors
        case loyaltyAccounts = "loyalty_accounts"
    }
}

/// A request to search for loyalty events.
///
/// Example:
///
/// {
///   "request_body" : {
///     "limit" : 30,
///     "query" : {
///       "filter" : {
///         "order_filter" : {
///           "order_id" : "PyATxhYLfsMqpVkcKJITPydgEYfZY"
///         }
///       }
///     }
///   }
/// }
public struct SearchLoyaltyEventsRequest: Codable {
    /// A pagination cursor returned by a previous call to this endpoint.
    /// Provide this to retrieve the next set of results for your original query.
    /// For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
    public var cursor: String?
    /// The maximum number of results to include in the response.
    /// The last page might contain fewer events.
    /// The default is 30 events.
    public var limit: Int?
    /// Represents a query used to search for loyalty events.
    public var query: LoyaltyEventQuery?

    public init(cursor: String? = nil, limit: Int? = nil, query: LoyaltyEventQuery? = nil) {
        self.cursor = cursor
        self.limit = limit
        self.query = query
    }
}

/// A response that contains loyalty events that satisfy the search
/// criteria, in order by the `created_at` date.
///
/// Example:
///
/// {
///   "events" : [
///     {
///       "accumulate_points" : {
///         "loyalty_program_id" : "d619f755-2d17-41f3-990d-c04ecedd64dd",
///         "order_id" : "PyATxhYLfsMqpVkcKJITPydgEYfZY",
///         "points" : 5
///       },
///       "created_at" : "2020-05-08T22:01:30Z",
///       "id" : "c27c8465-806e-36f2-b4b3-71f5887b5ba8",
///       "location_id" : "P034NEENMD09F",
///       "loyalty_account_id" : "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
///       "source" : "LOYALTY_API",
///       "type" : "ACCUMULATE_POINTS"
///     },
///     {
///       "created_at" : "2020-05-08T22:01:15Z",
///       "id" : "e4a5cbc3-a4d0-3779-98e9-e578885d9430",
///       "location_id" : "P034NEENMD09F",
///       "loyalty_account_id" : "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
///       "redeem_reward" : {
///         "loyalty_program_id" : "d619f755-2d17-41f3-990d-c04ecedd64dd",
///         "order_id" : "PyATxhYLfsMqpVkcKJITPydgEYfZY",
///         "reward_id" : "d03f79f4-815f-3500-b851-cc1e68a457f9"
///       },
///       "source" : "LOYALTY_API",
///       "type" : "REDEEM_REWARD"
///     },
///     {
///       "create_reward" : {
///         "loyalty_program_id" : "d619f755-2d17-41f3-990d-c04ecedd64dd",
///         "points" : -10,
///         "reward_id" : "d03f79f4-815f-3500-b851-cc1e68a457f9"
///       },
///       "created_at" : "2020-05-08T22:00:44Z",
///       "id" : "5e127479-0b03-3671-ab1e-15faea8b7188",
///       "loyalty_account_id" : "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
///       "source" : "LOYALTY_API",
///       "type" : "CREATE_REWARD"
///     }
///   ]
/// }
public struct SearchLoyaltyEventsResponse: Codable {
    /// The pagination cursor to be used in a subsequent
    /// request. If empty, this is the final response.
    /// For more information,
    /// see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
    public var cursor: String?
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// The loyalty events that satisfy the search criteria.
    public var events: [LoyaltyEvent]?

    public init(cursor: String? = nil, errors: [Error]? = nil, events: [LoyaltyEvent]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.events = events
    }
}

/// A request to search for loyalty rewards.
///
/// Example:
///
/// {
///   "request_body" : {
///     "limit" : 10,
///     "query" : {
///       "loyalty_account_id" : "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd"
///     }
///   }
/// }
public struct SearchLoyaltyRewardsRequest: Codable {
    /// A pagination cursor returned by a previous call to
    /// this endpoint. Provide this to retrieve the next set of
    /// results for the original query.
    /// For more information,
    /// see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
    public var cursor: String?
    /// The maximum number of results to return in the response.
    public var limit: Int?
    /// The set of search requirements.
    public var query: SearchLoyaltyRewardsRequestLoyaltyRewardQuery?

    public init(cursor: String? = nil, limit: Int? = nil, query: SearchLoyaltyRewardsRequestLoyaltyRewardQuery? = nil) {
        self.cursor = cursor
        self.limit = limit
        self.query = query
    }
}

/// The set of search requirements.
public struct SearchLoyaltyRewardsRequestLoyaltyRewardQuery: Codable {
    /// The ID of the [loyalty account](https://developer.squareup.com/reference/square_2021-08-18/objects/LoyaltyAccount) to which the loyalty reward belongs.
    public var loyaltyAccountID: String
    /// The status of the loyalty reward.
    public var status: String?

    public init(loyaltyAccountID: String, status: String? = nil) {
        self.loyaltyAccountID = loyaltyAccountID
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case loyaltyAccountID = "loyalty_account_id"
        case status
    }
}

/// A response that includes the loyalty rewards satisfying the search criteria.
///
/// Example:
///
/// {
///   "rewards" : [
///     {
///       "created_at" : "2020-05-08T22:00:44Z",
///       "id" : "d03f79f4-815f-3500-b851-cc1e68a457f9",
///       "loyalty_account_id" : "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
///       "order_id" : "PyATxhYLfsMqpVkcKJITPydgEYfZY",
///       "points" : 10,
///       "redeemed_at" : "2020-05-08T22:01:17Z",
///       "reward_tier_id" : "e1b39225-9da5-43d1-a5db-782cdd8ad94f",
///       "status" : "REDEEMED",
///       "updated_at" : "2020-05-08T22:01:17Z"
///     },
///     {
///       "created_at" : "2020-05-08T21:55:42Z",
///       "id" : "9f18ac21-233a-31c3-be77-b45840f5a810",
///       "loyalty_account_id" : "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
///       "points" : 10,
///       "redeemed_at" : "2020-05-08T21:56:00Z",
///       "reward_tier_id" : "e1b39225-9da5-43d1-a5db-782cdd8ad94f",
///       "status" : "REDEEMED",
///       "updated_at" : "2020-05-08T21:56:00Z"
///     },
///     {
///       "created_at" : "2020-05-01T21:49:54Z",
///       "id" : "a8f43ebe-2ad6-3001-bdd5-7d7c2da08943",
///       "loyalty_account_id" : "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
///       "order_id" : "5NB69ZNh3FbsOs1ox43bh1xrli6YY",
///       "points" : 10,
///       "reward_tier_id" : "e1b39225-9da5-43d1-a5db-782cdd8ad94f",
///       "status" : "DELETED",
///       "updated_at" : "2020-05-08T21:55:10Z"
///     },
///     {
///       "created_at" : "2020-05-01T20:20:37Z",
///       "id" : "a051254c-f840-3b45-8cf1-50bcd38ff92a",
///       "loyalty_account_id" : "5adcb100-07f1-4ee7-b8c6-6bb9ebc474bd",
///       "order_id" : "LQQ16znvi2VIUKPVhUfJefzr1eEZY",
///       "points" : 10,
///       "reward_tier_id" : "e1b39225-9da5-43d1-a5db-782cdd8ad94f",
///       "status" : "ISSUED",
///       "updated_at" : "2020-05-01T20:20:40Z"
///     }
///   ]
/// }
public struct SearchLoyaltyRewardsResponse: Codable {
    /// The pagination cursor to be used in a subsequent
    /// request. If empty, this is the final response.
    public var cursor: String?
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// The loyalty rewards that satisfy the search criteria.
    /// These are returned in descending order by `updated_at`.
    public var rewards: [LoyaltyReward]?

    public init(cursor: String? = nil, errors: [Error]? = nil, rewards: [LoyaltyReward]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.rewards = rewards
    }
}

/// A filter based on the order `customer_id` and any tender `customer_id`
/// associated with the order. It does not filter based on the
/// [FulfillmentRecipient](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderFulfillmentRecipient) `customer_id`.
public struct SearchOrdersCustomerFilter: Codable {
    /// A list of customer IDs to filter by.
    /// 
    /// Max: 10 customer IDs.
    public var customerIDs: [String]?

    public init(customerIDs: [String]? = nil) {
        self.customerIDs = customerIDs
    }

    private enum CodingKeys: String, CodingKey {
        case customerIDs = "customer_ids"
    }
}

/// Filter for `Order` objects based on whether their `CREATED_AT`,
/// `CLOSED_AT`, or `UPDATED_AT` timestamps fall within a specified time range.
/// You can specify the time range and which timestamp to filter for. You can filter
/// for only one time range at a time.
/// 
/// For each time range, the start time and end time are inclusive. If the end time
/// is absent, it defaults to the time of the first request for the cursor.
/// 
/// __Important:__ If you use the `DateTimeFilter` in a `SearchOrders` query,
/// you must set the `sort_field` in [OrdersSort](https://developer.squareup.com/reference/square_2021-08-18/objects/SearchOrdersSort)
/// to the same field you filter for. For example, if you set the `CLOSED_AT` field
/// in `DateTimeFilter`, you must set the `sort_field` in `SearchOrdersSort` to
/// `CLOSED_AT`. Otherwise, `SearchOrders` throws an error.
/// [Learn more about filtering orders by time range.](https://developer.squareup.com/docs/orders-api/manage-orders#important-note-on-filtering-orders-by-time-range)
public struct SearchOrdersDateTimeFilter: Codable {
    /// Represents a generic time range. The start and end values are
    /// represented in RFC 3339 format. Time ranges are customized to be
    /// inclusive or exclusive based on the needs of a particular endpoint.
    /// Refer to the relevant endpoint-specific documentation to determine
    /// how time ranges are handled.
    public var closedAt: TimeRange?
    /// Represents a generic time range. The start and end values are
    /// represented in RFC 3339 format. Time ranges are customized to be
    /// inclusive or exclusive based on the needs of a particular endpoint.
    /// Refer to the relevant endpoint-specific documentation to determine
    /// how time ranges are handled.
    public var createdAt: TimeRange?
    /// Represents a generic time range. The start and end values are
    /// represented in RFC 3339 format. Time ranges are customized to be
    /// inclusive or exclusive based on the needs of a particular endpoint.
    /// Refer to the relevant endpoint-specific documentation to determine
    /// how time ranges are handled.
    public var updatedAt: TimeRange?

    public init(closedAt: TimeRange? = nil, createdAt: TimeRange? = nil, updatedAt: TimeRange? = nil) {
        self.closedAt = closedAt
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case closedAt = "closed_at"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

/// Filtering criteria to use for a `SearchOrders` request. Multiple filters
/// are ANDed together.
public struct SearchOrdersFilter: Codable {
    /// A filter based on the order `customer_id` and any tender `customer_id`
    /// associated with the order. It does not filter based on the
    /// [FulfillmentRecipient](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderFulfillmentRecipient) `customer_id`.
    public var customerFilter: SearchOrdersCustomerFilter?
    /// Filter for `Order` objects based on whether their `CREATED_AT`,
    /// `CLOSED_AT`, or `UPDATED_AT` timestamps fall within a specified time range.
    /// You can specify the time range and which timestamp to filter for. You can filter
    /// for only one time range at a time.
    /// 
    /// For each time range, the start time and end time are inclusive. If the end time
    /// is absent, it defaults to the time of the first request for the cursor.
    /// 
    /// __Important:__ If you use the `DateTimeFilter` in a `SearchOrders` query,
    /// you must set the `sort_field` in [OrdersSort](https://developer.squareup.com/reference/square_2021-08-18/objects/SearchOrdersSort)
    /// to the same field you filter for. For example, if you set the `CLOSED_AT` field
    /// in `DateTimeFilter`, you must set the `sort_field` in `SearchOrdersSort` to
    /// `CLOSED_AT`. Otherwise, `SearchOrders` throws an error.
    /// [Learn more about filtering orders by time range.](https://developer.squareup.com/docs/orders-api/manage-orders#important-note-on-filtering-orders-by-time-range)
    public var dateTimeFilter: SearchOrdersDateTimeFilter?
    /// Filter based on [order fulfillment](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderFulfillment) information.
    public var fulfillmentFilter: SearchOrdersFulfillmentFilter?
    /// A filter based on order `source` information.
    public var sourceFilter: SearchOrdersSourceFilter?
    /// Filter by the current order `state`.
    public var stateFilter: SearchOrdersStateFilter?

    public init(customerFilter: SearchOrdersCustomerFilter? = nil, dateTimeFilter: SearchOrdersDateTimeFilter? = nil, fulfillmentFilter: SearchOrdersFulfillmentFilter? = nil, sourceFilter: SearchOrdersSourceFilter? = nil, stateFilter: SearchOrdersStateFilter? = nil) {
        self.customerFilter = customerFilter
        self.dateTimeFilter = dateTimeFilter
        self.fulfillmentFilter = fulfillmentFilter
        self.sourceFilter = sourceFilter
        self.stateFilter = stateFilter
    }

    private enum CodingKeys: String, CodingKey {
        case customerFilter = "customer_filter"
        case dateTimeFilter = "date_time_filter"
        case fulfillmentFilter = "fulfillment_filter"
        case sourceFilter = "source_filter"
        case stateFilter = "state_filter"
    }
}

/// Filter based on [order fulfillment](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderFulfillment) information.
public struct SearchOrdersFulfillmentFilter: Codable {
    /// A list of [fulfillment states](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderFulfillmentState) to filter
    /// for. The list returns orders if any of its fulfillments match any of the
    /// fulfillment states listed in this field.
    public var fulfillmentStates: [String]?
    /// A list of [fulfillment types](https://developer.squareup.com/reference/square_2021-08-18/enums/OrderFulfillmentType) to filter
    /// for. The list returns orders if any of its fulfillments match any of the fulfillment types
    /// listed in this field.
    public var fulfillmentTypes: [String]?

    public init(fulfillmentStates: [String]? = nil, fulfillmentTypes: [String]? = nil) {
        self.fulfillmentStates = fulfillmentStates
        self.fulfillmentTypes = fulfillmentTypes
    }

    private enum CodingKeys: String, CodingKey {
        case fulfillmentStates = "fulfillment_states"
        case fulfillmentTypes = "fulfillment_types"
    }
}

/// Contains query criteria for the search.
public struct SearchOrdersQuery: Codable {
    /// Filtering criteria to use for a `SearchOrders` request. Multiple filters
    /// are ANDed together.
    public var filter: SearchOrdersFilter?
    /// Sorting criteria for a `SearchOrders` request. Results can only be sorted
    /// by a timestamp field.
    public var sort: SearchOrdersSort?

    public init(filter: SearchOrdersFilter? = nil, sort: SearchOrdersSort? = nil) {
        self.filter = filter
        self.sort = sort
    }
}

/// The request does not have any required fields. When given no query criteria,
/// `SearchOrders` returns all results for all of the seller's locations. When retrieving additional
/// pages using a `cursor`, the `query` must be equal to the `query` used to retrieve the first page of
/// results.
///
/// Example:
///
/// {
///   "request_body" : {
///     "limit" : 3,
///     "location_ids" : [
///       "057P5VYJ4A5X1",
///       "18YC4JDH91E1H"
///     ],
///     "query" : {
///       "filter" : {
///         "date_time_filter" : {
///           "closed_at" : {
///             "end_at" : "2019-03-04T21:54:45+00:00",
///             "start_at" : "2018-03-03T20:00:00+00:00"
///           }
///         },
///         "state_filter" : {
///           "states" : [
///             "COMPLETED"
///           ]
///         }
///       },
///       "sort" : {
///         "sort_field" : "CLOSED_AT",
///         "sort_order" : "DESC"
///       }
///     },
///     "return_entries" : true
///   }
/// }
public struct SearchOrdersRequest: Codable {
    /// A pagination cursor returned by a previous call to this endpoint.
    /// Provide this cursor to retrieve the next set of results for your original query.
    /// For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
    public var cursor: String?
    /// The maximum number of results to be returned in a single page. It is
    /// possible to receive fewer results than the specified limit on a given page.
    /// 
    /// Default: `500`
    public var limit: Int?
    /// The location IDs for the orders to query. All locations must belong to
    /// the same merchant.
    /// 
    /// Min: 1 location ID.
    /// 
    /// Max: 10 location IDs.
    public var locationIDs: [String]?
    /// Contains query criteria for the search.
    public var query: SearchOrdersQuery?
    /// A Boolean that controls the format of the search results. If `true`,
    /// `SearchOrders` returns [OrderEntry](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderEntry) objects. If `false`, `SearchOrders`
    /// returns complete order objects.
    /// 
    /// Default: `false`.
    public var isReturnEntries: Bool?

    public init(cursor: String? = nil, limit: Int? = nil, locationIDs: [String]? = nil, query: SearchOrdersQuery? = nil, isReturnEntries: Bool? = nil) {
        self.cursor = cursor
        self.limit = limit
        self.locationIDs = locationIDs
        self.query = query
        self.isReturnEntries = isReturnEntries
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case limit
        case locationIDs = "location_ids"
        case query
        case isReturnEntries = "return_entries"
    }
}

/// Either the `order_entries` or `orders` field is set, depending on whether
/// `return_entries` is set on the [SearchOrdersRequest](https://developer.squareup.com/reference/square_2021-08-18/orders-api/search-orders).
///
/// Example:
///
/// {
///   "cursor" : "123",
///   "order_entries" : [
///     {
///       "location_id" : "057P5VYJ4A5X1",
///       "order_id" : "CAISEM82RcpmcFBM0TfOyiHV3es",
///       "version" : 1
///     },
///     {
///       "location_id" : "18YC4JDH91E1H",
///       "order_id" : "CAISENgvlJ6jLWAzERDzjyHVybY"
///     },
///     {
///       "location_id" : "057P5VYJ4A5X1",
///       "order_id" : "CAISEM52YcpmcWAzERDOyiWS3ty"
///     }
///   ]
/// }
public struct SearchOrdersResponse: Codable {
    /// The pagination cursor to be used in a subsequent request. If unset,
    /// this is the final response.
    /// For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
    public var cursor: String?
    /// [Errors](https://developer.squareup.com/reference/square_2021-08-18/objects/Error) encountered during the search.
    public var errors: [Error]?
    /// A list of [OrderEntries](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderEntry) that fit the query
    /// conditions. The list is populated only if `return_entries` is set to `true` in the request.
    public var orderEntries: [OrderEntry]?
    /// A list of
    /// [Order](https://developer.squareup.com/reference/square_2021-08-18/objects/Order) objects that match the query conditions. The list is populated only if
    /// `return_entries` is set to `false` in the request.
    public var orders: [Order]?

    public init(cursor: String? = nil, errors: [Error]? = nil, orderEntries: [OrderEntry]? = nil, orders: [Order]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.orderEntries = orderEntries
        self.orders = orders
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case errors
        case orderEntries = "order_entries"
        case orders
    }
}

/// Sorting criteria for a `SearchOrders` request. Results can only be sorted
/// by a timestamp field.
public struct SearchOrdersSort: Codable {
    /// The field to sort by.
    /// 
    /// __Important:__ When using a [DateTimeFilter](https://developer.squareup.com/reference/square_2021-08-18/objects/SearchOrdersFilter),
    /// `sort_field` must match the timestamp field that the `DateTimeFilter` uses to
    /// filter. For example, if you set your `sort_field` to `CLOSED_AT` and you use a
    /// `DateTimeFilter`, your `DateTimeFilter` must filter for orders by their `CLOSED_AT` date.
    /// If this field does not match the timestamp field in `DateTimeFilter`,
    /// `SearchOrders` returns an error.
    /// 
    /// Default: `CREATED_AT`.
    public var sortField: String
    /// The chronological order in which results are returned. Defaults to `DESC`.
    public var sortOrder: String?

    public init(sortField: String, sortOrder: String? = nil) {
        self.sortField = sortField
        self.sortOrder = sortOrder
    }

    private enum CodingKeys: String, CodingKey {
        case sortField = "sort_field"
        case sortOrder = "sort_order"
    }
}

/// Specifies which timestamp to use to sort `SearchOrder` results.
public enum SearchOrdersSortField: String, Codable, CaseIterable {
    case createdAt = "CREATED_AT"
    case updatedAt = "UPDATED_AT"
    case closedAt = "CLOSED_AT"
}

/// A filter based on order `source` information.
public struct SearchOrdersSourceFilter: Codable {
    /// Filters by the [Source](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderSource) `name`. The filter returns any orders
    /// with a `source.name` that matches any of the listed source names.
    /// 
    /// Max: 10 source names.
    public var sourceNames: [String]?

    public init(sourceNames: [String]? = nil) {
        self.sourceNames = sourceNames
    }

    private enum CodingKeys: String, CodingKey {
        case sourceNames = "source_names"
    }
}

/// Filter by the current order `state`.
public struct SearchOrdersStateFilter: Codable {
    /// States to filter for.
    public var states: [String]

    public init(states: [String]) {
        self.states = states
    }
}

/// A request for a filtered and sorted set of `Shift` objects.
///
/// Example:
///
/// {
///   "request_body" : {
///     "limit" : 100,
///     "query" : {
///       "filter" : {
///         "workday" : {
///           "date_range" : {
///             "end_date" : "2019-02-03",
///             "start_date" : "2019-01-20"
///           },
///           "default_timezone" : "America\/Los_Angeles",
///           "match_shifts_by" : "START_AT"
///         }
///       }
///     }
///   }
/// }
public struct SearchShiftsRequest: Codable {
    /// An opaque cursor for fetching the next page.
    public var cursor: String?
    /// The number of resources in a page (200 by default).
    public var limit: Int?
    /// The parameters of a `Shift` search query, which includes filter and sort options.
    public var query: ShiftQuery?

    public init(cursor: String? = nil, limit: Int? = nil, query: ShiftQuery? = nil) {
        self.cursor = cursor
        self.limit = limit
        self.query = query
    }
}

/// The response to a request for `Shift` objects. The response contains
/// the requested `Shift` objects and might contain a set of `Error` objects if
/// the request resulted in errors.
///
/// Example:
///
/// {
///   "shifts" : [
///     {
///       "breaks" : [
///         {
///           "break_type_id" : "REGS1EQR1TPZ5",
///           "end_at" : "2019-01-21T06:11:00-05:00",
///           "expected_duration" : "PT10M",
///           "id" : "SJW7X6AKEJQ65",
///           "is_paid" : true,
///           "name" : "Tea Break",
///           "start_at" : "2019-01-21T06:11:00-05:00"
///         }
///       ],
///       "created_at" : "2019-01-24T01:12:03Z",
///       "employee_id" : "ormj0jJJZ5OZIzxrZYJI",
///       "end_at" : "2019-01-21T13:11:00-05:00",
///       "id" : "X714F3HA6D1PT",
///       "location_id" : "PAA1RJZZKXBFG",
///       "start_at" : "2019-01-21T03:11:00-05:00",
///       "status" : "CLOSED",
///       "team_member_id" : "ormj0jJJZ5OZIzxrZYJI",
///       "timezone" : "America\/New_York",
///       "updated_at" : "2019-02-07T22:21:08Z",
///       "version" : 6,
///       "wage" : {
///         "hourly_rate" : {
///           "amount" : 1100,
///           "currency" : "USD"
///         },
///         "title" : "Barista"
///       }
///     },
///     {
///       "breaks" : [
///         {
///           "break_type_id" : "WQX00VR99F53J",
///           "end_at" : "2019-01-23T14:40:00-05:00",
///           "expected_duration" : "PT10M",
///           "id" : "BKS6VR7WR748A",
///           "is_paid" : true,
///           "name" : "Tea Break",
///           "start_at" : "2019-01-23T14:30:00-05:00"
///         },
///         {
///           "break_type_id" : "P6Q468ZFRN1AC",
///           "end_at" : "2019-01-22T12:44:00-05:00",
///           "expected_duration" : "PT15M",
///           "id" : "BQFEZSHFZSC51",
///           "is_paid" : false,
///           "name" : "Coffee Break",
///           "start_at" : "2019-01-22T12:30:00-05:00"
///         }
///       ],
///       "created_at" : "2019-01-23T23:32:45Z",
///       "employee_id" : "33fJchumvVdJwxV0H6L9",
///       "end_at" : "2019-01-22T13:02:00-05:00",
///       "id" : "GDHYBZYWK0P2V",
///       "location_id" : "PAA1RJZZKXBFG",
///       "start_at" : "2019-01-22T12:02:00-05:00",
///       "status" : "CLOSED",
///       "team_member_id" : "33fJchumvVdJwxV0H6L9",
///       "timezone" : "America\/New_York",
///       "updated_at" : "2019-01-24T00:56:25Z",
///       "version" : 16,
///       "wage" : {
///         "hourly_rate" : {
///           "amount" : 1600,
///           "currency" : "USD"
///         },
///         "title" : "Cook"
///       }
///     }
///   ]
/// }
public struct SearchShiftsResponse: Codable {
    /// An opaque cursor for fetching the next page.
    public var cursor: String?
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Shifts.
    public var shifts: [Shift]?

    public init(cursor: String? = nil, errors: [Error]? = nil, shifts: [Shift]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.shifts = shifts
    }
}

/// Represents a set of SearchSubscriptionsQuery filters used to limit the set of Subscriptions returned by SearchSubscriptions.
public struct SearchSubscriptionsFilter: Codable {
    /// A filter to select subscriptions based on the customer.
    public var customerIDs: [String]?
    /// A filter to select subscriptions based the location.
    public var locationIDs: [String]?

    public init(customerIDs: [String]? = nil, locationIDs: [String]? = nil) {
        self.customerIDs = customerIDs
        self.locationIDs = locationIDs
    }

    private enum CodingKeys: String, CodingKey {
        case customerIDs = "customer_ids"
        case locationIDs = "location_ids"
    }
}

/// Represents a query (including filtering criteria) used to search for subscriptions.
public struct SearchSubscriptionsQuery: Codable {
    /// Represents a set of SearchSubscriptionsQuery filters used to limit the set of Subscriptions returned by SearchSubscriptions.
    public var filter: SearchSubscriptionsFilter?

    public init(filter: SearchSubscriptionsFilter? = nil) {
        self.filter = filter
    }
}

/// Defines parameters in a
/// [SearchSubscriptions](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/search-subscriptions) endpoint
/// request.
///
/// Example:
///
/// {
///   "request_body" : {
///     "query" : {
///       "filter" : {
///         "customer_ids" : [
///           "CHFGVKYY8RSV93M5KCYTG4PN0G"
///         ],
///         "location_ids" : [
///           "S8GWD5R9QB376"
///         ]
///       }
///     }
///   }
/// }
public struct SearchSubscriptionsRequest: Codable {
    /// A pagination cursor returned by a previous call to this endpoint.
    /// Provide this to retrieve the next set of results for the original query.
    /// 
    /// For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
    public var cursor: String?
    /// The upper limit on the number of subscriptions to return
    /// in the response.
    /// 
    /// Default: `200`
    public var limit: Int?
    /// Represents a query (including filtering criteria) used to search for subscriptions.
    public var query: SearchSubscriptionsQuery?
    public var locationIDs: AnyJSON

    public init(cursor: String? = nil, limit: Int? = nil, query: SearchSubscriptionsQuery? = nil, locationIDs: AnyJSON) {
        self.cursor = cursor
        self.limit = limit
        self.query = query
        self.locationIDs = locationIDs
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case limit
        case query
        case locationIDs = "location_ids"
    }
}

/// Defines the fields that are included in the response from the
/// [SearchSubscriptions](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/search-subscriptions) endpoint.
///
/// Example:
///
/// {
///   "subscriptions" : [
///     {
///       "canceled_date" : "2020-04-14",
///       "card_id" : "ccof:mueUsvgajChmjEbp4GB",
///       "charged_through_date" : "2020-05-14",
///       "created_at" : "2020-08-03T21:53:10Z",
///       "customer_id" : "CHFGVKYY8RSV93M5KCYTG4PN0G",
///       "id" : "de86fc96-8664-474b-af1a-abbe59cacf0e",
///       "location_id" : "S8GWD5R9QB376",
///       "paid_until_date" : "2020-05-14",
///       "plan_id" : "L3TJVDHVBEQEGQDEZL2JJM7R",
///       "start_date" : "2020-04-14",
///       "status" : "CANCELED",
///       "timezone" : "UTC"
///     },
///     {
///       "created_at" : "2020-08-03T21:53:10Z",
///       "customer_id" : "CHFGVKYY8RSV93M5KCYTG4PN0G",
///       "id" : "56214fb2-cc85-47a1-93bc-44f3766bb56f",
///       "location_id" : "S8GWD5R9QB376",
///       "plan_id" : "6JHXF3B2CW3YKHDV4XEM674H",
///       "price_override_money" : {
///         "amount" : 100,
///         "currency" : "USD"
///       },
///       "start_date" : "2020-08-01",
///       "status" : "PENDING",
///       "tax_percentage" : "5",
///       "timezone" : "America\/Los_Angeles",
///       "version" : 1594155459464
///     },
///     {
///       "charged_through_date" : "2020-06-11",
///       "created_at" : "2020-08-03T21:53:10Z",
///       "customer_id" : "CHFGVKYY8RSV93M5KCYTG4PN0G",
///       "id" : "8151fc89-da15-4eb9-a685-1a70883cebfc",
///       "invoice_ids" : [
///         "grebK0Q_l8H4fqoMMVvt-Q",
///         "rcX_i3sNmHTGKhI4W2mceA"
///       ],
///       "location_id" : "S8GWD5R9QB376",
///       "paid_until_date" : "2020-06-11",
///       "plan_id" : "6JHXF3B2CW3YKHDV4XEM674H",
///       "price_override_money" : {
///         "amount" : 1000,
///         "currency" : "USD"
///       },
///       "start_date" : "2020-05-11",
///       "status" : "ACTIVE",
///       "timezone" : "America\/Los_Angeles"
///     }
///   ]
/// }
public struct SearchSubscriptionsResponse: Codable {
    /// When a response is truncated, it includes a cursor that you can
    /// use in a subsequent request to fetch the next set of subscriptions.
    /// If empty, this is the final response.
    /// 
    /// For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
    public var cursor: String?
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// The search result.
    public var subscriptions: [Subscription]?

    public init(cursor: String? = nil, errors: [Error]? = nil, subscriptions: [Subscription]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.subscriptions = subscriptions
    }
}

/// Represents a filter used in a search for `TeamMember` objects. `AND` logic is applied
/// between the individual fields, and `OR` logic is applied within list-based fields.
/// For example, setting this filter value:
/// ```
/// filter = (locations_ids = ["A", "B"], status = ACTIVE)
/// ```
/// returns only active team members assigned to either location "A" or "B".
public struct SearchTeamMembersFilter: Codable {
    /// When present, filters by team members assigned to the specified locations.
    /// When empty, includes team members assigned to any location.
    public var locationIDs: [String]?
    /// When present, filters by team members who match the given status.
    /// When empty, includes team members of all statuses.
    public var status: String?

    public init(locationIDs: [String]? = nil, status: String? = nil) {
        self.locationIDs = locationIDs
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case locationIDs = "location_ids"
        case status
    }
}

/// Represents the parameters in a search for `TeamMember` objects.
public struct SearchTeamMembersQuery: Codable {
    /// Represents a filter used in a search for `TeamMember` objects. `AND` logic is applied
    /// between the individual fields, and `OR` logic is applied within list-based fields.
    /// For example, setting this filter value:
    /// ```
    /// filter = (locations_ids = ["A", "B"], status = ACTIVE)
    /// ```
    /// returns only active team members assigned to either location "A" or "B".
    public var filter: SearchTeamMembersFilter?

    public init(filter: SearchTeamMembersFilter? = nil) {
        self.filter = filter
    }
}

/// Represents a search request for a filtered list of `TeamMember` objects.
///
/// Example:
///
/// {
///   "request_body" : {
///     "limit" : 10,
///     "query" : {
///       "filter" : {
///         "location_ids" : [
///           "0G5P3VGACMMQZ"
///         ],
///         "status" : "ACTIVE"
///       }
///     }
///   }
/// }
public struct SearchTeamMembersRequest: Codable {
    /// The opaque cursor for fetching the next page. For more information, see
    /// [pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
    public var cursor: String?
    /// The maximum number of `TeamMember` objects in a page (100 by default).
    public var limit: Int?
    /// Represents the parameters in a search for `TeamMember` objects.
    public var query: SearchTeamMembersQuery?

    public init(cursor: String? = nil, limit: Int? = nil, query: SearchTeamMembersQuery? = nil) {
        self.cursor = cursor
        self.limit = limit
        self.query = query
    }
}

/// Represents a response from a search request containing a filtered list of `TeamMember` objects.
///
/// Example:
///
/// {
///   "cursor" : "N:9UglUjOXQ13-hMFypCft",
///   "team_members" : [
///     {
///       "assigned_locations" : {
///         "assignment_type" : "ALL_CURRENT_AND_FUTURE_LOCATIONS"
///       },
///       "created_at" : "2019-07-10T17:26:48Z",
///       "email_address" : "johnny_cash@squareup.com",
///       "family_name" : "Cash",
///       "given_name" : "Johnny",
///       "id" : "-3oZQKPKVk6gUXU_V5Qa",
///       "is_owner" : false,
///       "reference_id" : "12345678",
///       "status" : "ACTIVE",
///       "updated_at" : "2020-04-28T21:49:28.957Z"
///     },
///     {
///       "assigned_locations" : {
///         "assignment_type" : "ALL_CURRENT_AND_FUTURE_LOCATIONS"
///       },
///       "created_at" : "2020-03-24T18:14:01.127Z",
///       "family_name" : "Smith",
///       "given_name" : "Lombard",
///       "id" : "1AVJj0DjkzbmbJw5r4KK",
///       "is_owner" : false,
///       "phone_number" : "+14155552671",
///       "reference_id" : "abcded",
///       "status" : "ACTIVE",
///       "updated_at" : "2020-06-09T17:38:05.423Z"
///     },
///     {
///       "assigned_locations" : {
///         "assignment_type" : "ALL_CURRENT_AND_FUTURE_LOCATIONS"
///       },
///       "created_at" : "2020-03-24T01:09:25.010Z",
///       "family_name" : "Sway",
///       "given_name" : "Monica",
///       "id" : "2JCmiJol_KKFs9z2Evim",
///       "is_owner" : false,
///       "status" : "ACTIVE",
///       "updated_at" : "2020-03-24T01:09:25.010Z"
///     },
///     {
///       "assigned_locations" : {
///         "assignment_type" : "ALL_CURRENT_AND_FUTURE_LOCATIONS"
///       },
///       "created_at" : "2020-03-24T01:09:23.464Z",
///       "family_name" : "Ipsum",
///       "given_name" : "Elton",
///       "id" : "4uXcJQSLtbk3F0UQHFNQ",
///       "is_owner" : false,
///       "status" : "ACTIVE",
///       "updated_at" : "2020-03-24T01:09:23.464Z"
///     },
///     {
///       "assigned_locations" : {
///         "assignment_type" : "ALL_CURRENT_AND_FUTURE_LOCATIONS"
///       },
///       "created_at" : "2020-03-24T01:09:23.074Z",
///       "family_name" : "Lo",
///       "given_name" : "Steven",
///       "id" : "5CoUpyrw1YwGWcRd-eDL",
///       "is_owner" : false,
///       "status" : "ACTIVE",
///       "updated_at" : "2020-03-24T01:09:23.074Z"
///     },
///     {
///       "assigned_locations" : {
///         "assignment_type" : "ALL_CURRENT_AND_FUTURE_LOCATIONS"
///       },
///       "created_at" : "2020-03-24T18:14:03.865Z",
///       "email_address" : "patrick_steward@gmail.com",
///       "family_name" : "Steward",
///       "given_name" : "Patrick",
///       "id" : "5MRPTTp8MMBLVSmzrGha",
///       "is_owner" : false,
///       "phone_number" : "+14155552671",
///       "status" : "ACTIVE",
///       "updated_at" : "2020-03-24T18:14:03.865Z"
///     },
///     {
///       "assigned_locations" : {
///         "assignment_type" : "ALL_CURRENT_AND_FUTURE_LOCATIONS"
///       },
///       "created_at" : "2020-03-24T01:09:25.180Z",
///       "family_name" : "Manny",
///       "given_name" : "Ivy",
///       "id" : "7F5ZxsfRnkexhu1PTbfh",
///       "is_owner" : false,
///       "status" : "ACTIVE",
///       "updated_at" : "2020-03-24T01:09:25.180Z"
///     },
///     {
///       "assigned_locations" : {
///         "assignment_type" : "ALL_CURRENT_AND_FUTURE_LOCATIONS"
///       },
///       "created_at" : "2020-03-24T18:14:02.797Z",
///       "email_address" : "john_smith@gmail.com",
///       "family_name" : "Smith",
///       "given_name" : "John",
///       "id" : "808X9HR72yKvVaigQXf4",
///       "is_owner" : false,
///       "phone_number" : "+14155552671",
///       "status" : "ACTIVE",
///       "updated_at" : "2020-03-24T18:14:02.797Z"
///     },
///     {
///       "assigned_locations" : {
///         "assignment_type" : "ALL_CURRENT_AND_FUTURE_LOCATIONS"
///       },
///       "created_at" : "2020-03-24T18:14:00.399Z",
///       "email_address" : "r_wen@gmail.com",
///       "family_name" : "Wen",
///       "given_name" : "Robert",
///       "id" : "9MVDVoY4hazkWKGo_OuZ",
///       "is_owner" : false,
///       "phone_number" : "+14155552671",
///       "status" : "ACTIVE",
///       "updated_at" : "2020-03-24T18:14:00.399Z"
///     },
///     {
///       "assigned_locations" : {
///         "assignment_type" : "ALL_CURRENT_AND_FUTURE_LOCATIONS"
///       },
///       "created_at" : "2020-03-24T18:14:00.445Z",
///       "email_address" : "asimpson@gmail.com",
///       "family_name" : "Simpson",
///       "given_name" : "Ashley",
///       "id" : "9UglUjOXQ13-hMFypCft",
///       "is_owner" : false,
///       "phone_number" : "+14155552671",
///       "status" : "ACTIVE",
///       "updated_at" : "2020-03-24T18:14:00.445Z"
///     }
///   ]
/// }
public struct SearchTeamMembersResponse: Codable {
    /// The opaque cursor for fetching the next page. For more information, see
    /// [pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
    public var cursor: String?
    /// The errors that occurred during the request.
    public var errors: [Error]?
    /// The filtered list of `TeamMember` objects.
    public var teamMembers: [TeamMember]?

    public init(cursor: String? = nil, errors: [Error]? = nil, teamMembers: [TeamMember]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.teamMembers = teamMembers
    }

    private enum CodingKeys: String, CodingKey {
        case cursor
        case errors
        case teamMembers = "team_members"
    }
}

/// Example:
///
/// {
///   "request_body" : {
///     "limit" : 2,
///     "query" : {
///       "filter" : {
///         "status" : "COMPLETED"
///       }
///     }
///   }
/// }
public struct SearchTerminalCheckoutsRequest: Codable {
    /// A pagination cursor returned by a previous call to this endpoint.
    /// Provide this cursor to retrieve the next set of results for the original query.
    /// See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
    public var cursor: String?
    /// Limits the number of results returned for a single request.
    public var limit: Int?
    public var query: TerminalCheckoutQuery?

    public init(cursor: String? = nil, limit: Int? = nil, query: TerminalCheckoutQuery? = nil) {
        self.cursor = cursor
        self.limit = limit
        self.query = query
    }
}

/// Example:
///
/// {
///   "checkouts" : [
///     {
///       "amount_money" : {
///         "amount" : 2610,
///         "currency" : "USD"
///       },
///       "app_id" : "APP_ID",
///       "created_at" : "2020-03-31T18:13:15.921Z",
///       "deadline_duration" : "PT10M",
///       "device_options" : {
///         "device_id" : "dbb5d83a-7838-11ea-bc55-0242ac130003",
///         "skip_receipt_screen" : false,
///         "tip_settings" : {
///           "allow_tipping" : false
///         }
///       },
///       "id" : "tsQPvzwBpMqqO",
///       "note" : "A brief note",
///       "payment_ids" : [
///         "rXnhZzywrEk4vR6pw76fPZfgvaB"
///       ],
///       "reference_id" : "id14467",
///       "status" : "COMPLETED",
///       "updated_at" : "2020-03-31T18:13:52.725Z"
///     },
///     {
///       "amount_money" : {
///         "amount" : 2610,
///         "currency" : "USD"
///       },
///       "app_id" : "APP_ID",
///       "created_at" : "2020-03-31T18:08:31.882Z",
///       "deadline_duration" : "PT10M",
///       "device_options" : {
///         "device_id" : "dbb5d83a-7838-11ea-bc55-0242ac130003",
///         "skip_receipt_screen" : true,
///         "tip_settings" : {
///           "allow_tipping" : false
///         }
///       },
///       "id" : "XlOPTgcEhrbqO",
///       "note" : "A brief note",
///       "payment_ids" : [
///         "VYBF861PaoKPP7Pih0TlbZiNvaB"
///       ],
///       "reference_id" : "id41623",
///       "status" : "COMPLETED",
///       "updated_at" : "2020-03-31T18:08:41.635Z"
///     }
///   ],
///   "cursor" : "RiTJqBoTuXlbLmmrPvEkX9iG7XnQ4W4RjGnH"
/// }
public struct SearchTerminalCheckoutsResponse: Codable {
    /// The requested search result of `TerminalCheckout` objects.
    public var checkouts: [TerminalCheckout]?
    /// The pagination cursor to be used in a subsequent request. If empty,
    /// this is the final response.
    /// 
    /// See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
    public var cursor: String?
    /// Information about errors encountered during the request.
    public var errors: [Error]?

    public init(checkouts: [TerminalCheckout]? = nil, cursor: String? = nil, errors: [Error]? = nil) {
        self.checkouts = checkouts
        self.cursor = cursor
        self.errors = errors
    }
}

/// Example:
///
/// {
///   "request_body" : {
///     "limit" : 1,
///     "query" : {
///       "filter" : {
///         "status" : "COMPLETED"
///       }
///     }
///   }
/// }
public struct SearchTerminalRefundsRequest: Codable {
    /// A pagination cursor returned by a previous call to this endpoint.
    /// Provide this cursor to retrieve the next set of results for the original query.
    public var cursor: String?
    /// Limits the number of results returned for a single request.
    public var limit: Int?
    public var query: TerminalRefundQuery?

    public init(cursor: String? = nil, limit: Int? = nil, query: TerminalRefundQuery? = nil) {
        self.cursor = cursor
        self.limit = limit
        self.query = query
    }
}

/// Example:
///
/// {
///   "refunds" : [
///     {
///       "amount_money" : {
///         "amount" : 111,
///         "currency" : "CAD"
///       },
///       "app_id" : "sandbox-sq0idb-c2OuYt13YaCAeJq_2cd8OQ",
///       "card" : {
///         "bin" : "411111",
///         "card_brand" : "INTERAC",
///         "card_type" : "CREDIT",
///         "exp_month" : 1,
///         "exp_year" : 2022,
///         "fingerprint" : "sq-1-B1fP9MNNmZgVVaPKRND6oDKYbz25S2cTvg9Mzwg3RMTK1zT1PiGRT-AE3nTA8vSmmw",
///         "last_4" : "1111"
///       },
///       "created_at" : "2020-09-29T15:21:46.771Z",
///       "deadline_duration" : "PT5M",
///       "device_id" : "f72dfb8e-4d65-4e56-aade-ec3fb8d33291",
///       "id" : "009DP5HD-5O5OvgkcNUhl7JBuINflcjKqUzXZY",
///       "location_id" : "76C9W6K8CNNQ5",
///       "order_id" : "kcuKDKreRaI4gF4TjmEgZjHk8Z7YY",
///       "payment_id" : "5O5OvgkcNUhl7JBuINflcjKqUzXZY",
///       "reason" : "Returning item",
///       "refund_id" : "5O5OvgkcNUhl7JBuINflcjKqUzXZY_43Q4iGp7sNeATiWrUruA1EYeMRUXaddXXlDDJ1EQLvb",
///       "status" : "COMPLETED",
///       "updated_at" : "2020-09-29T15:21:48.675Z"
///     }
///   ]
/// }
public struct SearchTerminalRefundsResponse: Codable {
    /// The pagination cursor to be used in a subsequent request. If empty,
    /// this is the final response.
    /// 
    /// See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
    public var cursor: String?
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// The requested search result of `TerminalRefund` objects.
    public var refunds: [TerminalRefund]?

    public init(cursor: String? = nil, errors: [Error]? = nil, refunds: [TerminalRefund]? = nil) {
        self.cursor = cursor
        self.errors = errors
        self.refunds = refunds
    }
}

/// A query filter to search for appointment segments by.
public struct SegmentFilter: Codable {
    /// The ID of the [CatalogItemVariation](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItemVariation) representing the service booked in this segment.
    public var serviceVariationID: String
    /// A filter to select resources based on an exact field value. For any given
    /// value, the value can only be in one property. Depending on the field, either
    /// all properties can be set or only a subset will be available.
    /// 
    /// Refer to the documentation of the field.
    public var teamMemberIDFilter: FilterValue?

    public init(serviceVariationID: String, teamMemberIDFilter: FilterValue? = nil) {
        self.serviceVariationID = serviceVariationID
        self.teamMemberIDFilter = teamMemberIDFilter
    }

    private enum CodingKeys: String, CodingKey {
        case serviceVariationID = "service_variation_id"
        case teamMemberIDFilter = "team_member_id_filter"
    }
}

/// A record of the hourly rate, start, and end times for a single work shift
/// for an employee. This might include a record of the start and end times for breaks
/// taken during the shift.
public struct Shift: Codable {
    /// A list of all the paid or unpaid breaks that were taken during this shift.
    public var breaks: [Break]?
    /// A read-only timestamp in RFC 3339 format; presented in UTC.
    public var createdAt: String?
    /// The ID of the employee this shift belongs to. DEPRECATED at version 2020-08-26. Use `team_member_id` instead.
    public var employeeID: String?
    /// RFC 3339; shifted to the timezone + offset. Precision up to the minute is
    /// respected; seconds are truncated.
    public var endAt: String?
    /// The UUID for this object.
    public var id: String?
    /// The ID of the location this shift occurred at. The location should be based on
    /// where the employee clocked in.
    public var locationID: String?
    /// RFC 3339; shifted to the location timezone + offset. Precision up to the
    /// minute is respected; seconds are truncated.
    public var startAt: String
    /// Describes the working state of the current `Shift`.
    public var status: String?
    /// The ID of the team member this shift belongs to. Replaced `employee_id` at version "2020-08-26".
    public var teamMemberID: String?
    /// The read-only convenience value that is calculated from the location based
    /// on the `location_id`. Format: the IANA timezone database identifier for the
    /// location timezone.
    public var timezone: String?
    /// A read-only timestamp in RFC 3339 format; presented in UTC.
    public var updatedAt: String?
    /// Used for resolving concurrency issues. The request fails if the version
    /// provided does not match the server version at the time of the request. If not provided,
    /// Square executes a blind write; potentially overwriting data from another
    /// write.
    public var version: Int?
    /// The hourly wage rate used to compensate an employee for this shift.
    public var wage: ShiftWage?

    public init(breaks: [Break]? = nil, createdAt: String? = nil, employeeID: String? = nil, endAt: String? = nil, id: String? = nil, locationID: String? = nil, startAt: String, status: String? = nil, teamMemberID: String? = nil, timezone: String? = nil, updatedAt: String? = nil, version: Int? = nil, wage: ShiftWage? = nil) {
        self.breaks = breaks
        self.createdAt = createdAt
        self.employeeID = employeeID
        self.endAt = endAt
        self.id = id
        self.locationID = locationID
        self.startAt = startAt
        self.status = status
        self.teamMemberID = teamMemberID
        self.timezone = timezone
        self.updatedAt = updatedAt
        self.version = version
        self.wage = wage
    }

    private enum CodingKeys: String, CodingKey {
        case breaks
        case createdAt = "created_at"
        case employeeID = "employee_id"
        case endAt = "end_at"
        case id
        case locationID = "location_id"
        case startAt = "start_at"
        case status
        case teamMemberID = "team_member_id"
        case timezone
        case updatedAt = "updated_at"
        case version
        case wage
    }
}

/// Defines a filter used in a search for `Shift` records. `AND` logic is
/// used by Square's servers to apply each filter property specified.
public struct ShiftFilter: Codable {
    /// Fetch shifts for the specified employees. DEPRECATED at version 2020-08-26. Use `team_member_ids` instead.
    public var employeeIDs: [String]?
    /// Represents a generic time range. The start and end values are
    /// represented in RFC 3339 format. Time ranges are customized to be
    /// inclusive or exclusive based on the needs of a particular endpoint.
    /// Refer to the relevant endpoint-specific documentation to determine
    /// how time ranges are handled.
    public var end: TimeRange?
    /// Fetch shifts for the specified location.
    public var locationIDs: [String]
    /// Represents a generic time range. The start and end values are
    /// represented in RFC 3339 format. Time ranges are customized to be
    /// inclusive or exclusive based on the needs of a particular endpoint.
    /// Refer to the relevant endpoint-specific documentation to determine
    /// how time ranges are handled.
    public var start: TimeRange?
    /// Fetch a `Shift` instance by `Shift.status`.
    public var status: String?
    /// Fetch shifts for the specified team members. Replaced `employee_ids` at version "2020-08-26".
    public var teamMemberIDs: [String]
    /// A `Shift` search query filter parameter that sets a range of days that
    /// a `Shift` must start or end in before passing the filter condition.
    public var workday: ShiftWorkday?

    public init(employeeIDs: [String]? = nil, end: TimeRange? = nil, locationIDs: [String], start: TimeRange? = nil, status: String? = nil, teamMemberIDs: [String], workday: ShiftWorkday? = nil) {
        self.employeeIDs = employeeIDs
        self.end = end
        self.locationIDs = locationIDs
        self.start = start
        self.status = status
        self.teamMemberIDs = teamMemberIDs
        self.workday = workday
    }

    private enum CodingKeys: String, CodingKey {
        case employeeIDs = "employee_ids"
        case end
        case locationIDs = "location_ids"
        case start
        case status
        case teamMemberIDs = "team_member_ids"
        case workday
    }
}

/// Specifies the `status` of `Shift` records to be returned.
public enum ShiftFilterStatus: String, Codable, CaseIterable {
    case `open` = "OPEN"
    case closed = "CLOSED"
}

/// The parameters of a `Shift` search query, which includes filter and sort options.
public struct ShiftQuery: Codable {
    /// Defines a filter used in a search for `Shift` records. `AND` logic is
    /// used by Square's servers to apply each filter property specified.
    public var filter: ShiftFilter?
    /// Sets the sort order of search results.
    public var sort: ShiftSort?

    public init(filter: ShiftFilter? = nil, sort: ShiftSort? = nil) {
        self.filter = filter
        self.sort = sort
    }
}

/// Sets the sort order of search results.
public struct ShiftSort: Codable {
    /// The field to sort on.
    public var field: String?
    /// The order in which results are returned. Defaults to DESC.
    public var order: String?

    public init(field: String? = nil, order: String? = nil) {
        self.field = field
        self.order = order
    }
}

/// Enumerates the `Shift` fields to sort on.
public enum ShiftSortField: String, Codable, CaseIterable {
    case startAt = "START_AT"
    case endAt = "END_AT"
    case createdAt = "CREATED_AT"
    case updatedAt = "UPDATED_AT"
}

/// Enumerates the possible status of a `Shift`.
public enum ShiftStatus: String, Codable, CaseIterable {
    case `open` = "OPEN"
    case closed = "CLOSED"
}

/// The hourly wage rate used to compensate an employee for this shift.
public struct ShiftWage: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var hourlyRate: Money?
    /// The name of the job performed during this shift. Square
    /// labor-reporting UIs might group shifts together by title.
    public var title: String?

    public init(hourlyRate: Money? = nil, title: String? = nil) {
        self.hourlyRate = hourlyRate
        self.title = title
    }

    private enum CodingKeys: String, CodingKey {
        case hourlyRate = "hourly_rate"
        case title
    }
}

/// A `Shift` search query filter parameter that sets a range of days that
/// a `Shift` must start or end in before passing the filter condition.
public struct ShiftWorkday: Codable {
    /// A range defined by two dates. Used for filtering a query for Connect v2
    /// objects that have date properties.
    public var dateRange: DateRange?
    /// Location-specific timezones convert workdays to datetime filters.
    /// Every location included in the query must have a timezone or this field
    /// must be provided as a fallback. Format: the IANA timezone database
    /// identifier for the relevant timezone.
    public var defaultTimezone: String?
    /// The strategy on which the dates are applied.
    public var matchShiftsBy: String?

    public init(dateRange: DateRange? = nil, defaultTimezone: String? = nil, matchShiftsBy: String? = nil) {
        self.dateRange = dateRange
        self.defaultTimezone = defaultTimezone
        self.matchShiftsBy = matchShiftsBy
    }

    private enum CodingKeys: String, CodingKey {
        case dateRange = "date_range"
        case defaultTimezone = "default_timezone"
        case matchShiftsBy = "match_shifts_by"
    }
}

/// Defines the logic used to apply a workday filter.
public enum ShiftWorkdayMatcher: String, Codable, CaseIterable {
    case startAt = "START_AT"
    case endAt = "END_AT"
    case intersection = "INTERSECTION"
}

/// Represents a Square Online site, which is an online store for a Square seller.
public struct Site: Codable {
    /// The timestamp of when the site was created, in RFC 3339 format.
    public var createdAt: String?
    /// The domain of the site (without the protocol). For example, `mysite1.square.site`.
    public var domain: String?
    /// The Square-assigned ID of the site.
    public var id: String?
    /// Indicates whether the site is published.
    public var isPublished: Bool?
    /// The title of the site.
    public var siteTitle: String?
    /// The timestamp of when the site was last updated, in RFC 3339 format.
    public var updatedAt: String?

    public init(createdAt: String? = nil, domain: String? = nil, id: String? = nil, isPublished: Bool? = nil, siteTitle: String? = nil, updatedAt: String? = nil) {
        self.createdAt = createdAt
        self.domain = domain
        self.id = id
        self.isPublished = isPublished
        self.siteTitle = siteTitle
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case createdAt = "created_at"
        case domain
        case id
        case isPublished = "is_published"
        case siteTitle = "site_title"
        case updatedAt = "updated_at"
    }
}

/// Represents the snippet that is added to a Square Online site. The snippet code is injected into the `head` element of all pages on the site, except for checkout pages.
public struct Snippet: Codable {
    /// The snippet code, which can contain valid HTML, JavaScript, or both.
    public var content: String
    /// The timestamp of when the snippet was initially added to the site, in RFC 3339 format.
    public var createdAt: String?
    /// The Square-assigned ID for the snippet.
    public var id: String?
    /// The ID of the site that contains the snippet.
    public var siteID: String?
    /// The timestamp of when the snippet was last updated on the site, in RFC 3339 format.
    public var updatedAt: String?

    public init(content: String, createdAt: String? = nil, id: String? = nil, siteID: String? = nil, updatedAt: String? = nil) {
        self.content = content
        self.createdAt = createdAt
        self.id = id
        self.siteID = siteID
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case content
        case createdAt = "created_at"
        case id
        case siteID = "site_id"
        case updatedAt = "updated_at"
    }
}

public struct SnippetResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Represents the snippet that is added to a Square Online site. The snippet code is injected into the `head` element of all pages on the site, except for checkout pages.
    public var snippet: Snippet?

    public init(errors: [Error]? = nil, snippet: Snippet? = nil) {
        self.errors = errors
        self.snippet = snippet
    }
}

/// The order (e.g., chronological or alphabetical) in which results from a request are returned.
public enum SortOrder: String, Codable, CaseIterable {
    case desc = "DESC"
    case asc = "ASC"
}

/// Provides information about the application used to generate a change.
public struct SourceApplication: Codable {
    /// Read-only Square ID assigned to the application. Only used for
    /// [Product](https://developer.squareup.com/reference/square_2021-08-18/enums/Product) type `EXTERNAL_API`.
    public var applicationID: String?
    /// Read-only display name assigned to the application
    /// (e.g. `"Custom Application"`, `"Square POS 4.74 for Android"`).
    public var name: String?
    /// Read-only [Product](https://developer.squareup.com/reference/square_2021-08-18/enums/Product) type for the application.
    public var product: String?

    public init(applicationID: String? = nil, name: String? = nil, product: String? = nil) {
        self.applicationID = applicationID
        self.name = name
        self.product = product
    }

    private enum CodingKeys: String, CodingKey {
        case applicationID = "application_id"
        case name
        case product
    }
}

/// Contains the name and abbreviation for standard measurement unit.
public struct StandardUnitDescription: Codable {
    /// UI display abbreviation for the measurement unit. For example, 'lb'.
    public var abbreviation: String?
    /// UI display name of the measurement unit. For example, 'Pound'.
    public var name: String?
    /// Represents a unit of measurement to use with a quantity, such as ounces
    /// or inches. Exactly one of the following fields are required: `custom_unit`,
    /// `area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.
    public var unit: MeasurementUnit?

    public init(abbreviation: String? = nil, name: String? = nil, unit: MeasurementUnit? = nil) {
        self.abbreviation = abbreviation
        self.name = name
        self.unit = unit
    }
}

/// Group of standard measurement units.
public struct StandardUnitDescriptionGroup: Codable {
    /// IETF language tag.
    public var languageCode: String?
    /// List of standard (non-custom) measurement units in this description group.
    public var standardUnitDescriptions: [StandardUnitDescription]?

    public init(languageCode: String? = nil, standardUnitDescriptions: [StandardUnitDescription]? = nil) {
        self.languageCode = languageCode
        self.standardUnitDescriptions = standardUnitDescriptions
    }

    private enum CodingKeys: String, CodingKey {
        case languageCode = "language_code"
        case standardUnitDescriptions = "standard_unit_descriptions"
    }
}

/// Defines the parameters for a `SubmitEvidence` request.
///
/// Example:
///
/// {
///   "request_body" : {
/// 
///   }
/// }
public struct SubmitEvidenceRequest: Codable {
    public init() {}
}

/// Defines the fields in a `SubmitEvidence` response.
///
/// Example:
///
/// {
///   "dispute" : {
///     "amount_money" : {
///       "amount" : 2000,
///       "currency" : "USD"
///     },
///     "brand_dispute_id" : "100000399240",
///     "card_brand" : "VISA",
///     "created_at" : "2018-10-18T16:02:15.313Z",
///     "disputed_payments" : [
///       {
///         "payment_id" : "2yeBUWJzllJTpmnSqtMRAL19taB"
///       }
///     ],
///     "due_at" : "2018-11-01T00:00:00.000Z",
///     "id" : "EAZoK70gX3fyvibecLwIGB",
///     "reason" : "NO_KNOWLEDGE",
///     "state" : "PROCESSING",
///     "updated_at" : "2018-10-18T16:02:15.313Z"
///   }
/// }
public struct SubmitEvidenceResponse: Codable {
    /// Represents a dispute a cardholder initiated with their bank.
    public var dispute: Dispute?
    /// Information about errors encountered during the request.
    public var errors: [Error]?

    public init(dispute: Dispute? = nil, errors: [Error]? = nil) {
        self.dispute = dispute
        self.errors = errors
    }
}

/// Represents a customer subscription to a subscription plan.
/// For an overview of the `Subscription` type, see
/// [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
public struct Subscription: Codable {
    /// The subscription cancellation date, in YYYY-MM-DD format (for
    /// example, 2013-01-15). On this date, the subscription status changes
    /// to `CANCELED` and the subscription billing stops.
    /// If you don't set this field, the subscription plan dictates if and
    /// when subscription ends.
    /// 
    /// You cannot update this field, you can only clear it.
    public var canceledDate: String?
    /// The ID of the [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) [card](https://developer.squareup.com/reference/square_2021-08-18/objects/Card)
    /// that is charged for the subscription.
    public var cardID: String?
    /// The date up to which the customer is invoiced for the
    /// subscription, in YYYY-MM-DD format (for example, 2013-01-15).
    /// 
    /// After the invoice is sent for a given billing period,
    /// this date will be the last day of the billing period.
    /// For example,
    /// suppose for the month of May a customer gets an invoice
    /// (or charged the card) on May 1. For the monthly billing scenario,
    /// this date is then set to May 31.
    public var chargedThroughDate: String?
    /// The timestamp when the subscription was created, in RFC 3339 format.
    public var createdAt: String?
    /// The ID of the associated [customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) profile.
    public var customerID: String?
    /// The Square-assigned ID of the subscription.
    public var id: String?
    /// The IDs of the [invoices](https://developer.squareup.com/reference/square_2021-08-18/objects/Invoice) created for the
    /// subscription, listed in order when the invoices were created
    /// (oldest invoices appear first).
    public var invoiceIDs: [String]?
    /// The ID of the location associated with the subscription.
    public var locationID: String?
    /// The ID of the associated [subscription plan](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogSubscriptionPlan).
    public var planID: String?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var priceOverrideMoney: Money?
    /// The start date of the subscription, in YYYY-MM-DD format (for example,
    /// 2013-01-15).
    public var startDate: String?
    /// The current status of the subscription.
    public var status: String?
    /// The tax amount applied when billing the subscription. The
    /// percentage is expressed in decimal form, using a `'.'` as the decimal
    /// separator and without a `'%'` sign. For example, a value of `7.5`
    /// corresponds to 7.5%.
    public var taxPercentage: String?
    /// Timezone that will be used in date calculations for the subscription.
    /// Defaults to the timezone of the location based on `location_id`.
    /// Format: the IANA Timezone Database identifier for the location timezone (for example, `America/Los_Angeles`).
    public var timezone: String?
    /// The version of the object. When updating an object, the version
    /// supplied must match the version in the database, otherwise the write will
    /// be rejected as conflicting.
    public var version: Int?

    public init(canceledDate: String? = nil, cardID: String? = nil, chargedThroughDate: String? = nil, createdAt: String? = nil, customerID: String? = nil, id: String? = nil, invoiceIDs: [String]? = nil, locationID: String? = nil, planID: String? = nil, priceOverrideMoney: Money? = nil, startDate: String? = nil, status: String? = nil, taxPercentage: String? = nil, timezone: String? = nil, version: Int? = nil) {
        self.canceledDate = canceledDate
        self.cardID = cardID
        self.chargedThroughDate = chargedThroughDate
        self.createdAt = createdAt
        self.customerID = customerID
        self.id = id
        self.invoiceIDs = invoiceIDs
        self.locationID = locationID
        self.planID = planID
        self.priceOverrideMoney = priceOverrideMoney
        self.startDate = startDate
        self.status = status
        self.taxPercentage = taxPercentage
        self.timezone = timezone
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case canceledDate = "canceled_date"
        case cardID = "card_id"
        case chargedThroughDate = "charged_through_date"
        case createdAt = "created_at"
        case customerID = "customer_id"
        case id
        case invoiceIDs = "invoice_ids"
        case locationID = "location_id"
        case planID = "plan_id"
        case priceOverrideMoney = "price_override_money"
        case startDate = "start_date"
        case status
        case taxPercentage = "tax_percentage"
        case timezone
        case version
    }
}

/// Determines the billing cadence of a [Subscription](https://developer.squareup.com/reference/square_2021-08-18/objects/Subscription)
public enum SubscriptionCadence: String, Codable, CaseIterable {
    case daily = "DAILY"
    case weekly = "WEEKLY"
    case everyTwoWeeks = "EVERY_TWO_WEEKS"
    case thirtyDays = "THIRTY_DAYS"
    case sixtyDays = "SIXTY_DAYS"
    case ninetyDays = "NINETY_DAYS"
    case monthly = "MONTHLY"
    case everyTwoMonths = "EVERY_TWO_MONTHS"
    case quarterly = "QUARTERLY"
    case everyFourMonths = "EVERY_FOUR_MONTHS"
    case everySixMonths = "EVERY_SIX_MONTHS"
    case annual = "ANNUAL"
    case everyTwoYears = "EVERY_TWO_YEARS"
}

/// Describes changes to subscription and billing states.
public struct SubscriptionEvent: Codable {
    /// The date, in YYYY-MM-DD format (for
    /// example, 2013-01-15), when the subscription event went into effect.
    public var effectiveDate: String
    /// The ID of the subscription event.
    public var id: String
    public var info: AnyJSON?
    /// The ID of the subscription plan associated with the subscription.
    public var planID: String
    /// Type of the subscription event.
    public var subscriptionEventType: String

    public init(effectiveDate: String, id: String, info: AnyJSON? = nil, planID: String, subscriptionEventType: String) {
        self.effectiveDate = effectiveDate
        self.id = id
        self.info = info
        self.planID = planID
        self.subscriptionEventType = subscriptionEventType
    }

    private enum CodingKeys: String, CodingKey {
        case effectiveDate = "effective_date"
        case id
        case info
        case planID = "plan_id"
        case subscriptionEventType = "subscription_event_type"
    }
}

/// Provides information about the subscription event.
public struct SubscriptionEventInfo: Codable {
    public var code: AnyJSON?
    /// A human-readable explanation for the event.
    public var detail: String?

    public init(code: AnyJSON? = nil, detail: String? = nil) {
        self.code = code
        self.detail = detail
    }
}

/// The possible subscription event info codes.
public enum SubscriptionEventInfoCode: String, Codable, CaseIterable {
    case locationNotActive = "LOCATION_NOT_ACTIVE"
    case locationCannotAcceptPayment = "LOCATION_CANNOT_ACCEPT_PAYMENT"
    case customerDeleted = "CUSTOMER_DELETED"
    case customerNoEmail = "CUSTOMER_NO_EMAIL"
    case customerNoName = "CUSTOMER_NO_NAME"
}

/// The possible subscription event types.
public enum SubscriptionEventSubscriptionEventType: String, Codable, CaseIterable {
    case startSubscription = "START_SUBSCRIPTION"
    case planChange = "PLAN_CHANGE"
    case stopSubscription = "STOP_SUBSCRIPTION"
    case deactivateSubscription = "DEACTIVATE_SUBSCRIPTION"
    case resumeSubscription = "RESUME_SUBSCRIPTION"
}

/// Describes a phase in a subscription plan. For more information, see
/// [Set Up and Manage a Subscription Plan](https://developer.squareup.com/docs/subscriptions-api/setup-plan).
public struct SubscriptionPhase: Codable {
    /// The billing cadence of the phase. For example, weekly or monthly. This field cannot be changed after a `SubscriptionPhase` is created.
    public var cadence: String
    /// The position this phase appears in the sequence of phases defined for the plan, indexed from 0. This field cannot be changed after a `SubscriptionPhase` is created.
    public var ordinal: Int?
    /// The number of `cadence`s the phase lasts. If not set, the phase never ends. Only the last phase can be indefinite. This field cannot be changed after a `SubscriptionPhase` is created.
    public var periods: Int?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var recurringPriceMoney: Money
    /// The Square-assigned ID of the subscription phase. This field cannot be changed after a `SubscriptionPhase` is created.
    public var uid: String?

    public init(cadence: String, ordinal: Int? = nil, periods: Int? = nil, recurringPriceMoney: Money, uid: String? = nil) {
        self.cadence = cadence
        self.ordinal = ordinal
        self.periods = periods
        self.recurringPriceMoney = recurringPriceMoney
        self.uid = uid
    }

    private enum CodingKeys: String, CodingKey {
        case cadence
        case ordinal
        case periods
        case recurringPriceMoney = "recurring_price_money"
        case uid
    }
}

/// Possible subscription status values.
public enum SubscriptionStatus: String, Codable, CaseIterable {
    case pending = "PENDING"
    case active = "ACTIVE"
    case canceled = "CANCELED"
    case deactivated = "DEACTIVATED"
}

/// When to calculate the taxes due on a cart.
public enum TaxCalculationPhase: String, Codable, CaseIterable {
    case taxSubtotalPhase = "TAX_SUBTOTAL_PHASE"
    case taxTotalPhase = "TAX_TOTAL_PHASE"
}

/// The tax IDs that a Location is operating under.
public struct TaxIDs: Codable {
    /// The EU VAT number for this location. For example, "IE3426675K".
    /// If the EU VAT number is present, it is well-formed and has been
    /// validated with VIES, the VAT Information Exchange System.
    public var euVat: String?
    /// The French government uses the NAF (Nomenclature des ActivitÃ©s FranÃ§aises) to display and
    /// track economic statistical data. This is also called the APE (Activite Principale de lâ€™Entreprise) code.
    /// For example, 6910Z.
    public var frNaf: String?
    /// The SIRET (SystÃ¨me d'Identification du RÃ©pertoire des Entreprises et de leurs Etablissements)
    /// number is a 14 digits code issued by the French INSEE. For example, "39922799000021".
    public var frSiret: String?

    public init(euVat: String? = nil, frNaf: String? = nil, frSiret: String? = nil) {
        self.euVat = euVat
        self.frNaf = frNaf
        self.frSiret = frSiret
    }

    private enum CodingKeys: String, CodingKey {
        case euVat = "eu_vat"
        case frNaf = "fr_naf"
        case frSiret = "fr_siret"
    }
}

/// Whether to the tax amount should be additional to or included in the CatalogItem price.
public enum TaxInclusionType: String, Codable, CaseIterable {
    case additive = "ADDITIVE"
    case inclusive = "INCLUSIVE"
}

/// A record representing an individual team member for a business.
public struct TeamMember: Codable {
    /// An object that represents a team member's assignment to locations.
    public var assignedLocations: TeamMemberAssignedLocations?
    /// The timestamp, in RFC 3339 format, describing when the team member was created.
    /// For example, "2018-10-04T04:00:00-07:00" or "2019-02-05T12:00:00Z".
    public var createdAt: String?
    /// The email address associated with the team member.
    public var emailAddress: String?
    /// The family name (that is, the last name) associated with the team member.
    public var familyName: String?
    /// The given name (that is, the first name) associated with the team member.
    public var givenName: String?
    /// The unique ID for the team member.
    public var id: String?
    /// Whether the team member is the owner of the Square account.
    public var isOwner: Bool?
    /// The team member's phone number, in E.164 format. For example:
    /// +14155552671 - the country code is 1 for US
    /// +551155256325 - the country code is 55 for BR
    public var phoneNumber: String?
    /// A second ID used to associate the team member with an entity in another system.
    public var referenceID: String?
    /// Describes the status of the team member.
    public var status: String?
    /// The timestamp, in RFC 3339 format, describing when the team member was last updated.
    /// For example, "2018-10-04T04:00:00-07:00" or "2019-02-05T12:00:00Z".
    public var updatedAt: String?

    public init(assignedLocations: TeamMemberAssignedLocations? = nil, createdAt: String? = nil, emailAddress: String? = nil, familyName: String? = nil, givenName: String? = nil, id: String? = nil, isOwner: Bool? = nil, phoneNumber: String? = nil, referenceID: String? = nil, status: String? = nil, updatedAt: String? = nil) {
        self.assignedLocations = assignedLocations
        self.createdAt = createdAt
        self.emailAddress = emailAddress
        self.familyName = familyName
        self.givenName = givenName
        self.id = id
        self.isOwner = isOwner
        self.phoneNumber = phoneNumber
        self.referenceID = referenceID
        self.status = status
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case assignedLocations = "assigned_locations"
        case createdAt = "created_at"
        case emailAddress = "email_address"
        case familyName = "family_name"
        case givenName = "given_name"
        case id
        case isOwner = "is_owner"
        case phoneNumber = "phone_number"
        case referenceID = "reference_id"
        case status
        case updatedAt = "updated_at"
    }
}

/// An object that represents a team member's assignment to locations.
public struct TeamMemberAssignedLocations: Codable {
    /// The current assignment type of the team member.
    public var assignmentType: String?
    /// The locations that the team member is assigned to.
    public var locationIDs: [String]?

    public init(assignmentType: String? = nil, locationIDs: [String]? = nil) {
        self.assignmentType = assignmentType
        self.locationIDs = locationIDs
    }

    private enum CodingKeys: String, CodingKey {
        case assignmentType = "assignment_type"
        case locationIDs = "location_ids"
    }
}

/// Enumerates the possible assignment types that the team member can have.
public enum TeamMemberAssignedLocationsAssignmentType: String, Codable, CaseIterable {
    case allCurrentAndFutureLocations = "ALL_CURRENT_AND_FUTURE_LOCATIONS"
    case explicitLocations = "EXPLICIT_LOCATIONS"
}

/// The booking profile of a seller's team member, including the team member's ID, display name, description and whether the team member can be booked as a service provider.
public struct TeamMemberBookingProfile: Codable {
    /// The description of the team member.
    public var description: String?
    /// The display name of the team member.
    public var displayName: String?
    /// Indicates whether the team member can be booked through the Bookings API or the seller's online booking channel or site (`true) or not (`false`).
    public var isBookable: Bool?
    /// The URL of the team member's image for the bookings profile.
    public var profileImageURL: String?
    /// The ID of the [TeamMember](https://developer.squareup.com/reference/square_2021-08-18/objects/TeamMember) object for the team member associated with the booking profile.
    public var teamMemberID: String?

    public init(description: String? = nil, displayName: String? = nil, isBookable: Bool? = nil, profileImageURL: String? = nil, teamMemberID: String? = nil) {
        self.description = description
        self.displayName = displayName
        self.isBookable = isBookable
        self.profileImageURL = profileImageURL
        self.teamMemberID = teamMemberID
    }

    private enum CodingKeys: String, CodingKey {
        case description
        case displayName = "display_name"
        case isBookable = "is_bookable"
        case profileImageURL = "profile_image_url"
        case teamMemberID = "team_member_id"
    }
}

/// Enumerates the possible invitation statuses the team member can have within a business.
public enum TeamMemberInvitationStatus: String, Codable, CaseIterable {
    case uninvited = "UNINVITED"
    case pending = "PENDING"
    case accepted = "ACCEPTED"
}

/// Enumerates the possible statuses the team member can have within a business.
public enum TeamMemberStatus: String, Codable, CaseIterable {
    case active = "ACTIVE"
    case inactive = "INACTIVE"
}

/// The hourly wage rate that a team member earns on a `Shift` for doing the job
/// specified by the `title` property of this object.
public struct TeamMemberWage: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var hourlyRate: Money?
    /// The UUID for this object.
    public var id: String?
    /// The `TeamMember` that this wage is assigned to.
    public var teamMemberID: String?
    /// The job title that this wage relates to.
    public var title: String?

    public init(hourlyRate: Money? = nil, id: String? = nil, teamMemberID: String? = nil, title: String? = nil) {
        self.hourlyRate = hourlyRate
        self.id = id
        self.teamMemberID = teamMemberID
        self.title = title
    }

    private enum CodingKeys: String, CodingKey {
        case hourlyRate = "hourly_rate"
        case id
        case teamMemberID = "team_member_id"
        case title
    }
}

/// Represents a tender (i.e., a method of payment) used in a Square transaction.
public struct Tender: Codable {
    /// Additional recipients (other than the merchant) receiving a portion of this tender.
    /// For example, fees assessed on the purchase by a third party integration.
    public var additionalRecipients: [AdditionalRecipient]?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money?
    /// Represents additional details of a tender with `type` `CARD` or `SQUARE_GIFT_CARD`
    public var cardDetails: TenderCardDetails?
    /// Represents the details of a tender with `type` `CASH`.
    public var cashDetails: TenderCashDetails?
    /// The timestamp for when the tender was created, in RFC 3339 format.
    public var createdAt: String?
    /// If the tender is associated with a customer or represents a customer's card on file,
    /// this is the ID of the associated customer.
    public var customerID: String?
    /// The tender's unique ID.
    public var id: String?
    /// The ID of the transaction's associated location.
    public var locationID: String?
    /// An optional note associated with the tender at the time of payment.
    public var note: String?
    /// The ID of the [Payment](https://developer.squareup.com/reference/square_2021-08-18/objects/Payment) that corresponds to this tender.
    /// This value is only present for payments created with the v2 Payments API.
    public var paymentID: String?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var processingFeeMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var tipMoney: Money?
    /// The ID of the tender's associated transaction.
    public var transactionID: String?
    /// The type of tender, such as `CARD` or `CASH`.
    public var type: String

    public init(additionalRecipients: [AdditionalRecipient]? = nil, amountMoney: Money? = nil, cardDetails: TenderCardDetails? = nil, cashDetails: TenderCashDetails? = nil, createdAt: String? = nil, customerID: String? = nil, id: String? = nil, locationID: String? = nil, note: String? = nil, paymentID: String? = nil, processingFeeMoney: Money? = nil, tipMoney: Money? = nil, transactionID: String? = nil, type: String) {
        self.additionalRecipients = additionalRecipients
        self.amountMoney = amountMoney
        self.cardDetails = cardDetails
        self.cashDetails = cashDetails
        self.createdAt = createdAt
        self.customerID = customerID
        self.id = id
        self.locationID = locationID
        self.note = note
        self.paymentID = paymentID
        self.processingFeeMoney = processingFeeMoney
        self.tipMoney = tipMoney
        self.transactionID = transactionID
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case additionalRecipients = "additional_recipients"
        case amountMoney = "amount_money"
        case cardDetails = "card_details"
        case cashDetails = "cash_details"
        case createdAt = "created_at"
        case customerID = "customer_id"
        case id
        case locationID = "location_id"
        case note
        case paymentID = "payment_id"
        case processingFeeMoney = "processing_fee_money"
        case tipMoney = "tip_money"
        case transactionID = "transaction_id"
        case type
    }
}

/// Represents additional details of a tender with `type` `CARD` or `SQUARE_GIFT_CARD`
public struct TenderCardDetails: Codable {
    /// Represents the payment details of a card to be used for payments. These
    /// details are determined by the payment token generated by Web Payments SDK.
    public var card: Card?
    /// The method used to enter the card's details for the transaction.
    public var entryMethod: String?
    /// The credit card payment's current state (such as `AUTHORIZED` or
    /// `CAPTURED`). See [TenderCardDetailsStatus](https://developer.squareup.com/reference/square_2021-08-18/objects/TenderCardDetailsStatus)
    /// for possible values.
    public var status: String?

    public init(card: Card? = nil, entryMethod: String? = nil, status: String? = nil) {
        self.card = card
        self.entryMethod = entryMethod
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case card
        case entryMethod = "entry_method"
        case status
    }
}

/// Indicates the method used to enter the card's details.
public enum TenderCardDetailsEntryMethod: String, Codable, CaseIterable {
    case swiped = "SWIPED"
    case keyed = "KEYED"
    case emv = "EMV"
    case onFile = "ON_FILE"
    case contactless = "CONTACTLESS"
}

/// Indicates the card transaction's current status.
public enum TenderCardDetailsStatus: String, Codable, CaseIterable {
    case authorized = "AUTHORIZED"
    case captured = "CAPTURED"
    case voided = "VOIDED"
    case failed = "FAILED"
}

/// Represents the details of a tender with `type` `CASH`.
public struct TenderCashDetails: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var buyerTenderedMoney: Money?
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var changeBackMoney: Money?

    public init(buyerTenderedMoney: Money? = nil, changeBackMoney: Money? = nil) {
        self.buyerTenderedMoney = buyerTenderedMoney
        self.changeBackMoney = changeBackMoney
    }

    private enum CodingKeys: String, CodingKey {
        case buyerTenderedMoney = "buyer_tendered_money"
        case changeBackMoney = "change_back_money"
    }
}

/// Indicates a tender's type.
public enum TenderType: String, Codable, CaseIterable {
    case card = "CARD"
    case cash = "CASH"
    case thirdPartyCard = "THIRD_PARTY_CARD"
    case squareGiftCard = "SQUARE_GIFT_CARD"
    case noSale = "NO_SALE"
    case wallet = "WALLET"
    case other = "OTHER"
}

public struct TerminalCheckout: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money
    /// The ID of the application that created the checkout.
    public var appID: String?
    /// Present if the status is `CANCELED`.
    public var cancelReason: String?
    /// The time when the `TerminalCheckout` was created, as an RFC 3339 timestamp.
    public var createdAt: String?
    /// An RFC 3339 duration, after which the checkout is automatically canceled.
    /// A `TerminalCheckout` that is `PENDING` is automatically `CANCELED` and has a cancellation reason
    /// of `TIMED_OUT`.
    /// 
    /// Default: 5 minutes from creation
    /// 
    /// Maximum: 5 minutes
    public var deadlineDuration: String?
    public var deviceOptions: DeviceCheckoutOptions
    /// A unique ID for this `TerminalCheckout`.
    public var id: String?
    /// The location of the device where the `TerminalCheckout` was directed.
    public var locationID: String?
    /// An optional note to associate with the checkout, as well as with any payments used to complete the checkout.
    public var note: String?
    /// A list of IDs for payments created by this `TerminalCheckout`.
    public var paymentIDs: [String]?
    /// The type of payment the terminal should attempt to capture from. Defaults to `CARD_PRESENT`.
    public var paymentType: String?
    /// An optional user-defined reference ID that can be used to associate
    /// this `TerminalCheckout` to another entity in an external system. For example, an order
    /// ID generated by a third-party shopping cart. The ID is also associated with any payments
    /// used to complete the checkout.
    public var referenceID: String?
    /// The status of the `TerminalCheckout`.
    /// Options: `PENDING`, `IN_PROGRESS`, `CANCEL_REQUESTED`, `CANCELED`, `COMPLETED`
    public var status: String?
    /// The time when the `TerminalCheckout` was last updated, as an RFC 3339 timestamp.
    public var updatedAt: String?

    public init(amountMoney: Money, appID: String? = nil, cancelReason: String? = nil, createdAt: String? = nil, deadlineDuration: String? = nil, deviceOptions: DeviceCheckoutOptions, id: String? = nil, locationID: String? = nil, note: String? = nil, paymentIDs: [String]? = nil, paymentType: String? = nil, referenceID: String? = nil, status: String? = nil, updatedAt: String? = nil) {
        self.amountMoney = amountMoney
        self.appID = appID
        self.cancelReason = cancelReason
        self.createdAt = createdAt
        self.deadlineDuration = deadlineDuration
        self.deviceOptions = deviceOptions
        self.id = id
        self.locationID = locationID
        self.note = note
        self.paymentIDs = paymentIDs
        self.paymentType = paymentType
        self.referenceID = referenceID
        self.status = status
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
        case appID = "app_id"
        case cancelReason = "cancel_reason"
        case createdAt = "created_at"
        case deadlineDuration = "deadline_duration"
        case deviceOptions = "device_options"
        case id
        case locationID = "location_id"
        case note
        case paymentIDs = "payment_ids"
        case paymentType = "payment_type"
        case referenceID = "reference_id"
        case status
        case updatedAt = "updated_at"
    }
}

public struct TerminalCheckoutQuery: Codable {
    public var filter: TerminalCheckoutQueryFilter?
    public var sort: TerminalCheckoutQuerySort?

    public init(filter: TerminalCheckoutQueryFilter? = nil, sort: TerminalCheckoutQuerySort? = nil) {
        self.filter = filter
        self.sort = sort
    }
}

public struct TerminalCheckoutQueryFilter: Codable {
    /// Represents a generic time range. The start and end values are
    /// represented in RFC 3339 format. Time ranges are customized to be
    /// inclusive or exclusive based on the needs of a particular endpoint.
    /// Refer to the relevant endpoint-specific documentation to determine
    /// how time ranges are handled.
    public var createdAt: TimeRange?
    /// The `TerminalCheckout` objects associated with a specific device. If no device is specified, then all
    /// `TerminalCheckout` objects for the merchant are displayed.
    public var deviceID: String?
    /// Filtered results with the desired status of the `TerminalCheckout`.
    /// Options: PENDING, IN_PROGRESS, CANCELED, COMPLETED
    public var status: String?

    public init(createdAt: TimeRange? = nil, deviceID: String? = nil, status: String? = nil) {
        self.createdAt = createdAt
        self.deviceID = deviceID
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case createdAt = "created_at"
        case deviceID = "device_id"
        case status
    }
}

public struct TerminalCheckoutQuerySort: Codable {
    /// The order in which results are listed.
    /// - `ASC` - Oldest to newest.
    /// - `DESC` - Newest to oldest (default).
    public var sortOrder: String?

    public init(sortOrder: String? = nil) {
        self.sortOrder = sortOrder
    }

    private enum CodingKeys: String, CodingKey {
        case sortOrder = "sort_order"
    }
}

public struct TerminalRefund: Codable {
    /// Represents an amount of money. `Money` fields can be signed or unsigned.
    /// Fields that do not explicitly define whether they are signed or unsigned are
    /// considered unsigned and can only hold positive amounts. For signed fields, the
    /// sign of the value indicates the purpose of the money transfer. See
    /// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    /// for more information.
    public var amountMoney: Money
    /// The ID of the application that created the refund.
    public var appID: String?
    /// Present if the status is `CANCELED`.
    public var cancelReason: String?
    /// The time when the `TerminalRefund` was created, as an RFC 3339 timestamp.
    public var createdAt: String?
    /// The RFC 3339 duration, after which the refund is automatically canceled.
    /// A `TerminalRefund` that is `PENDING` is automatically `CANCELED` and has a cancellation reason
    /// of `TIMED_OUT`.
    /// 
    /// Default: 5 minutes from creation.
    /// 
    /// Maximum: 5 minutes
    public var deadlineDuration: String?
    /// The unique ID of the device intended for this `TerminalRefund`.
    /// The Id can be retrieved from /v2/devices api.
    public var deviceID: String?
    /// A unique ID for this `TerminalRefund`.
    public var id: String?
    /// The location of the device where the `TerminalRefund` was directed.
    public var locationID: String?
    /// The reference to the Square order ID for the payment identified by the `payment_id`.
    public var orderID: String?
    /// The unique ID of the payment being refunded.
    public var paymentID: String
    /// A description of the reason for the refund.
    /// Note: maximum 192 characters
    public var reason: String?
    /// The reference to the payment refund created by completing this `TerminalRefund`.
    public var refundID: String?
    /// The status of the `TerminalRefund`.
    /// Options: `PENDING`, `IN_PROGRESS`, `CANCELED`, or `COMPLETED`.
    public var status: String?
    /// The time when the `TerminalRefund` was last updated, as an RFC 3339 timestamp.
    public var updatedAt: String?

    public init(amountMoney: Money, appID: String? = nil, cancelReason: String? = nil, createdAt: String? = nil, deadlineDuration: String? = nil, deviceID: String? = nil, id: String? = nil, locationID: String? = nil, orderID: String? = nil, paymentID: String, reason: String? = nil, refundID: String? = nil, status: String? = nil, updatedAt: String? = nil) {
        self.amountMoney = amountMoney
        self.appID = appID
        self.cancelReason = cancelReason
        self.createdAt = createdAt
        self.deadlineDuration = deadlineDuration
        self.deviceID = deviceID
        self.id = id
        self.locationID = locationID
        self.orderID = orderID
        self.paymentID = paymentID
        self.reason = reason
        self.refundID = refundID
        self.status = status
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
        case appID = "app_id"
        case cancelReason = "cancel_reason"
        case createdAt = "created_at"
        case deadlineDuration = "deadline_duration"
        case deviceID = "device_id"
        case id
        case locationID = "location_id"
        case orderID = "order_id"
        case paymentID = "payment_id"
        case reason
        case refundID = "refund_id"
        case status
        case updatedAt = "updated_at"
    }
}

public struct TerminalRefundQuery: Codable {
    public var filter: TerminalRefundQueryFilter?
    public var sort: TerminalRefundQuerySort?

    public init(filter: TerminalRefundQueryFilter? = nil, sort: TerminalRefundQuerySort? = nil) {
        self.filter = filter
        self.sort = sort
    }
}

public struct TerminalRefundQueryFilter: Codable {
    /// Represents a generic time range. The start and end values are
    /// represented in RFC 3339 format. Time ranges are customized to be
    /// inclusive or exclusive based on the needs of a particular endpoint.
    /// Refer to the relevant endpoint-specific documentation to determine
    /// how time ranges are handled.
    public var createdAt: TimeRange?
    /// `TerminalRefund` objects associated with a specific device. If no device is specified, then all
    /// `TerminalRefund` objects for the signed-in account are displayed.
    public var deviceID: String?
    /// Filtered results with the desired status of the `TerminalRefund`.
    /// Options: `PENDING`, `IN_PROGRESS`, `CANCEL_REQUESTED`, `CANCELED`, or `COMPLETED`.
    public var status: String?

    public init(createdAt: TimeRange? = nil, deviceID: String? = nil, status: String? = nil) {
        self.createdAt = createdAt
        self.deviceID = deviceID
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case createdAt = "created_at"
        case deviceID = "device_id"
        case status
    }
}

public struct TerminalRefundQuerySort: Codable {
    /// The order in which results are listed.
    /// - `ASC` - Oldest to newest.
    /// - `DESC` - Newest to oldest (default).
    public var sortOrder: String?

    public init(sortOrder: String? = nil) {
        self.sortOrder = sortOrder
    }

    private enum CodingKeys: String, CodingKey {
        case sortOrder = "sort_order"
    }
}

/// Represents a generic time range. The start and end values are
/// represented in RFC 3339 format. Time ranges are customized to be
/// inclusive or exclusive based on the needs of a particular endpoint.
/// Refer to the relevant endpoint-specific documentation to determine
/// how time ranges are handled.
public struct TimeRange: Codable {
    /// A datetime value in RFC 3339 format indicating when the time range
    /// ends.
    public var endAt: String?
    /// A datetime value in RFC 3339 format indicating when the time range
    /// starts.
    public var startAt: String?

    public init(endAt: String? = nil, startAt: String? = nil) {
        self.endAt = endAt
        self.startAt = startAt
    }

    private enum CodingKeys: String, CodingKey {
        case endAt = "end_at"
        case startAt = "start_at"
    }
}

public struct TipSettings: Codable {
    /// Indicates whether tipping is enabled for this checkout. Defaults to false.
    public var allowTipping: Bool?
    /// Indicates whether custom tip amounts are allowed during the checkout flow. Defaults to false.
    public var isCustomTipField: Bool?
    /// Indicates whether tip options should be presented on the screen before presenting
    /// the signature screen during card payment. Defaults to false.
    public var isSeparateTipScreen: Bool?
    /// Enables the "Smart Tip Amounts" behavior.
    /// Exact tipping options depend on the region in which the Square seller is active.
    /// 
    /// For payments under 10.00, in the Australia, Canada, Ireland, United Kingdom, and United States, tipping options are presented as no tip, .50, 1.00 or 2.00.
    /// 
    /// For payment amounts of 10.00 or greater, tipping options are presented as the following percentages: 0%, 5%, 10%, 15%.
    /// 
    /// If set to true, the `tip_percentages` settings is ignored.
    /// Defaults to false.
    /// 
    /// To learn more about smart tipping, see [Accept Tips with the Square App](https://squareup.com/help/us/en/article/5069-accept-tips-with-the-square-app).
    public var isSmartTipping: Bool?
    /// A list of tip percentages that should be presented during the checkout flow, specified as
    /// up to 3 non-negative integers from 0 to 100 (inclusive). Defaults to 15, 20, and 25.
    public var tipPercentages: [Int]?

    public init(allowTipping: Bool? = nil, isCustomTipField: Bool? = nil, isSeparateTipScreen: Bool? = nil, isSmartTipping: Bool? = nil, tipPercentages: [Int]? = nil) {
        self.allowTipping = allowTipping
        self.isCustomTipField = isCustomTipField
        self.isSeparateTipScreen = isSeparateTipScreen
        self.isSmartTipping = isSmartTipping
        self.tipPercentages = tipPercentages
    }

    private enum CodingKeys: String, CodingKey {
        case allowTipping = "allow_tipping"
        case isCustomTipField = "custom_tip_field"
        case isSeparateTipScreen = "separate_tip_screen"
        case isSmartTipping = "smart_tipping"
        case tipPercentages = "tip_percentages"
    }
}

/// Represents a transaction processed with Square, either with the
/// Connect API or with Square Point of Sale.
/// 
/// The `tenders` field of this object lists all methods of payment used to pay in
/// the transaction.
public struct Transaction: Codable {
    /// If the transaction was created in the Square Point of Sale app, this value
    /// is the ID generated for the transaction by Square Point of Sale.
    /// 
    /// This ID has no relationship to the transaction's canonical `id`, which is
    /// generated by Square's backend servers. This value is generated for bookkeeping
    /// purposes, in case the transaction cannot immediately be completed (for example,
    /// if the transaction is processed in offline mode).
    /// 
    /// It is not currently possible with the Connect API to perform a transaction
    /// lookup by this value.
    public var clientID: String?
    /// The timestamp for when the transaction was created, in RFC 3339 format.
    public var createdAt: String?
    /// The transaction's unique ID, issued by Square payments servers.
    public var id: String?
    /// The ID of the transaction's associated location.
    public var locationID: String?
    /// The order_id is an identifier for the order associated with this transaction, if any.
    public var orderID: String?
    /// The Square product that processed the transaction.
    public var product: String?
    /// If the transaction was created with the [Charge](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/charge)
    /// endpoint, this value is the same as the value provided for the `reference_id`
    /// parameter in the request to that endpoint. Otherwise, it is not set.
    public var referenceID: String?
    /// Refunds that have been applied to any tender in the transaction.
    public var refunds: [Refund]?
    /// Represents a postal address in a country. The address format is based
    /// on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
    /// see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
    /// This format has dedicated fields for four address components: postal code,
    /// locality (city), administrative district (state, prefecture, or province), and
    /// sublocality (town or village). These components have dedicated fields in the
    /// `Address` object because software sometimes behaves differently based on them.
    /// For example, sales tax software may charge different amounts of sales tax
    /// based on the postal code, and some software is only available in
    /// certain states due to compliance reasons.
    /// 
    /// For the remaining address components, the `Address` type provides the
    /// `address_line_1` and `address_line_2` fields for free-form data entry.
    /// These fields are free-form because the remaining address components have
    /// too many variations around the world and typical software does not parse
    /// these components. These fields enable users to enter anything they want.
    /// 
    /// Note that, in the current implementation, all other `Address` type fields are blank.
    /// These include `address_line_3`, `sublocality_2`, `sublocality_3`,
    /// `administrative_district_level_2`, `administrative_district_level_3`,
    /// `first_name`, `last_name`, and `organization`.
    /// 
    /// When it comes to localization, the seller's language preferences
    /// (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
    /// are ignored for addresses. Even though Square products (such as Square Point of Sale
    /// and the Seller Dashboard) mostly use a seller's language preference in
    /// communication, when it comes to addresses, they will use English for a US address,
    /// Japanese for an address in Japan, and so on.
    public var shippingAddress: Address?
    /// The tenders used to pay in the transaction.
    public var tenders: [Tender]?

    public init(clientID: String? = nil, createdAt: String? = nil, id: String? = nil, locationID: String? = nil, orderID: String? = nil, product: String? = nil, referenceID: String? = nil, refunds: [Refund]? = nil, shippingAddress: Address? = nil, tenders: [Tender]? = nil) {
        self.clientID = clientID
        self.createdAt = createdAt
        self.id = id
        self.locationID = locationID
        self.orderID = orderID
        self.product = product
        self.referenceID = referenceID
        self.refunds = refunds
        self.shippingAddress = shippingAddress
        self.tenders = tenders
    }

    private enum CodingKeys: String, CodingKey {
        case clientID = "client_id"
        case createdAt = "created_at"
        case id
        case locationID = "location_id"
        case orderID = "order_id"
        case product
        case referenceID = "reference_id"
        case refunds
        case shippingAddress = "shipping_address"
        case tenders
    }
}

/// Indicates the Square product used to process a transaction.
public enum TransactionProduct: String, Codable, CaseIterable {
    case register = "REGISTER"
    case externalAPI = "EXTERNAL_API"
    case billing = "BILLING"
    case appointments = "APPOINTMENTS"
    case invoices = "INVOICES"
    case onlineStore = "ONLINE_STORE"
    case payroll = "PAYROLL"
    case other = "OTHER"
}

/// The transaction type used in the disputed payment.
public enum TransactionType: String, Codable, CaseIterable {
    case debit = "DEBIT"
    case credit = "CREDIT"
}

/// A request to unlink a customer to a gift card
///
/// Example:
///
/// {
///   "request_body" : {
///     "customer_id" : "GKY0FZ3V717AH8Q2D821PNT2ZW"
///   },
///   "request_params" : "?gift_card_id=gftc:71ea002277a34f8a945e284b04822edb"
/// }
public struct UnlinkCustomerFromGiftCardRequest: Codable {
    public var customerID: String

    public init(customerID: String) {
        self.customerID = customerID
    }

    private enum CodingKeys: String, CodingKey {
        case customerID = "customer_id"
    }
}

/// A response that contains one `GiftCard` that was unlinked. The response might contain a set of `Error`
/// objects if the request resulted in errors.
///
/// Example:
///
/// {
///   "gift_card" : {
///     "balance_money" : {
///       "amount" : 2500,
///       "currency" : "USD"
///     },
///     "created_at" : "2021-03-25T05:13:01Z",
///     "gan" : "7783320005440920",
///     "gan_source" : "SQUARE",
///     "id" : "gftc:71ea002277a34f8a945e284b04822edb",
///     "state" : "ACTIVE",
///     "type" : "DIGITAL"
///   }
/// }
public struct UnlinkCustomerFromGiftCardResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Represents a Square gift card.
    public var giftCard: GiftCard?

    public init(errors: [Error]? = nil, giftCard: GiftCard? = nil) {
        self.errors = errors
        self.giftCard = giftCard
    }

    private enum CodingKeys: String, CodingKey {
        case errors
        case giftCard = "gift_card"
    }
}

/// Example:
///
/// {
///   "booking" : {
///     "customer_note" : "I would like to sit near the window please",
///     "version" : 1
///   }
/// }
public struct UpdateBookingRequest: Codable {
    /// Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service
    /// at a given location to a requesting customer in one or more appointment segments.
    public var booking: Booking
    /// A unique key to make this request an idempotent operation.
    public var idempotencyKey: String?

    public init(booking: Booking, idempotencyKey: String? = nil) {
        self.booking = booking
        self.idempotencyKey = idempotencyKey
    }

    private enum CodingKeys: String, CodingKey {
        case booking
        case idempotencyKey = "idempotency_key"
    }
}

/// Example:
///
/// {
///   "booking" : {
///     "appointment_segments" : [
///       {
///         "duration_minutes" : 60,
///         "service_variation_id" : "RU3PBTZTK7DXZDQFCJHOK2MC",
///         "service_variation_version" : 1599775456731,
///         "team_member_id" : "TMXUrsBWWcHTt79t"
///       }
///     ],
///     "created_at" : "2020-10-28T15:47:41Z",
///     "customer_id" : "EX2QSVGTZN4K1E5QE1CBFNVQ8M",
///     "customer_note" : "I would like to sit near the window please",
///     "id" : "zkras0xv0xwswx",
///     "location_id" : "LEQHH0YY8B42M",
///     "seller_note" : null,
///     "start_at" : "2020-11-26T13:00:00Z",
///     "status" : "ACCEPTED",
///     "updated_at" : "2020-10-28T15:49:25Z",
///     "version" : 2
///   },
///   "errors" : [
/// 
///   ]
/// }
public struct UpdateBookingResponse: Codable {
    /// Represents a booking as a time-bound service contract for a seller's staff member to provide a specified service
    /// at a given location to a requesting customer in one or more appointment segments.
    public var booking: Booking?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(booking: Booking? = nil, errors: [Error]? = nil) {
        self.booking = booking
        self.errors = errors
    }
}

/// A request to update a `BreakType`.
///
/// Example:
///
/// {
///   "request_body" : {
///     "break_type" : {
///       "break_name" : "Lunch",
///       "expected_duration" : "PT50M",
///       "is_paid" : true,
///       "location_id" : "26M7H24AZ9N6R",
///       "version" : 1
///     }
///   }
/// }
public struct UpdateBreakTypeRequest: Codable {
    /// A defined break template that sets an expectation for possible `Break`
    /// instances on a `Shift`.
    public var breakType: BreakType

    public init(breakType: BreakType) {
        self.breakType = breakType
    }

    private enum CodingKeys: String, CodingKey {
        case breakType = "break_type"
    }
}

/// A response to a request to update a `BreakType`. The response contains
/// the requested `BreakType` objects and might contain a set of `Error` objects if
/// the request resulted in errors.
///
/// Example:
///
/// {
///   "break_type" : {
///     "break_name" : "Lunch",
///     "created_at" : "2018-06-12T20:19:12Z",
///     "expected_duration" : "PT50M",
///     "id" : "Q6JSJS6D4DBCH",
///     "is_paid" : true,
///     "location_id" : "26M7H24AZ9N6R",
///     "updated_at" : "2019-02-26T23:12:59Z",
///     "version" : 2
///   }
/// }
public struct UpdateBreakTypeResponse: Codable {
    /// A defined break template that sets an expectation for possible `Break`
    /// instances on a `Shift`.
    public var breakType: BreakType?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(breakType: BreakType? = nil, errors: [Error]? = nil) {
        self.breakType = breakType
        self.errors = errors
    }

    private enum CodingKeys: String, CodingKey {
        case breakType = "break_type"
        case errors
    }
}

/// Defines the body parameters that can be included in a request to the
/// [UpdateCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/update-customer-group) endpoint.
///
/// Example:
///
/// {
///   "request_body" : {
///     "group" : {
///       "name" : "Loyal Customers"
///     }
///   }
/// }
public struct UpdateCustomerGroupRequest: Codable {
    /// Represents a group of customer profiles.
    /// 
    /// Customer groups can be created, be modified, and have their membership defined using
    /// the Customers API or within the Customer Directory in the Square Seller Dashboard or Point of Sale.
    public var group: CustomerGroup

    public init(group: CustomerGroup) {
        self.group = group
    }
}

/// Defines the fields that are included in the response body of
/// a request to the [UpdateCustomerGroup](https://developer.squareup.com/reference/square_2021-08-18/customer-groups-api/update-customer-group) endpoint.
/// 
/// Either `errors` or `group` is present in a given response (never both).
///
/// Example:
///
/// {
///   "group" : {
///     "created_at" : "2020-04-13T21:54:57.863Z",
///     "id" : "2TAT3CMH4Q0A9M87XJZED0WMR3",
///     "name" : "Loyal Customers",
///     "updated_at" : "2020-04-13T21:54:58Z"
///   }
/// }
public struct UpdateCustomerGroupResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Represents a group of customer profiles.
    /// 
    /// Customer groups can be created, be modified, and have their membership defined using
    /// the Customers API or within the Customer Directory in the Square Seller Dashboard or Point of Sale.
    public var group: CustomerGroup?

    public init(errors: [Error]? = nil, group: CustomerGroup? = nil) {
        self.errors = errors
        self.group = group
    }
}

/// Defines the body parameters that can be included in a request to the
/// `UpdateCustomer` endpoint.
///
/// Example:
///
/// {
///   "request_body" : {
///     "email_address" : "New.Amelia.Earhart@example.com",
///     "note" : "updated customer note",
///     "phone_number" : null,
///     "version" : 2
///   }
/// }
public struct UpdateCustomerRequest: Codable {
    /// Represents a postal address in a country. The address format is based
    /// on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
    /// see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
    /// This format has dedicated fields for four address components: postal code,
    /// locality (city), administrative district (state, prefecture, or province), and
    /// sublocality (town or village). These components have dedicated fields in the
    /// `Address` object because software sometimes behaves differently based on them.
    /// For example, sales tax software may charge different amounts of sales tax
    /// based on the postal code, and some software is only available in
    /// certain states due to compliance reasons.
    /// 
    /// For the remaining address components, the `Address` type provides the
    /// `address_line_1` and `address_line_2` fields for free-form data entry.
    /// These fields are free-form because the remaining address components have
    /// too many variations around the world and typical software does not parse
    /// these components. These fields enable users to enter anything they want.
    /// 
    /// Note that, in the current implementation, all other `Address` type fields are blank.
    /// These include `address_line_3`, `sublocality_2`, `sublocality_3`,
    /// `administrative_district_level_2`, `administrative_district_level_3`,
    /// `first_name`, `last_name`, and `organization`.
    /// 
    /// When it comes to localization, the seller's language preferences
    /// (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
    /// are ignored for addresses. Even though Square products (such as Square Point of Sale
    /// and the Seller Dashboard) mostly use a seller's language preference in
    /// communication, when it comes to addresses, they will use English for a US address,
    /// Japanese for an address in Japan, and so on.
    public var address: Address?
    /// The birthday associated with the customer profile, in RFC 3339 format. The year is optional. The timezone and time are not allowed.
    /// For example, `0000-09-21T00:00:00-00:00` represents a birthday on September 21 and `1998-09-21T00:00:00-00:00` represents a birthday on September 21, 1998.
    /// You can also specify this value in `YYYY-MM-DD` format.
    public var birthday: String?
    /// A business name associated with the customer profile.
    public var companyName: String?
    /// The email address associated with the customer profile.
    public var emailAddress: String?
    /// The family name (that is, the last name) associated with the customer profile.
    public var familyName: String?
    /// The given name (that is, the first name) associated with the customer profile.
    public var givenName: String?
    /// A nickname for the customer profile.
    public var nickname: String?
    /// A custom note associated with the customer profile.
    public var note: String?
    /// The 11-digit phone number associated with the customer profile.
    public var phoneNumber: String?
    /// An optional second ID used to associate the customer profile with an
    /// entity in another system.
    public var referenceID: String?
    /// The current version of the customer profile.
    /// 
    /// As a best practice, you should include this field to enable [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency) control. For more information, see [Update a customer profile](https://developer.squareup.com/docs/customers-api/use-the-api/keep-records#update-a-customer-profile).
    public var version: Int?

    public init(address: Address? = nil, birthday: String? = nil, companyName: String? = nil, emailAddress: String? = nil, familyName: String? = nil, givenName: String? = nil, nickname: String? = nil, note: String? = nil, phoneNumber: String? = nil, referenceID: String? = nil, version: Int? = nil) {
        self.address = address
        self.birthday = birthday
        self.companyName = companyName
        self.emailAddress = emailAddress
        self.familyName = familyName
        self.givenName = givenName
        self.nickname = nickname
        self.note = note
        self.phoneNumber = phoneNumber
        self.referenceID = referenceID
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case address
        case birthday
        case companyName = "company_name"
        case emailAddress = "email_address"
        case familyName = "family_name"
        case givenName = "given_name"
        case nickname
        case note
        case phoneNumber = "phone_number"
        case referenceID = "reference_id"
        case version
    }
}

/// Defines the fields that are included in the response body of
/// a request to the `UpdateCustomer` endpoint.
/// 
/// Either `errors` or `customer` is present in a given response (never both).
///
/// Example:
///
/// {
///   "customer" : {
///     "address" : {
///       "address_line_1" : "500 Electric Ave",
///       "address_line_2" : "Suite 600",
///       "administrative_district_level_1" : "NY",
///       "country" : "US",
///       "locality" : "New York",
///       "postal_code" : "10003"
///     },
///     "created_at" : "2016-03-23T20:21:54.859Z",
///     "creation_source" : "THIRD_PARTY",
///     "email_address" : "New.Amelia.Earhart@example.com",
///     "family_name" : "Earhart",
///     "given_name" : "Amelia",
///     "id" : "JDKYHBWT1D4F8MFH63DBMEN8Y4",
///     "note" : "updated customer note",
///     "preferences" : {
///       "email_unsubscribed" : false
///     },
///     "reference_id" : "YOUR_REFERENCE_ID",
///     "updated_at" : "2016-05-15T20:21:55Z",
///     "version" : 3
///   }
/// }
public struct UpdateCustomerResponse: Codable {
    /// Represents a Square customer profile in the Customer Directory of a Square seller.
    public var customer: Customer?
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(customer: Customer? = nil, errors: [Error]? = nil) {
        self.customer = customer
        self.errors = errors
    }
}

/// Describes a `UpdateInvoice` request.
///
/// Example:
///
/// {
///   "request_body" : {
///     "fields_to_clear" : [
///       "payments_requests[2da7964f-f3d2-4f43-81e8-5aa220bf3355].reminders"
///     ],
///     "idempotency_key" : "4ee82288-0910-499e-ab4c-5d0071dad1be",
///     "invoice" : {
///       "payment_requests" : [
///         {
///           "tipping_enabled" : false,
///           "uid" : "2da7964f-f3d2-4f43-81e8-5aa220bf3355"
///         }
///       ]
///     }
///   }
/// }
public struct UpdateInvoiceRequest: Codable {
    /// The list of fields to clear.
    /// For examples, see [Update an invoice](https://developer.squareup.com/docs/invoices-api/overview#update-an-invoice).
    public var fieldsToClear: [String]?
    /// A unique string that identifies the `UpdateInvoice` request. If you do not
    /// provide `idempotency_key` (or provide an empty string as the value), the endpoint
    /// treats each request as independent.
    /// 
    /// For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
    public var idempotencyKey: String?
    /// Stores information about an invoice. You use the Invoices API to create and manage
    /// invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
    public var invoice: Invoice

    public init(fieldsToClear: [String]? = nil, idempotencyKey: String? = nil, invoice: Invoice) {
        self.fieldsToClear = fieldsToClear
        self.idempotencyKey = idempotencyKey
        self.invoice = invoice
    }

    private enum CodingKeys: String, CodingKey {
        case fieldsToClear = "fields_to_clear"
        case idempotencyKey = "idempotency_key"
        case invoice
    }
}

/// Describes a `UpdateInvoice` response.
///
/// Example:
///
/// {
///   "invoice" : {
///     "accepted_payment_methods" : {
///       "bank_account" : false,
///       "card" : true,
///       "square_gift_card" : false
///     },
///     "created_at" : "2020-06-18T17:45:13Z",
///     "custom_fields" : [
///       {
///         "label" : "Event Reference Number",
///         "placement" : "ABOVE_LINE_ITEMS",
///         "value" : "Ref. #1234"
///       },
///       {
///         "label" : "Terms of Service",
///         "placement" : "BELOW_LINE_ITEMS",
///         "value" : "The terms of service are..."
///       }
///     ],
///     "delivery_method" : "EMAIL",
///     "description" : "We appreciate your business!",
///     "id" : "inv:0-ChCHu2mZEabLeeHahQnXDjZQECY",
///     "invoice_number" : "inv-100",
///     "location_id" : "ES0RJRZYEC39A",
///     "next_payment_amount_money" : {
///       "amount" : 10000,
///       "currency" : "USD"
///     },
///     "order_id" : "CAISENgvlJ6jLWAzERDzjyHVybY",
///     "payment_requests" : [
///       {
///         "automatic_payment_source" : "NONE",
///         "computed_amount_money" : {
///           "amount" : 10000,
///           "currency" : "USD"
///         },
///         "due_date" : "2030-01-24",
///         "request_type" : "BALANCE",
///         "tipping_enabled" : false,
///         "total_completed_amount_money" : {
///           "amount" : 0,
///           "currency" : "USD"
///         },
///         "uid" : "2da7964f-f3d2-4f43-81e8-5aa220bf3355"
///       }
///     ],
///     "primary_recipient" : {
///       "customer_id" : "JDKYHBWT1D4F8MFH63DBMEN8Y4",
///       "email_address" : "Amelia.Earhart@example.com",
///       "family_name" : "Earhart",
///       "given_name" : "Amelia",
///       "phone_number" : "1-212-555-4240"
///     },
///     "scheduled_at" : "2030-01-13T10:00:00Z",
///     "status" : "UNPAID",
///     "timezone" : "America\/Los_Angeles",
///     "title" : "Event Planning Services",
///     "updated_at" : "2020-06-18T18:23:11Z",
///     "version" : 2
///   }
/// }
public struct UpdateInvoiceResponse: Codable {
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// Stores information about an invoice. You use the Invoices API to create and manage
    /// invoices. For more information, see [Manage Invoices Using the Invoices API](https://developer.squareup.com/docs/invoices-api/overview).
    public var invoice: Invoice?

    public init(errors: [Error]? = nil, invoice: Invoice? = nil) {
        self.errors = errors
        self.invoice = invoice
    }
}

/// Example:
///
/// {
///   "request_body" : {
///     "item_ids" : [
///       "H42BRLUJ5KTZTTMPVSLFAACQ",
///       "2JXOBJIHCWBQ4NZ3RIXQGJA6"
///     ],
///     "modifier_lists_to_disable" : [
///       "7WRC16CJZDVLSNDQ35PP6YAD"
///     ],
///     "modifier_lists_to_enable" : [
///       "H42BRLUJ5KTZTTMPVSLFAACQ",
///       "2JXOBJIHCWBQ4NZ3RIXQGJA6"
///     ]
///   }
/// }
public struct UpdateItemModifierListsRequest: Codable {
    /// The IDs of the catalog items associated with the CatalogModifierList objects being updated.
    public var itemIDs: [String]
    /// The IDs of the CatalogModifierList objects to disable for the CatalogItem.
    public var modifierListsToDisable: [String]?
    /// The IDs of the CatalogModifierList objects to enable for the CatalogItem.
    public var modifierListsToEnable: [String]?

    public init(itemIDs: [String], modifierListsToDisable: [String]? = nil, modifierListsToEnable: [String]? = nil) {
        self.itemIDs = itemIDs
        self.modifierListsToDisable = modifierListsToDisable
        self.modifierListsToEnable = modifierListsToEnable
    }

    private enum CodingKeys: String, CodingKey {
        case itemIDs = "item_ids"
        case modifierListsToDisable = "modifier_lists_to_disable"
        case modifierListsToEnable = "modifier_lists_to_enable"
    }
}

/// Example:
///
/// {
///   "updated_at" : "2016-11-16T22:25:24.878Z"
/// }
public struct UpdateItemModifierListsResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-date) of this update in RFC 3339 format, e.g., `2016-09-04T23:59:33.123Z`.
    public var updatedAt: String?

    public init(errors: [Error]? = nil, updatedAt: String? = nil) {
        self.errors = errors
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case errors
        case updatedAt = "updated_at"
    }
}

/// Example:
///
/// {
///   "request_body" : {
///     "item_ids" : [
///       "H42BRLUJ5KTZTTMPVSLFAACQ",
///       "2JXOBJIHCWBQ4NZ3RIXQGJA6"
///     ],
///     "taxes_to_disable" : [
///       "AQCEGCEBBQONINDOHRGZISEX"
///     ],
///     "taxes_to_enable" : [
///       "4WRCNHCJZDVLSNDQ35PP6YAD"
///     ]
///   }
/// }
public struct UpdateItemTaxesRequest: Codable {
    /// IDs for the CatalogItems associated with the CatalogTax objects being updated.
    public var itemIDs: [String]
    /// IDs of the CatalogTax objects to disable.
    public var taxesToDisable: [String]?
    /// IDs of the CatalogTax objects to enable.
    public var taxesToEnable: [String]?

    public init(itemIDs: [String], taxesToDisable: [String]? = nil, taxesToEnable: [String]? = nil) {
        self.itemIDs = itemIDs
        self.taxesToDisable = taxesToDisable
        self.taxesToEnable = taxesToEnable
    }

    private enum CodingKeys: String, CodingKey {
        case itemIDs = "item_ids"
        case taxesToDisable = "taxes_to_disable"
        case taxesToEnable = "taxes_to_enable"
    }
}

/// Example:
///
/// {
///   "updated_at" : "2016-11-16T22:25:24.878Z"
/// }
public struct UpdateItemTaxesResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) of this update in RFC 3339 format, e.g., `2016-09-04T23:59:33.123Z`.
    public var updatedAt: String?

    public init(errors: [Error]? = nil, updatedAt: String? = nil) {
        self.errors = errors
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case errors
        case updatedAt = "updated_at"
    }
}

/// Request object for the [UpdateLocation](https://developer.squareup.com/reference/square_2021-08-18/locations-api/update-location) endpoint.
///
/// Example:
///
/// {
///   "request_body" : {
///     "location" : {
///       "address" : {
///         "address_line_1" : "1234 Peachtree St. NE",
///         "administrative_district_level_1" : "GA",
///         "locality" : "Atlanta",
///         "postal_code" : "30309"
///       },
///       "business_hours" : {
///         "periods" : [
///           {
///             "day_of_week" : "MON",
///             "end_local_time" : "17:00",
///             "start_local_time" : "09:00"
///           }
///         ]
///       },
///       "description" : "Updated description",
///       "facebook_url" : null,
///       "instagram_username" : "instagram",
///       "name" : "Updated nickname",
///       "twitter_username" : "twitter"
///     }
///   }
/// }
public struct UpdateLocationRequest: Codable {
    public var location: Location?

    public init(location: Location? = nil) {
        self.location = location
    }
}

/// Response object returned by the [UpdateLocation](https://developer.squareup.com/reference/square_2021-08-18/locations-api/update-location) endpoint.
///
/// Example:
///
/// {
///   "location" : {
///     "address" : {
///       "address_line_1" : "1234 Peachtree St. NE",
///       "administrative_district_level_1" : "GA",
///       "locality" : "Atlanta",
///       "postal_code" : "30309"
///     },
///     "business_email" : "example@squareup.com",
///     "business_hours" : {
///       "periods" : [
///         {
///           "day_of_week" : "MON",
///           "end_local_time" : "17:00",
///           "start_local_time" : "09:00"
///         }
///       ]
///     },
///     "business_name" : "Business Name",
///     "capabilities" : [
///       "CREDIT_CARD_PROCESSING"
///     ],
///     "coordinates" : {
///       "latitude" : 33.788567,
///       "longitude" : -84.466947000000005
///     },
///     "country" : "US",
///     "created_at" : "2019-07-19T17:58:25Z",
///     "currency" : "USD",
///     "description" : "Updated description",
///     "id" : "LOCATION_ID",
///     "instagram_username" : "instagram",
///     "language_code" : "en-US",
///     "mcc" : "1234",
///     "merchant_id" : "MERCHANT_ID",
///     "name" : "Updated nickname",
///     "phone_number" : "5559211234",
///     "status" : "ACTIVE",
///     "timezone" : "America\/New_York",
///     "twitter_username" : "twitter",
///     "type" : "MOBILE",
///     "website_url" : "examplewebsite.com"
///   }
/// }
public struct UpdateLocationResponse: Codable {
    /// Information on errors encountered during the request.
    public var errors: [Error]?
    public var location: Location?

    public init(errors: [Error]? = nil, location: Location? = nil) {
        self.errors = errors
        self.location = location
    }
}

/// Defines the fields that are included in requests to the
/// [UpdateOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/update-order) endpoint.
///
/// Example:
///
/// {
///   "request_body" : {
///     "fields_to_clear" : [
///       "discounts"
///     ],
///     "idempotency_key" : "UNIQUE_STRING",
///     "order" : {
///       "line_items" : [
///         {
///           "base_price_money" : {
///             "amount" : 200,
///             "currency" : "USD"
///           },
///           "name" : "COOKIE",
///           "quantity" : "2",
///           "uid" : "cookie_uid"
///         }
///       ],
///       "version" : 1
///     }
///   }
/// }
public struct UpdateOrderRequest: Codable {
    /// The [dot notation paths](https://developer.squareup.com/docs/orders-api/manage-orders#on-dot-notation)
    /// fields to clear. For example, `line_items[uid].note`.
    /// For more information, see [Deleting fields](https://developer.squareup.com/docs/orders-api/manage-orders#delete-fields).
    public var fieldsToClear: [String]?
    /// A value you specify that uniquely identifies this update request.
    /// 
    /// If you are unsure whether a particular update was applied to an order successfully,
    /// you can reattempt it with the same idempotency key without
    /// worrying about creating duplicate updates to the order.
    /// The latest order version is returned.
    /// 
    /// For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).
    public var idempotencyKey: String?
    /// Contains all information related to a single order to process with Square,
    /// including line items that specify the products to purchase. `Order` objects also
    /// include information about any associated tenders, refunds, and returns.
    /// 
    /// All Connect V2 Transactions have all been converted to Orders including all associated
    /// itemization data.
    public var order: Order?

    public init(fieldsToClear: [String]? = nil, idempotencyKey: String? = nil, order: Order? = nil) {
        self.fieldsToClear = fieldsToClear
        self.idempotencyKey = idempotencyKey
        self.order = order
    }

    private enum CodingKeys: String, CodingKey {
        case fieldsToClear = "fields_to_clear"
        case idempotencyKey = "idempotency_key"
        case order
    }
}

/// Defines the fields that are included in the response body of
/// a request to the [UpdateOrder](https://developer.squareup.com/reference/square_2021-08-18/orders-api/update-order) endpoint.
///
/// Example:
///
/// {
///   "order" : {
///     "created_at" : "2019-08-23T18:26:18.243Z",
///     "id" : "DREk7wJcyXNHqULq8JJ2iPAsluJZY",
///     "line_items" : [
///       {
///         "base_price_money" : {
///           "amount" : 500,
///           "currency" : "USD"
///         },
///         "gross_sales_money" : {
///           "amount" : 500,
///           "currency" : "USD"
///         },
///         "name" : "Small Coffee",
///         "quantity" : "1",
///         "total_discount_money" : {
///           "amount" : 0,
///           "currency" : "USD"
///         },
///         "total_money" : {
///           "amount" : 500,
///           "currency" : "USD"
///         },
///         "total_tax_money" : {
///           "amount" : 0,
///           "currency" : "USD"
///         },
///         "uid" : "EuYkakhmu3ksHIds5Hiot",
///         "variation_total_price_money" : {
///           "amount" : 500,
///           "currency" : "USD"
///         }
///       },
///       {
///         "base_price_money" : {
///           "amount" : 200,
///           "currency" : "USD"
///         },
///         "gross_sales_money" : {
///           "amount" : 400,
///           "currency" : "USD"
///         },
///         "name" : "COOKIE",
///         "quantity" : "2",
///         "total_discount_money" : {
///           "amount" : 0,
///           "currency" : "USD"
///         },
///         "total_money" : {
///           "amount" : 400,
///           "currency" : "USD"
///         },
///         "total_tax_money" : {
///           "amount" : 0,
///           "currency" : "USD"
///         },
///         "uid" : "cookie_uid",
///         "variation_total_price_money" : {
///           "amount" : 400,
///           "currency" : "USD"
///         }
///       }
///     ],
///     "location_id" : "MXVQSVNDGN3C8",
///     "net_amounts" : {
///       "discount_money" : {
///         "amount" : 0,
///         "currency" : "USD"
///       },
///       "service_charge_money" : {
///         "amount" : 0,
///         "currency" : "USD"
///       },
///       "tax_money" : {
///         "amount" : 0,
///         "currency" : "USD"
///       },
///       "total_money" : {
///         "amount" : 900,
///         "currency" : "USD"
///       }
///     },
///     "source" : {
///       "name" : "Cookies"
///     },
///     "state" : "OPEN",
///     "total_discount_money" : {
///       "amount" : 0,
///       "currency" : "USD"
///     },
///     "total_money" : {
///       "amount" : 900,
///       "currency" : "USD"
///     },
///     "total_service_charge_money" : {
///       "amount" : 0,
///       "currency" : "USD"
///     },
///     "total_tax_money" : {
///       "amount" : 0,
///       "currency" : "USD"
///     },
///     "updated_at" : "2019-08-23T18:33:47.523Z",
///     "version" : 2
///   }
/// }
public struct UpdateOrderResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Contains all information related to a single order to process with Square,
    /// including line items that specify the products to purchase. `Order` objects also
    /// include information about any associated tenders, refunds, and returns.
    /// 
    /// All Connect V2 Transactions have all been converted to Orders including all associated
    /// itemization data.
    public var order: Order?

    public init(errors: [Error]? = nil, order: Order? = nil) {
        self.errors = errors
        self.order = order
    }
}

/// Describes a request to update a payment using
/// [UpdatePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/update-payment).
///
/// Example:
///
/// {
///   "request_body" : {
///     "idempotency_key" : "3d3c3b22-9572-4fc6-1111-e4d2f41b4122",
///     "payment" : {
///       "amount_money" : {
///         "amount" : 1000,
///         "currency" : "USD"
///       },
///       "tip_money" : {
///         "amount" : 300,
///         "currency" : "USD"
///       },
///       "version_token" : "Z3okDzm2VRv5m5nE3WGx381ItTNhvjkB4VapByyz54h6o"
///     }
///   }
/// }
public struct UpdatePaymentRequest: Codable {
    /// A unique string that identifies this `UpdatePayment` request. Keys can be any valid string
    /// but must be unique for every `UpdatePayment` request.
    /// 
    /// The maximum is 45 characters.
    /// 
    /// For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).
    public var idempotencyKey: String
    /// Represents a payment processed by the Square API.
    public var payment: Payment?

    public init(idempotencyKey: String, payment: Payment? = nil) {
        self.idempotencyKey = idempotencyKey
        self.payment = payment
    }

    private enum CodingKeys: String, CodingKey {
        case idempotencyKey = "idempotency_key"
        case payment
    }
}

/// Defines the response returned by
/// [UpdatePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/update-payment).
///
/// Example:
///
/// {
///   "payment" : {
///     "amount_money" : {
///       "amount" : 1000,
///       "currency" : "USD"
///     },
///     "approved_money" : {
///       "amount" : 1000,
///       "currency" : "USD"
///     },
///     "capabilities" : [
///       "EDIT_AMOUNT_UP",
///       "EDIT_AMOUNT_DOWN",
///       "EDIT_TIP_AMOUNT_UP",
///       "EDIT_TIP_AMOUNT_DOWN"
///     ],
///     "card_details" : {
///       "auth_result_code" : "ajM2ZF",
///       "avs_status" : "AVS_ACCEPTED",
///       "card" : {
///         "bin" : "411111",
///         "card_brand" : "VISA",
///         "card_type" : "CREDIT",
///         "exp_month" : 2,
///         "exp_year" : 2022,
///         "fingerprint" : "sq-1-n_BL15KP87ClDa4-h2nXOI0fp5VnxNH6hfhzqhptTfAgxgLuGFcg6jIPngDz4IkkTQ",
///         "last_4" : "1111"
///       },
///       "card_payment_timeline" : {
///         "authorized_at" : "2021-02-24T03:33:43.681Z"
///       },
///       "cvv_status" : "CVV_ACCEPTED",
///       "entry_method" : "KEYED",
///       "statement_description" : "SQ *MY BUSINESS GOSQ.COM",
///       "status" : "AUTHORIZED"
///     },
///     "created_at" : "2021-03-02T19:53:31.055Z",
///     "delay_action" : "CANCEL",
///     "delay_duration" : "PT168H",
///     "delayed_until" : "2021-03-09T19:53:31.055Z",
///     "id" : "XllelosAAfmkf9mOa0YB4PqSZACZY",
///     "location_id" : "XTI0H92143A39",
///     "order_id" : "B6qiKWus1d3TBoN2Qn5kfDiWZlfZY",
///     "receipt_number" : "Xlle",
///     "source_type" : "CARD",
///     "status" : "APPROVED",
///     "tip_money" : {
///       "amount" : 300,
///       "currency" : "USD"
///     },
///     "total_money" : {
///       "amount" : 1300,
///       "currency" : "USD"
///     },
///     "updated_at" : "2021-03-02T19:53:31.164Z",
///     "version_token" : "9TKsTawsWZvdZZD5uhAZFWfd3chxFXB49cgFpD2Kujf6o"
///   }
/// }
public struct UpdatePaymentResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Represents a payment processed by the Square API.
    public var payment: Payment?

    public init(errors: [Error]? = nil, payment: Payment? = nil) {
        self.errors = errors
        self.payment = payment
    }
}

/// A request to update a `Shift` object.
///
/// Example:
///
/// {
///   "request_body" : {
///     "shift" : {
///       "breaks" : [
///         {
///           "break_type_id" : "REGS1EQR1TPZ5",
///           "end_at" : "2019-01-25T06:16:00-05:00",
///           "expected_duration" : "PT5M",
///           "id" : "X7GAQYVVRRG6P",
///           "is_paid" : true,
///           "name" : "Tea Break",
///           "start_at" : "2019-01-25T06:11:00-05:00"
///         }
///       ],
///       "end_at" : "2019-01-25T13:11:00-05:00",
///       "location_id" : "PAA1RJZZKXBFG",
///       "start_at" : "2019-01-25T03:11:00-05:00",
///       "team_member_id" : "ormj0jJJZ5OZIzxrZYJI",
///       "version" : 1,
///       "wage" : {
///         "hourly_rate" : {
///           "amount" : 1500,
///           "currency" : "USD"
///         },
///         "title" : "Bartender"
///       }
///     }
///   }
/// }
public struct UpdateShiftRequest: Codable {
    /// A record of the hourly rate, start, and end times for a single work shift
    /// for an employee. This might include a record of the start and end times for breaks
    /// taken during the shift.
    public var shift: Shift

    public init(shift: Shift) {
        self.shift = shift
    }
}

/// The response to a request to update a `Shift`. The response contains
/// the updated `Shift` object and might contain a set of `Error` objects if
/// the request resulted in errors.
///
/// Example:
///
/// {
///   "shift" : {
///     "breaks" : [
///       {
///         "break_type_id" : "REGS1EQR1TPZ5",
///         "end_at" : "2019-01-25T06:16:00-05:00",
///         "expected_duration" : "PT5M",
///         "id" : "X7GAQYVVRRG6P",
///         "is_paid" : true,
///         "name" : "Tea Break",
///         "start_at" : "2019-01-25T06:11:00-05:00"
///       }
///     ],
///     "created_at" : "2019-02-28T00:39:02Z",
///     "employee_id" : "ormj0jJJZ5OZIzxrZYJI",
///     "end_at" : "2019-01-25T13:11:00-05:00",
///     "id" : "K0YH4CV5462JB",
///     "location_id" : "PAA1RJZZKXBFG",
///     "start_at" : "2019-01-25T03:11:00-05:00",
///     "status" : "CLOSED",
///     "team_member_id" : "ormj0jJJZ5OZIzxrZYJI",
///     "timezone" : "America\/New_York",
///     "updated_at" : "2019-02-28T00:42:41Z",
///     "version" : 2,
///     "wage" : {
///       "hourly_rate" : {
///         "amount" : 1500,
///         "currency" : "USD"
///       },
///       "title" : "Bartender"
///     }
///   }
/// }
public struct UpdateShiftResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// A record of the hourly rate, start, and end times for a single work shift
    /// for an employee. This might include a record of the start and end times for breaks
    /// taken during the shift.
    public var shift: Shift?

    public init(errors: [Error]? = nil, shift: Shift? = nil) {
        self.errors = errors
        self.shift = shift
    }
}

/// Defines parameters in a
/// [UpdateSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/update-subscription) endpoint
/// request.
///
/// Example:
///
/// {
///   "request_body" : {
///     "subscription" : {
///       "price_override_money" : {
///         "amount" : 2000,
///         "currency" : "USD"
///       },
///       "tax_percentage" : null,
///       "version" : 1594155459464
///     }
///   }
/// }
public struct UpdateSubscriptionRequest: Codable {
    /// Represents a customer subscription to a subscription plan.
    /// For an overview of the `Subscription` type, see
    /// [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
    public var subscription: Subscription?

    public init(subscription: Subscription? = nil) {
        self.subscription = subscription
    }
}

/// Defines the fields that are included in the response from the
/// [UpdateSubscription](https://developer.squareup.com/reference/square_2021-08-18/subscriptions-api/update-subscription) endpoint.
///
/// Example:
///
/// {
///   "subscription" : {
///     "created_at" : "2020-08-03T21:53:10Z",
///     "customer_id" : "CHFGVKYY8RSV93M5KCYTG4PN0G",
///     "id" : "9ba40961-995a-4a3d-8c53-048c40cafc13",
///     "location_id" : "S8GWD5R9QB376",
///     "plan_id" : "6JHXF3B2CW3YKHDV4XEM674H",
///     "price_override_money" : {
///       "amount" : 2000,
///       "currency" : "USD"
///     },
///     "status" : "ACTIVE",
///     "timezone" : "America\/Los_Angeles",
///     "version" : 1594311617331
///   }
/// }
public struct UpdateSubscriptionResponse: Codable {
    /// Information about errors encountered during the request.
    public var errors: [Error]?
    /// Represents a customer subscription to a subscription plan.
    /// For an overview of the `Subscription` type, see
    /// [Subscription object](https://developer.squareup.com/docs/subscriptions-api/overview#subscription-object-overview).
    public var subscription: Subscription?

    public init(errors: [Error]? = nil, subscription: Subscription? = nil) {
        self.errors = errors
        self.subscription = subscription
    }
}

/// Represents an update request for a `TeamMember` object.
///
/// Example:
///
/// {
///   "request_body" : {
///     "team_member" : {
///       "assigned_locations" : {
///         "assignment_type" : "EXPLICIT_LOCATIONS",
///         "location_ids" : [
///           "YSGH2WBKG94QZ",
///           "GA2Y9HSJ8KRYT"
///         ]
///       },
///       "email_address" : "joe_doe@gmail.com",
///       "family_name" : "Doe",
///       "given_name" : "Joe",
///       "phone_number" : "+14159283333",
///       "reference_id" : "reference_id_1",
///       "status" : "ACTIVE"
///     }
///   }
/// }
public struct UpdateTeamMemberRequest: Codable {
    /// A record representing an individual team member for a business.
    public var teamMember: TeamMember?

    public init(teamMember: TeamMember? = nil) {
        self.teamMember = teamMember
    }

    private enum CodingKeys: String, CodingKey {
        case teamMember = "team_member"
    }
}

/// Represents a response from an update request containing the updated `TeamMember` object or error messages.
///
/// Example:
///
/// {
///   "team_member" : {
///     "assigned_locations" : {
///       "assignment_type" : "EXPLICIT_LOCATIONS",
///       "location_ids" : [
///         "GA2Y9HSJ8KRYT",
///         "YSGH2WBKG94QZ"
///       ]
///     },
///     "created_at" : "2020-06-11T22:55:45.867Z",
///     "email_address" : "joe_doe@gmail.com",
///     "family_name" : "Doe",
///     "given_name" : "Joe",
///     "id" : "1yJlHapkseYnNPETIU1B",
///     "is_owner" : false,
///     "phone_number" : "+14159283333",
///     "reference_id" : "reference_id_1",
///     "status" : "ACTIVE"
///   }
/// }
public struct UpdateTeamMemberResponse: Codable {
    /// The errors that occurred during the request.
    public var errors: [Error]?
    /// A record representing an individual team member for a business.
    public var teamMember: TeamMember?

    public init(errors: [Error]? = nil, teamMember: TeamMember? = nil) {
        self.errors = errors
        self.teamMember = teamMember
    }

    private enum CodingKeys: String, CodingKey {
        case errors
        case teamMember = "team_member"
    }
}

/// Represents an update request for the `WageSetting` object describing a `TeamMember`.
///
/// Example:
///
/// {
///   "request_body" : {
///     "wage_setting" : {
///       "is_overtime_exempt" : true,
///       "job_assignments" : [
///         {
///           "annual_rate" : {
///             "amount" : 3000000,
///             "currency" : "USD"
///           },
///           "job_title" : "Manager",
///           "pay_type" : "SALARY",
///           "weekly_hours" : 40
///         },
///         {
///           "hourly_rate" : {
///             "amount" : 1200,
///             "currency" : "USD"
///           },
///           "job_title" : "Cashier",
///           "pay_type" : "HOURLY"
///         }
///       ]
///     }
///   }
/// }
public struct UpdateWageSettingRequest: Codable {
    /// An object representing a team member's wage information.
    public var wageSetting: WageSetting

    public init(wageSetting: WageSetting) {
        self.wageSetting = wageSetting
    }

    private enum CodingKeys: String, CodingKey {
        case wageSetting = "wage_setting"
    }
}

/// Represents a response from an update request containing the updated `WageSetting` object
/// or error messages.
///
/// Example:
///
/// {
///   "wage_setting" : {
///     "created_at" : "2019-07-10T17:26:48+00:00",
///     "is_overtime_exempt" : true,
///     "job_assignments" : [
///       {
///         "annual_rate" : {
///           "amount" : 3000000,
///           "currency" : "USD"
///         },
///         "hourly_rate" : {
///           "amount" : 1443,
///           "currency" : "USD"
///         },
///         "job_title" : "Manager",
///         "pay_type" : "SALARY",
///         "weekly_hours" : 40
///       },
///       {
///         "hourly_rate" : {
///           "amount" : 1200,
///           "currency" : "USD"
///         },
///         "job_title" : "Cashier",
///         "pay_type" : "HOURLY"
///       }
///     ],
///     "team_member_id" : "-3oZQKPKVk6gUXU_V5Qa",
///     "updated_at" : "2020-06-11T23:12:04+00:00",
///     "version" : 1
///   }
/// }
public struct UpdateWageSettingResponse: Codable {
    /// The errors that occurred during the request.
    public var errors: [Error]?
    /// An object representing a team member's wage information.
    public var wageSetting: WageSetting?

    public init(errors: [Error]? = nil, wageSetting: WageSetting? = nil) {
        self.errors = errors
        self.wageSetting = wageSetting
    }

    private enum CodingKeys: String, CodingKey {
        case errors
        case wageSetting = "wage_setting"
    }
}

/// A request to update a `WorkweekConfig` object.
///
/// Example:
///
/// {
///   "request_body" : {
///     "workweek_config" : {
///       "start_of_day_local_time" : "10:00",
///       "start_of_week" : "MON",
///       "version" : 10
///     }
///   }
/// }
public struct UpdateWorkweekConfigRequest: Codable {
    /// Sets the day of the week and hour of the day that a business starts a
    /// workweek. This is used to calculate overtime pay.
    public var workweekConfig: WorkweekConfig

    public init(workweekConfig: WorkweekConfig) {
        self.workweekConfig = workweekConfig
    }

    private enum CodingKeys: String, CodingKey {
        case workweekConfig = "workweek_config"
    }
}

/// The response to a request to update a `WorkweekConfig` object. The response contains
/// the updated `WorkweekConfig` object and might contain a set of `Error` objects if
/// the request resulted in errors.
///
/// Example:
///
/// {
///   "workweek_config" : {
///     "created_at" : "2016-02-04T00:58:24Z",
///     "id" : "FY4VCAQN700GM",
///     "start_of_day_local_time" : "10:00",
///     "start_of_week" : "MON",
///     "updated_at" : "2019-02-28T01:04:35Z",
///     "version" : 11
///   }
/// }
public struct UpdateWorkweekConfigResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Sets the day of the week and hour of the day that a business starts a
    /// workweek. This is used to calculate overtime pay.
    public var workweekConfig: WorkweekConfig?

    public init(errors: [Error]? = nil, workweekConfig: WorkweekConfig? = nil) {
        self.errors = errors
        self.workweekConfig = workweekConfig
    }

    private enum CodingKeys: String, CodingKey {
        case errors
        case workweekConfig = "workweek_config"
    }
}

/// Example:
///
/// {
///   "request_body" : {
///     "idempotency_key" : "af3d1afc-7212-4300-b463-0bfc5314a5ae",
///     "object" : {
///       "id" : "#Cocoa",
///       "item_data" : {
///         "abbreviation" : "Ch",
///         "description" : "Hot Chocolate",
///         "name" : "Cocoa",
///         "variations" : [
///           {
///             "id" : "#Small",
///             "item_variation_data" : {
///               "item_id" : "#Cocoa",
///               "name" : "Small",
///               "pricing_type" : "VARIABLE_PRICING"
///             },
///             "type" : "ITEM_VARIATION"
///           },
///           {
///             "id" : "#Large",
///             "item_variation_data" : {
///               "item_id" : "#Cocoa",
///               "name" : "Large",
///               "price_money" : {
///                 "amount" : 400,
///                 "currency" : "USD"
///               },
///               "pricing_type" : "FIXED_PRICING"
///             },
///             "type" : "ITEM_VARIATION"
///           }
///         ]
///       },
///       "type" : "ITEM"
///     }
///   }
/// }
public struct UpsertCatalogObjectRequest: Codable {
    /// A value you specify that uniquely identifies this
    /// request among all your requests. A common way to create
    /// a valid idempotency key is to use a Universally unique
    /// identifier (UUID).
    /// 
    /// If you're unsure whether a particular request was successful,
    /// you can reattempt it with the same idempotency key without
    /// worrying about creating duplicate objects.
    /// 
    /// See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
    public var idempotencyKey: String
    public var object: CatalogObject

    public init(idempotencyKey: String, object: CatalogObject) {
        self.idempotencyKey = idempotencyKey
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case idempotencyKey = "idempotency_key"
        case object
    }
}

/// Example:
///
/// {
///   "catalog_object" : {
///     "id" : "R2TA2FOBUGCJZNIWJSOSNAI4",
///     "is_deleted" : false,
///     "item_data" : {
///       "abbreviation" : "Ch",
///       "description" : "Hot Chocolate",
///       "name" : "Cocoa",
///       "product_type" : "REGULAR",
///       "variations" : [
///         {
///           "id" : "QRT53UP4LITLWGOGBZCUWP63",
///           "is_deleted" : false,
///           "item_variation_data" : {
///             "item_id" : "R2TA2FOBUGCJZNIWJSOSNAI4",
///             "name" : "Small",
///             "ordinal" : 0,
///             "pricing_type" : "VARIABLE_PRICING",
///             "stockable" : true
///           },
///           "present_at_all_locations" : true,
///           "type" : "ITEM_VARIATION",
///           "updated_at" : "2021-06-14T15:51:39.021Z",
///           "version" : 1623685899021
///         },
///         {
///           "id" : "NS77DKEIQ3AEQTCP727DSA7U",
///           "is_deleted" : false,
///           "item_variation_data" : {
///             "item_id" : "R2TA2FOBUGCJZNIWJSOSNAI4",
///             "name" : "Large",
///             "ordinal" : 1,
///             "price_money" : {
///               "amount" : 400,
///               "currency" : "USD"
///             },
///             "pricing_type" : "FIXED_PRICING",
///             "stockable" : true
///           },
///           "present_at_all_locations" : true,
///           "type" : "ITEM_VARIATION",
///           "updated_at" : "2021-06-14T15:51:39.021Z",
///           "version" : 1623685899021
///         }
///       ]
///     },
///     "present_at_all_locations" : true,
///     "type" : "ITEM",
///     "updated_at" : "2021-06-14T15:51:39.021Z",
///     "version" : 1623685899021
///   },
///   "id_mappings" : [
///     {
///       "client_object_id" : "#Cocoa",
///       "object_id" : "R2TA2FOBUGCJZNIWJSOSNAI4"
///     },
///     {
///       "client_object_id" : "#Small",
///       "object_id" : "QRT53UP4LITLWGOGBZCUWP63"
///     },
///     {
///       "client_object_id" : "#Large",
///       "object_id" : "NS77DKEIQ3AEQTCP727DSA7U"
///     }
///   ]
/// }
public struct UpsertCatalogObjectResponse: Codable {
    public var catalogObject: CatalogObject?
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// The mapping between client and server IDs for this upsert.
    public var idMappings: [CatalogIDMapping]?

    public init(catalogObject: CatalogObject? = nil, errors: [Error]? = nil, idMappings: [CatalogIDMapping]? = nil) {
        self.catalogObject = catalogObject
        self.errors = errors
        self.idMappings = idMappings
    }

    private enum CodingKeys: String, CodingKey {
        case catalogObject = "catalog_object"
        case errors
        case idMappings = "id_mappings"
    }
}

/// Represents an `UpsertSnippet` request.
///
/// Example:
///
/// {
///   "request_body" : {
///     "snippet" : {
///       "content" : "<script>var js = 1;<\/script>"
///     }
///   }
/// }
public struct UpsertSnippetRequest: Codable {
    /// Represents the snippet that is added to a Square Online site. The snippet code is injected into the `head` element of all pages on the site, except for checkout pages.
    public var snippet: Snippet

    public init(snippet: Snippet) {
        self.snippet = snippet
    }
}

/// Represents an `UpsertSnippet` response. The response can include either `snippet` or `errors`.
///
/// Example:
///
/// {
///   "snippet" : {
///     "content" : "<script>var js = 1;<\/script>",
///     "created_at" : "2021-03-11T25:40:09Z",
///     "id" : "snippet_5d178150-a6c0-11eb-a9f1-437e6a2881e7",
///     "site_id" : "site_278075276488921835",
///     "updated_at" : "2021-03-11T25:40:09Z"
///   }
/// }
public struct UpsertSnippetResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// Represents the snippet that is added to a Square Online site. The snippet code is injected into the `head` element of all pages on the site, except for checkout pages.
    public var snippet: Snippet?

    public init(errors: [Error]? = nil, snippet: Snippet? = nil) {
        self.errors = errors
        self.snippet = snippet
    }
}

public struct V1CreateEmployeeRoleRequest: Codable {
    /// V1EmployeeRole
    public var employeeRole: V1EmployeeRole?

    public init(employeeRole: V1EmployeeRole? = nil) {
        self.employeeRole = employeeRole
    }

    private enum CodingKeys: String, CodingKey {
        case employeeRole = "employee_role"
    }
}

/// V1CreateRefundRequest
public struct V1CreateRefundRequest: Codable {
    /// The ID of the payment to refund. If you are creating a `PARTIAL`
    /// refund for a split tender payment, instead provide the id of the
    /// particular tender you want to refund.
    public var paymentID: String
    /// The reason for the refund.
    public var reason: String
    public var refundedMoney: V1Money?
    /// An optional key to ensure idempotence if you issue the same PARTIAL refund request more than once.
    public var requestIdempotenceKey: String?
    /// The type of refund (FULL or PARTIAL).
    public var type: String

    public init(paymentID: String, reason: String, refundedMoney: V1Money? = nil, requestIdempotenceKey: String? = nil, type: String) {
        self.paymentID = paymentID
        self.reason = reason
        self.refundedMoney = refundedMoney
        self.requestIdempotenceKey = requestIdempotenceKey
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case paymentID = "payment_id"
        case reason
        case refundedMoney = "refunded_money"
        case requestIdempotenceKey = "request_idempotence_key"
        case type
    }
}

public enum V1CreateRefundRequestType: String, Codable, CaseIterable {
    case full = "FULL"
    case partial = "PARTIAL"
}

/// Represents one of a business's employees.
public struct V1Employee: Codable {
    /// The IDs of the locations the employee is allowed to clock in at.
    public var authorizedLocationIDs: [String]?
    /// The time when the employee entity was created, in ISO 8601 format.
    public var createdAt: String?
    /// The employee's email address.
    public var email: String?
    /// An ID the merchant can set to associate the employee with an entity in another system.
    public var externalID: String?
    /// The employee's first name.
    public var firstName: String
    /// The employee's unique ID.
    public var id: String?
    /// The employee's last name.
    public var lastName: String
    /// The ids of the employee's associated roles. Currently, you can specify only one or zero roles per employee.
    public var roleIDs: [String]?
    /// Whether the employee is ACTIVE or INACTIVE. Inactive employees cannot sign in to Square Register.Merchants update this field from the Square Dashboard.
    public var status: String?
    /// The time when the employee entity was most recently updated, in ISO 8601 format.
    public var updatedAt: String?

    public init(authorizedLocationIDs: [String]? = nil, createdAt: String? = nil, email: String? = nil, externalID: String? = nil, firstName: String, id: String? = nil, lastName: String, roleIDs: [String]? = nil, status: String? = nil, updatedAt: String? = nil) {
        self.authorizedLocationIDs = authorizedLocationIDs
        self.createdAt = createdAt
        self.email = email
        self.externalID = externalID
        self.firstName = firstName
        self.id = id
        self.lastName = lastName
        self.roleIDs = roleIDs
        self.status = status
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case authorizedLocationIDs = "authorized_location_ids"
        case createdAt = "created_at"
        case email
        case externalID = "external_id"
        case firstName = "first_name"
        case id
        case lastName = "last_name"
        case roleIDs = "role_ids"
        case status
        case updatedAt = "updated_at"
    }
}

/// V1EmployeeRole
public struct V1EmployeeRole: Codable {
    /// The time when the employee entity was created, in ISO 8601 format. Is set by Square when the Role is created.
    public var createdAt: String?
    /// The role's unique ID, Can only be set by Square.
    public var id: String?
    /// If true, employees with this role have all permissions, regardless of the values indicated in permissions.
    public var isOwner: Bool?
    /// The role's merchant-defined name.
    public var name: String
    /// The role's permissions.
    public var permissions: [String]
    /// The time when the employee entity was most recently updated, in ISO 8601 format. Is set by Square when the Role updated.
    public var updatedAt: String?

    public init(createdAt: String? = nil, id: String? = nil, isOwner: Bool? = nil, name: String, permissions: [String], updatedAt: String? = nil) {
        self.createdAt = createdAt
        self.id = id
        self.isOwner = isOwner
        self.name = name
        self.permissions = permissions
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case createdAt = "created_at"
        case id
        case isOwner = "is_owner"
        case name
        case permissions
        case updatedAt = "updated_at"
    }
}

public enum V1EmployeeRolePermissions: String, Codable, CaseIterable {
    case registerAccessSalesHistory = "REGISTER_ACCESS_SALES_HISTORY"
    case registerApplyRestrictedDiscounts = "REGISTER_APPLY_RESTRICTED_DISCOUNTS"
    case registerChangeSettings = "REGISTER_CHANGE_SETTINGS"
    case registerEditItem = "REGISTER_EDIT_ITEM"
    case registerIssueRefunds = "REGISTER_ISSUE_REFUNDS"
    case registerOpenCashDrawerOutsideSale = "REGISTER_OPEN_CASH_DRAWER_OUTSIDE_SALE"
    case registerViewSummaryReports = "REGISTER_VIEW_SUMMARY_REPORTS"
}

public enum V1EmployeeStatus: String, Codable, CaseIterable {
    case active = "ACTIVE"
    case inactive = "INACTIVE"
}

public struct V1ListEmployeeRolesRequest: Codable {
    /// A pagination cursor to retrieve the next set of results for your
    /// original query to the endpoint.
    public var batchToken: String?
    /// The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
    public var limit: Int?
    /// The order in which employees are listed in the response, based on their created_at field.Default value: ASC
    public var order: String?

    public init(batchToken: String? = nil, limit: Int? = nil, order: String? = nil) {
        self.batchToken = batchToken
        self.limit = limit
        self.order = order
    }

    private enum CodingKeys: String, CodingKey {
        case batchToken = "batch_token"
        case limit
        case order
    }
}

public struct V1ListEmployeeRolesResponse: Codable {
    public var items: [V1EmployeeRole]?

    public init(items: [V1EmployeeRole]? = nil) {
        self.items = items
    }
}

public struct V1ListEmployeesRequest: Codable {
    /// A pagination cursor to retrieve the next set of results for your
    /// original query to the endpoint.
    public var batchToken: String?
    /// If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format.
    public var beginCreatedAt: String?
    /// If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format
    public var beginUpdatedAt: String?
    /// If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format.
    public var endCreatedAt: String?
    /// If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format.
    public var endUpdatedAt: String?
    /// If provided, the endpoint returns only employee entities with the specified external_id.
    public var externalID: String?
    /// The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.
    public var limit: Int?
    /// The order in which employees are listed in the response, based on their created_at field.      Default value: ASC
    public var order: String?
    /// If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE).
    public var status: String?

    public init(batchToken: String? = nil, beginCreatedAt: String? = nil, beginUpdatedAt: String? = nil, endCreatedAt: String? = nil, endUpdatedAt: String? = nil, externalID: String? = nil, limit: Int? = nil, order: String? = nil, status: String? = nil) {
        self.batchToken = batchToken
        self.beginCreatedAt = beginCreatedAt
        self.beginUpdatedAt = beginUpdatedAt
        self.endCreatedAt = endCreatedAt
        self.endUpdatedAt = endUpdatedAt
        self.externalID = externalID
        self.limit = limit
        self.order = order
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case batchToken = "batch_token"
        case beginCreatedAt = "begin_created_at"
        case beginUpdatedAt = "begin_updated_at"
        case endCreatedAt = "end_created_at"
        case endUpdatedAt = "end_updated_at"
        case externalID = "external_id"
        case limit
        case order
        case status
    }
}

public enum V1ListEmployeesRequestStatus: String, Codable, CaseIterable {
    case active = "ACTIVE"
    case inactive = "INACTIVE"
}

public struct V1ListEmployeesResponse: Codable {
    public var items: [V1Employee]?

    public init(items: [V1Employee]? = nil) {
        self.items = items
    }
}

public struct V1ListOrdersRequest: Codable {
    /// A pagination cursor to retrieve the next set of results for your
    /// original query to the endpoint.
    public var batchToken: String?
    /// The maximum number of payments to return in a single response. This value cannot exceed 200.
    public var limit: Int?
    /// The order in which payments are listed in the response.
    public var order: String?

    public init(batchToken: String? = nil, limit: Int? = nil, order: String? = nil) {
        self.batchToken = batchToken
        self.limit = limit
        self.order = order
    }

    private enum CodingKeys: String, CodingKey {
        case batchToken = "batch_token"
        case limit
        case order
    }
}

public struct V1ListOrdersResponse: Codable {
    public var items: [V1Order]?

    public init(items: [V1Order]? = nil) {
        self.items = items
    }
}

public struct V1ListPaymentsRequest: Codable {
    /// A pagination cursor to retrieve the next set of results for your
    /// original query to the endpoint.
    public var batchToken: String?
    /// The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
    public var beginTime: String?
    /// The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
    public var endTime: String?
    /// Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.
    public var isIncludePartial: Bool?
    /// The maximum number of payments to return in a single response. This value cannot exceed 200.
    public var limit: Int?
    /// The order in which payments are listed in the response.
    public var order: String?

    public init(batchToken: String? = nil, beginTime: String? = nil, endTime: String? = nil, isIncludePartial: Bool? = nil, limit: Int? = nil, order: String? = nil) {
        self.batchToken = batchToken
        self.beginTime = beginTime
        self.endTime = endTime
        self.isIncludePartial = isIncludePartial
        self.limit = limit
        self.order = order
    }

    private enum CodingKeys: String, CodingKey {
        case batchToken = "batch_token"
        case beginTime = "begin_time"
        case endTime = "end_time"
        case isIncludePartial = "include_partial"
        case limit
        case order
    }
}

public struct V1ListPaymentsResponse: Codable {
    public var items: [V1Payment]?

    public init(items: [V1Payment]? = nil) {
        self.items = items
    }
}

public struct V1ListRefundsRequest: Codable {
    /// A pagination cursor to retrieve the next set of results for your
    /// original query to the endpoint.
    public var batchToken: String?
    /// The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
    public var beginTime: String?
    /// The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
    public var endTime: String?
    /// The approximate number of refunds to return in a single response. Default: 100. Max: 200. Response may contain more results than the prescribed limit when refunds are made simultaneously to multiple tenders in a payment or when refunds are generated in an exchange to account for the value of returned goods.
    public var limit: Int?
    /// The order in which payments are listed in the response.
    public var order: String?

    public init(batchToken: String? = nil, beginTime: String? = nil, endTime: String? = nil, limit: Int? = nil, order: String? = nil) {
        self.batchToken = batchToken
        self.beginTime = beginTime
        self.endTime = endTime
        self.limit = limit
        self.order = order
    }

    private enum CodingKeys: String, CodingKey {
        case batchToken = "batch_token"
        case beginTime = "begin_time"
        case endTime = "end_time"
        case limit
        case order
    }
}

public struct V1ListRefundsResponse: Codable {
    public var items: [V1Refund]?

    public init(items: [V1Refund]? = nil) {
        self.items = items
    }
}

public struct V1ListSettlementsRequest: Codable {
    /// A pagination cursor to retrieve the next set of results for your
    /// original query to the endpoint.
    public var batchToken: String?
    /// The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.
    public var beginTime: String?
    /// The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.
    public var endTime: String?
    /// The maximum number of settlements to return in a single response. This value cannot exceed 200.
    public var limit: Int?
    /// The order in which settlements are listed in the response.
    public var order: String?
    /// Provide this parameter to retrieve only settlements with a particular status (SENT or FAILED).
    public var status: String?

    public init(batchToken: String? = nil, beginTime: String? = nil, endTime: String? = nil, limit: Int? = nil, order: String? = nil, status: String? = nil) {
        self.batchToken = batchToken
        self.beginTime = beginTime
        self.endTime = endTime
        self.limit = limit
        self.order = order
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case batchToken = "batch_token"
        case beginTime = "begin_time"
        case endTime = "end_time"
        case limit
        case order
        case status
    }
}

public enum V1ListSettlementsRequestStatus: String, Codable, CaseIterable {
    case sent = "SENT"
    case failed = "FAILED"
}

public struct V1ListSettlementsResponse: Codable {
    public var items: [V1Settlement]?

    public init(items: [V1Settlement]? = nil) {
        self.items = items
    }
}

public struct V1Money: Codable {
    /// Amount in the lowest denominated value of this Currency. E.g. in USD
    /// these are cents, in JPY they are Yen (which do not have a 'cent' concept).
    public var amount: Int?
    public var currencyCode: String?

    public init(amount: Int? = nil, currencyCode: String? = nil) {
        self.amount = amount
        self.currencyCode = currencyCode
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case currencyCode = "currency_code"
    }
}

/// V1Order
public struct V1Order: Codable {
    /// For Bitcoin transactions, the price of the buyer's order in satoshi (100 million satoshi equals 1 BTC).
    public var btcPriceSatoshi: Double?
    /// For Bitcoin transactions, the address that the buyer sent Bitcoin to.
    public var btcReceiveAddress: String?
    /// The email address of the order's buyer.
    public var buyerEmail: String?
    /// A note provided by the buyer when the order was created, if any.
    public var buyerNote: String?
    /// A note provided by the merchant when the order's state was set to CANCELED, if any.
    public var canceledNote: String?
    /// A note provided by the merchant when the order's state was set to COMPLETED, if any
    public var completedNote: String?
    /// The time when the order was created, in ISO 8601 format.
    public var createdAt: String?
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// The time when the order expires if no action is taken, in ISO 8601 format.
    public var expiresAt: String?
    /// The order's unique identifier.
    public var id: String?
    /// The history of actions associated with the order.
    public var orderHistory: [V1OrderHistoryEntry]?
    /// The unique identifier of the payment associated with the order.
    public var paymentID: String?
    /// The promo code provided by the buyer, if any.
    public var promoCode: String?
    /// The name of the order's buyer.
    public var recipientName: String?
    /// The phone number to use for the order's delivery.
    public var recipientPhoneNumber: String?
    /// A note provided by the merchant when the order's state was set to REFUNDED, if any.
    public var refundedNote: String?
    /// Represents a postal address in a country. The address format is based
    /// on an [open-source library from Google](https://github.com/google/libaddressinput). For more information,
    /// see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata).
    /// This format has dedicated fields for four address components: postal code,
    /// locality (city), administrative district (state, prefecture, or province), and
    /// sublocality (town or village). These components have dedicated fields in the
    /// `Address` object because software sometimes behaves differently based on them.
    /// For example, sales tax software may charge different amounts of sales tax
    /// based on the postal code, and some software is only available in
    /// certain states due to compliance reasons.
    /// 
    /// For the remaining address components, the `Address` type provides the
    /// `address_line_1` and `address_line_2` fields for free-form data entry.
    /// These fields are free-form because the remaining address components have
    /// too many variations around the world and typical software does not parse
    /// these components. These fields enable users to enter anything they want.
    /// 
    /// Note that, in the current implementation, all other `Address` type fields are blank.
    /// These include `address_line_3`, `sublocality_2`, `sublocality_3`,
    /// `administrative_district_level_2`, `administrative_district_level_3`,
    /// `first_name`, `last_name`, and `organization`.
    /// 
    /// When it comes to localization, the seller's language preferences
    /// (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences))
    /// are ignored for addresses. Even though Square products (such as Square Point of Sale
    /// and the Seller Dashboard) mostly use a seller's language preference in
    /// communication, when it comes to addresses, they will use English for a US address,
    /// Japanese for an address in Japan, and so on.
    public var shippingAddress: Address?
    /// Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
    public var state: String?
    public var subtotalMoney: V1Money?
    /// A tender represents a discrete monetary exchange. Square represents this
    /// exchange as a money object with a specific currency and amount, where the
    /// amount is given in the smallest denomination of the given currency.
    /// 
    /// Square POS can accept more than one form of tender for a single payment (such
    /// as by splitting a bill between a credit card and a gift card). The `tender`
    /// field of the Payment object lists all forms of tender used for the payment.
    /// 
    /// Split tender payments behave slightly differently from single tender payments:
    /// 
    /// The receipt_url for a split tender corresponds only to the first tender listed
    /// in the tender field. To get the receipt URLs for the remaining tenders, use
    /// the receipt_url fields of the corresponding Tender objects.
    /// 
    /// *A note on gift cards**: when a customer purchases a Square gift card from a
    /// merchant, the merchant receives the full amount of the gift card in the
    /// associated payment.
    /// 
    /// When that gift card is used as a tender, the balance of the gift card is
    /// reduced and the merchant receives no funds. A `Tender` object with a type of
    /// `SQUARE_GIFT_CARD` indicates a gift card was used for some or all of the
    /// associated payment.
    public var tender: V1Tender?
    public var totalDiscountMoney: V1Money?
    public var totalPriceMoney: V1Money?
    public var totalShippingMoney: V1Money?
    public var totalTaxMoney: V1Money?
    /// The time when the order was last modified, in ISO 8601 format.
    public var updatedAt: String?

    public init(btcPriceSatoshi: Double? = nil, btcReceiveAddress: String? = nil, buyerEmail: String? = nil, buyerNote: String? = nil, canceledNote: String? = nil, completedNote: String? = nil, createdAt: String? = nil, errors: [Error]? = nil, expiresAt: String? = nil, id: String? = nil, orderHistory: [V1OrderHistoryEntry]? = nil, paymentID: String? = nil, promoCode: String? = nil, recipientName: String? = nil, recipientPhoneNumber: String? = nil, refundedNote: String? = nil, shippingAddress: Address? = nil, state: String? = nil, subtotalMoney: V1Money? = nil, tender: V1Tender? = nil, totalDiscountMoney: V1Money? = nil, totalPriceMoney: V1Money? = nil, totalShippingMoney: V1Money? = nil, totalTaxMoney: V1Money? = nil, updatedAt: String? = nil) {
        self.btcPriceSatoshi = btcPriceSatoshi
        self.btcReceiveAddress = btcReceiveAddress
        self.buyerEmail = buyerEmail
        self.buyerNote = buyerNote
        self.canceledNote = canceledNote
        self.completedNote = completedNote
        self.createdAt = createdAt
        self.errors = errors
        self.expiresAt = expiresAt
        self.id = id
        self.orderHistory = orderHistory
        self.paymentID = paymentID
        self.promoCode = promoCode
        self.recipientName = recipientName
        self.recipientPhoneNumber = recipientPhoneNumber
        self.refundedNote = refundedNote
        self.shippingAddress = shippingAddress
        self.state = state
        self.subtotalMoney = subtotalMoney
        self.tender = tender
        self.totalDiscountMoney = totalDiscountMoney
        self.totalPriceMoney = totalPriceMoney
        self.totalShippingMoney = totalShippingMoney
        self.totalTaxMoney = totalTaxMoney
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case btcPriceSatoshi = "btc_price_satoshi"
        case btcReceiveAddress = "btc_receive_address"
        case buyerEmail = "buyer_email"
        case buyerNote = "buyer_note"
        case canceledNote = "canceled_note"
        case completedNote = "completed_note"
        case createdAt = "created_at"
        case errors
        case expiresAt = "expires_at"
        case id
        case orderHistory = "order_history"
        case paymentID = "payment_id"
        case promoCode = "promo_code"
        case recipientName = "recipient_name"
        case recipientPhoneNumber = "recipient_phone_number"
        case refundedNote = "refunded_note"
        case shippingAddress = "shipping_address"
        case state
        case subtotalMoney = "subtotal_money"
        case tender
        case totalDiscountMoney = "total_discount_money"
        case totalPriceMoney = "total_price_money"
        case totalShippingMoney = "total_shipping_money"
        case totalTaxMoney = "total_tax_money"
        case updatedAt = "updated_at"
    }
}

/// V1OrderHistoryEntry
public struct V1OrderHistoryEntry: Codable {
    /// The type of action performed on the order.
    public var action: String?
    /// The time when the action was performed, in ISO 8601 format.
    public var createdAt: String?

    public init(action: String? = nil, createdAt: String? = nil) {
        self.action = action
        self.createdAt = createdAt
    }

    private enum CodingKeys: String, CodingKey {
        case action
        case createdAt = "created_at"
    }
}

public enum V1OrderHistoryEntryAction: String, Codable, CaseIterable {
    case orderPlaced = "ORDER_PLACED"
    case declined = "DECLINED"
    case paymentReceived = "PAYMENT_RECEIVED"
    case canceled = "CANCELED"
    case completed = "COMPLETED"
    case refunded = "REFUNDED"
    case expired = "EXPIRED"
}

public enum V1OrderState: String, Codable, CaseIterable {
    case pending = "PENDING"
    case `open` = "OPEN"
    case completed = "COMPLETED"
    case canceled = "CANCELED"
    case refunded = "REFUNDED"
    case rejected = "REJECTED"
}

/// A payment represents a paid transaction between a Square merchant and a
/// customer. Payment details are usually available from Connect API endpoints
/// within a few minutes after the transaction completes.
/// 
/// Each Payment object includes several fields that end in `_money`. These fields
/// describe the various amounts of money that contribute to the payment total:
/// 
/// <ul>
/// <li>
/// Monetary values are <b>positive</b> if they represent an
/// <em>increase</em> in the amount of money the merchant receives (e.g.,
/// <code>tax_money</code>, <code>tip_money</code>).
/// </li>
/// <li>
/// Monetary values are <b>negative</b> if they represent an
/// <em>decrease</em> in the amount of money the merchant receives (e.g.,
/// <code>discount_money</code>, <code>refunded_money</code>).
/// </li>
/// </ul>
public struct V1Payment: Codable {
    /// All of the additive taxes associated with the payment.
    public var additiveTax: [V1PaymentTax]?
    public var additiveTaxMoney: V1Money?
    /// The time when the payment was created, in ISO 8601 format. Reflects the time of the first payment if the object represents an incomplete partial payment, and the time of the last or complete payment otherwise.
    public var createdAt: String?
    /// The unique identifier of the Square account that took the payment.
    public var creatorID: String?
    public var device: Device?
    public var discountMoney: V1Money?
    public var grossSalesMoney: V1Money?
    /// The payment's unique identifier.
    public var id: String?
    /// All of the inclusive taxes associated with the payment.
    public var inclusiveTax: [V1PaymentTax]?
    public var inclusiveTaxMoney: V1Money?
    /// Indicates whether or not the payment is only partially paid for.
    /// If true, this payment will have the tenders collected so far, but the
    /// itemizations will be empty until the payment is completed.
    public var isPartial: Bool?
    /// The items purchased in the payment.
    public var itemizations: [V1PaymentItemization]?
    /// The unique identifier of the merchant that took the payment.
    public var merchantID: String?
    public var netSalesMoney: V1Money?
    public var netTotalMoney: V1Money?
    /// The URL of the payment's detail page in the merchant dashboard. The merchant must be signed in to the merchant dashboard to view this page.
    public var paymentURL: String?
    public var processingFeeMoney: V1Money?
    /// The URL of the receipt for the payment. Note that for split tender
    /// payments, this URL corresponds to the receipt for the first tender
    /// listed in the payment's tender field. Each Tender object has its own
    /// receipt_url field you can use to get the other receipts associated with
    /// a split tender payment.
    public var receiptURL: String?
    public var refundedMoney: V1Money?
    /// All of the refunds applied to the payment. Note that the value of all refunds on a payment can exceed the value of all tenders if a merchant chooses to refund money to a tender after previously accepting returned goods as part of an exchange.
    public var refunds: [V1Refund]?
    public var surchargeMoney: V1Money?
    /// A list of all surcharges associated with the payment.
    public var surcharges: [V1PaymentSurcharge]?
    public var swedishRoundingMoney: V1Money?
    public var taxMoney: V1Money?
    /// All of the tenders associated with the payment.
    public var tender: [V1Tender]?
    public var tipMoney: V1Money?
    public var totalCollectedMoney: V1Money?

    public init(additiveTax: [V1PaymentTax]? = nil, additiveTaxMoney: V1Money? = nil, createdAt: String? = nil, creatorID: String? = nil, device: Device? = nil, discountMoney: V1Money? = nil, grossSalesMoney: V1Money? = nil, id: String? = nil, inclusiveTax: [V1PaymentTax]? = nil, inclusiveTaxMoney: V1Money? = nil, isPartial: Bool? = nil, itemizations: [V1PaymentItemization]? = nil, merchantID: String? = nil, netSalesMoney: V1Money? = nil, netTotalMoney: V1Money? = nil, paymentURL: String? = nil, processingFeeMoney: V1Money? = nil, receiptURL: String? = nil, refundedMoney: V1Money? = nil, refunds: [V1Refund]? = nil, surchargeMoney: V1Money? = nil, surcharges: [V1PaymentSurcharge]? = nil, swedishRoundingMoney: V1Money? = nil, taxMoney: V1Money? = nil, tender: [V1Tender]? = nil, tipMoney: V1Money? = nil, totalCollectedMoney: V1Money? = nil) {
        self.additiveTax = additiveTax
        self.additiveTaxMoney = additiveTaxMoney
        self.createdAt = createdAt
        self.creatorID = creatorID
        self.device = device
        self.discountMoney = discountMoney
        self.grossSalesMoney = grossSalesMoney
        self.id = id
        self.inclusiveTax = inclusiveTax
        self.inclusiveTaxMoney = inclusiveTaxMoney
        self.isPartial = isPartial
        self.itemizations = itemizations
        self.merchantID = merchantID
        self.netSalesMoney = netSalesMoney
        self.netTotalMoney = netTotalMoney
        self.paymentURL = paymentURL
        self.processingFeeMoney = processingFeeMoney
        self.receiptURL = receiptURL
        self.refundedMoney = refundedMoney
        self.refunds = refunds
        self.surchargeMoney = surchargeMoney
        self.surcharges = surcharges
        self.swedishRoundingMoney = swedishRoundingMoney
        self.taxMoney = taxMoney
        self.tender = tender
        self.tipMoney = tipMoney
        self.totalCollectedMoney = totalCollectedMoney
    }

    private enum CodingKeys: String, CodingKey {
        case additiveTax = "additive_tax"
        case additiveTaxMoney = "additive_tax_money"
        case createdAt = "created_at"
        case creatorID = "creator_id"
        case device
        case discountMoney = "discount_money"
        case grossSalesMoney = "gross_sales_money"
        case id
        case inclusiveTax = "inclusive_tax"
        case inclusiveTaxMoney = "inclusive_tax_money"
        case isPartial = "is_partial"
        case itemizations
        case merchantID = "merchant_id"
        case netSalesMoney = "net_sales_money"
        case netTotalMoney = "net_total_money"
        case paymentURL = "payment_url"
        case processingFeeMoney = "processing_fee_money"
        case receiptURL = "receipt_url"
        case refundedMoney = "refunded_money"
        case refunds
        case surchargeMoney = "surcharge_money"
        case surcharges
        case swedishRoundingMoney = "swedish_rounding_money"
        case taxMoney = "tax_money"
        case tender
        case tipMoney = "tip_money"
        case totalCollectedMoney = "total_collected_money"
    }
}

/// V1PaymentDiscount
public struct V1PaymentDiscount: Codable {
    public var appliedMoney: V1Money?
    /// The ID of the applied discount, if available. Discounts applied in older versions of Square Register might not have an ID.
    public var discountID: String?
    /// The discount's name.
    public var name: String?

    public init(appliedMoney: V1Money? = nil, discountID: String? = nil, name: String? = nil) {
        self.appliedMoney = appliedMoney
        self.discountID = discountID
        self.name = name
    }

    private enum CodingKeys: String, CodingKey {
        case appliedMoney = "applied_money"
        case discountID = "discount_id"
        case name
    }
}

/// V1PaymentItemDetail
public struct V1PaymentItemDetail: Codable {
    /// The name of the item's merchant-defined category, if any.
    public var categoryName: String?
    /// The unique ID of the item purchased, if any.
    public var itemID: String?
    /// The unique ID of the item variation purchased, if any.
    public var itemVariationID: String?
    /// The item's merchant-defined SKU, if any.
    public var sku: String?

    public init(categoryName: String? = nil, itemID: String? = nil, itemVariationID: String? = nil, sku: String? = nil) {
        self.categoryName = categoryName
        self.itemID = itemID
        self.itemVariationID = itemVariationID
        self.sku = sku
    }

    private enum CodingKeys: String, CodingKey {
        case categoryName = "category_name"
        case itemID = "item_id"
        case itemVariationID = "item_variation_id"
        case sku
    }
}

/// Payment include an` itemizations` field that lists the items purchased,
/// along with associated fees, modifiers, and discounts. Each itemization has an
/// `itemization_type` field that indicates which of the following the itemization
/// represents:
/// 
/// <ul>
/// <li>An item variation from the merchant's item library</li>
/// <li>A custom monetary amount</li>
/// <li>
/// An action performed on a Square gift card, such as activating or
/// reloading it.
/// </li>
/// </ul>
/// 
/// *Note**: itemization information included in a `Payment` object reflects
/// details collected **at the time of the payment**. Details such as the name or
/// price of items might have changed since the payment was processed.
public struct V1PaymentItemization: Codable {
    public var discountMoney: V1Money?
    /// All discounts applied to this itemization.
    public var discounts: [V1PaymentDiscount]?
    public var grossSalesMoney: V1Money?
    /// V1PaymentItemDetail
    public var itemDetail: V1PaymentItemDetail?
    /// The name of the item variation purchased, if any.
    public var itemVariationName: String?
    /// The type of purchase that the itemization represents, such as an ITEM or CUSTOM_AMOUNT
    public var itemizationType: String?
    /// All modifier options applied to this itemization.
    public var modifiers: [V1PaymentModifier]?
    /// The item's name.
    public var name: String?
    public var netSalesMoney: V1Money?
    /// Notes entered by the merchant about the item at the time of payment, if any.
    public var notes: String?
    /// The quantity of the item purchased. This can be a decimal value.
    public var quantity: Double?
    public var singleQuantityMoney: V1Money?
    /// All taxes applied to this itemization.
    public var taxes: [V1PaymentTax]?
    public var totalMoney: V1Money?

    public init(discountMoney: V1Money? = nil, discounts: [V1PaymentDiscount]? = nil, grossSalesMoney: V1Money? = nil, itemDetail: V1PaymentItemDetail? = nil, itemVariationName: String? = nil, itemizationType: String? = nil, modifiers: [V1PaymentModifier]? = nil, name: String? = nil, netSalesMoney: V1Money? = nil, notes: String? = nil, quantity: Double? = nil, singleQuantityMoney: V1Money? = nil, taxes: [V1PaymentTax]? = nil, totalMoney: V1Money? = nil) {
        self.discountMoney = discountMoney
        self.discounts = discounts
        self.grossSalesMoney = grossSalesMoney
        self.itemDetail = itemDetail
        self.itemVariationName = itemVariationName
        self.itemizationType = itemizationType
        self.modifiers = modifiers
        self.name = name
        self.netSalesMoney = netSalesMoney
        self.notes = notes
        self.quantity = quantity
        self.singleQuantityMoney = singleQuantityMoney
        self.taxes = taxes
        self.totalMoney = totalMoney
    }

    private enum CodingKeys: String, CodingKey {
        case discountMoney = "discount_money"
        case discounts
        case grossSalesMoney = "gross_sales_money"
        case itemDetail = "item_detail"
        case itemVariationName = "item_variation_name"
        case itemizationType = "itemization_type"
        case modifiers
        case name
        case netSalesMoney = "net_sales_money"
        case notes
        case quantity
        case singleQuantityMoney = "single_quantity_money"
        case taxes
        case totalMoney = "total_money"
    }
}

public enum V1PaymentItemizationItemizationType: String, Codable, CaseIterable {
    case item = "ITEM"
    case customAmount = "CUSTOM_AMOUNT"
    case giftCardActivation = "GIFT_CARD_ACTIVATION"
    case giftCardReload = "GIFT_CARD_RELOAD"
    case giftCardUnknown = "GIFT_CARD_UNKNOWN"
    case other = "OTHER"
}

/// V1PaymentModifier
public struct V1PaymentModifier: Codable {
    public var appliedMoney: V1Money?
    /// The ID of the applied modifier option, if available. Modifier options applied in older versions of Square Register might not have an ID.
    public var modifierOptionID: String?
    /// The modifier option's name.
    public var name: String?

    public init(appliedMoney: V1Money? = nil, modifierOptionID: String? = nil, name: String? = nil) {
        self.appliedMoney = appliedMoney
        self.modifierOptionID = modifierOptionID
        self.name = name
    }

    private enum CodingKeys: String, CodingKey {
        case appliedMoney = "applied_money"
        case modifierOptionID = "modifier_option_id"
        case name
    }
}

/// V1PaymentSurcharge
public struct V1PaymentSurcharge: Codable {
    public var amountMoney: V1Money?
    public var appliedMoney: V1Money?
    /// The name of the surcharge.
    public var name: String?
    /// The amount of the surcharge as a percentage. The percentage is provided as a string representing the decimal equivalent of the percentage. For example, "0.7" corresponds to a 7% surcharge. Exactly one of rate or amount_money should be set.
    public var rate: String?
    /// A Square-issued unique identifier associated with the surcharge.
    public var surchargeID: String?
    /// Indicates whether the surcharge is taxable.
    public var isTaxable: Bool?
    /// The list of taxes that should be applied to the surcharge.
    public var taxes: [V1PaymentTax]?
    /// Indicates the source of the surcharge. For example, if it was applied as an automatic gratuity for a large group.
    public var type: String?

    public init(amountMoney: V1Money? = nil, appliedMoney: V1Money? = nil, name: String? = nil, rate: String? = nil, surchargeID: String? = nil, isTaxable: Bool? = nil, taxes: [V1PaymentTax]? = nil, type: String? = nil) {
        self.amountMoney = amountMoney
        self.appliedMoney = appliedMoney
        self.name = name
        self.rate = rate
        self.surchargeID = surchargeID
        self.isTaxable = isTaxable
        self.taxes = taxes
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
        case appliedMoney = "applied_money"
        case name
        case rate
        case surchargeID = "surcharge_id"
        case isTaxable = "taxable"
        case taxes
        case type
    }
}

public enum V1PaymentSurchargeType: String, Codable, CaseIterable {
    case unknown = "UNKNOWN"
    case autoGratuity = "AUTO_GRATUITY"
    case custom = "CUSTOM"
}

/// V1PaymentTax
public struct V1PaymentTax: Codable {
    public var appliedMoney: V1Money?
    /// Any errors that occurred during the request.
    public var errors: [Error]?
    /// The ID of the tax, if available. Taxes applied in older versions of Square Register might not have an ID.
    public var feeID: String?
    /// Whether the tax is an ADDITIVE tax or an INCLUSIVE tax.
    public var inclusionType: String?
    /// The merchant-defined name of the tax.
    public var name: String?
    /// The rate of the tax, as a string representation of a decimal number. A value of 0.07 corresponds to a rate of 7%.
    public var rate: String?

    public init(appliedMoney: V1Money? = nil, errors: [Error]? = nil, feeID: String? = nil, inclusionType: String? = nil, name: String? = nil, rate: String? = nil) {
        self.appliedMoney = appliedMoney
        self.errors = errors
        self.feeID = feeID
        self.inclusionType = inclusionType
        self.name = name
        self.rate = rate
    }

    private enum CodingKeys: String, CodingKey {
        case appliedMoney = "applied_money"
        case errors
        case feeID = "fee_id"
        case inclusionType = "inclusion_type"
        case name
        case rate
    }
}

public enum V1PaymentTaxInclusionType: String, Codable, CaseIterable {
    case additive = "ADDITIVE"
    case inclusive = "INCLUSIVE"
}

/// Represents a phone number.
public struct V1PhoneNumber: Codable {
    /// The phone number's international calling code. For US phone numbers, this value is +1.
    public var callingCode: String
    /// The phone number.
    public var number: String

    public init(callingCode: String, number: String) {
        self.callingCode = callingCode
        self.number = number
    }

    private enum CodingKeys: String, CodingKey {
        case callingCode = "calling_code"
        case number
    }
}

/// V1Refund
public struct V1Refund: Codable {
    /// The time when the merchant initiated the refund for Square to process, in ISO 8601 format.
    public var createdAt: String?
    /// Indicates whether or not the refund is associated with an exchange. If is_exchange is true, the refund reflects the value of goods returned in the exchange not the total money refunded.
    public var isExchange: Bool?
    public var merchantID: String?
    /// A Square-issued ID associated with the refund. For single-tender refunds, payment_id is the ID of the original payment ID. For split-tender refunds, payment_id is the ID of the original tender. For exchange-based refunds (is_exchange == true), payment_id is the ID of the original payment ID even if the payment includes other tenders.
    public var paymentID: String?
    /// The time when Square processed the refund on behalf of the merchant, in ISO 8601 format.
    public var processedAt: String?
    /// The merchant-specified reason for the refund.
    public var reason: String?
    /// All of the additive taxes associated with the refund.
    public var refundedAdditiveTax: [V1PaymentTax]?
    public var refundedAdditiveTaxMoney: V1Money?
    public var refundedDiscountMoney: V1Money?
    /// All of the inclusive taxes associated with the refund.
    public var refundedInclusiveTax: [V1PaymentTax]?
    public var refundedInclusiveTaxMoney: V1Money?
    public var refundedMoney: V1Money?
    public var refundedProcessingFeeMoney: V1Money?
    public var refundedSurchargeMoney: V1Money?
    /// A list of all surcharges associated with the refund.
    public var refundedSurcharges: [V1PaymentSurcharge]?
    public var refundedTaxMoney: V1Money?
    public var refundedTipMoney: V1Money?
    /// The type of refund
    public var type: String?

    public init(createdAt: String? = nil, isExchange: Bool? = nil, merchantID: String? = nil, paymentID: String? = nil, processedAt: String? = nil, reason: String? = nil, refundedAdditiveTax: [V1PaymentTax]? = nil, refundedAdditiveTaxMoney: V1Money? = nil, refundedDiscountMoney: V1Money? = nil, refundedInclusiveTax: [V1PaymentTax]? = nil, refundedInclusiveTaxMoney: V1Money? = nil, refundedMoney: V1Money? = nil, refundedProcessingFeeMoney: V1Money? = nil, refundedSurchargeMoney: V1Money? = nil, refundedSurcharges: [V1PaymentSurcharge]? = nil, refundedTaxMoney: V1Money? = nil, refundedTipMoney: V1Money? = nil, type: String? = nil) {
        self.createdAt = createdAt
        self.isExchange = isExchange
        self.merchantID = merchantID
        self.paymentID = paymentID
        self.processedAt = processedAt
        self.reason = reason
        self.refundedAdditiveTax = refundedAdditiveTax
        self.refundedAdditiveTaxMoney = refundedAdditiveTaxMoney
        self.refundedDiscountMoney = refundedDiscountMoney
        self.refundedInclusiveTax = refundedInclusiveTax
        self.refundedInclusiveTaxMoney = refundedInclusiveTaxMoney
        self.refundedMoney = refundedMoney
        self.refundedProcessingFeeMoney = refundedProcessingFeeMoney
        self.refundedSurchargeMoney = refundedSurchargeMoney
        self.refundedSurcharges = refundedSurcharges
        self.refundedTaxMoney = refundedTaxMoney
        self.refundedTipMoney = refundedTipMoney
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case createdAt = "created_at"
        case isExchange = "is_exchange"
        case merchantID = "merchant_id"
        case paymentID = "payment_id"
        case processedAt = "processed_at"
        case reason
        case refundedAdditiveTax = "refunded_additive_tax"
        case refundedAdditiveTaxMoney = "refunded_additive_tax_money"
        case refundedDiscountMoney = "refunded_discount_money"
        case refundedInclusiveTax = "refunded_inclusive_tax"
        case refundedInclusiveTaxMoney = "refunded_inclusive_tax_money"
        case refundedMoney = "refunded_money"
        case refundedProcessingFeeMoney = "refunded_processing_fee_money"
        case refundedSurchargeMoney = "refunded_surcharge_money"
        case refundedSurcharges = "refunded_surcharges"
        case refundedTaxMoney = "refunded_tax_money"
        case refundedTipMoney = "refunded_tip_money"
        case type
    }
}

public enum V1RefundType: String, Codable, CaseIterable {
    case full = "FULL"
    case partial = "PARTIAL"
}

public struct V1RetrieveEmployeeRequest: Codable {
    public init() {}
}

public struct V1RetrieveEmployeeRoleRequest: Codable {
    public init() {}
}

public struct V1RetrieveOrderRequest: Codable {
    public init() {}
}

public struct V1RetrievePaymentRequest: Codable {
    public init() {}
}

public struct V1RetrieveSettlementRequest: Codable {
    public init() {}
}

/// V1Settlement
public struct V1Settlement: Codable {
    /// The Square-issued unique identifier for the bank account associated with the settlement.
    public var bankAccountID: String?
    /// The entries included in this settlement.
    public var entries: [V1SettlementEntry]?
    /// The settlement's unique identifier.
    public var id: String?
    /// The time when the settlement was submitted for deposit or withdrawal, in ISO 8601 format.
    public var initiatedAt: String?
    /// The settlement's current status.
    public var status: String?
    public var totalMoney: V1Money?

    public init(bankAccountID: String? = nil, entries: [V1SettlementEntry]? = nil, id: String? = nil, initiatedAt: String? = nil, status: String? = nil, totalMoney: V1Money? = nil) {
        self.bankAccountID = bankAccountID
        self.entries = entries
        self.id = id
        self.initiatedAt = initiatedAt
        self.status = status
        self.totalMoney = totalMoney
    }

    private enum CodingKeys: String, CodingKey {
        case bankAccountID = "bank_account_id"
        case entries
        case id
        case initiatedAt = "initiated_at"
        case status
        case totalMoney = "total_money"
    }
}

/// V1SettlementEntry
public struct V1SettlementEntry: Codable {
    public var amountMoney: V1Money?
    public var feeMoney: V1Money?
    /// The settlement's unique identifier.
    public var paymentID: String?
    /// The settlement's current status.
    public var type: String?

    public init(amountMoney: V1Money? = nil, feeMoney: V1Money? = nil, paymentID: String? = nil, type: String? = nil) {
        self.amountMoney = amountMoney
        self.feeMoney = feeMoney
        self.paymentID = paymentID
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case amountMoney = "amount_money"
        case feeMoney = "fee_money"
        case paymentID = "payment_id"
        case type
    }
}

public enum V1SettlementEntryType: String, Codable, CaseIterable {
    case adjustment = "ADJUSTMENT"
    case balanceCharge = "BALANCE_CHARGE"
    case charge = "CHARGE"
    case freeProcessing = "FREE_PROCESSING"
    case holdAdjustment = "HOLD_ADJUSTMENT"
    case paidServiceFee = "PAID_SERVICE_FEE"
    case paidServiceFeeRefund = "PAID_SERVICE_FEE_REFUND"
    case redemptionCode = "REDEMPTION_CODE"
    case refund = "REFUND"
    case returnedPayout = "RETURNED_PAYOUT"
    case squareCapitalAdvance = "SQUARE_CAPITAL_ADVANCE"
    case squareCapitalPayment = "SQUARE_CAPITAL_PAYMENT"
    case squareCapitalReversedPayment = "SQUARE_CAPITAL_REVERSED_PAYMENT"
    case subscriptionFee = "SUBSCRIPTION_FEE"
    case subscriptionFeeRefund = "SUBSCRIPTION_FEE_REFUND"
    case other = "OTHER"
    case incentedPayment = "INCENTED_PAYMENT"
    case returnedAchEntry = "RETURNED_ACH_ENTRY"
    case returnedSquare275 = "RETURNED_SQUARE_275"
    case square275 = "SQUARE_275"
    case squareCard = "SQUARE_CARD"
}

public enum V1SettlementStatus: String, Codable, CaseIterable {
    case failed = "FAILED"
    case sent = "SENT"
}

/// A tender represents a discrete monetary exchange. Square represents this
/// exchange as a money object with a specific currency and amount, where the
/// amount is given in the smallest denomination of the given currency.
/// 
/// Square POS can accept more than one form of tender for a single payment (such
/// as by splitting a bill between a credit card and a gift card). The `tender`
/// field of the Payment object lists all forms of tender used for the payment.
/// 
/// Split tender payments behave slightly differently from single tender payments:
/// 
/// The receipt_url for a split tender corresponds only to the first tender listed
/// in the tender field. To get the receipt URLs for the remaining tenders, use
/// the receipt_url fields of the corresponding Tender objects.
/// 
/// *A note on gift cards**: when a customer purchases a Square gift card from a
/// merchant, the merchant receives the full amount of the gift card in the
/// associated payment.
/// 
/// When that gift card is used as a tender, the balance of the gift card is
/// reduced and the merchant receives no funds. A `Tender` object with a type of
/// `SQUARE_GIFT_CARD` indicates a gift card was used for some or all of the
/// associated payment.
public struct V1Tender: Codable {
    /// The brand of credit card provided.
    public var cardBrand: String?
    public var changeBackMoney: V1Money?
    /// The ID of the employee that processed the tender.
    public var employeeID: String?
    /// The tender's unique ID.
    public var entryMethod: String?
    /// The tender's unique ID.
    public var id: String?
    /// Indicates whether or not the tender is associated with an exchange. If is_exchange is true, the tender represents the value of goods returned in an exchange not the actual money paid. The exchange value reduces the tender amounts needed to pay for items purchased in the exchange.
    public var isExchange: Bool?
    /// A human-readable description of the tender.
    public var name: String?
    /// The last four digits of the provided credit card's account number.
    public var panSuffix: String?
    /// Notes entered by the merchant about the tender at the time of payment, if any. Typically only present for tender with the type: OTHER.
    public var paymentNote: String?
    /// The URL of the receipt for the tender.
    public var receiptURL: String?
    public var refundedMoney: V1Money?
    /// The time when the tender was settled, in ISO 8601 format.
    public var settledAt: String?
    /// The time when the tender was created, in ISO 8601 format.
    public var tenderedAt: String?
    public var tenderedMoney: V1Money?
    public var totalMoney: V1Money?
    /// The type of tender.
    public var type: String?

    public init(cardBrand: String? = nil, changeBackMoney: V1Money? = nil, employeeID: String? = nil, entryMethod: String? = nil, id: String? = nil, isExchange: Bool? = nil, name: String? = nil, panSuffix: String? = nil, paymentNote: String? = nil, receiptURL: String? = nil, refundedMoney: V1Money? = nil, settledAt: String? = nil, tenderedAt: String? = nil, tenderedMoney: V1Money? = nil, totalMoney: V1Money? = nil, type: String? = nil) {
        self.cardBrand = cardBrand
        self.changeBackMoney = changeBackMoney
        self.employeeID = employeeID
        self.entryMethod = entryMethod
        self.id = id
        self.isExchange = isExchange
        self.name = name
        self.panSuffix = panSuffix
        self.paymentNote = paymentNote
        self.receiptURL = receiptURL
        self.refundedMoney = refundedMoney
        self.settledAt = settledAt
        self.tenderedAt = tenderedAt
        self.tenderedMoney = tenderedMoney
        self.totalMoney = totalMoney
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case cardBrand = "card_brand"
        case changeBackMoney = "change_back_money"
        case employeeID = "employee_id"
        case entryMethod = "entry_method"
        case id
        case isExchange = "is_exchange"
        case name
        case panSuffix = "pan_suffix"
        case paymentNote = "payment_note"
        case receiptURL = "receipt_url"
        case refundedMoney = "refunded_money"
        case settledAt = "settled_at"
        case tenderedAt = "tendered_at"
        case tenderedMoney = "tendered_money"
        case totalMoney = "total_money"
        case type
    }
}

/// The brand of a credit card.
public enum V1TenderCardBrand: String, Codable, CaseIterable {
    case otherBrand = "OTHER_BRAND"
    case visa = "VISA"
    case masterCard = "MASTER_CARD"
    case americanExpress = "AMERICAN_EXPRESS"
    case discover = "DISCOVER"
    case discoverDiners = "DISCOVER_DINERS"
    case jcb = "JCB"
    case chinaUnionpay = "CHINA_UNIONPAY"
    case squareGiftCard = "SQUARE_GIFT_CARD"
}

public enum V1TenderEntryMethod: String, Codable, CaseIterable {
    case manual = "MANUAL"
    case scanned = "SCANNED"
    case squareCash = "SQUARE_CASH"
    case squareWallet = "SQUARE_WALLET"
    case swiped = "SWIPED"
    case webForm = "WEB_FORM"
    case other = "OTHER"
}

public enum V1TenderType: String, Codable, CaseIterable {
    case creditCard = "CREDIT_CARD"
    case cash = "CASH"
    case thirdPartyCard = "THIRD_PARTY_CARD"
    case noSale = "NO_SALE"
    case squareWallet = "SQUARE_WALLET"
    case squareGiftCard = "SQUARE_GIFT_CARD"
    case unknown = "UNKNOWN"
    case other = "OTHER"
}

public struct V1UpdateEmployeeRequest: Codable {
    /// Represents one of a business's employees.
    public var body: V1Employee

    public init(body: V1Employee) {
        self.body = body
    }
}

public struct V1UpdateEmployeeRoleRequest: Codable {
    /// V1EmployeeRole
    public var body: V1EmployeeRole

    public init(body: V1EmployeeRole) {
        self.body = body
    }
}

/// V1UpdateOrderRequest
public struct V1UpdateOrderRequest: Codable {
    /// The action to perform on the order (COMPLETE, CANCEL, or REFUND).
    public var action: String
    /// A merchant-specified note about the canceling of the order. Only valid if action is CANCEL.
    public var canceledNote: String?
    /// A merchant-specified note about the completion of the order. Only valid if action is COMPLETE.
    public var completedNote: String?
    /// A merchant-specified note about the refunding of the order. Only valid if action is REFUND.
    public var refundedNote: String?
    /// The tracking number of the shipment associated with the order. Only valid if action is COMPLETE.
    public var shippedTrackingNumber: String?

    public init(action: String, canceledNote: String? = nil, completedNote: String? = nil, refundedNote: String? = nil, shippedTrackingNumber: String? = nil) {
        self.action = action
        self.canceledNote = canceledNote
        self.completedNote = completedNote
        self.refundedNote = refundedNote
        self.shippedTrackingNumber = shippedTrackingNumber
    }

    private enum CodingKeys: String, CodingKey {
        case action
        case canceledNote = "canceled_note"
        case completedNote = "completed_note"
        case refundedNote = "refunded_note"
        case shippedTrackingNumber = "shipped_tracking_number"
    }
}

public enum V1UpdateOrderRequestAction: String, Codable, CaseIterable {
    case complete = "COMPLETE"
    case cancel = "CANCEL"
    case refund = "REFUND"
}

/// Example:
///
/// {
/// 
/// }
public struct VoidTransactionRequest: Codable {
    public init() {}
}

/// Defines the fields that are included in the response body of
/// a request to the [VoidTransaction](https://developer.squareup.com/reference/square_2021-08-18/transactions-api/void-transaction) endpoint.
///
/// Example:
///
/// {
/// 
/// }
public struct VoidTransactionResponse: Codable {
    /// Any errors that occurred during the request.
    public var errors: [Error]?

    public init(errors: [Error]? = nil) {
        self.errors = errors
    }
}

/// An object representing a team member's wage information.
public struct WageSetting: Codable {
    /// The timestamp, in RFC 3339 format, describing when the wage setting object was created.
    /// For example, "2018-10-04T04:00:00-07:00" or "2019-02-05T12:00:00Z".
    public var createdAt: String?
    /// Whether the team member is exempt from the overtime rules of the seller's country.
    public var isOvertimeExempt: Bool?
    /// Required. The ordered list of jobs that the team member is assigned to.
    /// The first job assignment is considered the team member's primary job.
    /// 
    /// The minimum length is 1 and the maximum length is 12.
    public var jobAssignments: [JobAssignment]?
    /// The unique ID of the `TeamMember` whom this wage setting describes.
    public var teamMemberID: String?
    /// The timestamp, in RFC 3339 format, describing when the wage setting object was last updated.
    /// For example, "2018-10-04T04:00:00-07:00" or "2019-02-05T12:00:00Z".
    public var updatedAt: String?
    /// Used for resolving concurrency issues. The request fails if the version
    /// provided does not match the server version at the time of the request. If not provided,
    /// Square executes a blind write, potentially overwriting data from another write. For more information,
    /// see [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency).
    public var version: Int?

    public init(createdAt: String? = nil, isOvertimeExempt: Bool? = nil, jobAssignments: [JobAssignment]? = nil, teamMemberID: String? = nil, updatedAt: String? = nil, version: Int? = nil) {
        self.createdAt = createdAt
        self.isOvertimeExempt = isOvertimeExempt
        self.jobAssignments = jobAssignments
        self.teamMemberID = teamMemberID
        self.updatedAt = updatedAt
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case createdAt = "created_at"
        case isOvertimeExempt = "is_overtime_exempt"
        case jobAssignments = "job_assignments"
        case teamMemberID = "team_member_id"
        case updatedAt = "updated_at"
        case version
    }
}

/// The days of the week.
public enum Weekday: String, Codable, CaseIterable {
    case mon = "MON"
    case tue = "TUE"
    case wed = "WED"
    case thu = "THU"
    case fri = "FRI"
    case sat = "SAT"
    case sun = "SUN"
}

/// Sets the day of the week and hour of the day that a business starts a
/// workweek. This is used to calculate overtime pay.
public struct WorkweekConfig: Codable {
    /// A read-only timestamp in RFC 3339 format; presented in UTC.
    public var createdAt: String?
    /// The UUID for this object.
    public var id: String?
    /// The local time at which a business week ends. Represented as a
    /// string in `HH:MM` format (`HH:MM:SS` is also accepted, but seconds are
    /// truncated).
    public var startOfDayLocalTime: String
    /// The day of the week on which a business week ends for
    /// compensation purposes.
    public var startOfWeek: String
    /// A read-only timestamp in RFC 3339 format; presented in UTC.
    public var updatedAt: String?
    /// Used for resolving concurrency issues. The request fails if the version
    /// provided does not match the server version at the time of the request. If not provided,
    /// Square executes a blind write; potentially overwriting data from another
    /// write.
    public var version: Int?

    public init(createdAt: String? = nil, id: String? = nil, startOfDayLocalTime: String, startOfWeek: String, updatedAt: String? = nil, version: Int? = nil) {
        self.createdAt = createdAt
        self.id = id
        self.startOfDayLocalTime = startOfDayLocalTime
        self.startOfWeek = startOfWeek
        self.updatedAt = updatedAt
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case createdAt = "created_at"
        case id
        case startOfDayLocalTime = "start_of_day_local_time"
        case startOfWeek = "start_of_week"
        case updatedAt = "updated_at"
        case version
    }
}

public enum AnyJSON: Equatable, Codable {
    case string(String)
    case number(Double)
    case object([String: AnyJSON])
    case array([AnyJSON])
    case bool(Bool)

    var value: Any {
        switch self {
        case .string(let string): return string
        case .number(let double): return double
        case .object(let dictionary): return dictionary
        case .array(let array): return array
        case .bool(let bool): return bool
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .array(array): try container.encode(array)
        case let .object(object): try container.encode(object)
        case let .string(string): try container.encode(string)
        case let .number(number): try container.encode(number)
        case let .bool(bool): try container.encode(bool)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let object = try? container.decode([String: AnyJSON].self) {
            self = .object(object)
        } else if let array = try? container.decode([AnyJSON].self) {
            self = .array(array)
        } else if let string = try? container.decode(String.self) {
            self = .string(string)
        } else if let bool = try? container.decode(Bool.self) {
            self = .bool(bool)
        } else if let number = try? container.decode(Double.self) {
            self = .number(number)
        } else {
            throw DecodingError.dataCorrupted(
                .init(codingPath: decoder.codingPath, debugDescription: "Invalid JSON value.")
            )
        }
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
