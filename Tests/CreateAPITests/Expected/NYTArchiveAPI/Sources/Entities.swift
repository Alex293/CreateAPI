// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation

public struct Doc: Codable {
    public var id: String?
    public var abstract: String?
    public var blog: [AnyJSON]?
    public var byline: Byline?
    public var documentType: String?
    public var headline: Headline?
    public var keywords: Keywords?
    public var leadParagraph: String?
    public var multimedia: [Multimedium]?
    public var newsDesk: String?
    public var printPage: String?
    public var pubDate: String?
    public var sectionName: String?
    public var slideshowCredits: String?
    public var snippet: String?
    public var source: String?
    public var subsectionName: String?
    public var typeOfMaterial: String?
    public var webURL: String?
    public var wordCount: String?

    public struct Byline: Codable {
        public var organization: String?
        public var original: String?
        public var person: [AnyJSON]?

        public init(organization: String? = nil, original: String? = nil, person: [AnyJSON]? = nil) {
            self.organization = organization
            self.original = original
            self.person = person
        }
    }

    public struct Headline: Codable {
        public var kicker: String?
        public var main: String?

        public init(kicker: String? = nil, main: String? = nil) {
            self.kicker = kicker
            self.main = main
        }
    }

    public struct Keywords: Codable {
        public var name: String?
        public var rank: String?
        public var value: String?

        public init(name: String? = nil, rank: String? = nil, value: String? = nil) {
            self.name = name
            self.rank = rank
            self.value = value
        }
    }

    public struct Multimedium: Codable {
        public var caption: String?
        public var copyright: String?
        public var format: String?
        public var height: Int?
        public var subtype: String?
        public var type: String?
        public var url: String?
        public var width: Int?

        public init(caption: String? = nil, copyright: String? = nil, format: String? = nil, height: Int? = nil, subtype: String? = nil, type: String? = nil, url: String? = nil, width: Int? = nil) {
            self.caption = caption
            self.copyright = copyright
            self.format = format
            self.height = height
            self.subtype = subtype
            self.type = type
            self.url = url
            self.width = width
        }
    }

    public init(id: String? = nil, abstract: String? = nil, blog: [AnyJSON]? = nil, byline: Byline? = nil, documentType: String? = nil, headline: Headline? = nil, keywords: Keywords? = nil, leadParagraph: String? = nil, multimedia: [Multimedium]? = nil, newsDesk: String? = nil, printPage: String? = nil, pubDate: String? = nil, sectionName: String? = nil, slideshowCredits: String? = nil, snippet: String? = nil, source: String? = nil, subsectionName: String? = nil, typeOfMaterial: String? = nil, webURL: String? = nil, wordCount: String? = nil) {
        self.id = id
        self.abstract = abstract
        self.blog = blog
        self.byline = byline
        self.documentType = documentType
        self.headline = headline
        self.keywords = keywords
        self.leadParagraph = leadParagraph
        self.multimedia = multimedia
        self.newsDesk = newsDesk
        self.printPage = printPage
        self.pubDate = pubDate
        self.sectionName = sectionName
        self.slideshowCredits = slideshowCredits
        self.snippet = snippet
        self.source = source
        self.subsectionName = subsectionName
        self.typeOfMaterial = typeOfMaterial
        self.webURL = webURL
        self.wordCount = wordCount
    }

    private enum CodingKeys: String, CodingKey {
        case id = "_id"
        case abstract
        case blog
        case byline
        case documentType = "document_type"
        case headline
        case keywords
        case leadParagraph = "lead_paragraph"
        case multimedia
        case newsDesk = "news_desk"
        case printPage = "print_page"
        case pubDate = "pub_date"
        case sectionName = "section_name"
        case slideshowCredits = "slideshow_credits"
        case snippet
        case source
        case subsectionName = "subsection_name"
        case typeOfMaterial = "type_of_material"
        case webURL = "web_url"
        case wordCount = "word_count"
    }
}

public enum AnyJSON: Equatable, Codable {
    case string(String)
    case number(Double)
    case object([String: AnyJSON])
    case array([AnyJSON])
    case bool(Bool)

    var value: Any {
        switch self {
        case .string(let string): return string
        case .number(let double): return double
        case .object(let dictionary): return dictionary
        case .array(let array): return array
        case .bool(let bool): return bool
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .array(array): try container.encode(array)
        case let .object(object): try container.encode(object)
        case let .string(string): try container.encode(string)
        case let .number(number): try container.encode(number)
        case let .bool(bool): try container.encode(bool)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let object = try? container.decode([String: AnyJSON].self) {
            self = .object(object)
        } else if let array = try? container.decode([AnyJSON].self) {
            self = .array(array)
        } else if let string = try? container.decode(String.self) {
            self = .string(string)
        } else if let bool = try? container.decode(Bool.self) {
            self = .bool(bool)
        } else if let number = try? container.decode(Double.self) {
            self = .number(number)
        } else {
            throw DecodingError.dataCorrupted(
                .init(codingPath: decoder.codingPath, debugDescription: "Invalid JSON value.")
            )
        }
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
