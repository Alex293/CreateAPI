// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation

/// Type of authorization used by the connector
///
/// Example: "oauth2"
public enum AuthType: String, Codable, CaseIterable {
    case oauth2
    case apiKey
    case basic
    case `none`
}

public struct BadRequestResponse: Codable {
    /// HTTP status code
    ///
    /// Example: 400
    public var statusCode: Double?
    /// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
    ///
    /// Example: "Bad Request"
    public var error: String?
    /// The type of error returned
    ///
    /// Example: "RequestHeadersValidationError"
    public var typeName: String?
    /// A human-readable message providing more details about the error.
    ///
    /// Example: "Invalid Params"
    public var message: String?
    /// Contains parameter or domain specific information related to the error and why it occurred.
    public var detail: Detail?
    /// Link to documentation of error type
    ///
    /// Example: "https://developers.apideck.com/errors#requestbodyvalidationerror"
    public var ref: String?

    /// Contains parameter or domain specific information related to the error and why it occurred.
    public struct Detail: Codable {
        /// Example: "Missing property foobar"
        public var string: String?
        /// Example:
        ///
        /// {
        ///   "missing" : [
        ///     {
        ///       "foobar" : "required"
        ///     }
        ///   ]
        /// }
        public var object: [String: AnyJSON]?

        public init(string: String? = nil, object: [String: AnyJSON]? = nil) {
            self.string = string
            self.object = object
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.object = try? container.decode([String: AnyJSON].self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = object { try container.encode(value) }
        }
    }

    public init(statusCode: Double? = nil, error: String? = nil, typeName: String? = nil, message: String? = nil, detail: Detail? = nil, ref: String? = nil) {
        self.statusCode = statusCode
        self.error = error
        self.typeName = typeName
        self.message = message
        self.detail = detail
        self.ref = ref
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case error
        case typeName = "type_name"
        case message
        case detail
        case ref
    }
}

public struct Connection: Codable {
    /// Example: "crm+salesforce"
    public var id: String?
    /// Example: "salesforce"
    public var serviceID: String?
    /// Example: "Salesforce"
    public var name: String?
    /// Example: "CRM software solutions and enterprise cloud computing from Salesforce, the leader in customer relationship management (CRM) and PaaS. Free 30 day trial."
    public var tagLine: String?
    /// Example: "crm"
    public var unifiedAPI: String?
    /// Example: "https://www.salesforce.com"
    public var website: String?
    /// Example: "https://res.cloudinary.com/apideck/image/upload/v1529456047/catalog/salesforce/icon128x128.png"
    public var icon: String?
    /// Example: "https://c1.sfdcstatic.com/content/dam/web/en_us/www/images/home/logo-salesforce-m.svg"
    public var logo: String?
    /// Connection settings. Values will persist to `form_fields` with corresponding id
    ///
    /// Example:
    ///
    /// {
    ///   "instance_url" : "https:\/\/eu28.salesforce.com"
    /// }
    public var settings: [String: AnyJSON]?
    /// Attach your own consumer specific metadata
    ///
    /// Example:
    ///
    /// {
    ///   "account" : {
    ///     "id" : "c01458a5-7276-41ce-bc19-639906b0450a",
    ///     "name" : "My Company"
    ///   },
    ///   "plan" : "enterprise"
    /// }
    public var metadata: [String: AnyJSON]?
    /// Type of authorization used by the connector
    ///
    /// Example: "oauth2"
    public var authType: AuthType?
    public var status: Status?
    /// Example:
    ///
    /// [
    ///   {
    ///     "custom_field" : false,
    ///     "disabled" : false,
    ///     "id" : "instance_url",
    ///     "label" : "Instance url",
    ///     "mask" : false,
    ///     "placeholder" : null,
    ///     "required" : true,
    ///     "sensitive" : false,
    ///     "type" : "text",
    ///     "value" : "https:\/\/eu28.salesforce.com"
    ///   },
    ///   {
    ///     "custom_field" : false,
    ///     "disabled" : false,
    ///     "id" : "api_key",
    ///     "label" : "API Key",
    ///     "mask" : false,
    ///     "placeholder" : null,
    ///     "required" : true,
    ///     "sensitive" : true,
    ///     "type" : "text",
    ///     "value" : "123455677"
    ///   }
    /// ]
    public var formFields: [FormField]?
    public var configuration: [ConfigurationItem]?
    /// Example: ["opportunities", "companies", "contacts", "leads"]
    public var configurableResources: [String]?
    /// Example: ["leads"]
    public var resourceSchemaSupport: [String]?
    /// Example: ["leads"]
    public var resourceSettingsSupport: [String]?
    /// Example: ["instance_url"]
    public var settingsRequiredForAuthorization: [String]?
    /// Example: "https://unify.apideck.com/vault/authorize/salesforce/<application-id>?state=<state>"
    public var authorizeURL: String?
    /// Example: "https://unify.apideck.com/vault/revoke/salesforce/<application-id>?state=<state>"
    public var revokeURL: String?
    /// Example: true
    public var isEnabled: Bool?
    /// Example: 1615563533390
    public var createdAt: Double?
    /// Example: 1616662325753
    public var updatedAt: Double?
    /// [Connection state flow](#section/Connection-state)
    ///
    /// Example: "authorized"
    public var state: ConnectionState?

    public enum Status: String, Codable, CaseIterable {
        case live
        case upcoming
        case requested
    }

    public struct ConfigurationItem: Codable {
        /// Example: "leads"
        public var resource: String?
        public var defaults: [Default]?

        public struct Default: Codable {
            /// Example: "custom_fields"
            public var target: Target?
            /// Example: "ProductInterest"
            public var id: String?
            public var options: [FormFieldOption]?
            public var value: Value?

            /// Example: "custom_fields"
            public enum Target: String, Codable, CaseIterable {
                case customFields = "custom_fields"
                case resource
            }

            public struct Value: Codable {
                /// Example: "GC5000 series"
                public var string: String?
                /// Example: 10
                public var int: Int?
                /// Example: 10.5
                public var double: Double?
                /// Example: true
                public var isBool: Bool?
                public var placeholderItems: [PlaceholderItem]?

                public struct PlaceholderItem: Codable {
                    /// Example: "GC6000 series"
                    public var string: String?
                    /// Example: 10
                    public var int: Int?
                    /// Example: 10.5
                    public var double: Double?

                    public init(string: String? = nil, int: Int? = nil, double: Double? = nil) {
                        self.string = string
                        self.int = int
                        self.double = double
                    }

                    public init(from decoder: Decoder) throws {
                        let container = try decoder.singleValueContainer()
                        self.string = try? container.decode(String.self)
                        self.int = try? container.decode(Int.self)
                        self.double = try? container.decode(Double.self)
                    }

                    public func encode(to encoder: Encoder) throws {
                        var container = encoder.singleValueContainer()
                        if let value = string { try container.encode(value) }
                        if let value = int { try container.encode(value) }
                        if let value = double { try container.encode(value) }
                    }
                }

                public init(string: String? = nil, int: Int? = nil, double: Double? = nil, isBool: Bool? = nil, placeholderItems: [PlaceholderItem]? = nil) {
                    self.string = string
                    self.int = int
                    self.double = double
                    self.isBool = isBool
                    self.placeholderItems = placeholderItems
                }

                public init(from decoder: Decoder) throws {
                    let container = try decoder.singleValueContainer()
                    self.string = try? container.decode(String.self)
                    self.int = try? container.decode(Int.self)
                    self.double = try? container.decode(Double.self)
                    self.isBool = try? container.decode(Bool.self)
                    self.placeholderItems = try? container.decode([PlaceholderItem].self)
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.singleValueContainer()
                    if let value = string { try container.encode(value) }
                    if let value = int { try container.encode(value) }
                    if let value = double { try container.encode(value) }
                    if let value = isBool { try container.encode(value) }
                    if let value = placeholderItems { try container.encode(value) }
                }
            }

            public init(target: Target? = nil, id: String? = nil, options: [FormFieldOption]? = nil, value: Value? = nil) {
                self.target = target
                self.id = id
                self.options = options
                self.value = value
            }
        }

        public init(resource: String? = nil, defaults: [Default]? = nil) {
            self.resource = resource
            self.defaults = defaults
        }
    }

    public init(id: String? = nil, serviceID: String? = nil, name: String? = nil, tagLine: String? = nil, unifiedAPI: String? = nil, website: String? = nil, icon: String? = nil, logo: String? = nil, settings: [String: AnyJSON]? = nil, metadata: [String: AnyJSON]? = nil, authType: AuthType? = nil, status: Status? = nil, formFields: [FormField]? = nil, configuration: [ConfigurationItem]? = nil, configurableResources: [String]? = nil, resourceSchemaSupport: [String]? = nil, resourceSettingsSupport: [String]? = nil, settingsRequiredForAuthorization: [String]? = nil, authorizeURL: String? = nil, revokeURL: String? = nil, isEnabled: Bool? = nil, createdAt: Double? = nil, updatedAt: Double? = nil, state: ConnectionState? = nil) {
        self.id = id
        self.serviceID = serviceID
        self.name = name
        self.tagLine = tagLine
        self.unifiedAPI = unifiedAPI
        self.website = website
        self.icon = icon
        self.logo = logo
        self.settings = settings
        self.metadata = metadata
        self.authType = authType
        self.status = status
        self.formFields = formFields
        self.configuration = configuration
        self.configurableResources = configurableResources
        self.resourceSchemaSupport = resourceSchemaSupport
        self.resourceSettingsSupport = resourceSettingsSupport
        self.settingsRequiredForAuthorization = settingsRequiredForAuthorization
        self.authorizeURL = authorizeURL
        self.revokeURL = revokeURL
        self.isEnabled = isEnabled
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.state = state
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case serviceID = "service_id"
        case name
        case tagLine = "tag_line"
        case unifiedAPI = "unified_api"
        case website
        case icon
        case logo
        case settings
        case metadata
        case authType = "auth_type"
        case status
        case formFields = "form_fields"
        case configuration
        case configurableResources = "configurable_resources"
        case resourceSchemaSupport = "resource_schema_support"
        case resourceSettingsSupport = "resource_settings_support"
        case settingsRequiredForAuthorization = "settings_required_for_authorization"
        case authorizeURL = "authorize_url"
        case revokeURL = "revoke_url"
        case isEnabled = "enabled"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case state
    }
}

public struct ConnectionMetadata: Codable {
    public var id: String?
    public var name: String?

    public init(id: String? = nil, name: String? = nil) {
        self.id = id
        self.name = name
    }
}

/// [Connection state flow](#section/Connection-state)
///
/// Example: "authorized"
public enum ConnectionState: String, Codable, CaseIterable {
    case available
    case callable
    case added
    case authorized
}

public struct Consumer: Codable {
    /// Example: "test_consumer_id"
    public var consumerID: String?
    /// Example: "1111"
    public var applicationID: String?
    public var metadata: ConsumerMetadata?
    public var connections: [ConsumerConnection]?
    /// Example: ["salesforce", "stripe"]
    public var services: [String]?
    /// Example: 101
    public var aggregatedRequestCount: Double?
    public var requestCounts: RequestCountAllocation?
    /// Example: "2021-05-07T12:55:42.242Z"
    public var created: String?
    /// Example: "2021-05-07T12:55:42.242Z"
    public var modified: String?
    /// Example: "2021-05-07T12:55:42.242Z"
    public var requestCountUpdated: String?

    public init(consumerID: String? = nil, applicationID: String? = nil, metadata: ConsumerMetadata? = nil, connections: [ConsumerConnection]? = nil, services: [String]? = nil, aggregatedRequestCount: Double? = nil, requestCounts: RequestCountAllocation? = nil, created: String? = nil, modified: String? = nil, requestCountUpdated: String? = nil) {
        self.consumerID = consumerID
        self.applicationID = applicationID
        self.metadata = metadata
        self.connections = connections
        self.services = services
        self.aggregatedRequestCount = aggregatedRequestCount
        self.requestCounts = requestCounts
        self.created = created
        self.modified = modified
        self.requestCountUpdated = requestCountUpdated
    }

    private enum CodingKeys: String, CodingKey {
        case consumerID = "consumer_id"
        case applicationID = "application_id"
        case metadata
        case connections
        case services
        case aggregatedRequestCount = "aggregated_request_count"
        case requestCounts = "request_counts"
        case created
        case modified
        case requestCountUpdated = "request_count_updated"
    }
}

public struct ConsumerMetadata: Codable {
    /// Example: "SpaceX"
    public var accountName: String?
    /// Example: "Elon Musk"
    public var userName: String?
    /// Example: "elon@musk.com"
    public var email: String?
    /// Example: "https://www.spacex.com/static/images/share.jpg"
    public var image: String?

    public init(accountName: String? = nil, userName: String? = nil, email: String? = nil, image: String? = nil) {
        self.accountName = accountName
        self.userName = userName
        self.email = email
        self.image = image
    }

    private enum CodingKeys: String, CodingKey {
        case accountName = "account_name"
        case userName = "user_name"
        case email
        case image
    }
}

public struct ConsumerConnection: Codable {
    /// Example: "1111+test_user_id"
    public var id: String?
    /// Example: "Salesforce"
    public var name: String?
    /// Example: "https://res.cloudinary.com/apideck/image/upload/v1529456047/catalog/salesforce/icon128x128.png"
    public var icon: String?
    /// Example: "https://c1.sfdcstatic.com/content/dam/web/en_us/www/images/home/logo-salesforce-m.svg"
    public var logo: String?
    /// Example: "https://www.salesforce.com"
    public var website: String?
    /// Example: "CRM software solutions and enterprise cloud computing from Salesforce, the leader in customer relationship management (CRM) and PaaS. Free 30 day trial."
    public var tagLine: String?
    /// Example: "teamleader"
    public var serviceID: String?
    /// Example: "crm"
    public var unifiedAPI: String?
    /// Example: "test_user_id"
    public var consumerID: String?
    /// Type of authorization used by the connector
    ///
    /// Example: "oauth2"
    public var authType: AuthType?
    /// Example: true
    public var isEnabled: Bool?
    /// Connection settings. Values will persist to `form_fields` with corresponding id
    ///
    /// Example:
    ///
    /// {
    ///   "instance_url" : "https:\/\/eu28.salesforce.com"
    /// }
    public var settings: [String: AnyJSON]?
    /// Attach your own consumer specific metadata
    ///
    /// Example:
    ///
    /// {
    ///   "account" : {
    ///     "id" : "c01458a5-7276-41ce-bc19-639906b0450a",
    ///     "name" : "My Company"
    ///   },
    ///   "plan" : "enterprise"
    /// }
    public var metadata: [String: AnyJSON]?
    /// Example: "2020-09-19T12:18:37.071Z"
    public var createdAt: String?
    /// Example: "2020-09-19T12:18:37.071Z"
    public var updatedAt: String?
    /// Example: "authorized"
    public var state: State?

    /// Example: "authorized"
    public enum State: String, Codable, CaseIterable {
        case available
        case callable
        case added
        case configured
        case authorized
    }

    public init(id: String? = nil, name: String? = nil, icon: String? = nil, logo: String? = nil, website: String? = nil, tagLine: String? = nil, serviceID: String? = nil, unifiedAPI: String? = nil, consumerID: String? = nil, authType: AuthType? = nil, isEnabled: Bool? = nil, settings: [String: AnyJSON]? = nil, metadata: [String: AnyJSON]? = nil, createdAt: String? = nil, updatedAt: String? = nil, state: State? = nil) {
        self.id = id
        self.name = name
        self.icon = icon
        self.logo = logo
        self.website = website
        self.tagLine = tagLine
        self.serviceID = serviceID
        self.unifiedAPI = unifiedAPI
        self.consumerID = consumerID
        self.authType = authType
        self.isEnabled = isEnabled
        self.settings = settings
        self.metadata = metadata
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.state = state
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case name
        case icon
        case logo
        case website
        case tagLine = "tag_line"
        case serviceID = "service_id"
        case unifiedAPI = "unified_api"
        case consumerID = "consumer_id"
        case authType = "auth_type"
        case isEnabled = "enabled"
        case settings
        case metadata
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case state
    }
}

public struct ConsumerWebhook: Codable {
    /// Example: "1234"
    public var id: String?
    /// Example: "A description"
    public var description: String?
    /// Name of Apideck Unified API
    ///
    /// Example: "crm"
    public var unifiedAPI: UnifiedAPIID
    /// The status of the webhook.
    ///
    /// Example: "enabled"
    public var status: Status
    /// The delivery url of the webhook endpoint.
    ///
    /// Example: "https://example.com/my/webhook/endpoint"
    public var deliveryURL: URL
    /// The Unify Base URL events from connectors will be sent to after service id is appended.
    ///
    /// Example: "https://unify.apideck.com/webhook/webhooks/1234/execute"
    public var executeBaseURL: URL
    /// Subscribed events
    ///
    /// The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.
    ///
    /// Example: ["vault.connection.created", "vault.connection.updated"]
    public var events: [Event]
    /// Updated at (timestamp)
    ///
    /// Example: "2020-09-30T07:43:32.000Z"
    public var updatedAt: Date?
    /// Created at (timestamp)
    ///
    /// Example: "2020-09-30T07:43:32.000Z"
    public var createdAt: Date?

    /// The status of the webhook.
    ///
    /// Example: "enabled"
    public enum Status: String, Codable, CaseIterable {
        case enabled
        case disabled
    }

    /// Example: "crm.company.created"
    public enum Event: String, Codable, CaseIterable {
        case asterisk = "*"
        case crmActivityCreated = "crm.activity.created"
        case crmActivityUpdated = "crm.activity.updated"
        case crmActivityDeleted = "crm.activity.deleted"
        case crmCompanyCreated = "crm.company.created"
        case crmCompanyUpdated = "crm.company.updated"
        case crmCompanyDeleted = "crm.company.deleted"
        case crmContactCreated = "crm.contact.created"
        case crmContactUpdated = "crm.contact.updated"
        case crmContactDeleted = "crm.contact.deleted"
        case crmLeadCreated = "crm.lead.created"
        case crmLeadUpdated = "crm.lead.updated"
        case crmLeadDeleted = "crm.lead.deleted"
        case crmNoteCreated = "crm.note.created"
        case crmNotesUpdated = "crm.notes.updated"
        case crmNotesDeleted = "crm.notes.deleted"
        case crmOpportunityCreated = "crm.opportunity.created"
        case crmOpportunityUpdated = "crm.opportunity.updated"
        case crmOpportunityDeleted = "crm.opportunity.deleted"
        case leadLeadCreated = "lead.lead.created"
        case leadLeadUpdated = "lead.lead.updated"
        case leadLeadDeleted = "lead.lead.deleted"
        case vaultConnectionCreated = "vault.connection.created"
        case vaultConnectionUpdated = "vault.connection.updated"
        case vaultConnectionDeleted = "vault.connection.deleted"
        case vaultConnectionCallable = "vault.connection.callable"
        case atsJobCreated = "ats.job.created"
        case atsJobUpdated = "ats.job.updated"
        case atsJobDeleted = "ats.job.deleted"
        case atsApplicantCreated = "ats.applicant.created"
        case atsApplicantUpdated = "ats.applicant.updated"
        case atsApplicantDeleted = "ats.applicant.deleted"
        case posOrderCreated = "pos.order.created"
        case posOrderUpdated = "pos.order.updated"
        case posOrderDeleted = "pos.order.deleted"
    }

    public init(id: String? = nil, description: String? = nil, unifiedAPI: UnifiedAPIID, status: Status, deliveryURL: URL, executeBaseURL: URL, events: [Event], updatedAt: Date? = nil, createdAt: Date? = nil) {
        self.id = id
        self.description = description
        self.unifiedAPI = unifiedAPI
        self.status = status
        self.deliveryURL = deliveryURL
        self.executeBaseURL = executeBaseURL
        self.events = events
        self.updatedAt = updatedAt
        self.createdAt = createdAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case description
        case unifiedAPI = "unified_api"
        case status
        case deliveryURL = "delivery_url"
        case executeBaseURL = "execute_base_url"
        case events
        case updatedAt = "updated_at"
        case createdAt = "created_at"
    }
}

public struct ConsumerRequestCountsInDateRangeResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    public var data: Data

    public struct Data: Codable {
        /// Example: "1111"
        public var applicationID: String?
        /// Example: "test_user_id"
        public var consumerID: String?
        /// Example: "2021-05-01T12:00:00.000Z"
        public var startDatetime: String?
        /// Example: "2021-05-10T12:00:00.000Z"
        public var endDatetime: String?
        /// Example: 40
        public var aggregatedRequestCount: Double?
        public var requestCounts: RequestCountAllocation?

        public init(applicationID: String? = nil, consumerID: String? = nil, startDatetime: String? = nil, endDatetime: String? = nil, aggregatedRequestCount: Double? = nil, requestCounts: RequestCountAllocation? = nil) {
            self.applicationID = applicationID
            self.consumerID = consumerID
            self.startDatetime = startDatetime
            self.endDatetime = endDatetime
            self.aggregatedRequestCount = aggregatedRequestCount
            self.requestCounts = requestCounts
        }

        private enum CodingKeys: String, CodingKey {
            case applicationID = "application_id"
            case consumerID = "consumer_id"
            case startDatetime = "start_datetime"
            case endDatetime = "end_datetime"
            case aggregatedRequestCount = "aggregated_request_count"
            case requestCounts = "request_counts"
        }
    }

    public init(statusCode: Int, status: String, data: Data) {
        self.statusCode = statusCode
        self.status = status
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case data
    }
}

public struct CreateConnectionResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 201
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    public var data: Connection

    public init(statusCode: Int, status: String, data: Connection) {
        self.statusCode = statusCode
        self.status = status
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case data
    }
}

public struct CreateSessionResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    public var data: Data

    public struct Data: Codable {
        /// Example: "http://vault.apideck.com/session/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb25zdW1lcl9pZCI6InRlc3RfdXNlcl9pZCIsImFwcGxpY2F0aW9uX2lkIj"
        public var sessionUri: String
        /// Example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb25zdW1lcl9pZCI6InRlc3RfdXNlcl9pZCIsImFwcGxpY2F0aW9uX2lkIj"
        public var sessionToken: String

        public init(sessionUri: String, sessionToken: String) {
            self.sessionUri = sessionUri
            self.sessionToken = sessionToken
        }

        private enum CodingKeys: String, CodingKey {
            case sessionUri = "session_uri"
            case sessionToken = "session_token"
        }
    }

    public init(statusCode: Int, status: String, data: Data) {
        self.statusCode = statusCode
        self.status = status
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case data
    }
}

public struct FormField: Codable {
    /// Example: "channel"
    public var id: String?
    /// Example: "Channel"
    public var label: String?
    /// Example: "Select a channel"
    public var placeholder: String?
    /// Example: "Slack channel to push notification to"
    public var description: String?
    /// Example: "select"
    public var type: AnyJSON?
    /// Example: true
    public var isRequired: Bool?
    /// Example: false
    public var isCustomField: Bool?
    /// Only applicable to select fields. Allow the user to add a custom value though the option select if the desired value is not in the option select list.
    ///
    /// Example: false
    public var allowCustomValues: Bool
    /// Example: false
    public var isDisabled: Bool?
    /// Example: false
    public var isSensitive: Bool?
    /// Example:
    ///
    /// [
    ///   {
    ///     "label" : "General Channel",
    ///     "value" : "general"
    ///   }
    /// ]
    public var options: [FormFieldOption]?

    public init(id: String? = nil, label: String? = nil, placeholder: String? = nil, description: String? = nil, type: AnyJSON? = nil, isRequired: Bool? = nil, isCustomField: Bool? = nil, allowCustomValues: Bool? = nil, isDisabled: Bool? = nil, isSensitive: Bool? = nil, options: [FormFieldOption]? = nil) {
        self.id = id
        self.label = label
        self.placeholder = placeholder
        self.description = description
        self.type = type
        self.isRequired = isRequired
        self.isCustomField = isCustomField
        self.allowCustomValues = allowCustomValues ?? false
        self.isDisabled = isDisabled
        self.isSensitive = isSensitive
        self.options = options
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case label
        case placeholder
        case description
        case type
        case isRequired = "required"
        case isCustomField = "custom_field"
        case allowCustomValues = "allow_custom_values"
        case isDisabled = "disabled"
        case isSensitive = "sensitive"
        case options
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        self.id = try values.decodeIfPresent(String.self, forKey: .id)
        self.label = try values.decodeIfPresent(String.self, forKey: .label)
        self.placeholder = try values.decodeIfPresent(String.self, forKey: .placeholder)
        self.description = try values.decodeIfPresent(String.self, forKey: .description)
        self.type = try values.decodeIfPresent(AnyJSON.self, forKey: .type)
        self.isRequired = try values.decodeIfPresent(Bool.self, forKey: .isRequired)
        self.isCustomField = try values.decodeIfPresent(Bool.self, forKey: .isCustomField)
        self.allowCustomValues = try values.decodeIfPresent(Bool.self, forKey: .allowCustomValues) ?? false
        self.isDisabled = try values.decodeIfPresent(Bool.self, forKey: .isDisabled)
        self.isSensitive = try values.decodeIfPresent(Bool.self, forKey: .isSensitive)
        self.options = try values.decodeIfPresent([FormFieldOption].self, forKey: .options)
    }
}

public struct FormFieldOption: Codable {
    public var simpleFormFieldOption: SimpleFormFieldOption?
    public var formFieldOptionGroup: FormFieldOptionGroup?

    public init(simpleFormFieldOption: SimpleFormFieldOption? = nil, formFieldOptionGroup: FormFieldOptionGroup? = nil) {
        self.simpleFormFieldOption = simpleFormFieldOption
        self.formFieldOptionGroup = formFieldOptionGroup
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        self.simpleFormFieldOption = try? container.decode(SimpleFormFieldOption.self)
        self.formFieldOptionGroup = try? container.decode(FormFieldOptionGroup.self)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        if let value = simpleFormFieldOption { try container.encode(value) }
        if let value = formFieldOptionGroup { try container.encode(value) }
    }
}

public struct FormFieldOptionGroup: Codable {
    /// Example: "1234"
    public var id: String?
    /// Example: "General Channel"
    public var label: String?
    public var options: [SimpleFormFieldOption]?

    public init(id: String? = nil, label: String? = nil, options: [SimpleFormFieldOption]? = nil) {
        self.id = id
        self.label = label
        self.options = options
    }
}

public struct GetConnectionResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    public var data: Connection

    public init(statusCode: Int, status: String, data: Connection) {
        self.statusCode = statusCode
        self.status = status
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case data
    }
}

public struct GetConnectionsResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    public var data: [Connection]

    public init(statusCode: Int, status: String, data: [Connection]) {
        self.statusCode = statusCode
        self.status = status
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case data
    }
}

public struct GetConsumerResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    public var data: Consumer

    public init(statusCode: Int, status: String, data: Consumer) {
        self.statusCode = statusCode
        self.status = status
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case data
    }
}

public struct GetConsumersResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    public var data: [Datum]

    public struct Datum: Codable {
        /// Example: "test_consumer_id"
        public var consumerID: String?
        /// Example: "1111"
        public var applicationID: String?
        public var metadata: ConsumerMetadata?
        /// Example: 101
        public var aggregatedRequestCount: Double?
        public var requestCounts: RequestCountAllocation?
        /// Example: "2021-05-07T12:55:42.242Z"
        public var created: String?
        /// Example: "2021-05-07T12:55:42.242Z"
        public var modified: String?
        /// Example: "2021-05-07T12:55:42.242Z"
        public var requestCountUpdated: String?
        /// Example: ["salesforce", "stripe"]
        public var services: [String]?

        public init(consumerID: String? = nil, applicationID: String? = nil, metadata: ConsumerMetadata? = nil, aggregatedRequestCount: Double? = nil, requestCounts: RequestCountAllocation? = nil, created: String? = nil, modified: String? = nil, requestCountUpdated: String? = nil, services: [String]? = nil) {
            self.consumerID = consumerID
            self.applicationID = applicationID
            self.metadata = metadata
            self.aggregatedRequestCount = aggregatedRequestCount
            self.requestCounts = requestCounts
            self.created = created
            self.modified = modified
            self.requestCountUpdated = requestCountUpdated
            self.services = services
        }

        private enum CodingKeys: String, CodingKey {
            case consumerID = "consumer_id"
            case applicationID = "application_id"
            case metadata
            case aggregatedRequestCount = "aggregated_request_count"
            case requestCounts = "request_counts"
            case created
            case modified
            case requestCountUpdated = "request_count_updated"
            case services
        }
    }

    public init(statusCode: Int, status: String, data: [Datum]) {
        self.statusCode = statusCode
        self.status = status
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case data
    }
}

public struct GetLogsResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    public var data: [Log]
    /// Response metadata
    public var meta: Meta?
    /// Links to navigate to previous or next pages through the API
    public var links: Links?

    public init(statusCode: Int, status: String, data: [Log], meta: Meta? = nil, links: Links? = nil) {
        self.statusCode = statusCode
        self.status = status
        self.data = data
        self.meta = meta
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case data
        case meta
        case links
    }
}

/// Links to navigate to previous or next pages through the API
public struct Links: Codable {
    /// Link to navigate to the previous page through the API
    ///
    /// Example: "https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D"
    public var previous: String?
    /// Link to navigate to the current page through the API
    ///
    /// Example: "https://unify.apideck.com/crm/companies"
    public var current: String?
    /// Link to navigate to the previous page through the API
    ///
    /// Example: "https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM"
    public var next: String?

    public init(previous: String? = nil, current: String? = nil, next: String? = nil) {
        self.previous = previous
        self.current = current
        self.next = next
    }
}

public struct Log: Codable {
    /// Indicates if the request was made via REST or Graphql endpoint.
    ///
    /// Example: "REST"
    public var apiStyle: String
    /// The Apideck base URL the request was made to.
    ///
    /// Example: "unify.apideck.com"
    public var baseURL: String
    /// Indicates whether or not this is a child or parent request.
    ///
    /// Example: false
    public var isChildRequest: Bool
    /// The consumer Id associated with the request.
    ///
    /// Example: "test-consumer"
    public var consumerID: String
    /// The entire execution time in milliseconds it took to call the Apideck service provider.
    ///
    /// Example: 2220.379304
    public var duration: Double
    /// If error occurred, this is brief explanation
    ///
    /// Example: "Refresh token is invalid"
    public var errorMessage: String?
    /// The entire execution time in milliseconds it took to make the request.
    ///
    /// Example: 2248
    public var execution: Int
    /// When request is a parent request, this indicates if there are child requests associated.
    ///
    /// Example: false
    public var hasChildren: Bool
    /// HTTP Method of request.
    ///
    /// Example: "GET"
    public var httpMethod: String
    /// UUID acting as Request Identifier.
    ///
    /// Example: "0b5f7480-5550-4f5c-a5fc-3c01ac43dd0f"
    public var id: String
    /// Latency added by making this request via Unified Api.
    ///
    /// Example: 27.620695999999953
    public var latency: Double
    /// The request as defined in OpenApi Spec.
    public var operation: Operation
    /// When request is a child request, this UUID indicates it's parent request.
    ///
    /// Example: "0b5f7480-5550-4f5c-a5fc-3c01ac43dd0f"
    public var parentID: String?
    /// The path component of the URI the request was made to.
    ///
    /// Example: "/vault/connections"
    public var path: String
    /// Indicates whether the request was made using Apidecks sandbox credentials or not.
    ///
    /// Example: false
    public var isSandbox: Bool
    /// Apideck service provider associated with request.
    public var service: Service
    /// The IP address of the source of the request.
    ///
    /// Example: "94.227.131.238"
    public var sourceIp: String?
    /// HTTP Status code that was returned.
    ///
    /// Example: 200
    public var statusCode: Int
    /// Whether or not the request was successful.
    ///
    /// Example: true
    public var isSuccess: Bool
    /// ISO Date and time when the request was made.
    ///
    /// Example: "2021-07-12T14:26:17.420Z"
    public var timestamp: String
    /// Which Unified Api request was made to.
    ///
    /// Example: "vault"
    public var unifiedAPI: UnifiedAPI

    /// The request as defined in OpenApi Spec.
    public struct Operation: Codable {
        /// The OpenApi Operation Id associated with the request
        ///
        /// Example: "connectionsAll"
        public var id: String
        /// The OpenApi Operation name associated with the request
        ///
        /// Example: "Get All Connections"
        public var name: String

        public init(id: String, name: String) {
            self.id = id
            self.name = name
        }
    }

    /// Apideck service provider associated with request.
    public struct Service: Codable {
        /// Apideck service provider id.
        ///
        /// Example: "apideck-vault"
        public var id: String
        /// Apideck service provider name.
        ///
        /// Example: "Apideck Vault"
        public var name: String

        public init(id: String, name: String) {
            self.id = id
            self.name = name
        }
    }

    /// Which Unified Api request was made to.
    ///
    /// Example: "vault"
    public enum UnifiedAPI: String, Codable, CaseIterable {
        case crm
        case lead
        case proxy
        case vault
        case accounting
    }

    public init(apiStyle: String, baseURL: String, isChildRequest: Bool, consumerID: String, duration: Double, errorMessage: String? = nil, execution: Int, hasChildren: Bool, httpMethod: String, id: String, latency: Double, operation: Operation, parentID: String? = nil, path: String, isSandbox: Bool, service: Service, sourceIp: String? = nil, statusCode: Int, isSuccess: Bool, timestamp: String, unifiedAPI: UnifiedAPI) {
        self.apiStyle = apiStyle
        self.baseURL = baseURL
        self.isChildRequest = isChildRequest
        self.consumerID = consumerID
        self.duration = duration
        self.errorMessage = errorMessage
        self.execution = execution
        self.hasChildren = hasChildren
        self.httpMethod = httpMethod
        self.id = id
        self.latency = latency
        self.operation = operation
        self.parentID = parentID
        self.path = path
        self.isSandbox = isSandbox
        self.service = service
        self.sourceIp = sourceIp
        self.statusCode = statusCode
        self.isSuccess = isSuccess
        self.timestamp = timestamp
        self.unifiedAPI = unifiedAPI
    }

    private enum CodingKeys: String, CodingKey {
        case apiStyle = "api_style"
        case baseURL = "base_url"
        case isChildRequest = "child_request"
        case consumerID = "consumer_id"
        case duration
        case errorMessage = "error_message"
        case execution
        case hasChildren = "has_children"
        case httpMethod = "http_method"
        case id
        case latency
        case operation
        case parentID = "parent_id"
        case path
        case isSandbox = "sandbox"
        case service
        case sourceIp = "source_ip"
        case statusCode = "status_code"
        case isSuccess = "success"
        case timestamp
        case unifiedAPI = "unified_api"
    }
}

public struct LogsFilter: Codable {
    /// Example: "crm+salesforce"
    public var connectorID: String?
    /// Example: 201
    public var statusCode: Double?
    /// Example: "vault,proxy"
    public var excludeUnifiedAPIs: String?

    public init(connectorID: String? = nil, statusCode: Double? = nil, excludeUnifiedAPIs: String? = nil) {
        self.connectorID = connectorID
        self.statusCode = statusCode
        self.excludeUnifiedAPIs = excludeUnifiedAPIs
    }

    private enum CodingKeys: String, CodingKey {
        case connectorID = "connector_id"
        case statusCode = "status_code"
        case excludeUnifiedAPIs = "exclude_unified_apis"
    }
}

/// Response metadata
public struct Meta: Codable {
    /// Number of items returned in the data property of the response
    ///
    /// Example: 50
    public var itemsOnPage: Int?
    /// Cursors to navigate to previous or next pages through the API
    public var cursors: Cursors?

    /// Cursors to navigate to previous or next pages through the API
    public struct Cursors: Codable {
        /// Cursor to navigate to the previous page of results through the API
        ///
        /// Example: "em9oby1jcm06OnBhZ2U6OjE="
        public var previous: String?
        /// Cursor to navigate to the current page of results through the API
        ///
        /// Example: "em9oby1jcm06OnBhZ2U6OjI="
        public var current: String?
        /// Cursor to navigate to the next page of results through the API
        ///
        /// Example: "em9oby1jcm06OnBhZ2U6OjM="
        public var next: String?

        public init(previous: String? = nil, current: String? = nil, next: String? = nil) {
            self.previous = previous
            self.current = current
            self.next = next
        }
    }

    public init(itemsOnPage: Int? = nil, cursors: Cursors? = nil) {
        self.itemsOnPage = itemsOnPage
        self.cursors = cursors
    }

    private enum CodingKeys: String, CodingKey {
        case itemsOnPage = "items_on_page"
        case cursors
    }
}

public struct NotFoundResponse: Codable {
    /// HTTP status code
    ///
    /// Example: 404
    public var statusCode: Double?
    /// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
    ///
    /// Example: "Not Found"
    public var error: String?
    /// The type of error returned
    ///
    /// Example: "EntityNotFoundError"
    public var typeName: String?
    /// A human-readable message providing more details about the error.
    ///
    /// Example: "Unknown Widget"
    public var message: String?
    /// Contains parameter or domain specific information related to the error and why it occurred.
    public var detail: Detail?
    /// Link to documentation of error type
    ///
    /// Example: "https://developers.apideck.com/errors#entitynotfounderror"
    public var ref: String?

    /// Contains parameter or domain specific information related to the error and why it occurred.
    public struct Detail: Codable {
        /// Example: "Could not find widget with id: '123'"
        public var string: String?
        /// Example:
        ///
        /// {
        ///   "not_found" : {
        ///     "entity" : "widget",
        ///     "id" : "123"
        ///   }
        /// }
        public var object: [String: AnyJSON]?

        public init(string: String? = nil, object: [String: AnyJSON]? = nil) {
            self.string = string
            self.object = object
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.object = try? container.decode([String: AnyJSON].self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = object { try container.encode(value) }
        }
    }

    public init(statusCode: Double? = nil, error: String? = nil, typeName: String? = nil, message: String? = nil, detail: Detail? = nil, ref: String? = nil) {
        self.statusCode = statusCode
        self.error = error
        self.typeName = typeName
        self.message = message
        self.detail = detail
        self.ref = ref
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case error
        case typeName = "type_name"
        case message
        case detail
        case ref
    }
}

public struct NotImplementedResponse: Codable {
    /// HTTP status code
    ///
    /// Example: 501
    public var statusCode: Double?
    /// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
    ///
    /// Example: "Not Implemented"
    public var error: String?
    /// The type of error returned
    ///
    /// Example: "MappingError"
    public var typeName: String?
    /// A human-readable message providing more details about the error.
    ///
    /// Example: "Unmapped Attribute"
    public var message: String?
    /// Contains parameter or domain specific information related to the error and why it occurred.
    public var detail: Detail?
    /// Link to documentation of error type
    ///
    /// Example: "https://developers.apideck.com/errors#mappingerror"
    public var ref: String?

    /// Contains parameter or domain specific information related to the error and why it occurred.
    public struct Detail: Codable {
        /// Example: "Failed to retrieve Widget tokenUrl from 'components.securitySchemes.oauth2.flows'"
        public var string: String?
        public var object: [String: AnyJSON]?

        public init(string: String? = nil, object: [String: AnyJSON]? = nil) {
            self.string = string
            self.object = object
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.object = try? container.decode([String: AnyJSON].self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = object { try container.encode(value) }
        }
    }

    public init(statusCode: Double? = nil, error: String? = nil, typeName: String? = nil, message: String? = nil, detail: Detail? = nil, ref: String? = nil) {
        self.statusCode = statusCode
        self.error = error
        self.typeName = typeName
        self.message = message
        self.detail = detail
        self.ref = ref
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case error
        case typeName = "type_name"
        case message
        case detail
        case ref
    }
}

public struct PaymentRequiredResponse: Codable {
    /// HTTP status code
    ///
    /// Example: 402
    public var statusCode: Double?
    /// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
    ///
    /// Example: "Payment Required"
    public var error: String?
    /// The type of error returned
    ///
    /// Example: "RequestLimitError"
    public var typeName: String?
    /// A human-readable message providing more details about the error.
    ///
    /// Example: "Request Limit Reached"
    public var message: String?
    /// Contains parameter or domain specific information related to the error and why it occurred.
    ///
    /// Example: "You have reached your limit of 2000"
    public var detail: String?
    /// Link to documentation of error type
    ///
    /// Example: "https://developers.apideck.com/errors#requestlimiterror"
    public var ref: String?

    public init(statusCode: Double? = nil, error: String? = nil, typeName: String? = nil, message: String? = nil, detail: String? = nil, ref: String? = nil) {
        self.statusCode = statusCode
        self.error = error
        self.typeName = typeName
        self.message = message
        self.detail = detail
        self.ref = ref
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case error
        case typeName = "type_name"
        case message
        case detail
        case ref
    }
}

public struct RequestCountAllocation: Codable {
    /// Example: 100
    public var unify: Double?
    /// Example: 10
    public var proxy: Double?
    /// Example: 21
    public var vault: Double?

    public init(unify: Double? = nil, proxy: Double? = nil, vault: Double? = nil) {
        self.unify = unify
        self.proxy = proxy
        self.vault = vault
    }
}

public struct Session: Codable {
    public var consumerMetadata: ConsumerMetadata?
    /// Custom consumer settings that are passed as part of the session.
    ///
    /// Example:
    ///
    /// {
    ///   "feature_flag_1" : true,
    ///   "tax_rates" : [
    ///     {
    ///       "id" : "6",
    ///       "label" : "6%"
    ///     },
    ///     {
    ///       "id" : "21",
    ///       "label" : "21%"
    ///     }
    ///   ]
    /// }
    public var customConsumerSettings: [String: AnyJSON]?
    /// Example: "https://mysaas.com/dashboard"
    public var redirectUri: String?
    public var settings: Settings?
    public var theme: Theme?

    public struct Settings: Codable {
        /// Provide the IDs of the Unified APIs you want to be visible. Leaving it empty or omiting this field will show all Unified APIs.
        public var unifiedAPIs: [UnifiedAPIID]?
        /// Hide resource settings
        public var isHideResourceSettings: Bool
        /// Sandbox mode
        ///
        /// Configure [Vault](/apis/vault/reference#section/Get-Started) to show a banner informing the logged in user is in a test environment.
        public var isSandboxMode: Bool
        /// Isolation mode
        ///
        /// Configure [Vault](/apis/vault/reference#section/Get-Started) to run in isolation mode, meaning it only shows the connection settings and hides the navigation items.
        public var isIsolationMode: Bool
        /// The duration of time the session is valid for (maximum 1 week).
        ///
        /// Example: "30m"
        public var sessionLength: String?
        /// Show logs
        ///
        /// Configure [Vault](/apis/vault/reference#section/Get-Started) to show the logs page. Defaults to `true`.
        public var isShowLogs: Bool
        /// Show suggestions
        ///
        /// Configure [Vault](/apis/vault/reference#section/Get-Started) to show the suggestions page. Defaults to `true`.
        public var isShowSuggestions: Bool
        /// Auto-redirect
        ///
        /// Automatically redirect to redirect uri after the connection has been configured as callable. Defaults to `false`.
        public var isAutoRedirect: Bool

        public init(unifiedAPIs: [UnifiedAPIID]? = nil, isHideResourceSettings: Bool? = nil, isSandboxMode: Bool? = nil, isIsolationMode: Bool? = nil, sessionLength: String? = nil, isShowLogs: Bool? = nil, isShowSuggestions: Bool? = nil, isAutoRedirect: Bool? = nil) {
            self.unifiedAPIs = unifiedAPIs
            self.isHideResourceSettings = isHideResourceSettings ?? false
            self.isSandboxMode = isSandboxMode ?? false
            self.isIsolationMode = isIsolationMode ?? false
            self.sessionLength = sessionLength
            self.isShowLogs = isShowLogs ?? true
            self.isShowSuggestions = isShowSuggestions ?? false
            self.isAutoRedirect = isAutoRedirect ?? false
        }

        private enum CodingKeys: String, CodingKey {
            case unifiedAPIs = "unified_apis"
            case isHideResourceSettings = "hide_resource_settings"
            case isSandboxMode = "sandbox_mode"
            case isIsolationMode = "isolation_mode"
            case sessionLength = "session_length"
            case isShowLogs = "show_logs"
            case isShowSuggestions = "show_suggestions"
            case isAutoRedirect = "auto_redirect"
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: CodingKeys.self)
            self.unifiedAPIs = try values.decodeIfPresent([UnifiedAPIID].self, forKey: .unifiedAPIs)
            self.isHideResourceSettings = try values.decodeIfPresent(Bool.self, forKey: .isHideResourceSettings) ?? false
            self.isSandboxMode = try values.decodeIfPresent(Bool.self, forKey: .isSandboxMode) ?? false
            self.isIsolationMode = try values.decodeIfPresent(Bool.self, forKey: .isIsolationMode) ?? false
            self.sessionLength = try values.decodeIfPresent(String.self, forKey: .sessionLength)
            self.isShowLogs = try values.decodeIfPresent(Bool.self, forKey: .isShowLogs) ?? true
            self.isShowSuggestions = try values.decodeIfPresent(Bool.self, forKey: .isShowSuggestions) ?? false
            self.isAutoRedirect = try values.decodeIfPresent(Bool.self, forKey: .isAutoRedirect) ?? false
        }
    }

    public struct Theme: Codable {
        /// Example: "https://res.cloudinary.com/apideck/icons/intercom"
        public var favicon: String?
        /// Example: "#286efa"
        public var primaryColor: String?
        /// Example: "https://compliance.apideck.com/privacy-policy"
        public var privacyURL: String?
        /// Example: "#286efa"
        public var sidepanelBackgroundColor: String?
        /// Example: "#FFFFFF"
        public var sidepanelTextColor: String?
        /// Example: "https://www.termsfeed.com/terms-conditions/957c85c1b089ae9e3219c83eff65377e"
        public var termsURL: String?
        /// Example: "Intercom"
        public var vaultName: String?

        public init(favicon: String? = nil, primaryColor: String? = nil, privacyURL: String? = nil, sidepanelBackgroundColor: String? = nil, sidepanelTextColor: String? = nil, termsURL: String? = nil, vaultName: String? = nil) {
            self.favicon = favicon
            self.primaryColor = primaryColor
            self.privacyURL = privacyURL
            self.sidepanelBackgroundColor = sidepanelBackgroundColor
            self.sidepanelTextColor = sidepanelTextColor
            self.termsURL = termsURL
            self.vaultName = vaultName
        }

        private enum CodingKeys: String, CodingKey {
            case favicon
            case primaryColor = "primary_color"
            case privacyURL = "privacy_url"
            case sidepanelBackgroundColor = "sidepanel_background_color"
            case sidepanelTextColor = "sidepanel_text_color"
            case termsURL = "terms_url"
            case vaultName = "vault_name"
        }
    }

    public init(consumerMetadata: ConsumerMetadata? = nil, customConsumerSettings: [String: AnyJSON]? = nil, redirectUri: String? = nil, settings: Settings? = nil, theme: Theme? = nil) {
        self.consumerMetadata = consumerMetadata
        self.customConsumerSettings = customConsumerSettings
        self.redirectUri = redirectUri
        self.settings = settings
        self.theme = theme
    }

    private enum CodingKeys: String, CodingKey {
        case consumerMetadata = "consumer_metadata"
        case customConsumerSettings = "custom_consumer_settings"
        case redirectUri = "redirect_uri"
        case settings
        case theme
    }
}

public struct SimpleFormFieldOption: Codable {
    /// Example: "General Channel"
    public var label: String?
    public var value: Value?

    public struct Value: Codable {
        /// Example: "general"
        public var string: String?
        /// Example: 123
        public var int: Int?
        /// Example: 12.5
        public var double: Double?
        /// Example: true
        public var isBool: Bool?
        /// Example: ["team", "general"]
        public var placeholderItems: [PlaceholderItem]?

        public struct PlaceholderItem: Codable {
            public var string: String?
            public var int: Int?
            public var double: Double?

            public init(string: String? = nil, int: Int? = nil, double: Double? = nil) {
                self.string = string
                self.int = int
                self.double = double
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                self.string = try? container.decode(String.self)
                self.int = try? container.decode(Int.self)
                self.double = try? container.decode(Double.self)
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                if let value = string { try container.encode(value) }
                if let value = int { try container.encode(value) }
                if let value = double { try container.encode(value) }
            }
        }

        public init(string: String? = nil, int: Int? = nil, double: Double? = nil, isBool: Bool? = nil, placeholderItems: [PlaceholderItem]? = nil) {
            self.string = string
            self.int = int
            self.double = double
            self.isBool = isBool
            self.placeholderItems = placeholderItems
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.int = try? container.decode(Int.self)
            self.double = try? container.decode(Double.self)
            self.isBool = try? container.decode(Bool.self)
            self.placeholderItems = try? container.decode([PlaceholderItem].self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = int { try container.encode(value) }
            if let value = double { try container.encode(value) }
            if let value = isBool { try container.encode(value) }
            if let value = placeholderItems { try container.encode(value) }
        }
    }

    public init(label: String? = nil, value: Value? = nil) {
        self.label = label
        self.value = value
    }
}

public struct UnauthorizedResponse: Codable {
    /// HTTP status code
    ///
    /// Example: 401
    public var statusCode: Double?
    /// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
    ///
    /// Example: "Unauthorized"
    public var error: String?
    /// The type of error returned
    ///
    /// Example: "UnauthorizedError"
    public var typeName: String?
    /// A human-readable message providing more details about the error.
    ///
    /// Example: "Unauthorized Request"
    public var message: String?
    /// Contains parameter or domain specific information related to the error and why it occurred.
    ///
    /// Example: "Failed to generate valid JWT Session. Verify applicationId is correct"
    public var detail: String?
    /// Link to documentation of error type
    ///
    /// Example: "https://developers.apideck.com/errors#unauthorizederror"
    public var ref: String?

    public init(statusCode: Double? = nil, error: String? = nil, typeName: String? = nil, message: String? = nil, detail: String? = nil, ref: String? = nil) {
        self.statusCode = statusCode
        self.error = error
        self.typeName = typeName
        self.message = message
        self.detail = detail
        self.ref = ref
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case error
        case typeName = "type_name"
        case message
        case detail
        case ref
    }
}

public struct UnexpectedErrorResponse: Codable {
    /// HTTP status code
    ///
    /// Example: 400
    public var statusCode: Double?
    /// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
    ///
    /// Example: "Bad Request"
    public var error: String?
    /// The type of error returned
    ///
    /// Example: "RequestHeadersValidationError"
    public var typeName: String?
    /// A human-readable message providing more details about the error.
    ///
    /// Example: "Invalid Params"
    public var message: String?
    /// Contains parameter or domain specific information related to the error and why it occurred.
    public var detail: Detail?
    /// Link to documentation of error type
    ///
    /// Example: "https://developers.apideck.com/errors#unauthorizederror"
    public var ref: String?

    /// Contains parameter or domain specific information related to the error and why it occurred.
    public struct Detail: Codable {
        /// Example: "Missing Header: x-apideck-consumer-id"
        public var string: String?
        /// Example:
        ///
        /// {
        ///   "missing" : [
        ///     {
        ///       "x-apideck-consumer-id" : "required"
        ///     }
        ///   ]
        /// }
        public var object: [String: AnyJSON]?

        public init(string: String? = nil, object: [String: AnyJSON]? = nil) {
            self.string = string
            self.object = object
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.object = try? container.decode([String: AnyJSON].self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = object { try container.encode(value) }
        }
    }

    public init(statusCode: Double? = nil, error: String? = nil, typeName: String? = nil, message: String? = nil, detail: Detail? = nil, ref: String? = nil) {
        self.statusCode = statusCode
        self.error = error
        self.typeName = typeName
        self.message = message
        self.detail = detail
        self.ref = ref
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case error
        case typeName = "type_name"
        case message
        case detail
        case ref
    }
}

public struct UnprocessableResponse: Codable {
    /// HTTP status code
    ///
    /// Example: 422
    public var statusCode: Double?
    /// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
    ///
    /// Example: "Unprocessable Entity"
    public var error: String?
    /// The type of error returned
    ///
    /// Example: "InvalidStateError"
    public var typeName: String?
    /// A human-readable message providing more details about the error.
    ///
    /// Example: "Invalid State"
    public var message: String?
    /// Contains parameter or domain specific information related to the error and why it occurred.
    ///
    /// Example: "State did not include unified_api"
    public var detail: String?
    /// Link to documentation of error type
    ///
    /// Example: "https://developers.apideck.com/errors#invalidstateerror"
    public var ref: String?

    public init(statusCode: Double? = nil, error: String? = nil, typeName: String? = nil, message: String? = nil, detail: String? = nil, ref: String? = nil) {
        self.statusCode = statusCode
        self.error = error
        self.typeName = typeName
        self.message = message
        self.detail = detail
        self.ref = ref
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case error
        case typeName = "type_name"
        case message
        case detail
        case ref
    }
}

/// Name of Apideck Unified API
///
/// Example: "crm"
public enum UnifiedAPIID: String, Codable, CaseIterable {
    case vault
    case lead
    case crm
    case accounting
    case fileStorage = "file-storage"
    case spreadsheet
    case email
    case script
    case sms
    case teamMessaging = "team-messaging"
    case ecommerce
    case payroll
    case customerSupport = "customer-support"
    case timeRegistration = "time-registration"
    case transactionalEmail = "transactional-email"
    case hcm
    case form
    case csp
    case emailMarketing = "email-marketing"
    case ats
    case hris
    case pos
}

public struct UpdateConnectionResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    public var data: Connection

    public init(statusCode: Int, status: String, data: Connection) {
        self.statusCode = statusCode
        self.status = status
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case data
    }
}

public struct ConnectionEvent: Codable {
    /// Unique reference to this request event
    ///
    /// Example: "9755c355-56c3-4a2f-a2da-86ff4411fccb"
    public var eventID: String?
    /// Service provider identifier
    ///
    /// Example: "close"
    public var serviceID: String?
    /// The service provider's ID of the entity that triggered this event
    ///
    /// Example: "123456ASDF"
    public var entityID: String?
    /// The type entity that triggered this event
    ///
    /// Example: "Company"
    public var entityType: String?
    public var entity: ConsumerConnection?
    /// Example: "vault.connection.created"
    public var eventType: VaultEventType?
    /// The current count this request event has been attempted
    public var executionAttempt: Double?
    /// ISO Datetime for when the original event occurred
    ///
    /// Example: "2021-10-01T03:14:55.419Z"
    public var occurredAt: String?

    public init(eventID: String? = nil, serviceID: String? = nil, entityID: String? = nil, entityType: String? = nil, entity: ConsumerConnection? = nil, eventType: VaultEventType? = nil, executionAttempt: Double? = nil, occurredAt: String? = nil) {
        self.eventID = eventID
        self.serviceID = serviceID
        self.entityID = entityID
        self.entityType = entityType
        self.entity = entity
        self.eventType = eventType
        self.executionAttempt = executionAttempt
        self.occurredAt = occurredAt
    }

    private enum CodingKeys: String, CodingKey {
        case eventID = "event_id"
        case serviceID = "service_id"
        case entityID = "entity_id"
        case entityType = "entity_type"
        case entity
        case eventType = "event_type"
        case executionAttempt = "execution_attempt"
        case occurredAt = "occurred_at"
    }
}

/// Example: "vault.connection.created"
public enum VaultEventType: String, Codable, CaseIterable {
    case asterisk = "*"
    case vaultConnectionCreated = "vault.connection.created"
    case vaultConnectionUpdated = "vault.connection.updated"
    case vaultConnectionDeleted = "vault.connection.deleted"
    case vaultConnectionCallable = "vault.connection.callable"
}

public enum AnyJSON: Equatable, Codable {
    case string(String)
    case number(Double)
    case object([String: AnyJSON])
    case array([AnyJSON])
    case bool(Bool)

    var value: Any {
        switch self {
        case .string(let string): return string
        case .number(let double): return double
        case .object(let dictionary): return dictionary
        case .array(let array): return array
        case .bool(let bool): return bool
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .array(array): try container.encode(array)
        case let .object(object): try container.encode(object)
        case let .string(string): try container.encode(string)
        case let .number(number): try container.encode(number)
        case let .bool(bool): try container.encode(bool)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let object = try? container.decode([String: AnyJSON].self) {
            self = .object(object)
        } else if let array = try? container.decode([AnyJSON].self) {
            self = .array(array)
        } else if let string = try? container.decode(String.self) {
            self = .string(string)
        } else if let bool = try? container.decode(Bool.self) {
            self = .bool(bool)
        } else if let number = try? container.decode(Double.self) {
            self = .number(number)
        } else {
            throw DecodingError.dataCorrupted(
                .init(codingPath: decoder.codingPath, debugDescription: "Invalid JSON value.")
            )
        }
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
