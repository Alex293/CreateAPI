// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import Get
import URLQueryEncoder

extension Paths {
    public static var predict: Predict {
        Predict(path: "/predict")
    }

    public struct Predict {
        /// Path: `/predict`
        public let path: String
    }
}

extension Paths.Predict {
    public var car: Car {
        Car(path: path + "/car")
    }

    public struct Car {
        /// Path: `/predict/car`
        public let path: String
    }
}

extension Paths.Predict.Car {
    public var price: Price {
        Price(path: path + "/price")
    }

    public struct Price {
        /// Path: `/predict/car/price`
        public let path: String

        /// Predict car price based on it's specifications
        public func get(parameters: GetParameters) -> Request<MarketcheckAPI.PricePrediction> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var vin: String?
            public var carType: CarType
            public var year: Int?
            public var make: String?
            public var model: String?
            public var trim: String?
            public var isCertified: Bool?
            public var isCarfax1Owner: Bool?
            public var isCarfaxCleanTitle: Bool?
            public var baseExteriorColor: String?
            public var baseInteriorColor: String?
            public var transmission: Transmission?
            public var drivetrain: Drivetrain?
            public var engineSize: Double?
            public var engineBlock: EngineBlock?
            public var cylinders: Int?
            public var doors: Int?
            public var highwayMpg: Int?
            public var cityMpg: Int?
            public var latitude: Double?
            public var longitude: Double?
            public var miles: Int?

            public enum CarType: String, Codable, CaseIterable {
                case used
                case new
            }

            public enum Transmission: String, Codable, CaseIterable {
                case manual = "Manual"
                case automatic = "Automatic"
            }

            public enum Drivetrain: String, Codable, CaseIterable {
                case _4wd = "4WD"
                case awd = "AWD"
                case fwd = "FWD"
                case rwd = "RWD"
            }

            public enum EngineBlock: String, Codable, CaseIterable {
                case i = "I"
                case v = "V"
                case h = "H"
            }

            public init(apiKey: String? = nil, vin: String? = nil, carType: CarType, year: Int? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, isCertified: Bool? = nil, isCarfax1Owner: Bool? = nil, isCarfaxCleanTitle: Bool? = nil, baseExteriorColor: String? = nil, baseInteriorColor: String? = nil, transmission: Transmission? = nil, drivetrain: Drivetrain? = nil, engineSize: Double? = nil, engineBlock: EngineBlock? = nil, cylinders: Int? = nil, doors: Int? = nil, highwayMpg: Int? = nil, cityMpg: Int? = nil, latitude: Double? = nil, longitude: Double? = nil, miles: Int? = nil) {
                self.apiKey = apiKey
                self.vin = vin
                self.carType = carType
                self.year = year
                self.make = make
                self.model = model
                self.trim = trim
                self.isCertified = isCertified
                self.isCarfax1Owner = isCarfax1Owner
                self.isCarfaxCleanTitle = isCarfaxCleanTitle
                self.baseExteriorColor = baseExteriorColor
                self.baseInteriorColor = baseInteriorColor
                self.transmission = transmission
                self.drivetrain = drivetrain
                self.engineSize = engineSize
                self.engineBlock = engineBlock
                self.cylinders = cylinders
                self.doors = doors
                self.highwayMpg = highwayMpg
                self.cityMpg = cityMpg
                self.latitude = latitude
                self.longitude = longitude
                self.miles = miles
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(vin, forKey: "vin")
                encoder.encode(carType, forKey: "car_type")
                encoder.encode(year, forKey: "year")
                encoder.encode(make, forKey: "make")
                encoder.encode(model, forKey: "model")
                encoder.encode(trim, forKey: "trim")
                encoder.encode(isCertified, forKey: "is_certified")
                encoder.encode(isCarfax1Owner, forKey: "carfax_1_owner")
                encoder.encode(isCarfaxCleanTitle, forKey: "carfax_clean_title")
                encoder.encode(baseExteriorColor, forKey: "base_exterior_color")
                encoder.encode(baseInteriorColor, forKey: "base_interior_color")
                encoder.encode(transmission, forKey: "transmission")
                encoder.encode(drivetrain, forKey: "drivetrain")
                encoder.encode(engineSize, forKey: "engine_size")
                encoder.encode(engineBlock, forKey: "engine_block")
                encoder.encode(cylinders, forKey: "cylinders")
                encoder.encode(doors, forKey: "doors")
                encoder.encode(highwayMpg, forKey: "highway_mpg")
                encoder.encode(cityMpg, forKey: "city_mpg")
                encoder.encode(latitude, forKey: "latitude")
                encoder.encode(longitude, forKey: "longitude")
                encoder.encode(miles, forKey: "miles")
                return encoder.items
            }
        }
    }
}

extension Paths {
    public static var search: Search {
        Search(path: "/search")
    }

    public struct Search {
        /// Path: `/search`
        public let path: String
    }
}

extension Paths.Search {
    public var car: Car {
        Car(path: path + "/car")
    }

    public struct Car {
        /// Path: `/search/car`
        public let path: String
    }
}

extension Paths.Search.Car {
    public var uk: Uk {
        Uk(path: path + "/uk")
    }

    public struct Uk {
        /// Path: `/search/car/uk`
        public let path: String
    }
}

extension Paths.Search.Car.Uk {
    public var active: Active {
        Active(path: path + "/active")
    }

    public struct Active {
        /// Path: `/search/car/uk/active`
        public let path: String

        /// Gets active car listings in UK for the given search criteria
        ///
        /// Search cars for sale in UK
        public func get(parameters: GetParameters? = nil) -> Request<MarketcheckAPI.SearchResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var latitude: Double?
            public var longitude: Double?
            public var radius: Int?
            public var postalCode: String?
            public var zip: String?
            public var carType: CarType?
            public var year: String?
            public var yearRange: String?
            public var make: String?
            public var model: String?
            public var variant: String?
            public var trim: String?
            public var vin: String?
            public var bodyType: String?
            public var ymmt: String?
            public var transmission: String?
            public var doors: String?
            public var drivetrain: String?
            public var exteriorColor: String?
            public var interiorColor: String?
            public var engine: String?
            public var milesRange: String?
            public var priceRange: String?
            public var msrpRange: String?
            public var sortBy: String?
            public var sortOrder: SortOrder?
            public var rows: Int?
            public var start: Int?
            public var msaCode: String?
            public var facets: String?
            public var rangeFacets: String?
            public var facetSort: FacetSort?
            public var stats: String?
            public var country: Country?
            public var isPlot: Bool?
            public var isNodedup: Bool?
            public var isDedup: Bool?
            public var county: String?
            public var state: String?
            public var city: String?
            public var fuelType: String?
            public var stockNo: String?
            public var lastSeenRange: String?
            public var firstSeenRange: String?
            public var firstSeenAtSourceRange: String?
            public var firstSeenAtMcRange: String?
            public var lastSeenDays: String?
            public var firstSeenDays: String?
            public var firstSeenAtSourceDays: String?
            public var firstSeenAtMcDays: String?
            public var co2Emissions: String?
            public var insuranceGroup: String?
            public var vehicleRegistrationMark: String?
            public var vehicleRegistrationDateRange: String?
            public var numOwners: String?

            public enum CarType: String, Codable, CaseIterable {
                case new
                case used
            }

            public enum SortOrder: String, Codable, CaseIterable {
                case asc
                case desc
                case asc2 = "ASC"
                case desc2 = "DESC"
            }

            public enum FacetSort: String, Codable, CaseIterable {
                case count
                case index
            }

            public enum Country: String, Codable, CaseIterable {
                case uk
                case england
                case scotland
                case northanIreland = "northan ireland"
                case wales
            }

            public init(apiKey: String? = nil, latitude: Double? = nil, longitude: Double? = nil, radius: Int? = nil, postalCode: String? = nil, zip: String? = nil, carType: CarType? = nil, year: String? = nil, yearRange: String? = nil, make: String? = nil, model: String? = nil, variant: String? = nil, trim: String? = nil, vin: String? = nil, bodyType: String? = nil, ymmt: String? = nil, transmission: String? = nil, doors: String? = nil, drivetrain: String? = nil, exteriorColor: String? = nil, interiorColor: String? = nil, engine: String? = nil, milesRange: String? = nil, priceRange: String? = nil, msrpRange: String? = nil, sortBy: String? = nil, sortOrder: SortOrder? = nil, rows: Int? = nil, start: Int? = nil, msaCode: String? = nil, facets: String? = nil, rangeFacets: String? = nil, facetSort: FacetSort? = nil, stats: String? = nil, country: Country? = nil, isPlot: Bool? = nil, isNodedup: Bool? = nil, isDedup: Bool? = nil, county: String? = nil, state: String? = nil, city: String? = nil, fuelType: String? = nil, stockNo: String? = nil, lastSeenRange: String? = nil, firstSeenRange: String? = nil, firstSeenAtSourceRange: String? = nil, firstSeenAtMcRange: String? = nil, lastSeenDays: String? = nil, firstSeenDays: String? = nil, firstSeenAtSourceDays: String? = nil, firstSeenAtMcDays: String? = nil, co2Emissions: String? = nil, insuranceGroup: String? = nil, vehicleRegistrationMark: String? = nil, vehicleRegistrationDateRange: String? = nil, numOwners: String? = nil) {
                self.apiKey = apiKey
                self.latitude = latitude
                self.longitude = longitude
                self.radius = radius
                self.postalCode = postalCode
                self.zip = zip
                self.carType = carType
                self.year = year
                self.yearRange = yearRange
                self.make = make
                self.model = model
                self.variant = variant
                self.trim = trim
                self.vin = vin
                self.bodyType = bodyType
                self.ymmt = ymmt
                self.transmission = transmission
                self.doors = doors
                self.drivetrain = drivetrain
                self.exteriorColor = exteriorColor
                self.interiorColor = interiorColor
                self.engine = engine
                self.milesRange = milesRange
                self.priceRange = priceRange
                self.msrpRange = msrpRange
                self.sortBy = sortBy
                self.sortOrder = sortOrder
                self.rows = rows
                self.start = start
                self.msaCode = msaCode
                self.facets = facets
                self.rangeFacets = rangeFacets
                self.facetSort = facetSort
                self.stats = stats
                self.country = country
                self.isPlot = isPlot
                self.isNodedup = isNodedup
                self.isDedup = isDedup
                self.county = county
                self.state = state
                self.city = city
                self.fuelType = fuelType
                self.stockNo = stockNo
                self.lastSeenRange = lastSeenRange
                self.firstSeenRange = firstSeenRange
                self.firstSeenAtSourceRange = firstSeenAtSourceRange
                self.firstSeenAtMcRange = firstSeenAtMcRange
                self.lastSeenDays = lastSeenDays
                self.firstSeenDays = firstSeenDays
                self.firstSeenAtSourceDays = firstSeenAtSourceDays
                self.firstSeenAtMcDays = firstSeenAtMcDays
                self.co2Emissions = co2Emissions
                self.insuranceGroup = insuranceGroup
                self.vehicleRegistrationMark = vehicleRegistrationMark
                self.vehicleRegistrationDateRange = vehicleRegistrationDateRange
                self.numOwners = numOwners
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(latitude, forKey: "latitude")
                encoder.encode(longitude, forKey: "longitude")
                encoder.encode(radius, forKey: "radius")
                encoder.encode(postalCode, forKey: "postal_code")
                encoder.encode(zip, forKey: "zip")
                encoder.encode(carType, forKey: "car_type")
                encoder.encode(year, forKey: "year")
                encoder.encode(yearRange, forKey: "year_range")
                encoder.encode(make, forKey: "make")
                encoder.encode(model, forKey: "model")
                encoder.encode(variant, forKey: "variant")
                encoder.encode(trim, forKey: "trim")
                encoder.encode(vin, forKey: "vin")
                encoder.encode(bodyType, forKey: "body_type")
                encoder.encode(ymmt, forKey: "ymmt")
                encoder.encode(transmission, forKey: "transmission")
                encoder.encode(doors, forKey: "doors")
                encoder.encode(drivetrain, forKey: "drivetrain")
                encoder.encode(exteriorColor, forKey: "exterior_color")
                encoder.encode(interiorColor, forKey: "interior_color")
                encoder.encode(engine, forKey: "engine")
                encoder.encode(milesRange, forKey: "miles_range")
                encoder.encode(priceRange, forKey: "price_range")
                encoder.encode(msrpRange, forKey: "msrp_range")
                encoder.encode(sortBy, forKey: "sort_by")
                encoder.encode(sortOrder, forKey: "sort_order")
                encoder.encode(rows, forKey: "rows")
                encoder.encode(start, forKey: "start")
                encoder.encode(msaCode, forKey: "msa_code")
                encoder.encode(facets, forKey: "facets")
                encoder.encode(rangeFacets, forKey: "range_facets")
                encoder.encode(facetSort, forKey: "facet_sort")
                encoder.encode(stats, forKey: "stats")
                encoder.encode(country, forKey: "country")
                encoder.encode(isPlot, forKey: "plot")
                encoder.encode(isNodedup, forKey: "nodedup")
                encoder.encode(isDedup, forKey: "dedup")
                encoder.encode(county, forKey: "county")
                encoder.encode(state, forKey: "state")
                encoder.encode(city, forKey: "city")
                encoder.encode(fuelType, forKey: "fuel_type")
                encoder.encode(stockNo, forKey: "stock_no")
                encoder.encode(lastSeenRange, forKey: "last_seen_range")
                encoder.encode(firstSeenRange, forKey: "first_seen_range")
                encoder.encode(firstSeenAtSourceRange, forKey: "first_seen_at_source_range")
                encoder.encode(firstSeenAtMcRange, forKey: "first_seen_at_mc_range")
                encoder.encode(lastSeenDays, forKey: "last_seen_days")
                encoder.encode(firstSeenDays, forKey: "first_seen_days")
                encoder.encode(firstSeenAtSourceDays, forKey: "first_seen_at_source_days")
                encoder.encode(firstSeenAtMcDays, forKey: "first_seen_at_mc_days")
                encoder.encode(co2Emissions, forKey: "co2_emissions")
                encoder.encode(insuranceGroup, forKey: "insurance_group")
                encoder.encode(vehicleRegistrationMark, forKey: "vehicle_registration_mark")
                encoder.encode(vehicleRegistrationDateRange, forKey: "vehicle_registration_date_range")
                encoder.encode(numOwners, forKey: "num_owners")
                return encoder.items
            }
        }
    }
}

extension Paths.Search.Car {
    public var active: Active {
        Active(path: path + "/active")
    }

    public struct Active {
        /// Path: `/search/car/active`
        public let path: String

        /// Gets active car listings for the given search criteria
        ///
        /// This endpoint is the meat of the API and serves many purposes. This API produces a list of currently active cars from the market for the given search criteria. The API results are limited to allow pagination upto 10000 rows. 
        ///  The search API facilitates the following use cases - 
        /// 1. Search Cars around a given geo-point within a given radius 
        /// 2. Search cars for a specific year / make / model or combination of these 
        /// 3. Search cars matching multiple year, make, model combinatins in the same search request
        /// 4. Filter results by most car specification attributes
        /// 5. Search for similar cars by VIN or Taxonomy VIN 
        /// 6. Filter cars within a given price / miles / days on market (dom) range
        /// 7. Specify a sort order for the results on price / miles / dom / listed date 
        /// 8. Search cars for a given City / State combination 
        /// 9. Get Facets to build the search drill downs 
        /// 10. Get Market averages for price/miles/dom for your search
        public func get(parameters: GetParameters? = nil) -> Request<MarketcheckAPI.SearchResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var isAppendAPIKey: Bool?
            public var latitude: Double?
            public var longitude: Double?
            public var radius: Int?
            public var zip: String?
            public var isIncludeLease: Bool?
            public var isIncludeFinance: Bool?
            public var leaseTerm: String?
            public var leaseDownPayment: String?
            public var leaseEmp: String?
            public var financeLoanTerm: String?
            public var financeLoanApr: String?
            public var financeEmp: String?
            public var financeDownPayment: String?
            public var financeDownPaymentPer: String?
            public var carType: CarType?
            public var carfax1Owner: Carfax1Owner?
            public var carfaxCleanTitle: CarfaxCleanTitle?
            public var yearRange: String?
            public var year: String?
            public var make: String?
            public var model: String?
            public var trim: String?
            public var vin: String?
            public var bodyType: String?
            public var bodySubtype: String?
            public var vehicleType: String?
            public var vins: String?
            public var taxonomyVins: String?
            public var mm: String?
            public var ymm: String?
            public var ymmt: String?
            public var match: String?
            public var cylinders: String?
            public var transmission: String?
            public var doors: String?
            public var drivetrain: String?
            public var exteriorColor: String?
            public var interiorColor: String?
            public var baseExteriorColor: String?
            public var baseInteriorColor: String?
            public var engine: String?
            public var engineSize: String?
            public var engineAspiration: String?
            public var engineBlock: String?
            public var highwayMpgRange: String?
            public var cityMpgRange: String?
            public var milesRange: String?
            public var priceRange: String?
            public var msrpRange: String?
            public var domRange: String?
            public var sortBy: String?
            public var sortOrder: SortOrder?
            public var rows: Int?
            public var start: Int?
            public var isIncludeNonVinListings: Bool?
            public var msaCode: String?
            public var facets: String?
            public var rangeFacets: String?
            public var facetSort: FacetSort?
            public var stats: String?
            public var country: Country?
            public var isPlot: Bool?
            public var isNodedup: Bool?
            public var isDedup: Bool?
            public var isOwned: Bool?
            public var source: String?
            public var state: String?
            public var city: String?
            public var trimO: String?
            public var trimR: String?
            public var domActiveRange: String?
            public var dom180Range: String?
            public var excludeCertified: Bool?
            public var fuelType: String?
            public var dealerType: DealerType?
            public var isPhotoLinks: Bool?
            public var stockNo: String?
            public var lastSeenRange: String?
            public var firstSeenRange: String?
            public var firstSeenAtSourceRange: String?
            public var firstSeenAtMcRange: String?
            public var lastSeenDays: String?
            public var firstSeenDays: String?
            public var firstSeenAtSourceDays: String?
            public var firstSeenAtMcDays: String?
            public var isIncludeRelevantLinks: Bool?

            public enum CarType: String, Codable, CaseIterable {
                case new
                case used
                case certified
            }

            public enum Carfax1Owner: String, Codable, CaseIterable {
                case `true`
                case `false`
            }

            public enum CarfaxCleanTitle: String, Codable, CaseIterable {
                case `true`
                case `false`
            }

            public enum SortOrder: String, Codable, CaseIterable {
                case asc
                case desc
                case asc2 = "ASC"
                case desc2 = "DESC"
            }

            public enum FacetSort: String, Codable, CaseIterable {
                case count
                case index
            }

            public enum Country: String, Codable, CaseIterable {
                case us = "US"
                case ca = "CA"
                case us2 = "us"
                case ca2 = "ca"
                case all
                case all2 = "ALL"
            }

            public enum DealerType: String, Codable, CaseIterable {
                case franchise
                case independent
            }

            public init(apiKey: String? = nil, isAppendAPIKey: Bool? = nil, latitude: Double? = nil, longitude: Double? = nil, radius: Int? = nil, zip: String? = nil, isIncludeLease: Bool? = nil, isIncludeFinance: Bool? = nil, leaseTerm: String? = nil, leaseDownPayment: String? = nil, leaseEmp: String? = nil, financeLoanTerm: String? = nil, financeLoanApr: String? = nil, financeEmp: String? = nil, financeDownPayment: String? = nil, financeDownPaymentPer: String? = nil, carType: CarType? = nil, carfax1Owner: Carfax1Owner? = nil, carfaxCleanTitle: CarfaxCleanTitle? = nil, yearRange: String? = nil, year: String? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, vin: String? = nil, bodyType: String? = nil, bodySubtype: String? = nil, vehicleType: String? = nil, vins: String? = nil, taxonomyVins: String? = nil, mm: String? = nil, ymm: String? = nil, ymmt: String? = nil, match: String? = nil, cylinders: String? = nil, transmission: String? = nil, doors: String? = nil, drivetrain: String? = nil, exteriorColor: String? = nil, interiorColor: String? = nil, baseExteriorColor: String? = nil, baseInteriorColor: String? = nil, engine: String? = nil, engineSize: String? = nil, engineAspiration: String? = nil, engineBlock: String? = nil, highwayMpgRange: String? = nil, cityMpgRange: String? = nil, milesRange: String? = nil, priceRange: String? = nil, msrpRange: String? = nil, domRange: String? = nil, sortBy: String? = nil, sortOrder: SortOrder? = nil, rows: Int? = nil, start: Int? = nil, isIncludeNonVinListings: Bool? = nil, msaCode: String? = nil, facets: String? = nil, rangeFacets: String? = nil, facetSort: FacetSort? = nil, stats: String? = nil, country: Country? = nil, isPlot: Bool? = nil, isNodedup: Bool? = nil, isDedup: Bool? = nil, isOwned: Bool? = nil, source: String? = nil, state: String? = nil, city: String? = nil, trimO: String? = nil, trimR: String? = nil, domActiveRange: String? = nil, dom180Range: String? = nil, excludeCertified: Bool? = nil, fuelType: String? = nil, dealerType: DealerType? = nil, isPhotoLinks: Bool? = nil, stockNo: String? = nil, lastSeenRange: String? = nil, firstSeenRange: String? = nil, firstSeenAtSourceRange: String? = nil, firstSeenAtMcRange: String? = nil, lastSeenDays: String? = nil, firstSeenDays: String? = nil, firstSeenAtSourceDays: String? = nil, firstSeenAtMcDays: String? = nil, isIncludeRelevantLinks: Bool? = nil) {
                self.apiKey = apiKey
                self.isAppendAPIKey = isAppendAPIKey
                self.latitude = latitude
                self.longitude = longitude
                self.radius = radius
                self.zip = zip
                self.isIncludeLease = isIncludeLease
                self.isIncludeFinance = isIncludeFinance
                self.leaseTerm = leaseTerm
                self.leaseDownPayment = leaseDownPayment
                self.leaseEmp = leaseEmp
                self.financeLoanTerm = financeLoanTerm
                self.financeLoanApr = financeLoanApr
                self.financeEmp = financeEmp
                self.financeDownPayment = financeDownPayment
                self.financeDownPaymentPer = financeDownPaymentPer
                self.carType = carType
                self.carfax1Owner = carfax1Owner
                self.carfaxCleanTitle = carfaxCleanTitle
                self.yearRange = yearRange
                self.year = year
                self.make = make
                self.model = model
                self.trim = trim
                self.vin = vin
                self.bodyType = bodyType
                self.bodySubtype = bodySubtype
                self.vehicleType = vehicleType
                self.vins = vins
                self.taxonomyVins = taxonomyVins
                self.mm = mm
                self.ymm = ymm
                self.ymmt = ymmt
                self.match = match
                self.cylinders = cylinders
                self.transmission = transmission
                self.doors = doors
                self.drivetrain = drivetrain
                self.exteriorColor = exteriorColor
                self.interiorColor = interiorColor
                self.baseExteriorColor = baseExteriorColor
                self.baseInteriorColor = baseInteriorColor
                self.engine = engine
                self.engineSize = engineSize
                self.engineAspiration = engineAspiration
                self.engineBlock = engineBlock
                self.highwayMpgRange = highwayMpgRange
                self.cityMpgRange = cityMpgRange
                self.milesRange = milesRange
                self.priceRange = priceRange
                self.msrpRange = msrpRange
                self.domRange = domRange
                self.sortBy = sortBy
                self.sortOrder = sortOrder
                self.rows = rows
                self.start = start
                self.isIncludeNonVinListings = isIncludeNonVinListings
                self.msaCode = msaCode
                self.facets = facets
                self.rangeFacets = rangeFacets
                self.facetSort = facetSort
                self.stats = stats
                self.country = country
                self.isPlot = isPlot
                self.isNodedup = isNodedup
                self.isDedup = isDedup
                self.isOwned = isOwned
                self.source = source
                self.state = state
                self.city = city
                self.trimO = trimO
                self.trimR = trimR
                self.domActiveRange = domActiveRange
                self.dom180Range = dom180Range
                self.excludeCertified = excludeCertified
                self.fuelType = fuelType
                self.dealerType = dealerType
                self.isPhotoLinks = isPhotoLinks
                self.stockNo = stockNo
                self.lastSeenRange = lastSeenRange
                self.firstSeenRange = firstSeenRange
                self.firstSeenAtSourceRange = firstSeenAtSourceRange
                self.firstSeenAtMcRange = firstSeenAtMcRange
                self.lastSeenDays = lastSeenDays
                self.firstSeenDays = firstSeenDays
                self.firstSeenAtSourceDays = firstSeenAtSourceDays
                self.firstSeenAtMcDays = firstSeenAtMcDays
                self.isIncludeRelevantLinks = isIncludeRelevantLinks
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(isAppendAPIKey, forKey: "append_api_key")
                encoder.encode(latitude, forKey: "latitude")
                encoder.encode(longitude, forKey: "longitude")
                encoder.encode(radius, forKey: "radius")
                encoder.encode(zip, forKey: "zip")
                encoder.encode(isIncludeLease, forKey: "include_lease")
                encoder.encode(isIncludeFinance, forKey: "include_finance")
                encoder.encode(leaseTerm, forKey: "lease_term")
                encoder.encode(leaseDownPayment, forKey: "lease_down_payment")
                encoder.encode(leaseEmp, forKey: "lease_emp")
                encoder.encode(financeLoanTerm, forKey: "finance_loan_term")
                encoder.encode(financeLoanApr, forKey: "finance_loan_apr")
                encoder.encode(financeEmp, forKey: "finance_emp")
                encoder.encode(financeDownPayment, forKey: "finance_down_payment")
                encoder.encode(financeDownPaymentPer, forKey: "finance_down_payment_per")
                encoder.encode(carType, forKey: "car_type")
                encoder.encode(carfax1Owner, forKey: "carfax_1_owner")
                encoder.encode(carfaxCleanTitle, forKey: "carfax_clean_title")
                encoder.encode(yearRange, forKey: "year_range")
                encoder.encode(year, forKey: "year")
                encoder.encode(make, forKey: "make")
                encoder.encode(model, forKey: "model")
                encoder.encode(trim, forKey: "trim")
                encoder.encode(vin, forKey: "vin")
                encoder.encode(bodyType, forKey: "body_type")
                encoder.encode(bodySubtype, forKey: "body_subtype")
                encoder.encode(vehicleType, forKey: "vehicle_type")
                encoder.encode(vins, forKey: "vins")
                encoder.encode(taxonomyVins, forKey: "taxonomy_vins")
                encoder.encode(mm, forKey: "mm")
                encoder.encode(ymm, forKey: "ymm")
                encoder.encode(ymmt, forKey: "ymmt")
                encoder.encode(match, forKey: "match")
                encoder.encode(cylinders, forKey: "cylinders")
                encoder.encode(transmission, forKey: "transmission")
                encoder.encode(doors, forKey: "doors")
                encoder.encode(drivetrain, forKey: "drivetrain")
                encoder.encode(exteriorColor, forKey: "exterior_color")
                encoder.encode(interiorColor, forKey: "interior_color")
                encoder.encode(baseExteriorColor, forKey: "base_exterior_color")
                encoder.encode(baseInteriorColor, forKey: "base_interior_color")
                encoder.encode(engine, forKey: "engine")
                encoder.encode(engineSize, forKey: "engine_size")
                encoder.encode(engineAspiration, forKey: "engine_aspiration")
                encoder.encode(engineBlock, forKey: "engine_block")
                encoder.encode(highwayMpgRange, forKey: "highway_mpg_range")
                encoder.encode(cityMpgRange, forKey: "city_mpg_range")
                encoder.encode(milesRange, forKey: "miles_range")
                encoder.encode(priceRange, forKey: "price_range")
                encoder.encode(msrpRange, forKey: "msrp_range")
                encoder.encode(domRange, forKey: "dom_range")
                encoder.encode(sortBy, forKey: "sort_by")
                encoder.encode(sortOrder, forKey: "sort_order")
                encoder.encode(rows, forKey: "rows")
                encoder.encode(start, forKey: "start")
                encoder.encode(isIncludeNonVinListings, forKey: "include_non_vin_listings")
                encoder.encode(msaCode, forKey: "msa_code")
                encoder.encode(facets, forKey: "facets")
                encoder.encode(rangeFacets, forKey: "range_facets")
                encoder.encode(facetSort, forKey: "facet_sort")
                encoder.encode(stats, forKey: "stats")
                encoder.encode(country, forKey: "country")
                encoder.encode(isPlot, forKey: "plot")
                encoder.encode(isNodedup, forKey: "nodedup")
                encoder.encode(isDedup, forKey: "dedup")
                encoder.encode(isOwned, forKey: "owned")
                encoder.encode(source, forKey: "source")
                encoder.encode(state, forKey: "state")
                encoder.encode(city, forKey: "city")
                encoder.encode(trimO, forKey: "trim_o")
                encoder.encode(trimR, forKey: "trim_r")
                encoder.encode(domActiveRange, forKey: "dom_active_range")
                encoder.encode(dom180Range, forKey: "dom_180_range")
                encoder.encode(excludeCertified, forKey: "exclude_certified")
                encoder.encode(fuelType, forKey: "fuel_type")
                encoder.encode(dealerType, forKey: "dealer_type")
                encoder.encode(isPhotoLinks, forKey: "photo_links")
                encoder.encode(stockNo, forKey: "stock_no")
                encoder.encode(lastSeenRange, forKey: "last_seen_range")
                encoder.encode(firstSeenRange, forKey: "first_seen_range")
                encoder.encode(firstSeenAtSourceRange, forKey: "first_seen_at_source_range")
                encoder.encode(firstSeenAtMcRange, forKey: "first_seen_at_mc_range")
                encoder.encode(lastSeenDays, forKey: "last_seen_days")
                encoder.encode(firstSeenDays, forKey: "first_seen_days")
                encoder.encode(firstSeenAtSourceDays, forKey: "first_seen_at_source_days")
                encoder.encode(firstSeenAtMcDays, forKey: "first_seen_at_mc_days")
                encoder.encode(isIncludeRelevantLinks, forKey: "include_relevant_links")
                return encoder.items
            }
        }
    }
}

extension Paths.Search.Car {
    public var fsbo: Fsbo {
        Fsbo(path: path + "/fsbo")
    }

    public struct Fsbo {
        /// Path: `/search/car/fsbo`
        public let path: String
    }
}

extension Paths.Search.Car.Fsbo {
    public var active: Active {
        Active(path: path + "/active")
    }

    public struct Active {
        /// Path: `/search/car/fsbo/active`
        public let path: String

        /// Gets active private party car listings for the given search criteria
        ///
        /// This API produces a list of currently active FSBO cars from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows. 
        ///  The search API facilitates the following use cases - 
        /// 1. Search Cars around a given geo-point within a given radius 
        /// 2. Search cars for a specific year / make / model or combination of these 
        /// 3. Search cars matching multiple year, make, model combinatins in the same search request
        /// 4. Filter results by most car specification attributes
        /// 5. Search for similar cars by VIN or Taxonomy VIN 
        /// 6. Filter cars within a given price / miles / days on market (dom) range
        /// 7. Specify a sort order for the results on price / miles / dom / listed date 
        /// 8. Search cars for a given City / State combination 
        /// 9. Get Facets to build the search drill downs 
        /// 10. Get Market averages for price/miles/dom for your search
        public func get(parameters: GetParameters? = nil) -> Request<MarketcheckAPI.SearchResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var isAppendAPIKey: Bool?
            public var latitude: Double?
            public var longitude: Double?
            public var radius: Int?
            public var zip: String?
            public var isIncludeLease: Bool?
            public var isIncludeFinance: Bool?
            public var leaseTerm: String?
            public var leaseDownPayment: String?
            public var leaseEmp: String?
            public var financeLoanTerm: String?
            public var financeLoanApr: String?
            public var financeEmp: String?
            public var financeDownPayment: String?
            public var financeDownPaymentPer: String?
            public var carType: CarType?
            public var carfax1Owner: Carfax1Owner?
            public var carfaxCleanTitle: CarfaxCleanTitle?
            public var yearRange: String?
            public var year: String?
            public var make: String?
            public var model: String?
            public var trim: String?
            public var vin: String?
            public var bodyType: String?
            public var bodySubtype: String?
            public var vehicleType: String?
            public var vins: String?
            public var taxonomyVins: String?
            public var mm: String?
            public var ymm: String?
            public var ymmt: String?
            public var match: String?
            public var cylinders: String?
            public var transmission: String?
            public var doors: String?
            public var drivetrain: String?
            public var exteriorColor: String?
            public var interiorColor: String?
            public var baseExteriorColor: String?
            public var baseInteriorColor: String?
            public var engine: String?
            public var engineSize: String?
            public var engineAspiration: String?
            public var engineBlock: String?
            public var highwayMpgRange: String?
            public var cityMpgRange: String?
            public var milesRange: String?
            public var priceRange: String?
            public var msrpRange: String?
            public var domRange: String?
            public var sortBy: String?
            public var sortOrder: SortOrder?
            public var rows: Int?
            public var start: Int?
            public var isIncludeNonVinListings: Bool?
            public var msaCode: String?
            public var facets: String?
            public var rangeFacets: String?
            public var facetSort: FacetSort?
            public var stats: String?
            public var country: Country?
            public var isPlot: Bool?
            public var isNodedup: Bool?
            public var isDedup: Bool?
            public var isOwned: Bool?
            public var state: String?
            public var city: String?
            public var source: String?
            public var trimO: String?
            public var trimR: String?
            public var domActiveRange: String?
            public var dom180Range: String?
            public var excludeCertified: Bool?
            public var fuelType: String?
            public var dealerType: DealerType?
            public var isPhotoLinks: Bool?
            public var stockNo: String?
            public var lastSeenRange: String?
            public var firstSeenRange: String?
            public var firstSeenAtSourceRange: String?
            public var firstSeenAtMcRange: String?
            public var lastSeenDays: String?
            public var firstSeenDays: String?
            public var firstSeenAtSourceDays: String?
            public var firstSeenAtMcDays: String?
            public var isIncludeRelevantLinks: Bool?

            public enum CarType: String, Codable, CaseIterable {
                case new
                case used
                case certified
            }

            public enum Carfax1Owner: String, Codable, CaseIterable {
                case `true`
                case `false`
            }

            public enum CarfaxCleanTitle: String, Codable, CaseIterable {
                case `true`
                case `false`
            }

            public enum SortOrder: String, Codable, CaseIterable {
                case asc
                case desc
                case asc2 = "ASC"
                case desc2 = "DESC"
            }

            public enum FacetSort: String, Codable, CaseIterable {
                case count
                case index
            }

            public enum Country: String, Codable, CaseIterable {
                case us = "US"
                case ca = "CA"
                case us2 = "us"
                case ca2 = "ca"
                case all
                case all2 = "ALL"
            }

            public enum DealerType: String, Codable, CaseIterable {
                case franchise
                case independent
            }

            public init(apiKey: String? = nil, isAppendAPIKey: Bool? = nil, latitude: Double? = nil, longitude: Double? = nil, radius: Int? = nil, zip: String? = nil, isIncludeLease: Bool? = nil, isIncludeFinance: Bool? = nil, leaseTerm: String? = nil, leaseDownPayment: String? = nil, leaseEmp: String? = nil, financeLoanTerm: String? = nil, financeLoanApr: String? = nil, financeEmp: String? = nil, financeDownPayment: String? = nil, financeDownPaymentPer: String? = nil, carType: CarType? = nil, carfax1Owner: Carfax1Owner? = nil, carfaxCleanTitle: CarfaxCleanTitle? = nil, yearRange: String? = nil, year: String? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, vin: String? = nil, bodyType: String? = nil, bodySubtype: String? = nil, vehicleType: String? = nil, vins: String? = nil, taxonomyVins: String? = nil, mm: String? = nil, ymm: String? = nil, ymmt: String? = nil, match: String? = nil, cylinders: String? = nil, transmission: String? = nil, doors: String? = nil, drivetrain: String? = nil, exteriorColor: String? = nil, interiorColor: String? = nil, baseExteriorColor: String? = nil, baseInteriorColor: String? = nil, engine: String? = nil, engineSize: String? = nil, engineAspiration: String? = nil, engineBlock: String? = nil, highwayMpgRange: String? = nil, cityMpgRange: String? = nil, milesRange: String? = nil, priceRange: String? = nil, msrpRange: String? = nil, domRange: String? = nil, sortBy: String? = nil, sortOrder: SortOrder? = nil, rows: Int? = nil, start: Int? = nil, isIncludeNonVinListings: Bool? = nil, msaCode: String? = nil, facets: String? = nil, rangeFacets: String? = nil, facetSort: FacetSort? = nil, stats: String? = nil, country: Country? = nil, isPlot: Bool? = nil, isNodedup: Bool? = nil, isDedup: Bool? = nil, isOwned: Bool? = nil, state: String? = nil, city: String? = nil, source: String? = nil, trimO: String? = nil, trimR: String? = nil, domActiveRange: String? = nil, dom180Range: String? = nil, excludeCertified: Bool? = nil, fuelType: String? = nil, dealerType: DealerType? = nil, isPhotoLinks: Bool? = nil, stockNo: String? = nil, lastSeenRange: String? = nil, firstSeenRange: String? = nil, firstSeenAtSourceRange: String? = nil, firstSeenAtMcRange: String? = nil, lastSeenDays: String? = nil, firstSeenDays: String? = nil, firstSeenAtSourceDays: String? = nil, firstSeenAtMcDays: String? = nil, isIncludeRelevantLinks: Bool? = nil) {
                self.apiKey = apiKey
                self.isAppendAPIKey = isAppendAPIKey
                self.latitude = latitude
                self.longitude = longitude
                self.radius = radius
                self.zip = zip
                self.isIncludeLease = isIncludeLease
                self.isIncludeFinance = isIncludeFinance
                self.leaseTerm = leaseTerm
                self.leaseDownPayment = leaseDownPayment
                self.leaseEmp = leaseEmp
                self.financeLoanTerm = financeLoanTerm
                self.financeLoanApr = financeLoanApr
                self.financeEmp = financeEmp
                self.financeDownPayment = financeDownPayment
                self.financeDownPaymentPer = financeDownPaymentPer
                self.carType = carType
                self.carfax1Owner = carfax1Owner
                self.carfaxCleanTitle = carfaxCleanTitle
                self.yearRange = yearRange
                self.year = year
                self.make = make
                self.model = model
                self.trim = trim
                self.vin = vin
                self.bodyType = bodyType
                self.bodySubtype = bodySubtype
                self.vehicleType = vehicleType
                self.vins = vins
                self.taxonomyVins = taxonomyVins
                self.mm = mm
                self.ymm = ymm
                self.ymmt = ymmt
                self.match = match
                self.cylinders = cylinders
                self.transmission = transmission
                self.doors = doors
                self.drivetrain = drivetrain
                self.exteriorColor = exteriorColor
                self.interiorColor = interiorColor
                self.baseExteriorColor = baseExteriorColor
                self.baseInteriorColor = baseInteriorColor
                self.engine = engine
                self.engineSize = engineSize
                self.engineAspiration = engineAspiration
                self.engineBlock = engineBlock
                self.highwayMpgRange = highwayMpgRange
                self.cityMpgRange = cityMpgRange
                self.milesRange = milesRange
                self.priceRange = priceRange
                self.msrpRange = msrpRange
                self.domRange = domRange
                self.sortBy = sortBy
                self.sortOrder = sortOrder
                self.rows = rows
                self.start = start
                self.isIncludeNonVinListings = isIncludeNonVinListings
                self.msaCode = msaCode
                self.facets = facets
                self.rangeFacets = rangeFacets
                self.facetSort = facetSort
                self.stats = stats
                self.country = country
                self.isPlot = isPlot
                self.isNodedup = isNodedup
                self.isDedup = isDedup
                self.isOwned = isOwned
                self.state = state
                self.city = city
                self.source = source
                self.trimO = trimO
                self.trimR = trimR
                self.domActiveRange = domActiveRange
                self.dom180Range = dom180Range
                self.excludeCertified = excludeCertified
                self.fuelType = fuelType
                self.dealerType = dealerType
                self.isPhotoLinks = isPhotoLinks
                self.stockNo = stockNo
                self.lastSeenRange = lastSeenRange
                self.firstSeenRange = firstSeenRange
                self.firstSeenAtSourceRange = firstSeenAtSourceRange
                self.firstSeenAtMcRange = firstSeenAtMcRange
                self.lastSeenDays = lastSeenDays
                self.firstSeenDays = firstSeenDays
                self.firstSeenAtSourceDays = firstSeenAtSourceDays
                self.firstSeenAtMcDays = firstSeenAtMcDays
                self.isIncludeRelevantLinks = isIncludeRelevantLinks
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(isAppendAPIKey, forKey: "append_api_key")
                encoder.encode(latitude, forKey: "latitude")
                encoder.encode(longitude, forKey: "longitude")
                encoder.encode(radius, forKey: "radius")
                encoder.encode(zip, forKey: "zip")
                encoder.encode(isIncludeLease, forKey: "include_lease")
                encoder.encode(isIncludeFinance, forKey: "include_finance")
                encoder.encode(leaseTerm, forKey: "lease_term")
                encoder.encode(leaseDownPayment, forKey: "lease_down_payment")
                encoder.encode(leaseEmp, forKey: "lease_emp")
                encoder.encode(financeLoanTerm, forKey: "finance_loan_term")
                encoder.encode(financeLoanApr, forKey: "finance_loan_apr")
                encoder.encode(financeEmp, forKey: "finance_emp")
                encoder.encode(financeDownPayment, forKey: "finance_down_payment")
                encoder.encode(financeDownPaymentPer, forKey: "finance_down_payment_per")
                encoder.encode(carType, forKey: "car_type")
                encoder.encode(carfax1Owner, forKey: "carfax_1_owner")
                encoder.encode(carfaxCleanTitle, forKey: "carfax_clean_title")
                encoder.encode(yearRange, forKey: "year_range")
                encoder.encode(year, forKey: "year")
                encoder.encode(make, forKey: "make")
                encoder.encode(model, forKey: "model")
                encoder.encode(trim, forKey: "trim")
                encoder.encode(vin, forKey: "vin")
                encoder.encode(bodyType, forKey: "body_type")
                encoder.encode(bodySubtype, forKey: "body_subtype")
                encoder.encode(vehicleType, forKey: "vehicle_type")
                encoder.encode(vins, forKey: "vins")
                encoder.encode(taxonomyVins, forKey: "taxonomy_vins")
                encoder.encode(mm, forKey: "mm")
                encoder.encode(ymm, forKey: "ymm")
                encoder.encode(ymmt, forKey: "ymmt")
                encoder.encode(match, forKey: "match")
                encoder.encode(cylinders, forKey: "cylinders")
                encoder.encode(transmission, forKey: "transmission")
                encoder.encode(doors, forKey: "doors")
                encoder.encode(drivetrain, forKey: "drivetrain")
                encoder.encode(exteriorColor, forKey: "exterior_color")
                encoder.encode(interiorColor, forKey: "interior_color")
                encoder.encode(baseExteriorColor, forKey: "base_exterior_color")
                encoder.encode(baseInteriorColor, forKey: "base_interior_color")
                encoder.encode(engine, forKey: "engine")
                encoder.encode(engineSize, forKey: "engine_size")
                encoder.encode(engineAspiration, forKey: "engine_aspiration")
                encoder.encode(engineBlock, forKey: "engine_block")
                encoder.encode(highwayMpgRange, forKey: "highway_mpg_range")
                encoder.encode(cityMpgRange, forKey: "city_mpg_range")
                encoder.encode(milesRange, forKey: "miles_range")
                encoder.encode(priceRange, forKey: "price_range")
                encoder.encode(msrpRange, forKey: "msrp_range")
                encoder.encode(domRange, forKey: "dom_range")
                encoder.encode(sortBy, forKey: "sort_by")
                encoder.encode(sortOrder, forKey: "sort_order")
                encoder.encode(rows, forKey: "rows")
                encoder.encode(start, forKey: "start")
                encoder.encode(isIncludeNonVinListings, forKey: "include_non_vin_listings")
                encoder.encode(msaCode, forKey: "msa_code")
                encoder.encode(facets, forKey: "facets")
                encoder.encode(rangeFacets, forKey: "range_facets")
                encoder.encode(facetSort, forKey: "facet_sort")
                encoder.encode(stats, forKey: "stats")
                encoder.encode(country, forKey: "country")
                encoder.encode(isPlot, forKey: "plot")
                encoder.encode(isNodedup, forKey: "nodedup")
                encoder.encode(isDedup, forKey: "dedup")
                encoder.encode(isOwned, forKey: "owned")
                encoder.encode(state, forKey: "state")
                encoder.encode(city, forKey: "city")
                encoder.encode(source, forKey: "source")
                encoder.encode(trimO, forKey: "trim_o")
                encoder.encode(trimR, forKey: "trim_r")
                encoder.encode(domActiveRange, forKey: "dom_active_range")
                encoder.encode(dom180Range, forKey: "dom_180_range")
                encoder.encode(excludeCertified, forKey: "exclude_certified")
                encoder.encode(fuelType, forKey: "fuel_type")
                encoder.encode(dealerType, forKey: "dealer_type")
                encoder.encode(isPhotoLinks, forKey: "photo_links")
                encoder.encode(stockNo, forKey: "stock_no")
                encoder.encode(lastSeenRange, forKey: "last_seen_range")
                encoder.encode(firstSeenRange, forKey: "first_seen_range")
                encoder.encode(firstSeenAtSourceRange, forKey: "first_seen_at_source_range")
                encoder.encode(firstSeenAtMcRange, forKey: "first_seen_at_mc_range")
                encoder.encode(lastSeenDays, forKey: "last_seen_days")
                encoder.encode(firstSeenDays, forKey: "first_seen_days")
                encoder.encode(firstSeenAtSourceDays, forKey: "first_seen_at_source_days")
                encoder.encode(firstSeenAtMcDays, forKey: "first_seen_at_mc_days")
                encoder.encode(isIncludeRelevantLinks, forKey: "include_relevant_links")
                return encoder.items
            }
        }
    }
}

extension Paths.Search.Car {
    public var auction: Auction {
        Auction(path: path + "/auction")
    }

    public struct Auction {
        /// Path: `/search/car/auction`
        public let path: String
    }
}

extension Paths.Search.Car.Auction {
    public var active: Active {
        Active(path: path + "/active")
    }

    public struct Active {
        /// Path: `/search/car/auction/active`
        public let path: String

        /// Gets active auction car listings for the given search criteria
        ///
        /// This API produces a list of currently active auction cars from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows. 
        ///  The search API facilitates the following use cases - 
        /// 1. Search Cars around a given geo-point within a given radius 
        /// 2. Search cars for a specific year / make / model or combination of these 
        /// 3. Search cars matching multiple year, make, model combinatins in the same search request
        /// 4. Filter results by most car specification attributes
        /// 5. Search for similar cars by VIN or Taxonomy VIN 
        /// 6. Filter cars within a given price / miles / days on market (dom) range
        /// 7. Specify a sort order for the results on price / miles / dom / listed date 
        /// 8. Search cars for a given City / State combination 
        /// 9. Get Facets to build the search drill downs 
        /// 10. Get Market averages for price/miles/dom for your search
        public func get(parameters: GetParameters? = nil) -> Request<MarketcheckAPI.SearchResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var isAppendAPIKey: Bool?
            public var latitude: Double?
            public var longitude: Double?
            public var radius: Int?
            public var zip: String?
            public var isIncludeLease: Bool?
            public var isIncludeFinance: Bool?
            public var leaseTerm: String?
            public var leaseDownPayment: String?
            public var leaseEmp: String?
            public var financeLoanTerm: String?
            public var financeLoanApr: String?
            public var financeEmp: String?
            public var financeDownPayment: String?
            public var financeDownPaymentPer: String?
            public var carType: CarType?
            public var carfax1Owner: Carfax1Owner?
            public var carfaxCleanTitle: CarfaxCleanTitle?
            public var yearRange: String?
            public var year: String?
            public var make: String?
            public var model: String?
            public var trim: String?
            public var vin: String?
            public var bodyType: String?
            public var bodySubtype: String?
            public var vehicleType: String?
            public var vins: String?
            public var taxonomyVins: String?
            public var mm: String?
            public var ymm: String?
            public var ymmt: String?
            public var match: String?
            public var cylinders: String?
            public var transmission: String?
            public var doors: String?
            public var drivetrain: String?
            public var exteriorColor: String?
            public var interiorColor: String?
            public var baseExteriorColor: String?
            public var baseInteriorColor: String?
            public var engine: String?
            public var engineSize: String?
            public var engineAspiration: String?
            public var engineBlock: String?
            public var highwayMpgRange: String?
            public var cityMpgRange: String?
            public var milesRange: String?
            public var priceRange: String?
            public var msrpRange: String?
            public var domRange: String?
            public var sortBy: String?
            public var sortOrder: SortOrder?
            public var rows: Int?
            public var start: Int?
            public var isIncludeNonVinListings: Bool?
            public var msaCode: String?
            public var facets: String?
            public var rangeFacets: String?
            public var facetSort: FacetSort?
            public var stats: String?
            public var country: Country?
            public var isPlot: Bool?
            public var isNodedup: Bool?
            public var isDedup: Bool?
            public var isOwned: Bool?
            public var state: String?
            public var city: String?
            public var source: String?
            public var trimO: String?
            public var trimR: String?
            public var domActiveRange: String?
            public var dom180Range: String?
            public var excludeCertified: Bool?
            public var fuelType: String?
            public var dealerType: DealerType?
            public var isPhotoLinks: Bool?
            public var stockNo: String?
            public var lastSeenRange: String?
            public var firstSeenRange: String?
            public var firstSeenAtSourceRange: String?
            public var firstSeenAtMcRange: String?
            public var lastSeenDays: String?
            public var firstSeenDays: String?
            public var firstSeenAtSourceDays: String?
            public var firstSeenAtMcDays: String?
            public var isIncludeRelevantLinks: Bool?

            public enum CarType: String, Codable, CaseIterable {
                case new
                case used
                case certified
            }

            public enum Carfax1Owner: String, Codable, CaseIterable {
                case `true`
                case `false`
            }

            public enum CarfaxCleanTitle: String, Codable, CaseIterable {
                case `true`
                case `false`
            }

            public enum SortOrder: String, Codable, CaseIterable {
                case asc
                case desc
                case asc2 = "ASC"
                case desc2 = "DESC"
            }

            public enum FacetSort: String, Codable, CaseIterable {
                case count
                case index
            }

            public enum Country: String, Codable, CaseIterable {
                case us = "US"
                case ca = "CA"
                case us2 = "us"
                case ca2 = "ca"
                case all
                case all2 = "ALL"
            }

            public enum DealerType: String, Codable, CaseIterable {
                case franchise
                case independent
            }

            public init(apiKey: String? = nil, isAppendAPIKey: Bool? = nil, latitude: Double? = nil, longitude: Double? = nil, radius: Int? = nil, zip: String? = nil, isIncludeLease: Bool? = nil, isIncludeFinance: Bool? = nil, leaseTerm: String? = nil, leaseDownPayment: String? = nil, leaseEmp: String? = nil, financeLoanTerm: String? = nil, financeLoanApr: String? = nil, financeEmp: String? = nil, financeDownPayment: String? = nil, financeDownPaymentPer: String? = nil, carType: CarType? = nil, carfax1Owner: Carfax1Owner? = nil, carfaxCleanTitle: CarfaxCleanTitle? = nil, yearRange: String? = nil, year: String? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, vin: String? = nil, bodyType: String? = nil, bodySubtype: String? = nil, vehicleType: String? = nil, vins: String? = nil, taxonomyVins: String? = nil, mm: String? = nil, ymm: String? = nil, ymmt: String? = nil, match: String? = nil, cylinders: String? = nil, transmission: String? = nil, doors: String? = nil, drivetrain: String? = nil, exteriorColor: String? = nil, interiorColor: String? = nil, baseExteriorColor: String? = nil, baseInteriorColor: String? = nil, engine: String? = nil, engineSize: String? = nil, engineAspiration: String? = nil, engineBlock: String? = nil, highwayMpgRange: String? = nil, cityMpgRange: String? = nil, milesRange: String? = nil, priceRange: String? = nil, msrpRange: String? = nil, domRange: String? = nil, sortBy: String? = nil, sortOrder: SortOrder? = nil, rows: Int? = nil, start: Int? = nil, isIncludeNonVinListings: Bool? = nil, msaCode: String? = nil, facets: String? = nil, rangeFacets: String? = nil, facetSort: FacetSort? = nil, stats: String? = nil, country: Country? = nil, isPlot: Bool? = nil, isNodedup: Bool? = nil, isDedup: Bool? = nil, isOwned: Bool? = nil, state: String? = nil, city: String? = nil, source: String? = nil, trimO: String? = nil, trimR: String? = nil, domActiveRange: String? = nil, dom180Range: String? = nil, excludeCertified: Bool? = nil, fuelType: String? = nil, dealerType: DealerType? = nil, isPhotoLinks: Bool? = nil, stockNo: String? = nil, lastSeenRange: String? = nil, firstSeenRange: String? = nil, firstSeenAtSourceRange: String? = nil, firstSeenAtMcRange: String? = nil, lastSeenDays: String? = nil, firstSeenDays: String? = nil, firstSeenAtSourceDays: String? = nil, firstSeenAtMcDays: String? = nil, isIncludeRelevantLinks: Bool? = nil) {
                self.apiKey = apiKey
                self.isAppendAPIKey = isAppendAPIKey
                self.latitude = latitude
                self.longitude = longitude
                self.radius = radius
                self.zip = zip
                self.isIncludeLease = isIncludeLease
                self.isIncludeFinance = isIncludeFinance
                self.leaseTerm = leaseTerm
                self.leaseDownPayment = leaseDownPayment
                self.leaseEmp = leaseEmp
                self.financeLoanTerm = financeLoanTerm
                self.financeLoanApr = financeLoanApr
                self.financeEmp = financeEmp
                self.financeDownPayment = financeDownPayment
                self.financeDownPaymentPer = financeDownPaymentPer
                self.carType = carType
                self.carfax1Owner = carfax1Owner
                self.carfaxCleanTitle = carfaxCleanTitle
                self.yearRange = yearRange
                self.year = year
                self.make = make
                self.model = model
                self.trim = trim
                self.vin = vin
                self.bodyType = bodyType
                self.bodySubtype = bodySubtype
                self.vehicleType = vehicleType
                self.vins = vins
                self.taxonomyVins = taxonomyVins
                self.mm = mm
                self.ymm = ymm
                self.ymmt = ymmt
                self.match = match
                self.cylinders = cylinders
                self.transmission = transmission
                self.doors = doors
                self.drivetrain = drivetrain
                self.exteriorColor = exteriorColor
                self.interiorColor = interiorColor
                self.baseExteriorColor = baseExteriorColor
                self.baseInteriorColor = baseInteriorColor
                self.engine = engine
                self.engineSize = engineSize
                self.engineAspiration = engineAspiration
                self.engineBlock = engineBlock
                self.highwayMpgRange = highwayMpgRange
                self.cityMpgRange = cityMpgRange
                self.milesRange = milesRange
                self.priceRange = priceRange
                self.msrpRange = msrpRange
                self.domRange = domRange
                self.sortBy = sortBy
                self.sortOrder = sortOrder
                self.rows = rows
                self.start = start
                self.isIncludeNonVinListings = isIncludeNonVinListings
                self.msaCode = msaCode
                self.facets = facets
                self.rangeFacets = rangeFacets
                self.facetSort = facetSort
                self.stats = stats
                self.country = country
                self.isPlot = isPlot
                self.isNodedup = isNodedup
                self.isDedup = isDedup
                self.isOwned = isOwned
                self.state = state
                self.city = city
                self.source = source
                self.trimO = trimO
                self.trimR = trimR
                self.domActiveRange = domActiveRange
                self.dom180Range = dom180Range
                self.excludeCertified = excludeCertified
                self.fuelType = fuelType
                self.dealerType = dealerType
                self.isPhotoLinks = isPhotoLinks
                self.stockNo = stockNo
                self.lastSeenRange = lastSeenRange
                self.firstSeenRange = firstSeenRange
                self.firstSeenAtSourceRange = firstSeenAtSourceRange
                self.firstSeenAtMcRange = firstSeenAtMcRange
                self.lastSeenDays = lastSeenDays
                self.firstSeenDays = firstSeenDays
                self.firstSeenAtSourceDays = firstSeenAtSourceDays
                self.firstSeenAtMcDays = firstSeenAtMcDays
                self.isIncludeRelevantLinks = isIncludeRelevantLinks
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(isAppendAPIKey, forKey: "append_api_key")
                encoder.encode(latitude, forKey: "latitude")
                encoder.encode(longitude, forKey: "longitude")
                encoder.encode(radius, forKey: "radius")
                encoder.encode(zip, forKey: "zip")
                encoder.encode(isIncludeLease, forKey: "include_lease")
                encoder.encode(isIncludeFinance, forKey: "include_finance")
                encoder.encode(leaseTerm, forKey: "lease_term")
                encoder.encode(leaseDownPayment, forKey: "lease_down_payment")
                encoder.encode(leaseEmp, forKey: "lease_emp")
                encoder.encode(financeLoanTerm, forKey: "finance_loan_term")
                encoder.encode(financeLoanApr, forKey: "finance_loan_apr")
                encoder.encode(financeEmp, forKey: "finance_emp")
                encoder.encode(financeDownPayment, forKey: "finance_down_payment")
                encoder.encode(financeDownPaymentPer, forKey: "finance_down_payment_per")
                encoder.encode(carType, forKey: "car_type")
                encoder.encode(carfax1Owner, forKey: "carfax_1_owner")
                encoder.encode(carfaxCleanTitle, forKey: "carfax_clean_title")
                encoder.encode(yearRange, forKey: "year_range")
                encoder.encode(year, forKey: "year")
                encoder.encode(make, forKey: "make")
                encoder.encode(model, forKey: "model")
                encoder.encode(trim, forKey: "trim")
                encoder.encode(vin, forKey: "vin")
                encoder.encode(bodyType, forKey: "body_type")
                encoder.encode(bodySubtype, forKey: "body_subtype")
                encoder.encode(vehicleType, forKey: "vehicle_type")
                encoder.encode(vins, forKey: "vins")
                encoder.encode(taxonomyVins, forKey: "taxonomy_vins")
                encoder.encode(mm, forKey: "mm")
                encoder.encode(ymm, forKey: "ymm")
                encoder.encode(ymmt, forKey: "ymmt")
                encoder.encode(match, forKey: "match")
                encoder.encode(cylinders, forKey: "cylinders")
                encoder.encode(transmission, forKey: "transmission")
                encoder.encode(doors, forKey: "doors")
                encoder.encode(drivetrain, forKey: "drivetrain")
                encoder.encode(exteriorColor, forKey: "exterior_color")
                encoder.encode(interiorColor, forKey: "interior_color")
                encoder.encode(baseExteriorColor, forKey: "base_exterior_color")
                encoder.encode(baseInteriorColor, forKey: "base_interior_color")
                encoder.encode(engine, forKey: "engine")
                encoder.encode(engineSize, forKey: "engine_size")
                encoder.encode(engineAspiration, forKey: "engine_aspiration")
                encoder.encode(engineBlock, forKey: "engine_block")
                encoder.encode(highwayMpgRange, forKey: "highway_mpg_range")
                encoder.encode(cityMpgRange, forKey: "city_mpg_range")
                encoder.encode(milesRange, forKey: "miles_range")
                encoder.encode(priceRange, forKey: "price_range")
                encoder.encode(msrpRange, forKey: "msrp_range")
                encoder.encode(domRange, forKey: "dom_range")
                encoder.encode(sortBy, forKey: "sort_by")
                encoder.encode(sortOrder, forKey: "sort_order")
                encoder.encode(rows, forKey: "rows")
                encoder.encode(start, forKey: "start")
                encoder.encode(isIncludeNonVinListings, forKey: "include_non_vin_listings")
                encoder.encode(msaCode, forKey: "msa_code")
                encoder.encode(facets, forKey: "facets")
                encoder.encode(rangeFacets, forKey: "range_facets")
                encoder.encode(facetSort, forKey: "facet_sort")
                encoder.encode(stats, forKey: "stats")
                encoder.encode(country, forKey: "country")
                encoder.encode(isPlot, forKey: "plot")
                encoder.encode(isNodedup, forKey: "nodedup")
                encoder.encode(isDedup, forKey: "dedup")
                encoder.encode(isOwned, forKey: "owned")
                encoder.encode(state, forKey: "state")
                encoder.encode(city, forKey: "city")
                encoder.encode(source, forKey: "source")
                encoder.encode(trimO, forKey: "trim_o")
                encoder.encode(trimR, forKey: "trim_r")
                encoder.encode(domActiveRange, forKey: "dom_active_range")
                encoder.encode(dom180Range, forKey: "dom_180_range")
                encoder.encode(excludeCertified, forKey: "exclude_certified")
                encoder.encode(fuelType, forKey: "fuel_type")
                encoder.encode(dealerType, forKey: "dealer_type")
                encoder.encode(isPhotoLinks, forKey: "photo_links")
                encoder.encode(stockNo, forKey: "stock_no")
                encoder.encode(lastSeenRange, forKey: "last_seen_range")
                encoder.encode(firstSeenRange, forKey: "first_seen_range")
                encoder.encode(firstSeenAtSourceRange, forKey: "first_seen_at_source_range")
                encoder.encode(firstSeenAtMcRange, forKey: "first_seen_at_mc_range")
                encoder.encode(lastSeenDays, forKey: "last_seen_days")
                encoder.encode(firstSeenDays, forKey: "first_seen_days")
                encoder.encode(firstSeenAtSourceDays, forKey: "first_seen_at_source_days")
                encoder.encode(firstSeenAtMcDays, forKey: "first_seen_at_mc_days")
                encoder.encode(isIncludeRelevantLinks, forKey: "include_relevant_links")
                return encoder.items
            }
        }
    }
}

extension Paths.Search.Car {
    public var autoComplete: AutoComplete {
        AutoComplete(path: path + "/auto-complete")
    }

    public struct AutoComplete {
        /// Path: `/search/car/auto-complete`
        public let path: String

        /// API for auto-completion of inputs
        ///
        /// Auto-complete the inputs of your end users
        public func get(parameters: GetParameters) -> Request<MarketcheckAPI.SearchAutoCompleteResponse> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var field: Field
            public var input: String
            public var year: String?
            public var make: String?
            public var model: String?
            public var trim: String?
            public var bodyType: String?
            public var bodySubtype: String?
            public var vehicleType: String?
            public var transmission: String?
            public var drivetrain: String?
            public var fuelType: String?
            public var exteriorColor: String?
            public var interiorColor: String?
            public var engine: String?
            public var engineSize: String?
            public var engineBlock: String?
            public var state: String?
            public var city: String?
            public var source: String?
            public var country: Country?
            public var carType: CarType?
            public var includeNonVinListings: IncludeNonVinListings?
            public var isIgnoreCase: Bool?
            public var isTermCounts: Bool?
            public var sortBy: SortBy?
            public var sellerType: String?
            public var radius: Int?
            public var zip: String?

            public enum Field: String, Codable, CaseIterable {
                case ymm
                case mm
                case make
                case model
                case trim
                case bodyType = "body_type"
                case bodySubtype = "body_subtype"
                case vehicleType = "vehicle_type"
                case transmission
                case drivetrain
                case fuelType = "fuel_type"
                case exteriorColor = "exterior_color"
                case interiorColor = "interior_color"
                case engine
                case engineSize = "engine_size"
                case engineBlock = "engine_block"
                case state
                case city
            }

            public enum Country: String, Codable, CaseIterable {
                case us = "US"
                case ca = "CA"
                case us2 = "us"
                case ca2 = "ca"
            }

            public enum CarType: String, Codable, CaseIterable {
                case new
                case used
            }

            public enum IncludeNonVinListings: String, Codable, CaseIterable {
                case `true`
                case `false`
            }

            public enum SortBy: String, Codable, CaseIterable {
                case index
                case count
            }

            public init(apiKey: String? = nil, field: Field, input: String, year: String? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, bodyType: String? = nil, bodySubtype: String? = nil, vehicleType: String? = nil, transmission: String? = nil, drivetrain: String? = nil, fuelType: String? = nil, exteriorColor: String? = nil, interiorColor: String? = nil, engine: String? = nil, engineSize: String? = nil, engineBlock: String? = nil, state: String? = nil, city: String? = nil, source: String? = nil, country: Country? = nil, carType: CarType? = nil, includeNonVinListings: IncludeNonVinListings? = nil, isIgnoreCase: Bool? = nil, isTermCounts: Bool? = nil, sortBy: SortBy? = nil, sellerType: String? = nil, radius: Int? = nil, zip: String? = nil) {
                self.apiKey = apiKey
                self.field = field
                self.input = input
                self.year = year
                self.make = make
                self.model = model
                self.trim = trim
                self.bodyType = bodyType
                self.bodySubtype = bodySubtype
                self.vehicleType = vehicleType
                self.transmission = transmission
                self.drivetrain = drivetrain
                self.fuelType = fuelType
                self.exteriorColor = exteriorColor
                self.interiorColor = interiorColor
                self.engine = engine
                self.engineSize = engineSize
                self.engineBlock = engineBlock
                self.state = state
                self.city = city
                self.source = source
                self.country = country
                self.carType = carType
                self.includeNonVinListings = includeNonVinListings
                self.isIgnoreCase = isIgnoreCase
                self.isTermCounts = isTermCounts
                self.sortBy = sortBy
                self.sellerType = sellerType
                self.radius = radius
                self.zip = zip
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(field, forKey: "field")
                encoder.encode(input, forKey: "input")
                encoder.encode(year, forKey: "year")
                encoder.encode(make, forKey: "make")
                encoder.encode(model, forKey: "model")
                encoder.encode(trim, forKey: "trim")
                encoder.encode(bodyType, forKey: "body_type")
                encoder.encode(bodySubtype, forKey: "body_subtype")
                encoder.encode(vehicleType, forKey: "vehicle_type")
                encoder.encode(transmission, forKey: "transmission")
                encoder.encode(drivetrain, forKey: "drivetrain")
                encoder.encode(fuelType, forKey: "fuel_type")
                encoder.encode(exteriorColor, forKey: "exterior_color")
                encoder.encode(interiorColor, forKey: "interior_color")
                encoder.encode(engine, forKey: "engine")
                encoder.encode(engineSize, forKey: "engine_size")
                encoder.encode(engineBlock, forKey: "engine_block")
                encoder.encode(state, forKey: "state")
                encoder.encode(city, forKey: "city")
                encoder.encode(source, forKey: "source")
                encoder.encode(country, forKey: "country")
                encoder.encode(carType, forKey: "car_type")
                encoder.encode(includeNonVinListings, forKey: "include_non_vin_listings")
                encoder.encode(isIgnoreCase, forKey: "ignore_case")
                encoder.encode(isTermCounts, forKey: "term_counts")
                encoder.encode(sortBy, forKey: "sort_by")
                encoder.encode(sellerType, forKey: "seller_type")
                encoder.encode(radius, forKey: "radius")
                encoder.encode(zip, forKey: "zip")
                return encoder.items
            }
        }
    }
}

extension Paths {
    public static var listing: Listing {
        Listing(path: "/listing")
    }

    public struct Listing {
        /// Path: `/listing`
        public let path: String
    }
}

extension Paths.Listing {
    public var car: Car {
        Car(path: path + "/car")
    }

    public struct Car {
        /// Path: `/listing/car`
        public let path: String
    }
}

extension Paths.Listing.Car {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/listing/car/{id}`
        public let path: String

        /// Listing by id
        ///
        /// Get a particular dealer listing by its id
        public func get(parameters: GetParameters? = nil) -> Request<MarketcheckAPI.Listing> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var isAppendAPIKey: Bool?
            public var isIncludeRelevantLinks: Bool?

            public init(apiKey: String? = nil, isAppendAPIKey: Bool? = nil, isIncludeRelevantLinks: Bool? = nil) {
                self.apiKey = apiKey
                self.isAppendAPIKey = isAppendAPIKey
                self.isIncludeRelevantLinks = isIncludeRelevantLinks
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(isAppendAPIKey, forKey: "append_api_key")
                encoder.encode(isIncludeRelevantLinks, forKey: "include_relevant_links")
                return encoder.items
            }
        }
    }
}

extension Paths.Listing.Car.WithID {
    public var media: Media {
        Media(path: path + "/media")
    }

    public struct Media {
        /// Path: `/listing/car/{id}/media`
        public let path: String

        /// Listing media by id
        ///
        /// Get listing media (photo, photos) by id
        public func get(apiKey: String? = nil, isAppendAPIKey: Bool? = nil) -> Request<MarketcheckAPI.ListingMedia> {
            .get(path, query: makeGetQuery(apiKey, isAppendAPIKey))
        }

        private func makeGetQuery(_ apiKey: String?, _ isAppendAPIKey: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            encoder.encode(isAppendAPIKey, forKey: "append_api_key")
            return encoder.items
        }
    }
}

extension Paths.Listing.Car.WithID {
    public var extra: Extra {
        Extra(path: path + "/extra")
    }

    public struct Extra {
        /// Path: `/listing/car/{id}/extra`
        public let path: String

        /// Long text Listings attributes for Listing with the given id
        ///
        /// Get listing options, features, seller comments
        public func get(apiKey: String? = nil) -> Request<MarketcheckAPI.ListingExtraAttributes> {
            .get(path, query: makeGetQuery(apiKey))
        }

        private func makeGetQuery(_ apiKey: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            return encoder.items
        }
    }
}

extension Paths.Listing.Car {
    public var uk: Uk {
        Uk(path: path + "/uk")
    }

    public struct Uk {
        /// Path: `/listing/car/uk`
        public let path: String
    }
}

extension Paths.Listing.Car.Uk {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/listing/car/uk/{id}`
        public let path: String

        /// Listing by id
        ///
        /// Get a particular dealer listing by its id
        public func get(apiKey: String? = nil, isAppendAPIKey: Bool? = nil) -> Request<MarketcheckAPI.Listing> {
            .get(path, query: makeGetQuery(apiKey, isAppendAPIKey))
        }

        private func makeGetQuery(_ apiKey: String?, _ isAppendAPIKey: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            encoder.encode(isAppendAPIKey, forKey: "append_api_key")
            return encoder.items
        }
    }
}

extension Paths.Listing.Car.Uk.WithID {
    public var media: Media {
        Media(path: path + "/media")
    }

    public struct Media {
        /// Path: `/listing/car/uk/{id}/media`
        public let path: String

        /// Listing media by id
        ///
        /// Get listing media (photo, photos) by id
        public func get(apiKey: String? = nil, isAppendAPIKey: Bool? = nil) -> Request<MarketcheckAPI.ListingMedia> {
            .get(path, query: makeGetQuery(apiKey, isAppendAPIKey))
        }

        private func makeGetQuery(_ apiKey: String?, _ isAppendAPIKey: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            encoder.encode(isAppendAPIKey, forKey: "append_api_key")
            return encoder.items
        }
    }
}

extension Paths.Listing.Car.Uk.WithID {
    public var extra: Extra {
        Extra(path: path + "/extra")
    }

    public struct Extra {
        /// Path: `/listing/car/uk/{id}/extra`
        public let path: String

        /// Long text Listings attributes for Listing with the given id
        ///
        /// Get listing options, features, seller comments
        public func get(apiKey: String? = nil) -> Request<MarketcheckAPI.ListingExtraAttributes> {
            .get(path, query: makeGetQuery(apiKey))
        }

        private func makeGetQuery(_ apiKey: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            return encoder.items
        }
    }
}

extension Paths.Listing.Car {
    public var fsbo: Fsbo {
        Fsbo(path: path + "/fsbo")
    }

    public struct Fsbo {
        /// Path: `/listing/car/fsbo`
        public let path: String
    }
}

extension Paths.Listing.Car.Fsbo {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/listing/car/fsbo/{id}`
        public let path: String

        /// Listing by id
        ///
        /// Get a particular private party listing by its id
        public func get(parameters: GetParameters? = nil) -> Request<MarketcheckAPI.Listing> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var isAppendAPIKey: Bool?
            public var isIncludeRelevantLinks: Bool?

            public init(apiKey: String? = nil, isAppendAPIKey: Bool? = nil, isIncludeRelevantLinks: Bool? = nil) {
                self.apiKey = apiKey
                self.isAppendAPIKey = isAppendAPIKey
                self.isIncludeRelevantLinks = isIncludeRelevantLinks
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(isAppendAPIKey, forKey: "append_api_key")
                encoder.encode(isIncludeRelevantLinks, forKey: "include_relevant_links")
                return encoder.items
            }
        }
    }
}

extension Paths.Listing.Car.Fsbo.WithID {
    public var media: Media {
        Media(path: path + "/media")
    }

    public struct Media {
        /// Path: `/listing/car/fsbo/{id}/media`
        public let path: String

        /// Listing media by id
        ///
        /// Get listing media (photo, photos) by id
        public func get(apiKey: String? = nil, isAppendAPIKey: Bool? = nil) -> Request<MarketcheckAPI.ListingMedia> {
            .get(path, query: makeGetQuery(apiKey, isAppendAPIKey))
        }

        private func makeGetQuery(_ apiKey: String?, _ isAppendAPIKey: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            encoder.encode(isAppendAPIKey, forKey: "append_api_key")
            return encoder.items
        }
    }
}

extension Paths.Listing.Car.Fsbo.WithID {
    public var extra: Extra {
        Extra(path: path + "/extra")
    }

    public struct Extra {
        /// Path: `/listing/car/fsbo/{id}/extra`
        public let path: String

        /// Long text Listings attributes for Listing with the given id
        ///
        /// Get listing options, features, seller comments
        public func get(apiKey: String? = nil) -> Request<MarketcheckAPI.ListingExtraAttributes> {
            .get(path, query: makeGetQuery(apiKey))
        }

        private func makeGetQuery(_ apiKey: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            return encoder.items
        }
    }
}

extension Paths.Listing.Car {
    public var auction: Auction {
        Auction(path: path + "/auction")
    }

    public struct Auction {
        /// Path: `/listing/car/auction`
        public let path: String
    }
}

extension Paths.Listing.Car.Auction {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/listing/car/auction/{id}`
        public let path: String

        /// Listing by id
        ///
        /// Get a particular auction listing by its id
        public func get(parameters: GetParameters? = nil) -> Request<MarketcheckAPI.Listing> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var isAppendAPIKey: Bool?
            public var isIncludeRelevantLinks: Bool?

            public init(apiKey: String? = nil, isAppendAPIKey: Bool? = nil, isIncludeRelevantLinks: Bool? = nil) {
                self.apiKey = apiKey
                self.isAppendAPIKey = isAppendAPIKey
                self.isIncludeRelevantLinks = isIncludeRelevantLinks
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(isAppendAPIKey, forKey: "append_api_key")
                encoder.encode(isIncludeRelevantLinks, forKey: "include_relevant_links")
                return encoder.items
            }
        }
    }
}

extension Paths.Listing.Car.Auction.WithID {
    public var media: Media {
        Media(path: path + "/media")
    }

    public struct Media {
        /// Path: `/listing/car/auction/{id}/media`
        public let path: String

        /// Listing media by id
        ///
        /// Get listing media (photo, photos) by id
        public func get(apiKey: String? = nil, isAppendAPIKey: Bool? = nil) -> Request<MarketcheckAPI.ListingMedia> {
            .get(path, query: makeGetQuery(apiKey, isAppendAPIKey))
        }

        private func makeGetQuery(_ apiKey: String?, _ isAppendAPIKey: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            encoder.encode(isAppendAPIKey, forKey: "append_api_key")
            return encoder.items
        }
    }
}

extension Paths.Listing.Car.Auction.WithID {
    public var extra: Extra {
        Extra(path: path + "/extra")
    }

    public struct Extra {
        /// Path: `/listing/car/auction/{id}/extra`
        public let path: String

        /// Long text Listings attributes for Listing with the given id
        ///
        /// Get listing options, features, seller comments
        public func get(apiKey: String? = nil) -> Request<MarketcheckAPI.ListingExtraAttributes> {
            .get(path, query: makeGetQuery(apiKey))
        }

        private func makeGetQuery(_ apiKey: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            return encoder.items
        }
    }
}

extension Paths.Search.Car {
    public var recents: Recents {
        Recents(path: path + "/recents")
    }

    public struct Recents {
        /// Path: `/search/car/recents`
        public let path: String

        /// Gets Recent car listings for the given search criteria
        ///
        /// This API produces a list of recently active (past 90 days) cars from the market for the given search criteria
        public func get(parameters: GetParameters? = nil) -> Request<MarketcheckAPI.SearchResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var isAppendAPIKey: Bool?
            public var latitude: Double?
            public var longitude: Double?
            public var radius: Int?
            public var zip: String?
            public var isIncludeLease: Bool?
            public var isIncludeFinance: Bool?
            public var leaseTerm: String?
            public var leaseDownPayment: String?
            public var leaseEmp: String?
            public var financeLoanTerm: String?
            public var financeLoanApr: String?
            public var financeEmp: String?
            public var financeDownPayment: String?
            public var financeDownPaymentPer: String?
            public var carType: CarType?
            public var carfax1Owner: Carfax1Owner?
            public var carfaxCleanTitle: CarfaxCleanTitle?
            public var yearRange: String?
            public var year: String?
            public var make: String?
            public var model: String?
            public var trim: String?
            public var dealerID: String?
            public var vin: String?
            public var source: String?
            public var bodyType: String?
            public var bodySubtype: String?
            public var vehicleType: String?
            public var vins: String?
            public var taxonomyVins: String?
            public var ymmt: String?
            public var match: String?
            public var cylinders: String?
            public var transmission: String?
            public var doors: String?
            public var drivetrain: String?
            public var exteriorColor: String?
            public var interiorColor: String?
            public var baseExteriorColor: String?
            public var baseInteriorColor: String?
            public var engine: String?
            public var engineSize: String?
            public var engineAspiration: String?
            public var engineBlock: String?
            public var highwayMpgRange: String?
            public var cityMpgRange: String?
            public var milesRange: String?
            public var priceRange: String?
            public var msrpRange: String?
            public var domRange: String?
            public var lastSeenRange: String?
            public var firstSeenRange: String?
            public var firstSeenAtSourceRange: String?
            public var firstSeenAtMcRange: String?
            public var lastSeenDays: String?
            public var firstSeenDays: String?
            public var firstSeenAtSourceDays: String?
            public var firstSeenAtMcDays: String?
            public var sortBy: String?
            public var sortOrder: SortOrder?
            public var rows: Int?
            public var start: Int?
            public var isIncludeNonVinListings: Bool?
            public var facets: String?
            public var rangeFacets: String?
            public var facetSort: FacetSort?
            public var stats: String?
            public var country: Country?
            public var isPlot: Bool?
            public var isNodedup: Bool?
            public var isDedup: Bool?
            public var isOwned: Bool?
            public var state: String?
            public var city: String?
            public var msaCode: String?
            public var dealerName: String?
            public var dealershipGroupName: String?
            public var trimO: String?
            public var trimR: String?
            public var domActiveRange: String?
            public var dom180Range: String?
            public var excludeCertified: Bool?
            public var fuelType: String?
            public var dealerType: DealerType?
            public var isPhotoLinks: Bool?
            public var stockNo: String?
            public var isSold: Bool?
            public var isIncludeRelevantLinks: Bool?
            public var expired: Expired?

            public enum CarType: String, Codable, CaseIterable {
                case new
                case used
                case certified
            }

            public enum Carfax1Owner: String, Codable, CaseIterable {
                case `true`
                case `false`
            }

            public enum CarfaxCleanTitle: String, Codable, CaseIterable {
                case `true`
                case `false`
            }

            public enum SortOrder: String, Codable, CaseIterable {
                case asc
                case desc
                case asc2 = "ASC"
                case desc2 = "DESC"
            }

            public enum FacetSort: String, Codable, CaseIterable {
                case count
                case index
            }

            public enum Country: String, Codable, CaseIterable {
                case us = "US"
                case ca = "CA"
                case us2 = "us"
                case ca2 = "ca"
                case all
                case all2 = "ALL"
            }

            public enum DealerType: String, Codable, CaseIterable {
                case franchise
                case independent
            }

            public enum Expired: String, Codable, CaseIterable {
                case `true`
                case `false`
            }

            public init(apiKey: String? = nil, isAppendAPIKey: Bool? = nil, latitude: Double? = nil, longitude: Double? = nil, radius: Int? = nil, zip: String? = nil, isIncludeLease: Bool? = nil, isIncludeFinance: Bool? = nil, leaseTerm: String? = nil, leaseDownPayment: String? = nil, leaseEmp: String? = nil, financeLoanTerm: String? = nil, financeLoanApr: String? = nil, financeEmp: String? = nil, financeDownPayment: String? = nil, financeDownPaymentPer: String? = nil, carType: CarType? = nil, carfax1Owner: Carfax1Owner? = nil, carfaxCleanTitle: CarfaxCleanTitle? = nil, yearRange: String? = nil, year: String? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, dealerID: String? = nil, vin: String? = nil, source: String? = nil, bodyType: String? = nil, bodySubtype: String? = nil, vehicleType: String? = nil, vins: String? = nil, taxonomyVins: String? = nil, ymmt: String? = nil, match: String? = nil, cylinders: String? = nil, transmission: String? = nil, doors: String? = nil, drivetrain: String? = nil, exteriorColor: String? = nil, interiorColor: String? = nil, baseExteriorColor: String? = nil, baseInteriorColor: String? = nil, engine: String? = nil, engineSize: String? = nil, engineAspiration: String? = nil, engineBlock: String? = nil, highwayMpgRange: String? = nil, cityMpgRange: String? = nil, milesRange: String? = nil, priceRange: String? = nil, msrpRange: String? = nil, domRange: String? = nil, lastSeenRange: String? = nil, firstSeenRange: String? = nil, firstSeenAtSourceRange: String? = nil, firstSeenAtMcRange: String? = nil, lastSeenDays: String? = nil, firstSeenDays: String? = nil, firstSeenAtSourceDays: String? = nil, firstSeenAtMcDays: String? = nil, sortBy: String? = nil, sortOrder: SortOrder? = nil, rows: Int? = nil, start: Int? = nil, isIncludeNonVinListings: Bool? = nil, facets: String? = nil, rangeFacets: String? = nil, facetSort: FacetSort? = nil, stats: String? = nil, country: Country? = nil, isPlot: Bool? = nil, isNodedup: Bool? = nil, isDedup: Bool? = nil, isOwned: Bool? = nil, state: String? = nil, city: String? = nil, msaCode: String? = nil, dealerName: String? = nil, dealershipGroupName: String? = nil, trimO: String? = nil, trimR: String? = nil, domActiveRange: String? = nil, dom180Range: String? = nil, excludeCertified: Bool? = nil, fuelType: String? = nil, dealerType: DealerType? = nil, isPhotoLinks: Bool? = nil, stockNo: String? = nil, isSold: Bool? = nil, isIncludeRelevantLinks: Bool? = nil, expired: Expired? = nil) {
                self.apiKey = apiKey
                self.isAppendAPIKey = isAppendAPIKey
                self.latitude = latitude
                self.longitude = longitude
                self.radius = radius
                self.zip = zip
                self.isIncludeLease = isIncludeLease
                self.isIncludeFinance = isIncludeFinance
                self.leaseTerm = leaseTerm
                self.leaseDownPayment = leaseDownPayment
                self.leaseEmp = leaseEmp
                self.financeLoanTerm = financeLoanTerm
                self.financeLoanApr = financeLoanApr
                self.financeEmp = financeEmp
                self.financeDownPayment = financeDownPayment
                self.financeDownPaymentPer = financeDownPaymentPer
                self.carType = carType
                self.carfax1Owner = carfax1Owner
                self.carfaxCleanTitle = carfaxCleanTitle
                self.yearRange = yearRange
                self.year = year
                self.make = make
                self.model = model
                self.trim = trim
                self.dealerID = dealerID
                self.vin = vin
                self.source = source
                self.bodyType = bodyType
                self.bodySubtype = bodySubtype
                self.vehicleType = vehicleType
                self.vins = vins
                self.taxonomyVins = taxonomyVins
                self.ymmt = ymmt
                self.match = match
                self.cylinders = cylinders
                self.transmission = transmission
                self.doors = doors
                self.drivetrain = drivetrain
                self.exteriorColor = exteriorColor
                self.interiorColor = interiorColor
                self.baseExteriorColor = baseExteriorColor
                self.baseInteriorColor = baseInteriorColor
                self.engine = engine
                self.engineSize = engineSize
                self.engineAspiration = engineAspiration
                self.engineBlock = engineBlock
                self.highwayMpgRange = highwayMpgRange
                self.cityMpgRange = cityMpgRange
                self.milesRange = milesRange
                self.priceRange = priceRange
                self.msrpRange = msrpRange
                self.domRange = domRange
                self.lastSeenRange = lastSeenRange
                self.firstSeenRange = firstSeenRange
                self.firstSeenAtSourceRange = firstSeenAtSourceRange
                self.firstSeenAtMcRange = firstSeenAtMcRange
                self.lastSeenDays = lastSeenDays
                self.firstSeenDays = firstSeenDays
                self.firstSeenAtSourceDays = firstSeenAtSourceDays
                self.firstSeenAtMcDays = firstSeenAtMcDays
                self.sortBy = sortBy
                self.sortOrder = sortOrder
                self.rows = rows
                self.start = start
                self.isIncludeNonVinListings = isIncludeNonVinListings
                self.facets = facets
                self.rangeFacets = rangeFacets
                self.facetSort = facetSort
                self.stats = stats
                self.country = country
                self.isPlot = isPlot
                self.isNodedup = isNodedup
                self.isDedup = isDedup
                self.isOwned = isOwned
                self.state = state
                self.city = city
                self.msaCode = msaCode
                self.dealerName = dealerName
                self.dealershipGroupName = dealershipGroupName
                self.trimO = trimO
                self.trimR = trimR
                self.domActiveRange = domActiveRange
                self.dom180Range = dom180Range
                self.excludeCertified = excludeCertified
                self.fuelType = fuelType
                self.dealerType = dealerType
                self.isPhotoLinks = isPhotoLinks
                self.stockNo = stockNo
                self.isSold = isSold
                self.isIncludeRelevantLinks = isIncludeRelevantLinks
                self.expired = expired
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(isAppendAPIKey, forKey: "append_api_key")
                encoder.encode(latitude, forKey: "latitude")
                encoder.encode(longitude, forKey: "longitude")
                encoder.encode(radius, forKey: "radius")
                encoder.encode(zip, forKey: "zip")
                encoder.encode(isIncludeLease, forKey: "include_lease")
                encoder.encode(isIncludeFinance, forKey: "include_finance")
                encoder.encode(leaseTerm, forKey: "lease_term")
                encoder.encode(leaseDownPayment, forKey: "lease_down_payment")
                encoder.encode(leaseEmp, forKey: "lease_emp")
                encoder.encode(financeLoanTerm, forKey: "finance_loan_term")
                encoder.encode(financeLoanApr, forKey: "finance_loan_apr")
                encoder.encode(financeEmp, forKey: "finance_emp")
                encoder.encode(financeDownPayment, forKey: "finance_down_payment")
                encoder.encode(financeDownPaymentPer, forKey: "finance_down_payment_per")
                encoder.encode(carType, forKey: "car_type")
                encoder.encode(carfax1Owner, forKey: "carfax_1_owner")
                encoder.encode(carfaxCleanTitle, forKey: "carfax_clean_title")
                encoder.encode(yearRange, forKey: "year_range")
                encoder.encode(year, forKey: "year")
                encoder.encode(make, forKey: "make")
                encoder.encode(model, forKey: "model")
                encoder.encode(trim, forKey: "trim")
                encoder.encode(dealerID, forKey: "dealer_id")
                encoder.encode(vin, forKey: "vin")
                encoder.encode(source, forKey: "source")
                encoder.encode(bodyType, forKey: "body_type")
                encoder.encode(bodySubtype, forKey: "body_subtype")
                encoder.encode(vehicleType, forKey: "vehicle_type")
                encoder.encode(vins, forKey: "vins")
                encoder.encode(taxonomyVins, forKey: "taxonomy_vins")
                encoder.encode(ymmt, forKey: "ymmt")
                encoder.encode(match, forKey: "match")
                encoder.encode(cylinders, forKey: "cylinders")
                encoder.encode(transmission, forKey: "transmission")
                encoder.encode(doors, forKey: "doors")
                encoder.encode(drivetrain, forKey: "drivetrain")
                encoder.encode(exteriorColor, forKey: "exterior_color")
                encoder.encode(interiorColor, forKey: "interior_color")
                encoder.encode(baseExteriorColor, forKey: "base_exterior_color")
                encoder.encode(baseInteriorColor, forKey: "base_interior_color")
                encoder.encode(engine, forKey: "engine")
                encoder.encode(engineSize, forKey: "engine_size")
                encoder.encode(engineAspiration, forKey: "engine_aspiration")
                encoder.encode(engineBlock, forKey: "engine_block")
                encoder.encode(highwayMpgRange, forKey: "highway_mpg_range")
                encoder.encode(cityMpgRange, forKey: "city_mpg_range")
                encoder.encode(milesRange, forKey: "miles_range")
                encoder.encode(priceRange, forKey: "price_range")
                encoder.encode(msrpRange, forKey: "msrp_range")
                encoder.encode(domRange, forKey: "dom_range")
                encoder.encode(lastSeenRange, forKey: "last_seen_range")
                encoder.encode(firstSeenRange, forKey: "first_seen_range")
                encoder.encode(firstSeenAtSourceRange, forKey: "first_seen_at_source_range")
                encoder.encode(firstSeenAtMcRange, forKey: "first_seen_at_mc_range")
                encoder.encode(lastSeenDays, forKey: "last_seen_days")
                encoder.encode(firstSeenDays, forKey: "first_seen_days")
                encoder.encode(firstSeenAtSourceDays, forKey: "first_seen_at_source_days")
                encoder.encode(firstSeenAtMcDays, forKey: "first_seen_at_mc_days")
                encoder.encode(sortBy, forKey: "sort_by")
                encoder.encode(sortOrder, forKey: "sort_order")
                encoder.encode(rows, forKey: "rows")
                encoder.encode(start, forKey: "start")
                encoder.encode(isIncludeNonVinListings, forKey: "include_non_vin_listings")
                encoder.encode(facets, forKey: "facets")
                encoder.encode(rangeFacets, forKey: "range_facets")
                encoder.encode(facetSort, forKey: "facet_sort")
                encoder.encode(stats, forKey: "stats")
                encoder.encode(country, forKey: "country")
                encoder.encode(isPlot, forKey: "plot")
                encoder.encode(isNodedup, forKey: "nodedup")
                encoder.encode(isDedup, forKey: "dedup")
                encoder.encode(isOwned, forKey: "owned")
                encoder.encode(state, forKey: "state")
                encoder.encode(city, forKey: "city")
                encoder.encode(msaCode, forKey: "msa_code")
                encoder.encode(dealerName, forKey: "dealer_name")
                encoder.encode(dealershipGroupName, forKey: "dealership_group_name")
                encoder.encode(trimO, forKey: "trim_o")
                encoder.encode(trimR, forKey: "trim_r")
                encoder.encode(domActiveRange, forKey: "dom_active_range")
                encoder.encode(dom180Range, forKey: "dom_180_range")
                encoder.encode(excludeCertified, forKey: "exclude_certified")
                encoder.encode(fuelType, forKey: "fuel_type")
                encoder.encode(dealerType, forKey: "dealer_type")
                encoder.encode(isPhotoLinks, forKey: "photo_links")
                encoder.encode(stockNo, forKey: "stock_no")
                encoder.encode(isSold, forKey: "sold")
                encoder.encode(isIncludeRelevantLinks, forKey: "include_relevant_links")
                encoder.encode(expired, forKey: "expired")
                return encoder.items
            }
        }
    }
}

extension Paths {
    public static var car: Car {
        Car(path: "/car")
    }

    public struct Car {
        /// Path: `/car`
        public let path: String
    }
}

extension Paths.Car {
    public var dealer: Dealer {
        Dealer(path: path + "/dealer")
    }

    public struct Dealer {
        /// Path: `/car/dealer`
        public let path: String
    }
}

extension Paths.Car.Dealer {
    public var inventory: Inventory {
        Inventory(path: path + "/inventory")
    }

    public struct Inventory {
        /// Path: `/car/dealer/inventory`
        public let path: String
    }
}

extension Paths.Car.Dealer.Inventory {
    public var active: Active {
        Active(path: path + "/active")
    }

    public struct Active {
        /// Path: `/car/dealer/inventory/active`
        public let path: String

        /// Get dealers active inventory
        public func get(parameters: GetParameters? = nil) -> Request<MarketcheckAPI.SearchResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var isAppendAPIKey: Bool?
            public var latitude: Double?
            public var longitude: Double?
            public var radius: Int?
            public var zip: String?
            public var isIncludeLease: Bool?
            public var isIncludeFinance: Bool?
            public var leaseTerm: String?
            public var leaseDownPayment: String?
            public var leaseEmp: String?
            public var financeLoanTerm: String?
            public var financeLoanApr: String?
            public var financeEmp: String?
            public var financeDownPayment: String?
            public var financeDownPaymentPer: String?
            public var carType: CarType?
            public var carfax1Owner: Carfax1Owner?
            public var carfaxCleanTitle: CarfaxCleanTitle?
            public var yearRange: String?
            public var year: String?
            public var make: String?
            public var model: String?
            public var trim: String?
            public var dealerID: String?
            public var vin: String?
            public var source: String?
            public var bodyType: String?
            public var bodySubtype: String?
            public var vehicleType: String?
            public var vins: String?
            public var taxonomyVins: String?
            public var mm: String?
            public var ymm: String?
            public var ymmt: String?
            public var match: String?
            public var cylinders: String?
            public var transmission: String?
            public var doors: String?
            public var drivetrain: String?
            public var exteriorColor: String?
            public var interiorColor: String?
            public var baseExteriorColor: String?
            public var baseInteriorColor: String?
            public var engine: String?
            public var engineSize: String?
            public var engineAspiration: String?
            public var engineBlock: String?
            public var highwayMpgRange: String?
            public var cityMpgRange: String?
            public var milesRange: String?
            public var priceRange: String?
            public var msrpRange: String?
            public var domRange: String?
            public var sortBy: String?
            public var sortOrder: SortOrder?
            public var rows: Int?
            public var start: Int?
            public var isIncludeNonVinListings: Bool?
            public var msaCode: String?
            public var facets: String?
            public var rangeFacets: String?
            public var facetSort: FacetSort?
            public var stats: String?
            public var country: Country?
            public var isPlot: Bool?
            public var isNodedup: Bool?
            public var isDedup: Bool?
            public var isOwned: Bool?
            public var state: String?
            public var city: String?
            public var dealerName: String?
            public var dealershipGroupName: String?
            public var trimO: String?
            public var trimR: String?
            public var domActiveRange: String?
            public var dom180Range: String?
            public var excludeCertified: Bool?
            public var fuelType: String?
            public var dealerType: DealerType?
            public var isPhotoLinks: Bool?
            public var stockNo: String?
            public var lastSeenRange: String?
            public var firstSeenRange: String?
            public var firstSeenAtSourceRange: String?
            public var firstSeenAtMcRange: String?
            public var lastSeenDays: String?
            public var firstSeenDays: String?
            public var firstSeenAtSourceDays: String?
            public var firstSeenAtMcDays: String?
            public var isIncludeRelevantLinks: Bool?

            public enum CarType: String, Codable, CaseIterable {
                case new
                case used
                case certified
            }

            public enum Carfax1Owner: String, Codable, CaseIterable {
                case `true`
                case `false`
            }

            public enum CarfaxCleanTitle: String, Codable, CaseIterable {
                case `true`
                case `false`
            }

            public enum SortOrder: String, Codable, CaseIterable {
                case asc
                case desc
                case asc2 = "ASC"
                case desc2 = "DESC"
            }

            public enum FacetSort: String, Codable, CaseIterable {
                case count
                case index
            }

            public enum Country: String, Codable, CaseIterable {
                case us = "US"
                case ca = "CA"
                case us2 = "us"
                case ca2 = "ca"
                case all
                case all2 = "ALL"
            }

            public enum DealerType: String, Codable, CaseIterable {
                case franchise
                case independent
            }

            public init(apiKey: String? = nil, isAppendAPIKey: Bool? = nil, latitude: Double? = nil, longitude: Double? = nil, radius: Int? = nil, zip: String? = nil, isIncludeLease: Bool? = nil, isIncludeFinance: Bool? = nil, leaseTerm: String? = nil, leaseDownPayment: String? = nil, leaseEmp: String? = nil, financeLoanTerm: String? = nil, financeLoanApr: String? = nil, financeEmp: String? = nil, financeDownPayment: String? = nil, financeDownPaymentPer: String? = nil, carType: CarType? = nil, carfax1Owner: Carfax1Owner? = nil, carfaxCleanTitle: CarfaxCleanTitle? = nil, yearRange: String? = nil, year: String? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, dealerID: String? = nil, vin: String? = nil, source: String? = nil, bodyType: String? = nil, bodySubtype: String? = nil, vehicleType: String? = nil, vins: String? = nil, taxonomyVins: String? = nil, mm: String? = nil, ymm: String? = nil, ymmt: String? = nil, match: String? = nil, cylinders: String? = nil, transmission: String? = nil, doors: String? = nil, drivetrain: String? = nil, exteriorColor: String? = nil, interiorColor: String? = nil, baseExteriorColor: String? = nil, baseInteriorColor: String? = nil, engine: String? = nil, engineSize: String? = nil, engineAspiration: String? = nil, engineBlock: String? = nil, highwayMpgRange: String? = nil, cityMpgRange: String? = nil, milesRange: String? = nil, priceRange: String? = nil, msrpRange: String? = nil, domRange: String? = nil, sortBy: String? = nil, sortOrder: SortOrder? = nil, rows: Int? = nil, start: Int? = nil, isIncludeNonVinListings: Bool? = nil, msaCode: String? = nil, facets: String? = nil, rangeFacets: String? = nil, facetSort: FacetSort? = nil, stats: String? = nil, country: Country? = nil, isPlot: Bool? = nil, isNodedup: Bool? = nil, isDedup: Bool? = nil, isOwned: Bool? = nil, state: String? = nil, city: String? = nil, dealerName: String? = nil, dealershipGroupName: String? = nil, trimO: String? = nil, trimR: String? = nil, domActiveRange: String? = nil, dom180Range: String? = nil, excludeCertified: Bool? = nil, fuelType: String? = nil, dealerType: DealerType? = nil, isPhotoLinks: Bool? = nil, stockNo: String? = nil, lastSeenRange: String? = nil, firstSeenRange: String? = nil, firstSeenAtSourceRange: String? = nil, firstSeenAtMcRange: String? = nil, lastSeenDays: String? = nil, firstSeenDays: String? = nil, firstSeenAtSourceDays: String? = nil, firstSeenAtMcDays: String? = nil, isIncludeRelevantLinks: Bool? = nil) {
                self.apiKey = apiKey
                self.isAppendAPIKey = isAppendAPIKey
                self.latitude = latitude
                self.longitude = longitude
                self.radius = radius
                self.zip = zip
                self.isIncludeLease = isIncludeLease
                self.isIncludeFinance = isIncludeFinance
                self.leaseTerm = leaseTerm
                self.leaseDownPayment = leaseDownPayment
                self.leaseEmp = leaseEmp
                self.financeLoanTerm = financeLoanTerm
                self.financeLoanApr = financeLoanApr
                self.financeEmp = financeEmp
                self.financeDownPayment = financeDownPayment
                self.financeDownPaymentPer = financeDownPaymentPer
                self.carType = carType
                self.carfax1Owner = carfax1Owner
                self.carfaxCleanTitle = carfaxCleanTitle
                self.yearRange = yearRange
                self.year = year
                self.make = make
                self.model = model
                self.trim = trim
                self.dealerID = dealerID
                self.vin = vin
                self.source = source
                self.bodyType = bodyType
                self.bodySubtype = bodySubtype
                self.vehicleType = vehicleType
                self.vins = vins
                self.taxonomyVins = taxonomyVins
                self.mm = mm
                self.ymm = ymm
                self.ymmt = ymmt
                self.match = match
                self.cylinders = cylinders
                self.transmission = transmission
                self.doors = doors
                self.drivetrain = drivetrain
                self.exteriorColor = exteriorColor
                self.interiorColor = interiorColor
                self.baseExteriorColor = baseExteriorColor
                self.baseInteriorColor = baseInteriorColor
                self.engine = engine
                self.engineSize = engineSize
                self.engineAspiration = engineAspiration
                self.engineBlock = engineBlock
                self.highwayMpgRange = highwayMpgRange
                self.cityMpgRange = cityMpgRange
                self.milesRange = milesRange
                self.priceRange = priceRange
                self.msrpRange = msrpRange
                self.domRange = domRange
                self.sortBy = sortBy
                self.sortOrder = sortOrder
                self.rows = rows
                self.start = start
                self.isIncludeNonVinListings = isIncludeNonVinListings
                self.msaCode = msaCode
                self.facets = facets
                self.rangeFacets = rangeFacets
                self.facetSort = facetSort
                self.stats = stats
                self.country = country
                self.isPlot = isPlot
                self.isNodedup = isNodedup
                self.isDedup = isDedup
                self.isOwned = isOwned
                self.state = state
                self.city = city
                self.dealerName = dealerName
                self.dealershipGroupName = dealershipGroupName
                self.trimO = trimO
                self.trimR = trimR
                self.domActiveRange = domActiveRange
                self.dom180Range = dom180Range
                self.excludeCertified = excludeCertified
                self.fuelType = fuelType
                self.dealerType = dealerType
                self.isPhotoLinks = isPhotoLinks
                self.stockNo = stockNo
                self.lastSeenRange = lastSeenRange
                self.firstSeenRange = firstSeenRange
                self.firstSeenAtSourceRange = firstSeenAtSourceRange
                self.firstSeenAtMcRange = firstSeenAtMcRange
                self.lastSeenDays = lastSeenDays
                self.firstSeenDays = firstSeenDays
                self.firstSeenAtSourceDays = firstSeenAtSourceDays
                self.firstSeenAtMcDays = firstSeenAtMcDays
                self.isIncludeRelevantLinks = isIncludeRelevantLinks
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(isAppendAPIKey, forKey: "append_api_key")
                encoder.encode(latitude, forKey: "latitude")
                encoder.encode(longitude, forKey: "longitude")
                encoder.encode(radius, forKey: "radius")
                encoder.encode(zip, forKey: "zip")
                encoder.encode(isIncludeLease, forKey: "include_lease")
                encoder.encode(isIncludeFinance, forKey: "include_finance")
                encoder.encode(leaseTerm, forKey: "lease_term")
                encoder.encode(leaseDownPayment, forKey: "lease_down_payment")
                encoder.encode(leaseEmp, forKey: "lease_emp")
                encoder.encode(financeLoanTerm, forKey: "finance_loan_term")
                encoder.encode(financeLoanApr, forKey: "finance_loan_apr")
                encoder.encode(financeEmp, forKey: "finance_emp")
                encoder.encode(financeDownPayment, forKey: "finance_down_payment")
                encoder.encode(financeDownPaymentPer, forKey: "finance_down_payment_per")
                encoder.encode(carType, forKey: "car_type")
                encoder.encode(carfax1Owner, forKey: "carfax_1_owner")
                encoder.encode(carfaxCleanTitle, forKey: "carfax_clean_title")
                encoder.encode(yearRange, forKey: "year_range")
                encoder.encode(year, forKey: "year")
                encoder.encode(make, forKey: "make")
                encoder.encode(model, forKey: "model")
                encoder.encode(trim, forKey: "trim")
                encoder.encode(dealerID, forKey: "dealer_id")
                encoder.encode(vin, forKey: "vin")
                encoder.encode(source, forKey: "source")
                encoder.encode(bodyType, forKey: "body_type")
                encoder.encode(bodySubtype, forKey: "body_subtype")
                encoder.encode(vehicleType, forKey: "vehicle_type")
                encoder.encode(vins, forKey: "vins")
                encoder.encode(taxonomyVins, forKey: "taxonomy_vins")
                encoder.encode(mm, forKey: "mm")
                encoder.encode(ymm, forKey: "ymm")
                encoder.encode(ymmt, forKey: "ymmt")
                encoder.encode(match, forKey: "match")
                encoder.encode(cylinders, forKey: "cylinders")
                encoder.encode(transmission, forKey: "transmission")
                encoder.encode(doors, forKey: "doors")
                encoder.encode(drivetrain, forKey: "drivetrain")
                encoder.encode(exteriorColor, forKey: "exterior_color")
                encoder.encode(interiorColor, forKey: "interior_color")
                encoder.encode(baseExteriorColor, forKey: "base_exterior_color")
                encoder.encode(baseInteriorColor, forKey: "base_interior_color")
                encoder.encode(engine, forKey: "engine")
                encoder.encode(engineSize, forKey: "engine_size")
                encoder.encode(engineAspiration, forKey: "engine_aspiration")
                encoder.encode(engineBlock, forKey: "engine_block")
                encoder.encode(highwayMpgRange, forKey: "highway_mpg_range")
                encoder.encode(cityMpgRange, forKey: "city_mpg_range")
                encoder.encode(milesRange, forKey: "miles_range")
                encoder.encode(priceRange, forKey: "price_range")
                encoder.encode(msrpRange, forKey: "msrp_range")
                encoder.encode(domRange, forKey: "dom_range")
                encoder.encode(sortBy, forKey: "sort_by")
                encoder.encode(sortOrder, forKey: "sort_order")
                encoder.encode(rows, forKey: "rows")
                encoder.encode(start, forKey: "start")
                encoder.encode(isIncludeNonVinListings, forKey: "include_non_vin_listings")
                encoder.encode(msaCode, forKey: "msa_code")
                encoder.encode(facets, forKey: "facets")
                encoder.encode(rangeFacets, forKey: "range_facets")
                encoder.encode(facetSort, forKey: "facet_sort")
                encoder.encode(stats, forKey: "stats")
                encoder.encode(country, forKey: "country")
                encoder.encode(isPlot, forKey: "plot")
                encoder.encode(isNodedup, forKey: "nodedup")
                encoder.encode(isDedup, forKey: "dedup")
                encoder.encode(isOwned, forKey: "owned")
                encoder.encode(state, forKey: "state")
                encoder.encode(city, forKey: "city")
                encoder.encode(dealerName, forKey: "dealer_name")
                encoder.encode(dealershipGroupName, forKey: "dealership_group_name")
                encoder.encode(trimO, forKey: "trim_o")
                encoder.encode(trimR, forKey: "trim_r")
                encoder.encode(domActiveRange, forKey: "dom_active_range")
                encoder.encode(dom180Range, forKey: "dom_180_range")
                encoder.encode(excludeCertified, forKey: "exclude_certified")
                encoder.encode(fuelType, forKey: "fuel_type")
                encoder.encode(dealerType, forKey: "dealer_type")
                encoder.encode(isPhotoLinks, forKey: "photo_links")
                encoder.encode(stockNo, forKey: "stock_no")
                encoder.encode(lastSeenRange, forKey: "last_seen_range")
                encoder.encode(firstSeenRange, forKey: "first_seen_range")
                encoder.encode(firstSeenAtSourceRange, forKey: "first_seen_at_source_range")
                encoder.encode(firstSeenAtMcRange, forKey: "first_seen_at_mc_range")
                encoder.encode(lastSeenDays, forKey: "last_seen_days")
                encoder.encode(firstSeenDays, forKey: "first_seen_days")
                encoder.encode(firstSeenAtSourceDays, forKey: "first_seen_at_source_days")
                encoder.encode(firstSeenAtMcDays, forKey: "first_seen_at_mc_days")
                encoder.encode(isIncludeRelevantLinks, forKey: "include_relevant_links")
                return encoder.items
            }
        }
    }
}

extension Paths.Search.Car {
    public var incentive: Incentive {
        Incentive(path: path + "/incentive")
    }

    public struct Incentive {
        /// Path: `/search/car/incentive`
        public let path: String
    }
}

extension Paths.Search.Car.Incentive {
    public var oem: Oem {
        Oem(path: path + "/oem")
    }

    public struct Oem {
        /// Path: `/search/car/incentive/oem`
        public let path: String

        /// Gets oem incentive listings for the given search criteria
        ///
        /// This endpoint is the meat of the API and serves many purposes. This API produces a list of currently active oem incentive from the market for the given search criteria. The API results are limited to allow pagination upto 10000 rows. 
        ///  The search API facilitates the following use cases - 
        /// 1. Search Cars around a given geo-point within a given radius 
        /// 2. Search cars for a specific year / make / model or combination of these 
        /// 3. Search cars matching multiple year, make, model combinatins in the same search request
        /// 4. Filter results by most car specification attributes
        /// 5. Search for similar cars by VIN or Taxonomy VIN 
        /// 6. Filter cars within a given price / miles / days on market (dom) range
        /// 7. Specify a sort order for the results on price / miles / dom / listed date 
        /// 8. Search cars for a given City / State combination 
        /// 9. Get Facets to build the search drill downs 
        /// 10. Get Market averages for price/miles/dom for your search
        public func get(parameters: GetParameters? = nil) -> Request<MarketcheckAPI.SearchResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var offerType: OfferType?
            public var year: String?
            public var make: String?
            public var model: String?
            public var trim: String?
            public var msrp: String?
            public var apr: String?
            public var monthly: String?
            public var monthlyPerThousand: String?
            public var downPayment: String?
            public var dueAtSigning: String?
            public var securityDeposit: String?
            public var dispositionFee: String?
            public var acquisitionFee: String?
            public var duration: String?
            public var dealerContribution: String?
            public var mileageCharge: String?
            public var mileageChargeLimit: String?
            public var cashbackAmount: String?
            public var cashbackTargetGroup: String?
            public var leaseEndPurchaseOption: String?
            public var netCapitalisedCost: String?
            public var grossCapitalisedCost: String?
            public var totalMonthlyPayment: String?
            public var zip: String?
            public var city: String?
            public var state: String?
            public var country: Country?
            public var latitude: Double?
            public var longitude: Double?
            public var radius: Int?
            public var searchText: String?
            public var lastSeenRange: String?
            public var firstSeenRange: String?
            public var sortBy: String?
            public var sortOrder: SortOrder?
            public var rows: Int?
            public var start: Int?
            public var facets: String?
            public var rangeFacets: String?
            public var facetSort: FacetSort?
            public var stats: String?

            public enum OfferType: String, Codable, CaseIterable {
                case lease
                case finance
                case cash
            }

            public enum Country: String, Codable, CaseIterable {
                case us = "US"
                case ca = "CA"
                case us2 = "us"
                case ca2 = "ca"
            }

            public enum SortOrder: String, Codable, CaseIterable {
                case asc
                case desc
                case asc2 = "ASC"
                case desc2 = "DESC"
            }

            public enum FacetSort: String, Codable, CaseIterable {
                case count
                case index
            }

            public init(apiKey: String? = nil, offerType: OfferType? = nil, year: String? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, msrp: String? = nil, apr: String? = nil, monthly: String? = nil, monthlyPerThousand: String? = nil, downPayment: String? = nil, dueAtSigning: String? = nil, securityDeposit: String? = nil, dispositionFee: String? = nil, acquisitionFee: String? = nil, duration: String? = nil, dealerContribution: String? = nil, mileageCharge: String? = nil, mileageChargeLimit: String? = nil, cashbackAmount: String? = nil, cashbackTargetGroup: String? = nil, leaseEndPurchaseOption: String? = nil, netCapitalisedCost: String? = nil, grossCapitalisedCost: String? = nil, totalMonthlyPayment: String? = nil, zip: String? = nil, city: String? = nil, state: String? = nil, country: Country? = nil, latitude: Double? = nil, longitude: Double? = nil, radius: Int? = nil, searchText: String? = nil, lastSeenRange: String? = nil, firstSeenRange: String? = nil, sortBy: String? = nil, sortOrder: SortOrder? = nil, rows: Int? = nil, start: Int? = nil, facets: String? = nil, rangeFacets: String? = nil, facetSort: FacetSort? = nil, stats: String? = nil) {
                self.apiKey = apiKey
                self.offerType = offerType
                self.year = year
                self.make = make
                self.model = model
                self.trim = trim
                self.msrp = msrp
                self.apr = apr
                self.monthly = monthly
                self.monthlyPerThousand = monthlyPerThousand
                self.downPayment = downPayment
                self.dueAtSigning = dueAtSigning
                self.securityDeposit = securityDeposit
                self.dispositionFee = dispositionFee
                self.acquisitionFee = acquisitionFee
                self.duration = duration
                self.dealerContribution = dealerContribution
                self.mileageCharge = mileageCharge
                self.mileageChargeLimit = mileageChargeLimit
                self.cashbackAmount = cashbackAmount
                self.cashbackTargetGroup = cashbackTargetGroup
                self.leaseEndPurchaseOption = leaseEndPurchaseOption
                self.netCapitalisedCost = netCapitalisedCost
                self.grossCapitalisedCost = grossCapitalisedCost
                self.totalMonthlyPayment = totalMonthlyPayment
                self.zip = zip
                self.city = city
                self.state = state
                self.country = country
                self.latitude = latitude
                self.longitude = longitude
                self.radius = radius
                self.searchText = searchText
                self.lastSeenRange = lastSeenRange
                self.firstSeenRange = firstSeenRange
                self.sortBy = sortBy
                self.sortOrder = sortOrder
                self.rows = rows
                self.start = start
                self.facets = facets
                self.rangeFacets = rangeFacets
                self.facetSort = facetSort
                self.stats = stats
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(offerType, forKey: "offer_type")
                encoder.encode(year, forKey: "year")
                encoder.encode(make, forKey: "make")
                encoder.encode(model, forKey: "model")
                encoder.encode(trim, forKey: "trim")
                encoder.encode(msrp, forKey: "msrp")
                encoder.encode(apr, forKey: "apr")
                encoder.encode(monthly, forKey: "monthly")
                encoder.encode(monthlyPerThousand, forKey: "monthly_per_thousand")
                encoder.encode(downPayment, forKey: "down_payment")
                encoder.encode(dueAtSigning, forKey: "due_at_signing")
                encoder.encode(securityDeposit, forKey: "security_deposit")
                encoder.encode(dispositionFee, forKey: "disposition_fee")
                encoder.encode(acquisitionFee, forKey: "acquisition_fee")
                encoder.encode(duration, forKey: "duration")
                encoder.encode(dealerContribution, forKey: "dealer_contribution")
                encoder.encode(mileageCharge, forKey: "mileage_charge")
                encoder.encode(mileageChargeLimit, forKey: "mileage_charge_limit")
                encoder.encode(cashbackAmount, forKey: "cashback_amount")
                encoder.encode(cashbackTargetGroup, forKey: "cashback_target_group")
                encoder.encode(leaseEndPurchaseOption, forKey: "lease_end_purchase_option")
                encoder.encode(netCapitalisedCost, forKey: "net_capitalised_cost")
                encoder.encode(grossCapitalisedCost, forKey: "gross_capitalised_cost")
                encoder.encode(totalMonthlyPayment, forKey: "total_monthly_payment")
                encoder.encode(zip, forKey: "zip")
                encoder.encode(city, forKey: "city")
                encoder.encode(state, forKey: "state")
                encoder.encode(country, forKey: "country")
                encoder.encode(latitude, forKey: "latitude")
                encoder.encode(longitude, forKey: "longitude")
                encoder.encode(radius, forKey: "radius")
                encoder.encode(searchText, forKey: "search_text")
                encoder.encode(lastSeenRange, forKey: "last_seen_range")
                encoder.encode(firstSeenRange, forKey: "first_seen_range")
                encoder.encode(sortBy, forKey: "sort_by")
                encoder.encode(sortOrder, forKey: "sort_order")
                encoder.encode(rows, forKey: "rows")
                encoder.encode(start, forKey: "start")
                encoder.encode(facets, forKey: "facets")
                encoder.encode(rangeFacets, forKey: "range_facets")
                encoder.encode(facetSort, forKey: "facet_sort")
                encoder.encode(stats, forKey: "stats")
                return encoder.items
            }
        }
    }
}

extension Paths.Car {
    public var recall: Recall {
        Recall(path: path + "/recall")
    }

    public struct Recall {
        /// Path: `/car/recall`
        public let path: String
    }
}

extension Paths.Car.Recall {
    public func vin(_ vin: String) -> WithVin {
        WithVin(path: "\(path)/\(vin)")
    }

    public struct WithVin {
        /// Path: `/car/recall/{vin}`
        public let path: String

        /// Recall info by vin
        ///
        /// Get a particular recall information for a vin
        public func get(apiKey: String? = nil, page: Double? = nil) -> Request<MarketcheckAPI.SearchResponse> {
            .get(path, query: makeGetQuery(apiKey, page))
        }

        private func makeGetQuery(_ apiKey: String?, _ page: Double?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            encoder.encode(page, forKey: "page")
            return encoder.items
        }
    }
}

extension Paths.Search {
    public var motorcycle: Motorcycle {
        Motorcycle(path: path + "/motorcycle")
    }

    public struct Motorcycle {
        /// Path: `/search/motorcycle`
        public let path: String
    }
}

extension Paths.Search.Motorcycle {
    public var active: Active {
        Active(path: path + "/active")
    }

    public struct Active {
        /// Path: `/search/motorcycle/active`
        public let path: String

        /// Gets active motorcycle listings for the given search criteria
        ///
        /// This endpoint provides search on motorcycle inventory. This API produces a list of currently active motorcycles from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows. 
        ///  The search API facilitates the following use cases - 
        /// 1. Search motorcycles around a given geo-point within a given radius 
        /// 2. Search motorcycles for a specific year / make / model or combination of these 
        /// 3. Search motorcycles matching multiple year, make, model combinatins in the same search request
        /// 4. Filter results by most motorcycle specification attributes
        /// 5. Search for similar motorcycles by VIN or Taxonomy VIN 
        /// 6. Filter motorcycles within a given price / miles range
        /// 7. Specify a sort order for the results on price / miles / listed date 
        /// 8. Search motorcycles for a given City / State combination 
        /// 9. Get Facets to build the search drill downs 
        /// 10. Get Market averages for price/miles for your search
        public func get(parameters: GetParameters? = nil) -> Request<MarketcheckAPI.MotorcycleSearchResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var priceRange: String?
            public var milesRange: String?
            public var msrpRange: String?
            public var latitude: Double?
            public var longitude: Double?
            public var radius: Int?
            public var searchText: String?
            public var year: String?
            public var make: String?
            public var model: String?
            public var trim: String?
            public var vin: String?
            public var taxonomyVin: String?
            public var inventoryType: InventoryType?
            public var stockNo: String?
            public var source: String?
            public var dealerID: String?
            public var color: String?
            public var bodyType: String?
            public var vehicleType: String?
            public var cylinders: String?
            public var drivetrain: String?
            public var engine: String?
            public var fuelType: String?
            public var transmission: String?
            public var state: String?
            public var city: String?
            public var zip: String?
            public var msaCode: String?
            public var sortBy: String?
            public var sortOrder: SortOrder?
            public var rows: Int?
            public var start: Int?
            public var facets: String?
            public var rangeFacets: String?
            public var facetSort: FacetSort?
            public var stats: String?
            public var lastSeenRange: String?
            public var firstSeenRange: String?
            public var lastSeenDays: String?
            public var firstSeenDays: String?

            public enum InventoryType: String, Codable, CaseIterable {
                case used
                case new
            }

            public enum SortOrder: String, Codable, CaseIterable {
                case asc
                case desc
                case asc2 = "ASC"
                case desc2 = "DESC"
            }

            public enum FacetSort: String, Codable, CaseIterable {
                case count
                case index
            }

            public init(apiKey: String? = nil, priceRange: String? = nil, milesRange: String? = nil, msrpRange: String? = nil, latitude: Double? = nil, longitude: Double? = nil, radius: Int? = nil, searchText: String? = nil, year: String? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, vin: String? = nil, taxonomyVin: String? = nil, inventoryType: InventoryType? = nil, stockNo: String? = nil, source: String? = nil, dealerID: String? = nil, color: String? = nil, bodyType: String? = nil, vehicleType: String? = nil, cylinders: String? = nil, drivetrain: String? = nil, engine: String? = nil, fuelType: String? = nil, transmission: String? = nil, state: String? = nil, city: String? = nil, zip: String? = nil, msaCode: String? = nil, sortBy: String? = nil, sortOrder: SortOrder? = nil, rows: Int? = nil, start: Int? = nil, facets: String? = nil, rangeFacets: String? = nil, facetSort: FacetSort? = nil, stats: String? = nil, lastSeenRange: String? = nil, firstSeenRange: String? = nil, lastSeenDays: String? = nil, firstSeenDays: String? = nil) {
                self.apiKey = apiKey
                self.priceRange = priceRange
                self.milesRange = milesRange
                self.msrpRange = msrpRange
                self.latitude = latitude
                self.longitude = longitude
                self.radius = radius
                self.searchText = searchText
                self.year = year
                self.make = make
                self.model = model
                self.trim = trim
                self.vin = vin
                self.taxonomyVin = taxonomyVin
                self.inventoryType = inventoryType
                self.stockNo = stockNo
                self.source = source
                self.dealerID = dealerID
                self.color = color
                self.bodyType = bodyType
                self.vehicleType = vehicleType
                self.cylinders = cylinders
                self.drivetrain = drivetrain
                self.engine = engine
                self.fuelType = fuelType
                self.transmission = transmission
                self.state = state
                self.city = city
                self.zip = zip
                self.msaCode = msaCode
                self.sortBy = sortBy
                self.sortOrder = sortOrder
                self.rows = rows
                self.start = start
                self.facets = facets
                self.rangeFacets = rangeFacets
                self.facetSort = facetSort
                self.stats = stats
                self.lastSeenRange = lastSeenRange
                self.firstSeenRange = firstSeenRange
                self.lastSeenDays = lastSeenDays
                self.firstSeenDays = firstSeenDays
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(priceRange, forKey: "price_range")
                encoder.encode(milesRange, forKey: "miles_range")
                encoder.encode(msrpRange, forKey: "msrp_range")
                encoder.encode(latitude, forKey: "latitude")
                encoder.encode(longitude, forKey: "longitude")
                encoder.encode(radius, forKey: "radius")
                encoder.encode(searchText, forKey: "search_text")
                encoder.encode(year, forKey: "year")
                encoder.encode(make, forKey: "make")
                encoder.encode(model, forKey: "model")
                encoder.encode(trim, forKey: "trim")
                encoder.encode(vin, forKey: "vin")
                encoder.encode(taxonomyVin, forKey: "taxonomy_vin")
                encoder.encode(inventoryType, forKey: "inventory_type")
                encoder.encode(stockNo, forKey: "stock_no")
                encoder.encode(source, forKey: "source")
                encoder.encode(dealerID, forKey: "dealer_id")
                encoder.encode(color, forKey: "color")
                encoder.encode(bodyType, forKey: "body_type")
                encoder.encode(vehicleType, forKey: "vehicle_type")
                encoder.encode(cylinders, forKey: "cylinders")
                encoder.encode(drivetrain, forKey: "drivetrain")
                encoder.encode(engine, forKey: "engine")
                encoder.encode(fuelType, forKey: "fuel_type")
                encoder.encode(transmission, forKey: "transmission")
                encoder.encode(state, forKey: "state")
                encoder.encode(city, forKey: "city")
                encoder.encode(zip, forKey: "zip")
                encoder.encode(msaCode, forKey: "msa_code")
                encoder.encode(sortBy, forKey: "sort_by")
                encoder.encode(sortOrder, forKey: "sort_order")
                encoder.encode(rows, forKey: "rows")
                encoder.encode(start, forKey: "start")
                encoder.encode(facets, forKey: "facets")
                encoder.encode(rangeFacets, forKey: "range_facets")
                encoder.encode(facetSort, forKey: "facet_sort")
                encoder.encode(stats, forKey: "stats")
                encoder.encode(lastSeenRange, forKey: "last_seen_range")
                encoder.encode(firstSeenRange, forKey: "first_seen_range")
                encoder.encode(lastSeenDays, forKey: "last_seen_days")
                encoder.encode(firstSeenDays, forKey: "first_seen_days")
                return encoder.items
            }
        }
    }
}

extension Paths.Search.Motorcycle {
    public var autoComplete: AutoComplete {
        AutoComplete(path: path + "/auto-complete")
    }

    public struct AutoComplete {
        /// Path: `/search/motorcycle/auto-complete`
        public let path: String

        /// API for auto-completion of inputs
        ///
        /// Auto-complete the inputs of your end users
        public func get(parameters: GetParameters) -> Request<MarketcheckAPI.SearchAutoCompleteResponse> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var field: Field
            public var input: String
            public var year: String?
            public var make: String?
            public var model: String?
            public var trim: String?
            public var bodyType: String?
            public var vehicleType: String?
            public var transmission: String?
            public var drivetrain: String?
            public var fuelType: String?
            public var color: String?
            public var engine: String?
            public var state: String?
            public var city: String?
            public var inventoryType: InventoryType?
            public var isIgnoreCase: Bool?
            public var isTermCounts: Bool?
            public var sortBy: SortBy?
            public var sellerType: String?
            public var radius: Int?
            public var zip: String?

            public enum Field: String, Codable, CaseIterable {
                case make
                case model
                case trim
                case bodyType = "body_type"
                case vehicleType = "vehicle_type"
                case transmission
                case drivetrain
                case fuelType = "fuel_type"
                case color
                case engine
                case state
                case city
            }

            public enum InventoryType: String, Codable, CaseIterable {
                case used
                case new
            }

            public enum SortBy: String, Codable, CaseIterable {
                case index
                case count
            }

            public init(apiKey: String? = nil, field: Field, input: String, year: String? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, bodyType: String? = nil, vehicleType: String? = nil, transmission: String? = nil, drivetrain: String? = nil, fuelType: String? = nil, color: String? = nil, engine: String? = nil, state: String? = nil, city: String? = nil, inventoryType: InventoryType? = nil, isIgnoreCase: Bool? = nil, isTermCounts: Bool? = nil, sortBy: SortBy? = nil, sellerType: String? = nil, radius: Int? = nil, zip: String? = nil) {
                self.apiKey = apiKey
                self.field = field
                self.input = input
                self.year = year
                self.make = make
                self.model = model
                self.trim = trim
                self.bodyType = bodyType
                self.vehicleType = vehicleType
                self.transmission = transmission
                self.drivetrain = drivetrain
                self.fuelType = fuelType
                self.color = color
                self.engine = engine
                self.state = state
                self.city = city
                self.inventoryType = inventoryType
                self.isIgnoreCase = isIgnoreCase
                self.isTermCounts = isTermCounts
                self.sortBy = sortBy
                self.sellerType = sellerType
                self.radius = radius
                self.zip = zip
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(field, forKey: "field")
                encoder.encode(input, forKey: "input")
                encoder.encode(year, forKey: "year")
                encoder.encode(make, forKey: "make")
                encoder.encode(model, forKey: "model")
                encoder.encode(trim, forKey: "trim")
                encoder.encode(bodyType, forKey: "body_type")
                encoder.encode(vehicleType, forKey: "vehicle_type")
                encoder.encode(transmission, forKey: "transmission")
                encoder.encode(drivetrain, forKey: "drivetrain")
                encoder.encode(fuelType, forKey: "fuel_type")
                encoder.encode(color, forKey: "color")
                encoder.encode(engine, forKey: "engine")
                encoder.encode(state, forKey: "state")
                encoder.encode(city, forKey: "city")
                encoder.encode(inventoryType, forKey: "inventory_type")
                encoder.encode(isIgnoreCase, forKey: "ignore_case")
                encoder.encode(isTermCounts, forKey: "term_counts")
                encoder.encode(sortBy, forKey: "sort_by")
                encoder.encode(sellerType, forKey: "seller_type")
                encoder.encode(radius, forKey: "radius")
                encoder.encode(zip, forKey: "zip")
                return encoder.items
            }
        }
    }
}

extension Paths.Listing {
    public var motorcycle: Motorcycle {
        Motorcycle(path: path + "/motorcycle")
    }

    public struct Motorcycle {
        /// Path: `/listing/motorcycle`
        public let path: String
    }
}

extension Paths.Listing.Motorcycle {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/listing/motorcycle/{id}`
        public let path: String

        /// Motorcycle listing by id
        ///
        /// Get a particular Motorcycle listing by its id
        public func get(apiKey: String? = nil) -> Request<MarketcheckAPI.MotorcycleListing> {
            .get(path, query: makeGetQuery(apiKey))
        }

        private func makeGetQuery(_ apiKey: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            return encoder.items
        }
    }
}

extension Paths.Listing.Motorcycle.WithID {
    public var media: Media {
        Media(path: path + "/media")
    }

    public struct Media {
        /// Path: `/listing/motorcycle/{id}/media`
        public let path: String

        /// Motorcycle listing media by id
        ///
        /// Get Motorcycle listing media (photo, photos) by id
        public func get(apiKey: String? = nil) -> Request<MarketcheckAPI.ListingMedia> {
            .get(path, query: makeGetQuery(apiKey))
        }

        private func makeGetQuery(_ apiKey: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            return encoder.items
        }
    }
}

extension Paths.Listing.Motorcycle.WithID {
    public var extra: Extra {
        Extra(path: path + "/extra")
    }

    public struct Extra {
        /// Path: `/listing/motorcycle/{id}/extra`
        public let path: String

        /// Long text Motorcycle Listings attributes for Listing with the given id
        ///
        /// Get Motorcycle listing options, features, seller comments
        public func get(apiKey: String? = nil) -> Request<MarketcheckAPI.ListingExtraAttributes> {
            .get(path, query: makeGetQuery(apiKey))
        }

        private func makeGetQuery(_ apiKey: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            return encoder.items
        }
    }
}

extension Paths.Search {
    public var rv: Rv {
        Rv(path: path + "/rv")
    }

    public struct Rv {
        /// Path: `/search/rv`
        public let path: String
    }
}

extension Paths.Search.Rv {
    public var active: Active {
        Active(path: path + "/active")
    }

    public struct Active {
        /// Path: `/search/rv/active`
        public let path: String

        /// Gets active RV listings for the given search criteria
        ///
        /// This endpoint provides search on RV inventory. This API produces a list of currently active RV from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows. 
        ///  The search API facilitates the following use cases - 
        /// 1. Search RV around a given geo-point within a given radius 
        /// 2. Search RV for a specific year / make / model or combination of these 
        /// 3. Search RV matching multiple year, make, model combinatins in the same search request
        /// 4. Filter results by most RV specification attributes
        /// 5. Filter RV within a given price / miles range
        /// 6. Specify a sort order for the results on price / miles / listed date 
        /// 7. Search RV for a given City / State combination 
        /// 8. Get Facets to build the search drill downs 
        /// 9. Get Market averages for price/miles for your search
        public func get(parameters: GetParameters? = nil) -> Request<MarketcheckAPI.RVSearchResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var priceRange: String?
            public var milesRange: String?
            public var msrpRange: String?
            public var searchText: String?
            public var latitude: Double?
            public var longitude: Double?
            public var radius: Int?
            public var year: String?
            public var make: String?
            public var model: String?
            public var modelO: String?
            public var vin: String?
            public var inventoryType: InventoryType?
            public var stockNo: String?
            public var source: String?
            public var dealerName: String?
            public var dealerID: String?
            public var exteriorColor: String?
            public var interiorColor: String?
            public var engine: String?
            public var fuelType: String?
            public var transmission: String?
            public var `class`: String?
            public var state: String?
            public var city: String?
            public var zip: String?
            public var msaCode: String?
            public var sortBy: String?
            public var sortOrder: SortOrder?
            public var rows: Int?
            public var start: Int?
            public var facets: String?
            public var rangeFacets: String?
            public var facetSort: FacetSort?
            public var stats: String?
            public var lastSeenRange: String?
            public var firstSeenRange: String?
            public var lastSeenDays: String?
            public var firstSeenDays: String?

            public enum InventoryType: String, Codable, CaseIterable {
                case used
                case new
            }

            public enum SortOrder: String, Codable, CaseIterable {
                case asc
                case desc
                case asc2 = "ASC"
                case desc2 = "DESC"
            }

            public enum FacetSort: String, Codable, CaseIterable {
                case count
                case index
            }

            public init(apiKey: String? = nil, priceRange: String? = nil, milesRange: String? = nil, msrpRange: String? = nil, searchText: String? = nil, latitude: Double? = nil, longitude: Double? = nil, radius: Int? = nil, year: String? = nil, make: String? = nil, model: String? = nil, modelO: String? = nil, vin: String? = nil, inventoryType: InventoryType? = nil, stockNo: String? = nil, source: String? = nil, dealerName: String? = nil, dealerID: String? = nil, exteriorColor: String? = nil, interiorColor: String? = nil, engine: String? = nil, fuelType: String? = nil, transmission: String? = nil, `class`: String? = nil, state: String? = nil, city: String? = nil, zip: String? = nil, msaCode: String? = nil, sortBy: String? = nil, sortOrder: SortOrder? = nil, rows: Int? = nil, start: Int? = nil, facets: String? = nil, rangeFacets: String? = nil, facetSort: FacetSort? = nil, stats: String? = nil, lastSeenRange: String? = nil, firstSeenRange: String? = nil, lastSeenDays: String? = nil, firstSeenDays: String? = nil) {
                self.apiKey = apiKey
                self.priceRange = priceRange
                self.milesRange = milesRange
                self.msrpRange = msrpRange
                self.searchText = searchText
                self.latitude = latitude
                self.longitude = longitude
                self.radius = radius
                self.year = year
                self.make = make
                self.model = model
                self.modelO = modelO
                self.vin = vin
                self.inventoryType = inventoryType
                self.stockNo = stockNo
                self.source = source
                self.dealerName = dealerName
                self.dealerID = dealerID
                self.exteriorColor = exteriorColor
                self.interiorColor = interiorColor
                self.engine = engine
                self.fuelType = fuelType
                self.transmission = transmission
                self.class = `class`
                self.state = state
                self.city = city
                self.zip = zip
                self.msaCode = msaCode
                self.sortBy = sortBy
                self.sortOrder = sortOrder
                self.rows = rows
                self.start = start
                self.facets = facets
                self.rangeFacets = rangeFacets
                self.facetSort = facetSort
                self.stats = stats
                self.lastSeenRange = lastSeenRange
                self.firstSeenRange = firstSeenRange
                self.lastSeenDays = lastSeenDays
                self.firstSeenDays = firstSeenDays
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(priceRange, forKey: "price_range")
                encoder.encode(milesRange, forKey: "miles_range")
                encoder.encode(msrpRange, forKey: "msrp_range")
                encoder.encode(searchText, forKey: "search_text")
                encoder.encode(latitude, forKey: "latitude")
                encoder.encode(longitude, forKey: "longitude")
                encoder.encode(radius, forKey: "radius")
                encoder.encode(year, forKey: "year")
                encoder.encode(make, forKey: "make")
                encoder.encode(model, forKey: "model")
                encoder.encode(modelO, forKey: "model_o")
                encoder.encode(vin, forKey: "vin")
                encoder.encode(inventoryType, forKey: "inventory_type")
                encoder.encode(stockNo, forKey: "stock_no")
                encoder.encode(source, forKey: "source")
                encoder.encode(dealerName, forKey: "dealer_name")
                encoder.encode(dealerID, forKey: "dealer_id")
                encoder.encode(exteriorColor, forKey: "exterior_color")
                encoder.encode(interiorColor, forKey: "interior_color")
                encoder.encode(engine, forKey: "engine")
                encoder.encode(fuelType, forKey: "fuel_type")
                encoder.encode(transmission, forKey: "transmission")
                encoder.encode(`class`, forKey: "class")
                encoder.encode(state, forKey: "state")
                encoder.encode(city, forKey: "city")
                encoder.encode(zip, forKey: "zip")
                encoder.encode(msaCode, forKey: "msa_code")
                encoder.encode(sortBy, forKey: "sort_by")
                encoder.encode(sortOrder, forKey: "sort_order")
                encoder.encode(rows, forKey: "rows")
                encoder.encode(start, forKey: "start")
                encoder.encode(facets, forKey: "facets")
                encoder.encode(rangeFacets, forKey: "range_facets")
                encoder.encode(facetSort, forKey: "facet_sort")
                encoder.encode(stats, forKey: "stats")
                encoder.encode(lastSeenRange, forKey: "last_seen_range")
                encoder.encode(firstSeenRange, forKey: "first_seen_range")
                encoder.encode(lastSeenDays, forKey: "last_seen_days")
                encoder.encode(firstSeenDays, forKey: "first_seen_days")
                return encoder.items
            }
        }
    }
}

extension Paths.Search.Rv {
    public var autoComplete: AutoComplete {
        AutoComplete(path: path + "/auto-complete")
    }

    public struct AutoComplete {
        /// Path: `/search/rv/auto-complete`
        public let path: String

        /// API for auto-completion of inputs
        ///
        /// Auto-complete the inputs of your end users
        public func get(parameters: GetParameters) -> Request<MarketcheckAPI.SearchAutoCompleteResponse> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var field: Field
            public var input: String
            public var year: String?
            public var make: String?
            public var model: String?
            public var trim: String?
            public var bodyType: String?
            public var vehicleType: String?
            public var transmission: String?
            public var drivetrain: String?
            public var fuelType: String?
            public var color: String?
            public var engine: String?
            public var state: String?
            public var city: String?
            public var inventoryType: InventoryType?
            public var isIgnoreCase: Bool?
            public var isTermCounts: Bool?
            public var sortBy: SortBy?
            public var sellerType: String?
            public var radius: Int?
            public var zip: String?

            public enum Field: String, Codable, CaseIterable {
                case make
                case model
                case trim
                case `class`
                case transmission
                case fuelType = "fuel_type"
                case exteriorColor = "exterior_color"
                case interiorColor = "interior_color"
                case engine
                case state
                case city
            }

            public enum InventoryType: String, Codable, CaseIterable {
                case used
                case new
            }

            public enum SortBy: String, Codable, CaseIterable {
                case index
                case count
            }

            public init(apiKey: String? = nil, field: Field, input: String, year: String? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, bodyType: String? = nil, vehicleType: String? = nil, transmission: String? = nil, drivetrain: String? = nil, fuelType: String? = nil, color: String? = nil, engine: String? = nil, state: String? = nil, city: String? = nil, inventoryType: InventoryType? = nil, isIgnoreCase: Bool? = nil, isTermCounts: Bool? = nil, sortBy: SortBy? = nil, sellerType: String? = nil, radius: Int? = nil, zip: String? = nil) {
                self.apiKey = apiKey
                self.field = field
                self.input = input
                self.year = year
                self.make = make
                self.model = model
                self.trim = trim
                self.bodyType = bodyType
                self.vehicleType = vehicleType
                self.transmission = transmission
                self.drivetrain = drivetrain
                self.fuelType = fuelType
                self.color = color
                self.engine = engine
                self.state = state
                self.city = city
                self.inventoryType = inventoryType
                self.isIgnoreCase = isIgnoreCase
                self.isTermCounts = isTermCounts
                self.sortBy = sortBy
                self.sellerType = sellerType
                self.radius = radius
                self.zip = zip
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(field, forKey: "field")
                encoder.encode(input, forKey: "input")
                encoder.encode(year, forKey: "year")
                encoder.encode(make, forKey: "make")
                encoder.encode(model, forKey: "model")
                encoder.encode(trim, forKey: "trim")
                encoder.encode(bodyType, forKey: "body_type")
                encoder.encode(vehicleType, forKey: "vehicle_type")
                encoder.encode(transmission, forKey: "transmission")
                encoder.encode(drivetrain, forKey: "drivetrain")
                encoder.encode(fuelType, forKey: "fuel_type")
                encoder.encode(color, forKey: "color")
                encoder.encode(engine, forKey: "engine")
                encoder.encode(state, forKey: "state")
                encoder.encode(city, forKey: "city")
                encoder.encode(inventoryType, forKey: "inventory_type")
                encoder.encode(isIgnoreCase, forKey: "ignore_case")
                encoder.encode(isTermCounts, forKey: "term_counts")
                encoder.encode(sortBy, forKey: "sort_by")
                encoder.encode(sellerType, forKey: "seller_type")
                encoder.encode(radius, forKey: "radius")
                encoder.encode(zip, forKey: "zip")
                return encoder.items
            }
        }
    }
}

extension Paths.Listing {
    public var rv: Rv {
        Rv(path: path + "/rv")
    }

    public struct Rv {
        /// Path: `/listing/rv`
        public let path: String
    }
}

extension Paths.Listing.Rv {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/listing/rv/{id}`
        public let path: String

        /// RV listing by id
        ///
        /// Get a particular RV listing by its id
        public func get(apiKey: String? = nil) -> Request<MarketcheckAPI.RVListing> {
            .get(path, query: makeGetQuery(apiKey))
        }

        private func makeGetQuery(_ apiKey: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            return encoder.items
        }
    }
}

extension Paths.Listing.Rv.WithID {
    public var media: Media {
        Media(path: path + "/media")
    }

    public struct Media {
        /// Path: `/listing/rv/{id}/media`
        public let path: String

        /// Listing media by id
        ///
        /// Get listing media (photo, photos) by id
        public func get(apiKey: String? = nil) -> Request<MarketcheckAPI.ListingMedia> {
            .get(path, query: makeGetQuery(apiKey))
        }

        private func makeGetQuery(_ apiKey: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            return encoder.items
        }
    }
}

extension Paths.Listing.Rv.WithID {
    public var extra: Extra {
        Extra(path: path + "/extra")
    }

    public struct Extra {
        /// Path: `/listing/rv/{id}/extra`
        public let path: String

        /// Long text RV Listings attributes for Listing with the given id
        ///
        /// Get RV listing options, features, seller comments
        public func get(apiKey: String? = nil) -> Request<MarketcheckAPI.ListingExtraAttributes> {
            .get(path, query: makeGetQuery(apiKey))
        }

        private func makeGetQuery(_ apiKey: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            return encoder.items
        }
    }
}

extension Paths.Search {
    public var heavyEquipment: HeavyEquipment {
        HeavyEquipment(path: path + "/heavy-equipment")
    }

    public struct HeavyEquipment {
        /// Path: `/search/heavy-equipment`
        public let path: String
    }
}

extension Paths.Search.HeavyEquipment {
    public var active: Active {
        Active(path: path + "/active")
    }

    public struct Active {
        /// Path: `/search/heavy-equipment/active`
        public let path: String

        /// Gets active heavy equipment listings for the given search criteria
        ///
        /// This endpoint provides search on heavy equipment inventory. This API produces a list of currently active heavy equipments from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows. 
        ///  The search API facilitates the following use cases - 
        /// 1. Search heavy equipments around a given geo-point within a given radius 
        /// 2. Search heavy equipments for a specific year / make / model or combination of these 
        /// 3. Search heavy equipments matching multiple year, make, model combinatins in the same search request
        /// 4. Filter results by most heavy equipment specification attributes
        /// 5. Filter heavy equipments within a given price / miles range
        /// 6. Specify a sort order for the results on price / miles / listed date 
        /// 7. Search heavy equipments for a given City / State combination 
        /// 8. Get Facets to build the search drill downs 
        /// 9. Get Market averages for price/miles for your search
        public func get(parameters: GetParameters? = nil) -> Request<MarketcheckAPI.HeavyEquipmentsSearchResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var priceRange: String?
            public var milesRange: String?
            public var msrpRange: String?
            public var latitude: Double?
            public var longitude: Double?
            public var radius: Int?
            public var searchText: String?
            public var year: String?
            public var make: String?
            public var model: String?
            public var trim: String?
            public var vin: String?
            public var inventoryType: InventoryType?
            public var stockNo: String?
            public var source: String?
            public var dealerName: String?
            public var dealerID: String?
            public var exteriorColor: String?
            public var interiorColor: String?
            public var engine: String?
            public var fuelType: String?
            public var transmission: String?
            public var drivetrain: String?
            public var bodyType: String?
            public var category: String?
            public var subCategory: String?
            public var hoursUsedRange: String?
            public var state: String?
            public var city: String?
            public var zip: String?
            public var msaCode: String?
            public var sortBy: String?
            public var sortOrder: SortOrder?
            public var rows: Int?
            public var start: Int?
            public var facets: String?
            public var rangeFacets: String?
            public var facetSort: FacetSort?
            public var stats: String?
            public var lastSeenRange: String?
            public var firstSeenRange: String?
            public var lastSeenDays: String?
            public var firstSeenDays: String?

            public enum InventoryType: String, Codable, CaseIterable {
                case used
                case new
            }

            public enum SortOrder: String, Codable, CaseIterable {
                case asc
                case desc
                case asc2 = "ASC"
                case desc2 = "DESC"
            }

            public enum FacetSort: String, Codable, CaseIterable {
                case count
                case index
            }

            public init(apiKey: String? = nil, priceRange: String? = nil, milesRange: String? = nil, msrpRange: String? = nil, latitude: Double? = nil, longitude: Double? = nil, radius: Int? = nil, searchText: String? = nil, year: String? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, vin: String? = nil, inventoryType: InventoryType? = nil, stockNo: String? = nil, source: String? = nil, dealerName: String? = nil, dealerID: String? = nil, exteriorColor: String? = nil, interiorColor: String? = nil, engine: String? = nil, fuelType: String? = nil, transmission: String? = nil, drivetrain: String? = nil, bodyType: String? = nil, category: String? = nil, subCategory: String? = nil, hoursUsedRange: String? = nil, state: String? = nil, city: String? = nil, zip: String? = nil, msaCode: String? = nil, sortBy: String? = nil, sortOrder: SortOrder? = nil, rows: Int? = nil, start: Int? = nil, facets: String? = nil, rangeFacets: String? = nil, facetSort: FacetSort? = nil, stats: String? = nil, lastSeenRange: String? = nil, firstSeenRange: String? = nil, lastSeenDays: String? = nil, firstSeenDays: String? = nil) {
                self.apiKey = apiKey
                self.priceRange = priceRange
                self.milesRange = milesRange
                self.msrpRange = msrpRange
                self.latitude = latitude
                self.longitude = longitude
                self.radius = radius
                self.searchText = searchText
                self.year = year
                self.make = make
                self.model = model
                self.trim = trim
                self.vin = vin
                self.inventoryType = inventoryType
                self.stockNo = stockNo
                self.source = source
                self.dealerName = dealerName
                self.dealerID = dealerID
                self.exteriorColor = exteriorColor
                self.interiorColor = interiorColor
                self.engine = engine
                self.fuelType = fuelType
                self.transmission = transmission
                self.drivetrain = drivetrain
                self.bodyType = bodyType
                self.category = category
                self.subCategory = subCategory
                self.hoursUsedRange = hoursUsedRange
                self.state = state
                self.city = city
                self.zip = zip
                self.msaCode = msaCode
                self.sortBy = sortBy
                self.sortOrder = sortOrder
                self.rows = rows
                self.start = start
                self.facets = facets
                self.rangeFacets = rangeFacets
                self.facetSort = facetSort
                self.stats = stats
                self.lastSeenRange = lastSeenRange
                self.firstSeenRange = firstSeenRange
                self.lastSeenDays = lastSeenDays
                self.firstSeenDays = firstSeenDays
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(priceRange, forKey: "price_range")
                encoder.encode(milesRange, forKey: "miles_range")
                encoder.encode(msrpRange, forKey: "msrp_range")
                encoder.encode(latitude, forKey: "latitude")
                encoder.encode(longitude, forKey: "longitude")
                encoder.encode(radius, forKey: "radius")
                encoder.encode(searchText, forKey: "search_text")
                encoder.encode(year, forKey: "year")
                encoder.encode(make, forKey: "make")
                encoder.encode(model, forKey: "model")
                encoder.encode(trim, forKey: "trim")
                encoder.encode(vin, forKey: "vin")
                encoder.encode(inventoryType, forKey: "inventory_type")
                encoder.encode(stockNo, forKey: "stock_no")
                encoder.encode(source, forKey: "source")
                encoder.encode(dealerName, forKey: "dealer_name")
                encoder.encode(dealerID, forKey: "dealer_id")
                encoder.encode(exteriorColor, forKey: "exterior_color")
                encoder.encode(interiorColor, forKey: "interior_color")
                encoder.encode(engine, forKey: "engine")
                encoder.encode(fuelType, forKey: "fuel_type")
                encoder.encode(transmission, forKey: "transmission")
                encoder.encode(drivetrain, forKey: "drivetrain")
                encoder.encode(bodyType, forKey: "body_type")
                encoder.encode(category, forKey: "category")
                encoder.encode(subCategory, forKey: "sub_category")
                encoder.encode(hoursUsedRange, forKey: "hours_used_range")
                encoder.encode(state, forKey: "state")
                encoder.encode(city, forKey: "city")
                encoder.encode(zip, forKey: "zip")
                encoder.encode(msaCode, forKey: "msa_code")
                encoder.encode(sortBy, forKey: "sort_by")
                encoder.encode(sortOrder, forKey: "sort_order")
                encoder.encode(rows, forKey: "rows")
                encoder.encode(start, forKey: "start")
                encoder.encode(facets, forKey: "facets")
                encoder.encode(rangeFacets, forKey: "range_facets")
                encoder.encode(facetSort, forKey: "facet_sort")
                encoder.encode(stats, forKey: "stats")
                encoder.encode(lastSeenRange, forKey: "last_seen_range")
                encoder.encode(firstSeenRange, forKey: "first_seen_range")
                encoder.encode(lastSeenDays, forKey: "last_seen_days")
                encoder.encode(firstSeenDays, forKey: "first_seen_days")
                return encoder.items
            }
        }
    }
}

extension Paths.Search.HeavyEquipment {
    public var autoComplete: AutoComplete {
        AutoComplete(path: path + "/auto-complete")
    }

    public struct AutoComplete {
        /// Path: `/search/heavy-equipment/auto-complete`
        public let path: String

        /// API for auto-completion of inputs
        ///
        /// Auto-complete the inputs of your end users
        public func get(parameters: GetParameters) -> Request<MarketcheckAPI.SearchAutoCompleteResponse> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var field: Field
            public var input: String
            public var year: String?
            public var make: String?
            public var model: String?
            public var trim: String?
            public var bodyType: String?
            public var vehicleType: String?
            public var transmission: String?
            public var drivetrain: String?
            public var fuelType: String?
            public var color: String?
            public var engine: String?
            public var state: String?
            public var city: String?
            public var inventoryType: InventoryType?
            public var isIgnoreCase: Bool?
            public var isTermCounts: Bool?
            public var sortBy: SortBy?
            public var sellerType: String?
            public var radius: Int?
            public var zip: String?

            public enum Field: String, Codable, CaseIterable {
                case make
                case model
                case trim
                case bodyType = "body_type"
                case transmission
                case drivetrain
                case fuelType = "fuel_type"
                case exteriorColor = "exterior_color"
                case interiorColor = "interior_color"
                case engine
                case category
                case subCategory = "sub_category"
                case state
                case city
            }

            public enum InventoryType: String, Codable, CaseIterable {
                case used
                case new
            }

            public enum SortBy: String, Codable, CaseIterable {
                case index
                case count
            }

            public init(apiKey: String? = nil, field: Field, input: String, year: String? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, bodyType: String? = nil, vehicleType: String? = nil, transmission: String? = nil, drivetrain: String? = nil, fuelType: String? = nil, color: String? = nil, engine: String? = nil, state: String? = nil, city: String? = nil, inventoryType: InventoryType? = nil, isIgnoreCase: Bool? = nil, isTermCounts: Bool? = nil, sortBy: SortBy? = nil, sellerType: String? = nil, radius: Int? = nil, zip: String? = nil) {
                self.apiKey = apiKey
                self.field = field
                self.input = input
                self.year = year
                self.make = make
                self.model = model
                self.trim = trim
                self.bodyType = bodyType
                self.vehicleType = vehicleType
                self.transmission = transmission
                self.drivetrain = drivetrain
                self.fuelType = fuelType
                self.color = color
                self.engine = engine
                self.state = state
                self.city = city
                self.inventoryType = inventoryType
                self.isIgnoreCase = isIgnoreCase
                self.isTermCounts = isTermCounts
                self.sortBy = sortBy
                self.sellerType = sellerType
                self.radius = radius
                self.zip = zip
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(field, forKey: "field")
                encoder.encode(input, forKey: "input")
                encoder.encode(year, forKey: "year")
                encoder.encode(make, forKey: "make")
                encoder.encode(model, forKey: "model")
                encoder.encode(trim, forKey: "trim")
                encoder.encode(bodyType, forKey: "body_type")
                encoder.encode(vehicleType, forKey: "vehicle_type")
                encoder.encode(transmission, forKey: "transmission")
                encoder.encode(drivetrain, forKey: "drivetrain")
                encoder.encode(fuelType, forKey: "fuel_type")
                encoder.encode(color, forKey: "color")
                encoder.encode(engine, forKey: "engine")
                encoder.encode(state, forKey: "state")
                encoder.encode(city, forKey: "city")
                encoder.encode(inventoryType, forKey: "inventory_type")
                encoder.encode(isIgnoreCase, forKey: "ignore_case")
                encoder.encode(isTermCounts, forKey: "term_counts")
                encoder.encode(sortBy, forKey: "sort_by")
                encoder.encode(sellerType, forKey: "seller_type")
                encoder.encode(radius, forKey: "radius")
                encoder.encode(zip, forKey: "zip")
                return encoder.items
            }
        }
    }
}

extension Paths.Listing {
    public var heavyEquipment: HeavyEquipment {
        HeavyEquipment(path: path + "/heavy-equipment")
    }

    public struct HeavyEquipment {
        /// Path: `/listing/heavy-equipment`
        public let path: String
    }
}

extension Paths.Listing.HeavyEquipment {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/listing/heavy-equipment/{id}`
        public let path: String

        /// Heavy equipment listing by id
        ///
        /// Get a particular Heavy equipment listing by its id
        public func get(apiKey: String? = nil) -> Request<MarketcheckAPI.HeavyEquipmentsListing> {
            .get(path, query: makeGetQuery(apiKey))
        }

        private func makeGetQuery(_ apiKey: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            return encoder.items
        }
    }
}

extension Paths.Listing.HeavyEquipment.WithID {
    public var media: Media {
        Media(path: path + "/media")
    }

    public struct Media {
        /// Path: `/listing/heavy-equipment/{id}/media`
        public let path: String

        /// Listing media by id
        ///
        /// Get listing media (photo, photos) by id
        public func get(apiKey: String? = nil) -> Request<MarketcheckAPI.ListingMedia> {
            .get(path, query: makeGetQuery(apiKey))
        }

        private func makeGetQuery(_ apiKey: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            return encoder.items
        }
    }
}

extension Paths.Listing.HeavyEquipment.WithID {
    public var extra: Extra {
        Extra(path: path + "/extra")
    }

    public struct Extra {
        /// Path: `/listing/heavy-equipment/{id}/extra`
        public let path: String

        /// Long text Heavy equipment Listings attributes for Listing with the given id
        ///
        /// Get Heavy equipment listing options, features, seller comments
        public func get(apiKey: String? = nil) -> Request<MarketcheckAPI.ListingExtraAttributes> {
            .get(path, query: makeGetQuery(apiKey))
        }

        private func makeGetQuery(_ apiKey: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            return encoder.items
        }
    }
}

extension Paths {
    public static var image: Image {
        Image(path: "/image")
    }

    public struct Image {
        /// Path: `/image`
        public let path: String
    }
}

extension Paths.Image {
    public var cache: Cache {
        Cache(path: path + "/cache")
    }

    public struct Cache {
        /// Path: `/image/cache`
        public let path: String
    }
}

extension Paths.Image.Cache {
    public var car: Car {
        Car(path: path + "/car")
    }

    public struct Car {
        /// Path: `/image/cache/car`
        public let path: String
    }
}

extension Paths.Image.Cache.Car {
    public func listingID(_ listingID: String) -> WithListingID {
        WithListingID(path: "\(path)/\(listingID)")
    }

    public struct WithListingID {
        /// Path: `/image/cache/car/{listingID}`
        public let path: String
    }
}

extension Paths.Image.Cache.Car.WithListingID {
    public func imageID(_ imageID: String) -> WithImageID {
        WithImageID(path: "\(path)/\(imageID)")
    }

    public struct WithImageID {
        /// Path: `/image/cache/car/{listingID}/{imageID}`
        public let path: String

        /// Fetch cached image
        ///
        /// Fetch the cached car image
        public func get(apiKey: String? = nil) -> Request<String> {
            .get(path, query: makeGetQuery(apiKey))
        }

        private func makeGetQuery(_ apiKey: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            return encoder.items
        }
    }
}

extension Paths {
    public static var history: History {
        History(path: "/history")
    }

    public struct History {
        /// Path: `/history`
        public let path: String
    }
}

extension Paths.History {
    public var car: Car {
        Car(path: path + "/car")
    }

    public struct Car {
        /// Path: `/history/car`
        public let path: String
    }
}

extension Paths.History.Car {
    public func vin(_ vin: String) -> WithVin {
        WithVin(path: "\(path)/\(vin)")
    }

    public struct WithVin {
        /// Path: `/history/car/{vin}`
        public let path: String

        /// Get a cars online listing history
        ///
        /// The history API returns online listing history for a car identified by its VIN. History listings are sorted in the descending order of the listing date / last seen date
        public func get(parameters: GetParameters? = nil) -> Request<[MarketcheckAPI.HistoricalListing]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var fields: String?
            public var page: Double?
            public var isIncludeDuplicates: Bool?

            public init(apiKey: String? = nil, fields: String? = nil, page: Double? = nil, isIncludeDuplicates: Bool? = nil) {
                self.apiKey = apiKey
                self.fields = fields
                self.page = page
                self.isIncludeDuplicates = isIncludeDuplicates
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(page, forKey: "page")
                encoder.encode(isIncludeDuplicates, forKey: "include_duplicates")
                return encoder.items
            }
        }
    }
}

extension Paths {
    public static var crmCheck: CrmCheck {
        CrmCheck(path: "/crm_check")
    }

    public struct CrmCheck {
        /// Path: `/crm_check`
        public let path: String
    }
}

extension Paths.CrmCheck {
    public var car: Car {
        Car(path: path + "/car")
    }

    public struct Car {
        /// Path: `/crm_check/car`
        public let path: String
    }
}

extension Paths.CrmCheck.Car {
    public func vin(_ vin: String) -> WithVin {
        WithVin(path: "\(path)/\(vin)")
    }

    public struct WithVin {
        /// Path: `/crm_check/car/{vin}`
        public let path: String

        /// CRM check of a particular vin
        ///
        /// Check whether particular vin has had a listing after stipulated date or not
        public func get(apiKey: String? = nil, saleDate: String) -> Request<MarketcheckAPI.CRMResponse> {
            .get(path, query: makeGetQuery(apiKey, saleDate))
        }

        private func makeGetQuery(_ apiKey: String?, _ saleDate: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            encoder.encode(saleDate, forKey: "sale_date")
            return encoder.items
        }
    }
}

extension Paths {
    public static var decode: Decode {
        Decode(path: "/decode")
    }

    public struct Decode {
        /// Path: `/decode`
        public let path: String
    }
}

extension Paths.Decode {
    public var car: Car {
        Car(path: path + "/car")
    }

    public struct Car {
        /// Path: `/decode/car`
        public let path: String
    }
}

extension Paths.Decode.Car {
    public var epi: Epi {
        Epi(path: path + "/epi")
    }

    public struct Epi {
        /// Path: `/decode/car/epi`
        public let path: String
    }
}

extension Paths.Decode.Car.Epi {
    public func vin(_ vin: String) -> WithVin {
        WithVin(path: "\(path)/\(vin)")
    }

    public struct WithVin {
        /// Path: `/decode/car/epi/{vin}`
        public let path: String
    }
}

extension Paths.Decode.Car.Epi.WithVin {
    public var specs: Specs {
        Specs(path: path + "/specs")
    }

    public struct Specs {
        /// Path: `/decode/car/epi/{vin}/specs`
        public let path: String

        /// EPI VIN Decoder
        ///
        /// Get the basic information on specifications for a car identified by a valid VIN from EPI's decoder
        public func get(apiKey: String? = nil) -> Request<MarketcheckAPI.Build> {
            .get(path, query: makeGetQuery(apiKey))
        }

        private func makeGetQuery(_ apiKey: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            return encoder.items
        }
    }
}

extension Paths.Decode.Car {
    public func vin(_ vin: String) -> WithVin {
        WithVin(path: "\(path)/\(vin)")
    }

    public struct WithVin {
        /// Path: `/decode/car/{vin}`
        public let path: String
    }
}

extension Paths.Decode.Car.WithVin {
    public var specs: Specs {
        Specs(path: path + "/specs")
    }

    public struct Specs {
        /// Path: `/decode/car/{vin}/specs`
        public let path: String

        /// VIN Decoder
        ///
        /// Get the basic information on specifications for a car identified by a valid VIN
        public func get(apiKey: String? = nil) -> Request<MarketcheckAPI.Build> {
            .get(path, query: makeGetQuery(apiKey))
        }

        private func makeGetQuery(_ apiKey: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            return encoder.items
        }
    }
}

extension Paths {
    public static var specs: Specs {
        Specs(path: "/specs")
    }

    public struct Specs {
        /// Path: `/specs`
        public let path: String
    }
}

extension Paths.Specs {
    public var car: Car {
        Car(path: path + "/car")
    }

    public struct Car {
        /// Path: `/specs/car`
        public let path: String
    }
}

extension Paths.Specs.Car {
    public var autoComplete: AutoComplete {
        AutoComplete(path: path + "/auto-complete")
    }

    public struct AutoComplete {
        /// Path: `/specs/car/auto-complete`
        public let path: String

        /// API for auto-completion of inputs based on taxonomy
        ///
        /// Auto-complete the inputs of your end users, not from active set but from taxonomy (decoder database)
        public func get(parameters: GetParameters) -> Request<MarketcheckAPI.SpecsAutoCompleteResponse> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var field: Field
            public var input: String
            public var year: String?
            public var make: String?
            public var model: String?
            public var trim: String?
            public var bodyType: String?
            public var bodySubtype: String?
            public var vehicleType: String?
            public var transmission: String?
            public var drivetrain: String?
            public var fuelType: String?
            public var engine: String?
            public var engineSize: String?
            public var engineBlock: String?
            public var isIgnoreCase: Bool?

            public enum Field: String, Codable, CaseIterable {
                case make
                case model
                case trim
                case bodyType = "body_type"
                case bodySubtype = "body_subtype"
                case vehicleType = "vehicle_type"
                case transmission
                case drivetrain
                case fuelType = "fuel_type"
                case engine
                case engineSize = "engine_size"
                case engineBlock = "engine_block"
            }

            public init(apiKey: String? = nil, field: Field, input: String, year: String? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, bodyType: String? = nil, bodySubtype: String? = nil, vehicleType: String? = nil, transmission: String? = nil, drivetrain: String? = nil, fuelType: String? = nil, engine: String? = nil, engineSize: String? = nil, engineBlock: String? = nil, isIgnoreCase: Bool? = nil) {
                self.apiKey = apiKey
                self.field = field
                self.input = input
                self.year = year
                self.make = make
                self.model = model
                self.trim = trim
                self.bodyType = bodyType
                self.bodySubtype = bodySubtype
                self.vehicleType = vehicleType
                self.transmission = transmission
                self.drivetrain = drivetrain
                self.fuelType = fuelType
                self.engine = engine
                self.engineSize = engineSize
                self.engineBlock = engineBlock
                self.isIgnoreCase = isIgnoreCase
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(field, forKey: "field")
                encoder.encode(input, forKey: "input")
                encoder.encode(year, forKey: "year")
                encoder.encode(make, forKey: "make")
                encoder.encode(model, forKey: "model")
                encoder.encode(trim, forKey: "trim")
                encoder.encode(bodyType, forKey: "body_type")
                encoder.encode(bodySubtype, forKey: "body_subtype")
                encoder.encode(vehicleType, forKey: "vehicle_type")
                encoder.encode(transmission, forKey: "transmission")
                encoder.encode(drivetrain, forKey: "drivetrain")
                encoder.encode(fuelType, forKey: "fuel_type")
                encoder.encode(engine, forKey: "engine")
                encoder.encode(engineSize, forKey: "engine_size")
                encoder.encode(engineBlock, forKey: "engine_block")
                encoder.encode(isIgnoreCase, forKey: "ignore_case")
                return encoder.items
            }
        }
    }
}

extension Paths.Specs.Car {
    public var terms: Terms {
        Terms(path: path + "/terms")
    }

    public struct Terms {
        /// Path: `/specs/car/terms`
        public let path: String

        /// API for getting terms from taxonomy
        ///
        /// Facets on taxonomy
        public func get(parameters: GetParameters) -> Request<MarketcheckAPI.SpecsAutoCompleteResponse> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var field: String
            public var year: String?
            public var make: String?
            public var model: String?
            public var trim: String?
            public var bodyType: String?
            public var bodySubtype: String?
            public var vehicleType: String?
            public var transmission: String?
            public var drivetrain: String?
            public var fuelType: String?
            public var engine: String?
            public var engineSize: String?
            public var engineBlock: String?

            public init(apiKey: String? = nil, field: String, year: String? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, bodyType: String? = nil, bodySubtype: String? = nil, vehicleType: String? = nil, transmission: String? = nil, drivetrain: String? = nil, fuelType: String? = nil, engine: String? = nil, engineSize: String? = nil, engineBlock: String? = nil) {
                self.apiKey = apiKey
                self.field = field
                self.year = year
                self.make = make
                self.model = model
                self.trim = trim
                self.bodyType = bodyType
                self.bodySubtype = bodySubtype
                self.vehicleType = vehicleType
                self.transmission = transmission
                self.drivetrain = drivetrain
                self.fuelType = fuelType
                self.engine = engine
                self.engineSize = engineSize
                self.engineBlock = engineBlock
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(field, forKey: "field")
                encoder.encode(year, forKey: "year")
                encoder.encode(make, forKey: "make")
                encoder.encode(model, forKey: "model")
                encoder.encode(trim, forKey: "trim")
                encoder.encode(bodyType, forKey: "body_type")
                encoder.encode(bodySubtype, forKey: "body_subtype")
                encoder.encode(vehicleType, forKey: "vehicle_type")
                encoder.encode(transmission, forKey: "transmission")
                encoder.encode(drivetrain, forKey: "drivetrain")
                encoder.encode(fuelType, forKey: "fuel_type")
                encoder.encode(engine, forKey: "engine")
                encoder.encode(engineSize, forKey: "engine_size")
                encoder.encode(engineBlock, forKey: "engine_block")
                return encoder.items
            }
        }
    }
}

extension Paths {
    public static var dealer: Dealer {
        Dealer(path: "/dealer")
    }

    public struct Dealer {
        /// Path: `/dealer`
        public let path: String
    }
}

extension Paths.Dealer {
    public var car: Car {
        Car(path: path + "/car")
    }

    public struct Car {
        /// Path: `/dealer/car`
        public let path: String
    }
}

extension Paths.Dealer.Car {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/dealer/car/{id}`
        public let path: String

        /// Dealer by id
        ///
        /// Get a particular dealer's information by its id
        public func get(apiKey: String? = nil, isProvider: Bool? = nil) -> Request<MarketcheckAPI.Dealer> {
            .get(path, query: makeGetQuery(apiKey, isProvider))
        }

        private func makeGetQuery(_ apiKey: String?, _ isProvider: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            encoder.encode(isProvider, forKey: "provider")
            return encoder.items
        }
    }
}

extension Paths.Dealer.Car {
    public var uk: Uk {
        Uk(path: path + "/uk")
    }

    public struct Uk {
        /// Path: `/dealer/car/uk`
        public let path: String
    }
}

extension Paths.Dealer.Car.Uk {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/dealer/car/uk/{id}`
        public let path: String

        /// Dealer by id
        ///
        /// Get a particular dealer's information by its id
        public func get(apiKey: String? = nil, isProvider: Bool? = nil) -> Request<MarketcheckAPI.Dealer> {
            .get(path, query: makeGetQuery(apiKey, isProvider))
        }

        private func makeGetQuery(_ apiKey: String?, _ isProvider: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            encoder.encode(isProvider, forKey: "provider")
            return encoder.items
        }
    }
}

extension Paths.Dealer {
    public var motorcycle: Motorcycle {
        Motorcycle(path: path + "/motorcycle")
    }

    public struct Motorcycle {
        /// Path: `/dealer/motorcycle`
        public let path: String
    }
}

extension Paths.Dealer.Motorcycle {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/dealer/motorcycle/{id}`
        public let path: String

        /// Dealer by id
        ///
        /// Get a particular dealer's information by its id
        public func get(apiKey: String? = nil, isProvider: Bool? = nil) -> Request<MarketcheckAPI.Dealer> {
            .get(path, query: makeGetQuery(apiKey, isProvider))
        }

        private func makeGetQuery(_ apiKey: String?, _ isProvider: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            encoder.encode(isProvider, forKey: "provider")
            return encoder.items
        }
    }
}

extension Paths.Dealer {
    public var rv: Rv {
        Rv(path: path + "/rv")
    }

    public struct Rv {
        /// Path: `/dealer/rv`
        public let path: String
    }
}

extension Paths.Dealer.Rv {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/dealer/rv/{id}`
        public let path: String

        /// Dealer by id
        ///
        /// Get a particular dealer's information by its id
        public func get(apiKey: String? = nil, isProvider: Bool? = nil) -> Request<MarketcheckAPI.Dealer> {
            .get(path, query: makeGetQuery(apiKey, isProvider))
        }

        private func makeGetQuery(_ apiKey: String?, _ isProvider: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            encoder.encode(isProvider, forKey: "provider")
            return encoder.items
        }
    }
}

extension Paths.Dealer {
    public var heavyEquipment: HeavyEquipment {
        HeavyEquipment(path: path + "/heavy-equipment")
    }

    public struct HeavyEquipment {
        /// Path: `/dealer/heavy-equipment`
        public let path: String
    }
}

extension Paths.Dealer.HeavyEquipment {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/dealer/heavy-equipment/{id}`
        public let path: String

        /// Dealer by id
        ///
        /// Get a particular dealer's information by its id
        public func get(apiKey: String? = nil, isProvider: Bool? = nil) -> Request<MarketcheckAPI.Dealer> {
            .get(path, query: makeGetQuery(apiKey, isProvider))
        }

        private func makeGetQuery(_ apiKey: String?, _ isProvider: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            encoder.encode(isProvider, forKey: "provider")
            return encoder.items
        }
    }
}

extension Paths {
    public static var dealers: Dealers {
        Dealers(path: "/dealers")
    }

    public struct Dealers {
        /// Path: `/dealers`
        public let path: String
    }
}

extension Paths.Dealers {
    public var car: Car {
        Car(path: path + "/car")
    }

    public struct Car {
        /// Path: `/dealers/car`
        public let path: String

        /// Find car dealers around
        ///
        /// The dealers API returns a list of dealers around a given point and radius.
        public func get(parameters: GetParameters? = nil) -> Request<MarketcheckAPI.DealersResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var latitude: Double?
            public var longitude: Double?
            public var radius: Int?
            public var rows: Int?
            public var start: Int?
            public var country: Country?
            public var dealerType: DealerType?
            public var city: String?
            public var state: String?
            public var listingCountRange: String?
            public var inventoryURL: String?
            public var zip: String?
            public var sortBy: String?
            public var sortOrder: SortOrder?
            public var isProvider: Bool?
            public var facets: String?
            public var rangeFacets: String?

            public enum Country: String, Codable, CaseIterable {
                case us = "US"
                case ca = "CA"
                case us2 = "us"
                case ca2 = "ca"
                case uk
                case england
                case scotland
                case northanIreland = "northan ireland"
                case wales
            }

            public enum DealerType: String, Codable, CaseIterable {
                case franchise
                case independent
            }

            public enum SortOrder: String, Codable, CaseIterable {
                case asc
                case desc
                case asc2 = "ASC"
                case desc2 = "DESC"
            }

            public init(apiKey: String? = nil, latitude: Double? = nil, longitude: Double? = nil, radius: Int? = nil, rows: Int? = nil, start: Int? = nil, country: Country? = nil, dealerType: DealerType? = nil, city: String? = nil, state: String? = nil, listingCountRange: String? = nil, inventoryURL: String? = nil, zip: String? = nil, sortBy: String? = nil, sortOrder: SortOrder? = nil, isProvider: Bool? = nil, facets: String? = nil, rangeFacets: String? = nil) {
                self.apiKey = apiKey
                self.latitude = latitude
                self.longitude = longitude
                self.radius = radius
                self.rows = rows
                self.start = start
                self.country = country
                self.dealerType = dealerType
                self.city = city
                self.state = state
                self.listingCountRange = listingCountRange
                self.inventoryURL = inventoryURL
                self.zip = zip
                self.sortBy = sortBy
                self.sortOrder = sortOrder
                self.isProvider = isProvider
                self.facets = facets
                self.rangeFacets = rangeFacets
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(latitude, forKey: "latitude")
                encoder.encode(longitude, forKey: "longitude")
                encoder.encode(radius, forKey: "radius")
                encoder.encode(rows, forKey: "rows")
                encoder.encode(start, forKey: "start")
                encoder.encode(country, forKey: "country")
                encoder.encode(dealerType, forKey: "dealer_type")
                encoder.encode(city, forKey: "city")
                encoder.encode(state, forKey: "state")
                encoder.encode(listingCountRange, forKey: "listing_count_range")
                encoder.encode(inventoryURL, forKey: "inventory_url")
                encoder.encode(zip, forKey: "zip")
                encoder.encode(sortBy, forKey: "sort_by")
                encoder.encode(sortOrder, forKey: "sort_order")
                encoder.encode(isProvider, forKey: "provider")
                encoder.encode(facets, forKey: "facets")
                encoder.encode(rangeFacets, forKey: "range_facets")
                return encoder.items
            }
        }
    }
}

extension Paths.Dealers.Car {
    public var uk: Uk {
        Uk(path: path + "/uk")
    }

    public struct Uk {
        /// Path: `/dealers/car/uk`
        public let path: String

        /// Find car dealers around
        ///
        /// The dealers API returns a list of dealers around a given point and radius.
        public func get(parameters: GetParameters? = nil) -> Request<MarketcheckAPI.DealersResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var latitude: Double?
            public var longitude: Double?
            public var radius: Int?
            public var rows: Int?
            public var start: Int?
            public var country: Country?
            public var dealerType: DealerType?
            public var city: String?
            public var county: String?
            public var listingCountRange: String?
            public var inventoryURL: String?
            public var postalCode: String?
            public var sortBy: String?
            public var sortOrder: SortOrder?
            public var isProvider: Bool?
            public var facets: String?
            public var rangeFacets: String?

            public enum Country: String, Codable, CaseIterable {
                case us = "US"
                case ca = "CA"
                case us2 = "us"
                case ca2 = "ca"
                case uk
                case england
                case scotland
                case northanIreland = "northan ireland"
                case wales
            }

            public enum DealerType: String, Codable, CaseIterable {
                case franchise
                case independent
            }

            public enum SortOrder: String, Codable, CaseIterable {
                case asc
                case desc
                case asc2 = "ASC"
                case desc2 = "DESC"
            }

            public init(apiKey: String? = nil, latitude: Double? = nil, longitude: Double? = nil, radius: Int? = nil, rows: Int? = nil, start: Int? = nil, country: Country? = nil, dealerType: DealerType? = nil, city: String? = nil, county: String? = nil, listingCountRange: String? = nil, inventoryURL: String? = nil, postalCode: String? = nil, sortBy: String? = nil, sortOrder: SortOrder? = nil, isProvider: Bool? = nil, facets: String? = nil, rangeFacets: String? = nil) {
                self.apiKey = apiKey
                self.latitude = latitude
                self.longitude = longitude
                self.radius = radius
                self.rows = rows
                self.start = start
                self.country = country
                self.dealerType = dealerType
                self.city = city
                self.county = county
                self.listingCountRange = listingCountRange
                self.inventoryURL = inventoryURL
                self.postalCode = postalCode
                self.sortBy = sortBy
                self.sortOrder = sortOrder
                self.isProvider = isProvider
                self.facets = facets
                self.rangeFacets = rangeFacets
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(latitude, forKey: "latitude")
                encoder.encode(longitude, forKey: "longitude")
                encoder.encode(radius, forKey: "radius")
                encoder.encode(rows, forKey: "rows")
                encoder.encode(start, forKey: "start")
                encoder.encode(country, forKey: "country")
                encoder.encode(dealerType, forKey: "dealer_type")
                encoder.encode(city, forKey: "city")
                encoder.encode(county, forKey: "county")
                encoder.encode(listingCountRange, forKey: "listing_count_range")
                encoder.encode(inventoryURL, forKey: "inventory_url")
                encoder.encode(postalCode, forKey: "postal_code")
                encoder.encode(sortBy, forKey: "sort_by")
                encoder.encode(sortOrder, forKey: "sort_order")
                encoder.encode(isProvider, forKey: "provider")
                encoder.encode(facets, forKey: "facets")
                encoder.encode(rangeFacets, forKey: "range_facets")
                return encoder.items
            }
        }
    }
}

extension Paths.Dealers {
    public var motorcycle: Motorcycle {
        Motorcycle(path: path + "/motorcycle")
    }

    public struct Motorcycle {
        /// Path: `/dealers/motorcycle`
        public let path: String

        /// Find car dealers around
        ///
        /// The dealers API returns a list of dealers around a given point and radius.
        public func get(parameters: GetParameters? = nil) -> Request<MarketcheckAPI.DealersResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var latitude: Double?
            public var longitude: Double?
            public var radius: Int?
            public var rows: Int?
            public var start: Int?
            public var country: Country?
            public var dealerType: DealerType?
            public var city: String?
            public var state: String?
            public var listingCountRange: String?
            public var inventoryURL: String?
            public var zip: String?
            public var sortBy: String?
            public var sortOrder: SortOrder?
            public var isProvider: Bool?
            public var facets: String?
            public var rangeFacets: String?

            public enum Country: String, Codable, CaseIterable {
                case us = "US"
                case ca = "CA"
                case us2 = "us"
                case ca2 = "ca"
                case uk
                case england
                case scotland
                case northanIreland = "northan ireland"
                case wales
            }

            public enum DealerType: String, Codable, CaseIterable {
                case franchise
                case independent
            }

            public enum SortOrder: String, Codable, CaseIterable {
                case asc
                case desc
                case asc2 = "ASC"
                case desc2 = "DESC"
            }

            public init(apiKey: String? = nil, latitude: Double? = nil, longitude: Double? = nil, radius: Int? = nil, rows: Int? = nil, start: Int? = nil, country: Country? = nil, dealerType: DealerType? = nil, city: String? = nil, state: String? = nil, listingCountRange: String? = nil, inventoryURL: String? = nil, zip: String? = nil, sortBy: String? = nil, sortOrder: SortOrder? = nil, isProvider: Bool? = nil, facets: String? = nil, rangeFacets: String? = nil) {
                self.apiKey = apiKey
                self.latitude = latitude
                self.longitude = longitude
                self.radius = radius
                self.rows = rows
                self.start = start
                self.country = country
                self.dealerType = dealerType
                self.city = city
                self.state = state
                self.listingCountRange = listingCountRange
                self.inventoryURL = inventoryURL
                self.zip = zip
                self.sortBy = sortBy
                self.sortOrder = sortOrder
                self.isProvider = isProvider
                self.facets = facets
                self.rangeFacets = rangeFacets
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(latitude, forKey: "latitude")
                encoder.encode(longitude, forKey: "longitude")
                encoder.encode(radius, forKey: "radius")
                encoder.encode(rows, forKey: "rows")
                encoder.encode(start, forKey: "start")
                encoder.encode(country, forKey: "country")
                encoder.encode(dealerType, forKey: "dealer_type")
                encoder.encode(city, forKey: "city")
                encoder.encode(state, forKey: "state")
                encoder.encode(listingCountRange, forKey: "listing_count_range")
                encoder.encode(inventoryURL, forKey: "inventory_url")
                encoder.encode(zip, forKey: "zip")
                encoder.encode(sortBy, forKey: "sort_by")
                encoder.encode(sortOrder, forKey: "sort_order")
                encoder.encode(isProvider, forKey: "provider")
                encoder.encode(facets, forKey: "facets")
                encoder.encode(rangeFacets, forKey: "range_facets")
                return encoder.items
            }
        }
    }
}

extension Paths.Dealers {
    public var rv: Rv {
        Rv(path: path + "/rv")
    }

    public struct Rv {
        /// Path: `/dealers/rv`
        public let path: String

        /// Find car dealers around
        ///
        /// The dealers API returns a list of dealers around a given point and radius.
        public func get(parameters: GetParameters? = nil) -> Request<MarketcheckAPI.DealersResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var latitude: Double?
            public var longitude: Double?
            public var radius: Int?
            public var rows: Int?
            public var start: Int?
            public var country: Country?
            public var dealerType: DealerType?
            public var city: String?
            public var state: String?
            public var listingCountRange: String?
            public var inventoryURL: String?
            public var zip: String?
            public var sortBy: String?
            public var sortOrder: SortOrder?
            public var isProvider: Bool?
            public var facets: String?
            public var rangeFacets: String?

            public enum Country: String, Codable, CaseIterable {
                case us = "US"
                case ca = "CA"
                case us2 = "us"
                case ca2 = "ca"
                case uk
                case england
                case scotland
                case northanIreland = "northan ireland"
                case wales
            }

            public enum DealerType: String, Codable, CaseIterable {
                case franchise
                case independent
            }

            public enum SortOrder: String, Codable, CaseIterable {
                case asc
                case desc
                case asc2 = "ASC"
                case desc2 = "DESC"
            }

            public init(apiKey: String? = nil, latitude: Double? = nil, longitude: Double? = nil, radius: Int? = nil, rows: Int? = nil, start: Int? = nil, country: Country? = nil, dealerType: DealerType? = nil, city: String? = nil, state: String? = nil, listingCountRange: String? = nil, inventoryURL: String? = nil, zip: String? = nil, sortBy: String? = nil, sortOrder: SortOrder? = nil, isProvider: Bool? = nil, facets: String? = nil, rangeFacets: String? = nil) {
                self.apiKey = apiKey
                self.latitude = latitude
                self.longitude = longitude
                self.radius = radius
                self.rows = rows
                self.start = start
                self.country = country
                self.dealerType = dealerType
                self.city = city
                self.state = state
                self.listingCountRange = listingCountRange
                self.inventoryURL = inventoryURL
                self.zip = zip
                self.sortBy = sortBy
                self.sortOrder = sortOrder
                self.isProvider = isProvider
                self.facets = facets
                self.rangeFacets = rangeFacets
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(latitude, forKey: "latitude")
                encoder.encode(longitude, forKey: "longitude")
                encoder.encode(radius, forKey: "radius")
                encoder.encode(rows, forKey: "rows")
                encoder.encode(start, forKey: "start")
                encoder.encode(country, forKey: "country")
                encoder.encode(dealerType, forKey: "dealer_type")
                encoder.encode(city, forKey: "city")
                encoder.encode(state, forKey: "state")
                encoder.encode(listingCountRange, forKey: "listing_count_range")
                encoder.encode(inventoryURL, forKey: "inventory_url")
                encoder.encode(zip, forKey: "zip")
                encoder.encode(sortBy, forKey: "sort_by")
                encoder.encode(sortOrder, forKey: "sort_order")
                encoder.encode(isProvider, forKey: "provider")
                encoder.encode(facets, forKey: "facets")
                encoder.encode(rangeFacets, forKey: "range_facets")
                return encoder.items
            }
        }
    }
}

extension Paths.Dealers {
    public var heavyEquipment: HeavyEquipment {
        HeavyEquipment(path: path + "/heavy-equipment")
    }

    public struct HeavyEquipment {
        /// Path: `/dealers/heavy-equipment`
        public let path: String

        /// Find car dealers around
        ///
        /// The dealers API returns a list of dealers around a given point and radius.
        public func get(parameters: GetParameters? = nil) -> Request<MarketcheckAPI.DealersResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var latitude: Double?
            public var longitude: Double?
            public var radius: Int?
            public var rows: Int?
            public var start: Int?
            public var country: Country?
            public var dealerType: DealerType?
            public var city: String?
            public var state: String?
            public var listingCountRange: String?
            public var inventoryURL: String?
            public var zip: String?
            public var sortBy: String?
            public var sortOrder: SortOrder?
            public var isProvider: Bool?
            public var facets: String?
            public var rangeFacets: String?

            public enum Country: String, Codable, CaseIterable {
                case us = "US"
                case ca = "CA"
                case us2 = "us"
                case ca2 = "ca"
                case uk
                case england
                case scotland
                case northanIreland = "northan ireland"
                case wales
            }

            public enum DealerType: String, Codable, CaseIterable {
                case franchise
                case independent
            }

            public enum SortOrder: String, Codable, CaseIterable {
                case asc
                case desc
                case asc2 = "ASC"
                case desc2 = "DESC"
            }

            public init(apiKey: String? = nil, latitude: Double? = nil, longitude: Double? = nil, radius: Int? = nil, rows: Int? = nil, start: Int? = nil, country: Country? = nil, dealerType: DealerType? = nil, city: String? = nil, state: String? = nil, listingCountRange: String? = nil, inventoryURL: String? = nil, zip: String? = nil, sortBy: String? = nil, sortOrder: SortOrder? = nil, isProvider: Bool? = nil, facets: String? = nil, rangeFacets: String? = nil) {
                self.apiKey = apiKey
                self.latitude = latitude
                self.longitude = longitude
                self.radius = radius
                self.rows = rows
                self.start = start
                self.country = country
                self.dealerType = dealerType
                self.city = city
                self.state = state
                self.listingCountRange = listingCountRange
                self.inventoryURL = inventoryURL
                self.zip = zip
                self.sortBy = sortBy
                self.sortOrder = sortOrder
                self.isProvider = isProvider
                self.facets = facets
                self.rangeFacets = rangeFacets
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(latitude, forKey: "latitude")
                encoder.encode(longitude, forKey: "longitude")
                encoder.encode(radius, forKey: "radius")
                encoder.encode(rows, forKey: "rows")
                encoder.encode(start, forKey: "start")
                encoder.encode(country, forKey: "country")
                encoder.encode(dealerType, forKey: "dealer_type")
                encoder.encode(city, forKey: "city")
                encoder.encode(state, forKey: "state")
                encoder.encode(listingCountRange, forKey: "listing_count_range")
                encoder.encode(inventoryURL, forKey: "inventory_url")
                encoder.encode(zip, forKey: "zip")
                encoder.encode(sortBy, forKey: "sort_by")
                encoder.encode(sortOrder, forKey: "sort_order")
                encoder.encode(isProvider, forKey: "provider")
                encoder.encode(facets, forKey: "facets")
                encoder.encode(rangeFacets, forKey: "range_facets")
                return encoder.items
            }
        }
    }
}

extension Paths {
    public static var mds: Mds {
        Mds(path: "/mds")
    }

    public struct Mds {
        /// Path: `/mds`
        public let path: String
    }
}

extension Paths.Mds {
    public var car: Car {
        Car(path: path + "/car")
    }

    public struct Car {
        /// Path: `/mds/car`
        public let path: String

        /// Market Days Supply
        ///
        /// Get the basic information on specifications for a car identified by a valid VIN
        public func get(parameters: GetParameters? = nil) -> Request<MarketcheckAPI.Mds> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var vin: String?
            public var isExact: Bool?
            public var latitude: Double?
            public var longitude: Double?
            public var radius: Int?
            public var zip: String?
            public var msaCode: String?
            public var isDebug: Bool?
            public var isIncludeSold: Bool?
            public var country: Country?
            public var state: String?
            public var city: String?
            public var ymmt: String?
            public var carType: CarType?
            public var leaseTerm: String?
            public var leaseDownPayment: String?
            public var leaseEmp: String?
            public var financeLoanTerm: String?
            public var financeLoanApr: String?
            public var financeEmp: String?
            public var financeDownPayment: String?
            public var financeDownPaymentPer: String?
            public var carfax1Owner: Carfax1Owner?
            public var carfaxCleanTitle: CarfaxCleanTitle?
            public var year: String?
            public var make: String?
            public var model: String?
            public var trim: String?
            public var dealerID: String?
            public var source: String?
            public var bodyType: String?
            public var bodySubtype: String?
            public var vehicleType: String?
            public var cylinders: String?
            public var transmission: String?
            public var doors: String?
            public var drivetrain: String?
            public var exteriorColor: String?
            public var interiorColor: String?
            public var baseExteriorColor: String?
            public var baseInteriorColor: String?
            public var engine: String?
            public var engineSize: String?
            public var engineAspiration: String?
            public var engineBlock: String?
            public var highwayMpgRange: String?
            public var cityMpgRange: String?
            public var milesRange: String?
            public var priceRange: String?
            public var msrpRange: String?
            public var domRange: String?
            public var dealershipGroupName: String?
            public var domActiveRange: String?
            public var dom180Range: String?
            public var fuelType: String?
            public var dealerType: DealerType?

            public enum Country: String, Codable, CaseIterable {
                case us = "US"
                case ca = "CA"
                case us2 = "us"
                case ca2 = "ca"
            }

            public enum CarType: String, Codable, CaseIterable {
                case new
                case used
                case certified
            }

            public enum Carfax1Owner: String, Codable, CaseIterable {
                case `true`
                case `false`
            }

            public enum CarfaxCleanTitle: String, Codable, CaseIterable {
                case `true`
                case `false`
            }

            public enum DealerType: String, Codable, CaseIterable {
                case franchise
                case independent
            }

            public init(apiKey: String? = nil, vin: String? = nil, isExact: Bool? = nil, latitude: Double? = nil, longitude: Double? = nil, radius: Int? = nil, zip: String? = nil, msaCode: String? = nil, isDebug: Bool? = nil, isIncludeSold: Bool? = nil, country: Country? = nil, state: String? = nil, city: String? = nil, ymmt: String? = nil, carType: CarType? = nil, leaseTerm: String? = nil, leaseDownPayment: String? = nil, leaseEmp: String? = nil, financeLoanTerm: String? = nil, financeLoanApr: String? = nil, financeEmp: String? = nil, financeDownPayment: String? = nil, financeDownPaymentPer: String? = nil, carfax1Owner: Carfax1Owner? = nil, carfaxCleanTitle: CarfaxCleanTitle? = nil, year: String? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, dealerID: String? = nil, source: String? = nil, bodyType: String? = nil, bodySubtype: String? = nil, vehicleType: String? = nil, cylinders: String? = nil, transmission: String? = nil, doors: String? = nil, drivetrain: String? = nil, exteriorColor: String? = nil, interiorColor: String? = nil, baseExteriorColor: String? = nil, baseInteriorColor: String? = nil, engine: String? = nil, engineSize: String? = nil, engineAspiration: String? = nil, engineBlock: String? = nil, highwayMpgRange: String? = nil, cityMpgRange: String? = nil, milesRange: String? = nil, priceRange: String? = nil, msrpRange: String? = nil, domRange: String? = nil, dealershipGroupName: String? = nil, domActiveRange: String? = nil, dom180Range: String? = nil, fuelType: String? = nil, dealerType: DealerType? = nil) {
                self.apiKey = apiKey
                self.vin = vin
                self.isExact = isExact
                self.latitude = latitude
                self.longitude = longitude
                self.radius = radius
                self.zip = zip
                self.msaCode = msaCode
                self.isDebug = isDebug
                self.isIncludeSold = isIncludeSold
                self.country = country
                self.state = state
                self.city = city
                self.ymmt = ymmt
                self.carType = carType
                self.leaseTerm = leaseTerm
                self.leaseDownPayment = leaseDownPayment
                self.leaseEmp = leaseEmp
                self.financeLoanTerm = financeLoanTerm
                self.financeLoanApr = financeLoanApr
                self.financeEmp = financeEmp
                self.financeDownPayment = financeDownPayment
                self.financeDownPaymentPer = financeDownPaymentPer
                self.carfax1Owner = carfax1Owner
                self.carfaxCleanTitle = carfaxCleanTitle
                self.year = year
                self.make = make
                self.model = model
                self.trim = trim
                self.dealerID = dealerID
                self.source = source
                self.bodyType = bodyType
                self.bodySubtype = bodySubtype
                self.vehicleType = vehicleType
                self.cylinders = cylinders
                self.transmission = transmission
                self.doors = doors
                self.drivetrain = drivetrain
                self.exteriorColor = exteriorColor
                self.interiorColor = interiorColor
                self.baseExteriorColor = baseExteriorColor
                self.baseInteriorColor = baseInteriorColor
                self.engine = engine
                self.engineSize = engineSize
                self.engineAspiration = engineAspiration
                self.engineBlock = engineBlock
                self.highwayMpgRange = highwayMpgRange
                self.cityMpgRange = cityMpgRange
                self.milesRange = milesRange
                self.priceRange = priceRange
                self.msrpRange = msrpRange
                self.domRange = domRange
                self.dealershipGroupName = dealershipGroupName
                self.domActiveRange = domActiveRange
                self.dom180Range = dom180Range
                self.fuelType = fuelType
                self.dealerType = dealerType
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(vin, forKey: "vin")
                encoder.encode(isExact, forKey: "exact")
                encoder.encode(latitude, forKey: "latitude")
                encoder.encode(longitude, forKey: "longitude")
                encoder.encode(radius, forKey: "radius")
                encoder.encode(zip, forKey: "zip")
                encoder.encode(msaCode, forKey: "msa_code")
                encoder.encode(isDebug, forKey: "debug")
                encoder.encode(isIncludeSold, forKey: "include_sold")
                encoder.encode(country, forKey: "country")
                encoder.encode(state, forKey: "state")
                encoder.encode(city, forKey: "city")
                encoder.encode(ymmt, forKey: "ymmt")
                encoder.encode(carType, forKey: "car_type")
                encoder.encode(leaseTerm, forKey: "lease_term")
                encoder.encode(leaseDownPayment, forKey: "lease_down_payment")
                encoder.encode(leaseEmp, forKey: "lease_emp")
                encoder.encode(financeLoanTerm, forKey: "finance_loan_term")
                encoder.encode(financeLoanApr, forKey: "finance_loan_apr")
                encoder.encode(financeEmp, forKey: "finance_emp")
                encoder.encode(financeDownPayment, forKey: "finance_down_payment")
                encoder.encode(financeDownPaymentPer, forKey: "finance_down_payment_per")
                encoder.encode(carfax1Owner, forKey: "carfax_1_owner")
                encoder.encode(carfaxCleanTitle, forKey: "carfax_clean_title")
                encoder.encode(year, forKey: "year")
                encoder.encode(make, forKey: "make")
                encoder.encode(model, forKey: "model")
                encoder.encode(trim, forKey: "trim")
                encoder.encode(dealerID, forKey: "dealer_id")
                encoder.encode(source, forKey: "source")
                encoder.encode(bodyType, forKey: "body_type")
                encoder.encode(bodySubtype, forKey: "body_subtype")
                encoder.encode(vehicleType, forKey: "vehicle_type")
                encoder.encode(cylinders, forKey: "cylinders")
                encoder.encode(transmission, forKey: "transmission")
                encoder.encode(doors, forKey: "doors")
                encoder.encode(drivetrain, forKey: "drivetrain")
                encoder.encode(exteriorColor, forKey: "exterior_color")
                encoder.encode(interiorColor, forKey: "interior_color")
                encoder.encode(baseExteriorColor, forKey: "base_exterior_color")
                encoder.encode(baseInteriorColor, forKey: "base_interior_color")
                encoder.encode(engine, forKey: "engine")
                encoder.encode(engineSize, forKey: "engine_size")
                encoder.encode(engineAspiration, forKey: "engine_aspiration")
                encoder.encode(engineBlock, forKey: "engine_block")
                encoder.encode(highwayMpgRange, forKey: "highway_mpg_range")
                encoder.encode(cityMpgRange, forKey: "city_mpg_range")
                encoder.encode(milesRange, forKey: "miles_range")
                encoder.encode(priceRange, forKey: "price_range")
                encoder.encode(msrpRange, forKey: "msrp_range")
                encoder.encode(domRange, forKey: "dom_range")
                encoder.encode(dealershipGroupName, forKey: "dealership_group_name")
                encoder.encode(domActiveRange, forKey: "dom_active_range")
                encoder.encode(dom180Range, forKey: "dom_180_range")
                encoder.encode(fuelType, forKey: "fuel_type")
                encoder.encode(dealerType, forKey: "dealer_type")
                return encoder.items
            }
        }
    }
}

extension Paths {
    public static var sales: Sales {
        Sales(path: "/sales")
    }

    public struct Sales {
        /// Path: `/sales`
        public let path: String
    }
}

extension Paths.Sales {
    public var car: Car {
        Car(path: path + "/car")
    }

    public struct Car {
        /// Path: `/sales/car`
        public let path: String

        /// Get sales count by make, model, year, trim or taxonomy vin
        ///
        /// Get a sales count for city, state or national level by make, model, year, trim or taxonomy vin
        public func get(parameters: GetParameters? = nil) -> Request<MarketcheckAPI.Sales> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var carType: CarType?
            public var make: String?
            public var mm: String?
            public var ymm: String?
            public var ymmt: String?
            public var taxonomyVin: String?
            public var state: String?
            public var cityState: String?
            public var vin: String?
            public var country: Country?

            public enum CarType: String, Codable, CaseIterable {
                case new
                case used
            }

            public enum Country: String, Codable, CaseIterable {
                case us
                case ca
                case us2 = "US"
                case ca2 = "CA"
            }

            public init(apiKey: String? = nil, carType: CarType? = nil, make: String? = nil, mm: String? = nil, ymm: String? = nil, ymmt: String? = nil, taxonomyVin: String? = nil, state: String? = nil, cityState: String? = nil, vin: String? = nil, country: Country? = nil) {
                self.apiKey = apiKey
                self.carType = carType
                self.make = make
                self.mm = mm
                self.ymm = ymm
                self.ymmt = ymmt
                self.taxonomyVin = taxonomyVin
                self.state = state
                self.cityState = cityState
                self.vin = vin
                self.country = country
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(carType, forKey: "car_type")
                encoder.encode(make, forKey: "make")
                encoder.encode(mm, forKey: "mm")
                encoder.encode(ymm, forKey: "ymm")
                encoder.encode(ymmt, forKey: "ymmt")
                encoder.encode(taxonomyVin, forKey: "taxonomy_vin")
                encoder.encode(state, forKey: "state")
                encoder.encode(cityState, forKey: "city_state")
                encoder.encode(vin, forKey: "vin")
                encoder.encode(country, forKey: "country")
                return encoder.items
            }
        }
    }
}

extension Paths {
    public static var popular: Popular {
        Popular(path: "/popular")
    }

    public struct Popular {
        /// Path: `/popular`
        public let path: String
    }
}

extension Paths.Popular {
    public var cars: Cars {
        Cars(path: path + "/cars")
    }

    public struct Cars {
        /// Path: `/popular/cars`
        public let path: String

        /// Get make model wise top 50 popular cars on national, state, city level
        public func get(parameters: GetParameters) -> Request<MarketcheckAPI.PopularCars> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var state: String?
            public var cityState: String?
            public var carType: CarType
            public var country: Country?

            public enum CarType: String, Codable, CaseIterable {
                case new
                case used
            }

            public enum Country: String, Codable, CaseIterable {
                case us
                case ca
                case us2 = "US"
                case ca2 = "CA"
            }

            public init(apiKey: String? = nil, state: String? = nil, cityState: String? = nil, carType: CarType, country: Country? = nil) {
                self.apiKey = apiKey
                self.state = state
                self.cityState = cityState
                self.carType = carType
                self.country = country
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(state, forKey: "state")
                encoder.encode(cityState, forKey: "city_state")
                encoder.encode(carType, forKey: "car_type")
                encoder.encode(country, forKey: "country")
                return encoder.items
            }
        }
    }
}

extension Paths {
    public static var stats: Stats {
        Stats(path: "/stats")
    }

    public struct Stats {
        /// Path: `/stats`
        public let path: String
    }
}

extension Paths.Stats {
    public var car: Car {
        Car(path: path + "/car")
    }

    public struct Car {
        /// Path: `/stats/car`
        public let path: String

        /// Price, Miles and Days on Market stats
        ///
        /// National, state and city level stats for price, miles and dom
        public func get(parameters: GetParameters? = nil) -> Request<MarketcheckAPI.DailyStats> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var apiKey: String?
            public var country: Country?
            public var carType: CarType?
            public var ymm: String?
            public var ymmt: String?
            public var taxonomyVin: String?
            public var vin: String?
            public var state: String?
            public var cityState: String?

            public enum Country: String, Codable, CaseIterable {
                case us
                case ca
            }

            public enum CarType: String, Codable, CaseIterable {
                case new
                case used
            }

            public init(apiKey: String? = nil, country: Country? = nil, carType: CarType? = nil, ymm: String? = nil, ymmt: String? = nil, taxonomyVin: String? = nil, vin: String? = nil, state: String? = nil, cityState: String? = nil) {
                self.apiKey = apiKey
                self.country = country
                self.carType = carType
                self.ymm = ymm
                self.ymmt = ymmt
                self.taxonomyVin = taxonomyVin
                self.vin = vin
                self.state = state
                self.cityState = cityState
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(country, forKey: "country")
                encoder.encode(carType, forKey: "car_type")
                encoder.encode(ymm, forKey: "ymm")
                encoder.encode(ymmt, forKey: "ymmt")
                encoder.encode(taxonomyVin, forKey: "taxonomy_vin")
                encoder.encode(vin, forKey: "vin")
                encoder.encode(state, forKey: "state")
                encoder.encode(cityState, forKey: "city_state")
                return encoder.items
            }
        }
    }
}

extension Paths.Search.Car.Active {
    public var rank: Rank {
        Rank(path: path + "/rank")
    }

    public struct Rank {
        /// Path: `/search/car/active/rank`
        public let path: String

        /// Compute relative rank for car listings.
        ///
        /// Computer rank for car listings based on inputs provided.Weights for ranking parameters can also be provided.
        public func post(parameters: PostParameters? = nil, _ body: Data) -> Request<MarketcheckAPI.CarRankResponse> {
            .post(path, query: parameters?.asQuery, body: body)
        }

        public struct PostParameters {
            public var apiKey: String?
            public var isAppendAPIKey: Bool?
            public var latitude: Double?
            public var longitude: Double?
            public var radius: Int?
            public var zip: String?
            public var isIncludeLease: Bool?
            public var isIncludeFinance: Bool?
            public var leaseTerm: String?
            public var leaseDownPayment: String?
            public var leaseEmp: String?
            public var financeLoanTerm: String?
            public var financeLoanApr: String?
            public var financeEmp: String?
            public var financeDownPayment: String?
            public var financeDownPaymentPer: String?
            public var carType: CarType?
            public var carfax1Owner: Carfax1Owner?
            public var carfaxCleanTitle: CarfaxCleanTitle?
            public var year: String?
            public var make: String?
            public var model: String?
            public var trim: String?
            public var vin: String?
            public var bodyType: String?
            public var bodySubtype: String?
            public var vehicleType: String?
            public var vins: String?
            public var taxonomyVins: String?
            public var ymmt: String?
            public var match: String?
            public var cylinders: String?
            public var transmission: String?
            public var doors: String?
            public var drivetrain: String?
            public var exteriorColor: String?
            public var interiorColor: String?
            public var baseExteriorColor: String?
            public var baseInteriorColor: String?
            public var engine: String?
            public var engineSize: String?
            public var engineAspiration: String?
            public var engineBlock: String?
            public var highwayMpgRange: String?
            public var cityMpgRange: String?
            public var milesRange: String?
            public var priceRange: String?
            public var msrpRange: String?
            public var domRange: String?
            public var sortBy: String?
            public var sortOrder: SortOrder?
            public var rows: Int?
            public var start: Int?
            public var isIncludeNonVinListings: Bool?
            public var msaCode: String?
            public var facets: String?
            public var rangeFacets: String?
            public var facetSort: FacetSort?
            public var stats: String?
            public var country: Country?
            public var isPlot: Bool?
            public var isNodedup: Bool?
            public var isDedup: Bool?
            public var isOwned: Bool?
            public var state: String?
            public var city: String?
            public var trimO: String?
            public var trimR: String?
            public var domActiveRange: String?
            public var dom180Range: String?
            public var excludeCertified: Bool?
            public var fuelType: String?
            public var dealerType: DealerType?
            public var isPhotoLinks: Bool?
            public var stockNo: String?
            public var lastSeenRange: String?
            public var firstSeenRange: String?
            public var firstSeenAtSourceRange: String?
            public var firstSeenAtMcRange: String?
            public var lastSeenDays: String?
            public var firstSeenDays: String?
            public var firstSeenAtSourceDays: String?
            public var firstSeenAtMcDays: String?
            public var inventoryType: InventoryType?
            public var page: Double?

            public enum CarType: String, Codable, CaseIterable {
                case new
                case used
                case certified
            }

            public enum Carfax1Owner: String, Codable, CaseIterable {
                case `true`
                case `false`
            }

            public enum CarfaxCleanTitle: String, Codable, CaseIterable {
                case `true`
                case `false`
            }

            public enum SortOrder: String, Codable, CaseIterable {
                case asc
                case desc
                case asc2 = "ASC"
                case desc2 = "DESC"
            }

            public enum FacetSort: String, Codable, CaseIterable {
                case count
                case index
            }

            public enum Country: String, Codable, CaseIterable {
                case us = "US"
                case ca = "CA"
                case us2 = "us"
                case ca2 = "ca"
                case all
                case all2 = "ALL"
            }

            public enum DealerType: String, Codable, CaseIterable {
                case franchise
                case independent
            }

            public enum InventoryType: String, Codable, CaseIterable {
                case used
                case new
            }

            public init(apiKey: String? = nil, isAppendAPIKey: Bool? = nil, latitude: Double? = nil, longitude: Double? = nil, radius: Int? = nil, zip: String? = nil, isIncludeLease: Bool? = nil, isIncludeFinance: Bool? = nil, leaseTerm: String? = nil, leaseDownPayment: String? = nil, leaseEmp: String? = nil, financeLoanTerm: String? = nil, financeLoanApr: String? = nil, financeEmp: String? = nil, financeDownPayment: String? = nil, financeDownPaymentPer: String? = nil, carType: CarType? = nil, carfax1Owner: Carfax1Owner? = nil, carfaxCleanTitle: CarfaxCleanTitle? = nil, year: String? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, vin: String? = nil, bodyType: String? = nil, bodySubtype: String? = nil, vehicleType: String? = nil, vins: String? = nil, taxonomyVins: String? = nil, ymmt: String? = nil, match: String? = nil, cylinders: String? = nil, transmission: String? = nil, doors: String? = nil, drivetrain: String? = nil, exteriorColor: String? = nil, interiorColor: String? = nil, baseExteriorColor: String? = nil, baseInteriorColor: String? = nil, engine: String? = nil, engineSize: String? = nil, engineAspiration: String? = nil, engineBlock: String? = nil, highwayMpgRange: String? = nil, cityMpgRange: String? = nil, milesRange: String? = nil, priceRange: String? = nil, msrpRange: String? = nil, domRange: String? = nil, sortBy: String? = nil, sortOrder: SortOrder? = nil, rows: Int? = nil, start: Int? = nil, isIncludeNonVinListings: Bool? = nil, msaCode: String? = nil, facets: String? = nil, rangeFacets: String? = nil, facetSort: FacetSort? = nil, stats: String? = nil, country: Country? = nil, isPlot: Bool? = nil, isNodedup: Bool? = nil, isDedup: Bool? = nil, isOwned: Bool? = nil, state: String? = nil, city: String? = nil, trimO: String? = nil, trimR: String? = nil, domActiveRange: String? = nil, dom180Range: String? = nil, excludeCertified: Bool? = nil, fuelType: String? = nil, dealerType: DealerType? = nil, isPhotoLinks: Bool? = nil, stockNo: String? = nil, lastSeenRange: String? = nil, firstSeenRange: String? = nil, firstSeenAtSourceRange: String? = nil, firstSeenAtMcRange: String? = nil, lastSeenDays: String? = nil, firstSeenDays: String? = nil, firstSeenAtSourceDays: String? = nil, firstSeenAtMcDays: String? = nil, inventoryType: InventoryType? = nil, page: Double? = nil) {
                self.apiKey = apiKey
                self.isAppendAPIKey = isAppendAPIKey
                self.latitude = latitude
                self.longitude = longitude
                self.radius = radius
                self.zip = zip
                self.isIncludeLease = isIncludeLease
                self.isIncludeFinance = isIncludeFinance
                self.leaseTerm = leaseTerm
                self.leaseDownPayment = leaseDownPayment
                self.leaseEmp = leaseEmp
                self.financeLoanTerm = financeLoanTerm
                self.financeLoanApr = financeLoanApr
                self.financeEmp = financeEmp
                self.financeDownPayment = financeDownPayment
                self.financeDownPaymentPer = financeDownPaymentPer
                self.carType = carType
                self.carfax1Owner = carfax1Owner
                self.carfaxCleanTitle = carfaxCleanTitle
                self.year = year
                self.make = make
                self.model = model
                self.trim = trim
                self.vin = vin
                self.bodyType = bodyType
                self.bodySubtype = bodySubtype
                self.vehicleType = vehicleType
                self.vins = vins
                self.taxonomyVins = taxonomyVins
                self.ymmt = ymmt
                self.match = match
                self.cylinders = cylinders
                self.transmission = transmission
                self.doors = doors
                self.drivetrain = drivetrain
                self.exteriorColor = exteriorColor
                self.interiorColor = interiorColor
                self.baseExteriorColor = baseExteriorColor
                self.baseInteriorColor = baseInteriorColor
                self.engine = engine
                self.engineSize = engineSize
                self.engineAspiration = engineAspiration
                self.engineBlock = engineBlock
                self.highwayMpgRange = highwayMpgRange
                self.cityMpgRange = cityMpgRange
                self.milesRange = milesRange
                self.priceRange = priceRange
                self.msrpRange = msrpRange
                self.domRange = domRange
                self.sortBy = sortBy
                self.sortOrder = sortOrder
                self.rows = rows
                self.start = start
                self.isIncludeNonVinListings = isIncludeNonVinListings
                self.msaCode = msaCode
                self.facets = facets
                self.rangeFacets = rangeFacets
                self.facetSort = facetSort
                self.stats = stats
                self.country = country
                self.isPlot = isPlot
                self.isNodedup = isNodedup
                self.isDedup = isDedup
                self.isOwned = isOwned
                self.state = state
                self.city = city
                self.trimO = trimO
                self.trimR = trimR
                self.domActiveRange = domActiveRange
                self.dom180Range = dom180Range
                self.excludeCertified = excludeCertified
                self.fuelType = fuelType
                self.dealerType = dealerType
                self.isPhotoLinks = isPhotoLinks
                self.stockNo = stockNo
                self.lastSeenRange = lastSeenRange
                self.firstSeenRange = firstSeenRange
                self.firstSeenAtSourceRange = firstSeenAtSourceRange
                self.firstSeenAtMcRange = firstSeenAtMcRange
                self.lastSeenDays = lastSeenDays
                self.firstSeenDays = firstSeenDays
                self.firstSeenAtSourceDays = firstSeenAtSourceDays
                self.firstSeenAtMcDays = firstSeenAtMcDays
                self.inventoryType = inventoryType
                self.page = page
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(apiKey, forKey: "api_key")
                encoder.encode(isAppendAPIKey, forKey: "append_api_key")
                encoder.encode(latitude, forKey: "latitude")
                encoder.encode(longitude, forKey: "longitude")
                encoder.encode(radius, forKey: "radius")
                encoder.encode(zip, forKey: "zip")
                encoder.encode(isIncludeLease, forKey: "include_lease")
                encoder.encode(isIncludeFinance, forKey: "include_finance")
                encoder.encode(leaseTerm, forKey: "lease_term")
                encoder.encode(leaseDownPayment, forKey: "lease_down_payment")
                encoder.encode(leaseEmp, forKey: "lease_emp")
                encoder.encode(financeLoanTerm, forKey: "finance_loan_term")
                encoder.encode(financeLoanApr, forKey: "finance_loan_apr")
                encoder.encode(financeEmp, forKey: "finance_emp")
                encoder.encode(financeDownPayment, forKey: "finance_down_payment")
                encoder.encode(financeDownPaymentPer, forKey: "finance_down_payment_per")
                encoder.encode(carType, forKey: "car_type")
                encoder.encode(carfax1Owner, forKey: "carfax_1_owner")
                encoder.encode(carfaxCleanTitle, forKey: "carfax_clean_title")
                encoder.encode(year, forKey: "year")
                encoder.encode(make, forKey: "make")
                encoder.encode(model, forKey: "model")
                encoder.encode(trim, forKey: "trim")
                encoder.encode(vin, forKey: "vin")
                encoder.encode(bodyType, forKey: "body_type")
                encoder.encode(bodySubtype, forKey: "body_subtype")
                encoder.encode(vehicleType, forKey: "vehicle_type")
                encoder.encode(vins, forKey: "vins")
                encoder.encode(taxonomyVins, forKey: "taxonomy_vins")
                encoder.encode(ymmt, forKey: "ymmt")
                encoder.encode(match, forKey: "match")
                encoder.encode(cylinders, forKey: "cylinders")
                encoder.encode(transmission, forKey: "transmission")
                encoder.encode(doors, forKey: "doors")
                encoder.encode(drivetrain, forKey: "drivetrain")
                encoder.encode(exteriorColor, forKey: "exterior_color")
                encoder.encode(interiorColor, forKey: "interior_color")
                encoder.encode(baseExteriorColor, forKey: "base_exterior_color")
                encoder.encode(baseInteriorColor, forKey: "base_interior_color")
                encoder.encode(engine, forKey: "engine")
                encoder.encode(engineSize, forKey: "engine_size")
                encoder.encode(engineAspiration, forKey: "engine_aspiration")
                encoder.encode(engineBlock, forKey: "engine_block")
                encoder.encode(highwayMpgRange, forKey: "highway_mpg_range")
                encoder.encode(cityMpgRange, forKey: "city_mpg_range")
                encoder.encode(milesRange, forKey: "miles_range")
                encoder.encode(priceRange, forKey: "price_range")
                encoder.encode(msrpRange, forKey: "msrp_range")
                encoder.encode(domRange, forKey: "dom_range")
                encoder.encode(sortBy, forKey: "sort_by")
                encoder.encode(sortOrder, forKey: "sort_order")
                encoder.encode(rows, forKey: "rows")
                encoder.encode(start, forKey: "start")
                encoder.encode(isIncludeNonVinListings, forKey: "include_non_vin_listings")
                encoder.encode(msaCode, forKey: "msa_code")
                encoder.encode(facets, forKey: "facets")
                encoder.encode(rangeFacets, forKey: "range_facets")
                encoder.encode(facetSort, forKey: "facet_sort")
                encoder.encode(stats, forKey: "stats")
                encoder.encode(country, forKey: "country")
                encoder.encode(isPlot, forKey: "plot")
                encoder.encode(isNodedup, forKey: "nodedup")
                encoder.encode(isDedup, forKey: "dedup")
                encoder.encode(isOwned, forKey: "owned")
                encoder.encode(state, forKey: "state")
                encoder.encode(city, forKey: "city")
                encoder.encode(trimO, forKey: "trim_o")
                encoder.encode(trimR, forKey: "trim_r")
                encoder.encode(domActiveRange, forKey: "dom_active_range")
                encoder.encode(dom180Range, forKey: "dom_180_range")
                encoder.encode(excludeCertified, forKey: "exclude_certified")
                encoder.encode(fuelType, forKey: "fuel_type")
                encoder.encode(dealerType, forKey: "dealer_type")
                encoder.encode(isPhotoLinks, forKey: "photo_links")
                encoder.encode(stockNo, forKey: "stock_no")
                encoder.encode(lastSeenRange, forKey: "last_seen_range")
                encoder.encode(firstSeenRange, forKey: "first_seen_range")
                encoder.encode(firstSeenAtSourceRange, forKey: "first_seen_at_source_range")
                encoder.encode(firstSeenAtMcRange, forKey: "first_seen_at_mc_range")
                encoder.encode(lastSeenDays, forKey: "last_seen_days")
                encoder.encode(firstSeenDays, forKey: "first_seen_days")
                encoder.encode(firstSeenAtSourceDays, forKey: "first_seen_at_source_days")
                encoder.encode(firstSeenAtMcDays, forKey: "first_seen_at_mc_days")
                encoder.encode(inventoryType, forKey: "inventory_type")
                encoder.encode(page, forKey: "page")
                return encoder.items
            }
        }
    }
}

extension Paths.Search.Car.Active.Rank {
    public var listings: Listings {
        Listings(path: path + "/listings")
    }

    public struct Listings {
        /// Path: `/search/car/active/rank/listings`
        public let path: String

        /// Compute relative rank for car listings.
        ///
        /// Computer rank for car listings based on inputs provided.Weights for ranking parameters can also be provided.
        public func post(apiKey: String? = nil, isAppendAPIKey: Bool? = nil, _ body: Data) -> Request<MarketcheckAPI.CarRankResponse> {
            .post(path, query: makePostQuery(apiKey, isAppendAPIKey), body: body)
        }

        private func makePostQuery(_ apiKey: String?, _ isAppendAPIKey: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(apiKey, forKey: "api_key")
            encoder.encode(isAppendAPIKey, forKey: "append_api_key")
            return encoder.items
        }
    }
}

public enum Paths {}
