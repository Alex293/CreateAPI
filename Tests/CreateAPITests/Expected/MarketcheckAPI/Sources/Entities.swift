// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation

/// Heavy Equipments search query response
public struct HeavyEquipmentsSearchResponse: Codable {
    /// The number of listings found
    public var numFound: Int?
    public var listings: [HeavyEquipmentsBaseListing]?
    public var facets: [String: AnyJSON]?
    public var stats: [String: AnyJSON]?
    public var rangeFacets: [String: AnyJSON]?

    public init(numFound: Int? = nil, listings: [HeavyEquipmentsBaseListing]? = nil, facets: [String: AnyJSON]? = nil, stats: [String: AnyJSON]? = nil, rangeFacets: [String: AnyJSON]? = nil) {
        self.numFound = numFound
        self.listings = listings
        self.facets = facets
        self.stats = stats
        self.rangeFacets = rangeFacets
    }

    private enum CodingKeys: String, CodingKey {
        case numFound = "num_found"
        case listings
        case facets
        case stats
        case rangeFacets = "range_facets"
    }
}

/// Base heavy equipment listing
public struct HeavyEquipmentsBaseListing: Codable {
    /// Unique identifier representing a specific listing from the Marketcheck database
    public var id: String?
    /// VIN for the heavy equipment
    public var vin: String?
    /// Listing title as displayed on the source website
    public var heading: String?
    /// Asking price for the heavy equipment
    public var price: Int?
    /// Odometer reading / reported miles usage for the heavy equipment
    public var miles: Int?
    /// MSRP for the heavy equipment
    public var msrp: Int?
    /// Details Page url of the specific heavy equipment
    public var dpURL: String?
    /// Exterior color of the heavy equipment
    public var exteriorColor: String?
    /// Interior color of the heavy equipment
    public var interiorColor: String?
    /// Seller type for the heavy equipment
    public var sellerType: String?
    /// Inventory type of heavy equipment
    public var inventoryType: String?
    /// Stock number of heavy equipment in dealers inventory
    public var stockNo: String?
    /// Listing last seen at (most recent) timestamp
    public var lastSeenAt: Int?
    /// Listing last seen at (most recent) date
    public var lastSeenAtDate: String?
    /// Listing last seen at date timestamp
    public var scrapedAt: Double?
    /// Listing last seen at date
    public var scrapedAtDate: String?
    /// Listing first seen at first scraped timestamp
    public var firstSeenAt: Int?
    /// Listing first seen at first scraped date
    public var firstSeenAtDate: String?
    /// Source domain of the listing
    public var source: String?
    public var media: ListingNestMedia?
    public var dealer: NestDealer?
    /// Describes the Heavy Equipments specification
    public var build: HeavyEquipmentsBuild?
    /// Distance of the quipments's location from the specified user lcoation
    public var dist: Double?

    public init(id: String? = nil, vin: String? = nil, heading: String? = nil, price: Int? = nil, miles: Int? = nil, msrp: Int? = nil, dpURL: String? = nil, exteriorColor: String? = nil, interiorColor: String? = nil, sellerType: String? = nil, inventoryType: String? = nil, stockNo: String? = nil, lastSeenAt: Int? = nil, lastSeenAtDate: String? = nil, scrapedAt: Double? = nil, scrapedAtDate: String? = nil, firstSeenAt: Int? = nil, firstSeenAtDate: String? = nil, source: String? = nil, media: ListingNestMedia? = nil, dealer: NestDealer? = nil, build: HeavyEquipmentsBuild? = nil, dist: Double? = nil) {
        self.id = id
        self.vin = vin
        self.heading = heading
        self.price = price
        self.miles = miles
        self.msrp = msrp
        self.dpURL = dpURL
        self.exteriorColor = exteriorColor
        self.interiorColor = interiorColor
        self.sellerType = sellerType
        self.inventoryType = inventoryType
        self.stockNo = stockNo
        self.lastSeenAt = lastSeenAt
        self.lastSeenAtDate = lastSeenAtDate
        self.scrapedAt = scrapedAt
        self.scrapedAtDate = scrapedAtDate
        self.firstSeenAt = firstSeenAt
        self.firstSeenAtDate = firstSeenAtDate
        self.source = source
        self.media = media
        self.dealer = dealer
        self.build = build
        self.dist = dist
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case vin
        case heading
        case price
        case miles
        case msrp
        case dpURL = "dp_url"
        case exteriorColor = "exterior_color"
        case interiorColor = "interior_color"
        case sellerType = "seller_type"
        case inventoryType = "inventory_type"
        case stockNo = "stock_no"
        case lastSeenAt = "last_seen_at"
        case lastSeenAtDate = "last_seen_at_date"
        case scrapedAt = "scraped_at"
        case scrapedAtDate = "scraped_at_date"
        case firstSeenAt = "first_seen_at"
        case firstSeenAtDate = "first_seen_at_date"
        case source
        case media
        case dealer
        case build
        case dist
    }
}

/// Describes the Heavy Equipments specification
public struct HeavyEquipmentsBuild: Codable {
    /// Year of the heavy equipment
    public var year: Int?
    /// Heavy equipment Make
    public var make: String?
    /// Heavy equipment model
    public var model: String?
    /// Trim of the heavy equipment
    public var trim: String?
    /// Body type of the heavy equipment
    public var bodyType: String?
    /// Heavy equipment condition
    public var condition: String?
    /// Heavy equipment category
    public var category: String?
    /// Heavy equipment sub_category
    public var subCategory: String?
    /// Transmission of the heavy equipment
    public var transmission: String?
    /// Drivetrain of the heavy equipment
    public var drivetrain: String?
    /// Fuel type of the heavy equipment
    public var fuelType: String?
    /// Engine of the heavy equipment
    public var engine: String?

    public init(year: Int? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, bodyType: String? = nil, condition: String? = nil, category: String? = nil, subCategory: String? = nil, transmission: String? = nil, drivetrain: String? = nil, fuelType: String? = nil, engine: String? = nil) {
        self.year = year
        self.make = make
        self.model = model
        self.trim = trim
        self.bodyType = bodyType
        self.condition = condition
        self.category = category
        self.subCategory = subCategory
        self.transmission = transmission
        self.drivetrain = drivetrain
        self.fuelType = fuelType
        self.engine = engine
    }

    private enum CodingKeys: String, CodingKey {
        case year
        case make
        case model
        case trim
        case bodyType = "body_type"
        case condition
        case category
        case subCategory = "sub_category"
        case transmission
        case drivetrain
        case fuelType = "fuel_type"
        case engine
    }
}

/// Represents a full list of attributes available with Marketcheck for a car
public struct HeavyEquipmentsListing: Codable {
    /// Unique identifier representing a specific listing from the Marketcheck database
    public var id: String?
    /// VIN for the heavy equipment
    public var vin: String?
    /// Listing title as displayed on the source website
    public var heading: String?
    /// Asking price for the heavy equipment
    public var price: Int?
    /// Odometer reading / reported miles usage for the heavy equipment
    public var miles: Int?
    /// MSRP for the heavy equipment
    public var msrp: Int?
    /// Details Page url of the specific heavy equipment
    public var dpURL: String?
    /// Exterior color of the heavy equipment
    public var exteriorColor: String?
    /// Interior color of the heavy equipment
    public var interiorColor: String?
    /// Seller type for the heavy equipment
    public var sellerType: String?
    /// Inventory type of heavy equipment
    public var inventoryType: String?
    /// Stock number of heavy equipment in dealers inventory
    public var stockNo: String?
    /// Listing last seen at (most recent) timestamp
    public var lastSeenAt: Int?
    /// Listing last seen at (most recent) date
    public var lastSeenAtDate: String?
    /// Listing last seen at date timestamp
    public var scrapedAt: Double?
    /// Listing last seen at date
    public var scrapedAtDate: String?
    /// Listing first seen at first scraped timestamp
    public var firstSeenAt: Int?
    /// Listing first seen at first scraped date
    public var firstSeenAtDate: String?
    /// Source domain of the listing
    public var source: String?
    public var media: ListingNestMedia?
    public var extra: ListingNestExtraAttributes?
    public var dealer: NestDealer?
    /// Describes the RV specification
    public var build: RVBuild?

    public init(id: String? = nil, vin: String? = nil, heading: String? = nil, price: Int? = nil, miles: Int? = nil, msrp: Int? = nil, dpURL: String? = nil, exteriorColor: String? = nil, interiorColor: String? = nil, sellerType: String? = nil, inventoryType: String? = nil, stockNo: String? = nil, lastSeenAt: Int? = nil, lastSeenAtDate: String? = nil, scrapedAt: Double? = nil, scrapedAtDate: String? = nil, firstSeenAt: Int? = nil, firstSeenAtDate: String? = nil, source: String? = nil, media: ListingNestMedia? = nil, extra: ListingNestExtraAttributes? = nil, dealer: NestDealer? = nil, build: RVBuild? = nil) {
        self.id = id
        self.vin = vin
        self.heading = heading
        self.price = price
        self.miles = miles
        self.msrp = msrp
        self.dpURL = dpURL
        self.exteriorColor = exteriorColor
        self.interiorColor = interiorColor
        self.sellerType = sellerType
        self.inventoryType = inventoryType
        self.stockNo = stockNo
        self.lastSeenAt = lastSeenAt
        self.lastSeenAtDate = lastSeenAtDate
        self.scrapedAt = scrapedAt
        self.scrapedAtDate = scrapedAtDate
        self.firstSeenAt = firstSeenAt
        self.firstSeenAtDate = firstSeenAtDate
        self.source = source
        self.media = media
        self.extra = extra
        self.dealer = dealer
        self.build = build
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case vin
        case heading
        case price
        case miles
        case msrp
        case dpURL = "dp_url"
        case exteriorColor = "exterior_color"
        case interiorColor = "interior_color"
        case sellerType = "seller_type"
        case inventoryType = "inventory_type"
        case stockNo = "stock_no"
        case lastSeenAt = "last_seen_at"
        case lastSeenAtDate = "last_seen_at_date"
        case scrapedAt = "scraped_at"
        case scrapedAtDate = "scraped_at_date"
        case firstSeenAt = "first_seen_at"
        case firstSeenAtDate = "first_seen_at_date"
        case source
        case media
        case extra
        case dealer
        case build
    }
}

/// RV search query response
public struct RVSearchResponse: Codable {
    /// The number of listings found
    public var numFound: Int?
    public var listings: [RVBaseListing]?
    public var facets: [String: AnyJSON]?
    public var stats: [String: AnyJSON]?
    public var rangeFacets: [String: AnyJSON]?

    public init(numFound: Int? = nil, listings: [RVBaseListing]? = nil, facets: [String: AnyJSON]? = nil, stats: [String: AnyJSON]? = nil, rangeFacets: [String: AnyJSON]? = nil) {
        self.numFound = numFound
        self.listings = listings
        self.facets = facets
        self.stats = stats
        self.rangeFacets = rangeFacets
    }

    private enum CodingKeys: String, CodingKey {
        case numFound = "num_found"
        case listings
        case facets
        case stats
        case rangeFacets = "range_facets"
    }
}

/// Base RV listing
public struct RVBaseListing: Codable {
    /// Unique identifier representing a specific listing from the Marketcheck database
    public var id: String?
    /// VIN for the RV
    public var vin: String?
    /// Listing title as displayed on the source website
    public var heading: String?
    /// Asking price for the RV
    public var price: Int?
    /// Odometer reading / reported miles usage for the RV
    public var miles: Int?
    /// MSRP for the RV
    public var msrp: Int?
    /// Details Page url of the specific RV
    public var dpURL: String?
    /// Exterior color of the RV
    public var exteriorColor: String?
    /// Interior color of the RV
    public var interiorColor: String?
    /// Seller type for the RV
    public var sellerType: String?
    /// Inventory type of RV
    public var inventoryType: String?
    /// Stock number of RV in dealers inventory
    public var stockNo: String?
    /// Listing last seen at (most recent) timestamp
    public var lastSeenAt: Int?
    /// Listing last seen at (most recent) date
    public var lastSeenAtDate: String?
    /// Listing last seen at date timestamp
    public var scrapedAt: Double?
    /// Listing last seen at date
    public var scrapedAtDate: String?
    /// Listing first seen at first scraped timestamp
    public var firstSeenAt: Int?
    /// Listing first seen at first scraped date
    public var firstSeenAtDate: String?
    /// Source domain of the listing
    public var source: String?
    public var media: ListingNestMedia?
    public var dealer: NestDealer?
    /// Describes the RV specification
    public var build: RVBuild?
    /// Distance of the RV's location from the specified user lcoation
    public var dist: Double?

    public init(id: String? = nil, vin: String? = nil, heading: String? = nil, price: Int? = nil, miles: Int? = nil, msrp: Int? = nil, dpURL: String? = nil, exteriorColor: String? = nil, interiorColor: String? = nil, sellerType: String? = nil, inventoryType: String? = nil, stockNo: String? = nil, lastSeenAt: Int? = nil, lastSeenAtDate: String? = nil, scrapedAt: Double? = nil, scrapedAtDate: String? = nil, firstSeenAt: Int? = nil, firstSeenAtDate: String? = nil, source: String? = nil, media: ListingNestMedia? = nil, dealer: NestDealer? = nil, build: RVBuild? = nil, dist: Double? = nil) {
        self.id = id
        self.vin = vin
        self.heading = heading
        self.price = price
        self.miles = miles
        self.msrp = msrp
        self.dpURL = dpURL
        self.exteriorColor = exteriorColor
        self.interiorColor = interiorColor
        self.sellerType = sellerType
        self.inventoryType = inventoryType
        self.stockNo = stockNo
        self.lastSeenAt = lastSeenAt
        self.lastSeenAtDate = lastSeenAtDate
        self.scrapedAt = scrapedAt
        self.scrapedAtDate = scrapedAtDate
        self.firstSeenAt = firstSeenAt
        self.firstSeenAtDate = firstSeenAtDate
        self.source = source
        self.media = media
        self.dealer = dealer
        self.build = build
        self.dist = dist
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case vin
        case heading
        case price
        case miles
        case msrp
        case dpURL = "dp_url"
        case exteriorColor = "exterior_color"
        case interiorColor = "interior_color"
        case sellerType = "seller_type"
        case inventoryType = "inventory_type"
        case stockNo = "stock_no"
        case lastSeenAt = "last_seen_at"
        case lastSeenAtDate = "last_seen_at_date"
        case scrapedAt = "scraped_at"
        case scrapedAtDate = "scraped_at_date"
        case firstSeenAt = "first_seen_at"
        case firstSeenAtDate = "first_seen_at_date"
        case source
        case media
        case dealer
        case build
        case dist
    }
}

/// Describes the RV specification
public struct RVBuild: Codable {
    /// Year of the RV
    public var year: Int?
    /// RV Make
    public var make: String?
    /// RV model
    public var model: String?
    /// Class of the RV
    public var `class`: String?
    /// Slideouts of the RV
    public var slideouts: String?
    /// Sleeps of the RV
    public var sleeps: String?
    /// Transmission of the RV
    public var transmission: String?
    /// Fuel type of the RV
    public var fuelType: String?
    /// Engine of the RV
    public var engine: String?
    /// Area of the RV
    public var area: String?
    /// Length of the RV
    public var length: String?
    /// Made in of the RV
    public var madeIn: String?
    /// Gross Vehicle Weight Ratio of RV
    public var gvwr: String?

    public init(year: Int? = nil, make: String? = nil, model: String? = nil, `class`: String? = nil, slideouts: String? = nil, sleeps: String? = nil, transmission: String? = nil, fuelType: String? = nil, engine: String? = nil, area: String? = nil, length: String? = nil, madeIn: String? = nil, gvwr: String? = nil) {
        self.year = year
        self.make = make
        self.model = model
        self.class = `class`
        self.slideouts = slideouts
        self.sleeps = sleeps
        self.transmission = transmission
        self.fuelType = fuelType
        self.engine = engine
        self.area = area
        self.length = length
        self.madeIn = madeIn
        self.gvwr = gvwr
    }

    private enum CodingKeys: String, CodingKey {
        case year
        case make
        case model
        case `class` = "class"
        case slideouts
        case sleeps
        case transmission
        case fuelType = "fuel_type"
        case engine
        case area
        case length
        case madeIn = "made_in"
        case gvwr
    }
}

/// Represents a full list of attributes available with Marketcheck for a car
public struct RVListing: Codable {
    /// Unique identifier representing a specific listing from the Marketcheck database
    public var id: String?
    /// VIN for the RV
    public var vin: String?
    /// Listing title as displayed on the source website
    public var heading: String?
    /// Asking price for the RV
    public var price: Int?
    /// Odometer reading / reported miles usage for the RV
    public var miles: Int?
    /// MSRP for the RV
    public var msrp: Int?
    /// Details Page url of the specific RV
    public var dpURL: String?
    /// Exterior color of the RV
    public var exteriorColor: String?
    /// Interior color of the RV
    public var interiorColor: String?
    /// Seller type for the RV
    public var sellerType: String?
    /// Inventory type of RV
    public var inventoryType: String?
    /// Stock number of RV in dealers inventory
    public var stockNo: String?
    /// Listing last seen at (most recent) timestamp
    public var lastSeenAt: Int?
    /// Listing last seen at (most recent) date
    public var lastSeenAtDate: String?
    /// Listing last seen at date timestamp
    public var scrapedAt: Double?
    /// Listing last seen at date
    public var scrapedAtDate: String?
    /// Listing first seen at first scraped timestamp
    public var firstSeenAt: Int?
    /// Listing first seen at first scraped date
    public var firstSeenAtDate: String?
    /// Source domain of the listing
    public var source: String?
    public var media: ListingNestMedia?
    public var extra: ListingNestExtraAttributes?
    public var dealer: NestDealer?
    /// Describes the RV specification
    public var build: RVBuild?

    public init(id: String? = nil, vin: String? = nil, heading: String? = nil, price: Int? = nil, miles: Int? = nil, msrp: Int? = nil, dpURL: String? = nil, exteriorColor: String? = nil, interiorColor: String? = nil, sellerType: String? = nil, inventoryType: String? = nil, stockNo: String? = nil, lastSeenAt: Int? = nil, lastSeenAtDate: String? = nil, scrapedAt: Double? = nil, scrapedAtDate: String? = nil, firstSeenAt: Int? = nil, firstSeenAtDate: String? = nil, source: String? = nil, media: ListingNestMedia? = nil, extra: ListingNestExtraAttributes? = nil, dealer: NestDealer? = nil, build: RVBuild? = nil) {
        self.id = id
        self.vin = vin
        self.heading = heading
        self.price = price
        self.miles = miles
        self.msrp = msrp
        self.dpURL = dpURL
        self.exteriorColor = exteriorColor
        self.interiorColor = interiorColor
        self.sellerType = sellerType
        self.inventoryType = inventoryType
        self.stockNo = stockNo
        self.lastSeenAt = lastSeenAt
        self.lastSeenAtDate = lastSeenAtDate
        self.scrapedAt = scrapedAt
        self.scrapedAtDate = scrapedAtDate
        self.firstSeenAt = firstSeenAt
        self.firstSeenAtDate = firstSeenAtDate
        self.source = source
        self.media = media
        self.extra = extra
        self.dealer = dealer
        self.build = build
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case vin
        case heading
        case price
        case miles
        case msrp
        case dpURL = "dp_url"
        case exteriorColor = "exterior_color"
        case interiorColor = "interior_color"
        case sellerType = "seller_type"
        case inventoryType = "inventory_type"
        case stockNo = "stock_no"
        case lastSeenAt = "last_seen_at"
        case lastSeenAtDate = "last_seen_at_date"
        case scrapedAt = "scraped_at"
        case scrapedAtDate = "scraped_at_date"
        case firstSeenAt = "first_seen_at"
        case firstSeenAtDate = "first_seen_at_date"
        case source
        case media
        case extra
        case dealer
        case build
    }
}

/// Motorcycle search query response
public struct MotorcycleSearchResponse: Codable {
    /// The number of listings found
    public var numFound: Int?
    public var listings: [MotorcycleBaseListing]?
    public var facets: [String: AnyJSON]?
    public var stats: [String: AnyJSON]?
    public var rangeFacets: [String: AnyJSON]?

    public init(numFound: Int? = nil, listings: [MotorcycleBaseListing]? = nil, facets: [String: AnyJSON]? = nil, stats: [String: AnyJSON]? = nil, rangeFacets: [String: AnyJSON]? = nil) {
        self.numFound = numFound
        self.listings = listings
        self.facets = facets
        self.stats = stats
        self.rangeFacets = rangeFacets
    }

    private enum CodingKeys: String, CodingKey {
        case numFound = "num_found"
        case listings
        case facets
        case stats
        case rangeFacets = "range_facets"
    }
}

/// Base motorcycle listing
public struct MotorcycleBaseListing: Codable {
    /// Unique identifier representing a specific listing from the Marketcheck database
    public var id: String?
    /// VIN for the Motorcycle
    public var vin: String?
    /// Listing title as displayed on the source website
    public var heading: String?
    /// Asking price for the motorcycle
    public var price: Int?
    /// Odometer reading / reported miles usage for the motorcycle
    public var miles: Int?
    /// MSRP for the motorcycle
    public var msrp: Int?
    /// Details Page url of the specific motorcycle
    public var dpURL: String?
    /// Color of the motorcycle
    public var color: String?
    /// Seller type for the motorcycle
    public var sellerType: String?
    /// Inventory type of motorcycle
    public var inventoryType: String?
    /// Stock number of motorcycle in dealers inventory
    public var stockNo: String?
    /// Listing last seen at (most recent) timestamp
    public var lastSeenAt: Int?
    /// Listing last seen at (most recent) date
    public var lastSeenAtDate: String?
    /// Listing last seen at date timestamp
    public var scrapedAt: Double?
    /// Listing last seen at date
    public var scrapedAtDate: String?
    /// Listing first seen at first scraped timestamp
    public var firstSeenAt: Int?
    /// Listing first seen at first scraped date
    public var firstSeenAtDate: String?
    /// Source domain of the listing
    public var source: String?
    public var media: ListingNestMedia?
    public var dealer: NestDealer?
    /// Describes the Motorcycle specification
    public var build: MotorcycleBuild?
    /// Distance of the motorcycle's location from the specified user lcoation
    public var dist: Double?

    public init(id: String? = nil, vin: String? = nil, heading: String? = nil, price: Int? = nil, miles: Int? = nil, msrp: Int? = nil, dpURL: String? = nil, color: String? = nil, sellerType: String? = nil, inventoryType: String? = nil, stockNo: String? = nil, lastSeenAt: Int? = nil, lastSeenAtDate: String? = nil, scrapedAt: Double? = nil, scrapedAtDate: String? = nil, firstSeenAt: Int? = nil, firstSeenAtDate: String? = nil, source: String? = nil, media: ListingNestMedia? = nil, dealer: NestDealer? = nil, build: MotorcycleBuild? = nil, dist: Double? = nil) {
        self.id = id
        self.vin = vin
        self.heading = heading
        self.price = price
        self.miles = miles
        self.msrp = msrp
        self.dpURL = dpURL
        self.color = color
        self.sellerType = sellerType
        self.inventoryType = inventoryType
        self.stockNo = stockNo
        self.lastSeenAt = lastSeenAt
        self.lastSeenAtDate = lastSeenAtDate
        self.scrapedAt = scrapedAt
        self.scrapedAtDate = scrapedAtDate
        self.firstSeenAt = firstSeenAt
        self.firstSeenAtDate = firstSeenAtDate
        self.source = source
        self.media = media
        self.dealer = dealer
        self.build = build
        self.dist = dist
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case vin
        case heading
        case price
        case miles
        case msrp
        case dpURL = "dp_url"
        case color
        case sellerType = "seller_type"
        case inventoryType = "inventory_type"
        case stockNo = "stock_no"
        case lastSeenAt = "last_seen_at"
        case lastSeenAtDate = "last_seen_at_date"
        case scrapedAt = "scraped_at"
        case scrapedAtDate = "scraped_at_date"
        case firstSeenAt = "first_seen_at"
        case firstSeenAtDate = "first_seen_at_date"
        case source
        case media
        case dealer
        case build
        case dist
    }
}

/// Describes the Motorcycle specification
public struct MotorcycleBuild: Codable {
    /// Year of the motorcycle
    public var year: Int?
    /// Motorcycle Make
    public var make: String?
    /// Motorcycle model
    public var model: String?
    /// Trim of the motorcycle
    public var trim: String?
    /// Body type of the motorcycle
    public var bodyType: String?
    /// Vehicle type of the motorcycle
    public var vehicleType: String?
    /// Transmission of the motorcycle
    public var transmission: String?
    /// Drivetrain of the motorcycle
    public var drivetrain: String?
    /// Fuel type of the motorcycle
    public var fuelType: String?
    /// Engine of the motorcycle
    public var engine: String?
    /// No of cylinders of the motorcycle
    public var cylinders: Int?
    /// Made in of the motorcycle
    public var madeIn: String?
    /// Dry weight of motorcycle
    public var dryWeight: String?

    public init(year: Int? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, bodyType: String? = nil, vehicleType: String? = nil, transmission: String? = nil, drivetrain: String? = nil, fuelType: String? = nil, engine: String? = nil, cylinders: Int? = nil, madeIn: String? = nil, dryWeight: String? = nil) {
        self.year = year
        self.make = make
        self.model = model
        self.trim = trim
        self.bodyType = bodyType
        self.vehicleType = vehicleType
        self.transmission = transmission
        self.drivetrain = drivetrain
        self.fuelType = fuelType
        self.engine = engine
        self.cylinders = cylinders
        self.madeIn = madeIn
        self.dryWeight = dryWeight
    }

    private enum CodingKeys: String, CodingKey {
        case year
        case make
        case model
        case trim
        case bodyType = "body_type"
        case vehicleType = "vehicle_type"
        case transmission
        case drivetrain
        case fuelType = "fuel_type"
        case engine
        case cylinders
        case madeIn = "made_in"
        case dryWeight = "dry_weight"
    }
}

/// Represents a full list of attributes available with Marketcheck for a car
public struct MotorcycleListing: Codable {
    /// Unique identifier representing a specific listing from the Marketcheck database
    public var id: String?
    /// VIN for the Motorcycle
    public var vin: String?
    /// Listing title as displayed on the source website
    public var heading: String?
    /// Asking price for the motorcycle
    public var price: Int?
    /// Odometer reading / reported miles usage for the motorcycle
    public var miles: Int?
    /// MSRP for the motorcycle
    public var msrp: Int?
    /// Details Page url of the specific motorcycle
    public var dpURL: String?
    /// Color of the motorcycle
    public var color: String?
    /// Seller type for the motorcycle
    public var sellerType: String?
    /// Inventory type of motorcycle
    public var inventoryType: String?
    /// Stock number of motorcycle in dealers inventory
    public var stockNo: String?
    /// Listing last seen at (most recent) timestamp
    public var lastSeenAt: Int?
    /// Listing last seen at (most recent) date
    public var lastSeenAtDate: String?
    /// Listing last seen at date timestamp
    public var scrapedAt: Double?
    /// Listing last seen at date
    public var scrapedAtDate: String?
    /// Listing first seen at first scraped timestamp
    public var firstSeenAt: Int?
    /// Listing first seen at first scraped date
    public var firstSeenAtDate: String?
    /// Source domain of the listing
    public var source: String?
    public var media: ListingNestMedia?
    public var extra: ListingNestExtraAttributes?
    public var dealer: NestDealer?
    /// Describes the Motorcycle specification
    public var build: MotorcycleBuild?

    public init(id: String? = nil, vin: String? = nil, heading: String? = nil, price: Int? = nil, miles: Int? = nil, msrp: Int? = nil, dpURL: String? = nil, color: String? = nil, sellerType: String? = nil, inventoryType: String? = nil, stockNo: String? = nil, lastSeenAt: Int? = nil, lastSeenAtDate: String? = nil, scrapedAt: Double? = nil, scrapedAtDate: String? = nil, firstSeenAt: Int? = nil, firstSeenAtDate: String? = nil, source: String? = nil, media: ListingNestMedia? = nil, extra: ListingNestExtraAttributes? = nil, dealer: NestDealer? = nil, build: MotorcycleBuild? = nil) {
        self.id = id
        self.vin = vin
        self.heading = heading
        self.price = price
        self.miles = miles
        self.msrp = msrp
        self.dpURL = dpURL
        self.color = color
        self.sellerType = sellerType
        self.inventoryType = inventoryType
        self.stockNo = stockNo
        self.lastSeenAt = lastSeenAt
        self.lastSeenAtDate = lastSeenAtDate
        self.scrapedAt = scrapedAt
        self.scrapedAtDate = scrapedAtDate
        self.firstSeenAt = firstSeenAt
        self.firstSeenAtDate = firstSeenAtDate
        self.source = source
        self.media = media
        self.extra = extra
        self.dealer = dealer
        self.build = build
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case vin
        case heading
        case price
        case miles
        case msrp
        case dpURL = "dp_url"
        case color
        case sellerType = "seller_type"
        case inventoryType = "inventory_type"
        case stockNo = "stock_no"
        case lastSeenAt = "last_seen_at"
        case lastSeenAtDate = "last_seen_at_date"
        case scrapedAt = "scraped_at"
        case scrapedAtDate = "scraped_at_date"
        case firstSeenAt = "first_seen_at"
        case firstSeenAtDate = "first_seen_at_date"
        case source
        case media
        case extra
        case dealer
        case build
    }
}

/// Search query response
public struct SearchResponse: Codable {
    /// The number of listings found
    public var numFound: Int?
    public var listings: [BaseListing]?
    public var facets: [String: AnyJSON]?
    public var stats: [String: AnyJSON]?
    public var rangeFacets: [String: AnyJSON]?

    public init(numFound: Int? = nil, listings: [BaseListing]? = nil, facets: [String: AnyJSON]? = nil, stats: [String: AnyJSON]? = nil, rangeFacets: [String: AnyJSON]? = nil) {
        self.numFound = numFound
        self.listings = listings
        self.facets = facets
        self.stats = stats
        self.rangeFacets = rangeFacets
    }

    private enum CodingKeys: String, CodingKey {
        case numFound = "num_found"
        case listings
        case facets
        case stats
        case rangeFacets = "range_facets"
    }
}

/// Search auto complete query response
public struct SearchAutoCompleteResponse: Codable {
    public var terms: [Term]?

    public struct Term: Codable {
        /// The actual term that either has prefix or contains given input
        public var item: String?
        /// The number of listings with item as value for given field
        public var count: Int?

        public init(item: String? = nil, count: Int? = nil) {
            self.item = item
            self.count = count
        }
    }

    public init(terms: [Term]? = nil) {
        self.terms = terms
    }
}

/// Specs auto complete query response
public struct SpecsAutoCompleteResponse: Codable {
    public var terms: [String]?

    public init(terms: [String]? = nil) {
        self.terms = terms
    }
}

/// Represents a full list of attributes available with Marketcheck for a car
public struct Listing: Codable {
    /// Unique identifier representing a specific listing from the Marketcheck database
    public var id: String?
    /// Relative rank of the listing determined by ranking service
    public var rank: Int?
    /// Score of the ranked listing as per the ranking criteria determined by ranking service
    public var score: Double?
    /// VIN for the car
    public var vin: String?
    /// Listing title as displayed on the source website
    public var heading: String?
    /// Asking price for the car
    public var price: Int?
    /// Odometer reading / reported miles usage for the car
    public var miles: Int?
    /// MSRP for the car
    public var msrp: Int?
    /// Data source of the listing
    public var dataSource: String?
    /// Certified car
    public var isCertified: Int?
    /// Vehicle Details Page url of the specific car
    public var vdpURL: String?
    /// Flag to indicate whether listing is carfax_1_owner
    public var isCarfax1Owner: Bool?
    /// Flag to indicate whether listing is carfax_clean_title
    public var isCarfaxCleanTitle: Bool?
    /// Exterior color of the car
    public var exteriorColor: String?
    /// Interior color of the car
    public var interiorColor: String?
    /// Days on Market value for the car based on current and historical listings found in the Marketcheck database for this car
    public var dom: Int?
    /// Days on Market value for the car based on current and last 6 month listings found in the Marketcheck database for this car
    public var dom180: Int?
    /// Days on Market value for the car based on current and last 30 days listings found in the Marketcheck database for this car
    public var domActive: Int?
    /// Seller type for the car
    public var sellerType: String?
    /// Inventory type of car
    public var inventoryType: String?
    /// Stock number of car in dealers inventory
    public var stockNo: String?
    /// Listing last seen at (most recent) timestamp
    public var lastSeenAt: Int?
    /// Listing last seen at (most recent) date
    public var lastSeenAtDate: String?
    /// Listing last seen at date timestamp
    public var scrapedAt: Int?
    /// Listing last seen at date
    public var scrapedAtDate: String?
    /// Listing first seen at first scraped timestamp
    public var firstSeenAt: Int?
    /// Listing first seen at first scraped date
    public var firstSeenAtDate: String?
    /// Listing first seen at source relisted timestamp
    public var firstSeenAtSource: Int?
    /// Listing first seen at source relisted date
    public var firstSeenAtSourceDate: String?
    /// Listing first seen at first scraped at MC timestamp
    public var firstSeenAtMc: Int?
    /// Listing first seen at first scraped at MC date
    public var firstSeenAtMcDate: String?
    /// Last reported price for the car. If the asking price value is not or is available then the last_price could perhaps be used. last_price is the price for the car listed on the source website as of last_price_dt date
    public var refPrice: String?
    /// The date at which the last price was reported online. This is earlier to last_seen_date
    public var refPriceDt: Int?
    /// Last Odometer reading / reported miles usage for the car. If the asking miles value is not or is available then the last_miles could perhaps be used. last_miles is the miles for the car listed on the source website as of last_miles_dt date
    public var refMiles: String?
    /// The date at which the last miles was reported online. This is earlier to last_seen_date
    public var refMilesDt: Int?
    /// Source domain of the listing
    public var source: String?
    /// Array of all finance offers for this listing
    public var financingOptions: [ListingFinance]?
    /// Array of all finance offers for this listing
    public var leasingOptions: [ListingLease]?
    public var media: ListingNestMedia?
    public var extra: ListingNestExtraAttributes?
    public var dealer: NestDealer?
    /// Describes the Car specification
    public var build: Build?

    public init(id: String? = nil, rank: Int? = nil, score: Double? = nil, vin: String? = nil, heading: String? = nil, price: Int? = nil, miles: Int? = nil, msrp: Int? = nil, dataSource: String? = nil, isCertified: Int? = nil, vdpURL: String? = nil, isCarfax1Owner: Bool? = nil, isCarfaxCleanTitle: Bool? = nil, exteriorColor: String? = nil, interiorColor: String? = nil, dom: Int? = nil, dom180: Int? = nil, domActive: Int? = nil, sellerType: String? = nil, inventoryType: String? = nil, stockNo: String? = nil, lastSeenAt: Int? = nil, lastSeenAtDate: String? = nil, scrapedAt: Int? = nil, scrapedAtDate: String? = nil, firstSeenAt: Int? = nil, firstSeenAtDate: String? = nil, firstSeenAtSource: Int? = nil, firstSeenAtSourceDate: String? = nil, firstSeenAtMc: Int? = nil, firstSeenAtMcDate: String? = nil, refPrice: String? = nil, refPriceDt: Int? = nil, refMiles: String? = nil, refMilesDt: Int? = nil, source: String? = nil, financingOptions: [ListingFinance]? = nil, leasingOptions: [ListingLease]? = nil, media: ListingNestMedia? = nil, extra: ListingNestExtraAttributes? = nil, dealer: NestDealer? = nil, build: Build? = nil) {
        self.id = id
        self.rank = rank
        self.score = score
        self.vin = vin
        self.heading = heading
        self.price = price
        self.miles = miles
        self.msrp = msrp
        self.dataSource = dataSource
        self.isCertified = isCertified
        self.vdpURL = vdpURL
        self.isCarfax1Owner = isCarfax1Owner
        self.isCarfaxCleanTitle = isCarfaxCleanTitle
        self.exteriorColor = exteriorColor
        self.interiorColor = interiorColor
        self.dom = dom
        self.dom180 = dom180
        self.domActive = domActive
        self.sellerType = sellerType
        self.inventoryType = inventoryType
        self.stockNo = stockNo
        self.lastSeenAt = lastSeenAt
        self.lastSeenAtDate = lastSeenAtDate
        self.scrapedAt = scrapedAt
        self.scrapedAtDate = scrapedAtDate
        self.firstSeenAt = firstSeenAt
        self.firstSeenAtDate = firstSeenAtDate
        self.firstSeenAtSource = firstSeenAtSource
        self.firstSeenAtSourceDate = firstSeenAtSourceDate
        self.firstSeenAtMc = firstSeenAtMc
        self.firstSeenAtMcDate = firstSeenAtMcDate
        self.refPrice = refPrice
        self.refPriceDt = refPriceDt
        self.refMiles = refMiles
        self.refMilesDt = refMilesDt
        self.source = source
        self.financingOptions = financingOptions
        self.leasingOptions = leasingOptions
        self.media = media
        self.extra = extra
        self.dealer = dealer
        self.build = build
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case rank
        case score
        case vin
        case heading
        case price
        case miles
        case msrp
        case dataSource = "data_source"
        case isCertified = "is_certified"
        case vdpURL = "vdp_url"
        case isCarfax1Owner = "carfax_1_owner"
        case isCarfaxCleanTitle = "carfax_clean_title"
        case exteriorColor = "exterior_color"
        case interiorColor = "interior_color"
        case dom
        case dom180 = "dom_180"
        case domActive = "dom_active"
        case sellerType = "seller_type"
        case inventoryType = "inventory_type"
        case stockNo = "stock_no"
        case lastSeenAt = "last_seen_at"
        case lastSeenAtDate = "last_seen_at_date"
        case scrapedAt = "scraped_at"
        case scrapedAtDate = "scraped_at_date"
        case firstSeenAt = "first_seen_at"
        case firstSeenAtDate = "first_seen_at_date"
        case firstSeenAtSource = "first_seen_at_source"
        case firstSeenAtSourceDate = "first_seen_at_source_date"
        case firstSeenAtMc = "first_seen_at_mc"
        case firstSeenAtMcDate = "first_seen_at_mc_date"
        case refPrice = "ref_price"
        case refPriceDt = "ref_price_dt"
        case refMiles = "ref_miles"
        case refMilesDt = "ref_miles_dt"
        case source
        case financingOptions = "financing_options"
        case leasingOptions = "leasing_options"
        case media
        case extra
        case dealer
        case build
    }
}

/// Minimal set of attributes describing a listing
public struct BaseListing: Codable {
    /// Unique identifier representing a specific listing from the Marketcheck database
    public var id: String?
    /// VIN for the car
    public var vin: String?
    /// Listing title as displayed on the source website
    public var heading: String?
    /// Asking price for the car
    public var price: Int?
    /// Odometer reading / reported miles usage for the car
    public var miles: Int?
    /// MSRP for the car
    public var msrp: Int?
    /// Data source of the listing
    public var dataSource: String?
    /// Certified car
    public var isCertified: Int?
    /// Vehicle Details Page url of the specific car
    public var vdpURL: String?
    /// Flag to indicate whether listing is carfax_1_owner
    public var isCarfax1Owner: Bool?
    /// Flag to indicate whether listing is carfax_clean_title
    public var isCarfaxCleanTitle: Bool?
    /// Exterior color of the car
    public var exteriorColor: String?
    /// Interior color of the car
    public var interiorColor: String?
    /// Days on Market value for the car based on current and historical listings found in the Marketcheck database for this car
    public var dom: Int?
    /// Days on Market value for the car based on current and last 6 month listings found in the Marketcheck database for this car
    public var dom180: Int?
    /// Days on Market value for the car based on current and last 30 days listings found in the Marketcheck database for this car
    public var domActive: Int?
    /// Seller type for the car
    public var sellerType: String?
    /// Inventory type of car
    public var inventoryType: String?
    /// Stock number of car in dealers inventory
    public var stockNo: String?
    /// Listing last seen at (most recent) timestamp
    public var lastSeenAt: Int?
    /// Listing last seen at (most recent) date
    public var lastSeenAtDate: String?
    /// Listing last seen at date timestamp
    public var scrapedAt: Double?
    /// Listing last seen at date
    public var scrapedAtDate: String?
    /// Listing first seen at first scraped timestamp
    public var firstSeenAt: Int?
    /// Listing first seen at first scraped date
    public var firstSeenAtDate: String?
    /// Last reported price for the car. If the asking price value is not or is available then the last_price could perhaps be used. last_price is the price for the car listed on the source website as of last_price_dt date
    public var refPrice: String?
    /// The date at which the last price was reported online. This is earlier to last_seen_date
    public var refPriceDt: Int?
    /// Last Odometer reading / reported miles usage for the car. If the asking miles value is not or is available then the last_miles could perhaps be used. last_miles is the miles for the car listed on the source website as of last_miles_dt date
    public var refMiles: String?
    /// The date at which the last miles was reported online. This is earlier to last_seen_date
    public var refMilesDt: Int?
    /// Source domain of the listing
    public var source: String?
    /// Model_code of the listing
    public var modelCode: String?
    /// Array of all finance offers for this listing
    public var financingOptions: [ListingFinance]?
    /// Array of all finance offers for this listing
    public var leasingOptions: [ListingLease]?
    public var media: ListingNestMedia?
    public var dealer: NestDealer?
    /// Describes the Car specification
    public var build: Build?
    /// Distance of the car's location from the specified user lcoation
    public var dist: Double?

    public init(id: String? = nil, vin: String? = nil, heading: String? = nil, price: Int? = nil, miles: Int? = nil, msrp: Int? = nil, dataSource: String? = nil, isCertified: Int? = nil, vdpURL: String? = nil, isCarfax1Owner: Bool? = nil, isCarfaxCleanTitle: Bool? = nil, exteriorColor: String? = nil, interiorColor: String? = nil, dom: Int? = nil, dom180: Int? = nil, domActive: Int? = nil, sellerType: String? = nil, inventoryType: String? = nil, stockNo: String? = nil, lastSeenAt: Int? = nil, lastSeenAtDate: String? = nil, scrapedAt: Double? = nil, scrapedAtDate: String? = nil, firstSeenAt: Int? = nil, firstSeenAtDate: String? = nil, refPrice: String? = nil, refPriceDt: Int? = nil, refMiles: String? = nil, refMilesDt: Int? = nil, source: String? = nil, modelCode: String? = nil, financingOptions: [ListingFinance]? = nil, leasingOptions: [ListingLease]? = nil, media: ListingNestMedia? = nil, dealer: NestDealer? = nil, build: Build? = nil, dist: Double? = nil) {
        self.id = id
        self.vin = vin
        self.heading = heading
        self.price = price
        self.miles = miles
        self.msrp = msrp
        self.dataSource = dataSource
        self.isCertified = isCertified
        self.vdpURL = vdpURL
        self.isCarfax1Owner = isCarfax1Owner
        self.isCarfaxCleanTitle = isCarfaxCleanTitle
        self.exteriorColor = exteriorColor
        self.interiorColor = interiorColor
        self.dom = dom
        self.dom180 = dom180
        self.domActive = domActive
        self.sellerType = sellerType
        self.inventoryType = inventoryType
        self.stockNo = stockNo
        self.lastSeenAt = lastSeenAt
        self.lastSeenAtDate = lastSeenAtDate
        self.scrapedAt = scrapedAt
        self.scrapedAtDate = scrapedAtDate
        self.firstSeenAt = firstSeenAt
        self.firstSeenAtDate = firstSeenAtDate
        self.refPrice = refPrice
        self.refPriceDt = refPriceDt
        self.refMiles = refMiles
        self.refMilesDt = refMilesDt
        self.source = source
        self.modelCode = modelCode
        self.financingOptions = financingOptions
        self.leasingOptions = leasingOptions
        self.media = media
        self.dealer = dealer
        self.build = build
        self.dist = dist
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case vin
        case heading
        case price
        case miles
        case msrp
        case dataSource = "data_source"
        case isCertified = "is_certified"
        case vdpURL = "vdp_url"
        case isCarfax1Owner = "carfax_1_owner"
        case isCarfaxCleanTitle = "carfax_clean_title"
        case exteriorColor = "exterior_color"
        case interiorColor = "interior_color"
        case dom
        case dom180 = "dom_180"
        case domActive = "dom_active"
        case sellerType = "seller_type"
        case inventoryType = "inventory_type"
        case stockNo = "stock_no"
        case lastSeenAt = "last_seen_at"
        case lastSeenAtDate = "last_seen_at_date"
        case scrapedAt = "scraped_at"
        case scrapedAtDate = "scraped_at_date"
        case firstSeenAt = "first_seen_at"
        case firstSeenAtDate = "first_seen_at_date"
        case refPrice = "ref_price"
        case refPriceDt = "ref_price_dt"
        case refMiles = "ref_miles"
        case refMilesDt = "ref_miles_dt"
        case source
        case modelCode = "model_code"
        case financingOptions = "financing_options"
        case leasingOptions = "leasing_options"
        case media
        case dealer
        case build
        case dist
    }
}

public struct CarSearchFacets: Codable {
    public var year: [FacetItem]?
    public var make: [FacetItem]?
    public var model: [FacetItem]?
    public var trim: [FacetItem]?
    public var trimO: [FacetItem]?
    public var trimR: [FacetItem]?
    public var bodyType: [FacetItem]?
    public var bodySubtype: [FacetItem]?
    public var vehicleType: [FacetItem]?
    public var carType: [FacetItem]?
    public var drivetrain: [FacetItem]?
    public var transmission: [FacetItem]?
    public var cylinders: [FacetItem]?
    public var fuelType: [FacetItem]?
    public var exteriorColor: [FacetItem]?
    public var interiorColor: [FacetItem]?
    public var baseExteriorColor: [FacetItem]?
    public var baseInteriorColor: [FacetItem]?
    public var city: [FacetItem]?
    public var state: [FacetItem]?
    public var sellerType: [FacetItem]?
    public var doors: [FacetItem]?
    public var engine: [FacetItem]?
    public var engineSize: [FacetItem]?
    public var engineAspiration: [FacetItem]?
    public var engineBlock: [FacetItem]?
    public var source: [FacetItem]?
    public var sellerNameO: [FacetItem]?
    public var sellerName: [FacetItem]?
    public var dealerID: [FacetItem]?
    public var dataSource: [FacetItem]?
    public var carfax1Owner: [FacetItem]?
    public var carfaxCleanTitle: [FacetItem]?
    public var dealerType: [FacetItem]?

    public init(year: [FacetItem]? = nil, make: [FacetItem]? = nil, model: [FacetItem]? = nil, trim: [FacetItem]? = nil, trimO: [FacetItem]? = nil, trimR: [FacetItem]? = nil, bodyType: [FacetItem]? = nil, bodySubtype: [FacetItem]? = nil, vehicleType: [FacetItem]? = nil, carType: [FacetItem]? = nil, drivetrain: [FacetItem]? = nil, transmission: [FacetItem]? = nil, cylinders: [FacetItem]? = nil, fuelType: [FacetItem]? = nil, exteriorColor: [FacetItem]? = nil, interiorColor: [FacetItem]? = nil, baseExteriorColor: [FacetItem]? = nil, baseInteriorColor: [FacetItem]? = nil, city: [FacetItem]? = nil, state: [FacetItem]? = nil, sellerType: [FacetItem]? = nil, doors: [FacetItem]? = nil, engine: [FacetItem]? = nil, engineSize: [FacetItem]? = nil, engineAspiration: [FacetItem]? = nil, engineBlock: [FacetItem]? = nil, source: [FacetItem]? = nil, sellerNameO: [FacetItem]? = nil, sellerName: [FacetItem]? = nil, dealerID: [FacetItem]? = nil, dataSource: [FacetItem]? = nil, carfax1Owner: [FacetItem]? = nil, carfaxCleanTitle: [FacetItem]? = nil, dealerType: [FacetItem]? = nil) {
        self.year = year
        self.make = make
        self.model = model
        self.trim = trim
        self.trimO = trimO
        self.trimR = trimR
        self.bodyType = bodyType
        self.bodySubtype = bodySubtype
        self.vehicleType = vehicleType
        self.carType = carType
        self.drivetrain = drivetrain
        self.transmission = transmission
        self.cylinders = cylinders
        self.fuelType = fuelType
        self.exteriorColor = exteriorColor
        self.interiorColor = interiorColor
        self.baseExteriorColor = baseExteriorColor
        self.baseInteriorColor = baseInteriorColor
        self.city = city
        self.state = state
        self.sellerType = sellerType
        self.doors = doors
        self.engine = engine
        self.engineSize = engineSize
        self.engineAspiration = engineAspiration
        self.engineBlock = engineBlock
        self.source = source
        self.sellerNameO = sellerNameO
        self.sellerName = sellerName
        self.dealerID = dealerID
        self.dataSource = dataSource
        self.carfax1Owner = carfax1Owner
        self.carfaxCleanTitle = carfaxCleanTitle
        self.dealerType = dealerType
    }

    private enum CodingKeys: String, CodingKey {
        case year
        case make
        case model
        case trim
        case trimO = "trim_o"
        case trimR = "trim_r"
        case bodyType = "body_type"
        case bodySubtype = "body_subtype"
        case vehicleType = "vehicle_type"
        case carType = "car_type"
        case drivetrain
        case transmission
        case cylinders
        case fuelType = "fuel_type"
        case exteriorColor = "exterior_color"
        case interiorColor = "interior_color"
        case baseExteriorColor = "base_exterior_color"
        case baseInteriorColor = "base_interior_color"
        case city
        case state
        case sellerType = "seller_type"
        case doors
        case engine
        case engineSize = "engine_size"
        case engineAspiration = "engine_aspiration"
        case engineBlock = "engine_block"
        case source
        case sellerNameO = "seller_name_o"
        case sellerName = "seller_name"
        case dealerID = "dealer_id"
        case dataSource = "data_source"
        case carfax1Owner = "carfax_1_owner"
        case carfaxCleanTitle = "carfax_clean_title"
        case dealerType = "dealer_type"
    }
}

public struct CarSearchRangeFacets: Codable {
    public var price: [String: AnyJSON]?
    public var miles: [String: AnyJSON]?
    public var dom: [String: AnyJSON]?
    public var dom180: [String: AnyJSON]?
    public var domActive: [String: AnyJSON]?
    public var msrp: [String: AnyJSON]?
    public var leaseTerm: [String: AnyJSON]?
    public var leaseEmp: [String: AnyJSON]?
    public var leaseDownPayment: [String: AnyJSON]?
    public var financeLoanTerm: [String: AnyJSON]?
    public var financeLoanApr: [String: AnyJSON]?
    public var financeEmp: [String: AnyJSON]?
    public var financeDownPayment: [String: AnyJSON]?

    public init(price: [String: AnyJSON]? = nil, miles: [String: AnyJSON]? = nil, dom: [String: AnyJSON]? = nil, dom180: [String: AnyJSON]? = nil, domActive: [String: AnyJSON]? = nil, msrp: [String: AnyJSON]? = nil, leaseTerm: [String: AnyJSON]? = nil, leaseEmp: [String: AnyJSON]? = nil, leaseDownPayment: [String: AnyJSON]? = nil, financeLoanTerm: [String: AnyJSON]? = nil, financeLoanApr: [String: AnyJSON]? = nil, financeEmp: [String: AnyJSON]? = nil, financeDownPayment: [String: AnyJSON]? = nil) {
        self.price = price
        self.miles = miles
        self.dom = dom
        self.dom180 = dom180
        self.domActive = domActive
        self.msrp = msrp
        self.leaseTerm = leaseTerm
        self.leaseEmp = leaseEmp
        self.leaseDownPayment = leaseDownPayment
        self.financeLoanTerm = financeLoanTerm
        self.financeLoanApr = financeLoanApr
        self.financeEmp = financeEmp
        self.financeDownPayment = financeDownPayment
    }

    private enum CodingKeys: String, CodingKey {
        case price
        case miles
        case dom
        case dom180 = "dom_180"
        case domActive = "dom_active"
        case msrp
        case leaseTerm = "lease_term"
        case leaseEmp = "lease_emp"
        case leaseDownPayment = "lease_down_payment"
        case financeLoanTerm = "finance_loan_term"
        case financeLoanApr = "finance_loan_apr"
        case financeEmp = "finance_emp"
        case financeDownPayment = "finance_down_payment"
    }
}

public struct CarSearchStats: Codable {
    public var price: StatsItem?
    public var miles: StatsItem?
    public var dom: StatsItem?
    public var dom180: StatsItem?
    public var domActive: StatsItem?
    public var msrp: StatsItem?
    public var leaseTerm: StatsItem?
    public var leaseEmp: StatsItem?
    public var leaseDownPayment: StatsItem?
    public var financeLoanTerm: StatsItem?
    public var financeLoanApr: StatsItem?
    public var financeEmp: StatsItem?
    public var financeDownPayment: StatsItem?
    public var financeDownPaymentPer: StatsItem?

    public init(price: StatsItem? = nil, miles: StatsItem? = nil, dom: StatsItem? = nil, dom180: StatsItem? = nil, domActive: StatsItem? = nil, msrp: StatsItem? = nil, leaseTerm: StatsItem? = nil, leaseEmp: StatsItem? = nil, leaseDownPayment: StatsItem? = nil, financeLoanTerm: StatsItem? = nil, financeLoanApr: StatsItem? = nil, financeEmp: StatsItem? = nil, financeDownPayment: StatsItem? = nil, financeDownPaymentPer: StatsItem? = nil) {
        self.price = price
        self.miles = miles
        self.dom = dom
        self.dom180 = dom180
        self.domActive = domActive
        self.msrp = msrp
        self.leaseTerm = leaseTerm
        self.leaseEmp = leaseEmp
        self.leaseDownPayment = leaseDownPayment
        self.financeLoanTerm = financeLoanTerm
        self.financeLoanApr = financeLoanApr
        self.financeEmp = financeEmp
        self.financeDownPayment = financeDownPayment
        self.financeDownPaymentPer = financeDownPaymentPer
    }

    private enum CodingKeys: String, CodingKey {
        case price
        case miles
        case dom
        case dom180 = "dom_180"
        case domActive = "dom_active"
        case msrp
        case leaseTerm = "lease_term"
        case leaseEmp = "lease_emp"
        case leaseDownPayment = "lease_down_payment"
        case financeLoanTerm = "finance_loan_term"
        case financeLoanApr = "finance_loan_apr"
        case financeEmp = "finance_emp"
        case financeDownPayment = "finance_down_payment"
        case financeDownPaymentPer = "finance_down_payment_per"
    }
}

public struct MotorcycleSearchFacets: Codable {
    public var year: [FacetItem]?
    public var make: [FacetItem]?
    public var model: [FacetItem]?
    public var trim: [FacetItem]?
    public var bodyType: [FacetItem]?
    public var vehicleType: [FacetItem]?
    public var inventoryType: [FacetItem]?
    public var drivetrain: [FacetItem]?
    public var transmission: [FacetItem]?
    public var cylinders: [FacetItem]?
    public var fuelType: [FacetItem]?
    public var color: [FacetItem]?
    public var city: [FacetItem]?
    public var state: [FacetItem]?
    public var engine: [FacetItem]?
    public var source: [FacetItem]?
    public var sellerName: [FacetItem]?
    public var dealerID: [FacetItem]?

    public init(year: [FacetItem]? = nil, make: [FacetItem]? = nil, model: [FacetItem]? = nil, trim: [FacetItem]? = nil, bodyType: [FacetItem]? = nil, vehicleType: [FacetItem]? = nil, inventoryType: [FacetItem]? = nil, drivetrain: [FacetItem]? = nil, transmission: [FacetItem]? = nil, cylinders: [FacetItem]? = nil, fuelType: [FacetItem]? = nil, color: [FacetItem]? = nil, city: [FacetItem]? = nil, state: [FacetItem]? = nil, engine: [FacetItem]? = nil, source: [FacetItem]? = nil, sellerName: [FacetItem]? = nil, dealerID: [FacetItem]? = nil) {
        self.year = year
        self.make = make
        self.model = model
        self.trim = trim
        self.bodyType = bodyType
        self.vehicleType = vehicleType
        self.inventoryType = inventoryType
        self.drivetrain = drivetrain
        self.transmission = transmission
        self.cylinders = cylinders
        self.fuelType = fuelType
        self.color = color
        self.city = city
        self.state = state
        self.engine = engine
        self.source = source
        self.sellerName = sellerName
        self.dealerID = dealerID
    }

    private enum CodingKeys: String, CodingKey {
        case year
        case make
        case model
        case trim
        case bodyType = "body_type"
        case vehicleType = "vehicle_type"
        case inventoryType = "inventory_type"
        case drivetrain
        case transmission
        case cylinders
        case fuelType = "fuel_type"
        case color
        case city
        case state
        case engine
        case source
        case sellerName = "seller_name"
        case dealerID = "dealer_id"
    }
}

public struct MotorcycleSearchRangeFacets: Codable {
    public var price: [String: AnyJSON]?
    public var miles: [String: AnyJSON]?

    public init(price: [String: AnyJSON]? = nil, miles: [String: AnyJSON]? = nil) {
        self.price = price
        self.miles = miles
    }
}

public struct MotorcycleSearchStats: Codable {
    public var price: StatsItem?
    public var miles: StatsItem?

    public init(price: StatsItem? = nil, miles: StatsItem? = nil) {
        self.price = price
        self.miles = miles
    }
}

public struct HeavyEquipmentsSearchRangeFacets: Codable {
    public var price: [String: AnyJSON]?
    public var miles: [String: AnyJSON]?
    public var hoursUsed: [String: AnyJSON]?

    public init(price: [String: AnyJSON]? = nil, miles: [String: AnyJSON]? = nil, hoursUsed: [String: AnyJSON]? = nil) {
        self.price = price
        self.miles = miles
        self.hoursUsed = hoursUsed
    }

    private enum CodingKeys: String, CodingKey {
        case price
        case miles
        case hoursUsed = "hours_used"
    }
}

public struct HeavyEquipmentsSearchFacets: Codable {
    public var year: [FacetItem]?
    public var make: [FacetItem]?
    public var model: [FacetItem]?
    public var trim: [FacetItem]?
    public var bodyType: [FacetItem]?
    public var category: [FacetItem]?
    public var subCategory: [FacetItem]?
    public var inventoryType: [FacetItem]?
    public var drivetrain: [FacetItem]?
    public var transmission: [FacetItem]?
    public var cylinders: [FacetItem]?
    public var fuelType: [FacetItem]?
    public var exteriorColor: [FacetItem]?
    public var interiorColor: [FacetItem]?
    public var city: [FacetItem]?
    public var state: [FacetItem]?
    public var engine: [FacetItem]?
    public var source: [FacetItem]?
    public var sellerName: [FacetItem]?
    public var dealerID: [FacetItem]?

    public init(year: [FacetItem]? = nil, make: [FacetItem]? = nil, model: [FacetItem]? = nil, trim: [FacetItem]? = nil, bodyType: [FacetItem]? = nil, category: [FacetItem]? = nil, subCategory: [FacetItem]? = nil, inventoryType: [FacetItem]? = nil, drivetrain: [FacetItem]? = nil, transmission: [FacetItem]? = nil, cylinders: [FacetItem]? = nil, fuelType: [FacetItem]? = nil, exteriorColor: [FacetItem]? = nil, interiorColor: [FacetItem]? = nil, city: [FacetItem]? = nil, state: [FacetItem]? = nil, engine: [FacetItem]? = nil, source: [FacetItem]? = nil, sellerName: [FacetItem]? = nil, dealerID: [FacetItem]? = nil) {
        self.year = year
        self.make = make
        self.model = model
        self.trim = trim
        self.bodyType = bodyType
        self.category = category
        self.subCategory = subCategory
        self.inventoryType = inventoryType
        self.drivetrain = drivetrain
        self.transmission = transmission
        self.cylinders = cylinders
        self.fuelType = fuelType
        self.exteriorColor = exteriorColor
        self.interiorColor = interiorColor
        self.city = city
        self.state = state
        self.engine = engine
        self.source = source
        self.sellerName = sellerName
        self.dealerID = dealerID
    }

    private enum CodingKeys: String, CodingKey {
        case year
        case make
        case model
        case trim
        case bodyType = "body_type"
        case category
        case subCategory = "sub_category"
        case inventoryType = "inventory_type"
        case drivetrain
        case transmission
        case cylinders
        case fuelType = "fuel_type"
        case exteriorColor = "exterior_color"
        case interiorColor = "interior_color"
        case city
        case state
        case engine
        case source
        case sellerName = "seller_name"
        case dealerID = "dealer_id"
    }
}

public struct HeavyEquipmentsSearchStats: Codable {
    public var price: StatsItem?
    public var miles: StatsItem?
    public var hoursUsed: StatsItem?

    public init(price: StatsItem? = nil, miles: StatsItem? = nil, hoursUsed: StatsItem? = nil) {
        self.price = price
        self.miles = miles
        self.hoursUsed = hoursUsed
    }

    private enum CodingKeys: String, CodingKey {
        case price
        case miles
        case hoursUsed = "hours_used"
    }
}

public struct RVSearchFacets: Codable {
    public var year: [FacetItem]?
    public var make: [FacetItem]?
    public var model: [FacetItem]?
    public var `class`: [FacetItem]?
    public var awnings: [FacetItem]?
    public var inventoryType: [FacetItem]?
    public var transmission: [FacetItem]?
    public var fuelType: [FacetItem]?
    public var length: [FacetItem]?
    public var area: [FacetItem]?
    public var sleeps: [FacetItem]?
    public var slideouts: [FacetItem]?
    public var exteriorColor: [FacetItem]?
    public var interiorColor: [FacetItem]?
    public var city: [FacetItem]?
    public var state: [FacetItem]?
    public var engine: [FacetItem]?
    public var source: [FacetItem]?
    public var sellerName: [FacetItem]?
    public var dealerID: [FacetItem]?

    public init(year: [FacetItem]? = nil, make: [FacetItem]? = nil, model: [FacetItem]? = nil, `class`: [FacetItem]? = nil, awnings: [FacetItem]? = nil, inventoryType: [FacetItem]? = nil, transmission: [FacetItem]? = nil, fuelType: [FacetItem]? = nil, length: [FacetItem]? = nil, area: [FacetItem]? = nil, sleeps: [FacetItem]? = nil, slideouts: [FacetItem]? = nil, exteriorColor: [FacetItem]? = nil, interiorColor: [FacetItem]? = nil, city: [FacetItem]? = nil, state: [FacetItem]? = nil, engine: [FacetItem]? = nil, source: [FacetItem]? = nil, sellerName: [FacetItem]? = nil, dealerID: [FacetItem]? = nil) {
        self.year = year
        self.make = make
        self.model = model
        self.class = `class`
        self.awnings = awnings
        self.inventoryType = inventoryType
        self.transmission = transmission
        self.fuelType = fuelType
        self.length = length
        self.area = area
        self.sleeps = sleeps
        self.slideouts = slideouts
        self.exteriorColor = exteriorColor
        self.interiorColor = interiorColor
        self.city = city
        self.state = state
        self.engine = engine
        self.source = source
        self.sellerName = sellerName
        self.dealerID = dealerID
    }

    private enum CodingKeys: String, CodingKey {
        case year
        case make
        case model
        case `class` = "class"
        case awnings
        case inventoryType = "inventory_type"
        case transmission
        case fuelType = "fuel_type"
        case length
        case area
        case sleeps
        case slideouts
        case exteriorColor = "exterior_color"
        case interiorColor = "interior_color"
        case city
        case state
        case engine
        case source
        case sellerName = "seller_name"
        case dealerID = "dealer_id"
    }
}

/// Represents a location
public struct Location: Codable {
    /// City of the listing
    public var city: String?
    /// State of the listing
    public var state: String?
    /// Zip of the listing
    public var zip: String?
    /// Latitude component of the location
    public var latitude: Double?
    /// Longitude component of the location
    public var longitude: Double?

    public init(city: String? = nil, state: String? = nil, zip: String? = nil, latitude: Double? = nil, longitude: Double? = nil) {
        self.city = city
        self.state = state
        self.zip = zip
        self.latitude = latitude
        self.longitude = longitude
    }
}

/// Represents a car history entry
public struct HistoricalListing: Codable {
    /// Unique identifier representing a specific listing from the Marketcheck database
    public var id: String?
    /// Listing title as displayed on the source website
    public var heading: String?
    /// VIN for the car
    public var vin: String?
    /// Asking price for the car
    public var price: Int?
    /// Odometer reading / reported miles usage for the car
    public var miles: Int?
    /// MSRP for the car
    public var msrp: Int?
    /// Data source of the listing
    public var dataSource: String?
    /// Certified car
    public var isCertified: Int?
    /// Flag to indicate listing is marked searchable or not
    public var isSearchable: String?
    /// Vehicle Details Page url of the specific car
    public var vdpURL: String?
    /// Flag to indicate whether listing is carfax_1_owner
    public var isCarfax1Owner: Bool?
    /// Flag to indicate whether listing is carfax_clean_title
    public var isCarfaxCleanTitle: Bool?
    /// Exterior color of the car
    public var exteriorColor: String?
    /// Interior color of the car
    public var interiorColor: String?
    /// Days on Market value for the car based on current and historical listings found in the Marketcheck database for this car
    public var dom: Int?
    /// Days on Market value for the car based on current and last 6 month listings found in the Marketcheck database for this car
    public var dom180: Int?
    /// Days on Market value for the car based on current and last 30 days listings found in the Marketcheck database for this car
    public var domActive: Int?
    /// Seller type for the car
    public var sellerType: String?
    /// Inventory type of car
    public var inventoryType: String?
    /// Stock number of car in dealers inventory
    public var stockNo: String?
    /// Listing last seen at (most recent) timestamp
    public var lastSeenAt: Int?
    /// Listing last seen at (most recent) date
    public var lastSeenAtDate: String?
    /// Listing last seen at date timestamp
    public var scrapedAt: Int?
    /// Listing last seen at date
    public var scrapedAtDate: String?
    /// Listing first seen at first scraped timestamp
    public var firstSeenAt: Int?
    /// Listing first seen at first scraped date
    public var firstSeenAtDate: String?
    /// Last reported price for the car. If the asking price value is not or is available then the last_price could perhaps be used. last_price is the price for the car listed on the source website as of last_price_dt date
    public var refPrice: String?
    /// The date at which the last price was reported online. This is earlier to last_seen_date
    public var refPriceDt: Int?
    /// Last Odometer reading / reported miles usage for the car. If the asking miles value is not or is available then the last_miles could perhaps be used. last_miles is the miles for the car listed on the source website as of last_miles_dt date
    public var refMiles: String?
    /// The date at which the last miles was reported online. This is earlier to last_seen_date
    public var refMilesDt: Int?
    /// Source domain of the listing
    public var source: String?
    /// Array of all finance offers for this listing
    public var financingOptions: [ListingFinance]?
    /// Array of all finance offers for this listing
    public var leasingOptions: [ListingLease]?
    /// Trim of the car
    public var trimR: String?
    /// Seller name of the listing from the Marketcheck database
    public var sellerName: String?
    /// Seller name of the listing from the Marketcheck database
    public var sellerNameO: String?
    /// Street of the listing
    public var street: String?
    /// City of the listing
    public var city: String?
    /// State of the listing
    public var state: String?
    /// Zip of the listing
    public var zip: String?
    /// Latitude of the listing
    public var latitude: String?
    /// Longitude of the listing
    public var longitude: String?
    /// Unique MC assigned dealers id for the listing
    public var dealerID: Int?
    /// Timestamp of status date
    public var statusDate: Int?

    public init(id: String? = nil, heading: String? = nil, vin: String? = nil, price: Int? = nil, miles: Int? = nil, msrp: Int? = nil, dataSource: String? = nil, isCertified: Int? = nil, isSearchable: String? = nil, vdpURL: String? = nil, isCarfax1Owner: Bool? = nil, isCarfaxCleanTitle: Bool? = nil, exteriorColor: String? = nil, interiorColor: String? = nil, dom: Int? = nil, dom180: Int? = nil, domActive: Int? = nil, sellerType: String? = nil, inventoryType: String? = nil, stockNo: String? = nil, lastSeenAt: Int? = nil, lastSeenAtDate: String? = nil, scrapedAt: Int? = nil, scrapedAtDate: String? = nil, firstSeenAt: Int? = nil, firstSeenAtDate: String? = nil, refPrice: String? = nil, refPriceDt: Int? = nil, refMiles: String? = nil, refMilesDt: Int? = nil, source: String? = nil, financingOptions: [ListingFinance]? = nil, leasingOptions: [ListingLease]? = nil, trimR: String? = nil, sellerName: String? = nil, sellerNameO: String? = nil, street: String? = nil, city: String? = nil, state: String? = nil, zip: String? = nil, latitude: String? = nil, longitude: String? = nil, dealerID: Int? = nil, statusDate: Int? = nil) {
        self.id = id
        self.heading = heading
        self.vin = vin
        self.price = price
        self.miles = miles
        self.msrp = msrp
        self.dataSource = dataSource
        self.isCertified = isCertified
        self.isSearchable = isSearchable
        self.vdpURL = vdpURL
        self.isCarfax1Owner = isCarfax1Owner
        self.isCarfaxCleanTitle = isCarfaxCleanTitle
        self.exteriorColor = exteriorColor
        self.interiorColor = interiorColor
        self.dom = dom
        self.dom180 = dom180
        self.domActive = domActive
        self.sellerType = sellerType
        self.inventoryType = inventoryType
        self.stockNo = stockNo
        self.lastSeenAt = lastSeenAt
        self.lastSeenAtDate = lastSeenAtDate
        self.scrapedAt = scrapedAt
        self.scrapedAtDate = scrapedAtDate
        self.firstSeenAt = firstSeenAt
        self.firstSeenAtDate = firstSeenAtDate
        self.refPrice = refPrice
        self.refPriceDt = refPriceDt
        self.refMiles = refMiles
        self.refMilesDt = refMilesDt
        self.source = source
        self.financingOptions = financingOptions
        self.leasingOptions = leasingOptions
        self.trimR = trimR
        self.sellerName = sellerName
        self.sellerNameO = sellerNameO
        self.street = street
        self.city = city
        self.state = state
        self.zip = zip
        self.latitude = latitude
        self.longitude = longitude
        self.dealerID = dealerID
        self.statusDate = statusDate
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case heading
        case vin
        case price
        case miles
        case msrp
        case dataSource = "data_source"
        case isCertified = "is_certified"
        case isSearchable = "is_searchable"
        case vdpURL = "vdp_url"
        case isCarfax1Owner = "carfax_1_owner"
        case isCarfaxCleanTitle = "carfax_clean_title"
        case exteriorColor = "exterior_color"
        case interiorColor = "interior_color"
        case dom
        case dom180 = "dom_180"
        case domActive = "dom_active"
        case sellerType = "seller_type"
        case inventoryType = "inventory_type"
        case stockNo = "stock_no"
        case lastSeenAt = "last_seen_at"
        case lastSeenAtDate = "last_seen_at_date"
        case scrapedAt = "scraped_at"
        case scrapedAtDate = "scraped_at_date"
        case firstSeenAt = "first_seen_at"
        case firstSeenAtDate = "first_seen_at_date"
        case refPrice = "ref_price"
        case refPriceDt = "ref_price_dt"
        case refMiles = "ref_miles"
        case refMilesDt = "ref_miles_dt"
        case source
        case financingOptions = "financing_options"
        case leasingOptions = "leasing_options"
        case trimR = "trim_r"
        case sellerName = "seller_name"
        case sellerNameO = "seller_name_o"
        case street
        case city
        case state
        case zip
        case latitude
        case longitude
        case dealerID = "dealer_id"
        case statusDate = "status_date"
    }
}

/// Describes the VDP (Vehicle Details Page) HTML object
public struct ListingVDP: Codable {
    /// The HTML string for the listing web page
    public var html: String?
    /// The timestamp indicating the time when the VDP was cached
    public var crawledAt: Double?
    /// The URL of the VDP
    public var vdpURL: String?

    public init(html: String? = nil, crawledAt: Double? = nil, vdpURL: String? = nil) {
        self.html = html
        self.crawledAt = crawledAt
        self.vdpURL = vdpURL
    }

    private enum CodingKeys: String, CodingKey {
        case html
        case crawledAt = "crawled_at"
        case vdpURL = "vdp_url"
    }
}

/// Describes the Safety Ratings of current listing
public struct SafetyRating: Codable {
    /// Overall rating of the Listing on scale 1-5
    public var overallRating: Double?
    /// Roll Over rating of the Listing on scale 1-5
    public var rollOverRating: Double?
    /// Driver Side rating of the Listing on scale 1-5
    public var driverSideRating: Double?
    /// Driver front rating of the Listing on scale 1-5
    public var driverFrontRating: Double?
    /// Passenger front rating of the Listing on scale 1-5
    public var passengerFrontRating: Double?

    public init(overallRating: Double? = nil, rollOverRating: Double? = nil, driverSideRating: Double? = nil, driverFrontRating: Double? = nil, passengerFrontRating: Double? = nil) {
        self.overallRating = overallRating
        self.rollOverRating = rollOverRating
        self.driverSideRating = driverSideRating
        self.driverFrontRating = driverFrontRating
        self.passengerFrontRating = passengerFrontRating
    }

    private enum CodingKeys: String, CodingKey {
        case overallRating = "overall_rating"
        case rollOverRating = "roll_over_rating"
        case driverSideRating = "driver_side_rating"
        case driverFrontRating = "driver_front_rating"
        case passengerFrontRating = "passenger_front_rating"
    }
}

/// Describes the dealer landing page (SRP) HTML object
public struct DealerLandingPage: Codable {
    /// The HTML string for the listing web page
    public var html: String?
    /// The timestamp indicating the time when the SRP was cached
    public var crawledAt: Double?
    /// The URL of the SRP
    public var srpURL: String?

    public init(html: String? = nil, crawledAt: Double? = nil, srpURL: String? = nil) {
        self.html = html
        self.crawledAt = crawledAt
        self.srpURL = srpURL
    }

    private enum CodingKeys: String, CodingKey {
        case html
        case crawledAt = "crawled_at"
        case srpURL = "srp_url"
    }
}

/// Describes the Car specification
public struct Build: Codable {
    /// Year of the Car
    public var year: Int?
    /// Car Make
    public var make: String?
    /// Car model
    public var model: String?
    /// Trim of the car
    public var trim: String?
    /// Short trim of the car
    public var shortTrim: String?
    /// Body type of the car
    public var bodyType: String?
    /// Body subtype of the car
    public var bodySubtype: String?
    /// Vehicle type of the car
    public var vehicleType: String?
    /// Transmission of the car
    public var transmission: String?
    /// Drivetrain of the car
    public var drivetrain: String?
    /// Fuel type of the car
    public var fuelType: String?
    /// Engine of the car
    public var engine: String?
    /// Engine size of the car
    public var engineSize: Double?
    /// Engine block of the car
    public var engineBlock: String?
    /// No of doors of the car
    public var doors: Int?
    /// No of cylinders of the car
    public var cylinders: Int?
    /// Made in of the car
    public var madeIn: String?
    /// Steering type of the car
    public var steeringType: String?
    /// Antibrake system of the car
    public var antibrakeSys: String?
    /// Tank size of the car
    public var tankSize: String?
    /// Overall height of the car
    public var overallHeight: String?
    /// Overall length of the car
    public var overallLength: String?
    /// Overall width of the car
    public var overallWidth: String?
    /// Std seating of the car
    public var stdSeating: String?
    /// Opt seating of the car
    public var optSeating: String?
    /// Highway miles of the car
    public var highwayMiles: String?
    /// City miles of the car
    public var cityMiles: String?
    /// Engine block of the car
    public var engineMeasure: String?
    /// Engine aspiration of the car
    public var engineAspiration: String?
    /// Trim_r of the car
    public var trimR: String?

    public init(year: Int? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, shortTrim: String? = nil, bodyType: String? = nil, bodySubtype: String? = nil, vehicleType: String? = nil, transmission: String? = nil, drivetrain: String? = nil, fuelType: String? = nil, engine: String? = nil, engineSize: Double? = nil, engineBlock: String? = nil, doors: Int? = nil, cylinders: Int? = nil, madeIn: String? = nil, steeringType: String? = nil, antibrakeSys: String? = nil, tankSize: String? = nil, overallHeight: String? = nil, overallLength: String? = nil, overallWidth: String? = nil, stdSeating: String? = nil, optSeating: String? = nil, highwayMiles: String? = nil, cityMiles: String? = nil, engineMeasure: String? = nil, engineAspiration: String? = nil, trimR: String? = nil) {
        self.year = year
        self.make = make
        self.model = model
        self.trim = trim
        self.shortTrim = shortTrim
        self.bodyType = bodyType
        self.bodySubtype = bodySubtype
        self.vehicleType = vehicleType
        self.transmission = transmission
        self.drivetrain = drivetrain
        self.fuelType = fuelType
        self.engine = engine
        self.engineSize = engineSize
        self.engineBlock = engineBlock
        self.doors = doors
        self.cylinders = cylinders
        self.madeIn = madeIn
        self.steeringType = steeringType
        self.antibrakeSys = antibrakeSys
        self.tankSize = tankSize
        self.overallHeight = overallHeight
        self.overallLength = overallLength
        self.overallWidth = overallWidth
        self.stdSeating = stdSeating
        self.optSeating = optSeating
        self.highwayMiles = highwayMiles
        self.cityMiles = cityMiles
        self.engineMeasure = engineMeasure
        self.engineAspiration = engineAspiration
        self.trimR = trimR
    }

    private enum CodingKeys: String, CodingKey {
        case year
        case make
        case model
        case trim
        case shortTrim = "short_trim"
        case bodyType = "body_type"
        case bodySubtype = "body_subtype"
        case vehicleType = "vehicle_type"
        case transmission
        case drivetrain
        case fuelType = "fuel_type"
        case engine
        case engineSize = "engine_size"
        case engineBlock = "engine_block"
        case doors
        case cylinders
        case madeIn = "made_in"
        case steeringType = "steering_type"
        case antibrakeSys = "antibrake_sys"
        case tankSize = "tank_size"
        case overallHeight = "overall_height"
        case overallLength = "overall_length"
        case overallWidth = "overall_width"
        case stdSeating = "std_seating"
        case optSeating = "opt_seating"
        case highwayMiles = "highway_miles"
        case cityMiles = "city_miles"
        case engineMeasure = "engine_measure"
        case engineAspiration = "engine_aspiration"
        case trimR = "trim_r"
    }
}

public struct Averages: Codable {
    /// Mean price value for the car
    public var price: Double?
    /// Mean msrp value for the car
    public var msrp: Double?
    /// Mean miles value for the car
    public var miles: Double?
    /// Average Days on Market value for the car based on all listings found in the Marketcheck database for this car
    public var dom: Double?
    /// Average age of the car
    public var age: Double?
    /// No of units for this car on the market
    public var units: Double?

    public init(price: Double? = nil, msrp: Double? = nil, miles: Double? = nil, dom: Double? = nil, age: Double? = nil, units: Double? = nil) {
        self.price = price
        self.msrp = msrp
        self.miles = miles
        self.dom = dom
        self.age = age
        self.units = units
    }
}

public struct ListingFinance: Codable {
    /// Loan term for this finance offer
    public var loanTerm: Int?
    /// Loan APR for this finance offer
    public var loanApr: Double?
    /// Down payment for this finance offer
    public var downPayment: Double?
    /// Down payment percentage for this finance offer
    public var downPaymentPercentage: Double?
    /// Estimated monthly payment for this finance offer
    public var estimatedMonthlyPayment: Double?

    public init(loanTerm: Int? = nil, loanApr: Double? = nil, downPayment: Double? = nil, downPaymentPercentage: Double? = nil, estimatedMonthlyPayment: Double? = nil) {
        self.loanTerm = loanTerm
        self.loanApr = loanApr
        self.downPayment = downPayment
        self.downPaymentPercentage = downPaymentPercentage
        self.estimatedMonthlyPayment = estimatedMonthlyPayment
    }

    private enum CodingKeys: String, CodingKey {
        case loanTerm = "loan_term"
        case loanApr = "loan_apr"
        case downPayment = "down_payment"
        case downPaymentPercentage = "down_payment_percentage"
        case estimatedMonthlyPayment = "estimated_monthly_payment"
    }
}

public struct ListingLease: Codable {
    /// Lease term for this lease offer
    public var leaseTerm: Int?
    /// Down payment for this lease offer
    public var downPayment: Double?
    /// Estimated monthly payment for this lease offer
    public var estimatedMonthlyPayment: Double?

    public init(leaseTerm: Int? = nil, downPayment: Double? = nil, estimatedMonthlyPayment: Double? = nil) {
        self.leaseTerm = leaseTerm
        self.downPayment = downPayment
        self.estimatedMonthlyPayment = estimatedMonthlyPayment
    }

    private enum CodingKeys: String, CodingKey {
        case leaseTerm = "lease_term"
        case downPayment = "down_payment"
        case estimatedMonthlyPayment = "estimated_monthly_payment"
    }
}

public struct ListingNestMedia: Codable {
    /// A list of photo urls for the car
    public var photoLinks: [String]?

    public init(photoLinks: [String]? = nil) {
        self.photoLinks = photoLinks
    }

    private enum CodingKeys: String, CodingKey {
        case photoLinks = "photo_links"
    }
}

public struct ListingMedia: Codable {
    /// Unique identifier representing a specific listing from the Marketcheck database
    public var id: String?
    /// Single photo url of the car
    public var photoURL: String?
    /// A list of photo urls for the car
    public var photoLinks: [String]?

    public init(id: String? = nil, photoURL: String? = nil, photoLinks: [String]? = nil) {
        self.id = id
        self.photoURL = photoURL
        self.photoLinks = photoLinks
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case photoURL = "photo_url"
        case photoLinks = "photo_links"
    }
}

public struct ListingNestExtraAttributes: Codable {
    /// Installed Options of the car
    public var options: [String]?
    /// List of Features available with the car
    public var features: [String]?
    /// List of electronic features available with the car
    public var electronicsF: [String]?
    /// List of exterior features available with the car
    public var exteriorF: [String]?
    /// List of technical features available with the car
    public var technicalF: [String]?
    /// List of standard features available with the car
    public var standardF: [String]?
    /// List of dealer added features available with the car
    public var dealerAddedF: [String]?
    /// List of interior features available with the car
    public var interiorF: [String]?
    /// List of safety features available with the car
    public var safetyF: [String]?
    /// Seller comments for the car
    public var sellerComments: String?

    public init(options: [String]? = nil, features: [String]? = nil, electronicsF: [String]? = nil, exteriorF: [String]? = nil, technicalF: [String]? = nil, standardF: [String]? = nil, dealerAddedF: [String]? = nil, interiorF: [String]? = nil, safetyF: [String]? = nil, sellerComments: String? = nil) {
        self.options = options
        self.features = features
        self.electronicsF = electronicsF
        self.exteriorF = exteriorF
        self.technicalF = technicalF
        self.standardF = standardF
        self.dealerAddedF = dealerAddedF
        self.interiorF = interiorF
        self.safetyF = safetyF
        self.sellerComments = sellerComments
    }

    private enum CodingKeys: String, CodingKey {
        case options
        case features
        case electronicsF = "electronics_f"
        case exteriorF = "exterior_f"
        case technicalF = "technical_f"
        case standardF = "standard_f"
        case dealerAddedF = "dealer_added_f"
        case interiorF = "interior_f"
        case safetyF = "safety_f"
        case sellerComments = "seller_comments"
    }
}

public struct ListingExtraAttributes: Codable {
    /// Unique identifier representing a specific listing from the Marketcheck database
    public var id: String?
    /// Installed Options of the car
    public var options: [String]?
    /// List of Features available with the car
    public var features: [String]?
    /// List of electronic features available with the car
    public var electronicsF: [String]?
    /// List of exterior features available with the car
    public var exteriorF: [String]?
    /// List of technical features available with the car
    public var technicalF: [String]?
    /// List of standard features available with the car
    public var standardF: [String]?
    /// List of dealer added features available with the car
    public var dealerAddedF: [String]?
    /// List of interior features available with the car
    public var interiorF: [String]?
    /// List of safety features available with the car
    public var safetyF: [String]?
    /// Seller comment for the car
    public var sellerCmts: String?

    public init(id: String? = nil, options: [String]? = nil, features: [String]? = nil, electronicsF: [String]? = nil, exteriorF: [String]? = nil, technicalF: [String]? = nil, standardF: [String]? = nil, dealerAddedF: [String]? = nil, interiorF: [String]? = nil, safetyF: [String]? = nil, sellerCmts: String? = nil) {
        self.id = id
        self.options = options
        self.features = features
        self.electronicsF = electronicsF
        self.exteriorF = exteriorF
        self.technicalF = technicalF
        self.standardF = standardF
        self.dealerAddedF = dealerAddedF
        self.interiorF = interiorF
        self.safetyF = safetyF
        self.sellerCmts = sellerCmts
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case options
        case features
        case electronicsF = "electronics_f"
        case exteriorF = "exterior_f"
        case technicalF = "technical_f"
        case standardF = "standard_f"
        case dealerAddedF = "dealer_added_f"
        case interiorF = "interior_f"
        case safetyF = "safety_f"
        case sellerCmts = "seller_cmts"
    }
}

public struct ListingDebugAttributes: Codable {
    /// Robot id
    public var robotID: Double?
    /// Cycle id
    public var cycleID: Double?
    /// Scraped date and time
    public var scrapedAt: String?
    /// Template id
    public var templateID: Double?
    /// User id
    public var userID: Double?
    /// Taxonomy vin
    public var taxonomyVin: String?

    public init(robotID: Double? = nil, cycleID: Double? = nil, scrapedAt: String? = nil, templateID: Double? = nil, userID: Double? = nil, taxonomyVin: String? = nil) {
        self.robotID = robotID
        self.cycleID = cycleID
        self.scrapedAt = scrapedAt
        self.templateID = templateID
        self.userID = userID
        self.taxonomyVin = taxonomyVin
    }

    private enum CodingKeys: String, CodingKey {
        case robotID = "robot_id"
        case cycleID = "cycle_id"
        case scrapedAt = "scraped_at"
        case templateID = "template_id"
        case userID = "user_id"
        case taxonomyVin = "taxonomy_vin"
    }
}

/// Dealers Response
public struct DealersResponse: Codable {
    /// Number of dealers found
    public var numFound: Int?
    public var dealers: [Dealer]?

    public init(numFound: Int? = nil, dealers: [Dealer]? = nil) {
        self.numFound = numFound
        self.dealers = dealers
    }

    private enum CodingKeys: String, CodingKey {
        case numFound = "num_found"
        case dealers
    }
}

public struct Dealer: Codable {
    /// The unique id associated with the dealer in the Marketcheck database
    public var id: String?
    /// Name of the dealer
    public var sellerName: String?
    /// Website of the dealer
    public var inventoryURL: String?
    /// Datasource of the dealer
    public var dataSource: String?
    /// Status of the dealer
    public var status: String?
    /// Street of the dealer
    public var street: String?
    /// City of the dealer
    public var city: String?
    /// State of the dealer
    public var state: String?
    /// Country of the dealer
    public var country: String?
    /// Zip of the dealer
    public var zip: String?
    /// Latutide for the dealer location
    public var latitude: String?
    /// Longitude for the dealer location
    public var longitude: String?
    /// Location_ll for the dealer location
    public var locationLl: String?
    /// Contact no of the dealer
    public var sellerPhone: String?
    /// Contact email of the dealer
    public var sellerEmail: String?
    /// Distance of dealer from given location
    public var distance: Double?

    public init(id: String? = nil, sellerName: String? = nil, inventoryURL: String? = nil, dataSource: String? = nil, status: String? = nil, street: String? = nil, city: String? = nil, state: String? = nil, country: String? = nil, zip: String? = nil, latitude: String? = nil, longitude: String? = nil, locationLl: String? = nil, sellerPhone: String? = nil, sellerEmail: String? = nil, distance: Double? = nil) {
        self.id = id
        self.sellerName = sellerName
        self.inventoryURL = inventoryURL
        self.dataSource = dataSource
        self.status = status
        self.street = street
        self.city = city
        self.state = state
        self.country = country
        self.zip = zip
        self.latitude = latitude
        self.longitude = longitude
        self.locationLl = locationLl
        self.sellerPhone = sellerPhone
        self.sellerEmail = sellerEmail
        self.distance = distance
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case sellerName = "seller_name"
        case inventoryURL = "inventory_url"
        case dataSource = "data_source"
        case status
        case street
        case city
        case state
        case country
        case zip
        case latitude
        case longitude
        case locationLl = "location_ll"
        case sellerPhone = "seller_phone"
        case sellerEmail = "seller_email"
        case distance
    }
}

public struct NestDealer: Codable {
    /// The unique id associated with the dealer in the Marketcheck database
    public var id: Int?
    /// Name of the dealer
    public var name: String?
    /// Website of the dealer
    public var website: String?
    /// Type of dealer (franchise/independent)
    public var dealerType: String?
    /// Street of the dealer
    public var street: String?
    /// City of the dealer
    public var city: String?
    /// State of the dealer
    public var state: String?
    /// Country of the dealer
    public var country: String?
    /// Zip of the dealer
    public var zip: String?
    /// Latutide for the dealer location
    public var latitude: String?
    /// Longitude for the dealer location
    public var longitude: String?
    /// Contact no of the dealer
    public var phone: String?
    /// Contact email of the dealer
    public var sellerEmail: String?

    public init(id: Int? = nil, name: String? = nil, website: String? = nil, dealerType: String? = nil, street: String? = nil, city: String? = nil, state: String? = nil, country: String? = nil, zip: String? = nil, latitude: String? = nil, longitude: String? = nil, phone: String? = nil, sellerEmail: String? = nil) {
        self.id = id
        self.name = name
        self.website = website
        self.dealerType = dealerType
        self.street = street
        self.city = city
        self.state = state
        self.country = country
        self.zip = zip
        self.latitude = latitude
        self.longitude = longitude
        self.phone = phone
        self.sellerEmail = sellerEmail
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case name
        case website
        case dealerType = "dealer_type"
        case street
        case city
        case state
        case country
        case zip
        case latitude
        case longitude
        case phone
        case sellerEmail = "seller_email"
    }
}

public struct TrendPoint: Codable {
    /// Price
    public var price: Double?
    /// Miles
    public var miles: Double?
    /// Days on Market
    public var dom: Double?
    /// Units
    public var units: Double?
    /// MSRP
    public var msrp: Double?

    public init(price: Double? = nil, miles: Double? = nil, dom: Double? = nil, units: Double? = nil, msrp: Double? = nil) {
        self.price = price
        self.miles = miles
        self.dom = dom
        self.units = units
        self.msrp = msrp
    }
}

public struct ComparisonPoint: Codable {
    /// Similar Vehicles Count
    public var similarVehiclesCount: Double?
    /// Deal Indicator
    public var dealerIndicator: String?
    /// Price for Vin
    public var vinPrice: Double?
    /// Fair Deal Price
    public var fairDealPrice: Double?

    public init(similarVehiclesCount: Double? = nil, dealerIndicator: String? = nil, vinPrice: Double? = nil, fairDealPrice: Double? = nil) {
        self.similarVehiclesCount = similarVehiclesCount
        self.dealerIndicator = dealerIndicator
        self.vinPrice = vinPrice
        self.fairDealPrice = fairDealPrice
    }

    private enum CodingKeys: String, CodingKey {
        case similarVehiclesCount = "similar_vehicles_count"
        case dealerIndicator = "dealer_indicator"
        case vinPrice = "vin_price"
        case fairDealPrice = "fair_deal_price"
    }
}

public struct CompetitorsPoint: Codable {
    public var currentCar: CompetitorsCarDetails?
    public var similarCarModels: [CompetitorsSimilarCars]?
    public var sameCarModels: [CompetitorsSameCars]?

    public init(currentCar: CompetitorsCarDetails? = nil, similarCarModels: [CompetitorsSimilarCars]? = nil, sameCarModels: [CompetitorsSameCars]? = nil) {
        self.currentCar = currentCar
        self.similarCarModels = similarCarModels
        self.sameCarModels = sameCarModels
    }

    private enum CodingKeys: String, CodingKey {
        case currentCar = "current_car"
        case similarCarModels = "similar_car_models"
        case sameCarModels = "same_car_models"
    }
}

public struct DepreciationPoint: Codable {
    public var similarModels: [DepreciationStats]?

    public init(similarModels: [DepreciationStats]? = nil) {
        self.similarModels = similarModels
    }

    private enum CodingKeys: String, CodingKey {
        case similarModels = "similar_models"
    }
}

public struct DealerRating: Codable {
    /// Name of the dealer
    public var name: String?
    /// Street of the dealer
    public var street: String?
    /// City of the dealer
    public var city: String?
    /// State of the dealer
    public var state: String?
    /// Zip of the dealer
    public var zip: String?
    /// Latutide for the dealer location
    public var latitude: String?
    /// Longitude for the dealer location
    public var longitude: String?
    /// Overall rating of the dealership on scale 1-5
    public var overallRating: Double?
    public var ratingComponents: [RatingComponents]?

    public init(name: String? = nil, street: String? = nil, city: String? = nil, state: String? = nil, zip: String? = nil, latitude: String? = nil, longitude: String? = nil, overallRating: Double? = nil, ratingComponents: [RatingComponents]? = nil) {
        self.name = name
        self.street = street
        self.city = city
        self.state = state
        self.zip = zip
        self.latitude = latitude
        self.longitude = longitude
        self.overallRating = overallRating
        self.ratingComponents = ratingComponents
    }

    private enum CodingKeys: String, CodingKey {
        case name
        case street
        case city
        case state
        case zip
        case latitude
        case longitude
        case overallRating = "overall_rating"
        case ratingComponents = "rating_components"
    }
}

public struct RatingComponents: Codable {
    /// Specifices rating condition parameter
    public var ratingCondition: String?
    /// Rating of car on that condition
    public var actualRating: Double?

    public init(ratingCondition: String? = nil, actualRating: Double? = nil) {
        self.ratingCondition = ratingCondition
        self.actualRating = actualRating
    }

    private enum CodingKeys: String, CodingKey {
        case ratingCondition = "rating_condition"
        case actualRating = "actual_rating"
    }
}

public struct DealerReview: Codable {
    /// Name of the dealer
    public var name: String?
    /// Street of the dealer
    public var street: String?
    /// City of the dealer
    public var city: String?
    /// State of the dealer
    public var state: String?
    /// Zip of the dealer
    public var zip: String?
    /// Latutide for the dealer location
    public var latitude: String?
    /// Longitude for the dealer location
    public var longitude: String?
    /// Overall reviews of the dealership
    public var overallReviews: Double?
    public var reviewComponents: [ReviewComponents]?

    public init(name: String? = nil, street: String? = nil, city: String? = nil, state: String? = nil, zip: String? = nil, latitude: String? = nil, longitude: String? = nil, overallReviews: Double? = nil, reviewComponents: [ReviewComponents]? = nil) {
        self.name = name
        self.street = street
        self.city = city
        self.state = state
        self.zip = zip
        self.latitude = latitude
        self.longitude = longitude
        self.overallReviews = overallReviews
        self.reviewComponents = reviewComponents
    }

    private enum CodingKeys: String, CodingKey {
        case name
        case street
        case city
        case state
        case zip
        case latitude
        case longitude
        case overallReviews = "overall_reviews"
        case reviewComponents = "review_components"
    }
}

public struct ReviewComponents: Codable {
    /// Name of user who has given review
    public var userName: String?
    /// Rating for dealer given by user ranging from 1-5
    public var userRating: Double?
    /// Review of car given by current user
    public var actualReview: String?

    public init(userName: String? = nil, userRating: Double? = nil, actualReview: String? = nil) {
        self.userName = userName
        self.userRating = userRating
        self.actualReview = actualReview
    }

    private enum CodingKeys: String, CodingKey {
        case userName = "user_name"
        case userRating = "user_rating"
        case actualReview = "actual_review"
    }
}

public struct FuelEfficiency: Codable {
    /// City Mileage in MPG
    public var cityMileage: String?
    /// Highway Mileage in MPG
    public var highwayMileage: String?
    /// Combined Mileage
    public var combinedMileage: String?
    /// Annual Miles of Car
    public var annualMiles: Double?
    /// Monthly fuel expense
    public var monthlyFuelExpense: Double?

    public init(cityMileage: String? = nil, highwayMileage: String? = nil, combinedMileage: String? = nil, annualMiles: Double? = nil, monthlyFuelExpense: Double? = nil) {
        self.cityMileage = cityMileage
        self.highwayMileage = highwayMileage
        self.combinedMileage = combinedMileage
        self.annualMiles = annualMiles
        self.monthlyFuelExpense = monthlyFuelExpense
    }

    private enum CodingKeys: String, CodingKey {
        case cityMileage = "city_mileage"
        case highwayMileage = "highway_mileage"
        case combinedMileage = "combined_mileage"
        case annualMiles = "annual_miles"
        case monthlyFuelExpense = "monthly_fuel_expense"
    }
}

public struct Economy: Codable {
    /// Show vehicle impact on climate change in terms of greeenhouse gases. This rating will be in the range of 1 - 10
    public var ghgEmissionsRating: Double?
    /// Contains text like bad|Good|Very Good| Excellent
    public var ghgEmissionsIndicator: String?
    /// Shows vehicle's emissions of pollutants known to cause smog and other forms of air pollution. This rating will be in the range of 1 - 10
    public var smogRating: Double?
    /// Contains text like bad|Good|Very Good| Excellent
    public var smogIndicator: String?

    public init(ghgEmissionsRating: Double? = nil, ghgEmissionsIndicator: String? = nil, smogRating: Double? = nil, smogIndicator: String? = nil) {
        self.ghgEmissionsRating = ghgEmissionsRating
        self.ghgEmissionsIndicator = ghgEmissionsIndicator
        self.smogRating = smogRating
        self.smogIndicator = smogIndicator
    }

    private enum CodingKeys: String, CodingKey {
        case ghgEmissionsRating = "ghg_emissions_rating"
        case ghgEmissionsIndicator = "ghg_emissions_indicator"
        case smogRating = "smog_rating"
        case smogIndicator = "smog_indicator"
    }
}

public struct VinReport: Codable {
    /// Icon url
    public var icon: String?
    /// Some descriptional text
    public var someText: String?

    public init(icon: String? = nil, someText: String? = nil) {
        self.icon = icon
        self.someText = someText
    }

    private enum CodingKeys: String, CodingKey {
        case icon
        case someText = "some_text"
    }
}

public struct CompetitorsCarDetails: Codable {
    /// Current car name
    public var name: String?
    /// Price of car
    public var price: String?
    /// Mileage of car
    public var miles: String?
    /// Estimated market value
    public var avgMarketValue: String?

    public init(name: String? = nil, price: String? = nil, miles: String? = nil, avgMarketValue: String? = nil) {
        self.name = name
        self.price = price
        self.miles = miles
        self.avgMarketValue = avgMarketValue
    }

    private enum CodingKeys: String, CodingKey {
        case name
        case price
        case miles
        case avgMarketValue = "avg_market_value"
    }
}

public struct CompetitorsSimilarCars: Codable {
    /// Ymm_comb_name
    public var name: String?
    /// Average price of year make model combination
    public var avgPrice: Double?
    /// Average mileage of year make model combination
    public var avgMiles: Double?
    /// Average market value of year make model combination
    public var avgMarketValue: Double?

    public init(name: String? = nil, avgPrice: Double? = nil, avgMiles: Double? = nil, avgMarketValue: Double? = nil) {
        self.name = name
        self.avgPrice = avgPrice
        self.avgMiles = avgMiles
        self.avgMarketValue = avgMarketValue
    }

    private enum CodingKeys: String, CodingKey {
        case name
        case avgPrice = "avg_price"
        case avgMiles = "avg_miles"
        case avgMarketValue = "avg_market_value"
    }
}

public struct CompetitorsSameCars: Codable {
    /// Ymm_comb_name
    public var name: String?
    /// Price of year make model combination
    public var avgPrice: Double?
    /// Mileage of year make model combination
    public var avgMiles: Double?
    /// Estimated market value of year make model combination
    public var avgMarketValue: Double?

    public init(name: String? = nil, avgPrice: Double? = nil, avgMiles: Double? = nil, avgMarketValue: Double? = nil) {
        self.name = name
        self.avgPrice = avgPrice
        self.avgMiles = avgMiles
        self.avgMarketValue = avgMarketValue
    }

    private enum CodingKeys: String, CodingKey {
        case name
        case avgPrice = "avg_price"
        case avgMiles = "avg_miles"
        case avgMarketValue = "avg_market_value"
    }
}

public struct DepreciationStats: Codable {
    /// Ymm_comb_name
    public var name: String?
    /// Price of year make model combination
    public var currentValue: Double?
    /// Price after one year from now
    public var oneYearFromNow: Double?
    /// Price depreciation percent after one year from now
    public var oneYearFromNowPercent: Double?
    /// Price after two year from now
    public var twoYearFromNow: Double?
    /// Price depreciation percent after two year from now
    public var twoYearFromNowPercent: Double?
    /// Price after five year from now
    public var fiveYearFromNow: Double?
    /// Price depreciation percent after five year from now
    public var fiveYearFromNowPercent: Double?

    public init(name: String? = nil, currentValue: Double? = nil, oneYearFromNow: Double? = nil, oneYearFromNowPercent: Double? = nil, twoYearFromNow: Double? = nil, twoYearFromNowPercent: Double? = nil, fiveYearFromNow: Double? = nil, fiveYearFromNowPercent: Double? = nil) {
        self.name = name
        self.currentValue = currentValue
        self.oneYearFromNow = oneYearFromNow
        self.oneYearFromNowPercent = oneYearFromNowPercent
        self.twoYearFromNow = twoYearFromNow
        self.twoYearFromNowPercent = twoYearFromNowPercent
        self.fiveYearFromNow = fiveYearFromNow
        self.fiveYearFromNowPercent = fiveYearFromNowPercent
    }

    private enum CodingKeys: String, CodingKey {
        case name
        case currentValue = "current_value"
        case oneYearFromNow = "one_year_from_now"
        case oneYearFromNowPercent = "one_year_from_now_percent"
        case twoYearFromNow = "two_year_from_now"
        case twoYearFromNowPercent = "two_year_from_now_percent"
        case fiveYearFromNow = "five_year_from_now"
        case fiveYearFromNowPercent = "five_year_from_now_percent"
    }
}

public struct PlotPoint: Codable {
    /// Price
    public var price: Double?
    /// Miles
    public var miles: Double?
    /// Vin
    public var vin: String?
    /// Msrp
    public var msrp: Double?
    /// DOM
    public var dom: Double?
    /// Seller name
    public var sellerName: String?
    /// Listing id
    public var id: String?

    public init(price: Double? = nil, miles: Double? = nil, vin: String? = nil, msrp: Double? = nil, dom: Double? = nil, sellerName: String? = nil, id: String? = nil) {
        self.price = price
        self.miles = miles
        self.vin = vin
        self.msrp = msrp
        self.dom = dom
        self.sellerName = sellerName
        self.id = id
    }

    private enum CodingKeys: String, CodingKey {
        case price
        case miles
        case vin
        case msrp
        case dom
        case sellerName = "seller_name"
        case id
    }
}

/// Describes Market days supply results for year make model trim combination
public struct Mds: Codable {
    /// Provides Market days supply count
    public var mds: Int?
    /// Active cars for ymmt combination
    public var totalActiveCarsForYmmt: Int?
    /// Cars sold in last 45 days
    public var totalCarsSoldInLast45Days: Int?
    /// Sold vins array
    public var soldVins: [String]?
    /// Year of vin provided
    public var year: Int?
    /// Make of vin provided
    public var make: String?
    /// Model of vin provided
    public var model: String?
    /// Trim of vin provided
    public var trim: String?

    public init(mds: Int? = nil, totalActiveCarsForYmmt: Int? = nil, totalCarsSoldInLast45Days: Int? = nil, soldVins: [String]? = nil, year: Int? = nil, make: String? = nil, model: String? = nil, trim: String? = nil) {
        self.mds = mds
        self.totalActiveCarsForYmmt = totalActiveCarsForYmmt
        self.totalCarsSoldInLast45Days = totalCarsSoldInLast45Days
        self.soldVins = soldVins
        self.year = year
        self.make = make
        self.model = model
        self.trim = trim
    }

    private enum CodingKeys: String, CodingKey {
        case mds
        case totalActiveCarsForYmmt = "total_active_cars_for_ymmt"
        case totalCarsSoldInLast45Days = "total_cars_sold_in_last_45_days"
        case soldVins = "sold_vins"
        case year
        case make
        case model
        case trim
    }
}

public struct FacetItem: Codable {
    /// Facet item
    public var item: String?
    /// Facet item count
    public var count: Int?

    public init(item: String? = nil, count: Int? = nil) {
        self.item = item
        self.count = count
    }
}

public struct RangeFacetItem: Codable {
    public var counts: [Count]?
    /// The range gap applied for range faceting
    public var gap: Int?
    /// The start of range
    public var start: Int?
    /// The end of range
    public var end: Int?
    /// Number of listings that have field value before range start
    public var before: Int?
    /// Number of listings that have field value after range end
    public var after: Int?
    /// Number of listings that have field value between range start and range end
    public var between: Int?

    public struct Count: Codable {
        public var lowerBound: Int?
        public var upperBound: Int?
        public var count: Int?

        public init(lowerBound: Int? = nil, upperBound: Int? = nil, count: Int? = nil) {
            self.lowerBound = lowerBound
            self.upperBound = upperBound
            self.count = count
        }

        private enum CodingKeys: String, CodingKey {
            case lowerBound = "lower_bound"
            case upperBound = "upper_bound"
            case count
        }
    }

    public init(counts: [Count]? = nil, gap: Int? = nil, start: Int? = nil, end: Int? = nil, before: Int? = nil, after: Int? = nil, between: Int? = nil) {
        self.counts = counts
        self.gap = gap
        self.start = start
        self.end = end
        self.before = before
        self.after = after
        self.between = between
    }
}

public struct StatsItem: Codable {
    /// Minimum value of the field
    public var min: Int?
    /// Maximum value of the field
    public var max: Int?
    /// Count
    public var count: Int?
    /// Count of listings missing particular field
    public var missing: Int?
    /// Summation of all values of the field
    public var sum: Int?
    /// Mean of the field
    public var mean: Double?
    /// Stddev of the field
    public var stddev: Double?
    /// Sum_of_squares of the field
    public var sumOfSquares: Double?
    /// Median of the field
    public var median: Double?

    public init(min: Int? = nil, max: Int? = nil, count: Int? = nil, missing: Int? = nil, sum: Int? = nil, mean: Double? = nil, stddev: Double? = nil, sumOfSquares: Double? = nil, median: Double? = nil) {
        self.min = min
        self.max = max
        self.count = count
        self.missing = missing
        self.sum = sum
        self.mean = mean
        self.stddev = stddev
        self.sumOfSquares = sumOfSquares
        self.median = median
    }

    private enum CodingKeys: String, CodingKey {
        case min
        case max
        case count
        case missing
        case sum
        case mean
        case stddev
        case sumOfSquares = "sum_of_squares"
        case median
    }
}

public struct PopularityItem: Codable {
    /// Description for which popularity should be show eg: 2016 ford F-150 Lariat vs All Other Cars
    public var text: String?
    /// Left side rating for above description (2016 ford F-150 Lariat)
    public var left: Double?
    /// Right side rating for above description (All Other Cars)
    public var right: Double?
    /// Difference depending upon left and right analysis
    public var difference: Double?
    /// Thumbs up/down depending upon left and right analysis numbers
    public var thumbs: String?
    /// Delta percent
    public var deltaPercent: Double?
    /// Color depending upon left and right analysis numbers
    public var color: String?

    public init(text: String? = nil, left: Double? = nil, right: Double? = nil, difference: Double? = nil, thumbs: String? = nil, deltaPercent: Double? = nil, color: String? = nil) {
        self.text = text
        self.left = left
        self.right = right
        self.difference = difference
        self.thumbs = thumbs
        self.deltaPercent = deltaPercent
        self.color = color
    }

    private enum CodingKeys: String, CodingKey {
        case text
        case left
        case right
        case difference
        case thumbs
        case deltaPercent = "delta_percent"
        case color
    }
}

public struct Error: Codable {
    /// Error code
    public var code: Int?
    /// Error message
    public var message: String?

    public init(code: Int? = nil, message: String? = nil) {
        self.code = code
        self.message = message
    }
}

public struct MakeModel: Codable {
    public var make: String?
    public var model: String?

    public init(make: String? = nil, model: String? = nil) {
        self.make = make
        self.model = model
    }
}

public struct CRMResponse: Codable {
    /// Boolean to indicate whether given vin has had listing after given date or not
    public var forSale: String?

    public init(forSale: String? = nil) {
        self.forSale = forSale
    }

    private enum CodingKeys: String, CodingKey {
        case forSale = "for_sale"
    }
}

/// Sales count query response
public struct Sales: Codable {
    /// Sales count
    public var counts: Int?
    /// Cpo sales count
    public var cpo: Int?
    /// Non-cpo sales count
    public var nonCpo: Int?
    /// Inventory_type
    public var inventoryType: String?
    /// Make
    public var make: String?
    /// Model
    public var model: String?
    /// Year
    public var year: String?
    /// Trim
    public var trim: String?
    /// Taxonomy_vin
    public var taxonomyVin: String?
    /// State
    public var state: String?
    /// City
    public var city: String?
    /// Sales stats response
    public var domStats: SalesStats?
    /// Sales stats response
    public var priceStats: SalesStats?
    /// Sales stats response
    public var milesStats: SalesStats?

    public init(counts: Int? = nil, cpo: Int? = nil, nonCpo: Int? = nil, inventoryType: String? = nil, make: String? = nil, model: String? = nil, year: String? = nil, trim: String? = nil, taxonomyVin: String? = nil, state: String? = nil, city: String? = nil, domStats: SalesStats? = nil, priceStats: SalesStats? = nil, milesStats: SalesStats? = nil) {
        self.counts = counts
        self.cpo = cpo
        self.nonCpo = nonCpo
        self.inventoryType = inventoryType
        self.make = make
        self.model = model
        self.year = year
        self.trim = trim
        self.taxonomyVin = taxonomyVin
        self.state = state
        self.city = city
        self.domStats = domStats
        self.priceStats = priceStats
        self.milesStats = milesStats
    }

    private enum CodingKeys: String, CodingKey {
        case counts
        case cpo
        case nonCpo = "non-cpo"
        case inventoryType = "inventory_type"
        case make
        case model
        case year
        case trim
        case taxonomyVin = "taxonomy_vin"
        case state
        case city
        case domStats = "dom_stats"
        case priceStats = "price_stats"
        case milesStats = "miles_stats"
    }
}

/// Sales stats response
public struct SalesStats: Codable {
    /// Absolute_mean_deviation
    public var absoluteMeanDeviation: Double?
    /// Median
    public var median: Double?
    /// Population_standard_deviation
    public var populationStandardDeviation: Double?
    /// Variance
    public var variance: Double?
    /// Mean
    public var mean: Double?
    /// Weighted_mean
    public var weightedMean: Double?
    /// Trimmed_mean
    public var trimmedMean: Double?
    /// Standard_deviation
    public var standardDeviation: Double?
    /// Iqr
    public var iqr: Double?

    public init(absoluteMeanDeviation: Double? = nil, median: Double? = nil, populationStandardDeviation: Double? = nil, variance: Double? = nil, mean: Double? = nil, weightedMean: Double? = nil, trimmedMean: Double? = nil, standardDeviation: Double? = nil, iqr: Double? = nil) {
        self.absoluteMeanDeviation = absoluteMeanDeviation
        self.median = median
        self.populationStandardDeviation = populationStandardDeviation
        self.variance = variance
        self.mean = mean
        self.weightedMean = weightedMean
        self.trimmedMean = trimmedMean
        self.standardDeviation = standardDeviation
        self.iqr = iqr
    }

    private enum CodingKeys: String, CodingKey {
        case absoluteMeanDeviation = "absolute_mean_deviation"
        case median
        case populationStandardDeviation = "population_standard_deviation"
        case variance
        case mean
        case weightedMean = "weighted_mean"
        case trimmedMean = "trimmed_mean"
        case standardDeviation = "standard_deviation"
        case iqr
    }
}

/// Top 50 popular cars
public struct PopularCars: Codable {
    /// Array of all used top 50 cars
    public var usedTop50: [BasePopular]?
    /// Array of all new top 50 cars
    public var newTop50: [BasePopular]?

    public init(usedTop50: [BasePopular]? = nil, newTop50: [BasePopular]? = nil) {
        self.usedTop50 = usedTop50
        self.newTop50 = newTop50
    }

    private enum CodingKeys: String, CodingKey {
        case usedTop50 = "used_top50"
        case newTop50 = "new_top50"
    }
}

/// Single popular car in array
public struct BasePopular: Codable {
    /// Inventory type
    public var inventoryType: String?
    /// Number of sold listings of this model
    public var counts: String?
    /// Model name
    public var model: String?
    /// Make name
    public var make: String?
    /// State
    public var state: String?
    /// City
    public var city: String?
    /// Sales stats response
    public var domStats: SalesStats?
    /// Sales stats response
    public var priceStats: SalesStats?
    /// Sales stats response
    public var milesStats: SalesStats?

    public init(inventoryType: String? = nil, counts: String? = nil, model: String? = nil, make: String? = nil, state: String? = nil, city: String? = nil, domStats: SalesStats? = nil, priceStats: SalesStats? = nil, milesStats: SalesStats? = nil) {
        self.inventoryType = inventoryType
        self.counts = counts
        self.model = model
        self.make = make
        self.state = state
        self.city = city
        self.domStats = domStats
        self.priceStats = priceStats
        self.milesStats = milesStats
    }

    private enum CodingKeys: String, CodingKey {
        case inventoryType
        case counts
        case model
        case make
        case state
        case city
        case domStats = "dom_stats"
        case priceStats = "price_stats"
        case milesStats = "miles_stats"
    }
}

public struct DailyStats: Codable {
    /// All nested JSON of stats
    public var priceStats: DailyStatsNestedJSON?
    /// All nested JSON of stats
    public var milesStats: DailyStatsNestedJSON?
    /// All nested JSON of stats
    public var dom: DailyStatsNestedJSON?
    /// Number of units of this car for sale on the market
    public var unitsForSale: Double?

    public init(priceStats: DailyStatsNestedJSON? = nil, milesStats: DailyStatsNestedJSON? = nil, dom: DailyStatsNestedJSON? = nil, unitsForSale: Double? = nil) {
        self.priceStats = priceStats
        self.milesStats = milesStats
        self.dom = dom
        self.unitsForSale = unitsForSale
    }

    private enum CodingKeys: String, CodingKey {
        case priceStats = "price_stats"
        case milesStats = "miles_stats"
        case dom
        case unitsForSale = "units_for_sale"
    }
}

/// All nested JSON of stats
public struct DailyStatsNestedJSON: Codable {
    /// Median
    public var median: Double?
    /// Population standard deviation
    public var populationStandardDeviation: Double?
    /// Variance
    public var variance: Double?
    /// Mean
    public var mean: Double?
    /// Trimmed Mean
    public var trimmedMean: Double?
    /// Standard Deviation
    public var standardDeviation: Double?
    /// Interquartile range
    public var interquartileRange: Double?

    public init(median: Double? = nil, populationStandardDeviation: Double? = nil, variance: Double? = nil, mean: Double? = nil, trimmedMean: Double? = nil, standardDeviation: Double? = nil, interquartileRange: Double? = nil) {
        self.median = median
        self.populationStandardDeviation = populationStandardDeviation
        self.variance = variance
        self.mean = mean
        self.trimmedMean = trimmedMean
        self.standardDeviation = standardDeviation
        self.interquartileRange = interquartileRange
    }

    private enum CodingKeys: String, CodingKey {
        case median
        case populationStandardDeviation = "population_standard_deviation"
        case variance
        case mean
        case trimmedMean = "trimmed_mean"
        case standardDeviation = "standard_deviation"
        case interquartileRange = "interquartile_range"
    }
}

/// Ranking query request
public struct CarRankCriteria: Codable {
    /// Asking price for the vehicle. Weight for this is ranking process between 0-1.
    public var price: Double?
    /// Odometer reading / reported miles usage for the car.Weight for this is ranking process between 0-1
    public var miles: Double?
    /// Certified car.Weight for this is ranking process between 0-1
    public var isCertified: Double?
    /// Flag to indicate whether listing is carfax_1_owner.Weight for this is ranking process between 0-1.
    public var carfax1Owner: Double?
    /// Flag to indicate whether listing is carfax_clean_title.Weight for this is ranking process between 0-1
    public var carfaxCleanTitle: Double?
    /// Days on Market value for the car based on current and historical listings found in the Marketcheck database for this car.Weight for this is ranking process between 0-1
    public var dom: Double?
    /// Days on Market value for the car based on current and last 6 month listings found in the Marketcheck database for this car.Weight for this is ranking process between 0-1
    public var dom180: Double?
    /// Days on Market value for the car based on current and last 30 days listings found in the Marketcheck database for this car.Weight for this is ranking process between 0-1
    public var domActive: Double?

    public init(price: Double? = nil, miles: Double? = nil, isCertified: Double? = nil, carfax1Owner: Double? = nil, carfaxCleanTitle: Double? = nil, dom: Double? = nil, dom180: Double? = nil, domActive: Double? = nil) {
        self.price = price
        self.miles = miles
        self.isCertified = isCertified
        self.carfax1Owner = carfax1Owner
        self.carfaxCleanTitle = carfaxCleanTitle
        self.dom = dom
        self.dom180 = dom180
        self.domActive = domActive
    }

    private enum CodingKeys: String, CodingKey {
        case price
        case miles
        case isCertified = "is_certified"
        case carfax1Owner = "carfax_1_owner"
        case carfaxCleanTitle = "carfax_clean_title"
        case dom
        case dom180 = "dom_180"
        case domActive = "dom_active"
    }
}

/// Ranking query request
public struct CarRankRequest: Codable {
    public var listingIDs: [String]?
    public var rankingCriteria: [String: AnyJSON]?

    public init(listingIDs: [String]? = nil, rankingCriteria: [String: AnyJSON]? = nil) {
        self.listingIDs = listingIDs
        self.rankingCriteria = rankingCriteria
    }

    private enum CodingKeys: String, CodingKey {
        case listingIDs = "listing_ids"
        case rankingCriteria = "ranking_criteria"
    }
}

/// Ranking query response
public struct CarRankResponse: Codable {
    /// The number of listings ranked
    public var numRanked: Int?
    public var rankedListings: [CarListingRank]?

    public init(numRanked: Int? = nil, rankedListings: [CarListingRank]? = nil) {
        self.numRanked = numRanked
        self.rankedListings = rankedListings
    }

    private enum CodingKeys: String, CodingKey {
        case numRanked = "num_ranked"
        case rankedListings = "ranked_listings"
    }
}

/// Ranking query response
public struct CarListingRank: Codable {
    public var rankedListing: [String: AnyJSON]?

    public init(rankedListing: [String: AnyJSON]? = nil) {
        self.rankedListing = rankedListing
    }

    private enum CodingKeys: String, CodingKey {
        case rankedListing = "ranked_listing"
    }
}

/// Predicted price of a car
///
/// Example:
///
/// {
///   "predicted_price" : 37998,
///   "price_range" : {
///     "lower_bound" : 32913,
///     "upper_bound" : 44358
///   },
///   "specs" : {
///     "base_exterior_color" : "Black",
///     "base_interior_color" : "Brown",
///     "carfax_1_owner" : false,
///     "carfax_clean_title" : false,
///     "city_mpg" : 18,
///     "cylinders" : 6,
///     "doors" : 4,
///     "drivetrain" : "4WD",
///     "engine_block" : "V",
///     "engine_size" : 2.7000000000000002,
///     "highway_mpg" : 23,
///     "is_certified" : false,
///     "latitude" : 44.711640000000003,
///     "longitude" : -92.851607000000001,
///     "make" : "ford",
///     "miles" : 28741,
///     "model" : "f-150",
///     "transmission" : "Automatic",
///     "trim" : "xlt",
///     "year" : 2018
///   }
/// }
public struct PricePrediction: Codable {
    /// Actual predicted price of a car
    public var predictedPrice: Int?
    /// Price range around the predicted price, estimating the error in predicted price
    public var priceRange: PriceRange?
    /// Specs of predicted vehicle
    ///
    /// Example:
    ///
    /// {
    ///   "base_exterior_color" : "Black",
    ///   "base_interior_color" : "Brown",
    ///   "carfax_1_owner" : false,
    ///   "carfax_clean_title" : false,
    ///   "city_mpg" : 18,
    ///   "cylinders" : 6,
    ///   "doors" : 4,
    ///   "drivetrain" : "4WD",
    ///   "engine_block" : "V",
    ///   "engine_size" : 2.7000000000000002,
    ///   "highway_mpg" : 23,
    ///   "is_certified" : false,
    ///   "latitude" : 44.711640000000003,
    ///   "longitude" : -92.851607000000001,
    ///   "make" : "ford",
    ///   "miles" : 28741,
    ///   "model" : "f-150",
    ///   "transmission" : "Automatic",
    ///   "trim" : "xlt",
    ///   "year" : 2018
    /// }
    public var specs: PredictedSpecs?

    /// Price range around the predicted price, estimating the error in predicted price
    public struct PriceRange: Codable {
        /// Lower bound
        public var lowerBound: Int?
        /// Upper bound
        public var upperBound: Int?

        public init(lowerBound: Int? = nil, upperBound: Int? = nil) {
            self.lowerBound = lowerBound
            self.upperBound = upperBound
        }

        private enum CodingKeys: String, CodingKey {
            case lowerBound = "lower_bound"
            case upperBound = "upper_bound"
        }
    }

    public init(predictedPrice: Int? = nil, priceRange: PriceRange? = nil, specs: PredictedSpecs? = nil) {
        self.predictedPrice = predictedPrice
        self.priceRange = priceRange
        self.specs = specs
    }

    private enum CodingKeys: String, CodingKey {
        case predictedPrice = "predicted_price"
        case priceRange = "price_range"
        case specs
    }
}

/// Specs of predicted vehicle
///
/// Example:
///
/// {
///   "base_exterior_color" : "Black",
///   "base_interior_color" : "Brown",
///   "carfax_1_owner" : false,
///   "carfax_clean_title" : false,
///   "city_mpg" : 18,
///   "cylinders" : 6,
///   "doors" : 4,
///   "drivetrain" : "4WD",
///   "engine_block" : "V",
///   "engine_size" : 2.7000000000000002,
///   "highway_mpg" : 23,
///   "is_certified" : false,
///   "latitude" : 44.711640000000003,
///   "longitude" : -92.851607000000001,
///   "make" : "ford",
///   "miles" : 28741,
///   "model" : "f-150",
///   "transmission" : "Automatic",
///   "trim" : "xlt",
///   "year" : 2018
/// }
public struct PredictedSpecs: Codable {
    /// Year
    public var year: Int?
    /// Make
    public var make: String?
    /// Model
    public var model: String?
    /// Trim
    public var trim: String?
    /// Base exterior color of vehicle
    public var baseExteriorColor: String?
    /// Base interior color of vehicle
    public var baseInteriorColor: String?
    /// Certified vehicle
    public var isCertified: Bool?
    /// Indicates whether car has had only one owner or not
    public var isCarfax1Owner: Bool?
    /// Indicates whether car has clean ownership records
    public var isCarfaxCleanTitle: Bool?
    /// Transmission
    public var transmission: String?
    /// Drivetrain of the vehicle
    public var drivetrain: String?
    /// Engine block of the vehicle
    public var engineBlock: String?
    /// Engine size
    public var engineSize: Double?
    /// Number of cylinders
    public var cylinders: Int?
    /// Number of doors
    public var doors: Int?
    /// Highway mileage
    public var highwayMpg: Double?
    /// City mileage
    public var cityMpg: Double?
    /// Latutide for the vehicle location
    public var latitude: Double?
    /// Longitude for the vehicle location
    public var longitude: Double?
    /// Miles
    public var miles: Int?

    public init(year: Int? = nil, make: String? = nil, model: String? = nil, trim: String? = nil, baseExteriorColor: String? = nil, baseInteriorColor: String? = nil, isCertified: Bool? = nil, isCarfax1Owner: Bool? = nil, isCarfaxCleanTitle: Bool? = nil, transmission: String? = nil, drivetrain: String? = nil, engineBlock: String? = nil, engineSize: Double? = nil, cylinders: Int? = nil, doors: Int? = nil, highwayMpg: Double? = nil, cityMpg: Double? = nil, latitude: Double? = nil, longitude: Double? = nil, miles: Int? = nil) {
        self.year = year
        self.make = make
        self.model = model
        self.trim = trim
        self.baseExteriorColor = baseExteriorColor
        self.baseInteriorColor = baseInteriorColor
        self.isCertified = isCertified
        self.isCarfax1Owner = isCarfax1Owner
        self.isCarfaxCleanTitle = isCarfaxCleanTitle
        self.transmission = transmission
        self.drivetrain = drivetrain
        self.engineBlock = engineBlock
        self.engineSize = engineSize
        self.cylinders = cylinders
        self.doors = doors
        self.highwayMpg = highwayMpg
        self.cityMpg = cityMpg
        self.latitude = latitude
        self.longitude = longitude
        self.miles = miles
    }

    private enum CodingKeys: String, CodingKey {
        case year
        case make
        case model
        case trim
        case baseExteriorColor = "base_exterior_color"
        case baseInteriorColor = "base_interior_color"
        case isCertified = "is_certified"
        case isCarfax1Owner = "carfax_1_owner"
        case isCarfaxCleanTitle = "carfax_clean_title"
        case transmission
        case drivetrain
        case engineBlock = "engine_block"
        case engineSize = "engine_size"
        case cylinders
        case doors
        case highwayMpg = "highway_mpg"
        case cityMpg = "city_mpg"
        case latitude
        case longitude
        case miles
    }
}

public enum AnyJSON: Equatable, Codable {
    case string(String)
    case number(Double)
    case object([String: AnyJSON])
    case array([AnyJSON])
    case bool(Bool)

    var value: Any {
        switch self {
        case .string(let string): return string
        case .number(let double): return double
        case .object(let dictionary): return dictionary
        case .array(let array): return array
        case .bool(let bool): return bool
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .array(array): try container.encode(array)
        case let .object(object): try container.encode(object)
        case let .string(string): try container.encode(string)
        case let .number(number): try container.encode(number)
        case let .bool(bool): try container.encode(bool)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let object = try? container.decode([String: AnyJSON].self) {
            self = .object(object)
        } else if let array = try? container.decode([AnyJSON].self) {
            self = .array(array)
        } else if let string = try? container.decode(String.self) {
            self = .string(string)
        } else if let bool = try? container.decode(Bool.self) {
            self = .bool(bool)
        } else if let number = try? container.decode(Double.self) {
            self = .number(number)
        } else {
            throw DecodingError.dataCorrupted(
                .init(codingPath: decoder.codingPath, debugDescription: "Invalid JSON value.")
            )
        }
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
