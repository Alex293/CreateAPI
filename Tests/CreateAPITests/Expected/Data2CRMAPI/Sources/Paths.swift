// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import NaiveDate
import Get
import URLQueryEncoder

extension Paths.Account {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/account/describe`
        public let path: String

        /// DESCRIBE for account
        ///
        /// Returns describe for accounts
        public var get: Get.Request<Data2CRMAPI.AccountDescribe> {
            .get(path)
        }
    }
}

extension Paths.Account {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/account/aggregate`
        public let path: String

        /// AGGREGATE for account
        ///
        /// Returns aggregate for accounts
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.Account {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/account/count`
        public let path: String

        /// COUNT for account
        ///
        /// Count all accounts from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.Account {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/account/bulk`
        public let path: String

        /// POST bulk  for account
        ///
        /// Add account into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for account
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for account
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var account: Account {
        Account(path: "/account")
    }

    public struct Account {
        /// Path: `/account`
        public let path: String

        /// GET for account
        ///
        /// Returns all accounts from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.AccountEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for account
        ///
        /// Add account into the system
        public func post(_ body: Data2CRMAPI.AccountEntity) -> Get.Request<Data2CRMAPI.AccountEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.Account {
    public func accountID(_ accountID: String) -> WithAccountID {
        WithAccountID(path: "\(path)/\(accountID)")
    }

    public struct WithAccountID {
        /// Path: `/account/{account_id}`
        public let path: String

        /// GET for account
        ///
        /// Return account information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.AccountEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for account
        ///
        /// Update account information
        public func put(_ body: Data2CRMAPI.AccountEntity) -> Get.Request<Data2CRMAPI.AccountEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for account
        ///
        /// Delete account information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Application {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/application/count`
        public let path: String

        /// COUNT for application
        ///
        /// Count all applications from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths {
    public static var application: Application {
        Application(path: "/application")
    }

    public struct Application {
        /// Path: `/application`
        public let path: String

        /// GET for application
        ///
        /// Returns all applications from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.ApplicationEntityList]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var fields: String?
            public var sort: String?

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, fields: String? = nil, sort: String? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.fields = fields
                self.sort = sort
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                return encoder.items
            }
        }

        /// POST for application
        ///
        /// Add application into the system
        public func post(_ body: Data2CRMAPI.ApplicationEntityWrite) -> Get.Request<Data2CRMAPI.ApplicationEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.Application {
    public func key(_ key: String) -> WithKey {
        WithKey(path: "\(path)/\(key)")
    }

    public struct WithKey {
        /// Path: `/application/{key}`
        public let path: String

        /// GET for application
        ///
        /// Return application information
        public func get(fields: String? = nil) -> Get.Request<Data2CRMAPI.ApplicationEntity> {
            .get(path, query: makeGetQuery(fields))
        }

        private func makeGetQuery(_ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for application
        ///
        /// Update application information
        public func put(_ body: Data2CRMAPI.ApplicationEntityWrite) -> Get.Request<Data2CRMAPI.ApplicationEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for application
        ///
        /// Delete application information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Attachment {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/attachment/describe`
        public let path: String

        /// DESCRIBE for attachment
        ///
        /// Returns describe for attachments
        public var get: Get.Request<Data2CRMAPI.AttachmentDescribe> {
            .get(path)
        }
    }
}

extension Paths.Attachment {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/attachment/aggregate`
        public let path: String

        /// AGGREGATE for attachment
        ///
        /// Returns aggregate for attachments
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.Attachment {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/attachment/count`
        public let path: String

        /// COUNT for attachment
        ///
        /// Count all attachments from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.Attachment {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/attachment/bulk`
        public let path: String

        /// POST bulk  for attachment
        ///
        /// Add attachment into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for attachment
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for attachment
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var attachment: Attachment {
        Attachment(path: "/attachment")
    }

    public struct Attachment {
        /// Path: `/attachment`
        public let path: String

        /// GET for attachment
        ///
        /// Returns all attachments from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.AttachmentEntityList]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for attachment
        ///
        /// Add attachment into the system
        public func post(_ body: Data2CRMAPI.AttachmentEntityWrite) -> Get.Request<Data2CRMAPI.AttachmentEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.Attachment {
    public func attachmentID(_ attachmentID: String) -> WithAttachmentID {
        WithAttachmentID(path: "\(path)/\(attachmentID)")
    }

    public struct WithAttachmentID {
        /// Path: `/attachment/{attachment_id}`
        public let path: String

        /// GET for attachment
        ///
        /// Return attachment information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.AttachmentEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for attachment
        ///
        /// Update attachment information
        public func put(_ body: Data2CRMAPI.AttachmentEntityWrite) -> Get.Request<Data2CRMAPI.AttachmentEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for attachment
        ///
        /// Delete attachment information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Call {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/call/describe`
        public let path: String

        /// DESCRIBE for call
        ///
        /// Returns describe for calls
        public var get: Get.Request<Data2CRMAPI.CallDescribe> {
            .get(path)
        }
    }
}

extension Paths.Call {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/call/aggregate`
        public let path: String

        /// AGGREGATE for call
        ///
        /// Returns aggregate for calls
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.Call {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/call/count`
        public let path: String

        /// COUNT for call
        ///
        /// Count all calls from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.Call {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/call/bulk`
        public let path: String

        /// POST bulk  for call
        ///
        /// Add call into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for call
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for call
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var call: Call {
        Call(path: "/call")
    }

    public struct Call {
        /// Path: `/call`
        public let path: String

        /// GET for call
        ///
        /// Returns all calls from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.CallEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for call
        ///
        /// Add call into the system
        public func post(_ body: Data2CRMAPI.CallEntity) -> Get.Request<Data2CRMAPI.CallEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.Call {
    public func callID(_ callID: String) -> WithCallID {
        WithCallID(path: "\(path)/\(callID)")
    }

    public struct WithCallID {
        /// Path: `/call/{call_id}`
        public let path: String

        /// GET for call
        ///
        /// Return call information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.CallEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for call
        ///
        /// Update call information
        public func put(_ body: Data2CRMAPI.CallEntity) -> Get.Request<Data2CRMAPI.CallEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for call
        ///
        /// Delete call information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Campaign {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/campaign/describe`
        public let path: String

        /// DESCRIBE for campaign
        ///
        /// Returns describe for campaigns
        public var get: Get.Request<Data2CRMAPI.CampaignDescribe> {
            .get(path)
        }
    }
}

extension Paths.Campaign {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/campaign/aggregate`
        public let path: String

        /// AGGREGATE for campaign
        ///
        /// Returns aggregate for campaigns
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.Campaign {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/campaign/count`
        public let path: String

        /// COUNT for campaign
        ///
        /// Count all campaigns from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.Campaign {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/campaign/bulk`
        public let path: String

        /// POST bulk  for campaign
        ///
        /// Add campaign into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for campaign
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for campaign
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var campaign: Campaign {
        Campaign(path: "/campaign")
    }

    public struct Campaign {
        /// Path: `/campaign`
        public let path: String

        /// GET for campaign
        ///
        /// Returns all campaigns from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.CampaignEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for campaign
        ///
        /// Add campaign into the system
        public func post(_ body: Data2CRMAPI.CampaignEntity) -> Get.Request<Data2CRMAPI.CampaignEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.Campaign {
    public func campaignID(_ campaignID: String) -> WithCampaignID {
        WithCampaignID(path: "\(path)/\(campaignID)")
    }

    public struct WithCampaignID {
        /// Path: `/campaign/{campaign_id}`
        public let path: String

        /// GET for campaign
        ///
        /// Return campaign information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.CampaignEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for campaign
        ///
        /// Update campaign information
        public func put(_ body: Data2CRMAPI.CampaignEntity) -> Get.Request<Data2CRMAPI.CampaignEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for campaign
        ///
        /// Delete campaign information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Case {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/case/describe`
        public let path: String

        /// DESCRIBE for case
        ///
        /// Returns describe for cases
        public var get: Get.Request<Data2CRMAPI.CaseDescribe> {
            .get(path)
        }
    }
}

extension Paths.Case {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/case/aggregate`
        public let path: String

        /// AGGREGATE for case
        ///
        /// Returns aggregate for cases
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.Case {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/case/count`
        public let path: String

        /// COUNT for case
        ///
        /// Count all cases from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.Case {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/case/bulk`
        public let path: String

        /// POST bulk  for case
        ///
        /// Add case into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for case
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for case
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var `case`: Case {
        Case(path: "/case")
    }

    public struct Case {
        /// Path: `/case`
        public let path: String

        /// GET for case
        ///
        /// Returns all cases from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.CasesEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for case
        ///
        /// Add case into the system
        public func post(_ body: Data2CRMAPI.CasesEntity) -> Get.Request<Data2CRMAPI.CasesEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.Case {
    public func caseID(_ caseID: String) -> WithCaseID {
        WithCaseID(path: "\(path)/\(caseID)")
    }

    public struct WithCaseID {
        /// Path: `/case/{case_id}`
        public let path: String

        /// GET for case
        ///
        /// Return case information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.CasesEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for case
        ///
        /// Update case information
        public func put(_ body: Data2CRMAPI.CasesEntity) -> Get.Request<Data2CRMAPI.CasesEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for case
        ///
        /// Delete case information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Comment {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/comment/describe`
        public let path: String

        /// DESCRIBE for comment
        ///
        /// Returns describe for comments
        public var get: Get.Request<Data2CRMAPI.CommentDescribe> {
            .get(path)
        }
    }
}

extension Paths.Comment {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/comment/aggregate`
        public let path: String

        /// AGGREGATE for comment
        ///
        /// Returns aggregate for comments
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.Comment {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/comment/count`
        public let path: String

        /// COUNT for comment
        ///
        /// Count all comments from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.Comment {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/comment/bulk`
        public let path: String

        /// POST bulk  for comment
        ///
        /// Add comment into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for comment
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for comment
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var comment: Comment {
        Comment(path: "/comment")
    }

    public struct Comment {
        /// Path: `/comment`
        public let path: String

        /// GET for comment
        ///
        /// Returns all comments from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.CommentEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for comment
        ///
        /// Add comment into the system
        public func post(_ body: Data2CRMAPI.CommentEntity) -> Get.Request<Data2CRMAPI.CommentEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.Comment {
    public func commentID(_ commentID: String) -> WithCommentID {
        WithCommentID(path: "\(path)/\(commentID)")
    }

    public struct WithCommentID {
        /// Path: `/comment/{comment_id}`
        public let path: String

        /// GET for comment
        ///
        /// Return comment information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.CommentEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for comment
        ///
        /// Update comment information
        public func put(_ body: Data2CRMAPI.CommentEntity) -> Get.Request<Data2CRMAPI.CommentEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for comment
        ///
        /// Delete comment information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Contact {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/contact/describe`
        public let path: String

        /// DESCRIBE for contact
        ///
        /// Returns describe for contacts
        public var get: Get.Request<Data2CRMAPI.ContactDescribe> {
            .get(path)
        }
    }
}

extension Paths.Contact {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/contact/aggregate`
        public let path: String

        /// AGGREGATE for contact
        ///
        /// Returns aggregate for contacts
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.Contact {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/contact/count`
        public let path: String

        /// COUNT for contact
        ///
        /// Count all contacts from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.Contact {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/contact/bulk`
        public let path: String

        /// POST bulk  for contact
        ///
        /// Add contact into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for contact
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for contact
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var contact: Contact {
        Contact(path: "/contact")
    }

    public struct Contact {
        /// Path: `/contact`
        public let path: String

        /// GET for contact
        ///
        /// Returns all contacts from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.ContactEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for contact
        ///
        /// Add contact into the system
        public func post(_ body: Data2CRMAPI.ContactEntity) -> Get.Request<Data2CRMAPI.ContactEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.Contact {
    public func contactID(_ contactID: String) -> WithContactID {
        WithContactID(path: "\(path)/\(contactID)")
    }

    public struct WithContactID {
        /// Path: `/contact/{contact_id}`
        public let path: String

        /// GET for contact
        ///
        /// Return contact information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.ContactEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for contact
        ///
        /// Update contact information
        public func put(_ body: Data2CRMAPI.ContactEntity) -> Get.Request<Data2CRMAPI.ContactEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for contact
        ///
        /// Delete contact information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.CustomEntity {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/customEntity/count`
        public let path: String

        /// COUNT for customEntity
        ///
        /// Count all custom entities from the system
        public var get: Get.Request<Data2CRMAPI.Count> {
            .get(path)
        }
    }
}

extension Paths {
    public static var customEntity: CustomEntity {
        CustomEntity(path: "/customEntity")
    }

    public struct CustomEntity {
        /// Path: `/customEntity`
        public let path: String

        /// GET for customEntity
        ///
        /// Returns all custom entities from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.CustomEntityEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var fields: String?

            public init(pageSize: Int? = nil, page: Int? = nil, fields: String? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.fields = fields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(fields, forKey: "fields")
                return encoder.items
            }
        }
    }
}

extension Paths.CustomEntity {
    public func customEntityID(_ customEntityID: String) -> WithCustomEntityID {
        WithCustomEntityID(path: "\(path)/\(customEntityID)")
    }

    public struct WithCustomEntityID {
        /// Path: `/customEntity/{custom_entity_id}`
        public let path: String

        /// GET for customEntity
        ///
        /// Return custom entity information
        public func get(fields: String? = nil) -> Get.Request<Data2CRMAPI.CustomEntityEntity> {
            .get(path, query: makeGetQuery(fields))
        }

        private func makeGetQuery(_ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }
    }
}

extension Paths {
    public static var customEntityItem: CustomEntityItem {
        CustomEntityItem(path: "/customEntityItem")
    }

    public struct CustomEntityItem {
        /// Path: `/customEntityItem`
        public let path: String
    }
}

extension Paths.CustomEntityItem.WithCustomEntityID {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/customEntityItem/{custom_entity_id}/describe`
        public let path: String

        /// DESCRIBE for customEntityItem
        ///
        /// Returns describe for custom entity items
        public var get: Get.Request<Data2CRMAPI.CustomEntityItemDescribe> {
            .get(path)
        }
    }
}

extension Paths.CustomEntityItem.WithCustomEntityID {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/customEntityItem/{custom_entity_id}/aggregate`
        public let path: String

        /// AGGREGATE for customEntityItem
        ///
        /// Returns aggregate for custom entity items
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.CustomEntityItem.WithCustomEntityID {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/customEntityItem/{custom_entity_id}/count`
        public let path: String

        /// COUNT for customEntityItem
        ///
        /// Count all custom entity items from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.CustomEntityItem.WithCustomEntityID {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/customEntityItem/{custom_entity_id}/bulk`
        public let path: String

        /// POST bulk  for customEntityItem
        ///
        /// Add custom entity item into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for customEntityItem
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for customEntityItem
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths.CustomEntityItem {
    public func customEntityID(_ customEntityID: String) -> WithCustomEntityID {
        WithCustomEntityID(path: "\(path)/\(customEntityID)")
    }

    public struct WithCustomEntityID {
        /// Path: `/customEntityItem/{custom_entity_id}`
        public let path: String

        /// GET for customEntityItem
        ///
        /// Returns all custom entity items from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.CustomEntityItemEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for customEntityItem
        ///
        /// Add custom entity item into the system
        public func post(_ body: Data2CRMAPI.CustomEntityItemEntity) -> Get.Request<Data2CRMAPI.CustomEntityItemEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.CustomEntityItem.WithCustomEntityID {
    public func customEntityItemID(_ customEntityItemID: String) -> WithCustomEntityItemID {
        WithCustomEntityItemID(path: "\(path)/\(customEntityItemID)")
    }

    public struct WithCustomEntityItemID {
        /// Path: `/customEntityItem/{custom_entity_id}/{custom_entity_item_id}`
        public let path: String

        /// GET for customEntityItem
        ///
        /// Return custom entity item information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.CustomEntityItemEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for customEntityItem
        ///
        /// Update custom entity item information
        public func put(_ body: Data2CRMAPI.CustomEntityItemEntity) -> Get.Request<Data2CRMAPI.CustomEntityItemEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for customEntityItem
        ///
        /// Delete custom entity item information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.CustomField {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/customField/count`
        public let path: String

        /// COUNT for customField
        ///
        /// Count all custom fields from the system
        public var get: Get.Request<Data2CRMAPI.Count> {
            .get(path)
        }
    }
}

extension Paths {
    public static var customField: CustomField {
        CustomField(path: "/customField")
    }

    public struct CustomField {
        /// Path: `/customField`
        public let path: String

        /// GET for customField
        ///
        /// Returns all custom field from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.CustomFieldEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var fields: String?

            public init(pageSize: Int? = nil, page: Int? = nil, fields: String? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.fields = fields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(fields, forKey: "fields")
                return encoder.items
            }
        }
    }
}

extension Paths.CustomField {
    public func customFieldID(_ customFieldID: String) -> WithCustomFieldID {
        WithCustomFieldID(path: "\(path)/\(customFieldID)")
    }

    public struct WithCustomFieldID {
        /// Path: `/customField/{custom_field_id}`
        public let path: String

        /// GET for customField
        ///
        /// Return custom field information
        public func get(fields: String? = nil) -> Get.Request<Data2CRMAPI.CustomFieldEntity> {
            .get(path, query: makeGetQuery(fields))
        }

        private func makeGetQuery(_ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }
    }
}

extension Paths {
    public static var customFieldItem: CustomFieldItem {
        CustomFieldItem(path: "/customFieldItem")
    }

    public struct CustomFieldItem {
        /// Path: `/customFieldItem`
        public let path: String
    }
}

extension Paths.CustomFieldItem.WithCustomFieldID {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/customFieldItem/{custom_field_id}/describe`
        public let path: String

        /// DESCRIBE for customFieldItem
        ///
        /// Returns describe for custom field items
        public var get: Get.Request<Data2CRMAPI.CustomFieldItemDescribe> {
            .get(path)
        }
    }
}

extension Paths.CustomFieldItem.WithCustomFieldID {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/customFieldItem/{custom_field_id}/count`
        public let path: String

        /// COUNT for customFieldItem
        ///
        /// Count all custom field items from the system
        public var get: Get.Request<Data2CRMAPI.Count> {
            .get(path)
        }
    }
}

extension Paths.CustomFieldItem {
    public func customFieldID(_ customFieldID: String) -> WithCustomFieldID {
        WithCustomFieldID(path: "\(path)/\(customFieldID)")
    }

    public struct WithCustomFieldID {
        /// Path: `/customFieldItem/{custom_field_id}`
        public let path: String

        /// GET for customFieldItem
        ///
        /// Returns all custom field from the system items
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.CustomFieldItemEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var fields: String?

            public init(pageSize: Int? = nil, page: Int? = nil, fields: String? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.fields = fields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(fields, forKey: "fields")
                return encoder.items
            }
        }

        /// POST for customFieldItem
        ///
        /// Add custom field item into the system
        public func post(_ body: Data2CRMAPI.CustomFieldItemEntity) -> Get.Request<Data2CRMAPI.CustomFieldItemEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.CustomFieldItem.WithCustomFieldID {
    public func customFieldItemID(_ customFieldItemID: String) -> WithCustomFieldItemID {
        WithCustomFieldItemID(path: "\(path)/\(customFieldItemID)")
    }

    public struct WithCustomFieldItemID {
        /// Path: `/customFieldItem/{custom_field_id}/{custom_field_item_id}`
        public let path: String

        /// GET for customFieldItem
        ///
        /// Return custom field item information
        public func get(fields: String? = nil) -> Get.Request<Data2CRMAPI.CustomFieldItemEntity> {
            .get(path, query: makeGetQuery(fields))
        }

        private func makeGetQuery(_ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for customFieldItem
        ///
        /// Update custom field item information
        public func put(_ body: Data2CRMAPI.CustomFieldItemEntity) -> Get.Request<Data2CRMAPI.CustomFieldItemEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for customFieldItem
        ///
        /// Delete custom field item information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Email {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/email/describe`
        public let path: String

        /// DESCRIBE for email
        ///
        /// Returns describe for emails
        public var get: Get.Request<Data2CRMAPI.EmailDescribe> {
            .get(path)
        }
    }
}

extension Paths.Email {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/email/aggregate`
        public let path: String

        /// AGGREGATE for email
        ///
        /// Returns aggregate for emails
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.Email {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/email/count`
        public let path: String

        /// COUNT for email
        ///
        /// Count all emails from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.Email {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/email/bulk`
        public let path: String

        /// POST bulk  for email
        ///
        /// Add email into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for email
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for email
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var email: Email {
        Email(path: "/email")
    }

    public struct Email {
        /// Path: `/email`
        public let path: String

        /// GET for email
        ///
        /// Returns all emails from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.EmailEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for email
        ///
        /// Add email into the system
        public func post(_ body: Data2CRMAPI.EmailEntity) -> Get.Request<Data2CRMAPI.EmailEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.Email {
    public func emailID(_ emailID: String) -> WithEmailID {
        WithEmailID(path: "\(path)/\(emailID)")
    }

    public struct WithEmailID {
        /// Path: `/email/{email_id}`
        public let path: String

        /// GET for email
        ///
        /// Return email information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.EmailEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for email
        ///
        /// Update email information
        public func put(_ body: Data2CRMAPI.EmailEntity) -> Get.Request<Data2CRMAPI.EmailEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for email
        ///
        /// Delete email information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Event {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/event/describe`
        public let path: String

        /// DESCRIBE for event
        ///
        /// Returns describe for events
        public var get: Get.Request<Data2CRMAPI.EventDescribe> {
            .get(path)
        }
    }
}

extension Paths.Event {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/event/aggregate`
        public let path: String

        /// AGGREGATE for event
        ///
        /// Returns aggregate for events
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.Event {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/event/count`
        public let path: String

        /// COUNT for event
        ///
        /// Count all events from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.Event {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/event/bulk`
        public let path: String

        /// POST bulk  for event
        ///
        /// Add event into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for event
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for event
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var event: Event {
        Event(path: "/event")
    }

    public struct Event {
        /// Path: `/event`
        public let path: String

        /// GET for event
        ///
        /// Returns all events from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.EventEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for event
        ///
        /// Add event into the system
        public func post(_ body: Data2CRMAPI.EventEntity) -> Get.Request<Data2CRMAPI.EventEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.Event {
    public func eventID(_ eventID: String) -> WithEventID {
        WithEventID(path: "\(path)/\(eventID)")
    }

    public struct WithEventID {
        /// Path: `/event/{event_id}`
        public let path: String

        /// GET for event
        ///
        /// Return event information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.EventEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for event
        ///
        /// Update event information
        public func put(_ body: Data2CRMAPI.EventEntity) -> Get.Request<Data2CRMAPI.EventEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for event
        ///
        /// Delete event information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.InternalUser {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/internalUser/count`
        public let path: String

        /// COUNT for internalUser
        ///
        /// Count all internal users from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths {
    public static var internalUser: InternalUser {
        InternalUser(path: "/internalUser")
    }

    public struct InternalUser {
        /// Path: `/internalUser`
        public let path: String

        /// GET for internalUser
        ///
        /// Returns all internal users from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.InternalUserEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var fields: String?
            public var sort: String?
            public var applicationRequestStart: NaiveDate?
            public var applicationRequestEnd: NaiveDate?

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, fields: String? = nil, sort: String? = nil, applicationRequestStart: NaiveDate? = nil, applicationRequestEnd: NaiveDate? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.fields = fields
                self.sort = sort
                self.applicationRequestStart = applicationRequestStart
                self.applicationRequestEnd = applicationRequestEnd
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(applicationRequestStart, forKey: "application_request_start")
                encoder.encode(applicationRequestEnd, forKey: "application_request_end")
                return encoder.items
            }
        }

        /// POST for internalUser
        public func post(_ body: Data2CRMAPI.InternalUserEntity) -> Get.Request<Data2CRMAPI.InternalUserEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.InternalUser {
    public func internalUserID(_ internalUserID: String) -> WithInternalUserID {
        WithInternalUserID(path: "\(path)/\(internalUserID)")
    }

    public struct WithInternalUserID {
        /// Path: `/internalUser/{internal_user_id}`
        public let path: String

        /// GET for internalUser
        ///
        /// Return internal user information
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.InternalUserEntity> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var applicationRequestStart: NaiveDate?
            public var applicationRequestEnd: NaiveDate?

            public init(fields: String? = nil, applicationRequestStart: NaiveDate? = nil, applicationRequestEnd: NaiveDate? = nil) {
                self.fields = fields
                self.applicationRequestStart = applicationRequestStart
                self.applicationRequestEnd = applicationRequestEnd
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(fields, forKey: "fields")
                encoder.encode(applicationRequestStart, forKey: "application_request_start")
                encoder.encode(applicationRequestEnd, forKey: "application_request_end")
                return encoder.items
            }
        }

        /// PUT for internalUser
        public func put(_ body: Data2CRMAPI.InternalUserEntity) -> Get.Request<Data2CRMAPI.InternalUserEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for internalUser
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Invoice {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/invoice/describe`
        public let path: String

        /// DESCRIBE for invoice
        ///
        /// Returns describe for invoices
        public var get: Get.Request<Data2CRMAPI.InvoiceDescribe> {
            .get(path)
        }
    }
}

extension Paths.Invoice {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/invoice/aggregate`
        public let path: String

        /// AGGREGATE for invoice
        ///
        /// Returns aggregate for invoices
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.Invoice {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/invoice/count`
        public let path: String

        /// COUNT for invoice
        ///
        /// Count all invoices from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.Invoice {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/invoice/bulk`
        public let path: String

        /// POST bulk  for invoice
        ///
        /// Add invoice into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for invoice
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for invoice
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var invoice: Invoice {
        Invoice(path: "/invoice")
    }

    public struct Invoice {
        /// Path: `/invoice`
        public let path: String

        /// GET for invoice
        ///
        /// Returns all invoices from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.InvoiceEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for invoice
        ///
        /// Add invoice into the system
        public func post(_ body: Data2CRMAPI.InvoiceEntity) -> Get.Request<Data2CRMAPI.InvoiceEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.Invoice {
    public func invoiceID(_ invoiceID: String) -> WithInvoiceID {
        WithInvoiceID(path: "\(path)/\(invoiceID)")
    }

    public struct WithInvoiceID {
        /// Path: `/invoice/{invoice_id}`
        public let path: String

        /// GET for invoice
        ///
        /// Return invoice information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.InvoiceEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for invoice
        ///
        /// Update invoice information
        public func put(_ body: Data2CRMAPI.InvoiceEntity) -> Get.Request<Data2CRMAPI.InvoiceEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for invoice
        ///
        /// Delete invoice information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.InvoiceItem {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/invoiceItem/describe`
        public let path: String

        /// DESCRIBE for invoiceItem
        ///
        /// Returns describe for invoiceItems
        public var get: Get.Request<Data2CRMAPI.InvoiceItemDescribe> {
            .get(path)
        }
    }
}

extension Paths.InvoiceItem {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/invoiceItem/aggregate`
        public let path: String

        /// AGGREGATE for invoiceItem
        ///
        /// Returns aggregate for invoiceItems
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.InvoiceItem {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/invoiceItem/count`
        public let path: String

        /// COUNT for invoiceItem
        ///
        /// Count all invoiceItems from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.InvoiceItem {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/invoiceItem/bulk`
        public let path: String

        /// POST bulk  for invoiceItem
        ///
        /// Add invoiceItem into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for invoiceItem
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for invoiceItem
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var invoiceItem: InvoiceItem {
        InvoiceItem(path: "/invoiceItem")
    }

    public struct InvoiceItem {
        /// Path: `/invoiceItem`
        public let path: String

        /// GET for invoiceItem
        ///
        /// Returns all invoiceItems from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.InvoiceItemEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for invoiceItem
        ///
        /// Add invoiceItem into the system
        public func post(_ body: Data2CRMAPI.InvoiceItemEntity) -> Get.Request<Data2CRMAPI.InvoiceItemEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.InvoiceItem {
    public func invoiceItemID(_ invoiceItemID: String) -> WithInvoiceItemID {
        WithInvoiceItemID(path: "\(path)/\(invoiceItemID)")
    }

    public struct WithInvoiceItemID {
        /// Path: `/invoiceItem/{invoiceItem_id}`
        public let path: String

        /// GET for invoiceItem
        ///
        /// Return invoiceItem information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.InvoiceItemEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for invoiceItem
        ///
        /// Update invoiceItem information
        public func put(_ body: Data2CRMAPI.InvoiceItemEntity) -> Get.Request<Data2CRMAPI.InvoiceItemEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for invoiceItem
        ///
        /// Delete invoiceItem information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Lead {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/lead/describe`
        public let path: String

        /// DESCRIBE for lead
        ///
        /// Returns describe for leads
        public var get: Get.Request<Data2CRMAPI.LeadDescribe> {
            .get(path)
        }
    }
}

extension Paths.Lead {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/lead/aggregate`
        public let path: String

        /// AGGREGATE for lead
        ///
        /// Returns aggregate for leads
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.Lead {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/lead/count`
        public let path: String

        /// COUNT for lead
        ///
        /// Count all leads from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.Lead {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/lead/bulk`
        public let path: String

        /// POST bulk  for lead
        ///
        /// Add lead into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for lead
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for lead
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var lead: Lead {
        Lead(path: "/lead")
    }

    public struct Lead {
        /// Path: `/lead`
        public let path: String

        /// GET for lead
        ///
        /// Returns all leads from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.LeadEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for lead
        ///
        /// Add lead into the system
        public func post(_ body: Data2CRMAPI.LeadEntity) -> Get.Request<Data2CRMAPI.LeadEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.Lead {
    public func leadID(_ leadID: String) -> WithLeadID {
        WithLeadID(path: "\(path)/\(leadID)")
    }

    public struct WithLeadID {
        /// Path: `/lead/{lead_id}`
        public let path: String

        /// GET for lead
        ///
        /// Return lead information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.LeadEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for lead
        ///
        /// Update lead information
        public func put(_ body: Data2CRMAPI.LeadEntity) -> Get.Request<Data2CRMAPI.LeadEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for lead
        ///
        /// Delete lead information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Meeting {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/meeting/describe`
        public let path: String

        /// DESCRIBE for meeting
        ///
        /// Returns describe for meetings
        public var get: Get.Request<Data2CRMAPI.MeetingDescribe> {
            .get(path)
        }
    }
}

extension Paths.Meeting {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/meeting/aggregate`
        public let path: String

        /// AGGREGATE for meeting
        ///
        /// Returns aggregate for meetings
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.Meeting {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/meeting/count`
        public let path: String

        /// COUNT for meeting
        ///
        /// Count all meetings from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.Meeting {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/meeting/bulk`
        public let path: String

        /// POST bulk  for meeting
        ///
        /// Add meeting into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for meeting
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for meeting
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var meeting: Meeting {
        Meeting(path: "/meeting")
    }

    public struct Meeting {
        /// Path: `/meeting`
        public let path: String

        /// GET for meeting
        ///
        /// Returns all meetings from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.MeetingEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for meeting
        ///
        /// Add meeting into the system
        public func post(_ body: Data2CRMAPI.MeetingEntity) -> Get.Request<Data2CRMAPI.MeetingEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.Meeting {
    public func meetingID(_ meetingID: String) -> WithMeetingID {
        WithMeetingID(path: "\(path)/\(meetingID)")
    }

    public struct WithMeetingID {
        /// Path: `/meeting/{meeting_id}`
        public let path: String

        /// GET for meeting
        ///
        /// Return meeting information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.MeetingEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for meeting
        ///
        /// Update meeting information
        public func put(_ body: Data2CRMAPI.MeetingEntity) -> Get.Request<Data2CRMAPI.MeetingEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for meeting
        ///
        /// Delete meeting information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Note {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/note/describe`
        public let path: String

        /// DESCRIBE for note
        ///
        /// Returns describe for notes
        public var get: Get.Request<Data2CRMAPI.NoteDescribe> {
            .get(path)
        }
    }
}

extension Paths.Note {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/note/aggregate`
        public let path: String

        /// AGGREGATE for note
        ///
        /// Returns aggregate for notes
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.Note {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/note/count`
        public let path: String

        /// COUNT for note
        ///
        /// Count all notes from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.Note {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/note/bulk`
        public let path: String

        /// POST bulk  for note
        ///
        /// Add note into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for note
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for note
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var note: Note {
        Note(path: "/note")
    }

    public struct Note {
        /// Path: `/note`
        public let path: String

        /// GET for note
        ///
        /// Returns all notes from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.NoteEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for note
        ///
        /// Add note into the system
        public func post(_ body: Data2CRMAPI.NoteEntity) -> Get.Request<Data2CRMAPI.NoteEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.Note {
    public func noteID(_ noteID: String) -> WithNoteID {
        WithNoteID(path: "\(path)/\(noteID)")
    }

    public struct WithNoteID {
        /// Path: `/note/{note_id}`
        public let path: String

        /// GET for note
        ///
        /// Return note information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.NoteEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for note
        ///
        /// Update note information
        public func put(_ body: Data2CRMAPI.NoteEntity) -> Get.Request<Data2CRMAPI.NoteEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for note
        ///
        /// Delete note information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Opportunity {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/opportunity/describe`
        public let path: String

        /// DESCRIBE for opportunity
        ///
        /// Returns describe for opportunities
        public var get: Get.Request<Data2CRMAPI.OpportunityDescribe> {
            .get(path)
        }
    }
}

extension Paths.Opportunity {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/opportunity/aggregate`
        public let path: String

        /// AGGREGATE for opportunity
        ///
        /// Returns aggregate for opportunities
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.Opportunity {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/opportunity/count`
        public let path: String

        /// COUNT for opportunity
        ///
        /// Count all opportunities from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.Opportunity {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/opportunity/bulk`
        public let path: String

        /// POST bulk  for opportunity
        ///
        /// Add opportunity into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for opportunity
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for opportunity
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var opportunity: Opportunity {
        Opportunity(path: "/opportunity")
    }

    public struct Opportunity {
        /// Path: `/opportunity`
        public let path: String

        /// GET for opportunity
        ///
        /// Returns all opportunities from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.OpportunityEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for opportunity
        ///
        /// Add opportunity into the system
        public func post(_ body: Data2CRMAPI.OpportunityEntity) -> Get.Request<Data2CRMAPI.OpportunityEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.Opportunity {
    public func opportunityID(_ opportunityID: String) -> WithOpportunityID {
        WithOpportunityID(path: "\(path)/\(opportunityID)")
    }

    public struct WithOpportunityID {
        /// Path: `/opportunity/{opportunity_id}`
        public let path: String

        /// GET for opportunity
        ///
        /// Return opportunity information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.OpportunityEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for opportunity
        ///
        /// Update opportunity information
        public func put(_ body: Data2CRMAPI.OpportunityEntity) -> Get.Request<Data2CRMAPI.OpportunityEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for opportunity
        ///
        /// Delete opportunity information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.OpportunityProduct {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/opportunityProduct/describe`
        public let path: String

        /// DESCRIBE for opportunityProduct
        ///
        /// Returns describe for opportunityProducts
        public var get: Get.Request<Data2CRMAPI.OpportunityProductDescribe> {
            .get(path)
        }
    }
}

extension Paths.OpportunityProduct {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/opportunityProduct/aggregate`
        public let path: String

        /// AGGREGATE for opportunityProduct
        ///
        /// Returns aggregate for opportunityProducts
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.OpportunityProduct {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/opportunityProduct/count`
        public let path: String

        /// COUNT for opportunityProduct
        ///
        /// Count all opportunityProducts from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.OpportunityProduct {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/opportunityProduct/bulk`
        public let path: String

        /// POST bulk  for opportunityProduct
        ///
        /// Add opportunityProduct into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for opportunityProduct
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for opportunityProduct
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var opportunityProduct: OpportunityProduct {
        OpportunityProduct(path: "/opportunityProduct")
    }

    public struct OpportunityProduct {
        /// Path: `/opportunityProduct`
        public let path: String

        /// GET for opportunityProduct
        ///
        /// Returns all opportunityProducts from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.OpportunityProductEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for opportunityProduct
        ///
        /// Add opportunityProduct into the system
        public func post(_ body: Data2CRMAPI.OpportunityProductEntity) -> Get.Request<Data2CRMAPI.OpportunityProductEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.OpportunityProduct {
    public func opportunityProductID(_ opportunityProductID: String) -> WithOpportunityProductID {
        WithOpportunityProductID(path: "\(path)/\(opportunityProductID)")
    }

    public struct WithOpportunityProductID {
        /// Path: `/opportunityProduct/{opportunityProduct_id}`
        public let path: String

        /// GET for opportunityProduct
        ///
        /// Return opportunityProduct information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.OpportunityProductEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for opportunityProduct
        ///
        /// Update opportunityProduct information
        public func put(_ body: Data2CRMAPI.OpportunityProductEntity) -> Get.Request<Data2CRMAPI.OpportunityProductEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for opportunityProduct
        ///
        /// Delete opportunityProduct information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var platform: Platform {
        Platform(path: "/platform")
    }

    public struct Platform {
        /// Path: `/platform`
        public let path: String

        /// GET for platform
        ///
        /// Returns all platforms from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.PlatformEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var fields: String?
            public var sort: String?

            public init(pageSize: Int? = nil, page: Int? = nil, fields: String? = nil, sort: String? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.fields = fields
                self.sort = sort
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                return encoder.items
            }
        }
    }
}

extension Paths.Platform {
    public func type(_ type: String) -> WithType {
        WithType(path: "\(path)/\(type)")
    }

    public struct WithType {
        /// Path: `/platform/{type}`
        public let path: String

        /// GET for platform
        ///
        /// Return platform information
        public func get(fields: String? = nil) -> Get.Request<Data2CRMAPI.PlatformEntity> {
            .get(path, query: makeGetQuery(fields))
        }

        private func makeGetQuery(_ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }
    }
}

extension Paths.Post {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/post/describe`
        public let path: String

        /// DESCRIBE for post
        ///
        /// Returns describe for posts
        public var get: Get.Request<Data2CRMAPI.PostDescribe> {
            .get(path)
        }
    }
}

extension Paths.Post {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/post/aggregate`
        public let path: String

        /// AGGREGATE for post
        ///
        /// Returns aggregate for posts
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.Post {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/post/count`
        public let path: String

        /// COUNT for post
        ///
        /// Count all posts from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.Post {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/post/bulk`
        public let path: String

        /// POST bulk  for post
        ///
        /// Add post into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for post
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for post
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var post: Post {
        Post(path: "/post")
    }

    public struct Post {
        /// Path: `/post`
        public let path: String

        /// GET for post
        ///
        /// Returns all posts from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.PostEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for post
        ///
        /// Add post into the system
        public func post(_ body: Data2CRMAPI.PostEntity) -> Get.Request<Data2CRMAPI.PostEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.Post {
    public func postID(_ postID: String) -> WithPostID {
        WithPostID(path: "\(path)/\(postID)")
    }

    public struct WithPostID {
        /// Path: `/post/{post_id}`
        public let path: String

        /// GET for post
        ///
        /// Return post information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.PostEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for post
        ///
        /// Update post information
        public func put(_ body: Data2CRMAPI.PostEntity) -> Get.Request<Data2CRMAPI.PostEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for post
        ///
        /// Delete post information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.PriceBook {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/priceBook/describe`
        public let path: String

        /// DESCRIBE for priceBook
        ///
        /// Returns describe for priceBooks
        public var get: Get.Request<Data2CRMAPI.PriceBookDescribe> {
            .get(path)
        }
    }
}

extension Paths.PriceBook {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/priceBook/aggregate`
        public let path: String

        /// AGGREGATE for priceBook
        ///
        /// Returns aggregate for priceBooks
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.PriceBook {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/priceBook/count`
        public let path: String

        /// COUNT for priceBook
        ///
        /// Count all priceBooks from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.PriceBook {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/priceBook/bulk`
        public let path: String

        /// POST bulk  for priceBook
        ///
        /// Add priceBook into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for priceBook
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for priceBook
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var priceBook: PriceBook {
        PriceBook(path: "/priceBook")
    }

    public struct PriceBook {
        /// Path: `/priceBook`
        public let path: String

        /// GET for priceBook
        ///
        /// Returns all priceBooks from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.PriceBookEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for priceBook
        ///
        /// Add priceBook into the system
        public func post(_ body: Data2CRMAPI.PriceBookEntity) -> Get.Request<Data2CRMAPI.PriceBookEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.PriceBook {
    public func priceBookID(_ priceBookID: String) -> WithPriceBookID {
        WithPriceBookID(path: "\(path)/\(priceBookID)")
    }

    public struct WithPriceBookID {
        /// Path: `/priceBook/{priceBook_id}`
        public let path: String

        /// GET for priceBook
        ///
        /// Return priceBook information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.PriceBookEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for priceBook
        ///
        /// Update priceBook information
        public func put(_ body: Data2CRMAPI.PriceBookEntity) -> Get.Request<Data2CRMAPI.PriceBookEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for priceBook
        ///
        /// Delete priceBook information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.PriceBookItem {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/priceBookItem/describe`
        public let path: String

        /// DESCRIBE for priceBookItem
        ///
        /// Returns describe for priceBookItems
        public var get: Get.Request<Data2CRMAPI.PriceBookItemDescribe> {
            .get(path)
        }
    }
}

extension Paths.PriceBookItem {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/priceBookItem/aggregate`
        public let path: String

        /// AGGREGATE for priceBookItem
        ///
        /// Returns aggregate for priceBookItems
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.PriceBookItem {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/priceBookItem/count`
        public let path: String

        /// COUNT for priceBookItem
        ///
        /// Count all priceBookItems from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.PriceBookItem {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/priceBookItem/bulk`
        public let path: String

        /// POST bulk  for priceBookItem
        ///
        /// Add priceBookItem into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for priceBookItem
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for priceBookItem
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var priceBookItem: PriceBookItem {
        PriceBookItem(path: "/priceBookItem")
    }

    public struct PriceBookItem {
        /// Path: `/priceBookItem`
        public let path: String

        /// GET for priceBookItem
        ///
        /// Returns all priceBookItems from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.PriceBookItemEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for priceBookItem
        ///
        /// Add priceBookItem into the system
        public func post(_ body: Data2CRMAPI.PriceBookItemEntity) -> Get.Request<Data2CRMAPI.PriceBookItemEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.PriceBookItem {
    public func priceBookItemID(_ priceBookItemID: String) -> WithPriceBookItemID {
        WithPriceBookItemID(path: "\(path)/\(priceBookItemID)")
    }

    public struct WithPriceBookItemID {
        /// Path: `/priceBookItem/{priceBookItem_id}`
        public let path: String

        /// GET for priceBookItem
        ///
        /// Return priceBookItem information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.PriceBookItemEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for priceBookItem
        ///
        /// Update priceBookItem information
        public func put(_ body: Data2CRMAPI.PriceBookItemEntity) -> Get.Request<Data2CRMAPI.PriceBookItemEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for priceBookItem
        ///
        /// Delete priceBookItem information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Product {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/product/describe`
        public let path: String

        /// DESCRIBE for product
        ///
        /// Returns describe for products
        public var get: Get.Request<Data2CRMAPI.ProductDescribe> {
            .get(path)
        }
    }
}

extension Paths.Product {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/product/aggregate`
        public let path: String

        /// AGGREGATE for product
        ///
        /// Returns aggregate for products
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.Product {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/product/count`
        public let path: String

        /// COUNT for product
        ///
        /// Count all products from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.Product {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/product/bulk`
        public let path: String

        /// POST bulk  for product
        ///
        /// Add product into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for product
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for product
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var product: Product {
        Product(path: "/product")
    }

    public struct Product {
        /// Path: `/product`
        public let path: String

        /// GET for product
        ///
        /// Returns all products from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.ProductEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for product
        ///
        /// Add product into the system
        public func post(_ body: Data2CRMAPI.ProductEntity) -> Get.Request<Data2CRMAPI.ProductEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.Product {
    public func productID(_ productID: String) -> WithProductID {
        WithProductID(path: "\(path)/\(productID)")
    }

    public struct WithProductID {
        /// Path: `/product/{product_id}`
        public let path: String

        /// GET for product
        ///
        /// Return product information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.ProductEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for product
        ///
        /// Update product information
        public func put(_ body: Data2CRMAPI.ProductEntity) -> Get.Request<Data2CRMAPI.ProductEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for product
        ///
        /// Delete product information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Project {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/project/describe`
        public let path: String

        /// DESCRIBE for project
        ///
        /// Returns describe for projects
        public var get: Get.Request<Data2CRMAPI.ProjectDescribe> {
            .get(path)
        }
    }
}

extension Paths.Project {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/project/aggregate`
        public let path: String

        /// AGGREGATE for project
        ///
        /// Returns aggregate for projects
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.Project {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/project/count`
        public let path: String

        /// COUNT for project
        ///
        /// Count all projects from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.Project {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/project/bulk`
        public let path: String

        /// POST bulk  for project
        ///
        /// Add project into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for project
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for project
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var project: Project {
        Project(path: "/project")
    }

    public struct Project {
        /// Path: `/project`
        public let path: String

        /// GET for project
        ///
        /// Returns all projects from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.ProjectEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for project
        ///
        /// Add project into the system
        public func post(_ body: Data2CRMAPI.ProjectEntity) -> Get.Request<Data2CRMAPI.ProjectEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.Project {
    public func projectID(_ projectID: String) -> WithProjectID {
        WithProjectID(path: "\(path)/\(projectID)")
    }

    public struct WithProjectID {
        /// Path: `/project/{project_id}`
        public let path: String

        /// GET for project
        ///
        /// Return project information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.ProjectEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for project
        ///
        /// Update project information
        public func put(_ body: Data2CRMAPI.ProjectEntity) -> Get.Request<Data2CRMAPI.ProjectEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for project
        ///
        /// Delete project information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Quote {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/quote/describe`
        public let path: String

        /// DESCRIBE for quote
        ///
        /// Returns describe for quotes
        public var get: Get.Request<Data2CRMAPI.QuoteDescribe> {
            .get(path)
        }
    }
}

extension Paths.Quote {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/quote/aggregate`
        public let path: String

        /// AGGREGATE for quote
        ///
        /// Returns aggregate for quotes
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.Quote {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/quote/count`
        public let path: String

        /// COUNT for quote
        ///
        /// Count all quotes from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.Quote {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/quote/bulk`
        public let path: String

        /// POST bulk  for quote
        ///
        /// Add quote into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for quote
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for quote
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var quote: Quote {
        Quote(path: "/quote")
    }

    public struct Quote {
        /// Path: `/quote`
        public let path: String

        /// GET for quote
        ///
        /// Returns all quotes from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.QuoteEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for quote
        ///
        /// Add quote into the system
        public func post(_ body: Data2CRMAPI.QuoteEntity) -> Get.Request<Data2CRMAPI.QuoteEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.Quote {
    public func quoteID(_ quoteID: String) -> WithQuoteID {
        WithQuoteID(path: "\(path)/\(quoteID)")
    }

    public struct WithQuoteID {
        /// Path: `/quote/{quote_id}`
        public let path: String

        /// GET for quote
        ///
        /// Return quote information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.QuoteEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for quote
        ///
        /// Update quote information
        public func put(_ body: Data2CRMAPI.QuoteEntity) -> Get.Request<Data2CRMAPI.QuoteEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for quote
        ///
        /// Delete quote information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.QuoteItem {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/quoteItem/describe`
        public let path: String

        /// DESCRIBE for quoteItem
        ///
        /// Returns describe for quoteItems
        public var get: Get.Request<Data2CRMAPI.QuoteItemDescribe> {
            .get(path)
        }
    }
}

extension Paths.QuoteItem {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/quoteItem/aggregate`
        public let path: String

        /// AGGREGATE for quoteItem
        ///
        /// Returns aggregate for quoteItems
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.QuoteItem {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/quoteItem/count`
        public let path: String

        /// COUNT for quoteItem
        ///
        /// Count all quoteItems from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.QuoteItem {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/quoteItem/bulk`
        public let path: String

        /// POST bulk  for quoteItem
        ///
        /// Add quoteItem into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for quoteItem
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for quoteItem
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var quoteItem: QuoteItem {
        QuoteItem(path: "/quoteItem")
    }

    public struct QuoteItem {
        /// Path: `/quoteItem`
        public let path: String

        /// GET for quoteItem
        ///
        /// Returns all quoteItems from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.QuoteItemEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for quoteItem
        ///
        /// Add quoteItem into the system
        public func post(_ body: Data2CRMAPI.QuoteItemEntity) -> Get.Request<Data2CRMAPI.QuoteItemEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.QuoteItem {
    public func quoteItemID(_ quoteItemID: String) -> WithQuoteItemID {
        WithQuoteItemID(path: "\(path)/\(quoteItemID)")
    }

    public struct WithQuoteItemID {
        /// Path: `/quoteItem/{quoteItem_id}`
        public let path: String

        /// GET for quoteItem
        ///
        /// Return quoteItem information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.QuoteItemEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for quoteItem
        ///
        /// Update quoteItem information
        public func put(_ body: Data2CRMAPI.QuoteItemEntity) -> Get.Request<Data2CRMAPI.QuoteItemEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for quoteItem
        ///
        /// Delete quoteItem information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var request: Request {
        Request(path: "/request")
    }

    public struct Request {
        /// Path: `/request`
        public let path: String

        /// POST for request
        ///
        /// Execute request into the system
        public func post(_ body: Data2CRMAPI.RequestEntity) -> Get.Request<Data2CRMAPI.RequestEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.Tag {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/tag/describe`
        public let path: String

        /// DESCRIBE for tag
        ///
        /// Returns describe for tags
        public var get: Get.Request<Data2CRMAPI.TagDescribe> {
            .get(path)
        }
    }
}

extension Paths.Tag {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/tag/aggregate`
        public let path: String

        /// AGGREGATE for tag
        ///
        /// Returns aggregate for tags
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.Tag {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/tag/count`
        public let path: String

        /// COUNT for tag
        ///
        /// Count all tags from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.Tag {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/tag/bulk`
        public let path: String

        /// POST bulk  for tag
        ///
        /// Add tag into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for tag
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for tag
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var tag: Tag {
        Tag(path: "/tag")
    }

    public struct Tag {
        /// Path: `/tag`
        public let path: String

        /// GET for tag
        ///
        /// Returns all tags from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.TagEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for tag
        ///
        /// Add tag into the system
        public func post(_ body: Data2CRMAPI.TagEntity) -> Get.Request<Data2CRMAPI.TagEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.Tag {
    public func tagID(_ tagID: String) -> WithTagID {
        WithTagID(path: "\(path)/\(tagID)")
    }

    public struct WithTagID {
        /// Path: `/tag/{tag_id}`
        public let path: String

        /// GET for tag
        ///
        /// Return tag information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.TagEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for tag
        ///
        /// Update tag information
        public func put(_ body: Data2CRMAPI.TagEntity) -> Get.Request<Data2CRMAPI.TagEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for tag
        ///
        /// Delete tag information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Task {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/task/describe`
        public let path: String

        /// DESCRIBE for task
        ///
        /// Returns describe for tasks
        public var get: Get.Request<Data2CRMAPI.TaskDescribe> {
            .get(path)
        }
    }
}

extension Paths.Task {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/task/aggregate`
        public let path: String

        /// AGGREGATE for task
        ///
        /// Returns aggregate for tasks
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.Task {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/task/count`
        public let path: String

        /// COUNT for task
        ///
        /// Count all tasks from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.Task {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/task/bulk`
        public let path: String

        /// POST bulk  for task
        ///
        /// Add task into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for task
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for task
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var task: Task {
        Task(path: "/task")
    }

    public struct Task {
        /// Path: `/task`
        public let path: String

        /// GET for task
        ///
        /// Returns all tasks from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.TaskEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for task
        ///
        /// Add task into the system
        public func post(_ body: Data2CRMAPI.TaskEntity) -> Get.Request<Data2CRMAPI.TaskEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.Task {
    public func taskID(_ taskID: String) -> WithTaskID {
        WithTaskID(path: "\(path)/\(taskID)")
    }

    public struct WithTaskID {
        /// Path: `/task/{task_id}`
        public let path: String

        /// GET for task
        ///
        /// Return task information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.TaskEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for task
        ///
        /// Update task information
        public func put(_ body: Data2CRMAPI.TaskEntity) -> Get.Request<Data2CRMAPI.TaskEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for task
        ///
        /// Delete task information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Ticket {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/ticket/describe`
        public let path: String

        /// DESCRIBE for ticket
        ///
        /// Returns describe for tickets
        public var get: Get.Request<Data2CRMAPI.TicketDescribe> {
            .get(path)
        }
    }
}

extension Paths.Ticket {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/ticket/aggregate`
        public let path: String

        /// AGGREGATE for ticket
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.Ticket {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/ticket/count`
        public let path: String

        /// COUNT for ticket
        ///
        /// Count all tickets from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.Ticket {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/ticket/bulk`
        public let path: String

        /// POST bulk  for ticket
        ///
        /// Add ticket into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for ticket
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for ticket
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var ticket: Ticket {
        Ticket(path: "/ticket")
    }

    public struct Ticket {
        /// Path: `/ticket`
        public let path: String

        /// GET for ticket
        ///
        /// Returns all tickets from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.TicketEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for ticket
        ///
        /// Add ticket into the system
        public func post(_ body: Data2CRMAPI.TicketEntity) -> Get.Request<Data2CRMAPI.TicketEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.Ticket {
    public func ticketID(_ ticketID: String) -> WithTicketID {
        WithTicketID(path: "\(path)/\(ticketID)")
    }

    public struct WithTicketID {
        /// Path: `/ticket/{ticket_id}`
        public let path: String

        /// GET for ticket
        ///
        /// Return ticket information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.TicketEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for ticket
        ///
        /// Update ticket information
        public func put(_ body: Data2CRMAPI.TicketEntity) -> Get.Request<Data2CRMAPI.TicketEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for ticket
        ///
        /// Delete ticket information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.User {
    public var describe: Describe {
        Describe(path: path + "/describe")
    }

    public struct Describe {
        /// Path: `/user/describe`
        public let path: String

        /// DESCRIBE for user
        ///
        /// Returns describe for users
        public var get: Get.Request<Data2CRMAPI.UserDescribe> {
            .get(path)
        }
    }
}

extension Paths.User {
    public var aggregate: Aggregate {
        Aggregate(path: path + "/aggregate")
    }

    public struct Aggregate {
        /// Path: `/user/aggregate`
        public let path: String

        /// AGGREGATE for user
        ///
        /// Returns aggregate for users
        public func get(parameters: GetParameters? = nil) -> Get.Request<Data2CRMAPI.Aggregate> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var pipeline: String?
            public var useFields: String?

            public init(filter: String? = nil, pipeline: String? = nil, useFields: String? = nil) {
                self.filter = filter
                self.pipeline = pipeline
                self.useFields = useFields
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(filter, forKey: "filter")
                encoder.encode(pipeline, forKey: "pipeline")
                encoder.encode(useFields, forKey: "use_fields")
                return encoder.items
            }
        }
    }
}

extension Paths.User {
    public var count: Count {
        Count(path: path + "/count")
    }

    public struct Count {
        /// Path: `/user/count`
        public let path: String

        /// COUNT for user
        ///
        /// Count all users from the system
        public func get(filter: String? = nil) -> Get.Request<Data2CRMAPI.Count> {
            .get(path, query: makeGetQuery(filter))
        }

        private func makeGetQuery(_ filter: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(filter, forKey: "filter")
            return encoder.items
        }
    }
}

extension Paths.User {
    public var bulk: Bulk {
        Bulk(path: path + "/bulk")
    }

    public struct Bulk {
        /// Path: `/user/bulk`
        public let path: String

        /// POST bulk  for user
        ///
        /// Add user into the system
        public func post(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .post(path, body: body)
        }

        /// PUT bulk  for user
        public func put(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE bulk  for user
        public func delete(_ body: Data2CRMAPI.BulkEntity) -> Get.Request<Data2CRMAPI.BulkEntity> {
            .delete(path, body: body)
        }
    }
}

extension Paths {
    public static var user: User {
        User(path: "/user")
    }

    public struct User {
        /// Path: `/user`
        public let path: String

        /// GET for user
        ///
        /// Returns all users from the system
        public func get(parameters: GetParameters? = nil) -> Get.Request<[Data2CRMAPI.UserEntity]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageSize: Int?
            public var page: Int?
            public var filter: String?
            public var expand: String?
            public var fields: String?
            public var sort: String?
            public var unique: Unique?

            public enum Unique: String, Codable, CaseIterable {
                case `false`
                case `true`
            }

            public init(pageSize: Int? = nil, page: Int? = nil, filter: String? = nil, expand: String? = nil, fields: String? = nil, sort: String? = nil, unique: Unique? = nil) {
                self.pageSize = pageSize
                self.page = page
                self.filter = filter
                self.expand = expand
                self.fields = fields
                self.sort = sort
                self.unique = unique
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageSize, forKey: "page_size")
                encoder.encode(page, forKey: "page")
                encoder.encode(filter, forKey: "filter")
                encoder.encode(expand, forKey: "expand")
                encoder.encode(fields, forKey: "fields")
                encoder.encode(sort, forKey: "sort")
                encoder.encode(unique, forKey: "unique")
                return encoder.items
            }
        }

        /// POST for user
        ///
        /// Add user into the system
        public func post(_ body: Data2CRMAPI.UserEntity) -> Get.Request<Data2CRMAPI.UserEntityRelation> {
            .post(path, body: body)
        }
    }
}

extension Paths.User {
    public func userID(_ userID: String) -> WithUserID {
        WithUserID(path: "\(path)/\(userID)")
    }

    public struct WithUserID {
        /// Path: `/user/{user_id}`
        public let path: String

        /// GET for user
        ///
        /// Return user information
        public func get(expand: String? = nil, fields: String? = nil) -> Get.Request<Data2CRMAPI.UserEntity> {
            .get(path, query: makeGetQuery(expand, fields))
        }

        private func makeGetQuery(_ expand: String?, _ fields: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(expand, forKey: "expand")
            encoder.encode(fields, forKey: "fields")
            return encoder.items
        }

        /// PUT for user
        ///
        /// Update user information
        public func put(_ body: Data2CRMAPI.UserEntity) -> Get.Request<Data2CRMAPI.UserEntityRelation> {
            .put(path, body: body)
        }

        /// DELETE for user
        ///
        /// Delete user information
        public var delete: Get.Request<Void> {
            .delete(path)
        }
    }
}

public enum Paths {}
