// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import NaiveDate

public struct SchemaDescribe: Codable {
    public var fetchAll: [String: AnyJSON]?
    public var fetch: [String: AnyJSON]?
    public var create: [String: AnyJSON]?
    public var update: [String: AnyJSON]?

    public init(fetchAll: [String: AnyJSON]? = nil, fetch: [String: AnyJSON]? = nil, create: [String: AnyJSON]? = nil, update: [String: AnyJSON]? = nil) {
        self.fetchAll = fetchAll
        self.fetch = fetch
        self.create = create
        self.update = update
    }
}

public struct AccountDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct Aggregate: Codable {
    /// Identifier
    public var id: String?
    public var result: [String: AnyJSON]?

    public init(id: String? = nil, result: [String: AnyJSON]? = nil) {
        self.id = id
        self.result = result
    }
}

public struct Count: Codable {
    /// Total
    ///
    /// Example: 7612
    public var total: Int?

    public init(total: Int? = nil) {
        self.total = total
    }
}

public struct BulkEntity: Codable {
    /// Item
    public var item: [[String: AnyJSON]]?

    public init(item: [[String: AnyJSON]]? = nil) {
        self.item = item
    }
}

public struct BulkEntityRelation: Codable {
    /// Bulk Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Item
    public var item: [[String: AnyJSON]]?

    public init(id: String? = nil, item: [[String: AnyJSON]]? = nil) {
        self.id = id
        self.item = item
    }
}

public struct Email: Codable {
    /// Type
    ///
    /// Example: "Work"
    public var type: String?
    /// Address
    ///
    /// Example: "bill.wall@mail.com"
    public var address: String?

    public init(type: String? = nil, address: String? = nil) {
        self.type = type
        self.address = address
    }
}

public struct Phone: Codable {
    /// Type
    ///
    /// Example: "Work"
    public var type: String?
    /// Number
    ///
    /// Example: "(817) 569-8900"
    public var number: String?

    public init(type: String? = nil, number: String? = nil) {
        self.type = type
        self.number = number
    }
}

public struct Messenger: Codable {
    /// Type
    ///
    /// Example: "Work"
    public var type: String?
    /// Location
    ///
    /// Example: "(817) 569-8900"
    public var location: String?

    public init(type: String? = nil, location: String? = nil) {
        self.type = type
        self.location = location
    }
}

public struct Website: Codable {
    /// Type
    ///
    /// Example: "Work"
    public var type: String?
    /// Address
    ///
    /// Example: "http://google.com/"
    public var address: String?

    public init(type: String? = nil, address: String? = nil) {
        self.type = type
        self.address = address
    }
}

public struct Address: Codable {
    /// Type
    ///
    /// Example: "billing"
    public var type: String?
    /// Street
    ///
    /// Example: "NY"
    public var street: String?
    /// City
    ///
    /// Example: "Brandenburg"
    public var city: String?
    /// State
    ///
    /// Example: "NY"
    public var state: String?
    /// Country
    ///
    /// Example: "USA"
    public var country: String?
    /// Zip
    ///
    /// Example: "47212"
    public var zip: String?

    public init(type: String? = nil, street: String? = nil, city: String? = nil, state: String? = nil, country: String? = nil, zip: String? = nil) {
        self.type = type
        self.street = street
        self.city = city
        self.state = state
        self.country = country
        self.zip = zip
    }
}

public struct AccountRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: AccountEntityRelation?

    public init(type: String? = nil, entity: AccountEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct ContactRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: ContactEntityRelation?

    public init(type: String? = nil, entity: ContactEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct LeadRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: LeadEntityRelation?

    public init(type: String? = nil, entity: LeadEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct OpportunityRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: OpportunityEntityRelation?

    public init(type: String? = nil, entity: OpportunityEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct TaskRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: TaskEntityRelation?

    public init(type: String? = nil, entity: TaskEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct CallRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: CallEntityRelation?

    public init(type: String? = nil, entity: CallEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct EmailRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: EmailEntityRelation?

    public init(type: String? = nil, entity: EmailEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct EventRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: EventEntityRelation?

    public init(type: String? = nil, entity: EventEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct MeetingRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: MeetingEntityRelation?

    public init(type: String? = nil, entity: MeetingEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct NoteRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: NoteEntityRelation?

    public init(type: String? = nil, entity: NoteEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct AttachmentRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: AttachmentEntityRelation?

    public init(type: String? = nil, entity: AttachmentEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct CampaignRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: CampaignEntityRelation?

    public init(type: String? = nil, entity: CampaignEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct ProjectRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: ProjectEntityRelation?

    public init(type: String? = nil, entity: ProjectEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct CaseRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: CasesEntityRelation?

    public init(type: String? = nil, entity: CasesEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct TicketRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: TicketEntityRelation?

    public init(type: String? = nil, entity: TicketEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct ProductRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: ProductEntityRelation?

    public init(type: String? = nil, entity: ProductEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct OpportunityProductRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: OpportunityProductEntityRelation?

    public init(type: String? = nil, entity: OpportunityProductEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct InvoiceRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: InvoiceEntityRelation?

    public init(type: String? = nil, entity: InvoiceEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct InvoiceItemRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: InvoiceItemEntityRelation?

    public init(type: String? = nil, entity: InvoiceItemEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct QuoteRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: QuoteEntityRelation?

    public init(type: String? = nil, entity: QuoteEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct QuoteItemRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: QuoteItemEntityRelation?

    public init(type: String? = nil, entity: QuoteItemEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct PriceBookRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: PriceBookEntityRelation?

    public init(type: String? = nil, entity: PriceBookEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct PriceBookItemRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: PriceBookItemEntityRelation?

    public init(type: String? = nil, entity: PriceBookItemEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct PostRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: PostEntityRelation?

    public init(type: String? = nil, entity: PostEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct CommentRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: CommentEntityRelation?

    public init(type: String? = nil, entity: CommentEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct TagRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: TagEntityRelation?

    public init(type: String? = nil, entity: TagEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct UserRelation: Codable {
    /// Type
    ///
    /// Example: "General"
    public var type: String?
    public var entity: UserEntityRelation?

    public init(type: String? = nil, entity: UserEntityRelation? = nil) {
        self.type = type
        self.entity = entity
    }
}

public struct Relation: Codable {
    /// Account
    public var account: [AccountRelation]?
    /// Contact
    public var contact: [ContactRelation]?
    /// Lead
    public var lead: [LeadRelation]?
    /// Opportunity
    public var opportunity: [OpportunityRelation]?
    /// Task
    public var task: [TaskRelation]?
    /// Call
    public var call: [CallRelation]?
    /// Email
    public var email: [EmailRelation]?
    /// Event
    public var event: [EventRelation]?
    /// Meeting
    public var meeting: [MeetingRelation]?
    /// Note
    public var note: [NoteRelation]?
    /// Attachment
    public var attachment: [AttachmentRelation]?
    /// Campaign
    public var campaign: [CampaignRelation]?
    /// Project
    public var project: [ProjectRelation]?
    /// Case
    public var `case`: [CaseRelation]?
    /// Ticket
    public var ticket: [TicketRelation]?
    /// Product
    public var product: [ProductRelation]?
    /// Opportunity Product
    public var opportunityProduct: [OpportunityProductRelation]?
    /// Invoice
    public var invoice: [InvoiceRelation]?
    /// Invoice Item
    public var invoiceItem: [InvoiceItemRelation]?
    /// Quote
    public var quote: [QuoteRelation]?
    /// Quote Item
    public var quoteItem: [QuoteItemRelation]?
    /// Price Book
    public var priceBook: [PriceBookRelation]?
    /// Price Book Item
    public var priceBookItem: [PriceBookItemRelation]?
    /// Post
    public var post: [PostRelation]?
    /// Comment
    public var comment: [CommentRelation]?
    /// Tag
    public var tag: [TagRelation]?
    /// User
    public var user: [UserRelation]?

    public init(account: [AccountRelation]? = nil, contact: [ContactRelation]? = nil, lead: [LeadRelation]? = nil, opportunity: [OpportunityRelation]? = nil, task: [TaskRelation]? = nil, call: [CallRelation]? = nil, email: [EmailRelation]? = nil, event: [EventRelation]? = nil, meeting: [MeetingRelation]? = nil, note: [NoteRelation]? = nil, attachment: [AttachmentRelation]? = nil, campaign: [CampaignRelation]? = nil, project: [ProjectRelation]? = nil, `case`: [CaseRelation]? = nil, ticket: [TicketRelation]? = nil, product: [ProductRelation]? = nil, opportunityProduct: [OpportunityProductRelation]? = nil, invoice: [InvoiceRelation]? = nil, invoiceItem: [InvoiceItemRelation]? = nil, quote: [QuoteRelation]? = nil, quoteItem: [QuoteItemRelation]? = nil, priceBook: [PriceBookRelation]? = nil, priceBookItem: [PriceBookItemRelation]? = nil, post: [PostRelation]? = nil, comment: [CommentRelation]? = nil, tag: [TagRelation]? = nil, user: [UserRelation]? = nil) {
        self.account = account
        self.contact = contact
        self.lead = lead
        self.opportunity = opportunity
        self.task = task
        self.call = call
        self.email = email
        self.event = event
        self.meeting = meeting
        self.note = note
        self.attachment = attachment
        self.campaign = campaign
        self.project = project
        self.case = `case`
        self.ticket = ticket
        self.product = product
        self.opportunityProduct = opportunityProduct
        self.invoice = invoice
        self.invoiceItem = invoiceItem
        self.quote = quote
        self.quoteItem = quoteItem
        self.priceBook = priceBook
        self.priceBookItem = priceBookItem
        self.post = post
        self.comment = comment
        self.tag = tag
        self.user = user
    }

    private enum CodingKeys: String, CodingKey {
        case account
        case contact
        case lead
        case opportunity
        case task
        case call
        case email
        case event
        case meeting
        case note
        case attachment
        case campaign
        case project
        case `case` = "case"
        case ticket
        case product
        case opportunityProduct
        case invoice
        case invoiceItem
        case quote
        case quoteItem
        case priceBook
        case priceBookItem
        case post
        case comment
        case tag
        case user
    }
}

public struct AccountEntity: Codable {
    /// Account Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Type
    ///
    /// Example: "Company"
    public var type: String?
    /// Name
    ///
    /// Example: "Bill Wall"
    public var name: String?
    /// Ticker Symbol
    ///
    /// Example: "%"
    public var tickerSymbol: String?
    /// Employees
    ///
    /// Example: "230"
    public var employees: String?
    /// Ownership
    ///
    /// Example: "Public"
    public var ownership: String?
    /// Industry
    public var industry: [String]?
    /// Description
    ///
    /// Example: "Some long description"
    public var description: String?
    /// Annual Revenue
    ///
    /// Example: "23244.43552"
    public var annualRevenue: String?
    /// SIC Code
    ///
    /// Example: "2895-1"
    public var sicCode: String?
    /// Rating
    ///
    /// Example: "Active"
    public var rating: String?
    /// Category
    ///
    /// Example: "General"
    public var category: String?
    /// Email
    public var email: [Email]?
    /// Phone
    public var phone: [Phone]?
    /// Messenger
    public var messenger: [Messenger]?
    /// Website
    public var website: [Website]?
    /// Address
    public var address: [Address]?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, type: String? = nil, name: String? = nil, tickerSymbol: String? = nil, employees: String? = nil, ownership: String? = nil, industry: [String]? = nil, description: String? = nil, annualRevenue: String? = nil, sicCode: String? = nil, rating: String? = nil, category: String? = nil, email: [Email]? = nil, phone: [Phone]? = nil, messenger: [Messenger]? = nil, website: [Website]? = nil, address: [Address]? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.type = type
        self.name = name
        self.tickerSymbol = tickerSymbol
        self.employees = employees
        self.ownership = ownership
        self.industry = industry
        self.description = description
        self.annualRevenue = annualRevenue
        self.sicCode = sicCode
        self.rating = rating
        self.category = category
        self.email = email
        self.phone = phone
        self.messenger = messenger
        self.website = website
        self.address = address
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case name
        case tickerSymbol = "ticker_symbol"
        case employees
        case ownership
        case industry
        case description
        case annualRevenue = "annual_revenue"
        case sicCode = "sic_code"
        case rating
        case category
        case email
        case phone
        case messenger
        case website
        case address
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct AccountEntityRelation: Codable {
    /// Account Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct ContactEntityRelation: Codable {
    /// Contact Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct LeadEntityRelation: Codable {
    /// Lead Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct OpportunityEntityRelation: Codable {
    /// Opportunity Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct TaskEntityRelation: Codable {
    /// Task Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct CallEntityRelation: Codable {
    /// Call Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct EmailEntityRelation: Codable {
    /// Email Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct EventEntityRelation: Codable {
    /// Event Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct MeetingEntityRelation: Codable {
    /// Meeting Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct NoteEntityRelation: Codable {
    /// Note Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct AttachmentEntityRelation: Codable {
    /// Attachment Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct CampaignEntityRelation: Codable {
    /// Campaign Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct ProjectEntityRelation: Codable {
    /// Project Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct CasesEntityRelation: Codable {
    /// Case Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct TicketEntityRelation: Codable {
    /// Ticket Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct ProductEntityRelation: Codable {
    /// Product Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct OpportunityProductEntityRelation: Codable {
    /// OpportunityProduct Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct InvoiceEntityRelation: Codable {
    /// Invoice Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct InvoiceItemEntityRelation: Codable {
    /// InvoiceItem Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct QuoteEntityRelation: Codable {
    /// Quote Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct QuoteItemEntityRelation: Codable {
    /// QuoteItem Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct PriceBookEntityRelation: Codable {
    /// PriceBook Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct PriceBookItemEntityRelation: Codable {
    /// PriceBookItem Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct PostEntityRelation: Codable {
    /// Post Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct CommentEntityRelation: Codable {
    /// Comment Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct TagEntityRelation: Codable {
    /// Tag Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct UserEntityRelation: Codable {
    /// User Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct Company: Codable {
    /// Company Item Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct ApplicationEntityList: Codable {
    /// Application key
    public var key: String?
    /// User ID
    public var userID: Int?
    /// User Key
    public var userKey: String?
    /// Application platform type
    public var type: `Type`?
    /// Application authorization
    public var authorization: String?
    /// Application description
    public var description: String?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?
    /// Last Used At
    public var lastUsedAt: Date?
    /// Application URL
    public var url: String?
    public var company: Company?

    /// Application platform type
    public enum `Type`: String, Codable, CaseIterable {
        case bitrix24 = "Bitrix24"
        case microsoftDynamics = "MicrosoftDynamics"
        case vtiger = "Vtiger"
        case zohoCRM = "ZohoCRM"
        case salesforce = "Salesforce"
        case salesforceSandbox = "SalesforceSandbox"
        case solve360 = "Solve360"
        case highrise = "Highrise"
        case insightly = "Insightly"
        case hubSpot = "HubSpot"
        case pipelineDeals = "PipelineDeals"
        case sugarCRM = "SugarCRM"
        case suiteCRM = "SuiteCRM"
        case capsuleCRM = "CapsuleCRM"
        case pipedrive = "Pipedrive"
        case infusionsoft = "Infusionsoft"
        case closeIO = "CloseIO"
        case baseCRM = "BaseCRM"
        case act = "Act"
        case agileCRM = "AgileCRM"
        case prosperWorks = "ProsperWorks"
        case freshSales = "FreshSales"
        case odoo = "Odoo"
        case gSuite = "GSuite"
        case actPremiumWeb = "ActPremiumWeb"
        case marketo = "Marketo"
    }

    public init(key: String? = nil, userID: Int? = nil, userKey: String? = nil, type: `Type`? = nil, authorization: String? = nil, description: String? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, lastUsedAt: Date? = nil, url: String? = nil, company: Company? = nil) {
        self.key = key
        self.userID = userID
        self.userKey = userKey
        self.type = type
        self.authorization = authorization
        self.description = description
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.lastUsedAt = lastUsedAt
        self.url = url
        self.company = company
    }

    private enum CodingKeys: String, CodingKey {
        case key
        case userID = "user_id"
        case userKey = "user_key"
        case type
        case authorization
        case description
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case lastUsedAt = "last_used_at"
        case url
        case company
    }
}

public struct ApplicationEntityWrite: Codable {
    /// Application platform type
    public var type: `Type`?
    /// Application authorization
    public var authorization: String?
    public var credential: [String: AnyJSON]?
    /// Application description
    public var description: String?

    /// Application platform type
    public enum `Type`: String, Codable, CaseIterable {
        case bitrix24 = "Bitrix24"
        case microsoftDynamics = "MicrosoftDynamics"
        case vtiger = "Vtiger"
        case zohoCRM = "ZohoCRM"
        case salesforce = "Salesforce"
        case salesforceSandbox = "SalesforceSandbox"
        case solve360 = "Solve360"
        case highrise = "Highrise"
        case insightly = "Insightly"
        case hubSpot = "HubSpot"
        case pipelineDeals = "PipelineDeals"
        case sugarCRM = "SugarCRM"
        case suiteCRM = "SuiteCRM"
        case capsuleCRM = "CapsuleCRM"
        case pipedrive = "Pipedrive"
        case infusionsoft = "Infusionsoft"
        case closeIO = "CloseIO"
        case baseCRM = "BaseCRM"
        case act = "Act"
        case agileCRM = "AgileCRM"
        case prosperWorks = "ProsperWorks"
        case freshSales = "FreshSales"
        case odoo = "Odoo"
        case gSuite = "GSuite"
        case actPremiumWeb = "ActPremiumWeb"
        case marketo = "Marketo"
    }

    public init(type: `Type`? = nil, authorization: String? = nil, credential: [String: AnyJSON]? = nil, description: String? = nil) {
        self.type = type
        self.authorization = authorization
        self.credential = credential
        self.description = description
    }
}

public struct ApplicationEntityRelation: Codable {
    /// Application key
    public var key: String?

    public init(key: String? = nil) {
        self.key = key
    }
}

public struct `Type`: Codable {
    /// Period
    ///
    /// Example: 571
    public var period: Int?
    /// Type
    ///
    /// Example: "official"
    public var type: String?
    /// Count
    ///
    /// Example: 571.0
    public var count: Double?
    /// Available
    ///
    /// Example: 571
    public var available: Int?

    public init(period: Int? = nil, type: String? = nil, count: Double? = nil, available: Int? = nil) {
        self.period = period
        self.type = type
        self.count = count
        self.available = available
    }
}

public struct RequestsLimit: Codable {
    /// Is Exceeded
    public var isExceeded: Bool?
    /// Retry After
    public var retryAfter: Date?
    /// Type
    public var type: [`Type`]?

    public init(isExceeded: Bool? = nil, retryAfter: Date? = nil, type: [`Type`]? = nil) {
        self.isExceeded = isExceeded
        self.retryAfter = retryAfter
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case isExceeded = "is_exceeded"
        case retryAfter = "retry_after"
        case type
    }
}

public struct ApplicationEntity: Codable {
    /// Application key
    public var key: String?
    /// User ID
    public var userID: Int?
    /// User Key
    public var userKey: String?
    /// Application platform type
    public var type: `Type`?
    /// Application authorization
    public var authorization: String?
    /// Application description
    public var description: String?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?
    /// Last Used At
    public var lastUsedAt: Date?
    /// Application URL
    public var url: String?
    public var company: Company?
    /// Is Authorized
    public var isAuthorized: Bool?
    /// Application Plan
    public var plan: String?
    public var requestsLimit: RequestsLimit?
    public var me: UserEntity?

    /// Application platform type
    public enum `Type`: String, Codable, CaseIterable {
        case bitrix24 = "Bitrix24"
        case microsoftDynamics = "MicrosoftDynamics"
        case vtiger = "Vtiger"
        case zohoCRM = "ZohoCRM"
        case salesforce = "Salesforce"
        case salesforceSandbox = "SalesforceSandbox"
        case solve360 = "Solve360"
        case highrise = "Highrise"
        case insightly = "Insightly"
        case hubSpot = "HubSpot"
        case pipelineDeals = "PipelineDeals"
        case sugarCRM = "SugarCRM"
        case suiteCRM = "SuiteCRM"
        case capsuleCRM = "CapsuleCRM"
        case pipedrive = "Pipedrive"
        case infusionsoft = "Infusionsoft"
        case closeIO = "CloseIO"
        case baseCRM = "BaseCRM"
        case act = "Act"
        case agileCRM = "AgileCRM"
        case prosperWorks = "ProsperWorks"
        case freshSales = "FreshSales"
        case odoo = "Odoo"
        case gSuite = "GSuite"
        case actPremiumWeb = "ActPremiumWeb"
        case marketo = "Marketo"
    }

    public init(key: String? = nil, userID: Int? = nil, userKey: String? = nil, type: `Type`? = nil, authorization: String? = nil, description: String? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, lastUsedAt: Date? = nil, url: String? = nil, company: Company? = nil, isAuthorized: Bool? = nil, plan: String? = nil, requestsLimit: RequestsLimit? = nil, me: UserEntity? = nil) {
        self.key = key
        self.userID = userID
        self.userKey = userKey
        self.type = type
        self.authorization = authorization
        self.description = description
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.lastUsedAt = lastUsedAt
        self.url = url
        self.company = company
        self.isAuthorized = isAuthorized
        self.plan = plan
        self.requestsLimit = requestsLimit
        self.me = me
    }

    private enum CodingKeys: String, CodingKey {
        case key
        case userID = "user_id"
        case userKey = "user_key"
        case type
        case authorization
        case description
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case lastUsedAt = "last_used_at"
        case url
        case company
        case isAuthorized = "is_authorized"
        case plan
        case requestsLimit = "requests_limit"
        case me
    }
}

public struct AttachmentDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct AttachmentEntityList: Codable {
    /// Attachment Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Title
    ///
    /// Example: "Employees List File (json)"
    public var title: String?
    /// Description
    ///
    /// Example: "Description of attachment"
    public var description: String?
    /// Link
    ///
    /// Example: "http://s-10.server.host.com/f/2015/01/01/a/file.json"
    public var link: String?
    /// Name
    ///
    /// Example: "file.json"
    public var name: String?
    /// Mime Type
    ///
    /// Example: "application/json"
    public var mimeType: String?
    /// Size (in bytes)
    ///
    /// Example: 34345
    public var size: Int?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, title: String? = nil, description: String? = nil, link: String? = nil, name: String? = nil, mimeType: String? = nil, size: Int? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.title = title
        self.description = description
        self.link = link
        self.name = name
        self.mimeType = mimeType
        self.size = size
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case title
        case description
        case link
        case name
        case mimeType = "mime_type"
        case size
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct AttachmentEntityWrite: Codable {
    /// Title
    ///
    /// Example: "Employees List File (json)"
    public var title: String?
    /// Description
    ///
    /// Example: "Description of attachment"
    public var description: String?
    /// Link
    ///
    /// Example: "http://s-10.server.host.com/f/2015/01/01/a/file.json"
    public var link: String?
    /// Name
    ///
    /// Example: "file.json"
    public var name: String?
    /// Mime Type
    ///
    /// Example: "application/json"
    public var mimeType: String?
    /// Size (in bytes)
    ///
    /// Example: 34345
    public var size: Int?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(title: String? = nil, description: String? = nil, link: String? = nil, name: String? = nil, mimeType: String? = nil, size: Int? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.title = title
        self.description = description
        self.link = link
        self.name = name
        self.mimeType = mimeType
        self.size = size
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case title
        case description
        case link
        case name
        case mimeType = "mime_type"
        case size
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct AttachmentEntity: Codable {
    /// Attachment Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Title
    ///
    /// Example: "Employees List File (json)"
    public var title: String?
    /// Description
    ///
    /// Example: "Description of attachment"
    public var description: String?
    /// Link
    ///
    /// Example: "http://s-10.server.host.com/f/2015/01/01/a/file.json"
    public var link: String?
    /// Name
    ///
    /// Example: "file.json"
    public var name: String?
    /// Mime Type
    ///
    /// Example: "application/json"
    public var mimeType: String?
    /// Size (in bytes)
    ///
    /// Example: 34345
    public var size: Int?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, title: String? = nil, description: String? = nil, link: String? = nil, name: String? = nil, mimeType: String? = nil, size: Int? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.title = title
        self.description = description
        self.link = link
        self.name = name
        self.mimeType = mimeType
        self.size = size
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case title
        case description
        case link
        case name
        case mimeType = "mime_type"
        case size
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct CallDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct CallEntity: Codable {
    /// Call Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Direction
    ///
    /// Example: "Inbound"
    public var direction: String?
    /// Purpose
    ///
    /// Example: "Negotiation"
    public var purpose: String?
    /// Subject
    ///
    /// Example: "Subject of the call"
    public var subject: String?
    /// Description
    ///
    /// Example: "Description of the call"
    public var description: String?
    /// Status
    ///
    /// Example: "Planned"
    public var status: String?
    /// Result
    ///
    /// Example: "Confirmed"
    public var result: String?
    /// Started At
    public var startedAt: Date?
    /// Ended At
    public var endedAt: Date?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, direction: String? = nil, purpose: String? = nil, subject: String? = nil, description: String? = nil, status: String? = nil, result: String? = nil, startedAt: Date? = nil, endedAt: Date? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.direction = direction
        self.purpose = purpose
        self.subject = subject
        self.description = description
        self.status = status
        self.result = result
        self.startedAt = startedAt
        self.endedAt = endedAt
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case direction
        case purpose
        case subject
        case description
        case status
        case result
        case startedAt = "started_at"
        case endedAt = "ended_at"
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct CampaignDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct Currency: Codable {
    /// ISO 4217 Code
    ///
    /// Example: "USD"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct CampaignEntity: Codable {
    /// Campaign Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Type
    ///
    /// Example: "Telemarketing"
    public var type: String?
    /// Name
    ///
    /// Example: "Name of the campaign"
    public var name: String?
    /// Status
    ///
    /// Example: "active"
    public var status: String?
    /// Is Active
    ///
    /// Example: true
    public var isActive: Bool?
    public var currency: Currency?
    /// Expected Start At
    public var expectedStartAt: Date?
    /// Expected End At
    public var expectedEndAt: Date?
    /// Started At
    public var startedAt: Date?
    /// Ended At
    public var endedAt: Date?
    /// Description
    ///
    /// Example: "Description of the campaign"
    public var description: String?
    /// Objective
    ///
    /// Example: "Objective of the campaign"
    public var objective: String?
    /// Budgeted Cost
    ///
    /// Example: 4235.91
    public var budgetedCost: Double?
    /// Actual Cost
    ///
    /// Example: 4235.91
    public var actualCost: Double?
    /// Expected Response
    ///
    /// Example: 4235.91
    public var expectedResponse: Double?
    /// Expected Revenue
    ///
    /// Example: 4235.91
    public var expectedRevenue: Double?
    /// Numbers Sent
    ///
    /// Example: 571
    public var numbersSent: Int?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, type: String? = nil, name: String? = nil, status: String? = nil, isActive: Bool? = nil, currency: Currency? = nil, expectedStartAt: Date? = nil, expectedEndAt: Date? = nil, startedAt: Date? = nil, endedAt: Date? = nil, description: String? = nil, objective: String? = nil, budgetedCost: Double? = nil, actualCost: Double? = nil, expectedResponse: Double? = nil, expectedRevenue: Double? = nil, numbersSent: Int? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.type = type
        self.name = name
        self.status = status
        self.isActive = isActive
        self.currency = currency
        self.expectedStartAt = expectedStartAt
        self.expectedEndAt = expectedEndAt
        self.startedAt = startedAt
        self.endedAt = endedAt
        self.description = description
        self.objective = objective
        self.budgetedCost = budgetedCost
        self.actualCost = actualCost
        self.expectedResponse = expectedResponse
        self.expectedRevenue = expectedRevenue
        self.numbersSent = numbersSent
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case name
        case status
        case isActive = "is_active"
        case currency
        case expectedStartAt = "expected_start_at"
        case expectedEndAt = "expected_end_at"
        case startedAt = "started_at"
        case endedAt = "ended_at"
        case description
        case objective
        case budgetedCost = "budgeted_cost"
        case actualCost = "actual_cost"
        case expectedResponse = "expected_response"
        case expectedRevenue = "expected_revenue"
        case numbersSent = "numbers_sent"
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct CaseDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct CasesEntity: Codable {
    /// Case Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Type
    ///
    /// Example: "Sales"
    public var type: String?
    /// Subject
    ///
    /// Example: "Bill Wall"
    public var subject: String?
    /// Number
    ///
    /// Example: "21312411"
    public var number: String?
    /// Status
    ///
    /// Example: "active"
    public var status: String?
    /// Reason
    ///
    /// Example: "performance"
    public var reason: String?
    /// Origin
    ///
    /// Example: "phone"
    public var origin: String?
    /// Priority
    ///
    /// Example: "high"
    public var priority: String?
    /// Pipeline With Stage
    ///
    /// Example: "Default / Contacted"
    public var pipelineWithStage: String?
    /// Description
    ///
    /// Example: "Description"
    public var description: String?
    /// Internal Comments
    ///
    /// Example: "Internal Comments"
    public var internalComments: String?
    /// Resolution
    ///
    /// Example: "fixed"
    public var resolution: String?
    /// Resolution Comments
    ///
    /// Example: "fixed"
    public var resolutionComments: String?
    /// Expected End At
    public var expectedEndAt: Date?
    /// Ended At
    public var endedAt: Date?
    /// Is Closed
    ///
    /// Example: true
    public var isClosed: Bool?
    /// Is Escalated
    ///
    /// Example: true
    public var isEscalated: Bool?
    /// Satisfaction
    ///
    /// Example: "very happy"
    public var satisfaction: String?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, type: String? = nil, subject: String? = nil, number: String? = nil, status: String? = nil, reason: String? = nil, origin: String? = nil, priority: String? = nil, pipelineWithStage: String? = nil, description: String? = nil, internalComments: String? = nil, resolution: String? = nil, resolutionComments: String? = nil, expectedEndAt: Date? = nil, endedAt: Date? = nil, isClosed: Bool? = nil, isEscalated: Bool? = nil, satisfaction: String? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.type = type
        self.subject = subject
        self.number = number
        self.status = status
        self.reason = reason
        self.origin = origin
        self.priority = priority
        self.pipelineWithStage = pipelineWithStage
        self.description = description
        self.internalComments = internalComments
        self.resolution = resolution
        self.resolutionComments = resolutionComments
        self.expectedEndAt = expectedEndAt
        self.endedAt = endedAt
        self.isClosed = isClosed
        self.isEscalated = isEscalated
        self.satisfaction = satisfaction
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case subject
        case number
        case status
        case reason
        case origin
        case priority
        case pipelineWithStage = "pipeline_with_stage"
        case description
        case internalComments = "internal_comments"
        case resolution
        case resolutionComments = "resolution_comments"
        case expectedEndAt = "expected_end_at"
        case endedAt = "ended_at"
        case isClosed = "is_closed"
        case isEscalated = "is_escalated"
        case satisfaction
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct CommentDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct CommentEntity: Codable {
    /// Comment Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Body
    ///
    /// Example: "My first comment"
    public var body: String?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, body: String? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.body = body
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case body
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct ContactDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct ContactEntity: Codable {
    /// Contact Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Salutation
    ///
    /// Example: "Mr."
    public var salutation: String?
    /// First Name
    ///
    /// Example: "Bill"
    public var firstName: String?
    /// Middle Name
    ///
    /// Example: "van"
    public var middleName: String?
    /// Last Name
    ///
    /// Example: "Wall"
    public var lastName: String?
    /// Name Suffix
    ///
    /// Example: "Jr."
    public var nameSuffix: String?
    /// Birth Date
    ///
    /// Example: "1982-11-28"
    public var birthDate: NaiveDate?
    /// Description
    ///
    /// Example: "Description of the contact"
    public var description: String?
    /// Position (job)
    ///
    /// Example: "Director of Vendor Relations"
    public var position: String?
    /// Department
    ///
    /// Example: "D2C"
    public var department: String?
    /// Lead Source
    ///
    /// Example: "Campaign"
    public var leadSource: String?
    /// Do Not Call
    public var isDoNotCall: Bool?
    /// Sync To Outlook
    public var isSyncToOutlook: Bool?
    /// Type
    ///
    /// Example: "Bill Wall"
    public var type: String?
    /// Email
    public var email: [Email]?
    /// Phone
    public var phone: [Phone]?
    /// Messenger
    public var messenger: [Messenger]?
    /// Website
    public var website: [Website]?
    /// Address
    public var address: [Address]?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, salutation: String? = nil, firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, nameSuffix: String? = nil, birthDate: NaiveDate? = nil, description: String? = nil, position: String? = nil, department: String? = nil, leadSource: String? = nil, isDoNotCall: Bool? = nil, isSyncToOutlook: Bool? = nil, type: String? = nil, email: [Email]? = nil, phone: [Phone]? = nil, messenger: [Messenger]? = nil, website: [Website]? = nil, address: [Address]? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.salutation = salutation
        self.firstName = firstName
        self.middleName = middleName
        self.lastName = lastName
        self.nameSuffix = nameSuffix
        self.birthDate = birthDate
        self.description = description
        self.position = position
        self.department = department
        self.leadSource = leadSource
        self.isDoNotCall = isDoNotCall
        self.isSyncToOutlook = isSyncToOutlook
        self.type = type
        self.email = email
        self.phone = phone
        self.messenger = messenger
        self.website = website
        self.address = address
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case salutation
        case firstName = "first_name"
        case middleName = "middle_name"
        case lastName = "last_name"
        case nameSuffix = "name_suffix"
        case birthDate = "birth_date"
        case description
        case position
        case department
        case leadSource = "lead_source"
        case isDoNotCall = "do_not_call"
        case isSyncToOutlook = "sync_to_outlook"
        case type
        case email
        case phone
        case messenger
        case website
        case address
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct CustomEntityEntity: Codable {
    /// Custom Entity Identifier
    ///
    /// Example: "BugIntegration"
    public var id: String?
    /// Name
    ///
    /// Example: "BugIntegration"
    public var name: String?
    /// Entity
    ///
    /// Example: "Bug Integration"
    public var entity: String?
    /// Collection
    ///
    /// Example: "Bug Integrations"
    public var collection: String?
    /// Is Custom
    ///
    /// Example: true
    public var isCustom: Bool?
    /// Is Supported
    ///
    /// Example: true
    public var isSupported: Bool?

    public init(id: String? = nil, name: String? = nil, entity: String? = nil, collection: String? = nil, isCustom: Bool? = nil, isSupported: Bool? = nil) {
        self.id = id
        self.name = name
        self.entity = entity
        self.collection = collection
        self.isCustom = isCustom
        self.isSupported = isSupported
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case name
        case entity
        case collection
        case isCustom = "is_custom"
        case isSupported = "is_supported"
    }
}

public struct CustomEntityItemDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct CustomEntityItemEntity: Codable {
    /// Custom Entity Item Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Email
    public var email: [Email]?
    /// Phone
    public var phone: [Phone]?
    /// Messenger
    public var messenger: [Messenger]?
    /// Website
    public var website: [Website]?
    /// Address
    public var address: [Address]?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, email: [Email]? = nil, phone: [Phone]? = nil, messenger: [Messenger]? = nil, website: [Website]? = nil, address: [Address]? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.email = email
        self.phone = phone
        self.messenger = messenger
        self.website = website
        self.address = address
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case email
        case phone
        case messenger
        case website
        case address
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct CustomEntityItemEntityRelation: Codable {
    /// Custom Entity Item Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct CustomFieldEntity: Codable {
    /// Custom Field Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Label
    ///
    /// Example: "Custom"
    public var label: String?
    /// Type
    ///
    /// Example: "boolean"
    public var type: String?
    /// Array Item
    ///
    /// Example: "boolean"
    public var arrayItem: String?
    /// Format
    ///
    /// Example: "date"
    public var format: String?
    /// Is Enum
    ///
    /// Example: true
    public var isEnum: Bool?
    /// Relation
    public var relation: [String]?

    public init(id: String? = nil, label: String? = nil, type: String? = nil, arrayItem: String? = nil, format: String? = nil, isEnum: Bool? = nil, relation: [String]? = nil) {
        self.id = id
        self.label = label
        self.type = type
        self.arrayItem = arrayItem
        self.format = format
        self.isEnum = isEnum
        self.relation = relation
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case label
        case type
        case arrayItem = "array_item"
        case format
        case isEnum = "is_enum"
        case relation
    }
}

public struct CustomFieldItemDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct CustomFieldItemEntity: Codable {
    /// Custom Field Item Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Entity
    ///
    /// Example: "contact"
    public var entity: String?
    /// Label
    ///
    /// Example: "Custom"
    public var label: String?
    /// Name
    ///
    /// Example: "Custom"
    public var name: String?
    /// Description
    ///
    /// Example: "Custom"
    public var description: String?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, entity: String? = nil, label: String? = nil, name: String? = nil, description: String? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.entity = entity
        self.label = label
        self.name = name
        self.description = description
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case entity
        case label
        case name
        case description
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct CustomFieldItemEntityRelation: Codable {
    /// Custom Field Item Identifier
    ///
    /// Example: "21312411"
    public var id: String?

    public init(id: String? = nil) {
        self.id = id
    }
}

public struct EmailDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct EmailEntity: Codable {
    /// Email Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Direction
    ///
    /// Example: "Outbound"
    public var direction: String?
    /// From
    ///
    /// Example: "bill.wall@mail.com"
    public var from: String?
    /// To
    public var to: [String]?
    /// CC
    public var cc: [String]?
    /// BCC
    public var bcc: [String]?
    /// Subject
    ///
    /// Example: "Subject of the email"
    public var subject: String?
    /// Body
    ///
    /// Example: "Body of the email"
    public var body: String?
    /// Status
    ///
    /// Example: "Sent"
    public var status: String?
    /// Sent At
    public var sentAt: Date?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, direction: String? = nil, from: String? = nil, to: [String]? = nil, cc: [String]? = nil, bcc: [String]? = nil, subject: String? = nil, body: String? = nil, status: String? = nil, sentAt: Date? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.direction = direction
        self.from = from
        self.to = to
        self.cc = cc
        self.bcc = bcc
        self.subject = subject
        self.body = body
        self.status = status
        self.sentAt = sentAt
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case direction
        case from
        case to
        case cc
        case bcc
        case subject
        case body
        case status
        case sentAt = "sent_at"
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct EventDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct EventEntity: Codable {
    /// Event Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Location
    ///
    /// Example: "London"
    public var location: String?
    /// Subject
    ///
    /// Example: "Subject of the event"
    public var subject: String?
    /// Description
    ///
    /// Example: "Description of the event"
    public var description: String?
    /// Status
    ///
    /// Example: "Held"
    public var status: String?
    /// Started At
    public var startedAt: Date?
    /// Ended At
    public var endedAt: Date?
    /// Is All Day
    public var isAllDay: Bool?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, location: String? = nil, subject: String? = nil, description: String? = nil, status: String? = nil, startedAt: Date? = nil, endedAt: Date? = nil, isAllDay: Bool? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.location = location
        self.subject = subject
        self.description = description
        self.status = status
        self.startedAt = startedAt
        self.endedAt = endedAt
        self.isAllDay = isAllDay
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case location
        case subject
        case description
        case status
        case startedAt = "started_at"
        case endedAt = "ended_at"
        case isAllDay = "is_all_day"
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct InternalUserEntity: Codable {
    /// User Key
    ///
    /// Example: "21312411"
    public var key: String?
    /// Name
    ///
    /// Example: "Bill Wall"
    public var name: String?
    /// Status
    ///
    /// Example: "active"
    public var status: String?
    /// Roles
    public var roles: [String]?
    /// Email
    ///
    /// Example: "bill.wall@mail.com"
    public var email: String?
    /// Phone
    ///
    /// Example: "(817) 569-8900"
    public var phone: String?
    /// Organization
    ///
    /// Example: "M&M"
    public var organization: String?
    /// Request Count
    public var requestCount: Int?
    /// Internal Request Count
    public var internalRequestCount: Int?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?
    /// Last Used At
    public var lastUsedAt: Date?

    public init(key: String? = nil, name: String? = nil, status: String? = nil, roles: [String]? = nil, email: String? = nil, phone: String? = nil, organization: String? = nil, requestCount: Int? = nil, internalRequestCount: Int? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, lastUsedAt: Date? = nil) {
        self.key = key
        self.name = name
        self.status = status
        self.roles = roles
        self.email = email
        self.phone = phone
        self.organization = organization
        self.requestCount = requestCount
        self.internalRequestCount = internalRequestCount
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.lastUsedAt = lastUsedAt
    }

    private enum CodingKeys: String, CodingKey {
        case key
        case name
        case status
        case roles
        case email
        case phone
        case organization
        case requestCount = "request_count"
        case internalRequestCount = "internal_request_count"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case lastUsedAt = "last_used_at"
    }
}

public struct InternalUserEntityRelation: Codable {
    /// User Key
    ///
    /// Example: "21312411"
    public var key: String?

    public init(key: String? = nil) {
        self.key = key
    }
}

public struct InvoiceDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct Discount: Codable {
    /// Type
    ///
    /// Example: "Work"
    public var type: String?
    /// Value
    ///
    /// Example: 4235.91
    public var value: Double?
    /// Percent Value
    ///
    /// Example: 4235.91
    public var percentValue: Double?

    public init(type: String? = nil, value: Double? = nil, percentValue: Double? = nil) {
        self.type = type
        self.value = value
        self.percentValue = percentValue
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case value
        case percentValue = "percent_value"
    }
}

public struct Tax: Codable {
    /// Type
    ///
    /// Example: "Work"
    public var type: String?
    /// Value
    ///
    /// Example: 4235.91
    public var value: Double?
    /// Percent Value
    ///
    /// Example: 4235.91
    public var percentValue: Double?

    public init(type: String? = nil, value: Double? = nil, percentValue: Double? = nil) {
        self.type = type
        self.value = value
        self.percentValue = percentValue
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case value
        case percentValue = "percent_value"
    }
}

public struct InvoiceEntity: Codable {
    /// Invoice Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Subject
    ///
    /// Example: "Sales"
    public var subject: String?
    /// Number
    ///
    /// Example: "21312411"
    public var number: String?
    /// Status
    ///
    /// Example: "active"
    public var status: String?
    public var currency: Currency?
    /// Description
    ///
    /// Example: "Description"
    public var description: String?
    /// Terms And Conditions
    ///
    /// Example: "Conditions"
    public var termsAndConditions: String?
    /// Invoice Date
    ///
    /// Example: "1982-11-28"
    public var invoiceDate: NaiveDate?
    /// Due Date
    ///
    /// Example: "1982-11-28"
    public var dueDate: NaiveDate?
    /// Sales Commission
    ///
    /// Example: 4235.91
    public var salesCommission: Double?
    /// Purchase Order
    ///
    /// Example: "Order for notebook"
    public var purchaseOrder: String?
    /// Excise Duty
    ///
    /// Example: 4235.91
    public var exciseDuty: Double?
    /// Subtotal
    ///
    /// Example: 4235.91
    public var subtotal: Double?
    /// Discount
    public var discount: [Discount]?
    /// Tax
    public var tax: [Tax]?
    /// Total Price
    ///
    /// Example: 4235.91
    public var totalPrice: Double?
    /// Shipping And Handling
    ///
    /// Example: 4235.91
    public var shippingAndHandling: Double?
    /// Adjustment
    ///
    /// Example: 4235.91
    public var adjustment: Double?
    /// Grand Total
    ///
    /// Example: 4235.91
    public var grandTotal: Double?
    /// Received
    ///
    /// Example: 4235.91
    public var received: Double?
    /// Balance
    ///
    /// Example: 4235.91
    public var balance: Double?
    /// Address
    public var address: [Address]?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, subject: String? = nil, number: String? = nil, status: String? = nil, currency: Currency? = nil, description: String? = nil, termsAndConditions: String? = nil, invoiceDate: NaiveDate? = nil, dueDate: NaiveDate? = nil, salesCommission: Double? = nil, purchaseOrder: String? = nil, exciseDuty: Double? = nil, subtotal: Double? = nil, discount: [Discount]? = nil, tax: [Tax]? = nil, totalPrice: Double? = nil, shippingAndHandling: Double? = nil, adjustment: Double? = nil, grandTotal: Double? = nil, received: Double? = nil, balance: Double? = nil, address: [Address]? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.subject = subject
        self.number = number
        self.status = status
        self.currency = currency
        self.description = description
        self.termsAndConditions = termsAndConditions
        self.invoiceDate = invoiceDate
        self.dueDate = dueDate
        self.salesCommission = salesCommission
        self.purchaseOrder = purchaseOrder
        self.exciseDuty = exciseDuty
        self.subtotal = subtotal
        self.discount = discount
        self.tax = tax
        self.totalPrice = totalPrice
        self.shippingAndHandling = shippingAndHandling
        self.adjustment = adjustment
        self.grandTotal = grandTotal
        self.received = received
        self.balance = balance
        self.address = address
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case subject
        case number
        case status
        case currency
        case description
        case termsAndConditions = "terms_and_conditions"
        case invoiceDate = "invoice_date"
        case dueDate = "due_date"
        case salesCommission = "sales_commission"
        case purchaseOrder = "purchase_order"
        case exciseDuty = "excise_duty"
        case subtotal
        case discount
        case tax
        case totalPrice = "total_price"
        case shippingAndHandling = "shipping_and_handling"
        case adjustment
        case grandTotal = "grand_total"
        case received
        case balance
        case address
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct InvoiceItemDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct InvoiceItemEntity: Codable {
    /// InvoiceItem Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Number
    ///
    /// Example: "21312411"
    public var number: String?
    /// Description
    ///
    /// Example: "Description"
    public var description: String?
    /// List Price
    ///
    /// Example: 4235.91
    public var listPrice: Double?
    /// Sales Price
    ///
    /// Example: 4235.91
    public var salesPrice: Double?
    /// Quantity
    ///
    /// Example: 4235.91
    public var quantity: Double?
    /// Subtotal
    ///
    /// Example: 4235.91
    public var subtotal: Double?
    /// Discount
    public var discount: [Discount]?
    /// Tax
    public var tax: [Tax]?
    /// Total Price
    ///
    /// Example: 4235.91
    public var totalPrice: Double?
    /// Unit
    ///
    /// Example: "kg"
    public var unit: String?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, number: String? = nil, description: String? = nil, listPrice: Double? = nil, salesPrice: Double? = nil, quantity: Double? = nil, subtotal: Double? = nil, discount: [Discount]? = nil, tax: [Tax]? = nil, totalPrice: Double? = nil, unit: String? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.number = number
        self.description = description
        self.listPrice = listPrice
        self.salesPrice = salesPrice
        self.quantity = quantity
        self.subtotal = subtotal
        self.discount = discount
        self.tax = tax
        self.totalPrice = totalPrice
        self.unit = unit
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case number
        case description
        case listPrice = "list_price"
        case salesPrice = "sales_price"
        case quantity
        case subtotal
        case discount
        case tax
        case totalPrice = "total_price"
        case unit
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct LeadDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct LeadEntity: Codable {
    /// Lead Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Salutation
    ///
    /// Example: "Mr."
    public var salutation: String?
    /// First Name
    ///
    /// Example: "Bill"
    public var firstName: String?
    /// Middle Name
    ///
    /// Example: "van"
    public var middleName: String?
    /// Last Name
    ///
    /// Example: "Wall"
    public var lastName: String?
    /// Name Suffix
    ///
    /// Example: "Jr."
    public var nameSuffix: String?
    /// Description
    ///
    /// Example: "Description of the contact"
    public var description: String?
    /// Position (job)
    ///
    /// Example: "Director of Vendor Relations"
    public var position: String?
    /// Department
    ///
    /// Example: "D2C"
    public var department: String?
    /// Company
    ///
    /// Example: "M&M"
    public var company: String?
    /// Industry
    public var industry: [String]?
    /// Annual Revenue
    ///
    /// Example: "100000"
    public var annualRevenue: String?
    /// Birth Date
    ///
    /// Example: "1982-11-28"
    public var birthDate: NaiveDate?
    /// Type
    ///
    /// Example: "Bill Wall"
    public var type: String?
    /// Rating
    ///
    /// Example: "Hot"
    public var rating: String?
    /// Lead Source
    public var source: String?
    /// Lead Source Description
    ///
    /// Example: "Website Application"
    public var sourceDescription: String?
    /// Status
    ///
    /// Example: "Waiting for details"
    public var status: String?
    /// Status Description
    ///
    /// Example: "Description"
    public var statusDescription: String?
    /// Do Not Call
    public var isDoNotCall: Bool?
    /// Email
    public var email: [Email]?
    /// Phone
    public var phone: [Phone]?
    /// Messenger
    public var messenger: [Messenger]?
    /// Website
    public var website: [Website]?
    /// Address
    public var address: [Address]?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, salutation: String? = nil, firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, nameSuffix: String? = nil, description: String? = nil, position: String? = nil, department: String? = nil, company: String? = nil, industry: [String]? = nil, annualRevenue: String? = nil, birthDate: NaiveDate? = nil, type: String? = nil, rating: String? = nil, source: String? = nil, sourceDescription: String? = nil, status: String? = nil, statusDescription: String? = nil, isDoNotCall: Bool? = nil, email: [Email]? = nil, phone: [Phone]? = nil, messenger: [Messenger]? = nil, website: [Website]? = nil, address: [Address]? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.salutation = salutation
        self.firstName = firstName
        self.middleName = middleName
        self.lastName = lastName
        self.nameSuffix = nameSuffix
        self.description = description
        self.position = position
        self.department = department
        self.company = company
        self.industry = industry
        self.annualRevenue = annualRevenue
        self.birthDate = birthDate
        self.type = type
        self.rating = rating
        self.source = source
        self.sourceDescription = sourceDescription
        self.status = status
        self.statusDescription = statusDescription
        self.isDoNotCall = isDoNotCall
        self.email = email
        self.phone = phone
        self.messenger = messenger
        self.website = website
        self.address = address
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case salutation
        case firstName = "first_name"
        case middleName = "middle_name"
        case lastName = "last_name"
        case nameSuffix = "name_suffix"
        case description
        case position
        case department
        case company
        case industry
        case annualRevenue = "annual_revenue"
        case birthDate = "birth_date"
        case type
        case rating
        case source
        case sourceDescription = "source_description"
        case status
        case statusDescription = "status_description"
        case isDoNotCall = "do_not_call"
        case email
        case phone
        case messenger
        case website
        case address
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct MeetingDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct MeetingEntity: Codable {
    /// Meeting Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Location
    ///
    /// Example: "Location"
    public var location: String?
    /// Subject
    ///
    /// Example: "My first note"
    public var subject: String?
    /// Description
    ///
    /// Example: "Description of the meeting"
    public var description: String?
    /// Status
    ///
    /// Example: "Held"
    public var status: String?
    /// Result
    ///
    /// Example: "Confirmed"
    public var result: String?
    /// Started At
    public var startedAt: Date?
    /// Ended At
    public var endedAt: Date?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, location: String? = nil, subject: String? = nil, description: String? = nil, status: String? = nil, result: String? = nil, startedAt: Date? = nil, endedAt: Date? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.location = location
        self.subject = subject
        self.description = description
        self.status = status
        self.result = result
        self.startedAt = startedAt
        self.endedAt = endedAt
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case location
        case subject
        case description
        case status
        case result
        case startedAt = "started_at"
        case endedAt = "ended_at"
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct NoteDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct NoteEntity: Codable {
    /// Note Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Subject
    ///
    /// Example: "My first note"
    public var subject: String?
    /// Body
    ///
    /// Example: "Body of the note"
    public var body: String?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, subject: String? = nil, body: String? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.subject = subject
        self.body = body
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case subject
        case body
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct OpportunityDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct OpportunityEntity: Codable {
    /// Opportunity Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Name
    ///
    /// Example: "Bill Wall"
    public var name: String?
    /// Description
    ///
    /// Example: "Description"
    public var description: String?
    /// Type
    ///
    /// Example: "Sales"
    public var type: String?
    /// Lead Source
    ///
    /// Example: "Web Site"
    public var leadSource: String?
    public var currency: Currency?
    /// Expected Amount
    ///
    /// Example: 4235.91
    public var expectedAmount: Double?
    /// Amount
    ///
    /// Example: 4235.91
    public var amount: Double?
    /// State
    ///
    /// Example: "Open"
    public var state: String?
    /// Pipeline With Stage
    ///
    /// Example: "Default / Contacted"
    public var pipelineWithStage: String?
    /// Next Step
    ///
    /// Example: "Contact"
    public var nextStep: String?
    /// Probability
    ///
    /// Example: 80
    public var probability: Int?
    /// Expected End At
    public var expectedEndAt: Date?
    /// Closed At
    public var endedAt: Date?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, name: String? = nil, description: String? = nil, type: String? = nil, leadSource: String? = nil, currency: Currency? = nil, expectedAmount: Double? = nil, amount: Double? = nil, state: String? = nil, pipelineWithStage: String? = nil, nextStep: String? = nil, probability: Int? = nil, expectedEndAt: Date? = nil, endedAt: Date? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.name = name
        self.description = description
        self.type = type
        self.leadSource = leadSource
        self.currency = currency
        self.expectedAmount = expectedAmount
        self.amount = amount
        self.state = state
        self.pipelineWithStage = pipelineWithStage
        self.nextStep = nextStep
        self.probability = probability
        self.expectedEndAt = expectedEndAt
        self.endedAt = endedAt
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case name
        case description
        case type
        case leadSource = "lead_source"
        case currency
        case expectedAmount = "expected_amount"
        case amount
        case state
        case pipelineWithStage = "pipeline_with_stage"
        case nextStep = "next_step"
        case probability
        case expectedEndAt = "expected_end_at"
        case endedAt = "ended_at"
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct OpportunityProductDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct OpportunityProductEntity: Codable {
    /// OpportunityProduct Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Name
    ///
    /// Example: "Bill Wall"
    public var name: String?
    /// Number
    ///
    /// Example: "21312411"
    public var number: String?
    /// Description
    ///
    /// Example: "Description"
    public var description: String?
    public var currency: Currency?
    /// List Price
    ///
    /// Example: 4235.91
    public var listPrice: Double?
    /// Sales Price
    ///
    /// Example: 4235.91
    public var salesPrice: Double?
    /// Quantity
    ///
    /// Example: 4235.91
    public var quantity: Double?
    /// Subtotal
    ///
    /// Example: 4235.91
    public var subtotal: Double?
    /// Discount
    public var discount: [Discount]?
    /// Tax
    public var tax: [Tax]?
    /// Total Price
    ///
    /// Example: 4235.91
    public var totalPrice: Double?
    /// Unit
    ///
    /// Example: "kg"
    public var unit: String?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, name: String? = nil, number: String? = nil, description: String? = nil, currency: Currency? = nil, listPrice: Double? = nil, salesPrice: Double? = nil, quantity: Double? = nil, subtotal: Double? = nil, discount: [Discount]? = nil, tax: [Tax]? = nil, totalPrice: Double? = nil, unit: String? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.name = name
        self.number = number
        self.description = description
        self.currency = currency
        self.listPrice = listPrice
        self.salesPrice = salesPrice
        self.quantity = quantity
        self.subtotal = subtotal
        self.discount = discount
        self.tax = tax
        self.totalPrice = totalPrice
        self.unit = unit
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case name
        case number
        case description
        case currency
        case listPrice = "list_price"
        case salesPrice = "sales_price"
        case quantity
        case subtotal
        case discount
        case tax
        case totalPrice = "total_price"
        case unit
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct Authorization: Codable {
    /// Type
    public var type: String?
    /// Description
    public var description: String?
    /// Credential
    public var platformCredential: [[String: AnyJSON]]?

    public init(type: String? = nil, description: String? = nil, platformCredential: [[String: AnyJSON]]? = nil) {
        self.type = type
        self.description = description
        self.platformCredential = platformCredential
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case description
        case platformCredential = "platform_credential"
    }
}

public struct PlatformEntity: Codable {
    /// Type
    public var type: String?
    /// Name
    public var name: String?
    /// Authorization
    public var authorization: [Authorization]?
    public var resource: [String: AnyJSON]?

    public init(type: String? = nil, name: String? = nil, authorization: [Authorization]? = nil, resource: [String: AnyJSON]? = nil) {
        self.type = type
        self.name = name
        self.authorization = authorization
        self.resource = resource
    }
}

public struct PostDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct PostEntity: Codable {
    /// Post Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Body
    ///
    /// Example: "My first post"
    public var body: String?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, body: String? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.body = body
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case body
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct PriceBookDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct PriceBookEntity: Codable {
    /// PriceBook Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Name
    ///
    /// Example: "Bill Wall"
    public var name: String?
    /// Number
    ///
    /// Example: "21312411"
    public var type: String?
    /// Description
    ///
    /// Example: "Description"
    public var description: String?
    public var currency: Currency?
    /// Is Active
    ///
    /// Example: true
    public var isActive: Bool?
    /// Is Standard
    ///
    /// Example: true
    public var isStandard: Bool?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, name: String? = nil, type: String? = nil, description: String? = nil, currency: Currency? = nil, isActive: Bool? = nil, isStandard: Bool? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.name = name
        self.type = type
        self.description = description
        self.currency = currency
        self.isActive = isActive
        self.isStandard = isStandard
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case name
        case type
        case description
        case currency
        case isActive = "is_active"
        case isStandard = "is_standard"
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct PriceBookItemDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct Price: Codable {
    /// Currency
    ///
    /// Example: "USD"
    public var currency: String?
    /// Value
    ///
    /// Example: 4235.91
    public var value: Double?

    public init(currency: String? = nil, value: Double? = nil) {
        self.currency = currency
        self.value = value
    }
}

public struct PriceBookItemEntity: Codable {
    /// PriceBookItem Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Name
    ///
    /// Example: "Bill Wall"
    public var name: String?
    /// Code
    ///
    /// Example: "21312411"
    public var code: String?
    /// Is Active
    ///
    /// Example: true
    public var isActive: Bool?
    /// Is Standard
    ///
    /// Example: true
    public var useStandardPrice: Bool?
    /// Price
    public var price: [Price]?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, name: String? = nil, code: String? = nil, isActive: Bool? = nil, useStandardPrice: Bool? = nil, price: [Price]? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.name = name
        self.code = code
        self.isActive = isActive
        self.useStandardPrice = useStandardPrice
        self.price = price
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case name
        case code
        case isActive = "is_active"
        case useStandardPrice = "use_standard_price"
        case price
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct ProductDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct Cost: Codable {
    /// Currency
    ///
    /// Example: "USD"
    public var currency: String?
    /// Value
    ///
    /// Example: 4235.91
    public var value: Double?

    public init(currency: String? = nil, value: Double? = nil) {
        self.currency = currency
        self.value = value
    }
}

public struct Image: Codable {
    /// Type
    ///
    /// Example: "Preview image"
    public var type: String?
    /// URL
    ///
    /// Example: "http://google.com/images/image.png"
    public var url: String?

    public init(type: String? = nil, url: String? = nil) {
        self.type = type
        self.url = url
    }
}

public struct ProductEntity: Codable {
    /// Product Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Type
    ///
    /// Example: "Service"
    public var type: String?
    /// Name
    ///
    /// Example: "CPU"
    public var name: String?
    /// Category
    public var category: [String]?
    /// Code
    ///
    /// Example: "CM01-R"
    public var code: String?
    /// Description
    ///
    /// Example: "Some long description"
    public var description: String?
    /// Unit
    ///
    /// Example: "kg"
    public var unit: String?
    /// Is taxable
    ///
    /// Example: true
    public var isTaxable: Bool?
    /// Is active
    ///
    /// Example: true
    public var isActive: Bool?
    /// Manufacturer
    ///
    /// Example: "M&M"
    public var manufacturer: String?
    /// Vendor
    ///
    /// Example: "M&M"
    public var vendor: String?
    /// Price
    public var price: [Price]?
    /// Cost
    public var cost: [Cost]?
    /// Quantity In Stock
    ///
    /// Example: 15.91
    public var quantityInStock: Double?
    /// Quantity In Demand
    ///
    /// Example: 15.91
    public var quantityInDemand: Double?
    /// Reorder Level
    ///
    /// Example: 15.91
    public var reorderLevel: Double?
    /// Sales Started At
    public var salesStartedAt: Date?
    /// Sales Ended At
    public var salesEndedAt: Date?
    /// Support Started At
    public var supportStartedAt: Date?
    /// Support Ended At
    public var supportEndedAt: Date?
    /// URL
    ///
    /// Example: "http://google.com/"
    public var url: String?
    /// Image
    public var image: [Image]?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, type: String? = nil, name: String? = nil, category: [String]? = nil, code: String? = nil, description: String? = nil, unit: String? = nil, isTaxable: Bool? = nil, isActive: Bool? = nil, manufacturer: String? = nil, vendor: String? = nil, price: [Price]? = nil, cost: [Cost]? = nil, quantityInStock: Double? = nil, quantityInDemand: Double? = nil, reorderLevel: Double? = nil, salesStartedAt: Date? = nil, salesEndedAt: Date? = nil, supportStartedAt: Date? = nil, supportEndedAt: Date? = nil, url: String? = nil, image: [Image]? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.type = type
        self.name = name
        self.category = category
        self.code = code
        self.description = description
        self.unit = unit
        self.isTaxable = isTaxable
        self.isActive = isActive
        self.manufacturer = manufacturer
        self.vendor = vendor
        self.price = price
        self.cost = cost
        self.quantityInStock = quantityInStock
        self.quantityInDemand = quantityInDemand
        self.reorderLevel = reorderLevel
        self.salesStartedAt = salesStartedAt
        self.salesEndedAt = salesEndedAt
        self.supportStartedAt = supportStartedAt
        self.supportEndedAt = supportEndedAt
        self.url = url
        self.image = image
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case name
        case category
        case code
        case description
        case unit
        case isTaxable = "is_taxable"
        case isActive = "is_active"
        case manufacturer
        case vendor
        case price
        case cost
        case quantityInStock = "quantity_in_stock"
        case quantityInDemand = "quantity_in_demand"
        case reorderLevel = "reorder_level"
        case salesStartedAt = "sales_started_at"
        case salesEndedAt = "sales_ended_at"
        case supportStartedAt = "support_started_at"
        case supportEndedAt = "support_ended_at"
        case url
        case image
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct ProjectDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct ProjectEntity: Codable {
    /// Project Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Name
    ///
    /// Example: "Bill Wall"
    public var name: String?
    /// Body
    ///
    /// Example: "My first project"
    public var description: String?
    /// Priority
    ///
    /// Example: "Normal"
    public var priority: String?
    /// Status
    ///
    /// Example: "Not Started"
    public var status: String?
    /// Category
    ///
    /// Example: "Software"
    public var category: String?
    /// Pipeline With Stage
    ///
    /// Example: "Default / Contacted"
    public var pipelineWithStage: String?
    /// Started At
    public var startedAt: Date?
    /// Ended At
    public var endedAt: Date?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, name: String? = nil, description: String? = nil, priority: String? = nil, status: String? = nil, category: String? = nil, pipelineWithStage: String? = nil, startedAt: Date? = nil, endedAt: Date? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.name = name
        self.description = description
        self.priority = priority
        self.status = status
        self.category = category
        self.pipelineWithStage = pipelineWithStage
        self.startedAt = startedAt
        self.endedAt = endedAt
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case name
        case description
        case priority
        case status
        case category
        case pipelineWithStage = "pipeline_with_stage"
        case startedAt = "started_at"
        case endedAt = "ended_at"
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct QuoteDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct QuoteEntity: Codable {
    /// Quote Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Subject
    ///
    /// Example: "Sales"
    public var subject: String?
    /// Number
    ///
    /// Example: "21312411"
    public var number: String?
    /// Status
    ///
    /// Example: "active"
    public var status: String?
    public var currency: Currency?
    /// Description
    ///
    /// Example: "Description"
    public var description: String?
    /// Terms And Conditions
    ///
    /// Example: "Conditions"
    public var termsAndConditions: String?
    /// Expiration Date
    ///
    /// Example: "1982-11-28"
    public var expirationDate: NaiveDate?
    /// Subtotal
    ///
    /// Example: 4235.91
    public var subtotal: Double?
    /// Discount
    public var discount: [Discount]?
    /// Tax
    public var tax: [Tax]?
    /// Total Price
    ///
    /// Example: 4235.91
    public var totalPrice: Double?
    /// Shipping And Handling
    ///
    /// Example: 4235.91
    public var shippingAndHandling: Double?
    /// Adjustment
    ///
    /// Example: 4235.91
    public var adjustment: Double?
    /// Grand Total
    ///
    /// Example: 4235.91
    public var grandTotal: Double?
    /// Carrier
    ///
    /// Example: "DHL"
    public var carrier: String?
    /// Payment Terms
    ///
    /// Example: "Net 60"
    public var paymentTerms: String?
    /// Address
    public var address: [Address]?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, subject: String? = nil, number: String? = nil, status: String? = nil, currency: Currency? = nil, description: String? = nil, termsAndConditions: String? = nil, expirationDate: NaiveDate? = nil, subtotal: Double? = nil, discount: [Discount]? = nil, tax: [Tax]? = nil, totalPrice: Double? = nil, shippingAndHandling: Double? = nil, adjustment: Double? = nil, grandTotal: Double? = nil, carrier: String? = nil, paymentTerms: String? = nil, address: [Address]? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.subject = subject
        self.number = number
        self.status = status
        self.currency = currency
        self.description = description
        self.termsAndConditions = termsAndConditions
        self.expirationDate = expirationDate
        self.subtotal = subtotal
        self.discount = discount
        self.tax = tax
        self.totalPrice = totalPrice
        self.shippingAndHandling = shippingAndHandling
        self.adjustment = adjustment
        self.grandTotal = grandTotal
        self.carrier = carrier
        self.paymentTerms = paymentTerms
        self.address = address
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case subject
        case number
        case status
        case currency
        case description
        case termsAndConditions = "terms_and_conditions"
        case expirationDate = "expiration_date"
        case subtotal
        case discount
        case tax
        case totalPrice = "total_price"
        case shippingAndHandling = "shipping_and_handling"
        case adjustment
        case grandTotal = "grand_total"
        case carrier
        case paymentTerms = "payment_terms"
        case address
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct QuoteItemDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct QuoteItemEntity: Codable {
    /// QuoteItem Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Number
    ///
    /// Example: "21312411"
    public var number: String?
    /// Description
    ///
    /// Example: "Description"
    public var description: String?
    /// List Price
    ///
    /// Example: 4235.91
    public var listPrice: Double?
    /// Sales Price
    ///
    /// Example: 4235.91
    public var salesPrice: Double?
    /// Quantity
    ///
    /// Example: 4235.91
    public var quantity: Double?
    /// Subtotal
    ///
    /// Example: 4235.91
    public var subtotal: Double?
    /// Discount
    public var discount: [Discount]?
    /// Tax
    public var tax: [Tax]?
    /// Total Price
    ///
    /// Example: 4235.91
    public var totalPrice: Double?
    /// Unit
    ///
    /// Example: "kg"
    public var unit: String?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, number: String? = nil, description: String? = nil, listPrice: Double? = nil, salesPrice: Double? = nil, quantity: Double? = nil, subtotal: Double? = nil, discount: [Discount]? = nil, tax: [Tax]? = nil, totalPrice: Double? = nil, unit: String? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.number = number
        self.description = description
        self.listPrice = listPrice
        self.salesPrice = salesPrice
        self.quantity = quantity
        self.subtotal = subtotal
        self.discount = discount
        self.tax = tax
        self.totalPrice = totalPrice
        self.unit = unit
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case number
        case description
        case listPrice = "list_price"
        case salesPrice = "sales_price"
        case quantity
        case subtotal
        case discount
        case tax
        case totalPrice = "total_price"
        case unit
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct Header: Codable {
    /// Name
    public var name: String?
    /// Value
    public var value: String?

    public init(name: String? = nil, value: String? = nil) {
        self.name = name
        self.value = value
    }
}

public struct RequestEntity: Codable {
    /// Method
    ///
    /// Example: "GET"
    public var method: String?
    /// Path (with query)
    ///
    /// Example: "contact/111/comments?count=1"
    public var path: String?
    /// Header
    public var header: [Header]?
    /// Content (in base64 encoding)
    public var content: String?

    public init(method: String? = nil, path: String? = nil, header: [Header]? = nil, content: String? = nil) {
        self.method = method
        self.path = path
        self.header = header
        self.content = content
    }
}

public struct RequestEntityRelation: Codable {
    /// Status Code
    ///
    /// Example: 200
    public var statusCode: Int?
    /// Header
    public var header: [Header]?
    /// Content (in base64 encoding)
    public var content: String?

    public init(statusCode: Int? = nil, header: [Header]? = nil, content: String? = nil) {
        self.statusCode = statusCode
        self.header = header
        self.content = content
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case header
        case content
    }
}

public struct TagDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct TagEntity: Codable {
    /// Tag Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Name
    ///
    /// Example: "first_tag"
    public var name: String?
    /// Description
    ///
    /// Example: "My first tag"
    public var description: String?
    /// Entity
    public var entity: Entity?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    /// Entity
    public enum Entity: String, Codable, CaseIterable {
        case account
        case attachment
        case call
        case campaign
        case `case`
        case comment
        case contact
        case email
        case event
        case invoice
        case invoiceItem
        case lead
        case meeting
        case note
        case opportunity
        case opportunityProduct
        case post
        case priceBook
        case priceBookItem
        case product
        case project
        case quote
        case quoteItem
        case tag
        case task
        case ticket
        case user
    }

    public init(id: String? = nil, name: String? = nil, description: String? = nil, entity: Entity? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.name = name
        self.description = description
        self.entity = entity
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case name
        case description
        case entity
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct TaskDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct TaskEntity: Codable {
    /// Task Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Name
    ///
    /// Example: "Title"
    public var subject: String?
    /// Description
    ///
    /// Example: "First task"
    public var description: String?
    /// Priority
    ///
    /// Example: "Normal"
    public var priority: String?
    /// Status
    ///
    /// Example: "Not Started"
    public var status: String?
    /// Due At
    public var dueAt: Date?
    /// Remainder At
    public var reminderAt: Date?
    /// Started At
    public var startedAt: Date?
    /// Ended At
    public var endedAt: Date?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, subject: String? = nil, description: String? = nil, priority: String? = nil, status: String? = nil, dueAt: Date? = nil, reminderAt: Date? = nil, startedAt: Date? = nil, endedAt: Date? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.subject = subject
        self.description = description
        self.priority = priority
        self.status = status
        self.dueAt = dueAt
        self.reminderAt = reminderAt
        self.startedAt = startedAt
        self.endedAt = endedAt
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case subject
        case description
        case priority
        case status
        case dueAt = "due_at"
        case reminderAt = "reminder_at"
        case startedAt = "started_at"
        case endedAt = "ended_at"
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct TicketDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct TicketEntity: Codable {
    /// Ticket Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Subject
    ///
    /// Example: "Bill Wall"
    public var subject: String?
    /// Number
    ///
    /// Example: "21312411"
    public var number: String?
    /// Category
    public var category: [String]?
    /// Source
    ///
    /// Example: "Email"
    public var source: String?
    /// Priority
    ///
    /// Example: "high"
    public var priority: String?
    /// Pipeline With Stage
    ///
    /// Example: "Default / Contacted"
    public var pipelineWithStage: String?
    /// Description
    ///
    /// Example: "Description"
    public var description: String?
    /// Due At
    public var dueAt: Date?
    /// Closed At
    public var closedAt: Date?
    /// Resolution
    ///
    /// Example: "fixed"
    public var resolution: String?
    /// Email
    public var email: [Email]?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, subject: String? = nil, number: String? = nil, category: [String]? = nil, source: String? = nil, priority: String? = nil, pipelineWithStage: String? = nil, description: String? = nil, dueAt: Date? = nil, closedAt: Date? = nil, resolution: String? = nil, email: [Email]? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.subject = subject
        self.number = number
        self.category = category
        self.source = source
        self.priority = priority
        self.pipelineWithStage = pipelineWithStage
        self.description = description
        self.dueAt = dueAt
        self.closedAt = closedAt
        self.resolution = resolution
        self.email = email
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case subject
        case number
        case category
        case source
        case priority
        case pipelineWithStage = "pipeline_with_stage"
        case description
        case dueAt = "due_at"
        case closedAt = "closed_at"
        case resolution
        case email
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public struct UserDescribe: Codable {
    /// Entity
    public var entity: String?
    public var schema: SchemaDescribe?

    public init(entity: String? = nil, schema: SchemaDescribe? = nil) {
        self.entity = entity
        self.schema = schema
    }
}

public struct UserEntity: Codable {
    /// User Identifier
    ///
    /// Example: "21312411"
    public var id: String?
    /// Salutation
    ///
    /// Example: "Mr."
    public var salutation: String?
    /// First Name
    ///
    /// Example: "Bill"
    public var firstName: String?
    /// Middle Name
    ///
    /// Example: "van"
    public var middleName: String?
    /// Last Name
    ///
    /// Example: "Wall"
    public var lastName: String?
    /// Name Suffix
    ///
    /// Example: "Jr."
    public var nameSuffix: String?
    /// Username
    ///
    /// Example: "billwall777"
    public var username: String?
    /// Description
    ///
    /// Example: "Description"
    public var description: String?
    /// Position
    ///
    /// Example: "Position"
    public var position: String?
    /// Department
    ///
    /// Example: "Department"
    public var department: String?
    /// Status
    ///
    /// Example: "active"
    public var status: String?
    /// Is admin
    ///
    /// Example: true
    public var isAdmin: Bool?
    /// Is associable
    ///
    /// Example: true
    public var isAssociable: Bool?
    /// Email
    public var email: [Email]?
    /// Phone
    public var phone: [Phone]?
    /// Messenger
    public var messenger: [Messenger]?
    /// Website
    public var website: [Website]?
    /// Address
    public var address: [Address]?
    public var relation: Relation?
    /// Created At
    public var createdAt: Date?
    /// Updated At
    public var updatedAt: Date?

    public init(id: String? = nil, salutation: String? = nil, firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, nameSuffix: String? = nil, username: String? = nil, description: String? = nil, position: String? = nil, department: String? = nil, status: String? = nil, isAdmin: Bool? = nil, isAssociable: Bool? = nil, email: [Email]? = nil, phone: [Phone]? = nil, messenger: [Messenger]? = nil, website: [Website]? = nil, address: [Address]? = nil, relation: Relation? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.salutation = salutation
        self.firstName = firstName
        self.middleName = middleName
        self.lastName = lastName
        self.nameSuffix = nameSuffix
        self.username = username
        self.description = description
        self.position = position
        self.department = department
        self.status = status
        self.isAdmin = isAdmin
        self.isAssociable = isAssociable
        self.email = email
        self.phone = phone
        self.messenger = messenger
        self.website = website
        self.address = address
        self.relation = relation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case salutation
        case firstName = "first_name"
        case middleName = "middle_name"
        case lastName = "last_name"
        case nameSuffix = "name_suffix"
        case username
        case description
        case position
        case department
        case status
        case isAdmin = "is_admin"
        case isAssociable = "is_associable"
        case email
        case phone
        case messenger
        case website
        case address
        case relation
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }
}

public enum AnyJSON: Equatable, Codable {
    case string(String)
    case number(Double)
    case object([String: AnyJSON])
    case array([AnyJSON])
    case bool(Bool)

    var value: Any {
        switch self {
        case .string(let string): return string
        case .number(let double): return double
        case .object(let dictionary): return dictionary
        case .array(let array): return array
        case .bool(let bool): return bool
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .array(array): try container.encode(array)
        case let .object(object): try container.encode(object)
        case let .string(string): try container.encode(string)
        case let .number(number): try container.encode(number)
        case let .bool(bool): try container.encode(bool)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let object = try? container.decode([String: AnyJSON].self) {
            self = .object(object)
        } else if let array = try? container.decode([AnyJSON].self) {
            self = .array(array)
        } else if let string = try? container.decode(String.self) {
            self = .string(string)
        } else if let bool = try? container.decode(Bool.self) {
            self = .bool(bool)
        } else if let number = try? container.decode(Double.self) {
            self = .number(number)
        } else {
            throw DecodingError.dataCorrupted(
                .init(codingPath: decoder.codingPath, debugDescription: "Invalid JSON value.")
            )
        }
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
