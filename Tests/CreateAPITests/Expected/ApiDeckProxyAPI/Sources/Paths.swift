// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import Get

extension Paths {
    public static var proxy: Proxy {
        Proxy(path: "/proxy")
    }

    public struct Proxy {
        /// Path: `/proxy`
        public let path: String

        /// GET
        ///
        /// Proxies a downstream GET request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
        /// **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
        public var get: Request<AnyJSON> {
            .get(path)
        }

        /// POST
        ///
        /// Proxies a downstream POST request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
        /// **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
        public func post(_ body: Data? = nil) -> Request<AnyJSON> {
            .post(path, body: body)
        }

        /// PUT
        ///
        /// Proxies a downstream PUT request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
        /// **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
        public func put(_ body: Data? = nil) -> Request<AnyJSON> {
            .put(path, body: body)
        }

        /// PATCH
        ///
        /// Proxies a downstream PATCH request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
        /// **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
        public func patch(_ body: Data? = nil) -> Request<AnyJSON> {
            .patch(path, body: body)
        }

        /// DELETE
        ///
        /// Proxies a downstream DELETE request to a service and injects the necessary credentials into a request stored in Vault. This allows you to have an additional security layer and logging without needing to rely on Unify for normalization.
        /// **Note**: Vault will proxy all data to the downstream URL and method/verb in the headers.
        public var delete: Request<AnyJSON> {
            .delete(path)
        }
    }
}

public enum Paths {}
