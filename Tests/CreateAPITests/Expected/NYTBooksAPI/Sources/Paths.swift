// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import APIClient

extension Paths {
    public static var lists: Lists {
        Lists(path: "/lists")
    }

    public struct Lists {
        /// Path: `/lists`
        public let path: String
    }
}

extension Paths.Lists {
    public var bestSellers: BestSellers {
        BestSellers(path: path + "/best-sellers")
    }

    public struct BestSellers {
        /// Path: `/lists/best-sellers`
        public let path: String
    }
}

extension Paths.Lists.BestSellers {
    public var historyJSON: HistoryJSON {
        HistoryJSON(path: path + "/history.json")
    }

    public struct HistoryJSON {
        /// Path: `/lists/best-sellers/history.json`
        public let path: String

        /// Best Seller History List
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery())
        }

        public struct GetResponse: Decodable {
            public var status: String?
            public var copyright: String?
            public var numResults: Int?
            public var results: [Result]?

            public struct Result: Decodable {
                public var title: String?
                public var description: String?
                public var contributor: String?
                public var author: String?
                public var contributorNote: String?
                public var price: Int?
                public var ageGroup: String?
                public var publisher: String?
                public var isbns: [Isbn]?
                public var ranksHistory: [RanksHistoryItem]?
                public var reviews: [Review]?

                public struct Isbn: Decodable {
                    public var isbn10: String?
                    public var isbn13: String?

                    public init(isbn10: String? = nil, isbn13: String? = nil) {
                        self.isbn10 = isbn10
                        self.isbn13 = isbn13
                    }
                }

                public struct RanksHistoryItem: Decodable {
                    public var primaryIsbn10: String?
                    public var primaryIsbn13: String?
                    public var rank: Int?
                    public var listName: String?
                    public var displayName: String?
                    public var publishedDate: String?
                    public var bestsellersDate: String?
                    public var weeksOnList: Int?
                    public var asterisk: Int?
                    public var dagger: Int?

                    public init(primaryIsbn10: String? = nil, primaryIsbn13: String? = nil, rank: Int? = nil, listName: String? = nil, displayName: String? = nil, publishedDate: String? = nil, bestsellersDate: String? = nil, weeksOnList: Int? = nil, asterisk: Int? = nil, dagger: Int? = nil) {
                        self.primaryIsbn10 = primaryIsbn10
                        self.primaryIsbn13 = primaryIsbn13
                        self.rank = rank
                        self.listName = listName
                        self.displayName = displayName
                        self.publishedDate = publishedDate
                        self.bestsellersDate = bestsellersDate
                        self.weeksOnList = weeksOnList
                        self.asterisk = asterisk
                        self.dagger = dagger
                    }

                    private enum CodingKeys: String, CodingKey {
                        case primaryIsbn10 = "primary_isbn10"
                        case primaryIsbn13 = "primary_isbn13"
                        case rank
                        case listName = "list_name"
                        case displayName = "display_name"
                        case publishedDate = "published_date"
                        case bestsellersDate = "bestsellers_date"
                        case weeksOnList = "weeks_on_list"
                        case asterisk
                        case dagger
                    }
                }

                public struct Review: Decodable {
                    public var bookReviewLink: String?
                    public var firstChapterLink: String?
                    public var sundayReviewLink: String?
                    public var articleChapterLink: String?

                    public init(bookReviewLink: String? = nil, firstChapterLink: String? = nil, sundayReviewLink: String? = nil, articleChapterLink: String? = nil) {
                        self.bookReviewLink = bookReviewLink
                        self.firstChapterLink = firstChapterLink
                        self.sundayReviewLink = sundayReviewLink
                        self.articleChapterLink = articleChapterLink
                    }

                    private enum CodingKeys: String, CodingKey {
                        case bookReviewLink = "book_review_link"
                        case firstChapterLink = "first_chapter_link"
                        case sundayReviewLink = "sunday_review_link"
                        case articleChapterLink = "article_chapter_link"
                    }
                }

                public init(title: String? = nil, description: String? = nil, contributor: String? = nil, author: String? = nil, contributorNote: String? = nil, price: Int? = nil, ageGroup: String? = nil, publisher: String? = nil, isbns: [Isbn]? = nil, ranksHistory: [RanksHistoryItem]? = nil, reviews: [Review]? = nil) {
                    self.title = title
                    self.description = description
                    self.contributor = contributor
                    self.author = author
                    self.contributorNote = contributorNote
                    self.price = price
                    self.ageGroup = ageGroup
                    self.publisher = publisher
                    self.isbns = isbns
                    self.ranksHistory = ranksHistory
                    self.reviews = reviews
                }

                private enum CodingKeys: String, CodingKey {
                    case title
                    case description
                    case contributor
                    case author
                    case contributorNote = "contributor_note"
                    case price
                    case ageGroup = "age_group"
                    case publisher
                    case isbns
                    case ranksHistory = "ranks_history"
                    case reviews
                }
            }

            public init(status: String? = nil, copyright: String? = nil, numResults: Int? = nil, results: [Result]? = nil) {
                self.status = status
                self.copyright = copyright
                self.numResults = numResults
                self.results = results
            }

            private enum CodingKeys: String, CodingKey {
                case status
                case copyright
                case numResults = "num_results"
                case results
            }
        }

        public struct GetParameters {
            public var ageGroup: String?
            public var author: String?
            public var contributor: String?
            public var isbn: String?
            public var price: String?
            public var publisher: String?
            public var title: String?

            public init(ageGroup: String? = nil, author: String? = nil, contributor: String? = nil, isbn: String? = nil, price: String? = nil, publisher: String? = nil, title: String? = nil) {
                self.ageGroup = ageGroup
                self.author = author
                self.contributor = contributor
                self.isbn = isbn
                self.price = price
                self.publisher = publisher
                self.title = title
            }

            public func asQuery() -> [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("age-group", ageGroup?.asQueryValue)
                query.addQueryItem("author", author?.asQueryValue)
                query.addQueryItem("contributor", contributor?.asQueryValue)
                query.addQueryItem("isbn", isbn?.asQueryValue)
                query.addQueryItem("price", price?.asQueryValue)
                query.addQueryItem("publisher", publisher?.asQueryValue)
                query.addQueryItem("title", title?.asQueryValue)
                return query
            }
        }
    }
}

extension Paths {
    public static func format(_ format: String) -> WithLists {
        WithLists(path: "/lists.\(format)")
    }

    public struct WithLists {
        /// Path: `/lists.{format}`
        public let path: String

        /// Best Seller List
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery())
        }

        public struct GetResponse: Decodable {
            public var status: String?
            public var copyright: String?
            public var numResults: Int?
            public var lastModified: String?
            public var results: [Result]?

            public struct Result: Decodable {
                public var listName: String?
                public var displayName: String?
                public var bestsellersDate: String?
                public var publishedDate: String?
                public var rank: Int?
                public var rankLastWeek: Int?
                public var weeksOnList: Int?
                public var asterisk: Int?
                public var dagger: Int?
                public var amazonProductURL: String?
                public var isbns: [Isbn]?
                public var bookDetails: [BookDetail]?
                public var reviews: [Review]?

                public struct Isbn: Decodable {
                    public var isbn10: String?
                    public var isbn13: String?

                    public init(isbn10: String? = nil, isbn13: String? = nil) {
                        self.isbn10 = isbn10
                        self.isbn13 = isbn13
                    }
                }

                public struct BookDetail: Decodable {
                    public var title: String?
                    public var description: String?
                    public var contributor: String?
                    public var author: String?
                    public var contributorNote: String?
                    public var price: Int?
                    public var ageGroup: String?
                    public var publisher: String?
                    public var primaryIsbn13: String?
                    public var primaryIsbn10: String?

                    public init(title: String? = nil, description: String? = nil, contributor: String? = nil, author: String? = nil, contributorNote: String? = nil, price: Int? = nil, ageGroup: String? = nil, publisher: String? = nil, primaryIsbn13: String? = nil, primaryIsbn10: String? = nil) {
                        self.title = title
                        self.description = description
                        self.contributor = contributor
                        self.author = author
                        self.contributorNote = contributorNote
                        self.price = price
                        self.ageGroup = ageGroup
                        self.publisher = publisher
                        self.primaryIsbn13 = primaryIsbn13
                        self.primaryIsbn10 = primaryIsbn10
                    }

                    private enum CodingKeys: String, CodingKey {
                        case title
                        case description
                        case contributor
                        case author
                        case contributorNote = "contributor_note"
                        case price
                        case ageGroup = "age_group"
                        case publisher
                        case primaryIsbn13 = "primary_isbn13"
                        case primaryIsbn10 = "primary_isbn10"
                    }
                }

                public struct Review: Decodable {
                    public var bookReviewLink: String?
                    public var firstChapterLink: String?
                    public var sundayReviewLink: String?
                    public var articleChapterLink: String?

                    public init(bookReviewLink: String? = nil, firstChapterLink: String? = nil, sundayReviewLink: String? = nil, articleChapterLink: String? = nil) {
                        self.bookReviewLink = bookReviewLink
                        self.firstChapterLink = firstChapterLink
                        self.sundayReviewLink = sundayReviewLink
                        self.articleChapterLink = articleChapterLink
                    }

                    private enum CodingKeys: String, CodingKey {
                        case bookReviewLink = "book_review_link"
                        case firstChapterLink = "first_chapter_link"
                        case sundayReviewLink = "sunday_review_link"
                        case articleChapterLink = "article_chapter_link"
                    }
                }

                public init(listName: String? = nil, displayName: String? = nil, bestsellersDate: String? = nil, publishedDate: String? = nil, rank: Int? = nil, rankLastWeek: Int? = nil, weeksOnList: Int? = nil, asterisk: Int? = nil, dagger: Int? = nil, amazonProductURL: String? = nil, isbns: [Isbn]? = nil, bookDetails: [BookDetail]? = nil, reviews: [Review]? = nil) {
                    self.listName = listName
                    self.displayName = displayName
                    self.bestsellersDate = bestsellersDate
                    self.publishedDate = publishedDate
                    self.rank = rank
                    self.rankLastWeek = rankLastWeek
                    self.weeksOnList = weeksOnList
                    self.asterisk = asterisk
                    self.dagger = dagger
                    self.amazonProductURL = amazonProductURL
                    self.isbns = isbns
                    self.bookDetails = bookDetails
                    self.reviews = reviews
                }

                private enum CodingKeys: String, CodingKey {
                    case listName = "list_name"
                    case displayName = "display_name"
                    case bestsellersDate = "bestsellers_date"
                    case publishedDate = "published_date"
                    case rank
                    case rankLastWeek = "rank_last_week"
                    case weeksOnList = "weeks_on_list"
                    case asterisk
                    case dagger
                    case amazonProductURL = "amazon_product_url"
                    case isbns
                    case bookDetails = "book_details"
                    case reviews
                }
            }

            public init(status: String? = nil, copyright: String? = nil, numResults: Int? = nil, lastModified: String? = nil, results: [Result]? = nil) {
                self.status = status
                self.copyright = copyright
                self.numResults = numResults
                self.lastModified = lastModified
                self.results = results
            }

            private enum CodingKeys: String, CodingKey {
                case status
                case copyright
                case numResults = "num_results"
                case lastModified = "last_modified"
                case results
            }
        }

        public struct GetParameters {
            public var list: String?
            public var weeksOnList: Int?
            public var bestsellersDate: Date?
            public var date: String?
            public var isbn: String?
            public var publishedDate: String?
            public var rank: Int?
            public var rankLastWeek: Int?
            public var offset: Int?
            public var sortOrder: SortOrder?

            public enum SortOrder: String, Codable, CaseIterable {
                case asc = "ASC"
                case desc = "DESC"
            }

            public init(list: String? = nil, weeksOnList: Int? = nil, bestsellersDate: Date? = nil, date: String? = nil, isbn: String? = nil, publishedDate: String? = nil, rank: Int? = nil, rankLastWeek: Int? = nil, offset: Int? = nil, sortOrder: SortOrder? = nil) {
                self.list = list
                self.weeksOnList = weeksOnList
                self.bestsellersDate = bestsellersDate
                self.date = date
                self.isbn = isbn
                self.publishedDate = publishedDate
                self.rank = rank
                self.rankLastWeek = rankLastWeek
                self.offset = offset
                self.sortOrder = sortOrder
            }

            public func asQuery() -> [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("list", list?.asQueryValue)
                query.addQueryItem("weeks-on-list", weeksOnList?.asQueryValue)
                query.addQueryItem("bestsellers-date", bestsellersDate?.asQueryValue)
                query.addQueryItem("date", date?.asQueryValue)
                query.addQueryItem("isbn", isbn?.asQueryValue)
                query.addQueryItem("published-date", publishedDate?.asQueryValue)
                query.addQueryItem("rank", rank?.asQueryValue)
                query.addQueryItem("rank-last-week", rankLastWeek?.asQueryValue)
                query.addQueryItem("offset", offset?.asQueryValue)
                query.addQueryItem("sort-order", sortOrder?.asQueryValue)
                return query
            }
        }
    }
}

extension Paths.Lists {
    public func date(_ date: String) -> WithDate {
        WithDate(path: "\(path)/\(date)")
    }

    public struct WithDate {
        /// Path: `/lists/{date}`
        public let path: String
    }
}

extension Paths.Lists.WithDate {
    public func list(_ list: String) -> WithJSON {
        WithJSON(path: "\(path)/\(list).json")
    }

    public struct WithJSON {
        /// Path: `/lists/{date}/{list}.json`
        public let path: String

        /// Best Seller List by Date
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery())
        }

        public struct GetResponse: Decodable {
            public var status: String?
            public var copyright: String?
            public var numResults: Int?
            public var lastModified: String?
            public var results: Results?

            public struct Results: Decodable {
                public var listName: String?
                public var bestsellersDate: String?
                public var publishedDate: String?
                public var displayName: String?
                public var normalListEndsAt: Int?
                public var updated: String?
                public var books: [Book]?
                public var corrections: [Correction]?

                public struct Book: Decodable {
                    public var rank: Int?
                    public var rankLastWeek: Int?
                    public var weeksOnList: Int?
                    public var asterisk: Int?
                    public var dagger: Int?
                    public var primaryIsbn10: String?
                    public var primaryIsbn13: String?
                    public var publisher: String?
                    public var description: String?
                    public var price: Int?
                    public var title: String?
                    public var author: String?
                    public var contributor: String?
                    public var contributorNote: String?
                    public var bookImage: String?
                    public var amazonProductURL: String?
                    public var ageGroup: String?
                    public var bookReviewLink: String?
                    public var firstChapterLink: String?
                    public var sundayReviewLink: String?
                    public var articleChapterLink: String?
                    public var isbns: [Isbn]?

                    public struct Isbn: Decodable {
                        public var isbn10: String?
                        public var isbn13: String?

                        public init(isbn10: String? = nil, isbn13: String? = nil) {
                            self.isbn10 = isbn10
                            self.isbn13 = isbn13
                        }
                    }

                    public init(rank: Int? = nil, rankLastWeek: Int? = nil, weeksOnList: Int? = nil, asterisk: Int? = nil, dagger: Int? = nil, primaryIsbn10: String? = nil, primaryIsbn13: String? = nil, publisher: String? = nil, description: String? = nil, price: Int? = nil, title: String? = nil, author: String? = nil, contributor: String? = nil, contributorNote: String? = nil, bookImage: String? = nil, amazonProductURL: String? = nil, ageGroup: String? = nil, bookReviewLink: String? = nil, firstChapterLink: String? = nil, sundayReviewLink: String? = nil, articleChapterLink: String? = nil, isbns: [Isbn]? = nil) {
                        self.rank = rank
                        self.rankLastWeek = rankLastWeek
                        self.weeksOnList = weeksOnList
                        self.asterisk = asterisk
                        self.dagger = dagger
                        self.primaryIsbn10 = primaryIsbn10
                        self.primaryIsbn13 = primaryIsbn13
                        self.publisher = publisher
                        self.description = description
                        self.price = price
                        self.title = title
                        self.author = author
                        self.contributor = contributor
                        self.contributorNote = contributorNote
                        self.bookImage = bookImage
                        self.amazonProductURL = amazonProductURL
                        self.ageGroup = ageGroup
                        self.bookReviewLink = bookReviewLink
                        self.firstChapterLink = firstChapterLink
                        self.sundayReviewLink = sundayReviewLink
                        self.articleChapterLink = articleChapterLink
                        self.isbns = isbns
                    }

                    private enum CodingKeys: String, CodingKey {
                        case rank
                        case rankLastWeek = "rank_last_week"
                        case weeksOnList = "weeks_on_list"
                        case asterisk
                        case dagger
                        case primaryIsbn10 = "primary_isbn10"
                        case primaryIsbn13 = "primary_isbn13"
                        case publisher
                        case description
                        case price
                        case title
                        case author
                        case contributor
                        case contributorNote = "contributor_note"
                        case bookImage = "book_image"
                        case amazonProductURL = "amazon_product_url"
                        case ageGroup = "age_group"
                        case bookReviewLink = "book_review_link"
                        case firstChapterLink = "first_chapter_link"
                        case sundayReviewLink = "sunday_review_link"
                        case articleChapterLink = "article_chapter_link"
                        case isbns
                    }
                }

                public struct Correction: Decodable {
                    public init() {}
                }

                public init(listName: String? = nil, bestsellersDate: String? = nil, publishedDate: String? = nil, displayName: String? = nil, normalListEndsAt: Int? = nil, updated: String? = nil, books: [Book]? = nil, corrections: [Correction]? = nil) {
                    self.listName = listName
                    self.bestsellersDate = bestsellersDate
                    self.publishedDate = publishedDate
                    self.displayName = displayName
                    self.normalListEndsAt = normalListEndsAt
                    self.updated = updated
                    self.books = books
                    self.corrections = corrections
                }

                private enum CodingKeys: String, CodingKey {
                    case listName = "list_name"
                    case bestsellersDate = "bestsellers_date"
                    case publishedDate = "published_date"
                    case displayName = "display_name"
                    case normalListEndsAt = "normal_list_ends_at"
                    case updated
                    case books
                    case corrections
                }
            }

            public init(status: String? = nil, copyright: String? = nil, numResults: Int? = nil, lastModified: String? = nil, results: Results? = nil) {
                self.status = status
                self.copyright = copyright
                self.numResults = numResults
                self.lastModified = lastModified
                self.results = results
            }

            private enum CodingKeys: String, CodingKey {
                case status
                case copyright
                case numResults = "num_results"
                case lastModified = "last_modified"
                case results
            }
        }

        public struct GetParameters {
            public var isbn: Int?
            public var listName: String?
            public var publishedDate: Date?
            public var bestsellersDate: String?
            public var weeksOnList: Int?
            public var rank: String?
            public var rankLastWeek: Int?
            public var offset: Int?
            public var sortOrder: SortOrder?

            public enum SortOrder: String, Codable, CaseIterable {
                case asc = "ASC"
                case desc = "DESC"
            }

            public init(isbn: Int? = nil, listName: String? = nil, publishedDate: Date? = nil, bestsellersDate: String? = nil, weeksOnList: Int? = nil, rank: String? = nil, rankLastWeek: Int? = nil, offset: Int? = nil, sortOrder: SortOrder? = nil) {
                self.isbn = isbn
                self.listName = listName
                self.publishedDate = publishedDate
                self.bestsellersDate = bestsellersDate
                self.weeksOnList = weeksOnList
                self.rank = rank
                self.rankLastWeek = rankLastWeek
                self.offset = offset
                self.sortOrder = sortOrder
            }

            public func asQuery() -> [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("isbn", isbn?.asQueryValue)
                query.addQueryItem("list-name", listName?.asQueryValue)
                query.addQueryItem("published-date", publishedDate?.asQueryValue)
                query.addQueryItem("bestsellers-date", bestsellersDate?.asQueryValue)
                query.addQueryItem("weeks-on-list", weeksOnList?.asQueryValue)
                query.addQueryItem("rank", rank?.asQueryValue)
                query.addQueryItem("rank-last-week", rankLastWeek?.asQueryValue)
                query.addQueryItem("offset", offset?.asQueryValue)
                query.addQueryItem("sort-order", sortOrder?.asQueryValue)
                return query
            }
        }
    }
}

extension Paths.Lists {
    public func format(_ format: String) -> WithOverview {
        WithOverview(path: "\(path)/overview.\(format)")
    }

    public struct WithOverview {
        /// Path: `/lists/overview.{format}`
        public let path: String

        /// Best Seller List Overview
        public func get(publishedDate: String? = nil, apiKey: String? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(publishedDate, apiKey))
        }

        public struct GetResponse: Decodable {
            public var status: String?
            public var copyright: String?
            public var numResults: Int?
            public var results: Results?

            public struct Results: Decodable {
                public var bestsellersDate: String?
                public var publishedDate: String?
                public var lists: [List]?

                public struct List: Decodable {
                    public var listID: Int?
                    public var listName: String?
                    public var displayName: String?
                    public var updated: String?
                    public var listImage: String?
                    public var books: [Book]?

                    public struct Book: Decodable {
                        public var ageGroup: String?
                        public var author: String?
                        public var contributor: String?
                        public var contributorNote: String?
                        public var createdDate: String?
                        public var description: String?
                        public var price: Int?
                        public var primaryIsbn13: String?
                        public var primaryIsbn10: String?
                        public var publisher: String?
                        public var rank: Int?
                        public var title: String?
                        public var updatedDate: String?

                        public init(ageGroup: String? = nil, author: String? = nil, contributor: String? = nil, contributorNote: String? = nil, createdDate: String? = nil, description: String? = nil, price: Int? = nil, primaryIsbn13: String? = nil, primaryIsbn10: String? = nil, publisher: String? = nil, rank: Int? = nil, title: String? = nil, updatedDate: String? = nil) {
                            self.ageGroup = ageGroup
                            self.author = author
                            self.contributor = contributor
                            self.contributorNote = contributorNote
                            self.createdDate = createdDate
                            self.description = description
                            self.price = price
                            self.primaryIsbn13 = primaryIsbn13
                            self.primaryIsbn10 = primaryIsbn10
                            self.publisher = publisher
                            self.rank = rank
                            self.title = title
                            self.updatedDate = updatedDate
                        }

                        private enum CodingKeys: String, CodingKey {
                            case ageGroup = "age_group"
                            case author
                            case contributor
                            case contributorNote = "contributor_note"
                            case createdDate = "created_date"
                            case description
                            case price
                            case primaryIsbn13 = "primary_isbn13"
                            case primaryIsbn10 = "primary_isbn10"
                            case publisher
                            case rank
                            case title
                            case updatedDate = "updated_date"
                        }
                    }

                    public init(listID: Int? = nil, listName: String? = nil, displayName: String? = nil, updated: String? = nil, listImage: String? = nil, books: [Book]? = nil) {
                        self.listID = listID
                        self.listName = listName
                        self.displayName = displayName
                        self.updated = updated
                        self.listImage = listImage
                        self.books = books
                    }

                    private enum CodingKeys: String, CodingKey {
                        case listID = "list_id"
                        case listName = "list_name"
                        case displayName = "display_name"
                        case updated
                        case listImage = "list_image"
                        case books
                    }
                }

                public init(bestsellersDate: String? = nil, publishedDate: String? = nil, lists: [List]? = nil) {
                    self.bestsellersDate = bestsellersDate
                    self.publishedDate = publishedDate
                    self.lists = lists
                }

                private enum CodingKeys: String, CodingKey {
                    case bestsellersDate = "bestsellers_date"
                    case publishedDate = "published_date"
                    case lists
                }
            }

            public init(status: String? = nil, copyright: String? = nil, numResults: Int? = nil, results: Results? = nil) {
                self.status = status
                self.copyright = copyright
                self.numResults = numResults
                self.results = results
            }

            private enum CodingKeys: String, CodingKey {
                case status
                case copyright
                case numResults = "num_results"
                case results
            }
        }

        private func makeGetQuery(_ publishedDate: String?, _ apiKey: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("published_date", publishedDate?.asQueryValue)
            query.addQueryItem("api-key", apiKey?.asQueryValue)
            return query
        }
    }
}

extension Paths.Lists {
    public func format(_ format: String) -> WithNames {
        WithNames(path: "\(path)/names.\(format)")
    }

    public struct WithNames {
        /// Path: `/lists/names.{format}`
        public let path: String

        /// Best Seller List Names
        public func get(apiKey: String? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(apiKey))
        }

        public struct GetResponse: Decodable {
            public var status: String?
            public var copyright: String?
            public var numResults: Int?
            public var results: [Result]?

            public struct Result: Decodable {
                public var listName: String?
                public var displayName: String?
                public var listNameEncoded: String?
                public var oldestPublishedDate: String?
                public var newestPublishedDate: String?
                public var updated: String?

                public init(listName: String? = nil, displayName: String? = nil, listNameEncoded: String? = nil, oldestPublishedDate: String? = nil, newestPublishedDate: String? = nil, updated: String? = nil) {
                    self.listName = listName
                    self.displayName = displayName
                    self.listNameEncoded = listNameEncoded
                    self.oldestPublishedDate = oldestPublishedDate
                    self.newestPublishedDate = newestPublishedDate
                    self.updated = updated
                }

                private enum CodingKeys: String, CodingKey {
                    case listName = "list_name"
                    case displayName = "display_name"
                    case listNameEncoded = "list_name_encoded"
                    case oldestPublishedDate = "oldest_published_date"
                    case newestPublishedDate = "newest_published_date"
                    case updated
                }
            }

            public init(status: String? = nil, copyright: String? = nil, numResults: Int? = nil, results: [Result]? = nil) {
                self.status = status
                self.copyright = copyright
                self.numResults = numResults
                self.results = results
            }

            private enum CodingKeys: String, CodingKey {
                case status
                case copyright
                case numResults = "num_results"
                case results
            }
        }

        private func makeGetQuery(_ apiKey: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("api-key", apiKey?.asQueryValue)
            return query
        }
    }
}

extension Paths {
    public static func format(_ format: String) -> WithReviews {
        WithReviews(path: "/reviews.\(format)")
    }

    public struct WithReviews {
        /// Path: `/reviews.{format}`
        public let path: String

        /// Reviews
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery())
        }

        public struct GetResponse: Decodable {
            public var status: String?
            public var copyright: String?
            public var numResults: Int?
            public var results: [Result]?

            public struct Result: Decodable {
                public var url: String?
                public var publicationDt: String?
                public var byline: String?
                public var bookTitle: String?
                public var bookAuthor: String?
                public var summary: String?
                public var isbn13: [String]?

                public init(url: String? = nil, publicationDt: String? = nil, byline: String? = nil, bookTitle: String? = nil, bookAuthor: String? = nil, summary: String? = nil, isbn13: [String]? = nil) {
                    self.url = url
                    self.publicationDt = publicationDt
                    self.byline = byline
                    self.bookTitle = bookTitle
                    self.bookAuthor = bookAuthor
                    self.summary = summary
                    self.isbn13 = isbn13
                }

                private enum CodingKeys: String, CodingKey {
                    case url
                    case publicationDt = "publication_dt"
                    case byline
                    case bookTitle = "book_title"
                    case bookAuthor = "book_author"
                    case summary
                    case isbn13
                }
            }

            public init(status: String? = nil, copyright: String? = nil, numResults: Int? = nil, results: [Result]? = nil) {
                self.status = status
                self.copyright = copyright
                self.numResults = numResults
                self.results = results
            }

            private enum CodingKeys: String, CodingKey {
                case status
                case copyright
                case numResults = "num_results"
                case results
            }
        }

        public struct GetParameters {
            public var isbn: Int?
            public var title: String?
            public var author: String?
            public var apiKey: String?

            public init(isbn: Int? = nil, title: String? = nil, author: String? = nil, apiKey: String? = nil) {
                self.isbn = isbn
                self.title = title
                self.author = author
                self.apiKey = apiKey
            }

            public func asQuery() -> [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("isbn", isbn?.asQueryValue)
                query.addQueryItem("title", title?.asQueryValue)
                query.addQueryItem("author", author?.asQueryValue)
                query.addQueryItem("api-key", apiKey?.asQueryValue)
                return query
            }
        }
    }
}

public enum Paths {}

extension Bool {
    var asQueryValue: String {
        self ? "true" : "false"
    }
}

extension Date {
    var asQueryValue: String {
        ISO8601DateFormatter().string(from: self)
    }
}

extension Double {
    var asQueryValue: String {
        String(self)
    }
}

extension Int {
    var asQueryValue: String {
        String(self)
    }
}

extension Int32 {
    var asQueryValue: String {
        String(self)
    }
}

extension Int64 {
    var asQueryValue: String {
        String(self)
    }
}

extension String {
    var asQueryValue: String {
        self
    }
}

extension URL {
    var asQueryValue: String {
        absoluteString
    }
}

extension RawRepresentable where RawValue == String {
    var asQueryValue: String {
        rawValue
    }
}

extension Array where Element == (String, String?) {
    mutating func addQueryItem(_ name: String, _ value: String?) {
        guard let value = value, !value.isEmpty else { return }
        append((name, value))
    }

    var asPercentEncodedQuery: String {
        var components = URLComponents()
        components.queryItems = self.map(URLQueryItem.init)
        return components.percentEncodedQuery ?? ""
    }
}
