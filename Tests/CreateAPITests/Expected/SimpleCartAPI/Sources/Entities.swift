// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation

/// Model containing item information
public struct Item: Codable {
    /// Example: "1657"
    public var itemID: Int
    /// Example: "Smart WiFi Router"
    public var name: String?
    /// Example: "2096"
    public var price: Int?
    /// Example: "Wifi router/wireless router. One of routers for wireless internet, wireless routers for home. Dual band router and gigabit router. Ideal as internet router also gaming router. Long range coverage with high speed. Compatible with all 802.11ac devices and below. 5ghz router/5g router Frequency Range: 2.4GHz and 5GHz; Interface Available: 4 x 10/100/1000Mbps LAN Ports, 1 10/100/1000Mbps WAN Port, 1 USB 2.0 Ports; Protocols Supported: Supports IPv4 and IPv6; System Requirement: Microsoft Windows 98SE NT 2000 XP Vista, or Windows 7 Windows 8/8.1/10, MAC OS NetWare UNIX or Linux; Wireless Standards: IEEE 802.11ac/n/a 5GHz, IEEE 802.11b/g/n 2.4GH"
    public var description: String?

    public init(itemID: Int, name: String? = nil, price: Int? = nil, description: String? = nil) {
        self.itemID = itemID
        self.name = name
        self.price = price
        self.description = description
    }

    private enum CodingKeys: String, CodingKey {
        case itemID = "itemId"
        case name
        case price
        case description
    }
}

public struct Order: Codable {
    public var address: String
    /// Example: "5000"
    public var orderTotal: Int?
    public var orderDate: Date?
    public var arrivalDate: Date?
    /// Example: "6"
    public var items: [Item]
    /// Example: "1151"
    public var orderID: Int?

    public init(address: String, orderTotal: Int? = nil, orderDate: Date? = nil, arrivalDate: Date? = nil, items: [Item], orderID: Int? = nil) {
        self.address = address
        self.orderTotal = orderTotal
        self.orderDate = orderDate
        self.arrivalDate = arrivalDate
        self.items = items
        self.orderID = orderID
    }

    private enum CodingKeys: String, CodingKey {
        case address
        case orderTotal
        case orderDate
        case arrivalDate
        case items
        case orderID = "orderId"
    }
}

public struct BadRequest: Codable {
    public var error: Error?

    public struct Error: Codable {
        public var message: String?

        public init(message: String? = nil) {
            self.message = message
        }
    }

    public init(error: Error? = nil) {
        self.error = error
    }
}

public struct NotFound: Codable {
    public var error: Error?

    public struct Error: Codable {
        public var message: String?

        public init(message: String? = nil) {
            self.message = message
        }
    }

    public init(error: Error? = nil) {
        self.error = error
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
