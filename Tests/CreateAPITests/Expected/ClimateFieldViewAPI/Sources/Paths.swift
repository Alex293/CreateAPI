// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import Get
import URLQueryEncoder

extension Paths {
    public static var fields: Fields {
        Fields(path: "/v4/fields")
    }

    public struct Fields {
        /// Path: `/v4/fields`
        public let path: String

        /// Retrieve list of Fields
        ///
        /// Retrieve list of **Fields**. Filter the results by field name if the `fieldName` query parameter is specified.
        public func get(fieldName: String? = nil) -> Request<ClimateFieldViewAPI.Fields> {
            .get(path, query: makeGetQuery(fieldName))
        }

        private func makeGetQuery(_ fieldName: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(fieldName, forKey: "fieldName")
            return encoder.items
        }
    }
}

extension Paths.Fields {
    public func fieldID(_ fieldID: String) -> WithFieldID {
        WithFieldID(path: "\(path)/\(fieldID)")
    }

    public struct WithFieldID {
        /// Path: `/v4/fields/{fieldId}`
        public let path: String

        /// Retrieve a specific Field by ID
        ///
        /// Retrieve a given **Field** by ID.
        public var get: Request<ClimateFieldViewAPI.Field> {
            .get(path)
        }
    }
}

extension Paths {
    public static var farmOrganizations: FarmOrganizations {
        FarmOrganizations(path: "/v4/farmOrganizations")
    }

    public struct FarmOrganizations {
        /// Path: `/v4/farmOrganizations`
        public let path: String
    }
}

extension Paths.FarmOrganizations {
    public func farmOrganizationType(_ farmOrganizationType: String) -> WithFarmOrganizationType {
        WithFarmOrganizationType(path: "\(path)/\(farmOrganizationType)")
    }

    public struct WithFarmOrganizationType {
        /// Path: `/v4/farmOrganizations/{farmOrganizationType}`
        public let path: String
    }
}

extension Paths.FarmOrganizations.WithFarmOrganizationType {
    public func farmOrganizationID(_ farmOrganizationID: String) -> WithFarmOrganizationID {
        WithFarmOrganizationID(path: "\(path)/\(farmOrganizationID)")
    }

    public struct WithFarmOrganizationID {
        /// Path: `/v4/farmOrganizations/{farmOrganizationType}/{farmOrganizationId}`
        public let path: String

        /// Retrieve a specific farm organization by organization type and ID
        ///
        /// Retrieve a given **farm organization** by organization type and ID.
        public var get: Request<ClimateFieldViewAPI.FarmOrganization> {
            .get(path)
        }
    }
}

extension Paths {
    public static var resourceOwners: ResourceOwners {
        ResourceOwners(path: "/v4/resourceOwners")
    }

    public struct ResourceOwners {
        /// Path: `/v4/resourceOwners`
        public let path: String
    }
}

extension Paths.ResourceOwners {
    public func resourceOwnerID(_ resourceOwnerID: String) -> WithResourceOwnerID {
        WithResourceOwnerID(path: "\(path)/\(resourceOwnerID)")
    }

    public struct WithResourceOwnerID {
        /// Path: `/v4/resourceOwners/{resourceOwnerId}`
        public let path: String

        /// Retrieve a resource owner by ID
        ///
        /// Retrieve a resource owner for the given `resourceOwnerId`.
        public var get: Request<ClimateFieldViewAPI.ResourceOwner> {
            .get(path)
        }
    }
}

extension Paths.Boundaries {
    public func boundaryID(_ boundaryID: String) -> WithBoundaryID {
        WithBoundaryID(path: "\(path)/\(boundaryID)")
    }

    public struct WithBoundaryID {
        /// Path: `/v4/boundaries/{boundaryId}`
        public let path: String

        /// Retrieve a Boundary by ID
        ///
        /// Retrieve a **Boundary** by ID.
        public var get: Request<ClimateFieldViewAPI.Boundary> {
            .get(path)
        }
    }
}

extension Paths.Boundaries {
    public var query: Query {
        Query(path: path + "/query")
    }

    public struct Query {
        /// Path: `/v4/boundaries/query`
        public let path: String

        /// Retrieve Boundaries in batch
        ///
        /// Retrieve multiple **Boundaries** (up to 10 per request).
        public func post(_ body: ClimateFieldViewAPI.BoundariesQuery? = nil) -> Request<ClimateFieldViewAPI.Boundaries> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var boundaries: Boundaries {
        Boundaries(path: "/v4/boundaries")
    }

    public struct Boundaries {
        /// Path: `/v4/boundaries`
        public let path: String

        /// Upload a boundary
        ///
        /// Upload a **Boundary** entry by passing the geometry of the boundary. This will store the boundary but will not create field in Climate FieldView and will not link to an existing field in Climate FieldView.
        /// This is restricted to callers with **boundaries:write** scope.
        /// To upload a field boundary for field creation in Climate FieldView, please use **POST /v4/uploads**.
        public func post(_ body: ClimateFieldViewAPI.BoundaryUpload? = nil) -> Request<ClimateFieldViewAPI.UploadedBoundaryID> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var uploads: Uploads {
        Uploads(path: "/v4/uploads")
    }

    public struct Uploads {
        /// Path: `/v4/uploads`
        public let path: String

        /// Initiate a new upload
        ///
        /// Step one in uploading a data product. The method will return an **Upload** ID which the caller will use in subsequent `PUT` requests.
        /// The following `contentTypes` may be uploaded:
        ///     <details><summary>__image/vnd.climate.thermal.geotiff__</summary>
        /// 
        ///     Allows for the upload of a thermal image. The image is a single band geotiff with 64 bit signed floating point values in degrees Celsius. The Coordinate Reference System (CRS) must be UTM with WGS84 datum.
        /// 
        ///     The following metadata entries are required to be embedded in the geotiff:
        ///       * acquisitionStartDate - ISO8601 date
        ///       * acquisitionEndDate - ISO8601 date
        ///       * isCalibrated - boolean
        /// 
        ///     The following metadata entries are optional:
        ///       * sourceId - uuid referencing the asset in the partner's system
        ///       * fieldId - uuid referencing a field in the Climate system
        ///       * boundaryId - uuid referencing a boundary in the Climate system
        ///       * brandId - uuid referencing a partner's branding in the Climate system
        ///       * name - name of the layer. The maximum number of characters that will be accepted as input is 20.
        /// 
        ///     Requires either imagery:write or platform scope.
        ///   </details>
        ///   <details><summary>__image/vnd.climate.ndvi.geotiff__</summary>
        /// 
        ///     Allows for the upload of a NDVI image. The image is a single band geotiff with 64 bit signed floating point values in the range of -1 to 1 inclusive. The Coordinate Reference System (CRS) must be UTM with WGS84 datum.
        /// 
        ///     The following metadata entries are required to be embedded in the geotiff:
        ///       * acquisitionStartDate - ISO8601 date
        ///       * acquisitionEndDate - ISO8601 date
        /// 
        ///     The following metadata entries are optional:
        ///       * sourceId - uuid referencing the asset in the partner's system
        ///       * fieldId - uuid referencing a field in the Climate system
        ///       * boundaryId - uuid referencing a boundary in the Climate system
        ///       * brandId - uuid referencing a partner's branding in the Climate system
        ///       * name - name of the layer. The maximum number of characters that will be accepted as input is 20.
        /// 
        ///     Requires either imagery:write or platform scope.
        ///   </details>
        ///   <details><summary> __image/vnd.climate.rgb.geotiff__</summary>
        /// 
        ///     Allows for the upload of a true color image. The image is a multi band geotiff with 24-bit composite values. Each band is 8 bits with values in the range of 0 to 255. The Coordinate Reference System (CRS) must be UTM with WGS84 datum. The geotiff must contain 3 bands in the order Red, Green, Blue.
        /// 
        ///     The following metadata entries are required to be embedded in the geotiff:
        ///       * acquisitionStartDate - ISO8601 date
        ///       * acquisitionEndDate - ISO8601 date
        ///       * isCalibrated - boolean
        /// 
        ///     The following metadata entries are optional:
        ///       * sourceId - uuid referencing the asset in the partner's system
        ///       * fieldId - uuid referencing a field in the Climate system
        ///       * boundaryId - uuid referencing a boundary in the Climate system
        ///       * brandId - uuid referencing a partner's branding in the Climate system
        ///       * reflectanceComputeMethod - either TOA or GROUND
        ///       * name - name of the layer. The maximum number of characters that will be accepted as input is 20.
        /// 
        ///     Requires either imagery:write or platform scope.
        ///   </details>
        ///   <details><summary> __image/vnd.climate.rgb-nir.geotiff__</summary>
        /// 
        ///     Allows for the upload of a Near Infrared (NIR) image. The Coordinate Reference System (CRS) must be UTM with WGS84 datum.
        /// 
        ///     The following metadata entries are required to be embedded in the geotiff:
        ///       * acquisitionStartDate - ISO8601 date
        ///       * acquisitionEndDate - ISO8601 date
        ///       * isCalibrated - boolean
        /// 
        ///     The following metadata entries are optional:
        ///       * sourceId - uuid referencing the asset in the partner's system
        ///       * fieldId - uuid referencing a field in the Climate system
        ///       * boundaryId - uuid referencing a boundary in the Climate system
        ///       * brandId - uuid referencing a partner's branding in the Climate system
        ///       * reflectanceComputeMethod - either TOA or GROUND
        ///       * name - name of the layer. The maximum number of characters that will be accepted as input is 20.
        /// 
        ///     Requires either imagery:write or platform scope.
        ///   </details>
        ///   <details><summary>__image/vnd.climate.rgb-cir.geotiff__</summary>
        /// 
        ///     Allows for the upload of a Color Infrared (CIR) image. The Coordinate Reference System (CRS) must be UTM with WGS84 datum.
        /// 
        ///     The following metadata entries are required to be embedded in the geotiff:
        ///       * acquisitionStartDate - ISO8601 date
        ///       * acquisitionEndDate - ISO8601 date
        ///       * isCalibrated - boolean
        /// 
        ///     The following metadata entries are optional:
        ///       * sourceId - uuid referencing the asset in the partner's system
        ///       * fieldId - uuid referencing a field in the Climate system
        ///       * boundaryId - uuid referencing a boundary in the Climate system
        ///       * brandId - uuid referencing a partner's branding in the Climate system
        ///       * reflectanceComputeMethod - either TOA or GROUND
        ///       * name - name of the layer. The maximum number of characters that will be accepted as input is 20.
        /// 
        ///     Requires either imagery:write or platform scope.
        ///   </details>
        ///   <details><summary> __application/vnd.climate.field.geojson__</summary>
        /// 
        ///     Allows for the upload of a valid geojson feature (https://tools.ietf.org/html/rfc7946#section-3.2).
        /// 
        ///     The feature must contain the following entry in the properties section:
        ///       * fieldName
        /// 
        ///     Optionally, the feature may contain the following entries in the properties properties:
        ///       * farmName - defaults to *default*
        ///       * clientName - defaults to *default*
        /// 
        ///     Additionally, the type field of the geometry field must one of the following:
        ///       * Polygon
        ///       * MultiPolygon
        /// 
        ///     The coordinates field of the geometry field must contain no more than 10,000 points.
        ///     The total area of the field may not be larger than 20,000 acres in size.
        /// 
        ///     Requires either fields:write or platform scope.
        ///   </details>
        ///   <details><summary> __application/vnd.climate.rx.planting.shp__</summary>
        /// 
        ///     Allows for the upload of a planting prescription in shapefile format.  The upload must be an archive in the zip format.  It should contain one and only one of each of the following file types:
        ///       * .shp
        ///       * .shx
        ///       * .dbf
        /// 
        ///     All files with the above suffixes must have the same prefix, ie Back40.shp, Back40.shx and Back40.dbf.
        /// 
        ///     Requires either rx:write or platform scope.
        ///   </details>
        ///   <details><summary> __application/vnd.climate.modus.xml__</summary>
        /// 
        ///     Allows for the upload of a soil sampling file in the modus 1.0 format with some restrictions.  The upload must be a single xml file.
        /// 
        ///     The following elements are required to be present in the modus file.
        ///       * EventCode - Max length of 64 bytes
        ///       * EventDate - Must be in ISO8601
        ///       * SoilSample - Has a maxOccurs of 20k
        ///       * Depth - Has a maxOccurs of 50
        ///       * LabName - Must be non-empty.
        ///       * StartingDepth - 0 to 36 inclusive, default 0
        ///       * EndingDepth - 1 - 36 inclusive, default 1
        ///       * ColumnDepth
        ///       * DepthUnit - must be inches
        ///       * Geometry - point in wgs84
        ///     
        ///     Requires the soil:write scope.
        ///    </details>
        ///    <details><summary> __application/vnd.climate.stand-count.geojson__</summary>
        /// 
        ///     Allows for the upload of a valid [geojson feature collection](https://tools.ietf.org/html/rfc7946#section-3.3).
        /// 
        ///     Each feature in the collection must contain the following entry in its properties section:
        ///       * StandPPA - A count of the number of plants per acre:
        /// 
        ///     Additionally, the type field of each feature's geometry field must be:
        ///       * Point
        /// 
        ///     Requires `imagery:write` scope.
        ///    </details>
        ///    <details><summary> __application/vnd.climate.weed-count.geojson__</summary>
        /// 
        ///     Allows for the upload of a valid [geojson feature collection](https://tools.ietf.org/html/rfc7946#section-3.3).
        /// 
        ///     Each feature in the collection must contain the following entry in its properties section:
        ///       * StandPPA - A count of the number of plants per acre:
        /// 
        ///     Additionally, the type field of each feature's geometry field must be:
        ///       * Point
        /// 
        ///     Requires `imagery:write` scope.
        ///    </details>
        ///    <details><summary> __application/vnd.climate.as-applied.zip__</summary>
        /// 
        ///     Allows for the upload of a valid application data [supported formats](https://support.climate.com/kt#/kA02A000000DjvOSAS/en_US).
        /// 
        ///     The following metadata entries are required:
        ///     * fileName - name of the file being uploaded.
        /// 
        ///     Requires `asApplied:write` scope.
        ///    </details>
        public func post(_ body: ClimateFieldViewAPI.Upload? = nil) -> Request<String> {
            .post(path, body: body)
        }
    }
}

extension Paths.Uploads {
    public func uploadID(_ uploadID: String) -> WithUploadID {
        WithUploadID(path: "\(path)/\(uploadID)")
    }

    public struct WithUploadID {
        /// Path: `/v4/uploads/{uploadId}`
        public let path: String

        /// Chunked upload of data
        ///
        /// Send chunked data for an **Upload**.
        public var put: Request<Void> {
            .put(path)
        }
    }
}

extension Paths.Uploads.WithUploadID {
    public var status: Status {
        Status(path: path + "/status")
    }

    public struct Status {
        /// Path: `/v4/uploads/{uploadId}/status`
        public let path: String

        /// Retrieve Upload status
        ///
        /// Check the status of an **Upload** by ID.
        public var get: Request<ClimateFieldViewAPI.UploadStatus> {
            .get(path)
        }
    }
}

extension Paths.Uploads {
    public var status: Status {
        Status(path: path + "/status")
    }

    public struct Status {
        /// Path: `/v4/uploads/status`
        public let path: String
    }
}

extension Paths.Uploads.Status {
    public var query: Query {
        Query(path: path + "/query")
    }

    public struct Query {
        /// Path: `/v4/uploads/status/query`
        public let path: String

        /// Retrieve Upload statuses in batch
        ///
        /// Check the status of multiple **Uploads** (up to 100 per request).
        public func post(_ body: ClimateFieldViewAPI.UploadStatusQuery? = nil) -> Request<ClimateFieldViewAPI.UploadStatuses> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var layers: Layers {
        Layers(path: "/v4/layers")
    }

    public struct Layers {
        /// Path: `/v4/layers`
        public let path: String
    }
}

extension Paths.Layers {
    public var scoutingObservations: ScoutingObservations {
        ScoutingObservations(path: path + "/scoutingObservations")
    }

    public struct ScoutingObservations {
        /// Path: `/v4/layers/scoutingObservations`
        public let path: String

        /// Retrieve a list of scouting observations
        ///
        /// Retrieve a list of scouting observations created or updated by the user identified by the Authorization header.
        public func get(occurredAfter: Date? = nil, occurredBefore: Date? = nil) -> Request<ClimateFieldViewAPI.ScoutingObservations> {
            .get(path, query: makeGetQuery(occurredAfter, occurredBefore))
        }

        private func makeGetQuery(_ occurredAfter: Date?, _ occurredBefore: Date?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(occurredAfter, forKey: "occurredAfter")
            encoder.encode(occurredBefore, forKey: "occurredBefore")
            return encoder.items
        }
    }
}

extension Paths.Layers.ScoutingObservations {
    public func scoutingObservationID(_ scoutingObservationID: String) -> WithScoutingObservationID {
        WithScoutingObservationID(path: "\(path)/\(scoutingObservationID)")
    }

    public struct WithScoutingObservationID {
        /// Path: `/v4/layers/scoutingObservations/{scoutingObservationId}`
        public let path: String

        /// Retrieve individual scouting observation
        ///
        /// Retrieve an individual scouting observation by id.  Ids are retrieved via the /layers/scoutingObservations route.
        public var get: Request<ClimateFieldViewAPI.ScoutingObservation> {
            .get(path)
        }
    }
}

extension Paths.Layers.ScoutingObservations.WithScoutingObservationID {
    public var attachments: Attachments {
        Attachments(path: path + "/attachments")
    }

    public struct Attachments {
        /// Path: `/v4/layers/scoutingObservations/{scoutingObservationId}/attachments`
        public let path: String

        /// Retrieve attachments associated with a given scouting observation.
        ///
        /// Retrieve attachments associated with a given scouting observation. Photos added to scouting notes in the FieldView app are capped to 20MB, and we won’t store photos larger than that in a scouting note.
        public var get: Request<ClimateFieldViewAPI.ScoutingObservationAttachments> {
            .get(path)
        }
    }
}

extension Paths.Layers.ScoutingObservations.WithScoutingObservationID.Attachments {
    public func attachmentID(_ attachmentID: String) -> WithAttachmentID {
        WithAttachmentID(path: "\(path)/\(attachmentID)")
    }

    public struct WithAttachmentID {
        /// Path: `/v4/layers/scoutingObservations/{scoutingObservationId}/attachments/{attachmentId}`
        public let path: String
    }
}

extension Paths.Layers.ScoutingObservations.WithScoutingObservationID.Attachments.WithAttachmentID {
    public var contents: Contents {
        Contents(path: path + "/contents")
    }

    public struct Contents {
        /// Path: `/v4/layers/scoutingObservations/{scoutingObservationId}/attachments/{attachmentId}/contents`
        public let path: String

        /// Retrieve the binary contents of a scouting observation’s attachment.
        ///
        /// Photos added to scouting notes in the FieldView app are capped to `20MiB` (`20971520 bytes`), and we won’t store photos larger than that in a scouting note. Downloads larger than `5MiB` (`5242880 bytes`) in size, must be downloaded in chunks no larger than `5MiB` (`5242880 bytes`) and no smaller than `1MiB` (`1048576 bytes`). The last chunk could be less than `1MiB` (`1048576 bytes`).
        public var get: Request<Data> {
            .get(path)
        }
    }
}

extension Paths.Layers {
    public var asPlanted: AsPlanted {
        AsPlanted(path: path + "/asPlanted")
    }

    public struct AsPlanted {
        /// Path: `/v4/layers/asPlanted`
        public let path: String

        /// Retrieve a list of planting activities
        ///
        /// Retrieve a list of planting activities. The id in the response is used for  GET /v4/layers/asPlanted/{activityId}/contents.
        public func get(parameters: GetParameters? = nil) -> Request<ClimateFieldViewAPI.PlantingActivities> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var resourceOwnerID: String?
            public var occurredAfter: Date?
            public var occurredBefore: Date?
            public var updatedAfter: Date?

            public init(resourceOwnerID: String? = nil, occurredAfter: Date? = nil, occurredBefore: Date? = nil, updatedAfter: Date? = nil) {
                self.resourceOwnerID = resourceOwnerID
                self.occurredAfter = occurredAfter
                self.occurredBefore = occurredBefore
                self.updatedAfter = updatedAfter
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(resourceOwnerID, forKey: "resourceOwnerId")
                encoder.encode(occurredAfter, forKey: "occurredAfter")
                encoder.encode(occurredBefore, forKey: "occurredBefore")
                encoder.encode(updatedAfter, forKey: "updatedAfter")
                return encoder.items
            }
        }
    }
}

extension Paths.Layers.AsPlanted {
    public func activityID(_ activityID: String) -> WithActivityID {
        WithActivityID(path: "\(path)/\(activityID)")
    }

    public struct WithActivityID {
        /// Path: `/v4/layers/asPlanted/{activityId}`
        public let path: String
    }
}

extension Paths.Layers.AsPlanted.WithActivityID {
    public var contents: Contents {
        Contents(path: path + "/contents")
    }

    public struct Contents {
        /// Path: `/v4/layers/asPlanted/{activityId}/contents`
        public let path: String

        /// Retrieve the raw planting activity
        ///
        /// Retrieve an individual planting activity by id.  Ids are retrieved via the  /layers/asPlanted route. Downloads larger than `5MiB` (`5242880 bytes`) in size, must be downloaded in chunks no larger than `5MiB` (`5242880 bytes`) and no smaller than `1MiB`  (`1048576 bytes`). The last chunk could be less than `1MiB` (`1048576 bytes`).  The data is compressed using .zip format.
        public var get: Request<Data> {
            .get(path)
        }
    }
}

extension Paths.Layers {
    public var asApplied: AsApplied {
        AsApplied(path: path + "/asApplied")
    }

    public struct AsApplied {
        /// Path: `/v4/layers/asApplied`
        public let path: String

        /// Retrieve a list of application activities
        ///
        /// Retrieve a list of application activities. The id in the response is used for  GET /v4/layers/asApplied/{activityId}/contents.
        public func get(parameters: GetParameters? = nil) -> Request<ClimateFieldViewAPI.ApplicationActivities> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var resourceOwnerID: String?
            public var occurredAfter: Date?
            public var occurredBefore: Date?
            public var updatedAfter: Date?

            public init(resourceOwnerID: String? = nil, occurredAfter: Date? = nil, occurredBefore: Date? = nil, updatedAfter: Date? = nil) {
                self.resourceOwnerID = resourceOwnerID
                self.occurredAfter = occurredAfter
                self.occurredBefore = occurredBefore
                self.updatedAfter = updatedAfter
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(resourceOwnerID, forKey: "resourceOwnerId")
                encoder.encode(occurredAfter, forKey: "occurredAfter")
                encoder.encode(occurredBefore, forKey: "occurredBefore")
                encoder.encode(updatedAfter, forKey: "updatedAfter")
                return encoder.items
            }
        }
    }
}

extension Paths.Layers.AsApplied {
    public func activityID(_ activityID: String) -> WithActivityID {
        WithActivityID(path: "\(path)/\(activityID)")
    }

    public struct WithActivityID {
        /// Path: `/v4/layers/asApplied/{activityId}`
        public let path: String
    }
}

extension Paths.Layers.AsApplied.WithActivityID {
    public var contents: Contents {
        Contents(path: path + "/contents")
    }

    public struct Contents {
        /// Path: `/v4/layers/asApplied/{activityId}/contents`
        public let path: String

        /// Retrieve the raw application activity
        ///
        /// Retrieve an individual application activity by id.  Ids are retrieved via the  /layers/asApplied route. Downloads larger than `5MiB` (`5242880 bytes`) in size, must be downloaded in chunks no larger than `5MiB` (`5242880 bytes`) and no smaller than `1MiB`  (`1048576 bytes`). The last chunk could be less than `1MiB` (`1048576 bytes`). The data is compressed using .zip format.
        public var get: Request<Data> {
            .get(path)
        }
    }
}

extension Paths.Layers {
    public var asHarvested: AsHarvested {
        AsHarvested(path: path + "/asHarvested")
    }

    public struct AsHarvested {
        /// Path: `/v4/layers/asHarvested`
        public let path: String

        /// Retrieve a list of harvest activities
        ///
        /// Retrieve a list of harvest activities. The id in the response is used for  GET /v4/layers/asHarvested/{activityId}/contents.
        public func get(parameters: GetParameters? = nil) -> Request<ClimateFieldViewAPI.HarvestActivities> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var resourceOwnerID: String?
            public var occurredAfter: Date?
            public var occurredBefore: Date?
            public var updatedAfter: Date?

            public init(resourceOwnerID: String? = nil, occurredAfter: Date? = nil, occurredBefore: Date? = nil, updatedAfter: Date? = nil) {
                self.resourceOwnerID = resourceOwnerID
                self.occurredAfter = occurredAfter
                self.occurredBefore = occurredBefore
                self.updatedAfter = updatedAfter
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(resourceOwnerID, forKey: "resourceOwnerId")
                encoder.encode(occurredAfter, forKey: "occurredAfter")
                encoder.encode(occurredBefore, forKey: "occurredBefore")
                encoder.encode(updatedAfter, forKey: "updatedAfter")
                return encoder.items
            }
        }
    }
}

extension Paths.Layers.AsHarvested {
    public func activityID(_ activityID: String) -> WithActivityID {
        WithActivityID(path: "\(path)/\(activityID)")
    }

    public struct WithActivityID {
        /// Path: `/v4/layers/asHarvested/{activityId}`
        public let path: String
    }
}

extension Paths.Layers.AsHarvested.WithActivityID {
    public var contents: Contents {
        Contents(path: path + "/contents")
    }

    public struct Contents {
        /// Path: `/v4/layers/asHarvested/{activityId}/contents`
        public let path: String

        /// Retrieve the raw harvest activity
        ///
        /// Retrieve an individual harvest activity by id.  Ids are retrieved via the  /layers/asHarvested route. Downloads larger than `5MiB` (`5242880 bytes`) in size, must be downloaded in chunks no larger than `5MiB` (`5242880 bytes`) and no smaller than `1MiB`  (`1048576 bytes`). The last chunk could be less than `1MiB` (`1048576 bytes`). The data is compressed using .zip format.
        public var get: Request<Data> {
            .get(path)
        }
    }
}

public enum Paths {}
