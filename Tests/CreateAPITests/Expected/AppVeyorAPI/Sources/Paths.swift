// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import Get
import URLQueryEncoder

extension Paths {
    public static var users: Users {
        Users(path: "/users")
    }

    public struct Users {
        /// Path: `/users`
        public let path: String

        /// Get users
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/team/#get-users)
        public var get: Request<[AppVeyorAPI.UserAccount]> {
            .get(path)
        }

        /// Add user
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/team/#add-user)
        public func post(_ body: AppVeyorAPI.UserAddition) -> Request<Void> {
            .post(path, body: body)
        }

        /// Update user
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/team/#update-user)
        public func put(_ body: AppVeyorAPI.UserAccount) -> Request<Void> {
            .put(path, body: body)
        }
    }
}

extension Paths.Users {
    public func userID(_ userID: Int) -> WithUserID {
        WithUserID(path: "\(path)/\(userID)")
    }

    public struct WithUserID {
        /// Path: `/users/{userId}`
        public let path: String

        /// Get user
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/team/#get-user)
        public var get: Request<AppVeyorAPI.UserAccountRolesResults> {
            .get(path)
        }

        /// Delete user
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/team/#delete-user)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var collaborators: Collaborators {
        Collaborators(path: "/collaborators")
    }

    public struct Collaborators {
        /// Path: `/collaborators`
        public let path: String

        /// Get collaborators
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/team/#get-collaborators)
        public var get: Request<[AppVeyorAPI.UserAccount]> {
            .get(path)
        }

        /// Add collaborator
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/team/#add-collaborator)
        public func post(_ body: AppVeyorAPI.CollaboratorAddition) -> Request<Void> {
            .post(path, body: body)
        }

        /// Update collaborator
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/team/#update-collaborator)
        public func put(_ body: AppVeyorAPI.CollaboratorUpdate) -> Request<Void> {
            .put(path, body: body)
        }
    }
}

extension Paths.Collaborators {
    public func userID(_ userID: Int) -> WithUserID {
        WithUserID(path: "\(path)/\(userID)")
    }

    public struct WithUserID {
        /// Path: `/collaborators/{userId}`
        public let path: String

        /// Get collaborator
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/team/#get-collaborator)
        public var get: Request<AppVeyorAPI.UserAccountRolesResults> {
            .get(path)
        }

        /// Delete collaborator
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/team/#delete-collaborator)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var roles: Roles {
        Roles(path: "/roles")
    }

    public struct Roles {
        /// Path: `/roles`
        public let path: String

        /// Get roles
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/team/#get-roles)
        public var get: Request<[AppVeyorAPI.Role]> {
            .get(path)
        }

        /// Add role
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/team/#add-role)
        public func post(_ body: AppVeyorAPI.RoleAddition) -> Request<AppVeyorAPI.RoleWithGroups> {
            .post(path, body: body)
        }

        /// Update role
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/team/#update-role)
        public func put(_ body: AppVeyorAPI.RoleWithGroups) -> Request<AppVeyorAPI.RoleWithGroups> {
            .put(path, body: body)
        }
    }
}

extension Paths.Roles {
    public func roleID(_ roleID: Int) -> WithRoleID {
        WithRoleID(path: "\(path)/\(roleID)")
    }

    public struct WithRoleID {
        /// Path: `/roles/{roleId}`
        public let path: String

        /// Get role
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/team/#get-role)
        public var get: Request<AppVeyorAPI.RoleWithGroups> {
            .get(path)
        }

        /// Delete role
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/team/#delete-role)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var account: Account {
        Account(path: "/account")
    }

    public struct Account {
        /// Path: `/account`
        public let path: String
    }
}

extension Paths.Account {
    public var encrypt: Encrypt {
        Encrypt(path: path + "/encrypt")
    }

    public struct Encrypt {
        /// Path: `/account/encrypt`
        public let path: String

        /// Encrypt a value for use in StoredValue.
        public func post(_ body: AppVeyorAPI.EncryptRequest) -> Request<String> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var projects: Projects {
        Projects(path: "/projects")
    }

    public struct Projects {
        /// Path: `/projects`
        public let path: String

        /// Get projects
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/projects-builds/#get-projects)
        public var get: Request<[AppVeyorAPI.Project]> {
            .get(path)
        }

        /// Add project
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/projects-builds/#add-project)
        public func post(_ body: AppVeyorAPI.ProjectAddition) -> Request<AppVeyorAPI.Project> {
            .post(path, body: body)
        }

        /// Update project
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/projects-builds/#update-project)
        public func put(_ body: AppVeyorAPI.ProjectWithConfiguration) -> Request<Void> {
            .put(path, body: body)
        }
    }
}

extension Paths.Projects {
    public func accountName(_ accountName: String) -> WithAccountName {
        WithAccountName(path: "\(path)/\(accountName)")
    }

    public struct WithAccountName {
        /// Path: `/projects/{accountName}`
        public let path: String
    }
}

extension Paths.Projects.WithAccountName {
    public func projectSlug(_ projectSlug: String) -> WithProjectSlug {
        WithProjectSlug(path: "\(path)/\(projectSlug)")
    }

    public struct WithProjectSlug {
        /// Path: `/projects/{accountName}/{projectSlug}`
        public let path: String

        /// Get project last build
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/projects-builds/#get-project-last-build)
        public var get: Request<AppVeyorAPI.ProjectBuildResults> {
            .get(path)
        }

        /// Delete project
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/projects-builds/#delete-project)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Projects.WithAccountName.WithProjectSlug {
    public var branch: Branch {
        Branch(path: path + "/branch")
    }

    public struct Branch {
        /// Path: `/projects/{accountName}/{projectSlug}/branch`
        public let path: String
    }
}

extension Paths.Projects.WithAccountName.WithProjectSlug.Branch {
    public func buildBranch(_ buildBranch: String) -> WithBuildBranch {
        WithBuildBranch(path: "\(path)/\(buildBranch)")
    }

    public struct WithBuildBranch {
        /// Path: `/projects/{accountName}/{projectSlug}/branch/{buildBranch}`
        public let path: String

        /// Get project last branch build
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/projects-builds/#get-project-last-branch-build)
        public var get: Request<AppVeyorAPI.ProjectBuildResults> {
            .get(path)
        }
    }
}

extension Paths.Projects.WithAccountName.WithProjectSlug {
    public var build: Build {
        Build(path: path + "/build")
    }

    public struct Build {
        /// Path: `/projects/{accountName}/{projectSlug}/build`
        public let path: String
    }
}

extension Paths.Projects.WithAccountName.WithProjectSlug.Build {
    public func buildVersion(_ buildVersion: String) -> WithBuildVersion {
        WithBuildVersion(path: "\(path)/\(buildVersion)")
    }

    public struct WithBuildVersion {
        /// Path: `/projects/{accountName}/{projectSlug}/build/{buildVersion}`
        public let path: String

        /// Get project build by version
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/projects-builds/#get-project-build-by-version)
        public var get: Request<AppVeyorAPI.ProjectBuildResults> {
            .get(path)
        }
    }
}

extension Paths.Projects.WithAccountName.WithProjectSlug {
    public var history: History {
        History(path: path + "/history")
    }

    public struct History {
        /// Path: `/projects/{accountName}/{projectSlug}/history`
        public let path: String

        /// Get project history
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/projects-builds/#get-project-history)
        public func get(parameters: GetParameters) -> Request<AppVeyorAPI.ProjectHistory> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var recordsNumber: Int
            public var startBuildID: Int?
            public var branch: String?

            public init(recordsNumber: Int, startBuildID: Int? = nil, branch: String? = nil) {
                self.recordsNumber = recordsNumber
                self.startBuildID = startBuildID
                self.branch = branch
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(recordsNumber, forKey: "recordsNumber")
                encoder.encode(startBuildID, forKey: "startBuildId")
                encoder.encode(branch, forKey: "branch")
                return encoder.items
            }
        }
    }
}

extension Paths.Projects.WithAccountName.WithProjectSlug {
    public var artifacts: Artifacts {
        Artifacts(path: path + "/artifacts")
    }

    public struct Artifacts {
        /// Path: `/projects/{accountName}/{projectSlug}/artifacts`
        public let path: String
    }
}

extension Paths.Projects.WithAccountName.WithProjectSlug.Artifacts {
    public func artifactFileName(_ artifactFileName: String) -> WithArtifactFileName {
        WithArtifactFileName(path: "\(path)/\(artifactFileName)")
    }

    public struct WithArtifactFileName {
        /// Path: `/projects/{accountName}/{projectSlug}/artifacts/{artifactFileName}`
        public let path: String

        /// Get last successful build artifact
        ///
        /// The `job` parameter is mandatory if the build contains multiple jobs.
        ///
        /// [External Documentation](https://www.appveyor.com/docs/packaging-artifacts/#permalink-to-the-last-successful-build-artifact)
        public func get(parameters: GetParameters? = nil) -> Request<Data> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var branch: String?
            public var tag: String?
            public var job: String?
            public var isAll: Bool?
            public var isPr: Bool?

            public init(branch: String? = nil, tag: String? = nil, job: String? = nil, isAll: Bool? = nil, isPr: Bool? = nil) {
                self.branch = branch
                self.tag = tag
                self.job = job
                self.isAll = isAll
                self.isPr = isPr
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(branch, forKey: "branch")
                encoder.encode(tag, forKey: "tag")
                encoder.encode(job, forKey: "job")
                encoder.encode(isAll, forKey: "all")
                encoder.encode(isPr, forKey: "pr")
                return encoder.items
            }
        }
    }
}

extension Paths.Projects.WithAccountName.WithProjectSlug {
    public var deployments: Deployments {
        Deployments(path: path + "/deployments")
    }

    public struct Deployments {
        /// Path: `/projects/{accountName}/{projectSlug}/deployments`
        public let path: String

        /// Get project deployments
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/projects-builds/#get-project-deployments)
        public func get(recordsNumber: Int) -> Request<AppVeyorAPI.ProjectDeploymentsResults> {
            .get(path, query: makeGetQuery(recordsNumber))
        }

        private func makeGetQuery(_ recordsNumber: Int) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(recordsNumber, forKey: "recordsNumber")
            return encoder.items
        }
    }
}

extension Paths.Projects.WithAccountName.WithProjectSlug {
    public var settings: Settings {
        Settings(path: path + "/settings")
    }

    public struct Settings {
        /// Path: `/projects/{accountName}/{projectSlug}/settings`
        public let path: String

        /// Get project settings
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/projects-builds/#get-project-settings)
        public var get: Request<AppVeyorAPI.ProjectSettingsResults> {
            .get(path)
        }
    }
}

extension Paths.Projects.WithAccountName.WithProjectSlug.Settings {
    public var yaml: Yaml {
        Yaml(path: path + "/yaml")
    }

    public struct Yaml {
        /// Path: `/projects/{accountName}/{projectSlug}/settings/yaml`
        public let path: String

        /// Get project settings in YAML
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/projects-builds/#get-project-settings-in-yaml)
        public var get: Request<String> {
            .get(path)
        }

        /// Update project settings in YAML
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/projects-builds/#update-project-settings-in-yaml)
        public func put(_ body: String) -> Request<Void> {
            .put(path, body: body)
        }
    }
}

extension Paths.Projects.WithAccountName.WithProjectSlug.Settings {
    public var buildNumber: BuildNumber {
        BuildNumber(path: path + "/build-number")
    }

    public struct BuildNumber {
        /// Path: `/projects/{accountName}/{projectSlug}/settings/build-number`
        public let path: String

        /// Update project build number
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/projects-builds/#update-project-build-number)
        public func put(_ body: AppVeyorAPI.ProjectBuildNumberUpdate) -> Request<Void> {
            .put(path, body: body)
        }
    }
}

extension Paths.Projects.WithAccountName.WithProjectSlug.Settings {
    public var environmentVariables: EnvironmentVariables {
        EnvironmentVariables(path: path + "/environment-variables")
    }

    public struct EnvironmentVariables {
        /// Path: `/projects/{accountName}/{projectSlug}/settings/environment-variables`
        public let path: String

        /// Get project environment variables
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/projects-builds/#get-project-environment-variables)
        public var get: Request<[AppVeyorAPI.StoredNameValue]> {
            .get(path)
        }

        /// Update project environment variables
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/projects-builds/#update-project-environment-variables)
        public func put(_ body: [AppVeyorAPI.StoredNameValue]) -> Request<Void> {
            .put(path, body: body)
        }
    }
}

extension Paths.Projects.WithAccountName.WithProjectSlug {
    public var buildcache: Buildcache {
        Buildcache(path: path + "/buildcache")
    }

    public struct Buildcache {
        /// Path: `/projects/{accountName}/{projectSlug}/buildcache`
        public let path: String

        /// Delete project build cache
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/projects-builds/#delete-project-build-cache)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Projects {
    public var status: Status {
        Status(path: path + "/status")
    }

    public struct Status {
        /// Path: `/projects/status`
        public let path: String
    }
}

extension Paths.Projects.Status {
    public func statusBadgeID(_ statusBadgeID: String) -> WithStatusBadgeID {
        WithStatusBadgeID(path: "\(path)/\(statusBadgeID)")
    }

    public struct WithStatusBadgeID {
        /// Path: `/projects/status/{statusBadgeId}`
        public let path: String

        /// Get project status badge image
        ///
        /// [External Documentation](https://www.appveyor.com/docs/status-badges/)
        public func get(parameters: GetParameters? = nil) -> Request<String> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var isSvg: Bool?
            public var isRetina: Bool?
            public var passingText: String?
            public var failingText: String?
            public var pendingText: String?

            public init(isSvg: Bool? = nil, isRetina: Bool? = nil, passingText: String? = nil, failingText: String? = nil, pendingText: String? = nil) {
                self.isSvg = isSvg
                self.isRetina = isRetina
                self.passingText = passingText
                self.failingText = failingText
                self.pendingText = pendingText
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isSvg, forKey: "svg")
                encoder.encode(isRetina, forKey: "retina")
                encoder.encode(passingText, forKey: "passingText")
                encoder.encode(failingText, forKey: "failingText")
                encoder.encode(pendingText, forKey: "pendingText")
                return encoder.items
            }
        }
    }
}

extension Paths.Projects.Status.WithStatusBadgeID {
    public var branch: Branch {
        Branch(path: path + "/branch")
    }

    public struct Branch {
        /// Path: `/projects/status/{statusBadgeId}/branch`
        public let path: String
    }
}

extension Paths.Projects.Status.WithStatusBadgeID.Branch {
    public func buildBranch(_ buildBranch: String) -> WithBuildBranch {
        WithBuildBranch(path: "\(path)/\(buildBranch)")
    }

    public struct WithBuildBranch {
        /// Path: `/projects/status/{statusBadgeId}/branch/{buildBranch}`
        public let path: String

        /// Get project branch status badge image
        ///
        /// [External Documentation](https://www.appveyor.com/docs/status-badges/)
        public func get(parameters: GetParameters? = nil) -> Request<String> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var isSvg: Bool?
            public var isRetina: Bool?
            public var passingText: String?
            public var failingText: String?
            public var pendingText: String?

            public init(isSvg: Bool? = nil, isRetina: Bool? = nil, passingText: String? = nil, failingText: String? = nil, pendingText: String? = nil) {
                self.isSvg = isSvg
                self.isRetina = isRetina
                self.passingText = passingText
                self.failingText = failingText
                self.pendingText = pendingText
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isSvg, forKey: "svg")
                encoder.encode(isRetina, forKey: "retina")
                encoder.encode(passingText, forKey: "passingText")
                encoder.encode(failingText, forKey: "failingText")
                encoder.encode(pendingText, forKey: "pendingText")
                return encoder.items
            }
        }
    }
}

extension Paths.Projects.Status {
    public func badgeRepoProvider(_ badgeRepoProvider: String) -> WithBadgeRepoProvider {
        WithBadgeRepoProvider(path: "\(path)/\(badgeRepoProvider)")
    }

    public struct WithBadgeRepoProvider {
        /// Path: `/projects/status/{badgeRepoProvider}`
        public let path: String
    }
}

extension Paths.Projects.Status.WithBadgeRepoProvider {
    public func repoAccountName(_ repoAccountName: String) -> WithRepoAccountName {
        WithRepoAccountName(path: "\(path)/\(repoAccountName)")
    }

    public struct WithRepoAccountName {
        /// Path: `/projects/status/{badgeRepoProvider}/{repoAccountName}`
        public let path: String
    }
}

extension Paths.Projects.Status.WithBadgeRepoProvider.WithRepoAccountName {
    public func repoSlug(_ repoSlug: String) -> WithRepoSlug {
        WithRepoSlug(path: "\(path)/\(repoSlug)")
    }

    public struct WithRepoSlug {
        /// Path: `/projects/status/{badgeRepoProvider}/{repoAccountName}/{repoSlug}`
        public let path: String

        /// Get status badge image for a project with a public repository
        ///
        /// [External Documentation](https://www.appveyor.com/docs/status-badges/)
        public func get(parameters: GetParameters? = nil) -> Request<String> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var branch: String?
            public var isSvg: Bool?
            public var isRetina: Bool?
            public var passingText: String?
            public var failingText: String?
            public var pendingText: String?

            public init(branch: String? = nil, isSvg: Bool? = nil, isRetina: Bool? = nil, passingText: String? = nil, failingText: String? = nil, pendingText: String? = nil) {
                self.branch = branch
                self.isSvg = isSvg
                self.isRetina = isRetina
                self.passingText = passingText
                self.failingText = failingText
                self.pendingText = pendingText
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(branch, forKey: "branch")
                encoder.encode(isSvg, forKey: "svg")
                encoder.encode(isRetina, forKey: "retina")
                encoder.encode(passingText, forKey: "passingText")
                encoder.encode(failingText, forKey: "failingText")
                encoder.encode(pendingText, forKey: "pendingText")
                return encoder.items
            }
        }
    }
}

extension Paths {
    public static var builds: Builds {
        Builds(path: "/builds")
    }

    public struct Builds {
        /// Path: `/builds`
        public let path: String

        /// Start build of branch most recent commit
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/projects-builds/#start-build-of-branch-most-recent-commit)
        public func post(_ body: AppVeyorAPI.BuildStartRequest) -> Request<AppVeyorAPI.Build> {
            .post(path, body: body)
        }

        /// Re-run build
        ///
        /// If `reRunIncomplete` is `true` and all jobs in the referenced build completed successfully, a 500 Internal Server Error is returned with the message "No failed or cancelled jobs in build with ID {buildId}".
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/projects-builds/#re-run-build)
        public func put(_ body: AppVeyorAPI.ReRunBuildRequest) -> Request<AppVeyorAPI.Build> {
            .put(path, body: body)
        }
    }
}

extension Paths.Builds {
    public func accountName(_ accountName: String) -> WithAccountName {
        WithAccountName(path: "\(path)/\(accountName)")
    }

    public struct WithAccountName {
        /// Path: `/builds/{accountName}`
        public let path: String
    }
}

extension Paths.Builds.WithAccountName {
    public func projectSlug(_ projectSlug: String) -> WithProjectSlug {
        WithProjectSlug(path: "\(path)/\(projectSlug)")
    }

    public struct WithProjectSlug {
        /// Path: `/builds/{accountName}/{projectSlug}`
        public let path: String
    }
}

extension Paths.Builds.WithAccountName.WithProjectSlug {
    public func buildVersion(_ buildVersion: String) -> WithBuildVersion {
        WithBuildVersion(path: "\(path)/\(buildVersion)")
    }

    public struct WithBuildVersion {
        /// Path: `/builds/{accountName}/{projectSlug}/{buildVersion}`
        public let path: String

        /// Cancel build
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/projects-builds/#cancel-build)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var buildjobs: Buildjobs {
        Buildjobs(path: "/buildjobs")
    }

    public struct Buildjobs {
        /// Path: `/buildjobs`
        public let path: String
    }
}

extension Paths.Buildjobs {
    public func jobID(_ jobID: String) -> WithJobID {
        WithJobID(path: "\(path)/\(jobID)")
    }

    public struct WithJobID {
        /// Path: `/buildjobs/{jobId}`
        public let path: String
    }
}

extension Paths.Buildjobs.WithJobID {
    public var artifacts: Artifacts {
        Artifacts(path: path + "/artifacts")
    }

    public struct Artifacts {
        /// Path: `/buildjobs/{jobId}/artifacts`
        public let path: String

        /// Get build artifacts
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/samples/download-artifacts-advanced-ps/)
        public var get: Request<[AppVeyorAPI.ArtifactModel]> {
            .get(path)
        }
    }
}

extension Paths.Buildjobs.WithJobID.Artifacts {
    public func artifactFileName(_ artifactFileName: String) -> WithArtifactFileName {
        WithArtifactFileName(path: "\(path)/\(artifactFileName)")
    }

    public struct WithArtifactFileName {
        /// Path: `/buildjobs/{jobId}/artifacts/{artifactFileName}`
        public let path: String

        /// Download build artifact
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/samples/download-artifacts-advanced-ps/)
        public var get: Request<Data> {
            .get(path)
        }
    }
}

extension Paths.Buildjobs.WithJobID {
    public var log: Log {
        Log(path: path + "/log")
    }

    public struct Log {
        /// Path: `/buildjobs/{jobId}/log`
        public let path: String

        /// Download build log
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/projects-builds/#download-build-log)
        public var get: Request<Data> {
            .get(path)
        }
    }
}

extension Paths {
    public static var environments: Environments {
        Environments(path: "/environments")
    }

    public struct Environments {
        /// Path: `/environments`
        public let path: String

        /// Get environments
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/environments-deployments/#get-environments)
        public var get: Request<[AppVeyorAPI.DeploymentEnvironmentLookupModel]> {
            .get(path)
        }

        /// Add environment
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/environments-deployments/#add-environment)
        public func post(_ body: AppVeyorAPI.DeploymentEnvironmentAddition) -> Request<AppVeyorAPI.DeploymentEnvironmentWithSettings> {
            .post(path, body: body)
        }

        /// Update environment
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/environments-deployments/#update-environment)
        public func put(_ body: AppVeyorAPI.DeploymentEnvironmentWithSettings) -> Request<AppVeyorAPI.DeploymentEnvironmentWithSettings> {
            .put(path, body: body)
        }
    }
}

extension Paths.Environments.WithDeploymentEnvironmentID {
    public var settings: Settings {
        Settings(path: path + "/settings")
    }

    public struct Settings {
        /// Path: `/environments/{deploymentEnvironmentId}/settings`
        public let path: String

        /// Get environment settings
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/environments-deployments/#get-environment-settings)
        public var get: Request<AppVeyorAPI.DeploymentEnvironmentSettingsResults> {
            .get(path)
        }
    }
}

extension Paths.Environments.WithDeploymentEnvironmentID {
    public var deployments: Deployments {
        Deployments(path: path + "/deployments")
    }

    public struct Deployments {
        /// Path: `/environments/{deploymentEnvironmentId}/deployments`
        public let path: String

        /// Get environment deployments
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/environments-deployments/#get-environment-deployments)
        public var get: Request<AppVeyorAPI.DeploymentEnvironmentDeploymentsResults> {
            .get(path)
        }
    }
}

extension Paths.Environments {
    public func deploymentEnvironmentID(_ deploymentEnvironmentID: Int) -> WithDeploymentEnvironmentID {
        WithDeploymentEnvironmentID(path: "\(path)/\(deploymentEnvironmentID)")
    }

    public struct WithDeploymentEnvironmentID {
        /// Path: `/environments/{deploymentEnvironmentId}`
        public let path: String

        /// Delete environment
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/environments-deployments/#delete-environment)
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Deployments {
    public func deploymentID(_ deploymentID: Int) -> WithDeploymentID {
        WithDeploymentID(path: "\(path)/\(deploymentID)")
    }

    public struct WithDeploymentID {
        /// Path: `/deployments/{deploymentId}`
        public let path: String

        /// Get deployment
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/environments-deployments/#get-deployment)
        public var get: Request<AppVeyorAPI.ProjectDeployment> {
            .get(path)
        }
    }
}

extension Paths {
    public static var deployments: Deployments {
        Deployments(path: "/deployments")
    }

    public struct Deployments {
        /// Path: `/deployments`
        public let path: String

        /// Start deployment
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/environments-deployments/#start-deployment)
        public func post(_ body: AppVeyorAPI.DeploymentStartRequest) -> Request<AppVeyorAPI.Deployment> {
            .post(path, body: body)
        }
    }
}

extension Paths.Deployments {
    public var stop: Stop {
        Stop(path: path + "/stop")
    }

    public struct Stop {
        /// Path: `/deployments/stop`
        public let path: String

        /// Cancel deployment
        ///
        /// [External Documentation](https://www.appveyor.com/docs/api/environments-deployments/#cancel-deployment)
        public func delete(_ body: AppVeyorAPI.DeploymentCancellation) -> Request<Void> {
            .delete(path, body: body)
        }
    }
}

public enum Paths {}
