// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation

/// Authentiq ID in JWT format, self-signed.
/// 
public struct AuthentiqID: Codable {
    /// Device token for push messages
    public var devtoken: String?
    /// UUID and public signing key
    public var sub: String

    public init(devtoken: String? = nil, sub: String) {
        self.devtoken = devtoken
        self.sub = sub
    }
}

/// Claim in JWT format, self- or issuer-signed.
/// 
public struct Claims: Codable {
    public var email: String?
    public var phone: String?
    /// Claim scope
    public var scope: String
    /// UUID
    public var sub: String
    public var type: String?

    public init(email: String? = nil, phone: String? = nil, scope: String, sub: String, type: String? = nil) {
        self.email = email
        self.phone = phone
        self.scope = scope
        self.sub = sub
        self.type = type
    }
}

public struct Error: Codable {
    public var detail: String?
    public var error: Int
    public var title: String?
    /// Unique uri for this error
    public var type: String?

    public init(detail: String? = nil, error: Int, title: String? = nil, type: String? = nil) {
        self.detail = detail
        self.error = error
        self.title = title
        self.type = type
    }
}

/// PushToken in JWT format, self-signed.
/// 
public struct PushToken: Codable {
    /// Audience (URI)
    public var aud: String
    public var exp: Int?
    public var iat: Int?
    /// Issuer (URI)
    public var iss: String
    public var nbf: Int?
    /// UUID and public signing key
    public var sub: String

    public init(aud: String, exp: Int? = nil, iat: Int? = nil, iss: String, nbf: Int? = nil, sub: String) {
        self.aud = aud
        self.exp = exp
        self.iat = iat
        self.iss = iss
        self.nbf = nbf
        self.sub = sub
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
