// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import Get

extension Paths {
    public static var xAmzTargetAmazonMemoryDBBatchUpdateCluster: XAmzTargetAmazonMemoryDBBatchUpdateCluster {
        XAmzTargetAmazonMemoryDBBatchUpdateCluster(path: "/#X-Amz-Target=AmazonMemoryDB.BatchUpdateCluster")
    }

    public struct XAmzTargetAmazonMemoryDBBatchUpdateCluster {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.BatchUpdateCluster`
        public let path: String

        /// Apply the service update to a list of clusters supplied. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/managing-updates.html#applying-updates">Applying the service updates</a>.
        public func post(_ body: AmazonMemoryDBAPI.BatchUpdateClusterRequest) -> Request<AmazonMemoryDBAPI.BatchUpdateClusterResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBCopySnapshot: XAmzTargetAmazonMemoryDBCopySnapshot {
        XAmzTargetAmazonMemoryDBCopySnapshot(path: "/#X-Amz-Target=AmazonMemoryDB.CopySnapshot")
    }

    public struct XAmzTargetAmazonMemoryDBCopySnapshot {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.CopySnapshot`
        public let path: String

        /// Makes a copy of an existing snapshot.
        public func post(_ body: AmazonMemoryDBAPI.CopySnapshotRequest) -> Request<AmazonMemoryDBAPI.CopySnapshotResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBCreateACL: XAmzTargetAmazonMemoryDBCreateACL {
        XAmzTargetAmazonMemoryDBCreateACL(path: "/#X-Amz-Target=AmazonMemoryDB.CreateACL")
    }

    public struct XAmzTargetAmazonMemoryDBCreateACL {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.CreateACL`
        public let path: String

        /// Creates an Access Control List. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html">Authenticating users with Access Contol Lists (ACLs)</a>.
        public func post(_ body: AmazonMemoryDBAPI.CreateACLRequest) -> Request<AmazonMemoryDBAPI.CreateACLResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBCreateCluster: XAmzTargetAmazonMemoryDBCreateCluster {
        XAmzTargetAmazonMemoryDBCreateCluster(path: "/#X-Amz-Target=AmazonMemoryDB.CreateCluster")
    }

    public struct XAmzTargetAmazonMemoryDBCreateCluster {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.CreateCluster`
        public let path: String

        /// Creates a cluster. All nodes in the cluster run the same protocol-compliant engine software.
        public func post(_ body: AmazonMemoryDBAPI.CreateClusterRequest) -> Request<AmazonMemoryDBAPI.CreateClusterResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBCreateParameterGroup: XAmzTargetAmazonMemoryDBCreateParameterGroup {
        XAmzTargetAmazonMemoryDBCreateParameterGroup(path: "/#X-Amz-Target=AmazonMemoryDB.CreateParameterGroup")
    }

    public struct XAmzTargetAmazonMemoryDBCreateParameterGroup {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.CreateParameterGroup`
        public let path: String

        /// Creates a new MemoryDB parameter group. A parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/parametergroups.html">Configuring engine parameters using parameter groups</a>.
        public func post(_ body: AmazonMemoryDBAPI.CreateParameterGroupRequest) -> Request<AmazonMemoryDBAPI.CreateParameterGroupResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBCreateSnapshot: XAmzTargetAmazonMemoryDBCreateSnapshot {
        XAmzTargetAmazonMemoryDBCreateSnapshot(path: "/#X-Amz-Target=AmazonMemoryDB.CreateSnapshot")
    }

    public struct XAmzTargetAmazonMemoryDBCreateSnapshot {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.CreateSnapshot`
        public let path: String

        /// Creates a copy of an entire cluster at a specific moment in time.
        public func post(_ body: AmazonMemoryDBAPI.CreateSnapshotRequest) -> Request<AmazonMemoryDBAPI.CreateSnapshotResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBCreateSubnetGroup: XAmzTargetAmazonMemoryDBCreateSubnetGroup {
        XAmzTargetAmazonMemoryDBCreateSubnetGroup(path: "/#X-Amz-Target=AmazonMemoryDB.CreateSubnetGroup")
    }

    public struct XAmzTargetAmazonMemoryDBCreateSubnetGroup {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.CreateSubnetGroup`
        public let path: String

        /// Creates a subnet group. A subnet group is a collection of subnets (typically private) that you can designate for your clusters running in an Amazon Virtual Private Cloud (VPC) environment. When you create a cluster in an Amazon VPC, you must specify a subnet group. MemoryDB uses that subnet group to choose a subnet and IP addresses within that subnet to associate with your nodes. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/subnetgroups.html">Subnets and subnet groups</a>.
        public func post(_ body: AmazonMemoryDBAPI.CreateSubnetGroupRequest) -> Request<AmazonMemoryDBAPI.CreateSubnetGroupResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBCreateUser: XAmzTargetAmazonMemoryDBCreateUser {
        XAmzTargetAmazonMemoryDBCreateUser(path: "/#X-Amz-Target=AmazonMemoryDB.CreateUser")
    }

    public struct XAmzTargetAmazonMemoryDBCreateUser {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.CreateUser`
        public let path: String

        /// Creates a MemoryDB user. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html">Authenticating users with Access Contol Lists (ACLs)</a>.
        public func post(_ body: AmazonMemoryDBAPI.CreateUserRequest) -> Request<AmazonMemoryDBAPI.CreateUserResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBDeleteACL: XAmzTargetAmazonMemoryDBDeleteACL {
        XAmzTargetAmazonMemoryDBDeleteACL(path: "/#X-Amz-Target=AmazonMemoryDB.DeleteACL")
    }

    public struct XAmzTargetAmazonMemoryDBDeleteACL {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.DeleteACL`
        public let path: String

        /// Deletes an Access Control List. The ACL must first be disassociated from the cluster before it can be deleted. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html">Authenticating users with Access Contol Lists (ACLs)</a>.
        public func post(_ body: AmazonMemoryDBAPI.DeleteACLRequest) -> Request<AmazonMemoryDBAPI.DeleteACLResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBDeleteCluster: XAmzTargetAmazonMemoryDBDeleteCluster {
        XAmzTargetAmazonMemoryDBDeleteCluster(path: "/#X-Amz-Target=AmazonMemoryDB.DeleteCluster")
    }

    public struct XAmzTargetAmazonMemoryDBDeleteCluster {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.DeleteCluster`
        public let path: String

        /// Deletes a cluster. It also deletes all associated nodes and node endpoints
        public func post(_ body: AmazonMemoryDBAPI.DeleteClusterRequest) -> Request<AmazonMemoryDBAPI.DeleteClusterResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBDeleteParameterGroup: XAmzTargetAmazonMemoryDBDeleteParameterGroup {
        XAmzTargetAmazonMemoryDBDeleteParameterGroup(path: "/#X-Amz-Target=AmazonMemoryDB.DeleteParameterGroup")
    }

    public struct XAmzTargetAmazonMemoryDBDeleteParameterGroup {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.DeleteParameterGroup`
        public let path: String

        /// Deletes the specified parameter group. You cannot delete a parameter group if it is associated with any clusters. You cannot delete the default parameter groups in your account.
        public func post(_ body: AmazonMemoryDBAPI.DeleteParameterGroupRequest) -> Request<AmazonMemoryDBAPI.DeleteParameterGroupResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBDeleteSnapshot: XAmzTargetAmazonMemoryDBDeleteSnapshot {
        XAmzTargetAmazonMemoryDBDeleteSnapshot(path: "/#X-Amz-Target=AmazonMemoryDB.DeleteSnapshot")
    }

    public struct XAmzTargetAmazonMemoryDBDeleteSnapshot {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.DeleteSnapshot`
        public let path: String

        /// Deletes an existing snapshot. When you receive a successful response from this operation, MemoryDB immediately begins deleting the snapshot; you cannot cancel or revert this operation.
        public func post(_ body: AmazonMemoryDBAPI.DeleteSnapshotRequest) -> Request<AmazonMemoryDBAPI.DeleteSnapshotResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBDeleteSubnetGroup: XAmzTargetAmazonMemoryDBDeleteSubnetGroup {
        XAmzTargetAmazonMemoryDBDeleteSubnetGroup(path: "/#X-Amz-Target=AmazonMemoryDB.DeleteSubnetGroup")
    }

    public struct XAmzTargetAmazonMemoryDBDeleteSubnetGroup {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.DeleteSubnetGroup`
        public let path: String

        /// Deletes a subnet group. You cannot delete a default subnet group or one that is associated with any clusters.
        public func post(_ body: AmazonMemoryDBAPI.DeleteSubnetGroupRequest) -> Request<AmazonMemoryDBAPI.DeleteSubnetGroupResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBDeleteUser: XAmzTargetAmazonMemoryDBDeleteUser {
        XAmzTargetAmazonMemoryDBDeleteUser(path: "/#X-Amz-Target=AmazonMemoryDB.DeleteUser")
    }

    public struct XAmzTargetAmazonMemoryDBDeleteUser {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.DeleteUser`
        public let path: String

        /// Deletes a user. The user will be removed from all ACLs and in turn removed from all clusters.
        public func post(_ body: AmazonMemoryDBAPI.DeleteUserRequest) -> Request<AmazonMemoryDBAPI.DeleteUserResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBDescribeACLs: XAmzTargetAmazonMemoryDBDescribeACLs {
        XAmzTargetAmazonMemoryDBDescribeACLs(path: "/#X-Amz-Target=AmazonMemoryDB.DescribeACLs")
    }

    public struct XAmzTargetAmazonMemoryDBDescribeACLs {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.DescribeACLs`
        public let path: String

        /// Returns a list of ACLs
        public func post(_ body: AmazonMemoryDBAPI.DescribeACLsRequest) -> Request<AmazonMemoryDBAPI.DescribeACLsResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBDescribeClusters: XAmzTargetAmazonMemoryDBDescribeClusters {
        XAmzTargetAmazonMemoryDBDescribeClusters(path: "/#X-Amz-Target=AmazonMemoryDB.DescribeClusters")
    }

    public struct XAmzTargetAmazonMemoryDBDescribeClusters {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.DescribeClusters`
        public let path: String

        /// Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cluster if a cluster name is supplied.
        public func post(_ body: AmazonMemoryDBAPI.DescribeClustersRequest) -> Request<AmazonMemoryDBAPI.DescribeClustersResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBDescribeEngineVersions: XAmzTargetAmazonMemoryDBDescribeEngineVersions {
        XAmzTargetAmazonMemoryDBDescribeEngineVersions(path: "/#X-Amz-Target=AmazonMemoryDB.DescribeEngineVersions")
    }

    public struct XAmzTargetAmazonMemoryDBDescribeEngineVersions {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.DescribeEngineVersions`
        public let path: String

        /// Returns a list of the available Redis engine versions.
        public func post(_ body: AmazonMemoryDBAPI.DescribeEngineVersionsRequest) -> Request<AmazonMemoryDBAPI.DescribeEngineVersionsResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBDescribeEvents: XAmzTargetAmazonMemoryDBDescribeEvents {
        XAmzTargetAmazonMemoryDBDescribeEvents(path: "/#X-Amz-Target=AmazonMemoryDB.DescribeEvents")
    }

    public struct XAmzTargetAmazonMemoryDBDescribeEvents {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.DescribeEvents`
        public let path: String

        /// Returns events related to clusters, security groups, and parameter groups. You can obtain events specific to a particular cluster, security group, or parameter group by providing the name as a parameter. By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.
        public func post(_ body: AmazonMemoryDBAPI.DescribeEventsRequest) -> Request<AmazonMemoryDBAPI.DescribeEventsResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBDescribeParameterGroups: XAmzTargetAmazonMemoryDBDescribeParameterGroups {
        XAmzTargetAmazonMemoryDBDescribeParameterGroups(path: "/#X-Amz-Target=AmazonMemoryDB.DescribeParameterGroups")
    }

    public struct XAmzTargetAmazonMemoryDBDescribeParameterGroups {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.DescribeParameterGroups`
        public let path: String

        /// Returns a list of parameter group descriptions. If a parameter group name is specified, the list contains only the descriptions for that group.
        public func post(_ body: AmazonMemoryDBAPI.DescribeParameterGroupsRequest) -> Request<AmazonMemoryDBAPI.DescribeParameterGroupsResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBDescribeParameters: XAmzTargetAmazonMemoryDBDescribeParameters {
        XAmzTargetAmazonMemoryDBDescribeParameters(path: "/#X-Amz-Target=AmazonMemoryDB.DescribeParameters")
    }

    public struct XAmzTargetAmazonMemoryDBDescribeParameters {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.DescribeParameters`
        public let path: String

        /// Returns the detailed parameter list for a particular parameter group.
        public func post(_ body: AmazonMemoryDBAPI.DescribeParametersRequest) -> Request<AmazonMemoryDBAPI.DescribeParametersResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBDescribeServiceUpdates: XAmzTargetAmazonMemoryDBDescribeServiceUpdates {
        XAmzTargetAmazonMemoryDBDescribeServiceUpdates(path: "/#X-Amz-Target=AmazonMemoryDB.DescribeServiceUpdates")
    }

    public struct XAmzTargetAmazonMemoryDBDescribeServiceUpdates {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.DescribeServiceUpdates`
        public let path: String

        /// Returns details of the service updates
        public func post(_ body: AmazonMemoryDBAPI.DescribeServiceUpdatesRequest) -> Request<AmazonMemoryDBAPI.DescribeServiceUpdatesResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBDescribeSnapshots: XAmzTargetAmazonMemoryDBDescribeSnapshots {
        XAmzTargetAmazonMemoryDBDescribeSnapshots(path: "/#X-Amz-Target=AmazonMemoryDB.DescribeSnapshots")
    }

    public struct XAmzTargetAmazonMemoryDBDescribeSnapshots {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.DescribeSnapshots`
        public let path: String

        /// Returns information about cluster snapshots. By default, DescribeSnapshots lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cluster.
        public func post(_ body: AmazonMemoryDBAPI.DescribeSnapshotsRequest) -> Request<AmazonMemoryDBAPI.DescribeSnapshotsResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBDescribeSubnetGroups: XAmzTargetAmazonMemoryDBDescribeSubnetGroups {
        XAmzTargetAmazonMemoryDBDescribeSubnetGroups(path: "/#X-Amz-Target=AmazonMemoryDB.DescribeSubnetGroups")
    }

    public struct XAmzTargetAmazonMemoryDBDescribeSubnetGroups {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.DescribeSubnetGroups`
        public let path: String

        /// Returns a list of subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group.
        public func post(_ body: AmazonMemoryDBAPI.DescribeSubnetGroupsRequest) -> Request<AmazonMemoryDBAPI.DescribeSubnetGroupsResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBDescribeUsers: XAmzTargetAmazonMemoryDBDescribeUsers {
        XAmzTargetAmazonMemoryDBDescribeUsers(path: "/#X-Amz-Target=AmazonMemoryDB.DescribeUsers")
    }

    public struct XAmzTargetAmazonMemoryDBDescribeUsers {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.DescribeUsers`
        public let path: String

        /// Returns a list of users.
        public func post(_ body: AmazonMemoryDBAPI.DescribeUsersRequest) -> Request<AmazonMemoryDBAPI.DescribeUsersResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBFailoverShard: XAmzTargetAmazonMemoryDBFailoverShard {
        XAmzTargetAmazonMemoryDBFailoverShard(path: "/#X-Amz-Target=AmazonMemoryDB.FailoverShard")
    }

    public struct XAmzTargetAmazonMemoryDBFailoverShard {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.FailoverShard`
        public let path: String

        /// Used to failover a shard
        public func post(_ body: AmazonMemoryDBAPI.FailoverShardRequest) -> Request<AmazonMemoryDBAPI.FailoverShardResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBListAllowedNodeTypeUpdates: XAmzTargetAmazonMemoryDBListAllowedNodeTypeUpdates {
        XAmzTargetAmazonMemoryDBListAllowedNodeTypeUpdates(path: "/#X-Amz-Target=AmazonMemoryDB.ListAllowedNodeTypeUpdates")
    }

    public struct XAmzTargetAmazonMemoryDBListAllowedNodeTypeUpdates {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.ListAllowedNodeTypeUpdates`
        public let path: String

        /// Lists all available node types that you can scale to from your cluster's current node type. When you use the UpdateCluster operation to scale your cluster, the value of the NodeType parameter must be one of the node types returned by this operation.
        public func post(_ body: AmazonMemoryDBAPI.ListAllowedNodeTypeUpdatesRequest) -> Request<AmazonMemoryDBAPI.ListAllowedNodeTypeUpdatesResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBListTags: XAmzTargetAmazonMemoryDBListTags {
        XAmzTargetAmazonMemoryDBListTags(path: "/#X-Amz-Target=AmazonMemoryDB.ListTags")
    }

    public struct XAmzTargetAmazonMemoryDBListTags {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.ListTags`
        public let path: String

        /// Lists all tags currently on a named resource. A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track your MemoryDB resources. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/Tagging-Resources.html">Tagging your MemoryDB resources</a>
        public func post(_ body: AmazonMemoryDBAPI.ListTagsRequest) -> Request<AmazonMemoryDBAPI.ListTagsResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBResetParameterGroup: XAmzTargetAmazonMemoryDBResetParameterGroup {
        XAmzTargetAmazonMemoryDBResetParameterGroup(path: "/#X-Amz-Target=AmazonMemoryDB.ResetParameterGroup")
    }

    public struct XAmzTargetAmazonMemoryDBResetParameterGroup {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.ResetParameterGroup`
        public let path: String

        /// Modifies the parameters of a parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire parameter group, specify the AllParameters and ParameterGroupName parameters.
        public func post(_ body: AmazonMemoryDBAPI.ResetParameterGroupRequest) -> Request<AmazonMemoryDBAPI.ResetParameterGroupResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBTagResource: XAmzTargetAmazonMemoryDBTagResource {
        XAmzTargetAmazonMemoryDBTagResource(path: "/#X-Amz-Target=AmazonMemoryDB.TagResource")
    }

    public struct XAmzTargetAmazonMemoryDBTagResource {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.TagResource`
        public let path: String

        /// <p>A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your MemoryDB resources. When you add or remove tags on clusters, those actions will be replicated to all nodes in the cluster. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/iam.resourcelevelpermissions.html">Resource-level permissions</a>.</p> <p>For example, you can use cost-allocation tags to your MemoryDB resources, Amazon generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/tagging.html">Using Cost Allocation Tags</a>.</p>
        public func post(_ body: AmazonMemoryDBAPI.TagResourceRequest) -> Request<AmazonMemoryDBAPI.TagResourceResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBUntagResource: XAmzTargetAmazonMemoryDBUntagResource {
        XAmzTargetAmazonMemoryDBUntagResource(path: "/#X-Amz-Target=AmazonMemoryDB.UntagResource")
    }

    public struct XAmzTargetAmazonMemoryDBUntagResource {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.UntagResource`
        public let path: String

        /// Use this operation to remove tags on a resource
        public func post(_ body: AmazonMemoryDBAPI.UntagResourceRequest) -> Request<AmazonMemoryDBAPI.UntagResourceResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBUpdateACL: XAmzTargetAmazonMemoryDBUpdateACL {
        XAmzTargetAmazonMemoryDBUpdateACL(path: "/#X-Amz-Target=AmazonMemoryDB.UpdateACL")
    }

    public struct XAmzTargetAmazonMemoryDBUpdateACL {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.UpdateACL`
        public let path: String

        /// Changes the list of users that belong to the Access Control List.
        public func post(_ body: AmazonMemoryDBAPI.UpdateACLRequest) -> Request<AmazonMemoryDBAPI.UpdateACLResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBUpdateCluster: XAmzTargetAmazonMemoryDBUpdateCluster {
        XAmzTargetAmazonMemoryDBUpdateCluster(path: "/#X-Amz-Target=AmazonMemoryDB.UpdateCluster")
    }

    public struct XAmzTargetAmazonMemoryDBUpdateCluster {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.UpdateCluster`
        public let path: String

        /// Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration settings by specifying the settings and the new values.
        public func post(_ body: AmazonMemoryDBAPI.UpdateClusterRequest) -> Request<AmazonMemoryDBAPI.UpdateClusterResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBUpdateParameterGroup: XAmzTargetAmazonMemoryDBUpdateParameterGroup {
        XAmzTargetAmazonMemoryDBUpdateParameterGroup(path: "/#X-Amz-Target=AmazonMemoryDB.UpdateParameterGroup")
    }

    public struct XAmzTargetAmazonMemoryDBUpdateParameterGroup {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.UpdateParameterGroup`
        public let path: String

        /// Updates the parameters of a parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
        public func post(_ body: AmazonMemoryDBAPI.UpdateParameterGroupRequest) -> Request<AmazonMemoryDBAPI.UpdateParameterGroupResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBUpdateSubnetGroup: XAmzTargetAmazonMemoryDBUpdateSubnetGroup {
        XAmzTargetAmazonMemoryDBUpdateSubnetGroup(path: "/#X-Amz-Target=AmazonMemoryDB.UpdateSubnetGroup")
    }

    public struct XAmzTargetAmazonMemoryDBUpdateSubnetGroup {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.UpdateSubnetGroup`
        public let path: String

        /// Updates a subnet group. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/ubnetGroups.Modifying.html">Updating a subnet group</a>
        public func post(_ body: AmazonMemoryDBAPI.UpdateSubnetGroupRequest) -> Request<AmazonMemoryDBAPI.UpdateSubnetGroupResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xAmzTargetAmazonMemoryDBUpdateUser: XAmzTargetAmazonMemoryDBUpdateUser {
        XAmzTargetAmazonMemoryDBUpdateUser(path: "/#X-Amz-Target=AmazonMemoryDB.UpdateUser")
    }

    public struct XAmzTargetAmazonMemoryDBUpdateUser {
        /// Path: `/#X-Amz-Target=AmazonMemoryDB.UpdateUser`
        public let path: String

        /// Changes user password(s) and/or access string.
        public func post(_ body: AmazonMemoryDBAPI.UpdateUserRequest) -> Request<AmazonMemoryDBAPI.UpdateUserResponse> {
            .post(path, body: body)
        }
    }
}

public enum Paths {}
