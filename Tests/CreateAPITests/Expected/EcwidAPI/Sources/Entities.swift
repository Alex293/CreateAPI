// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation

public struct AdditionalInfo: Codable {
    public var googleCustomerID: String?

    public init(googleCustomerID: String? = nil) {
        self.googleCustomerID = googleCustomerID
    }

    private enum CodingKeys: String, CodingKey {
        case googleCustomerID = "google_customer_id"
    }
}

public struct Attribute: Codable {
    public var id: Int?
    public var internalName: String?
    public var name: String?
    public var value: String?

    public init(id: Int? = nil, internalName: String? = nil, name: String? = nil, value: String? = nil) {
        self.id = id
        self.internalName = internalName
        self.name = name
        self.value = value
    }
}

public struct BorderInfo: Codable {
    public var dominatingColor: DominatingColor?
    public var isHomogeneity: Bool?

    public init(dominatingColor: DominatingColor? = nil, isHomogeneity: Bool? = nil) {
        self.dominatingColor = dominatingColor
        self.isHomogeneity = isHomogeneity
    }

    private enum CodingKeys: String, CodingKey {
        case dominatingColor
        case isHomogeneity = "homogeneity"
    }
}

public struct BulkJobList: Codable {
    public var completionTime: Int?
    public var createdDate: Int?
    public var errorCount: Int?
    public var fileFormat: String?
    public var id: Int?
    public var instanceID: Int?
    public var jobDirection: String?
    public var jobQuery: String?
    public var jobResetAttempt: Int?
    public var jobState: String?
    public var notificationURL: String?
    public var objectName: String?
    public var recordCount: Int?
    public var status: String?

    public init(completionTime: Int? = nil, createdDate: Int? = nil, errorCount: Int? = nil, fileFormat: String? = nil, id: Int? = nil, instanceID: Int? = nil, jobDirection: String? = nil, jobQuery: String? = nil, jobResetAttempt: Int? = nil, jobState: String? = nil, notificationURL: String? = nil, objectName: String? = nil, recordCount: Int? = nil, status: String? = nil) {
        self.completionTime = completionTime
        self.createdDate = createdDate
        self.errorCount = errorCount
        self.fileFormat = fileFormat
        self.id = id
        self.instanceID = instanceID
        self.jobDirection = jobDirection
        self.jobQuery = jobQuery
        self.jobResetAttempt = jobResetAttempt
        self.jobState = jobState
        self.notificationURL = notificationURL
        self.objectName = objectName
        self.recordCount = recordCount
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case completionTime = "completion_time"
        case createdDate
        case errorCount = "error_count"
        case fileFormat
        case id
        case instanceID = "instanceId"
        case jobDirection = "job_direction"
        case jobQuery = "job_query"
        case jobResetAttempt = "job_reset_attempt"
        case jobState = "job_state"
        case notificationURL = "notification_url"
        case objectName = "object_name"
        case recordCount = "record_count"
        case status
    }
}

public struct BulkQuery: Codable {
    public var id: String?
    public var instanceID: Double?
    public var status: String?

    public init(id: String? = nil, instanceID: Double? = nil, status: String? = nil) {
        self.id = id
        self.instanceID = instanceID
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case instanceID = "instance_id"
        case status
    }
}

/// Status of the bulk upload.
public struct BulkStatus: Codable {
    /// Contact/Leads loaded
    public var batchID: Double?
    public var message: String?
    /// Contact/Leads loaded
    public var numOfLeadsProcessed: Double?
    /// Failed count
    public var numOfRowsFailed: Double?
    /// Contact/Leads that had warnings
    public var numOfRowsWithWarning: Double?
    /// Status of the bulk job
    public var status: String?

    public init(batchID: Double? = nil, message: String? = nil, numOfLeadsProcessed: Double? = nil, numOfRowsFailed: Double? = nil, numOfRowsWithWarning: Double? = nil, status: String? = nil) {
        self.batchID = batchID
        self.message = message
        self.numOfLeadsProcessed = numOfLeadsProcessed
        self.numOfRowsFailed = numOfRowsFailed
        self.numOfRowsWithWarning = numOfRowsWithWarning
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case batchID = "batchId"
        case message
        case numOfLeadsProcessed
        case numOfRowsFailed
        case numOfRowsWithWarning
        case status
    }
}

/// BulkLoad response of bulk download.
public struct BulkUploadResponse: Codable {
    /// Id of the bulk job
    public var id: String?
    /// Instance Id of the bulk job
    public var instanceID: Int?
    /// Status of the bulk job
    public var status: String?

    public init(id: String? = nil, instanceID: Int? = nil, status: String? = nil) {
        self.id = id
        self.instanceID = instanceID
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case instanceID = "instanceId"
        case status
    }
}

public struct Category: Codable {
    /// True/false
    public var isDefaultCategory: Bool?
    public var description: String?
    /// True if the category is enabled, false otherwise
    public var isEnabled: Bool?
    public var id: Int?
    public var name: String?
    public var originalImageURL: String?
    public var productCount: Int?
    public var thumbnailURL: String?
    public var url: String?

    public init(isDefaultCategory: Bool? = nil, description: String? = nil, isEnabled: Bool? = nil, id: Int? = nil, name: String? = nil, originalImageURL: String? = nil, productCount: Int? = nil, thumbnailURL: String? = nil, url: String? = nil) {
        self.isDefaultCategory = isDefaultCategory
        self.description = description
        self.isEnabled = isEnabled
        self.id = id
        self.name = name
        self.originalImageURL = originalImageURL
        self.productCount = productCount
        self.thumbnailURL = thumbnailURL
        self.url = url
    }

    private enum CodingKeys: String, CodingKey {
        case isDefaultCategory = "defaultCategory"
        case description
        case isEnabled = "enabled"
        case id
        case name
        case originalImageURL = "originalImageUrl"
        case productCount
        case thumbnailURL = "thumbnailUrl"
        case url
    }
}

public struct Choice: Codable {
    public var priceModifier: Double?
    /// PERCENT, ABSOLUTE
    public var priceModifierType: String?
    public var text: String?

    public init(priceModifier: Double? = nil, priceModifierType: String? = nil, text: String? = nil) {
        self.priceModifier = priceModifier
        self.priceModifierType = priceModifierType
        self.text = text
    }
}

public struct Combination: Codable {
    public var attributes: [Attribute]?
    public var combinationNumber: Double?
    public var compareToPrice: Double?
    public var id: Double?
    public var price: Double?
    public var quantity: Double?
    public var sku: String?
    public var isUnlimited: Bool?
    public var warningLimit: Double?
    public var weight: Double?

    public init(attributes: [Attribute]? = nil, combinationNumber: Double? = nil, compareToPrice: Double? = nil, id: Double? = nil, price: Double? = nil, quantity: Double? = nil, sku: String? = nil, isUnlimited: Bool? = nil, warningLimit: Double? = nil, weight: Double? = nil) {
        self.attributes = attributes
        self.combinationNumber = combinationNumber
        self.compareToPrice = compareToPrice
        self.id = id
        self.price = price
        self.quantity = quantity
        self.sku = sku
        self.isUnlimited = isUnlimited
        self.warningLimit = warningLimit
        self.weight = weight
    }

    private enum CodingKeys: String, CodingKey {
        case attributes
        case combinationNumber
        case compareToPrice
        case id
        case price
        case quantity
        case sku
        case isUnlimited = "unlimited"
        case warningLimit
        case weight
    }
}

public struct Customer: Codable {
    public var billingPerson: Person?
    public var customerGroupID: Int?
    public var customerGroupName: String?
    /// Customer email
    public var email: String?
    /// Unique internal customer ID
    public var id: Int?
    /// Customer Name
    public var name: String?
    /// Ex: 2015-02-03 15:30:08
    public var registered: String?
    public var shippingAddresses: [Person]?
    public var isTaxExempt: Bool?
    public var taxID: Double?
    public var isTaxIDValid: Bool?
    public var totalOrderCount: Double?
    /// Ex: 2015-02-03 15:30:08
    public var updated: String?

    public init(billingPerson: Person? = nil, customerGroupID: Int? = nil, customerGroupName: String? = nil, email: String? = nil, id: Int? = nil, name: String? = nil, registered: String? = nil, shippingAddresses: [Person]? = nil, isTaxExempt: Bool? = nil, taxID: Double? = nil, isTaxIDValid: Bool? = nil, totalOrderCount: Double? = nil, updated: String? = nil) {
        self.billingPerson = billingPerson
        self.customerGroupID = customerGroupID
        self.customerGroupName = customerGroupName
        self.email = email
        self.id = id
        self.name = name
        self.registered = registered
        self.shippingAddresses = shippingAddresses
        self.isTaxExempt = isTaxExempt
        self.taxID = taxID
        self.isTaxIDValid = isTaxIDValid
        self.totalOrderCount = totalOrderCount
        self.updated = updated
    }

    private enum CodingKeys: String, CodingKey {
        case billingPerson
        case customerGroupID = "customerGroupId"
        case customerGroupName
        case email
        case id
        case name
        case registered
        case shippingAddresses
        case isTaxExempt = "taxExempt"
        case taxID = "taxId"
        case isTaxIDValid = "taxIdValid"
        case totalOrderCount
        case updated
    }
}

public struct CustomerPatch: Codable {
    public var billingPerson: Person?
    public var customerGroupID: Int?
    /// Customer email
    public var email: String?
    /// Customer password
    public var password: String?
    public var shippingAddresses: [Person]?
    public var isTaxExempt: Bool?
    public var taxID: Double?
    public var isTaxIDValid: Bool?

    public init(billingPerson: Person? = nil, customerGroupID: Int? = nil, email: String? = nil, password: String? = nil, shippingAddresses: [Person]? = nil, isTaxExempt: Bool? = nil, taxID: Double? = nil, isTaxIDValid: Bool? = nil) {
        self.billingPerson = billingPerson
        self.customerGroupID = customerGroupID
        self.email = email
        self.password = password
        self.shippingAddresses = shippingAddresses
        self.isTaxExempt = isTaxExempt
        self.taxID = taxID
        self.isTaxIDValid = isTaxIDValid
    }

    private enum CodingKeys: String, CodingKey {
        case billingPerson
        case customerGroupID = "customerGroupId"
        case email
        case password
        case shippingAddresses
        case isTaxExempt = "taxExempt"
        case taxID = "taxId"
        case isTaxIDValid = "taxIdValid"
    }
}

public struct CustomerPost: Codable {
    public var billingPerson: Person?
    public var customerGroupID: Int?
    /// Customer email
    public var email: String
    /// Customer password
    public var password: String?
    public var shippingAddresses: [Person]?
    public var isTaxExempt: Bool?
    public var taxID: Double?
    public var isTaxIDValid: Bool?

    public init(billingPerson: Person? = nil, customerGroupID: Int? = nil, email: String, password: String? = nil, shippingAddresses: [Person]? = nil, isTaxExempt: Bool? = nil, taxID: Double? = nil, isTaxIDValid: Bool? = nil) {
        self.billingPerson = billingPerson
        self.customerGroupID = customerGroupID
        self.email = email
        self.password = password
        self.shippingAddresses = shippingAddresses
        self.isTaxExempt = isTaxExempt
        self.taxID = taxID
        self.isTaxIDValid = isTaxIDValid
    }

    private enum CodingKeys: String, CodingKey {
        case billingPerson
        case customerGroupID = "customerGroupId"
        case email
        case password
        case shippingAddresses
        case isTaxExempt = "taxExempt"
        case taxID = "taxId"
        case isTaxIDValid = "taxIdValid"
    }
}

public struct DominatingColor: Codable {
    public var alpha: Double?
    public var blue: Double?
    public var green: Double?
    public var red: Double?

    public init(alpha: Double? = nil, blue: Double? = nil, green: Double? = nil, red: Double? = nil) {
        self.alpha = alpha
        self.blue = blue
        self.green = green
        self.red = red
    }
}

public struct Favorite: Codable {
    public var count: Int?
    public var displayedCount: String?

    public init(count: Int? = nil, displayedCount: String? = nil) {
        self.count = count
        self.displayedCount = displayedCount
    }
}

public struct File: Codable {
    public var adminURL: String?
    public var description: String?
    public var id: Double?
    public var name: String?
    public var size: Double?

    public init(adminURL: String? = nil, description: String? = nil, id: Double? = nil, name: String? = nil, size: Double? = nil) {
        self.adminURL = adminURL
        self.description = description
        self.id = id
        self.name = name
        self.size = size
    }

    private enum CodingKeys: String, CodingKey {
        case adminURL = "adminUrl"
        case description
        case id
        case name
        case size
    }
}

public struct GalleryImage: Codable {
    public var alt: String?
    public var height: Int?
    public var thumbnail: String?
    public var url: String?
    public var width: Int?

    public init(alt: String? = nil, height: Int? = nil, thumbnail: String? = nil, url: String? = nil, width: Int? = nil) {
        self.alt = alt
        self.height = height
        self.thumbnail = thumbnail
        self.url = url
        self.width = width
    }
}

public struct HandlingFee: Codable {
    public var description: String?
    public var name: String?
    public var value: Double?

    public init(description: String? = nil, name: String? = nil, value: Double? = nil) {
        self.description = description
        self.name = name
        self.value = value
    }
}

public struct Image: Codable {
    public var id: String?
    public var image1500pxURL: String?
    public var image160pxURL: String?
    public var image400pxURL: String?
    public var image800pxURL: String?
    public var imageOriginalURL: String?
    public var isMain: Bool?
    public var orderBy: Double?

    public init(id: String? = nil, image1500pxURL: String? = nil, image160pxURL: String? = nil, image400pxURL: String? = nil, image800pxURL: String? = nil, imageOriginalURL: String? = nil, isMain: Bool? = nil, orderBy: Double? = nil) {
        self.id = id
        self.image1500pxURL = image1500pxURL
        self.image160pxURL = image160pxURL
        self.image400pxURL = image400pxURL
        self.image800pxURL = image800pxURL
        self.imageOriginalURL = imageOriginalURL
        self.isMain = isMain
        self.orderBy = orderBy
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case image1500pxURL = "image1500pxUrl"
        case image160pxURL = "image160pxUrl"
        case image400pxURL = "image400pxUrl"
        case image800pxURL = "image800pxUrl"
        case imageOriginalURL = "imageOriginalUrl"
        case isMain
        case orderBy
    }
}

public struct Item: Codable {
    public var categoryID: Int?
    /// True/false. shows whether a discount coupon is applied for this item
    public var isCouponApplied: Bool?
    /// True/false. shows whether the item has downloadable files attached
    public var isDigital: Bool?
    public var fixedShippingRate: Double?
    /// True/false. shows whether the fixed shipping rate is set for the product
    public var isFixedShippingRateOnly: Bool?
    public var hdThumbnailURL: String?
    public var id: Int?
    public var imageURL: String?
    /// True/false. shows whether the item requires shipping
    public var isShippingRequired: Bool?
    public var name: String?
    public var price: Double?
    /// True/false. shows whether product is available or not
    public var isProductAvailable: Bool?
    public var productID: Int?
    public var productPrice: Double?
    public var quantity: Int?
    public var quantityInStock: Double?
    public var shipping: Double?
    public var sku: String?
    public var smallThumbnailURL: String?
    public var tax: Double?
    public var taxes: [Tax]?
    /// True/false. shows whether the store admin set to track the quantity of this product and get low stock notifications
    public var isTrackQuantity: Bool?
    public var weight: Double?

    public init(categoryID: Int? = nil, isCouponApplied: Bool? = nil, isDigital: Bool? = nil, fixedShippingRate: Double? = nil, isFixedShippingRateOnly: Bool? = nil, hdThumbnailURL: String? = nil, id: Int? = nil, imageURL: String? = nil, isShippingRequired: Bool? = nil, name: String? = nil, price: Double? = nil, isProductAvailable: Bool? = nil, productID: Int? = nil, productPrice: Double? = nil, quantity: Int? = nil, quantityInStock: Double? = nil, shipping: Double? = nil, sku: String? = nil, smallThumbnailURL: String? = nil, tax: Double? = nil, taxes: [Tax]? = nil, isTrackQuantity: Bool? = nil, weight: Double? = nil) {
        self.categoryID = categoryID
        self.isCouponApplied = isCouponApplied
        self.isDigital = isDigital
        self.fixedShippingRate = fixedShippingRate
        self.isFixedShippingRateOnly = isFixedShippingRateOnly
        self.hdThumbnailURL = hdThumbnailURL
        self.id = id
        self.imageURL = imageURL
        self.isShippingRequired = isShippingRequired
        self.name = name
        self.price = price
        self.isProductAvailable = isProductAvailable
        self.productID = productID
        self.productPrice = productPrice
        self.quantity = quantity
        self.quantityInStock = quantityInStock
        self.shipping = shipping
        self.sku = sku
        self.smallThumbnailURL = smallThumbnailURL
        self.tax = tax
        self.taxes = taxes
        self.isTrackQuantity = isTrackQuantity
        self.weight = weight
    }

    private enum CodingKeys: String, CodingKey {
        case categoryID = "categoryId"
        case isCouponApplied = "couponApplied"
        case isDigital = "digital"
        case fixedShippingRate
        case isFixedShippingRateOnly = "fixedShippingRateOnly"
        case hdThumbnailURL = "hdThumbnailUrl"
        case id
        case imageURL = "imageUrl"
        case isShippingRequired
        case name
        case price
        case isProductAvailable = "productAvailable"
        case productID = "productId"
        case productPrice
        case quantity
        case quantityInStock
        case shipping
        case sku
        case smallThumbnailURL = "smallThumbnailUrl"
        case tax
        case taxes
        case isTrackQuantity = "trackQuantity"
        case weight
    }
}

public struct Media: Codable {
    public var images: [Image]?

    public init(images: [Image]? = nil) {
        self.images = images
    }
}

/// Fields for the object. There will be fields associated with an Object, which are not all described here.
public struct Object: Codable {
    public var objectField: String?

    public init(objectField: String? = nil) {
        self.objectField = objectField
    }
}

public struct Option: Codable {
    public var choices: [Choice]?
    public var defaultChoice: Int?
    public var name: String
    /// True/false
    public var isRequired: Bool
    public var type: String

    public init(choices: [Choice]? = nil, defaultChoice: Int? = nil, name: String, isRequired: Bool, type: String) {
        self.choices = choices
        self.defaultChoice = defaultChoice
        self.name = name
        self.isRequired = isRequired
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case choices
        case defaultChoice
        case name
        case isRequired = "required"
        case type
    }
}

public struct Order: Codable {
    public var additionalInfo: AdditionalInfo?
    public var billingPerson: Person?
    public var couponDiscount: Double?
    /// Ex: 2015-02-02 16:11:52 +0000
    public var createDate: String?
    public var createTimestamp: Double?
    public var customerID: Double?
    public var isCustomerTaxExempt: Bool?
    public var customerTaxID: Int?
    public var isCustomerTaxIDValid: Bool?
    public var discount: Double?
    public var email: String?
    /// AWAITING_PROCESSING, PROCESSING, SHIPPED, DELIVERED, WILL_NOT_DELIVER, RETURNED, READY_FOR_PICKUP
    public var fulfillmentStatus: String?
    public var globalReferer: String?
    public var handlingFee: HandlingFee?
    public var isHidden: Bool?
    public var ipAddress: String?
    public var items: [Item]?
    /// Ex: 2015-02-03 15:30:08
    public var lastChangeDate: Date?
    public var membershipBasedDiscount: Double?
    public var orderComments: String?
    /// Unique order number without prefixes/suffixes
    public var orderNumber: Int?
    public var paymentMethod: String?
    public var paymentModule: String?
    /// AWAITING_PAYMENT, PAID, CANCELLED, REFUNDED, PARTIALLY_REFUNDED, INCOMPLETE
    public var paymentStatus: String?
    public var privateAdminNotes: String?
    public var refererURL: String?
    public var refundedAmount: Double?
    public var refunds: [Refunds]?
    public var isReversedTaxApplied: Bool?
    public var isSample: Bool?
    public var shippingMethod: String?
    public var shippingOption: ShippingOption?
    public var shippingPerson: Person?
    public var subtotal: Double?
    public var tax: Double?
    public var taxesOnShipping: [Tax]?
    public var total: Double?
    public var totalAndMembershipBasedDiscount: Double?
    public var trackingNumber: String?
    /// Ex: 2015-02-03 15:30:08 +0000
    public var updateDate: String?
    public var updateTimestamp: Double?
    public var usdTotal: Double?
    public var vendorNumber: Double?
    public var vendorOrderNumber: String?
    public var volumeDiscount: Double?

    public init(additionalInfo: AdditionalInfo? = nil, billingPerson: Person? = nil, couponDiscount: Double? = nil, createDate: String? = nil, createTimestamp: Double? = nil, customerID: Double? = nil, isCustomerTaxExempt: Bool? = nil, customerTaxID: Int? = nil, isCustomerTaxIDValid: Bool? = nil, discount: Double? = nil, email: String? = nil, fulfillmentStatus: String? = nil, globalReferer: String? = nil, handlingFee: HandlingFee? = nil, isHidden: Bool? = nil, ipAddress: String? = nil, items: [Item]? = nil, lastChangeDate: Date? = nil, membershipBasedDiscount: Double? = nil, orderComments: String? = nil, orderNumber: Int? = nil, paymentMethod: String? = nil, paymentModule: String? = nil, paymentStatus: String? = nil, privateAdminNotes: String? = nil, refererURL: String? = nil, refundedAmount: Double? = nil, refunds: [Refunds]? = nil, isReversedTaxApplied: Bool? = nil, isSample: Bool? = nil, shippingMethod: String? = nil, shippingOption: ShippingOption? = nil, shippingPerson: Person? = nil, subtotal: Double? = nil, tax: Double? = nil, taxesOnShipping: [Tax]? = nil, total: Double? = nil, totalAndMembershipBasedDiscount: Double? = nil, trackingNumber: String? = nil, updateDate: String? = nil, updateTimestamp: Double? = nil, usdTotal: Double? = nil, vendorNumber: Double? = nil, vendorOrderNumber: String? = nil, volumeDiscount: Double? = nil) {
        self.additionalInfo = additionalInfo
        self.billingPerson = billingPerson
        self.couponDiscount = couponDiscount
        self.createDate = createDate
        self.createTimestamp = createTimestamp
        self.customerID = customerID
        self.isCustomerTaxExempt = isCustomerTaxExempt
        self.customerTaxID = customerTaxID
        self.isCustomerTaxIDValid = isCustomerTaxIDValid
        self.discount = discount
        self.email = email
        self.fulfillmentStatus = fulfillmentStatus
        self.globalReferer = globalReferer
        self.handlingFee = handlingFee
        self.isHidden = isHidden
        self.ipAddress = ipAddress
        self.items = items
        self.lastChangeDate = lastChangeDate
        self.membershipBasedDiscount = membershipBasedDiscount
        self.orderComments = orderComments
        self.orderNumber = orderNumber
        self.paymentMethod = paymentMethod
        self.paymentModule = paymentModule
        self.paymentStatus = paymentStatus
        self.privateAdminNotes = privateAdminNotes
        self.refererURL = refererURL
        self.refundedAmount = refundedAmount
        self.refunds = refunds
        self.isReversedTaxApplied = isReversedTaxApplied
        self.isSample = isSample
        self.shippingMethod = shippingMethod
        self.shippingOption = shippingOption
        self.shippingPerson = shippingPerson
        self.subtotal = subtotal
        self.tax = tax
        self.taxesOnShipping = taxesOnShipping
        self.total = total
        self.totalAndMembershipBasedDiscount = totalAndMembershipBasedDiscount
        self.trackingNumber = trackingNumber
        self.updateDate = updateDate
        self.updateTimestamp = updateTimestamp
        self.usdTotal = usdTotal
        self.vendorNumber = vendorNumber
        self.vendorOrderNumber = vendorOrderNumber
        self.volumeDiscount = volumeDiscount
    }

    private enum CodingKeys: String, CodingKey {
        case additionalInfo
        case billingPerson
        case couponDiscount
        case createDate
        case createTimestamp
        case customerID = "customerId"
        case isCustomerTaxExempt = "customerTaxExempt"
        case customerTaxID = "customerTaxId"
        case isCustomerTaxIDValid = "customerTaxIdValid"
        case discount
        case email
        case fulfillmentStatus
        case globalReferer
        case handlingFee
        case isHidden = "hidden"
        case ipAddress
        case items
        case lastChangeDate
        case membershipBasedDiscount
        case orderComments
        case orderNumber
        case paymentMethod
        case paymentModule
        case paymentStatus
        case privateAdminNotes
        case refererURL = "refererUrl"
        case refundedAmount
        case refunds
        case isReversedTaxApplied = "reversedTaxApplied"
        case isSample = "sample"
        case shippingMethod
        case shippingOption
        case shippingPerson
        case subtotal
        case tax
        case taxesOnShipping
        case total
        case totalAndMembershipBasedDiscount
        case trackingNumber
        case updateDate
        case updateTimestamp
        case usdTotal
        case vendorNumber
        case vendorOrderNumber
        case volumeDiscount
    }
}

public struct OrderPatch: Codable {
    public var billingPerson: Person?
    public var couponDiscount: Double?
    public var customerID: Double?
    public var isCustomerTaxExempt: Bool?
    public var customerTaxID: Int?
    public var isCustomerTaxIDValid: Bool?
    public var discount: Double?
    public var email: String?
    /// AWAITING_PROCESSING, PROCESSING, SHIPPED, DELIVERED, WILL_NOT_DELIVER, RETURNED, READY_FOR_PICKUP
    public var fulfillmentStatus: String?
    public var globalReferer: String?
    public var isHidden: Bool?
    public var items: [Item]?
    public var membershipBasedDiscount: Double?
    public var orderComments: String?
    public var paymentModule: String?
    /// AWAITING_PAYMENT, PAID, CANCELLED, REFUNDED, PARTIALLY_REFUNDED, INCOMPLETE
    public var paymentStatus: String?
    public var privateAdminNotes: String?
    public var refererURL: String?
    public var isReversedTaxApplied: Bool?
    public var isSample: Bool?
    public var shippingMethod: String?
    public var shippingOption: ShippingOption?
    public var shippingPerson: Person?
    public var subtotal: Double?
    public var tax: Double?
    public var taxesOnShipping: [Tax]?
    public var total: Double?
    public var totalAndMembershipBasedDiscount: Double?
    public var volumeDiscount: Double?

    public init(billingPerson: Person? = nil, couponDiscount: Double? = nil, customerID: Double? = nil, isCustomerTaxExempt: Bool? = nil, customerTaxID: Int? = nil, isCustomerTaxIDValid: Bool? = nil, discount: Double? = nil, email: String? = nil, fulfillmentStatus: String? = nil, globalReferer: String? = nil, isHidden: Bool? = nil, items: [Item]? = nil, membershipBasedDiscount: Double? = nil, orderComments: String? = nil, paymentModule: String? = nil, paymentStatus: String? = nil, privateAdminNotes: String? = nil, refererURL: String? = nil, isReversedTaxApplied: Bool? = nil, isSample: Bool? = nil, shippingMethod: String? = nil, shippingOption: ShippingOption? = nil, shippingPerson: Person? = nil, subtotal: Double? = nil, tax: Double? = nil, taxesOnShipping: [Tax]? = nil, total: Double? = nil, totalAndMembershipBasedDiscount: Double? = nil, volumeDiscount: Double? = nil) {
        self.billingPerson = billingPerson
        self.couponDiscount = couponDiscount
        self.customerID = customerID
        self.isCustomerTaxExempt = isCustomerTaxExempt
        self.customerTaxID = customerTaxID
        self.isCustomerTaxIDValid = isCustomerTaxIDValid
        self.discount = discount
        self.email = email
        self.fulfillmentStatus = fulfillmentStatus
        self.globalReferer = globalReferer
        self.isHidden = isHidden
        self.items = items
        self.membershipBasedDiscount = membershipBasedDiscount
        self.orderComments = orderComments
        self.paymentModule = paymentModule
        self.paymentStatus = paymentStatus
        self.privateAdminNotes = privateAdminNotes
        self.refererURL = refererURL
        self.isReversedTaxApplied = isReversedTaxApplied
        self.isSample = isSample
        self.shippingMethod = shippingMethod
        self.shippingOption = shippingOption
        self.shippingPerson = shippingPerson
        self.subtotal = subtotal
        self.tax = tax
        self.taxesOnShipping = taxesOnShipping
        self.total = total
        self.totalAndMembershipBasedDiscount = totalAndMembershipBasedDiscount
        self.volumeDiscount = volumeDiscount
    }

    private enum CodingKeys: String, CodingKey {
        case billingPerson
        case couponDiscount
        case customerID = "customerId"
        case isCustomerTaxExempt = "customerTaxExempt"
        case customerTaxID = "customerTaxId"
        case isCustomerTaxIDValid = "customerTaxIdValid"
        case discount
        case email
        case fulfillmentStatus
        case globalReferer
        case isHidden = "hidden"
        case items
        case membershipBasedDiscount
        case orderComments
        case paymentModule
        case paymentStatus
        case privateAdminNotes
        case refererURL = "refererUrl"
        case isReversedTaxApplied = "reversedTaxApplied"
        case isSample = "sample"
        case shippingMethod
        case shippingOption
        case shippingPerson
        case subtotal
        case tax
        case taxesOnShipping
        case total
        case totalAndMembershipBasedDiscount
        case volumeDiscount
    }
}

public struct OrderPost: Codable {
    public var billingPerson: Person?
    public var couponDiscount: Double?
    public var customerID: Double?
    public var isCustomerTaxExempt: Bool?
    public var customerTaxID: Int?
    public var isCustomerTaxIDValid: Bool?
    public var discount: Double?
    public var email: String?
    /// AWAITING_PROCESSING, PROCESSING, SHIPPED, DELIVERED, WILL_NOT_DELIVER, RETURNED, READY_FOR_PICKUP
    public var fulfillmentStatus: String
    public var globalReferer: String?
    public var isHidden: Bool?
    public var items: [Item]?
    public var membershipBasedDiscount: Double?
    public var orderComments: String?
    public var paymentMethod: String?
    public var paymentModule: String?
    /// AWAITING_PAYMENT, PAID, CANCELLED, REFUNDED, PARTIALLY_REFUNDED, INCOMPLETE
    public var paymentStatus: String
    public var privateAdminNotes: String?
    public var refererURL: String?
    public var isReversedTaxApplied: Bool?
    public var isSample: Bool?
    public var shippingMethod: String?
    public var shippingOption: ShippingOption?
    public var shippingPerson: Person?
    public var subtotal: Double?
    public var tax: Double?
    public var total: Double?
    public var totalAndMembershipBasedDiscount: Double?
    public var volumeDiscount: Double?

    public init(billingPerson: Person? = nil, couponDiscount: Double? = nil, customerID: Double? = nil, isCustomerTaxExempt: Bool? = nil, customerTaxID: Int? = nil, isCustomerTaxIDValid: Bool? = nil, discount: Double? = nil, email: String? = nil, fulfillmentStatus: String, globalReferer: String? = nil, isHidden: Bool? = nil, items: [Item]? = nil, membershipBasedDiscount: Double? = nil, orderComments: String? = nil, paymentMethod: String? = nil, paymentModule: String? = nil, paymentStatus: String, privateAdminNotes: String? = nil, refererURL: String? = nil, isReversedTaxApplied: Bool? = nil, isSample: Bool? = nil, shippingMethod: String? = nil, shippingOption: ShippingOption? = nil, shippingPerson: Person? = nil, subtotal: Double? = nil, tax: Double? = nil, total: Double? = nil, totalAndMembershipBasedDiscount: Double? = nil, volumeDiscount: Double? = nil) {
        self.billingPerson = billingPerson
        self.couponDiscount = couponDiscount
        self.customerID = customerID
        self.isCustomerTaxExempt = isCustomerTaxExempt
        self.customerTaxID = customerTaxID
        self.isCustomerTaxIDValid = isCustomerTaxIDValid
        self.discount = discount
        self.email = email
        self.fulfillmentStatus = fulfillmentStatus
        self.globalReferer = globalReferer
        self.isHidden = isHidden
        self.items = items
        self.membershipBasedDiscount = membershipBasedDiscount
        self.orderComments = orderComments
        self.paymentMethod = paymentMethod
        self.paymentModule = paymentModule
        self.paymentStatus = paymentStatus
        self.privateAdminNotes = privateAdminNotes
        self.refererURL = refererURL
        self.isReversedTaxApplied = isReversedTaxApplied
        self.isSample = isSample
        self.shippingMethod = shippingMethod
        self.shippingOption = shippingOption
        self.shippingPerson = shippingPerson
        self.subtotal = subtotal
        self.tax = tax
        self.total = total
        self.totalAndMembershipBasedDiscount = totalAndMembershipBasedDiscount
        self.volumeDiscount = volumeDiscount
    }

    private enum CodingKeys: String, CodingKey {
        case billingPerson
        case couponDiscount
        case customerID = "customerId"
        case isCustomerTaxExempt = "customerTaxExempt"
        case customerTaxID = "customerTaxId"
        case isCustomerTaxIDValid = "customerTaxIdValid"
        case discount
        case email
        case fulfillmentStatus
        case globalReferer
        case isHidden = "hidden"
        case items
        case membershipBasedDiscount
        case orderComments
        case paymentMethod
        case paymentModule
        case paymentStatus
        case privateAdminNotes
        case refererURL = "refererUrl"
        case isReversedTaxApplied = "reversedTaxApplied"
        case isSample = "sample"
        case shippingMethod
        case shippingOption
        case shippingPerson
        case subtotal
        case tax
        case total
        case totalAndMembershipBasedDiscount
        case volumeDiscount
    }
}

public struct Payment: Codable {
    public var paymentMethod: String?
    /// AWAITING_PAYMENT, PAID, CANCELLED, REFUNDED, PARTIALLY_REFUNDED, INCOMPLETE
    public var paymentStatus: String?

    public init(paymentMethod: String? = nil, paymentStatus: String? = nil) {
        self.paymentMethod = paymentMethod
        self.paymentStatus = paymentStatus
    }
}

public struct Person: Codable {
    public var city: String?
    public var companyName: String?
    public var countryCode: String?
    public var countryName: String?
    public var name: String?
    public var phone: String?
    public var postalCode: String?
    public var stateName: String?
    public var stateOrProvinceCode: String?
    public var stateOrProvinceName: String?
    public var street: String?

    public init(city: String? = nil, companyName: String? = nil, countryCode: String? = nil, countryName: String? = nil, name: String? = nil, phone: String? = nil, postalCode: String? = nil, stateName: String? = nil, stateOrProvinceCode: String? = nil, stateOrProvinceName: String? = nil, street: String? = nil) {
        self.city = city
        self.companyName = companyName
        self.countryCode = countryCode
        self.countryName = countryName
        self.name = name
        self.phone = phone
        self.postalCode = postalCode
        self.stateName = stateName
        self.stateOrProvinceCode = stateOrProvinceCode
        self.stateOrProvinceName = stateOrProvinceName
        self.street = street
    }
}

public struct Pong: Codable {
    public var dateTime: Date?
    public var endpoint: String?
    public var isValid: Bool?

    public init(dateTime: Date? = nil, endpoint: String? = nil, isValid: Bool? = nil) {
        self.dateTime = dateTime
        self.endpoint = endpoint
        self.isValid = isValid
    }

    private enum CodingKeys: String, CodingKey {
        case dateTime
        case endpoint
        case isValid = "valid"
    }
}

public struct Product: Codable {
    public var attributes: [Attribute]?
    public var borderInfo: BorderInfo?
    public var categories: [Category]?
    public var categoryIDs: [Int]?
    public var combinations: [Combination]?
    /// Productâ€™s sale price displayed strike-out in the customer
    public var compareAtPrice: Double?
    public var compareToPrice: Double?
    public var compareToPriceDiscount: Double?
    public var compareToPriceDiscountFormatted: String?
    public var compareToPriceDiscountPercent: Double?
    public var compareToPriceDiscountPercentFormatted: String?
    public var compareToPriceFormatted: String?
    public var createTimestamp: Int?
    /// Ex: 2014-09-24 06:43:06
    public var created: String?
    public var defaultCategoryID: Int?
    public var defaultCombinationID: Double?
    public var defaultDisplayedPrice: Double?
    public var defaultDisplayedPriceFormatted: String?
    /// Product description in HTML
    public var description: String?
    public var isDescriptionTruncated: Bool?
    public var dimensions: ProductDimensions?
    /// True/false
    public var isEnabled: Bool?
    public var favorites: Favorite?
    public var files: [File]?
    public var fixedShippingRate: Double?
    /// True/false
    public var isFixedShippingRateOnly: Bool?
    public var galleryImages: [GalleryImage]?
    /// Google Item Condition Status
    public var googleItemCondition: String?
    public var hdThumbnailURL: String?
    public var id: Int?
    public var imageURL: String?
    /// True/false
    public var isInStock: Bool?
    public var isSampleProduct: Bool?
    public var isShippingRequired: Bool?
    public var media: Media?
    /// Product title
    public var name: String?
    public var options: [Option]?
    public var originalImage: GalleryImage?
    public var originalImageURL: String?
    /// Base Product price
    public var price: Double?
    public var priceInProductList: Double?
    /// Id of the product type that this product belongs to.
    public var productClassID: Int?
    /// Amount of product items in stock.
    public var quantity: Int?
    public var quantityDelta: Int?
    public var relatedProducts: RelatedProducts?
    public var seoDescription: String?
    public var seoTitle: String?
    public var shipping: Shipping?
    public var showOnFrontpage: Double?
    /// Product SKU
    public var sku: String?
    public var smallThumbnailURL: String?
    /// True/false
    public var tangible: String?
    public var tax: ProductTax?
    public var taxes: [Tax]?
    public var thumbnailURL: String?
    /// True/false
    public var trackQuantity: String?
    public var isUnlimited: Bool?
    public var updateTimestamp: Int?
    /// Ex: 2015-02-03 15:30:46
    public var updated: String?
    public var url: String?
    public var warningLimit: Int?
    /// Product weight in the units defined in store settings
    public var weight: Double?
    public var wholesalePrices: WholesalePrices?

    public init(attributes: [Attribute]? = nil, borderInfo: BorderInfo? = nil, categories: [Category]? = nil, categoryIDs: [Int]? = nil, combinations: [Combination]? = nil, compareAtPrice: Double? = nil, compareToPrice: Double? = nil, compareToPriceDiscount: Double? = nil, compareToPriceDiscountFormatted: String? = nil, compareToPriceDiscountPercent: Double? = nil, compareToPriceDiscountPercentFormatted: String? = nil, compareToPriceFormatted: String? = nil, createTimestamp: Int? = nil, created: String? = nil, defaultCategoryID: Int? = nil, defaultCombinationID: Double? = nil, defaultDisplayedPrice: Double? = nil, defaultDisplayedPriceFormatted: String? = nil, description: String? = nil, isDescriptionTruncated: Bool? = nil, dimensions: ProductDimensions? = nil, isEnabled: Bool? = nil, favorites: Favorite? = nil, files: [File]? = nil, fixedShippingRate: Double? = nil, isFixedShippingRateOnly: Bool? = nil, galleryImages: [GalleryImage]? = nil, googleItemCondition: String? = nil, hdThumbnailURL: String? = nil, id: Int? = nil, imageURL: String? = nil, isInStock: Bool? = nil, isSampleProduct: Bool? = nil, isShippingRequired: Bool? = nil, media: Media? = nil, name: String? = nil, options: [Option]? = nil, originalImage: GalleryImage? = nil, originalImageURL: String? = nil, price: Double? = nil, priceInProductList: Double? = nil, productClassID: Int? = nil, quantity: Int? = nil, quantityDelta: Int? = nil, relatedProducts: RelatedProducts? = nil, seoDescription: String? = nil, seoTitle: String? = nil, shipping: Shipping? = nil, showOnFrontpage: Double? = nil, sku: String? = nil, smallThumbnailURL: String? = nil, tangible: String? = nil, tax: ProductTax? = nil, taxes: [Tax]? = nil, thumbnailURL: String? = nil, trackQuantity: String? = nil, isUnlimited: Bool? = nil, updateTimestamp: Int? = nil, updated: String? = nil, url: String? = nil, warningLimit: Int? = nil, weight: Double? = nil, wholesalePrices: WholesalePrices? = nil) {
        self.attributes = attributes
        self.borderInfo = borderInfo
        self.categories = categories
        self.categoryIDs = categoryIDs
        self.combinations = combinations
        self.compareAtPrice = compareAtPrice
        self.compareToPrice = compareToPrice
        self.compareToPriceDiscount = compareToPriceDiscount
        self.compareToPriceDiscountFormatted = compareToPriceDiscountFormatted
        self.compareToPriceDiscountPercent = compareToPriceDiscountPercent
        self.compareToPriceDiscountPercentFormatted = compareToPriceDiscountPercentFormatted
        self.compareToPriceFormatted = compareToPriceFormatted
        self.createTimestamp = createTimestamp
        self.created = created
        self.defaultCategoryID = defaultCategoryID
        self.defaultCombinationID = defaultCombinationID
        self.defaultDisplayedPrice = defaultDisplayedPrice
        self.defaultDisplayedPriceFormatted = defaultDisplayedPriceFormatted
        self.description = description
        self.isDescriptionTruncated = isDescriptionTruncated
        self.dimensions = dimensions
        self.isEnabled = isEnabled
        self.favorites = favorites
        self.files = files
        self.fixedShippingRate = fixedShippingRate
        self.isFixedShippingRateOnly = isFixedShippingRateOnly
        self.galleryImages = galleryImages
        self.googleItemCondition = googleItemCondition
        self.hdThumbnailURL = hdThumbnailURL
        self.id = id
        self.imageURL = imageURL
        self.isInStock = isInStock
        self.isSampleProduct = isSampleProduct
        self.isShippingRequired = isShippingRequired
        self.media = media
        self.name = name
        self.options = options
        self.originalImage = originalImage
        self.originalImageURL = originalImageURL
        self.price = price
        self.priceInProductList = priceInProductList
        self.productClassID = productClassID
        self.quantity = quantity
        self.quantityDelta = quantityDelta
        self.relatedProducts = relatedProducts
        self.seoDescription = seoDescription
        self.seoTitle = seoTitle
        self.shipping = shipping
        self.showOnFrontpage = showOnFrontpage
        self.sku = sku
        self.smallThumbnailURL = smallThumbnailURL
        self.tangible = tangible
        self.tax = tax
        self.taxes = taxes
        self.thumbnailURL = thumbnailURL
        self.trackQuantity = trackQuantity
        self.isUnlimited = isUnlimited
        self.updateTimestamp = updateTimestamp
        self.updated = updated
        self.url = url
        self.warningLimit = warningLimit
        self.weight = weight
        self.wholesalePrices = wholesalePrices
    }

    private enum CodingKeys: String, CodingKey {
        case attributes
        case borderInfo
        case categories
        case categoryIDs = "categoryIds"
        case combinations
        case compareAtPrice
        case compareToPrice
        case compareToPriceDiscount
        case compareToPriceDiscountFormatted
        case compareToPriceDiscountPercent
        case compareToPriceDiscountPercentFormatted
        case compareToPriceFormatted
        case createTimestamp
        case created
        case defaultCategoryID = "defaultCategoryId"
        case defaultCombinationID = "defaultCombinationId"
        case defaultDisplayedPrice
        case defaultDisplayedPriceFormatted
        case description
        case isDescriptionTruncated = "descriptionTruncated"
        case dimensions
        case isEnabled = "enabled"
        case favorites
        case files
        case fixedShippingRate
        case isFixedShippingRateOnly = "fixedShippingRateOnly"
        case galleryImages
        case googleItemCondition
        case hdThumbnailURL = "hdThumbnailUrl"
        case id
        case imageURL = "imageUrl"
        case isInStock = "inStock"
        case isSampleProduct
        case isShippingRequired
        case media
        case name
        case options
        case originalImage
        case originalImageURL = "originalImageUrl"
        case price
        case priceInProductList
        case productClassID = "productClassId"
        case quantity
        case quantityDelta
        case relatedProducts
        case seoDescription
        case seoTitle
        case shipping
        case showOnFrontpage
        case sku
        case smallThumbnailURL = "smallThumbnailUrl"
        case tangible
        case tax
        case taxes
        case thumbnailURL = "thumbnailUrl"
        case trackQuantity
        case isUnlimited = "unlimited"
        case updateTimestamp
        case updated
        case url
        case warningLimit
        case weight
        case wholesalePrices
    }
}

public struct ProductDimensions: Codable {
    public var height: Double?
    public var length: Double?
    public var width: Double?

    public init(height: Double? = nil, length: Double? = nil, width: Double? = nil) {
        self.height = height
        self.length = length
        self.width = width
    }
}

public struct ProductPatch: Codable {
    public var attributes: [Attribute]?
    public var categoryIDs: [Int]?
    /// Productâ€™s sale price displayed strike-out in the customer
    public var compareAtPrice: Double?
    public var compareToPrice: Double?
    public var defaultCategoryID: Int?
    /// Product description in HTML
    public var description: String?
    public var dimensions: ProductDimensions?
    /// True/false
    public var isEnabled: Bool?
    public var fixedShippingRate: Double?
    /// True/false
    public var isFixedShippingRateOnly: Bool?
    public var galleryImages: [GalleryImage]?
    /// Google Item Condition Status
    public var googleItemCondition: String?
    public var isShippingRequired: Bool?
    /// Product title
    public var name: String?
    public var options: [Option]?
    /// Base Product price
    public var price: Double?
    /// Id of the product type that this product belongs to.
    public var productClassID: Int?
    /// Amount of product items in stock.
    public var quantity: Int?
    public var relatedProducts: RelatedProducts?
    public var seoDescription: String?
    public var seoTitle: String?
    public var shipping: Shipping?
    public var showOnFrontpage: Double?
    /// Product SKU
    public var sku: String?
    public var tax: ProductTax?
    public var taxes: [Tax]?
    public var warningLimit: Int?
    /// Product weight in the units defined in store settings
    public var weight: Double?
    public var wholesalePrices: WholesalePrices?

    public init(attributes: [Attribute]? = nil, categoryIDs: [Int]? = nil, compareAtPrice: Double? = nil, compareToPrice: Double? = nil, defaultCategoryID: Int? = nil, description: String? = nil, dimensions: ProductDimensions? = nil, isEnabled: Bool? = nil, fixedShippingRate: Double? = nil, isFixedShippingRateOnly: Bool? = nil, galleryImages: [GalleryImage]? = nil, googleItemCondition: String? = nil, isShippingRequired: Bool? = nil, name: String? = nil, options: [Option]? = nil, price: Double? = nil, productClassID: Int? = nil, quantity: Int? = nil, relatedProducts: RelatedProducts? = nil, seoDescription: String? = nil, seoTitle: String? = nil, shipping: Shipping? = nil, showOnFrontpage: Double? = nil, sku: String? = nil, tax: ProductTax? = nil, taxes: [Tax]? = nil, warningLimit: Int? = nil, weight: Double? = nil, wholesalePrices: WholesalePrices? = nil) {
        self.attributes = attributes
        self.categoryIDs = categoryIDs
        self.compareAtPrice = compareAtPrice
        self.compareToPrice = compareToPrice
        self.defaultCategoryID = defaultCategoryID
        self.description = description
        self.dimensions = dimensions
        self.isEnabled = isEnabled
        self.fixedShippingRate = fixedShippingRate
        self.isFixedShippingRateOnly = isFixedShippingRateOnly
        self.galleryImages = galleryImages
        self.googleItemCondition = googleItemCondition
        self.isShippingRequired = isShippingRequired
        self.name = name
        self.options = options
        self.price = price
        self.productClassID = productClassID
        self.quantity = quantity
        self.relatedProducts = relatedProducts
        self.seoDescription = seoDescription
        self.seoTitle = seoTitle
        self.shipping = shipping
        self.showOnFrontpage = showOnFrontpage
        self.sku = sku
        self.tax = tax
        self.taxes = taxes
        self.warningLimit = warningLimit
        self.weight = weight
        self.wholesalePrices = wholesalePrices
    }

    private enum CodingKeys: String, CodingKey {
        case attributes
        case categoryIDs = "categoryIds"
        case compareAtPrice
        case compareToPrice
        case defaultCategoryID = "defaultCategoryId"
        case description
        case dimensions
        case isEnabled = "enabled"
        case fixedShippingRate
        case isFixedShippingRateOnly = "fixedShippingRateOnly"
        case galleryImages
        case googleItemCondition
        case isShippingRequired
        case name
        case options
        case price
        case productClassID = "productClassId"
        case quantity
        case relatedProducts
        case seoDescription
        case seoTitle
        case shipping
        case showOnFrontpage
        case sku
        case tax
        case taxes
        case warningLimit
        case weight
        case wholesalePrices
    }
}

public struct ProductPost: Codable {
    public var attributes: [Attribute]?
    public var categoryIDs: [Int]?
    /// Productâ€™s sale price displayed strike-out in the customer
    public var compareAtPrice: Double?
    public var compareToPrice: Double?
    public var created: Date?
    public var defaultCategoryID: Int?
    /// Product description in HTML
    public var description: String?
    public var dimensions: ProductDimensions?
    /// True/false
    public var isEnabled: Bool?
    public var favorites: Favorite?
    public var fixedShippingRate: Double?
    /// True/false
    public var isFixedShippingRateOnly: Bool?
    public var galleryImages: [GalleryImage]?
    /// Google Item Condition Status
    public var googleItemCondition: String?
    public var isShippingRequired: Bool?
    /// Product title
    public var name: String?
    public var options: [Option]?
    /// Base Product price
    public var price: Double?
    /// Id of the product type that this product belongs to.
    public var productClassID: Int?
    /// Amount of product items in stock.
    public var quantity: Int?
    public var relatedProducts: RelatedProducts?
    public var seoDescription: String?
    public var seoTitle: String?
    public var shipping: Shipping?
    public var showOnFrontpage: Double?
    /// Product SKU
    public var sku: String?
    public var tax: ProductTax?
    public var taxes: [Tax]?
    public var warningLimit: Int?
    /// Product weight in the units defined in store settings
    public var weight: Double?
    public var wholesalePrices: WholesalePrices?

    public init(attributes: [Attribute]? = nil, categoryIDs: [Int]? = nil, compareAtPrice: Double? = nil, compareToPrice: Double? = nil, created: Date? = nil, defaultCategoryID: Int? = nil, description: String? = nil, dimensions: ProductDimensions? = nil, isEnabled: Bool? = nil, favorites: Favorite? = nil, fixedShippingRate: Double? = nil, isFixedShippingRateOnly: Bool? = nil, galleryImages: [GalleryImage]? = nil, googleItemCondition: String? = nil, isShippingRequired: Bool? = nil, name: String? = nil, options: [Option]? = nil, price: Double? = nil, productClassID: Int? = nil, quantity: Int? = nil, relatedProducts: RelatedProducts? = nil, seoDescription: String? = nil, seoTitle: String? = nil, shipping: Shipping? = nil, showOnFrontpage: Double? = nil, sku: String? = nil, tax: ProductTax? = nil, taxes: [Tax]? = nil, warningLimit: Int? = nil, weight: Double? = nil, wholesalePrices: WholesalePrices? = nil) {
        self.attributes = attributes
        self.categoryIDs = categoryIDs
        self.compareAtPrice = compareAtPrice
        self.compareToPrice = compareToPrice
        self.created = created
        self.defaultCategoryID = defaultCategoryID
        self.description = description
        self.dimensions = dimensions
        self.isEnabled = isEnabled
        self.favorites = favorites
        self.fixedShippingRate = fixedShippingRate
        self.isFixedShippingRateOnly = isFixedShippingRateOnly
        self.galleryImages = galleryImages
        self.googleItemCondition = googleItemCondition
        self.isShippingRequired = isShippingRequired
        self.name = name
        self.options = options
        self.price = price
        self.productClassID = productClassID
        self.quantity = quantity
        self.relatedProducts = relatedProducts
        self.seoDescription = seoDescription
        self.seoTitle = seoTitle
        self.shipping = shipping
        self.showOnFrontpage = showOnFrontpage
        self.sku = sku
        self.tax = tax
        self.taxes = taxes
        self.warningLimit = warningLimit
        self.weight = weight
        self.wholesalePrices = wholesalePrices
    }

    private enum CodingKeys: String, CodingKey {
        case attributes
        case categoryIDs = "categoryIds"
        case compareAtPrice
        case compareToPrice
        case created
        case defaultCategoryID = "defaultCategoryId"
        case description
        case dimensions
        case isEnabled = "enabled"
        case favorites
        case fixedShippingRate
        case isFixedShippingRateOnly = "fixedShippingRateOnly"
        case galleryImages
        case googleItemCondition
        case isShippingRequired
        case name
        case options
        case price
        case productClassID = "productClassId"
        case quantity
        case relatedProducts
        case seoDescription
        case seoTitle
        case shipping
        case showOnFrontpage
        case sku
        case tax
        case taxes
        case warningLimit
        case weight
        case wholesalePrices
    }
}

public struct ProductTax: Codable {
    public var defaultLocationIncludedTaxRate: Double?
    public var enabledManualTaxes: [Int]?

    public init(defaultLocationIncludedTaxRate: Double? = nil, enabledManualTaxes: [Int]? = nil) {
        self.defaultLocationIncludedTaxRate = defaultLocationIncludedTaxRate
        self.enabledManualTaxes = enabledManualTaxes
    }
}

public struct Refunds: Codable {
    public var amount: Double?
    public var date: Date?
    public var reason: String?
    public var source: String?

    public init(amount: Double? = nil, date: Date? = nil, reason: String? = nil, source: String? = nil) {
        self.amount = amount
        self.date = date
        self.reason = reason
        self.source = source
    }
}

public struct RelatedCategory: Codable {
    public var categoryID: Double?
    public var isEnabled: Bool?
    public var productCount: Double?

    public init(categoryID: Double? = nil, isEnabled: Bool? = nil, productCount: Double? = nil) {
        self.categoryID = categoryID
        self.isEnabled = isEnabled
        self.productCount = productCount
    }

    private enum CodingKeys: String, CodingKey {
        case categoryID = "categoryId"
        case isEnabled = "enabled"
        case productCount
    }
}

public struct RelatedProducts: Codable {
    public var productIDs: [Double]?
    public var relatedCategory: RelatedCategory?

    public init(productIDs: [Double]? = nil, relatedCategory: RelatedCategory? = nil) {
        self.productIDs = productIDs
        self.relatedCategory = relatedCategory
    }

    private enum CodingKeys: String, CodingKey {
        case productIDs = "productIds"
        case relatedCategory
    }
}

public struct Shipping: Codable {
    public var disabledMethods: [String]?
    public var enabledMethods: [String]?
    public var flatRate: Double?
    public var methodMarkup: Double?
    public var type: String?

    public init(disabledMethods: [String]? = nil, enabledMethods: [String]? = nil, flatRate: Double? = nil, methodMarkup: Double? = nil, type: String? = nil) {
        self.disabledMethods = disabledMethods
        self.enabledMethods = enabledMethods
        self.flatRate = flatRate
        self.methodMarkup = methodMarkup
        self.type = type
    }
}

public struct ShippingOption: Codable {
    public var estimatedTransitTime: String?
    public var isPickup: Bool?
    public var shippingCarrierName: String?
    public var shippingMethodName: String?
    public var shippingRate: Double?

    public init(estimatedTransitTime: String? = nil, isPickup: Bool? = nil, shippingCarrierName: String? = nil, shippingMethodName: String? = nil, shippingRate: Double? = nil) {
        self.estimatedTransitTime = estimatedTransitTime
        self.isPickup = isPickup
        self.shippingCarrierName = shippingCarrierName
        self.shippingMethodName = shippingMethodName
        self.shippingRate = shippingRate
    }
}

public struct Tax: Codable {
    public var name: String?
    public var total: Double?
    public var value: Double?

    public init(name: String? = nil, total: Double? = nil, value: Double? = nil) {
        self.name = name
        self.total = total
        self.value = value
    }
}

public struct WholesalePrices: Codable {
    public var quantity: Double?

    public init(quantity: Double? = nil) {
        self.quantity = quantity
    }

    private enum CodingKeys: String, CodingKey {
        case quantity = "{quantity}"
    }
}

public struct BulkDownloadRequest: Codable {
    public var apiLimit: Int?
    public var continueFromJobID: Int?
    public var docsHubDetails: BulkDownloadRequestDocsHubDetails?
    public var filterDateField: String?
    public var isFilterNulls: Bool?
    public var format: Format
    public var from: Date?
    public var limit: Int?
    public var notificationURL: String?
    public var objectName: String
    public var pageSize: Int?
    public var query: BulkDownloadRequestQuery?
    public var selectFields: String?
    public var to: Date?
    public var `where`: String?

    public enum Format: String, Codable, CaseIterable {
        case applicationJSON = "application/json"
        case txtCsv = "txt/csv"
        case applicationJsonl = "application/jsonl"
    }

    public init(apiLimit: Int? = nil, continueFromJobID: Int? = nil, docsHubDetails: BulkDownloadRequestDocsHubDetails? = nil, filterDateField: String? = nil, isFilterNulls: Bool? = nil, format: Format, from: Date? = nil, limit: Int? = nil, notificationURL: String? = nil, objectName: String, pageSize: Int? = nil, query: BulkDownloadRequestQuery? = nil, selectFields: String? = nil, to: Date? = nil, `where`: String? = nil) {
        self.apiLimit = apiLimit
        self.continueFromJobID = continueFromJobID
        self.docsHubDetails = docsHubDetails
        self.filterDateField = filterDateField
        self.isFilterNulls = isFilterNulls
        self.format = format
        self.from = from
        self.limit = limit
        self.notificationURL = notificationURL
        self.objectName = objectName
        self.pageSize = pageSize
        self.query = query
        self.selectFields = selectFields
        self.to = to
        self.where = `where`
    }

    private enum CodingKeys: String, CodingKey {
        case apiLimit
        case continueFromJobID = "continueFromJobId"
        case docsHubDetails
        case filterDateField
        case isFilterNulls = "filterNulls"
        case format
        case from
        case limit
        case notificationURL = "notificationUrl"
        case objectName
        case pageSize
        case query
        case selectFields
        case to
        case `where` = "where"
    }
}

/// DocsHubDetails
public struct BulkDownloadRequestDocsHubDetails: Codable {
    public var instanceID: String?
    public var path: String?

    public init(instanceID: String? = nil, path: String? = nil) {
        self.instanceID = instanceID
        self.path = path
    }

    private enum CodingKeys: String, CodingKey {
        case instanceID = "instanceId"
        case path
    }
}

/// Query
public struct BulkDownloadRequestQuery: Codable {
    public var anyKey: String?

    public init(anyKey: String? = nil) {
        self.anyKey = anyKey
    }
}

public struct ObjectsMetadata: Codable {
    public var fields: [ObjectsMetadataFields]?

    public init(fields: [ObjectsMetadataFields]? = nil) {
        self.fields = fields
    }
}

public struct ObjectsMetadataFields: Codable {
    public var mask: String?
    public var type: String?
    public var vendorDisplayName: String?
    public var vendorPath: String?
    public var isVendorReadOnly: Bool?
    public var isVendorRequired: Bool?

    public init(mask: String? = nil, type: String? = nil, vendorDisplayName: String? = nil, vendorPath: String? = nil, isVendorReadOnly: Bool? = nil, isVendorRequired: Bool? = nil) {
        self.mask = mask
        self.type = type
        self.vendorDisplayName = vendorDisplayName
        self.vendorPath = vendorPath
        self.isVendorReadOnly = isVendorReadOnly
        self.isVendorRequired = isVendorRequired
    }

    private enum CodingKeys: String, CodingKey {
        case mask
        case type
        case vendorDisplayName
        case vendorPath
        case isVendorReadOnly = "vendorReadOnly"
        case isVendorRequired = "vendorRequired"
    }
}

/// /contacts
public struct SwaggerContactsPath: Codable {
    public var post: Swaggerpost?

    public init(post: Swaggerpost? = nil) {
        self.post = post
    }
}

/// 200
public struct Swagger200: Codable {
    public var description: String?
    public var schema: Swaggerschema?

    public init(description: String? = nil, schema: Swaggerschema? = nil) {
        self.description = description
        self.schema = schema
    }
}

/// 400
public struct Swagger400: Codable {
    public var description: String?

    public init(description: String? = nil) {
        self.description = description
    }
}

/// 401
public struct Swagger401: Codable {
    public var description: String?

    public init(description: String? = nil) {
        self.description = description
    }
}

/// 403
public struct Swagger403: Codable {
    public var description: String?

    public init(description: String? = nil) {
        self.description = description
    }
}

/// 404
public struct Swagger404: Codable {
    public var description: String?

    public init(description: String? = nil) {
        self.description = description
    }
}

/// 405
public struct Swagger405: Codable {
    public var description: String?

    public init(description: String? = nil) {
        self.description = description
    }
}

/// 406
public struct Swagger406: Codable {
    public var description: String?

    public init(description: String? = nil) {
        self.description = description
    }
}

/// 409
public struct Swagger409: Codable {
    public var description: String?

    public init(description: String? = nil) {
        self.description = description
    }
}

/// 415
public struct Swagger415: Codable {
    public var description: String?

    public init(description: String? = nil) {
        self.description = description
    }
}

/// 500
public struct Swagger500: Codable {
    public var description: String?

    public init(description: String? = nil) {
        self.description = description
    }
}

/// 502
public struct Swagger502: Codable {
    public var description: String?

    public init(description: String? = nil) {
        self.description = description
    }
}

public struct SwaggerDocs: Codable {
    public var basePath: String?
    public var definitions: Swaggerdefinitions?
    public var host: String?
    public var info: Swaggerinfo?
    public var paths: Swaggerpaths?
    public var schemes: [String]?
    public var swagger: String?
    public var tags: [Swaggertags]?

    public init(basePath: String? = nil, definitions: Swaggerdefinitions? = nil, host: String? = nil, info: Swaggerinfo? = nil, paths: Swaggerpaths? = nil, schemes: [String]? = nil, swagger: String? = nil, tags: [Swaggertags]? = nil) {
        self.basePath = basePath
        self.definitions = definitions
        self.host = host
        self.info = info
        self.paths = paths
        self.schemes = schemes
        self.swagger = swagger
        self.tags = tags
    }
}

/// Contact
public struct Swaggercontact: Codable {
    public var email: String?

    public init(email: String? = nil) {
        self.email = email
    }
}

/// Definition-name
public struct SwaggerdefinitionName: Codable {
    public var properties: Swaggerproperties?

    public init(properties: Swaggerproperties? = nil) {
        self.properties = properties
    }
}

/// #/definitions/definition-property
public struct SwaggerdefinitionProperty: Codable {
    public var type: String?

    public init(type: String? = nil) {
        self.type = type
    }
}

/// Definitions
public struct Swaggerdefinitions: Codable {
    /// Definition-name
    public var definitionName: SwaggerdefinitionName?

    public init(definitionName: SwaggerdefinitionName? = nil) {
        self.definitionName = definitionName
    }

    private enum CodingKeys: String, CodingKey {
        case definitionName = "definition-name"
    }
}

/// Info
public struct Swaggerinfo: Codable {
    public var contact: Swaggercontact?
    public var title: String?
    public var version: String?

    public init(contact: Swaggercontact? = nil, title: String? = nil, version: String? = nil) {
        self.contact = contact
        self.title = title
        self.version = version
    }
}

/// Parameters
public struct Swaggerparameters: Codable {
    public var description: String?
    public var `in`: String?
    public var name: String?
    public var isRequired: Bool?
    public var schema: Swaggerparametersschema?
    public var type: String?

    public init(description: String? = nil, `in`: String? = nil, name: String? = nil, isRequired: Bool? = nil, schema: Swaggerparametersschema? = nil, type: String? = nil) {
        self.description = description
        self.in = `in`
        self.name = name
        self.isRequired = isRequired
        self.schema = schema
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case description
        case `in` = "in"
        case name
        case isRequired = "required"
        case schema
        case type
    }
}

/// Schema
public struct Swaggerparametersschema: Codable {
    public var ref: String?

    public init(ref: String? = nil) {
        self.ref = ref
    }

    private enum CodingKeys: String, CodingKey {
        case ref = "$ref"
    }
}

/// Paths
public struct Swaggerpaths: Codable {
    /// /contacts
    public var contacts: SwaggerContactsPath?

    public init(contacts: SwaggerContactsPath? = nil) {
        self.contacts = contacts
    }

    private enum CodingKeys: String, CodingKey {
        case contacts = "/contacts"
    }
}

/// Post
public struct Swaggerpost: Codable {
    public var operationID: String?
    public var parameters: [Swaggerparameters]?
    public var responses: Swaggerresponses?
    public var summary: String?
    public var tags: [String]?

    public init(operationID: String? = nil, parameters: [Swaggerparameters]? = nil, responses: Swaggerresponses? = nil, summary: String? = nil, tags: [String]? = nil) {
        self.operationID = operationID
        self.parameters = parameters
        self.responses = responses
        self.summary = summary
        self.tags = tags
    }

    private enum CodingKeys: String, CodingKey {
        case operationID = "operationId"
        case parameters
        case responses
        case summary
        case tags
    }
}

/// Properties
public struct Swaggerproperties: Codable {
    /// #/definitions/definition-property
    public var definitionProperty: SwaggerdefinitionProperty?

    public init(definitionProperty: SwaggerdefinitionProperty? = nil) {
        self.definitionProperty = definitionProperty
    }

    private enum CodingKeys: String, CodingKey {
        case definitionProperty = "definition-property"
    }
}

/// Responses
public struct Swaggerresponses: Codable {
    /// 200
    public var _200: Swagger200?
    /// 400
    public var _400: Swagger400?
    /// 401
    public var _401: Swagger401?
    /// 403
    public var _403: Swagger403?
    /// 404
    public var _404: Swagger404?
    /// 405
    public var _405: Swagger405?
    /// 406
    public var _406: Swagger406?
    /// 409
    public var _409: Swagger409?
    /// 415
    public var _415: Swagger415?
    /// 500
    public var _500: Swagger500?
    /// 502
    public var _502: Swagger502?

    public init(_200: Swagger200? = nil, _400: Swagger400? = nil, _401: Swagger401? = nil, _403: Swagger403? = nil, _404: Swagger404? = nil, _405: Swagger405? = nil, _406: Swagger406? = nil, _409: Swagger409? = nil, _415: Swagger415? = nil, _500: Swagger500? = nil, _502: Swagger502? = nil) {
        self._200 = _200
        self._400 = _400
        self._401 = _401
        self._403 = _403
        self._404 = _404
        self._405 = _405
        self._406 = _406
        self._409 = _409
        self._415 = _415
        self._500 = _500
        self._502 = _502
    }

    private enum CodingKeys: String, CodingKey {
        case _200 = "200"
        case _400 = "400"
        case _401 = "401"
        case _403 = "403"
        case _404 = "404"
        case _405 = "405"
        case _406 = "406"
        case _409 = "409"
        case _415 = "415"
        case _500 = "500"
        case _502 = "502"
    }
}

/// Schema
public struct Swaggerschema: Codable {
    public var ref: String?

    public init(ref: String? = nil) {
        self.ref = ref
    }

    private enum CodingKeys: String, CodingKey {
        case ref = "$ref"
    }
}

/// Tags
public struct Swaggertags: Codable {
    public var name: String?

    public init(name: String? = nil) {
        self.name = name
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
