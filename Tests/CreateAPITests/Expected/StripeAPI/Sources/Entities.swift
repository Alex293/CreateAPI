// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation

/// This is an object representing a Stripe account. You can retrieve it to see
/// properties on the account like its current e-mail address or if the account is
/// enabled yet to make live charges.
/// 
/// Some properties, marked below, are available only to platforms that want to
/// [create and manage Express or Custom accounts](https://stripe.com/docs/connect/accounts).
public struct Account: Codable {
    /// Business information about the account.
    public var businessProfile: BusinessProfile?
    /// The business type.
    public var businessType: BusinessType?
    /// AccountCapabilities
    public var capabilities: AccountCapabilities?
    /// Whether the account can create live charges.
    public var isChargesEnabled: Bool?
    public var company: LegalEntityCompany?
    /// AccountUnificationAccountController
    public var controller: AccountUnificationAccountController?
    /// The account's country.
    public var country: String?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int?
    /// Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts).
    public var defaultCurrency: String?
    /// Whether account details have been submitted. Standard accounts cannot receive payouts before this is true.
    public var isDetailsSubmitted: Bool?
    /// An email address associated with the account. You can treat this as metadata: it is not used for authentication or messaging account holders.
    public var email: String?
    /// ExternalAccountList
    ///
    /// External accounts (bank accounts and debit cards) currently attached to this account
    public var externalAccounts: ExternalAccounts?
    /// AccountFutureRequirements
    public var futureRequirements: AccountFutureRequirements?
    /// Unique identifier for the object.
    public var id: String
    public var individual: Person?
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Whether Stripe can send payouts to this account.
    public var isPayoutsEnabled: Bool?
    /// AccountRequirements
    public var requirements: AccountRequirements?
    /// Options for customizing how the account functions within Stripe.
    public var settings: Settings?
    /// AccountTOSAcceptance
    public var tosAcceptance: AccountTosAcceptance?
    /// The Stripe account type. Can be `standard`, `express`, or `custom`.
    public var type: `Type`?

    /// Business information about the account.
    public struct BusinessProfile: Codable {
        public var accountBusinessProfile: AccountBusinessProfile?

        public init(accountBusinessProfile: AccountBusinessProfile? = nil) {
            self.accountBusinessProfile = accountBusinessProfile
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.accountBusinessProfile = try? container.decode(AccountBusinessProfile.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = accountBusinessProfile { try container.encode(value) }
        }
    }

    /// The business type.
    public enum BusinessType: String, Codable, CaseIterable {
        case company
        case governmentEntity = "government_entity"
        case individual
        case nonProfit = "non_profit"
    }

    /// ExternalAccountList
    ///
    /// External accounts (bank accounts and debit cards) currently attached to this account
    public struct ExternalAccounts: Codable {
        /// The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards.
        public var data: [Datum]
        /// True if this list has another page of items after this one that can be fetched.
        public var hasMore: Bool
        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public var object: Object
        /// The URL where this list can be accessed.
        public var url: String

        /// Polymorphic
        public struct Datum: Codable {
            public var bankAccount: BankAccount?
            public var card: Card?

            public init(bankAccount: BankAccount? = nil, card: Card? = nil) {
                self.bankAccount = bankAccount
                self.card = card
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                self.bankAccount = try? container.decode(BankAccount.self)
                self.card = try? container.decode(Card.self)
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                if let value = bankAccount { try container.encode(value) }
                if let value = card { try container.encode(value) }
            }
        }

        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public enum Object: String, Codable, CaseIterable {
            case list
        }

        public init(data: [Datum], hasMore: Bool, object: Object, url: String) {
            self.data = data
            self.hasMore = hasMore
            self.object = object
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case data
            case hasMore = "has_more"
            case object
            case url
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case account
    }

    /// Options for customizing how the account functions within Stripe.
    public struct Settings: Codable {
        public var accountSettings: AccountSettings?

        public init(accountSettings: AccountSettings? = nil) {
            self.accountSettings = accountSettings
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.accountSettings = try? container.decode(AccountSettings.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = accountSettings { try container.encode(value) }
        }
    }

    /// The Stripe account type. Can be `standard`, `express`, or `custom`.
    public enum `Type`: String, Codable, CaseIterable {
        case custom
        case express
        case standard
    }

    public init(businessProfile: BusinessProfile? = nil, businessType: BusinessType? = nil, capabilities: AccountCapabilities? = nil, isChargesEnabled: Bool? = nil, company: LegalEntityCompany? = nil, controller: AccountUnificationAccountController? = nil, country: String? = nil, created: Int? = nil, defaultCurrency: String? = nil, isDetailsSubmitted: Bool? = nil, email: String? = nil, externalAccounts: ExternalAccounts? = nil, futureRequirements: AccountFutureRequirements? = nil, id: String, individual: Person? = nil, metadata: [String: String]? = nil, object: Object, isPayoutsEnabled: Bool? = nil, requirements: AccountRequirements? = nil, settings: Settings? = nil, tosAcceptance: AccountTosAcceptance? = nil, type: `Type`? = nil) {
        self.businessProfile = businessProfile
        self.businessType = businessType
        self.capabilities = capabilities
        self.isChargesEnabled = isChargesEnabled
        self.company = company
        self.controller = controller
        self.country = country
        self.created = created
        self.defaultCurrency = defaultCurrency
        self.isDetailsSubmitted = isDetailsSubmitted
        self.email = email
        self.externalAccounts = externalAccounts
        self.futureRequirements = futureRequirements
        self.id = id
        self.individual = individual
        self.metadata = metadata
        self.object = object
        self.isPayoutsEnabled = isPayoutsEnabled
        self.requirements = requirements
        self.settings = settings
        self.tosAcceptance = tosAcceptance
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case businessProfile = "business_profile"
        case businessType = "business_type"
        case capabilities
        case isChargesEnabled = "charges_enabled"
        case company
        case controller
        case country
        case created
        case defaultCurrency = "default_currency"
        case isDetailsSubmitted = "details_submitted"
        case email
        case externalAccounts = "external_accounts"
        case futureRequirements = "future_requirements"
        case id
        case individual
        case metadata
        case object
        case isPayoutsEnabled = "payouts_enabled"
        case requirements
        case settings
        case tosAcceptance = "tos_acceptance"
        case type
    }
}

public struct AccountBacsDebitPaymentsSettings: Codable {
    /// The Bacs Direct Debit Display Name for this account. For payments made with Bacs Direct Debit, this will appear on the mandate, and as the statement descriptor.
    public var displayName: String?

    public init(displayName: String? = nil) {
        self.displayName = displayName
    }

    private enum CodingKeys: String, CodingKey {
        case displayName = "display_name"
    }
}

public struct AccountBrandingSettings: Codable {
    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) An icon for the account. Must be square and at least 128px x 128px.
    public var icon: Icon?
    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A logo for the account that will be used in Checkout instead of the icon and without the account's name next to it if provided. Must be at least 128px x 128px.
    public var logo: Logo?
    /// A CSS hex color value representing the primary branding color for this account
    public var primaryColor: String?
    /// A CSS hex color value representing the secondary branding color for this account
    public var secondaryColor: String?

    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) An icon for the account. Must be square and at least 128px x 128px.
    public struct Icon: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A logo for the account that will be used in Checkout instead of the icon and without the account's name next to it if provided. Must be at least 128px x 128px.
    public struct Logo: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    public init(icon: Icon? = nil, logo: Logo? = nil, primaryColor: String? = nil, secondaryColor: String? = nil) {
        self.icon = icon
        self.logo = logo
        self.primaryColor = primaryColor
        self.secondaryColor = secondaryColor
    }

    private enum CodingKeys: String, CodingKey {
        case icon
        case logo
        case primaryColor = "primary_color"
        case secondaryColor = "secondary_color"
    }
}

public struct AccountBusinessProfile: Codable {
    /// [The merchant category code for the account](https://stripe.com/docs/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide.
    public var mcc: String?
    /// The customer-facing business name.
    public var name: String?
    /// Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes.
    public var productDescription: String?
    /// A publicly available mailing address for sending support issues to.
    public var supportAddress: SupportAddress?
    /// A publicly available email address for sending support issues to.
    public var supportEmail: String?
    /// A publicly available phone number to call with support issues.
    public var supportPhone: String?
    /// A publicly available website for handling support issues.
    public var supportURL: String?
    /// The business's publicly available website.
    public var url: String?

    /// A publicly available mailing address for sending support issues to.
    public struct SupportAddress: Codable {
        public var address: Address?

        public init(address: Address? = nil) {
            self.address = address
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.address = try? container.decode(Address.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = address { try container.encode(value) }
        }
    }

    public init(mcc: String? = nil, name: String? = nil, productDescription: String? = nil, supportAddress: SupportAddress? = nil, supportEmail: String? = nil, supportPhone: String? = nil, supportURL: String? = nil, url: String? = nil) {
        self.mcc = mcc
        self.name = name
        self.productDescription = productDescription
        self.supportAddress = supportAddress
        self.supportEmail = supportEmail
        self.supportPhone = supportPhone
        self.supportURL = supportURL
        self.url = url
    }

    private enum CodingKeys: String, CodingKey {
        case mcc
        case name
        case productDescription = "product_description"
        case supportAddress = "support_address"
        case supportEmail = "support_email"
        case supportPhone = "support_phone"
        case supportURL = "support_url"
        case url
    }
}

public struct AccountCapabilities: Codable {
    /// The status of the Canadian pre-authorized debits payments capability of the account, or whether the account can directly process Canadian pre-authorized debits charges.
    public var acssDebitPayments: AcssDebitPayments?
    /// The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges.
    public var afterpayClearpayPayments: AfterpayClearpayPayments?
    /// The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges.
    public var auBecsDebitPayments: AuBecsDebitPayments?
    /// The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges.
    public var bacsDebitPayments: BacsDebitPayments?
    /// The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges.
    public var bancontactPayments: BancontactPayments?
    /// The status of the boleto payments capability of the account, or whether the account can directly process boleto charges.
    public var boletoPayments: BoletoPayments?
    /// The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards
    public var cardIssuing: CardIssuing?
    /// The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.
    public var cardPayments: CardPayments?
    /// The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency.
    public var cartesBancairesPayments: CartesBancairesPayments?
    /// The status of the EPS payments capability of the account, or whether the account can directly process EPS charges.
    public var epsPayments: EpsPayments?
    /// The status of the FPX payments capability of the account, or whether the account can directly process FPX charges.
    public var fpxPayments: FpxPayments?
    /// The status of the giropay payments capability of the account, or whether the account can directly process giropay charges.
    public var giropayPayments: GiropayPayments?
    /// The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges.
    public var grabpayPayments: GrabpayPayments?
    /// The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges.
    public var idealPayments: IdealPayments?
    /// The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency.
    public var jcbPayments: JcbPayments?
    /// The status of the Klarna payments capability of the account, or whether the account can directly process Klarna charges.
    public var klarnaPayments: KlarnaPayments?
    /// The status of the legacy payments capability of the account.
    public var legacyPayments: LegacyPayments?
    /// The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges.
    public var oxxoPayments: OxxoPayments?
    /// The status of the P24 payments capability of the account, or whether the account can directly process P24 charges.
    public var p24Payments: P24Payments?
    /// The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges.
    public var sepaDebitPayments: SepaDebitPayments?
    /// The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges.
    public var sofortPayments: SofortPayments?
    /// The status of the tax reporting 1099-K (US) capability of the account.
    public var taxReportingUs1099K: TaxReportingUs1099K?
    /// The status of the tax reporting 1099-MISC (US) capability of the account.
    public var taxReportingUs1099Misc: TaxReportingUs1099Misc?
    /// The status of the transfers capability of the account, or whether your platform can transfer funds to the account.
    public var transfers: Transfers?

    /// The status of the Canadian pre-authorized debits payments capability of the account, or whether the account can directly process Canadian pre-authorized debits charges.
    public enum AcssDebitPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges.
    public enum AfterpayClearpayPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges.
    public enum AuBecsDebitPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges.
    public enum BacsDebitPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges.
    public enum BancontactPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the boleto payments capability of the account, or whether the account can directly process boleto charges.
    public enum BoletoPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards
    public enum CardIssuing: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.
    public enum CardPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency.
    public enum CartesBancairesPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the EPS payments capability of the account, or whether the account can directly process EPS charges.
    public enum EpsPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the FPX payments capability of the account, or whether the account can directly process FPX charges.
    public enum FpxPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the giropay payments capability of the account, or whether the account can directly process giropay charges.
    public enum GiropayPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges.
    public enum GrabpayPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges.
    public enum IdealPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency.
    public enum JcbPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the Klarna payments capability of the account, or whether the account can directly process Klarna charges.
    public enum KlarnaPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the legacy payments capability of the account.
    public enum LegacyPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges.
    public enum OxxoPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the P24 payments capability of the account, or whether the account can directly process P24 charges.
    public enum P24Payments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges.
    public enum SepaDebitPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges.
    public enum SofortPayments: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the tax reporting 1099-K (US) capability of the account.
    public enum TaxReportingUs1099K: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the tax reporting 1099-MISC (US) capability of the account.
    public enum TaxReportingUs1099Misc: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The status of the transfers capability of the account, or whether your platform can transfer funds to the account.
    public enum Transfers: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    public init(acssDebitPayments: AcssDebitPayments? = nil, afterpayClearpayPayments: AfterpayClearpayPayments? = nil, auBecsDebitPayments: AuBecsDebitPayments? = nil, bacsDebitPayments: BacsDebitPayments? = nil, bancontactPayments: BancontactPayments? = nil, boletoPayments: BoletoPayments? = nil, cardIssuing: CardIssuing? = nil, cardPayments: CardPayments? = nil, cartesBancairesPayments: CartesBancairesPayments? = nil, epsPayments: EpsPayments? = nil, fpxPayments: FpxPayments? = nil, giropayPayments: GiropayPayments? = nil, grabpayPayments: GrabpayPayments? = nil, idealPayments: IdealPayments? = nil, jcbPayments: JcbPayments? = nil, klarnaPayments: KlarnaPayments? = nil, legacyPayments: LegacyPayments? = nil, oxxoPayments: OxxoPayments? = nil, p24Payments: P24Payments? = nil, sepaDebitPayments: SepaDebitPayments? = nil, sofortPayments: SofortPayments? = nil, taxReportingUs1099K: TaxReportingUs1099K? = nil, taxReportingUs1099Misc: TaxReportingUs1099Misc? = nil, transfers: Transfers? = nil) {
        self.acssDebitPayments = acssDebitPayments
        self.afterpayClearpayPayments = afterpayClearpayPayments
        self.auBecsDebitPayments = auBecsDebitPayments
        self.bacsDebitPayments = bacsDebitPayments
        self.bancontactPayments = bancontactPayments
        self.boletoPayments = boletoPayments
        self.cardIssuing = cardIssuing
        self.cardPayments = cardPayments
        self.cartesBancairesPayments = cartesBancairesPayments
        self.epsPayments = epsPayments
        self.fpxPayments = fpxPayments
        self.giropayPayments = giropayPayments
        self.grabpayPayments = grabpayPayments
        self.idealPayments = idealPayments
        self.jcbPayments = jcbPayments
        self.klarnaPayments = klarnaPayments
        self.legacyPayments = legacyPayments
        self.oxxoPayments = oxxoPayments
        self.p24Payments = p24Payments
        self.sepaDebitPayments = sepaDebitPayments
        self.sofortPayments = sofortPayments
        self.taxReportingUs1099K = taxReportingUs1099K
        self.taxReportingUs1099Misc = taxReportingUs1099Misc
        self.transfers = transfers
    }

    private enum CodingKeys: String, CodingKey {
        case acssDebitPayments = "acss_debit_payments"
        case afterpayClearpayPayments = "afterpay_clearpay_payments"
        case auBecsDebitPayments = "au_becs_debit_payments"
        case bacsDebitPayments = "bacs_debit_payments"
        case bancontactPayments = "bancontact_payments"
        case boletoPayments = "boleto_payments"
        case cardIssuing = "card_issuing"
        case cardPayments = "card_payments"
        case cartesBancairesPayments = "cartes_bancaires_payments"
        case epsPayments = "eps_payments"
        case fpxPayments = "fpx_payments"
        case giropayPayments = "giropay_payments"
        case grabpayPayments = "grabpay_payments"
        case idealPayments = "ideal_payments"
        case jcbPayments = "jcb_payments"
        case klarnaPayments = "klarna_payments"
        case legacyPayments = "legacy_payments"
        case oxxoPayments = "oxxo_payments"
        case p24Payments = "p24_payments"
        case sepaDebitPayments = "sepa_debit_payments"
        case sofortPayments = "sofort_payments"
        case taxReportingUs1099K = "tax_reporting_us_1099_k"
        case taxReportingUs1099Misc = "tax_reporting_us_1099_misc"
        case transfers
    }
}

public struct AccountCapabilityFutureRequirements: Codable {
    /// Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
    public var alternatives: [AccountRequirementsAlternative]?
    /// Date on which `future_requirements` merges with the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on the capability's enablement state prior to transitioning.
    public var currentDeadline: Int?
    /// Fields that need to be collected to keep the capability enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash.
    public var currentlyDue: [String]
    /// This is typed as a string for consistency with `requirements.disabled_reason`, but it safe to assume `future_requirements.disabled_reason` is empty because fields in `future_requirements` will never disable the account.
    public var disabledReason: String?
    /// Fields that are `currently_due` and need to be collected again because validation or verification failed.
    public var errors: [AccountRequirementsError]
    /// Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well.
    public var eventuallyDue: [String]
    /// Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`.
    public var pastDue: [String]
    /// Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`.
    public var pendingVerification: [String]

    public init(alternatives: [AccountRequirementsAlternative]? = nil, currentDeadline: Int? = nil, currentlyDue: [String], disabledReason: String? = nil, errors: [AccountRequirementsError], eventuallyDue: [String], pastDue: [String], pendingVerification: [String]) {
        self.alternatives = alternatives
        self.currentDeadline = currentDeadline
        self.currentlyDue = currentlyDue
        self.disabledReason = disabledReason
        self.errors = errors
        self.eventuallyDue = eventuallyDue
        self.pastDue = pastDue
        self.pendingVerification = pendingVerification
    }

    private enum CodingKeys: String, CodingKey {
        case alternatives
        case currentDeadline = "current_deadline"
        case currentlyDue = "currently_due"
        case disabledReason = "disabled_reason"
        case errors
        case eventuallyDue = "eventually_due"
        case pastDue = "past_due"
        case pendingVerification = "pending_verification"
    }
}

public struct AccountCapabilityRequirements: Codable {
    /// Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
    public var alternatives: [AccountRequirementsAlternative]?
    /// Date by which the fields in `currently_due` must be collected to keep the capability enabled for the account. These fields may disable the capability sooner if the next threshold is reached before they are collected.
    public var currentDeadline: Int?
    /// Fields that need to be collected to keep the capability enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the capability is disabled.
    public var currentlyDue: [String]
    /// If the capability is disabled, this string describes why. Can be `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.listed`, `rejected.terms_of_service`, `rejected.other`, `under_review`, or `other`.
    /// 
    /// `rejected.unsupported_business` means that the account's business is not supported by the capability. For example, payment methods may restrict the businesses they support in their terms of service:
    /// 
    /// - [Afterpay Clearpay's terms of service](/afterpay-clearpay/legal#restricted-businesses)
    /// 
    /// If you believe that the rejection is in error, please contact support at https://support.stripe.com/contact/ for assistance.
    public var disabledReason: String?
    /// Fields that are `currently_due` and need to be collected again because validation or verification failed.
    public var errors: [AccountRequirementsError]
    /// Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set.
    public var eventuallyDue: [String]
    /// Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the capability on the account.
    public var pastDue: [String]
    /// Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`.
    public var pendingVerification: [String]

    public init(alternatives: [AccountRequirementsAlternative]? = nil, currentDeadline: Int? = nil, currentlyDue: [String], disabledReason: String? = nil, errors: [AccountRequirementsError], eventuallyDue: [String], pastDue: [String], pendingVerification: [String]) {
        self.alternatives = alternatives
        self.currentDeadline = currentDeadline
        self.currentlyDue = currentlyDue
        self.disabledReason = disabledReason
        self.errors = errors
        self.eventuallyDue = eventuallyDue
        self.pastDue = pastDue
        self.pendingVerification = pendingVerification
    }

    private enum CodingKeys: String, CodingKey {
        case alternatives
        case currentDeadline = "current_deadline"
        case currentlyDue = "currently_due"
        case disabledReason = "disabled_reason"
        case errors
        case eventuallyDue = "eventually_due"
        case pastDue = "past_due"
        case pendingVerification = "pending_verification"
    }
}

public struct AccountCardIssuingSettings: Codable {
    /// CardIssuingAccountTermsOfService
    public var tosAcceptance: CardIssuingAccountTermsOfService?

    public init(tosAcceptance: CardIssuingAccountTermsOfService? = nil) {
        self.tosAcceptance = tosAcceptance
    }

    private enum CodingKeys: String, CodingKey {
        case tosAcceptance = "tos_acceptance"
    }
}

public struct AccountCardPaymentsSettings: Codable {
    /// AccountDeclineChargeOn
    public var declineOn: AccountDeclineChargeOn?
    /// The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. `statement_descriptor_prefix` is useful for maximizing descriptor space for the dynamic portion.
    public var statementDescriptorPrefix: String?

    public init(declineOn: AccountDeclineChargeOn? = nil, statementDescriptorPrefix: String? = nil) {
        self.declineOn = declineOn
        self.statementDescriptorPrefix = statementDescriptorPrefix
    }

    private enum CodingKeys: String, CodingKey {
        case declineOn = "decline_on"
        case statementDescriptorPrefix = "statement_descriptor_prefix"
    }
}

public struct AccountDashboardSettings: Codable {
    /// The display name for this account. This is used on the Stripe Dashboard to differentiate between accounts.
    public var displayName: String?
    /// The timezone used in the Stripe Dashboard for this account. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones).
    public var timezone: String?

    public init(displayName: String? = nil, timezone: String? = nil) {
        self.displayName = displayName
        self.timezone = timezone
    }

    private enum CodingKeys: String, CodingKey {
        case displayName = "display_name"
        case timezone
    }
}

public struct AccountDeclineChargeOn: Codable {
    /// Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification.
    public var isAvsFailure: Bool
    /// Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification.
    public var isCvcFailure: Bool

    public init(isAvsFailure: Bool, isCvcFailure: Bool) {
        self.isAvsFailure = isAvsFailure
        self.isCvcFailure = isCvcFailure
    }

    private enum CodingKeys: String, CodingKey {
        case isAvsFailure = "avs_failure"
        case isCvcFailure = "cvc_failure"
    }
}

public struct AccountFutureRequirements: Codable {
    /// Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
    public var alternatives: [AccountRequirementsAlternative]?
    /// Date on which `future_requirements` merges with the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on its enablement state prior to transitioning.
    public var currentDeadline: Int?
    /// Fields that need to be collected to keep the account enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash.
    public var currentlyDue: [String]?
    /// This is typed as a string for consistency with `requirements.disabled_reason`, but it safe to assume `future_requirements.disabled_reason` is empty because fields in `future_requirements` will never disable the account.
    public var disabledReason: String?
    /// Fields that are `currently_due` and need to be collected again because validation or verification failed.
    public var errors: [AccountRequirementsError]?
    /// Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well.
    public var eventuallyDue: [String]?
    /// Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`.
    public var pastDue: [String]?
    /// Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`.
    public var pendingVerification: [String]?

    public init(alternatives: [AccountRequirementsAlternative]? = nil, currentDeadline: Int? = nil, currentlyDue: [String]? = nil, disabledReason: String? = nil, errors: [AccountRequirementsError]? = nil, eventuallyDue: [String]? = nil, pastDue: [String]? = nil, pendingVerification: [String]? = nil) {
        self.alternatives = alternatives
        self.currentDeadline = currentDeadline
        self.currentlyDue = currentlyDue
        self.disabledReason = disabledReason
        self.errors = errors
        self.eventuallyDue = eventuallyDue
        self.pastDue = pastDue
        self.pendingVerification = pendingVerification
    }

    private enum CodingKeys: String, CodingKey {
        case alternatives
        case currentDeadline = "current_deadline"
        case currentlyDue = "currently_due"
        case disabledReason = "disabled_reason"
        case errors
        case eventuallyDue = "eventually_due"
        case pastDue = "past_due"
        case pendingVerification = "pending_verification"
    }
}

/// Account Links are the means by which a Connect platform grants a connected account permission to access
/// Stripe-hosted applications, such as Connect Onboarding.
/// 
/// Related guide: [Connect Onboarding](https://stripe.com/docs/connect/connect-onboarding).
public struct AccountLink: Codable {
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The timestamp at which this account link will expire.
    public var expiresAt: Int
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The URL for the account link.
    public var url: String

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case accountLink = "account_link"
    }

    public init(created: Int, expiresAt: Int, object: Object, url: String) {
        self.created = created
        self.expiresAt = expiresAt
        self.object = object
        self.url = url
    }

    private enum CodingKeys: String, CodingKey {
        case created
        case expiresAt = "expires_at"
        case object
        case url
    }
}

public struct AccountPaymentsSettings: Codable {
    /// The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge.
    public var statementDescriptor: String?
    /// The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only)
    public var statementDescriptorKana: String?
    /// The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only)
    public var statementDescriptorKanji: String?

    public init(statementDescriptor: String? = nil, statementDescriptorKana: String? = nil, statementDescriptorKanji: String? = nil) {
        self.statementDescriptor = statementDescriptor
        self.statementDescriptorKana = statementDescriptorKana
        self.statementDescriptorKanji = statementDescriptorKanji
    }

    private enum CodingKeys: String, CodingKey {
        case statementDescriptor = "statement_descriptor"
        case statementDescriptorKana = "statement_descriptor_kana"
        case statementDescriptorKanji = "statement_descriptor_kanji"
    }
}

public struct AccountPayoutSettings: Codable {
    /// A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See our [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances) documentation for details. Default value is `false` for Custom accounts, otherwise `true`.
    public var isDebitNegativeBalances: Bool
    /// TransferSchedule
    public var schedule: TransferSchedule
    /// The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard.
    public var statementDescriptor: String?

    public init(isDebitNegativeBalances: Bool, schedule: TransferSchedule, statementDescriptor: String? = nil) {
        self.isDebitNegativeBalances = isDebitNegativeBalances
        self.schedule = schedule
        self.statementDescriptor = statementDescriptor
    }

    private enum CodingKeys: String, CodingKey {
        case isDebitNegativeBalances = "debit_negative_balances"
        case schedule
        case statementDescriptor = "statement_descriptor"
    }
}

public struct AccountRequirements: Codable {
    /// Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
    public var alternatives: [AccountRequirementsAlternative]?
    /// Date by which the fields in `currently_due` must be collected to keep the account enabled. These fields may disable the account sooner if the next threshold is reached before they are collected.
    public var currentDeadline: Int?
    /// Fields that need to be collected to keep the account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.
    public var currentlyDue: [String]?
    /// If the account is disabled, this string describes why. Can be `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.listed`, `rejected.terms_of_service`, `rejected.other`, `under_review`, or `other`.
    public var disabledReason: String?
    /// Fields that are `currently_due` and need to be collected again because validation or verification failed.
    public var errors: [AccountRequirementsError]?
    /// Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set.
    public var eventuallyDue: [String]?
    /// Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the account.
    public var pastDue: [String]?
    /// Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`.
    public var pendingVerification: [String]?

    public init(alternatives: [AccountRequirementsAlternative]? = nil, currentDeadline: Int? = nil, currentlyDue: [String]? = nil, disabledReason: String? = nil, errors: [AccountRequirementsError]? = nil, eventuallyDue: [String]? = nil, pastDue: [String]? = nil, pendingVerification: [String]? = nil) {
        self.alternatives = alternatives
        self.currentDeadline = currentDeadline
        self.currentlyDue = currentlyDue
        self.disabledReason = disabledReason
        self.errors = errors
        self.eventuallyDue = eventuallyDue
        self.pastDue = pastDue
        self.pendingVerification = pendingVerification
    }

    private enum CodingKeys: String, CodingKey {
        case alternatives
        case currentDeadline = "current_deadline"
        case currentlyDue = "currently_due"
        case disabledReason = "disabled_reason"
        case errors
        case eventuallyDue = "eventually_due"
        case pastDue = "past_due"
        case pendingVerification = "pending_verification"
    }
}

public struct AccountRequirementsAlternative: Codable {
    /// Fields that can be provided to satisfy all fields in `original_fields_due`.
    public var alternativeFieldsDue: [String]
    /// Fields that are due and can be satisfied by providing all fields in `alternative_fields_due`.
    public var originalFieldsDue: [String]

    public init(alternativeFieldsDue: [String], originalFieldsDue: [String]) {
        self.alternativeFieldsDue = alternativeFieldsDue
        self.originalFieldsDue = originalFieldsDue
    }

    private enum CodingKeys: String, CodingKey {
        case alternativeFieldsDue = "alternative_fields_due"
        case originalFieldsDue = "original_fields_due"
    }
}

public struct AccountRequirementsError: Codable {
    /// The code for the type of error.
    public var code: Code
    /// An informative message that indicates the error type and provides additional details about the error.
    public var reason: String
    /// The specific user onboarding requirement field (in the requirements hash) that needs to be resolved.
    public var requirement: String

    /// The code for the type of error.
    public enum Code: String, Codable, CaseIterable {
        case invalidAddressCityStatePostalCode = "invalid_address_city_state_postal_code"
        case invalidStreetAddress = "invalid_street_address"
        case invalidValueOther = "invalid_value_other"
        case verificationDocumentAddressMismatch = "verification_document_address_mismatch"
        case verificationDocumentAddressMissing = "verification_document_address_missing"
        case verificationDocumentCorrupt = "verification_document_corrupt"
        case verificationDocumentCountryNotSupported = "verification_document_country_not_supported"
        case verificationDocumentDobMismatch = "verification_document_dob_mismatch"
        case verificationDocumentDuplicateType = "verification_document_duplicate_type"
        case verificationDocumentExpired = "verification_document_expired"
        case verificationDocumentFailedCopy = "verification_document_failed_copy"
        case verificationDocumentFailedGreyscale = "verification_document_failed_greyscale"
        case verificationDocumentFailedOther = "verification_document_failed_other"
        case verificationDocumentFailedTestMode = "verification_document_failed_test_mode"
        case verificationDocumentFraudulent = "verification_document_fraudulent"
        case verificationDocumentIDNumberMismatch = "verification_document_id_number_mismatch"
        case verificationDocumentIDNumberMissing = "verification_document_id_number_missing"
        case verificationDocumentIncomplete = "verification_document_incomplete"
        case verificationDocumentInvalid = "verification_document_invalid"
        case verificationDocumentIssueOrExpiryDateMissing = "verification_document_issue_or_expiry_date_missing"
        case verificationDocumentManipulated = "verification_document_manipulated"
        case verificationDocumentMissingBack = "verification_document_missing_back"
        case verificationDocumentMissingFront = "verification_document_missing_front"
        case verificationDocumentNameMismatch = "verification_document_name_mismatch"
        case verificationDocumentNameMissing = "verification_document_name_missing"
        case verificationDocumentNationalityMismatch = "verification_document_nationality_mismatch"
        case verificationDocumentNotReadable = "verification_document_not_readable"
        case verificationDocumentNotSigned = "verification_document_not_signed"
        case verificationDocumentNotUploaded = "verification_document_not_uploaded"
        case verificationDocumentPhotoMismatch = "verification_document_photo_mismatch"
        case verificationDocumentTooLarge = "verification_document_too_large"
        case verificationDocumentTypeNotSupported = "verification_document_type_not_supported"
        case verificationFailedAddressMatch = "verification_failed_address_match"
        case verificationFailedBusinessIecNumber = "verification_failed_business_iec_number"
        case verificationFailedDocumentMatch = "verification_failed_document_match"
        case verificationFailedIDNumberMatch = "verification_failed_id_number_match"
        case verificationFailedKeyedIdentity = "verification_failed_keyed_identity"
        case verificationFailedKeyedMatch = "verification_failed_keyed_match"
        case verificationFailedNameMatch = "verification_failed_name_match"
        case verificationFailedOther = "verification_failed_other"
        case verificationFailedTaxIDMatch = "verification_failed_tax_id_match"
        case verificationFailedTaxIDNotIssued = "verification_failed_tax_id_not_issued"
        case verificationMissingExecutives = "verification_missing_executives"
        case verificationMissingOwners = "verification_missing_owners"
        case verificationRequiresAdditionalMemorandumOfAssociations = "verification_requires_additional_memorandum_of_associations"
    }

    public init(code: Code, reason: String, requirement: String) {
        self.code = code
        self.reason = reason
        self.requirement = requirement
    }
}

public struct AccountSepaDebitPaymentsSettings: Codable {
    /// SEPA creditor identifier that identifies the company making the payment.
    public var creditorID: String?

    public init(creditorID: String? = nil) {
        self.creditorID = creditorID
    }

    private enum CodingKeys: String, CodingKey {
        case creditorID = "creditor_id"
    }
}

public struct AccountSettings: Codable {
    /// AccountBacsDebitPaymentsSettings
    public var bacsDebitPayments: AccountBacsDebitPaymentsSettings?
    public var branding: AccountBrandingSettings
    /// AccountCardIssuingSettings
    public var cardIssuing: AccountCardIssuingSettings?
    /// AccountCardPaymentsSettings
    public var cardPayments: AccountCardPaymentsSettings
    /// AccountDashboardSettings
    public var dashboard: AccountDashboardSettings
    /// AccountPaymentsSettings
    public var payments: AccountPaymentsSettings
    /// AccountPayoutSettings
    public var payouts: AccountPayoutSettings?
    /// AccountSepaDebitPaymentsSettings
    public var sepaDebitPayments: AccountSepaDebitPaymentsSettings?

    public init(bacsDebitPayments: AccountBacsDebitPaymentsSettings? = nil, branding: AccountBrandingSettings, cardIssuing: AccountCardIssuingSettings? = nil, cardPayments: AccountCardPaymentsSettings, dashboard: AccountDashboardSettings, payments: AccountPaymentsSettings, payouts: AccountPayoutSettings? = nil, sepaDebitPayments: AccountSepaDebitPaymentsSettings? = nil) {
        self.bacsDebitPayments = bacsDebitPayments
        self.branding = branding
        self.cardIssuing = cardIssuing
        self.cardPayments = cardPayments
        self.dashboard = dashboard
        self.payments = payments
        self.payouts = payouts
        self.sepaDebitPayments = sepaDebitPayments
    }

    private enum CodingKeys: String, CodingKey {
        case bacsDebitPayments = "bacs_debit_payments"
        case branding
        case cardIssuing = "card_issuing"
        case cardPayments = "card_payments"
        case dashboard
        case payments
        case payouts
        case sepaDebitPayments = "sepa_debit_payments"
    }
}

public struct AccountTosAcceptance: Codable {
    /// The Unix timestamp marking when the account representative accepted their service agreement
    public var date: Int?
    /// The IP address from which the account representative accepted their service agreement
    public var ip: String?
    /// The user's service agreement type
    public var serviceAgreement: String?
    /// The user agent of the browser from which the account representative accepted their service agreement
    public var userAgent: String?

    public init(date: Int? = nil, ip: String? = nil, serviceAgreement: String? = nil, userAgent: String? = nil) {
        self.date = date
        self.ip = ip
        self.serviceAgreement = serviceAgreement
        self.userAgent = userAgent
    }

    private enum CodingKeys: String, CodingKey {
        case date
        case ip
        case serviceAgreement = "service_agreement"
        case userAgent = "user_agent"
    }
}

public struct AccountUnificationAccountController: Codable {
    /// `true` if the Connect application retrieving the resource controls the account and can therefore exercise [platform controls](https://stripe.com/docs/connect/platform-controls-for-standard-accounts). Otherwise, this field is null.
    public var isController: Bool?
    /// The controller type. Can be `application`, if a Connect application controls the account, or `account`, if the account controls itself.
    public var type: `Type`

    /// The controller type. Can be `application`, if a Connect application controls the account, or `account`, if the account controls itself.
    public enum `Type`: String, Codable, CaseIterable {
        case account
        case application
    }

    public init(isController: Bool? = nil, type: `Type`) {
        self.isController = isController
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case isController = "is_controller"
        case type
    }
}

public struct Address: Codable {
    /// City, district, suburb, town, or village.
    public var city: String?
    /// Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
    public var country: String?
    /// Address line 1 (e.g., street, PO Box, or company name).
    public var line1: String?
    /// Address line 2 (e.g., apartment, suite, unit, or building).
    public var line2: String?
    /// ZIP or postal code.
    public var postalCode: String?
    /// State, county, province, or region.
    public var state: String?

    public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil) {
        self.city = city
        self.country = country
        self.line1 = line1
        self.line2 = line2
        self.postalCode = postalCode
        self.state = state
    }

    private enum CodingKeys: String, CodingKey {
        case city
        case country
        case line1
        case line2
        case postalCode = "postal_code"
        case state
    }
}

public struct AlipayAccount: Codable {
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The ID of the customer associated with this Alipay Account.
    public var customer: Customer?
    /// Uniquely identifies the account and will be the same across all Alipay account objects that are linked to the same Alipay account.
    public var fingerprint: String
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// If the Alipay account object is not reusable, the exact amount that you can create a charge for.
    public var paymentAmount: Int?
    /// If the Alipay account object is not reusable, the exact currency that you can create a charge for.
    public var paymentCurrency: String?
    /// True if you can create multiple payments using this account. If the account is reusable, then you can freely choose the amount of each payment.
    public var isReusable: Bool
    /// Whether this Alipay account object has ever been used for a payment.
    public var isUsed: Bool
    /// The username for the Alipay account.
    public var username: String

    /// The ID of the customer associated with this Alipay Account.
    public final class Customer: Codable {
        public var string: String?
        public var customer: StripeAPI.Customer?
        public var deletedCustomer: DeletedCustomer?

        public init(string: String? = nil, customer: StripeAPI.Customer? = nil, deletedCustomer: DeletedCustomer? = nil) {
            self.string = string
            self.customer = customer
            self.deletedCustomer = deletedCustomer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeAPI.Customer.self)
            self.deletedCustomer = try? container.decode(DeletedCustomer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
            if let value = deletedCustomer { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case alipayAccount = "alipay_account"
    }

    public init(created: Int, customer: Customer? = nil, fingerprint: String, id: String, isLivemode: Bool, metadata: [String: String]? = nil, object: Object, paymentAmount: Int? = nil, paymentCurrency: String? = nil, isReusable: Bool, isUsed: Bool, username: String) {
        self.created = created
        self.customer = customer
        self.fingerprint = fingerprint
        self.id = id
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.paymentAmount = paymentAmount
        self.paymentCurrency = paymentCurrency
        self.isReusable = isReusable
        self.isUsed = isUsed
        self.username = username
    }

    private enum CodingKeys: String, CodingKey {
        case created
        case customer
        case fingerprint
        case id
        case isLivemode = "livemode"
        case metadata
        case object
        case paymentAmount = "payment_amount"
        case paymentCurrency = "payment_currency"
        case isReusable = "reusable"
        case isUsed = "used"
        case username
    }
}

public final class APIErrors: Codable {
    /// For card errors, the ID of the failed charge.
    public var charge: String?
    /// For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported.
    public var code: String?
    /// For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one.
    public var declineCode: String?
    /// A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported.
    public var docURL: String?
    /// A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.
    public var message: String?
    /// If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.
    public var param: String?
    public var paymentIntent: PaymentIntent?
    public var paymentMethod: PaymentMethod?
    /// If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors.
    public var paymentMethodType: String?
    public var setupIntent: SetupIntent?
    /// The source object for errors returned on a request involving a source.
    public var source: Source?
    /// The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`
    public var type: `Type`

    /// The source object for errors returned on a request involving a source.
    public final class Source: Codable {
        public var bankAccount: BankAccount?
        public var card: Card?
        /// `Source` objects allow you to accept a variety of payment methods. They
        /// represent a customer's payment instrument, and can be used with the Stripe API
        /// just like a `Card` object: once chargeable, they can be charged, or can be
        /// attached to customers.
        /// 
        /// Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
        public var source: StripeAPI.Source?

        public init(bankAccount: BankAccount? = nil, card: Card? = nil, source: StripeAPI.Source? = nil) {
            self.bankAccount = bankAccount
            self.card = card
            self.source = source
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.bankAccount = try? container.decode(BankAccount.self)
            self.card = try? container.decode(Card.self)
            self.source = try? container.decode(StripeAPI.Source.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = bankAccount { try container.encode(value) }
            if let value = card { try container.encode(value) }
            if let value = source { try container.encode(value) }
        }
    }

    /// The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`
    public enum `Type`: String, Codable, CaseIterable {
        case apiError = "api_error"
        case cardError = "card_error"
        case idempotencyError = "idempotency_error"
        case invalidRequestError = "invalid_request_error"
    }

    public init(charge: String? = nil, code: String? = nil, declineCode: String? = nil, docURL: String? = nil, message: String? = nil, param: String? = nil, paymentIntent: PaymentIntent? = nil, paymentMethod: PaymentMethod? = nil, paymentMethodType: String? = nil, setupIntent: SetupIntent? = nil, source: Source? = nil, type: `Type`) {
        self.charge = charge
        self.code = code
        self.declineCode = declineCode
        self.docURL = docURL
        self.message = message
        self.param = param
        self.paymentIntent = paymentIntent
        self.paymentMethod = paymentMethod
        self.paymentMethodType = paymentMethodType
        self.setupIntent = setupIntent
        self.source = source
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case charge
        case code
        case declineCode = "decline_code"
        case docURL = "doc_url"
        case message
        case param
        case paymentIntent = "payment_intent"
        case paymentMethod = "payment_method"
        case paymentMethodType = "payment_method_type"
        case setupIntent = "setup_intent"
        case source
        case type
    }
}

public struct ApplePayDomain: Codable {
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    public var domainName: String
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case applePayDomain = "apple_pay_domain"
    }

    public init(created: Int, domainName: String, id: String, isLivemode: Bool, object: Object) {
        self.created = created
        self.domainName = domainName
        self.id = id
        self.isLivemode = isLivemode
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case created
        case domainName = "domain_name"
        case id
        case isLivemode = "livemode"
        case object
    }
}

public struct Application: Codable {
    /// Unique identifier for the object.
    public var id: String
    /// The name of the application.
    public var name: String?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case application
    }

    public init(id: String, name: String? = nil, object: Object) {
        self.id = id
        self.name = name
        self.object = object
    }
}

/// PlatformFee
public struct ApplicationFee: Codable {
    /// ID of the Stripe account this fee was taken from.
    public var account: Account
    /// Amount earned, in %s.
    public var amount: Int
    /// Amount in %s refunded (can be less than the amount attribute on the fee if a partial refund was issued)
    public var amountRefunded: Int
    /// ID of the Connect application that earned the fee.
    public var application: Application
    /// Balance transaction that describes the impact of this collected application fee on your account balance (not including refunds).
    public var balanceTransaction: BalanceTransaction?
    /// ID of the charge that the application fee was taken from.
    public var charge: Charge
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// ID of the corresponding charge on the platform account, if this fee was the result of a charge using the `destination` parameter.
    public var originatingTransaction: OriginatingTransaction?
    /// Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false.
    public var isRefunded: Bool
    /// FeeRefundList
    ///
    /// A list of refunds that have been applied to the fee.
    public var refunds: Refunds

    /// ID of the Stripe account this fee was taken from.
    public final class Account: Codable {
        public var string: String?
        public var account: StripeAPI.Account?

        public init(string: String? = nil, account: StripeAPI.Account? = nil) {
            self.string = string
            self.account = account
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.account = try? container.decode(StripeAPI.Account.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = account { try container.encode(value) }
        }
    }

    /// ID of the Connect application that earned the fee.
    public final class Application: Codable {
        public var string: String?
        public var application: StripeAPI.Application?

        public init(string: String? = nil, application: StripeAPI.Application? = nil) {
            self.string = string
            self.application = application
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.application = try? container.decode(StripeAPI.Application.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = application { try container.encode(value) }
        }
    }

    /// Balance transaction that describes the impact of this collected application fee on your account balance (not including refunds).
    public final class BalanceTransaction: Codable {
        public var string: String?
        public var balanceTransaction: StripeAPI.BalanceTransaction?

        public init(string: String? = nil, balanceTransaction: StripeAPI.BalanceTransaction? = nil) {
            self.string = string
            self.balanceTransaction = balanceTransaction
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.balanceTransaction = try? container.decode(StripeAPI.BalanceTransaction.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = balanceTransaction { try container.encode(value) }
        }
    }

    /// ID of the charge that the application fee was taken from.
    public final class Charge: Codable {
        public var string: String?
        public var charge: StripeAPI.Charge?

        public init(string: String? = nil, charge: StripeAPI.Charge? = nil) {
            self.string = string
            self.charge = charge
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.charge = try? container.decode(StripeAPI.Charge.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = charge { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case applicationFee = "application_fee"
    }

    /// ID of the corresponding charge on the platform account, if this fee was the result of a charge using the `destination` parameter.
    public struct OriginatingTransaction: Codable {
        public var string: String?
        public var charge: Charge?

        public init(string: String? = nil, charge: Charge? = nil) {
            self.string = string
            self.charge = charge
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.charge = try? container.decode(Charge.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = charge { try container.encode(value) }
        }
    }

    /// FeeRefundList
    ///
    /// A list of refunds that have been applied to the fee.
    public struct Refunds: Codable {
        /// Details about each object.
        public var data: [FeeRefund]
        /// True if this list has another page of items after this one that can be fetched.
        public var hasMore: Bool
        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public var object: Object
        /// The URL where this list can be accessed.
        public var url: String

        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public enum Object: String, Codable, CaseIterable {
            case list
        }

        public init(data: [FeeRefund], hasMore: Bool, object: Object, url: String) {
            self.data = data
            self.hasMore = hasMore
            self.object = object
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case data
            case hasMore = "has_more"
            case object
            case url
        }
    }

    public init(account: Account, amount: Int, amountRefunded: Int, application: Application, balanceTransaction: BalanceTransaction? = nil, charge: Charge, created: Int, currency: String, id: String, isLivemode: Bool, object: Object, originatingTransaction: OriginatingTransaction? = nil, isRefunded: Bool, refunds: Refunds) {
        self.account = account
        self.amount = amount
        self.amountRefunded = amountRefunded
        self.application = application
        self.balanceTransaction = balanceTransaction
        self.charge = charge
        self.created = created
        self.currency = currency
        self.id = id
        self.isLivemode = isLivemode
        self.object = object
        self.originatingTransaction = originatingTransaction
        self.isRefunded = isRefunded
        self.refunds = refunds
    }

    private enum CodingKeys: String, CodingKey {
        case account
        case amount
        case amountRefunded = "amount_refunded"
        case application
        case balanceTransaction = "balance_transaction"
        case charge
        case created
        case currency
        case id
        case isLivemode = "livemode"
        case object
        case originatingTransaction = "originating_transaction"
        case isRefunded = "refunded"
        case refunds
    }
}

public struct AutomaticTax: Codable {
    /// Whether Stripe automatically computes tax on this invoice.
    public var isEnabled: Bool
    /// The status of the most recent automated tax calculation for this invoice.
    public var status: Status?

    /// The status of the most recent automated tax calculation for this invoice.
    public enum Status: String, Codable, CaseIterable {
        case complete
        case failed
        case requiresLocationInputs = "requires_location_inputs"
    }

    public init(isEnabled: Bool, status: Status? = nil) {
        self.isEnabled = isEnabled
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case isEnabled = "enabled"
        case status
    }
}

/// This is an object representing your Stripe balance. You can retrieve it to see
/// the balance currently on your Stripe account.
/// 
/// You can also retrieve the balance history, which contains a list of
/// [transactions](https://stripe.com/docs/reporting/balance-transaction-types) that contributed to the balance
/// (charges, payouts, and so forth).
/// 
/// The available and pending amounts for each currency are broken down further by
/// payment source types.
/// 
/// Related guide: [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances).
public struct Balance: Codable {
    /// Funds that are available to be transferred or paid out, whether automatically by Stripe or explicitly via the [Transfers API](https://stripe.com/docs/api#transfers) or [Payouts API](https://stripe.com/docs/api#payouts). The available balance for each currency and payment type can be found in the `source_types` property.
    public var available: [BalanceAmount]
    /// Funds held due to negative balances on connected Custom accounts. The connect reserve balance for each currency and payment type can be found in the `source_types` property.
    public var connectReserved: [BalanceAmount]?
    /// Funds that can be paid out using Instant Payouts.
    public var instantAvailable: [BalanceAmount]?
    /// BalanceDetail
    public var issuing: BalanceDetail?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Funds that are not yet available in the balance, due to the 7-day rolling pay cycle. The pending balance for each currency, and for each payment type, can be found in the `source_types` property.
    public var pending: [BalanceAmount]

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case balance
    }

    public init(available: [BalanceAmount], connectReserved: [BalanceAmount]? = nil, instantAvailable: [BalanceAmount]? = nil, issuing: BalanceDetail? = nil, isLivemode: Bool, object: Object, pending: [BalanceAmount]) {
        self.available = available
        self.connectReserved = connectReserved
        self.instantAvailable = instantAvailable
        self.issuing = issuing
        self.isLivemode = isLivemode
        self.object = object
        self.pending = pending
    }

    private enum CodingKeys: String, CodingKey {
        case available
        case connectReserved = "connect_reserved"
        case instantAvailable = "instant_available"
        case issuing
        case isLivemode = "livemode"
        case object
        case pending
    }
}

public struct BalanceAmount: Codable {
    /// Balance amount.
    public var amount: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// BalanceAmountBySourceType
    public var sourceTypes: BalanceAmountBySourceType?

    public init(amount: Int, currency: String, sourceTypes: BalanceAmountBySourceType? = nil) {
        self.amount = amount
        self.currency = currency
        self.sourceTypes = sourceTypes
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case currency
        case sourceTypes = "source_types"
    }
}

public struct BalanceAmountBySourceType: Codable {
    /// Amount for bank account.
    public var bankAccount: Int?
    /// Amount for card.
    public var card: Int?
    /// Amount for FPX.
    public var fpx: Int?

    public init(bankAccount: Int? = nil, card: Int? = nil, fpx: Int? = nil) {
        self.bankAccount = bankAccount
        self.card = card
        self.fpx = fpx
    }

    private enum CodingKeys: String, CodingKey {
        case bankAccount = "bank_account"
        case card
        case fpx
    }
}

public struct BalanceDetail: Codable {
    /// Funds that are available for use.
    public var available: [BalanceAmount]

    public init(available: [BalanceAmount]) {
        self.available = available
    }
}

/// Balance transactions represent funds moving through your Stripe account.
/// They're created for every type of transaction that comes into or flows out of your Stripe account balance.
/// 
/// Related guide: [Balance Transaction Types](https://stripe.com/docs/reports/balance-transaction-types).
public final class BalanceTransaction: Codable {
    /// Gross amount of the transaction, in %s.
    public var amount: Int
    /// The date the transaction's net funds will become available in the Stripe balance.
    public var availableOn: Int
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// An arbitrary string attached to the object. Often useful for displaying to users.
    public var description: String?
    /// The exchange rate used, if applicable, for this transaction. Specifically, if money was converted from currency A to currency B, then the `amount` in currency A, times `exchange_rate`, would be the `amount` in currency B. For example, suppose you charged a customer 10.00 EUR. Then the PaymentIntent's `amount` would be `1000` and `currency` would be `eur`. Suppose this was converted into 12.34 USD in your Stripe account. Then the BalanceTransaction's `amount` would be `1234`, `currency` would be `usd`, and `exchange_rate` would be `1.234`.
    public var exchangeRate: Double?
    /// Fees (in %s) paid for this transaction.
    public var fee: Int
    /// Detailed breakdown of fees (in %s) paid for this transaction.
    public var feeDetails: [Fee]
    /// Unique identifier for the object.
    public var id: String
    /// Net amount of the transaction, in %s.
    public var net: Int
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// [Learn more](https://stripe.com/docs/reports/reporting-categories) about how reporting categories can help you understand balance transactions from an accounting perspective.
    public var reportingCategory: String
    /// The Stripe object to which this transaction is related.
    public var source: Source?
    /// If the transaction's net funds are available in the Stripe balance yet. Either `available` or `pending`.
    public var status: String
    /// Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. [Learn more](https://stripe.com/docs/reports/balance-transaction-types) about balance transaction types and what they represent. If you are looking to classify transactions for accounting purposes, you might want to consider `reporting_category` instead.
    public var type: `Type`

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case balanceTransaction = "balance_transaction"
    }

    /// The Stripe object to which this transaction is related.
    public struct Source: Codable {
        public var string: String?
        public var applicationFee: ApplicationFee?
        public var charge: Charge?
        public var connectCollectionTransfer: ConnectCollectionTransfer?
        public var dispute: Dispute?
        public var feeRefund: FeeRefund?
        public var issuingAuthorization: IssuingAuthorization?
        public var issuingDispute: IssuingDispute?
        public var issuingTransaction: IssuingTransaction?
        public var payout: Payout?
        /// PlatformTax
        public var platformTaxFee: PlatformTaxFee?
        public var refund: Refund?
        public var reserveTransaction: ReserveTransaction?
        public var taxDeductedAtSource: TaxDeductedAtSource?
        public var topup: Topup?
        public var transfer: Transfer?
        public var transferReversal: TransferReversal?

        public init(string: String? = nil, applicationFee: ApplicationFee? = nil, charge: Charge? = nil, connectCollectionTransfer: ConnectCollectionTransfer? = nil, dispute: Dispute? = nil, feeRefund: FeeRefund? = nil, issuingAuthorization: IssuingAuthorization? = nil, issuingDispute: IssuingDispute? = nil, issuingTransaction: IssuingTransaction? = nil, payout: Payout? = nil, platformTaxFee: PlatformTaxFee? = nil, refund: Refund? = nil, reserveTransaction: ReserveTransaction? = nil, taxDeductedAtSource: TaxDeductedAtSource? = nil, topup: Topup? = nil, transfer: Transfer? = nil, transferReversal: TransferReversal? = nil) {
            self.string = string
            self.applicationFee = applicationFee
            self.charge = charge
            self.connectCollectionTransfer = connectCollectionTransfer
            self.dispute = dispute
            self.feeRefund = feeRefund
            self.issuingAuthorization = issuingAuthorization
            self.issuingDispute = issuingDispute
            self.issuingTransaction = issuingTransaction
            self.payout = payout
            self.platformTaxFee = platformTaxFee
            self.refund = refund
            self.reserveTransaction = reserveTransaction
            self.taxDeductedAtSource = taxDeductedAtSource
            self.topup = topup
            self.transfer = transfer
            self.transferReversal = transferReversal
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.applicationFee = try? container.decode(ApplicationFee.self)
            self.charge = try? container.decode(Charge.self)
            self.connectCollectionTransfer = try? container.decode(ConnectCollectionTransfer.self)
            self.dispute = try? container.decode(Dispute.self)
            self.feeRefund = try? container.decode(FeeRefund.self)
            self.issuingAuthorization = try? container.decode(IssuingAuthorization.self)
            self.issuingDispute = try? container.decode(IssuingDispute.self)
            self.issuingTransaction = try? container.decode(IssuingTransaction.self)
            self.payout = try? container.decode(Payout.self)
            self.platformTaxFee = try? container.decode(PlatformTaxFee.self)
            self.refund = try? container.decode(Refund.self)
            self.reserveTransaction = try? container.decode(ReserveTransaction.self)
            self.taxDeductedAtSource = try? container.decode(TaxDeductedAtSource.self)
            self.topup = try? container.decode(Topup.self)
            self.transfer = try? container.decode(Transfer.self)
            self.transferReversal = try? container.decode(TransferReversal.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = applicationFee { try container.encode(value) }
            if let value = charge { try container.encode(value) }
            if let value = connectCollectionTransfer { try container.encode(value) }
            if let value = dispute { try container.encode(value) }
            if let value = feeRefund { try container.encode(value) }
            if let value = issuingAuthorization { try container.encode(value) }
            if let value = issuingDispute { try container.encode(value) }
            if let value = issuingTransaction { try container.encode(value) }
            if let value = payout { try container.encode(value) }
            if let value = platformTaxFee { try container.encode(value) }
            if let value = refund { try container.encode(value) }
            if let value = reserveTransaction { try container.encode(value) }
            if let value = taxDeductedAtSource { try container.encode(value) }
            if let value = topup { try container.encode(value) }
            if let value = transfer { try container.encode(value) }
            if let value = transferReversal { try container.encode(value) }
        }
    }

    /// Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. [Learn more](https://stripe.com/docs/reports/balance-transaction-types) about balance transaction types and what they represent. If you are looking to classify transactions for accounting purposes, you might want to consider `reporting_category` instead.
    public enum `Type`: String, Codable, CaseIterable {
        case adjustment
        case advance
        case advanceFunding = "advance_funding"
        case anticipationRepayment = "anticipation_repayment"
        case applicationFee = "application_fee"
        case applicationFeeRefund = "application_fee_refund"
        case charge
        case connectCollectionTransfer = "connect_collection_transfer"
        case contribution
        case issuingAuthorizationHold = "issuing_authorization_hold"
        case issuingAuthorizationRelease = "issuing_authorization_release"
        case issuingDispute = "issuing_dispute"
        case issuingTransaction = "issuing_transaction"
        case payment
        case paymentFailureRefund = "payment_failure_refund"
        case paymentRefund = "payment_refund"
        case payout
        case payoutCancel = "payout_cancel"
        case payoutFailure = "payout_failure"
        case refund
        case refundFailure = "refund_failure"
        case reserveTransaction = "reserve_transaction"
        case reservedFunds = "reserved_funds"
        case stripeFee = "stripe_fee"
        case stripeFxFee = "stripe_fx_fee"
        case taxFee = "tax_fee"
        case topup
        case topupReversal = "topup_reversal"
        case transfer
        case transferCancel = "transfer_cancel"
        case transferFailure = "transfer_failure"
        case transferRefund = "transfer_refund"
    }

    public init(amount: Int, availableOn: Int, created: Int, currency: String, description: String? = nil, exchangeRate: Double? = nil, fee: Int, feeDetails: [Fee], id: String, net: Int, object: Object, reportingCategory: String, source: Source? = nil, status: String, type: `Type`) {
        self.amount = amount
        self.availableOn = availableOn
        self.created = created
        self.currency = currency
        self.description = description
        self.exchangeRate = exchangeRate
        self.fee = fee
        self.feeDetails = feeDetails
        self.id = id
        self.net = net
        self.object = object
        self.reportingCategory = reportingCategory
        self.source = source
        self.status = status
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case availableOn = "available_on"
        case created
        case currency
        case description
        case exchangeRate = "exchange_rate"
        case fee
        case feeDetails = "fee_details"
        case id
        case net
        case object
        case reportingCategory = "reporting_category"
        case source
        case status
        case type
    }
}

/// These bank accounts are payment methods on `Customer` objects.
/// 
/// On the other hand [External Accounts](https://stripe.com/docs/api#external_accounts) are transfer
/// destinations on `Account` objects for [Custom accounts](https://stripe.com/docs/connect/custom-accounts).
/// They can be bank accounts or debit cards as well, and are documented in the links above.
/// 
/// Related guide: [Bank Debits and Transfers](https://stripe.com/docs/payments/bank-debits-transfers).
public struct BankAccount: Codable {
    /// The ID of the account that the bank account is associated with.
    public var account: Account?
    /// The name of the person or business that owns the bank account.
    public var accountHolderName: String?
    /// The type of entity that holds the account. This can be either `individual` or `company`.
    public var accountHolderType: String?
    /// The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`.
    public var accountType: String?
    /// A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout.
    public var availablePayoutMethods: [AvailablePayoutMethod]?
    /// Name of the bank associated with the routing number (e.g., `WELLS FARGO`).
    public var bankName: String?
    /// Two-letter ISO code representing the country the bank account is located in.
    public var country: String
    /// Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
    public var currency: String
    /// The ID of the customer that the bank account is associated with.
    public var customer: Customer?
    /// Whether this bank account is the default external account for its currency.
    public var isDefaultForCurrency: Bool?
    /// Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
    public var fingerprint: String?
    /// Unique identifier for the object.
    public var id: String
    /// The last four digits of the bank account number.
    public var last4: String
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The routing transit number for the bank account.
    public var routingNumber: String?
    /// For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a transfer sent to this bank account fails, we'll set the status to `errored` and will not continue to send transfers until the bank details are updated.
    /// 
    /// For external accounts, possible values are `new` and `errored`. Validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated.
    public var status: String

    /// The ID of the account that the bank account is associated with.
    public final class Account: Codable {
        public var string: String?
        public var account: StripeAPI.Account?

        public init(string: String? = nil, account: StripeAPI.Account? = nil) {
            self.string = string
            self.account = account
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.account = try? container.decode(StripeAPI.Account.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = account { try container.encode(value) }
        }
    }

    public enum AvailablePayoutMethod: String, Codable, CaseIterable {
        case instant
        case standard
    }

    /// The ID of the customer that the bank account is associated with.
    public final class Customer: Codable {
        public var string: String?
        public var customer: StripeAPI.Customer?
        public var deletedCustomer: DeletedCustomer?

        public init(string: String? = nil, customer: StripeAPI.Customer? = nil, deletedCustomer: DeletedCustomer? = nil) {
            self.string = string
            self.customer = customer
            self.deletedCustomer = deletedCustomer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeAPI.Customer.self)
            self.deletedCustomer = try? container.decode(DeletedCustomer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
            if let value = deletedCustomer { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case bankAccount = "bank_account"
    }

    public init(account: Account? = nil, accountHolderName: String? = nil, accountHolderType: String? = nil, accountType: String? = nil, availablePayoutMethods: [AvailablePayoutMethod]? = nil, bankName: String? = nil, country: String, currency: String, customer: Customer? = nil, isDefaultForCurrency: Bool? = nil, fingerprint: String? = nil, id: String, last4: String, metadata: [String: String]? = nil, object: Object, routingNumber: String? = nil, status: String) {
        self.account = account
        self.accountHolderName = accountHolderName
        self.accountHolderType = accountHolderType
        self.accountType = accountType
        self.availablePayoutMethods = availablePayoutMethods
        self.bankName = bankName
        self.country = country
        self.currency = currency
        self.customer = customer
        self.isDefaultForCurrency = isDefaultForCurrency
        self.fingerprint = fingerprint
        self.id = id
        self.last4 = last4
        self.metadata = metadata
        self.object = object
        self.routingNumber = routingNumber
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case account
        case accountHolderName = "account_holder_name"
        case accountHolderType = "account_holder_type"
        case accountType = "account_type"
        case availablePayoutMethods = "available_payout_methods"
        case bankName = "bank_name"
        case country
        case currency
        case customer
        case isDefaultForCurrency = "default_for_currency"
        case fingerprint
        case id
        case last4
        case metadata
        case object
        case routingNumber = "routing_number"
        case status
    }
}

/// Billing_details
public struct BillingDetails: Codable {
    /// Billing address.
    public var address: Address?
    /// Email address.
    public var email: String?
    /// Full name.
    public var name: String?
    /// Billing phone number (including extension).
    public var phone: String?

    /// Billing address.
    public final class Address: Codable {
        public var address: StripeAPI.Address?

        public init(address: StripeAPI.Address? = nil) {
            self.address = address
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.address = try? container.decode(StripeAPI.Address.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = address { try container.encode(value) }
        }
    }

    public init(address: Address? = nil, email: String? = nil, name: String? = nil, phone: String? = nil) {
        self.address = address
        self.email = email
        self.name = name
        self.phone = phone
    }
}

/// PortalConfiguration
///
/// A portal configuration describes the functionality and behavior of a portal session.
public struct BillingPortalConfiguration: Codable {
    /// Whether the configuration is active and can be used to create portal sessions.
    public var isActive: Bool
    /// ID of the Connect Application that created the configuration.
    public var application: String?
    /// PortalBusinessProfile
    public var businessProfile: PortalBusinessProfile
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.
    public var defaultReturnURL: String?
    /// PortalFeatures
    public var features: PortalFeatures
    /// Unique identifier for the object.
    public var id: String
    /// Whether the configuration is the default. If `true`, this configuration can be managed in the Dashboard and portal sessions will use this configuration unless it is overriden when creating the session.
    public var isDefault: Bool
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Time at which the object was last updated. Measured in seconds since the Unix epoch.
    public var updated: Int

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case billingPortalConfiguration = "billing_portal.configuration"
    }

    public init(isActive: Bool, application: String? = nil, businessProfile: PortalBusinessProfile, created: Int, defaultReturnURL: String? = nil, features: PortalFeatures, id: String, isDefault: Bool, isLivemode: Bool, metadata: [String: String]? = nil, object: Object, updated: Int) {
        self.isActive = isActive
        self.application = application
        self.businessProfile = businessProfile
        self.created = created
        self.defaultReturnURL = defaultReturnURL
        self.features = features
        self.id = id
        self.isDefault = isDefault
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.updated = updated
    }

    private enum CodingKeys: String, CodingKey {
        case isActive = "active"
        case application
        case businessProfile = "business_profile"
        case created
        case defaultReturnURL = "default_return_url"
        case features
        case id
        case isDefault = "is_default"
        case isLivemode = "livemode"
        case metadata
        case object
        case updated
    }
}

/// PortalSession
///
/// The Billing customer portal is a Stripe-hosted UI for subscription and
/// billing management.
/// 
/// A portal configuration describes the functionality and features that you
/// want to provide to your customers through the portal.
/// 
/// A portal session describes the instantiation of the customer portal for
/// a particular customer. By visiting the session's URL, the customer
/// can manage their subscriptions and billing details. For security reasons,
/// sessions are short-lived and will expire if the customer does not visit the URL.
/// Create sessions on-demand when customers intend to manage their subscriptions
/// and billing details.
/// 
/// Learn more in the [integration guide](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal).
public struct BillingPortalSession: Codable {
    /// The configuration used by this session, describing the features available.
    public var configuration: Configuration
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The ID of the customer for this session.
    public var customer: String
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.
    public var locale: Locale?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The account for which the session was created on behalf of. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://stripe.com/docs/connect/charges-transfers#on-behalf-of). Use the [Accounts API](https://stripe.com/docs/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account's branding settings, which the portal displays.
    public var onBehalfOf: String?
    /// The URL to redirect customers to when they click on the portal's link to return to your website.
    public var returnURL: String
    /// The short-lived URL of the session that gives customers access to the customer portal.
    public var url: String

    /// The configuration used by this session, describing the features available.
    public struct Configuration: Codable {
        public var string: String?
        /// PortalConfiguration
        ///
        /// A portal configuration describes the functionality and behavior of a portal session.
        public var billingPortalConfiguration: BillingPortalConfiguration?

        public init(string: String? = nil, billingPortalConfiguration: BillingPortalConfiguration? = nil) {
            self.string = string
            self.billingPortalConfiguration = billingPortalConfiguration
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.billingPortalConfiguration = try? container.decode(BillingPortalConfiguration.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = billingPortalConfiguration { try container.encode(value) }
        }
    }

    /// The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.
    public enum Locale: String, Codable, CaseIterable {
        case auto
        case bg
        case cs
        case da
        case de
        case el
        case en
        case enAU = "en-AU"
        case enCA = "en-CA"
        case enGB = "en-GB"
        case enIE = "en-IE"
        case enIN = "en-IN"
        case enNZ = "en-NZ"
        case enSG = "en-SG"
        case es
        case es419 = "es-419"
        case et
        case fi
        case fil
        case fr
        case frCA = "fr-CA"
        case hr
        case hu
        case id
        case it
        case ja
        case ko
        case lt
        case lv
        case ms
        case mt
        case nb
        case nl
        case pl
        case pt
        case ptBR = "pt-BR"
        case ro
        case ru
        case sk
        case sl
        case sv
        case th
        case tr
        case vi
        case zh
        case zhHK = "zh-HK"
        case zhTW = "zh-TW"
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case billingPortalSession = "billing_portal.session"
    }

    public init(configuration: Configuration, created: Int, customer: String, id: String, isLivemode: Bool, locale: Locale? = nil, object: Object, onBehalfOf: String? = nil, returnURL: String, url: String) {
        self.configuration = configuration
        self.created = created
        self.customer = customer
        self.id = id
        self.isLivemode = isLivemode
        self.locale = locale
        self.object = object
        self.onBehalfOf = onBehalfOf
        self.returnURL = returnURL
        self.url = url
    }

    private enum CodingKeys: String, CodingKey {
        case configuration
        case created
        case customer
        case id
        case isLivemode = "livemode"
        case locale
        case object
        case onBehalfOf = "on_behalf_of"
        case returnURL = "return_url"
        case url
    }
}

public struct BitcoinReceiver: Codable {
    /// True when this bitcoin receiver has received a non-zero amount of bitcoin.
    public var isActive: Bool
    /// The amount of `currency` that you are collecting as payment.
    public var amount: Int
    /// The amount of `currency` to which `bitcoin_amount_received` has been converted.
    public var amountReceived: Int
    /// The amount of bitcoin that the customer should send to fill the receiver. The `bitcoin_amount` is denominated in Satoshi: there are 10^8 Satoshi in one bitcoin.
    public var bitcoinAmount: Int
    /// The amount of bitcoin that has been sent by the customer to this receiver.
    public var bitcoinAmountReceived: Int
    /// This URI can be displayed to the customer as a clickable link (to activate their bitcoin client) or as a QR code (for mobile wallets).
    public var bitcoinUri: String
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which the bitcoin will be converted.
    public var currency: String
    /// The customer ID of the bitcoin receiver.
    public var customer: String?
    /// An arbitrary string attached to the object. Often useful for displaying to users.
    public var description: String?
    /// The customer's email address, set by the API call that creates the receiver.
    public var email: String?
    /// This flag is initially false and updates to true when the customer sends the `bitcoin_amount` to this receiver.
    public var isFilled: Bool
    /// Unique identifier for the object.
    public var id: String
    /// A bitcoin address that is specific to this receiver. The customer can send bitcoin to this address to fill the receiver.
    public var inboundAddress: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The ID of the payment created from the receiver, if any. Hidden when viewing the receiver with a publishable key.
    public var payment: String?
    /// The refund address of this bitcoin receiver.
    public var refundAddress: String?
    /// BitcoinTransactionList
    ///
    /// A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key.
    public var transactions: Transactions?
    /// This receiver contains uncaptured funds that can be used for a payment or refunded.
    public var isUncapturedFunds: Bool
    /// Indicate if this source is used for payment.
    public var isUsedForPayment: Bool?

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case bitcoinReceiver = "bitcoin_receiver"
    }

    /// BitcoinTransactionList
    ///
    /// A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key.
    public struct Transactions: Codable {
        /// Details about each object.
        public var data: [BitcoinTransaction]
        /// True if this list has another page of items after this one that can be fetched.
        public var hasMore: Bool
        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public var object: Object
        /// The URL where this list can be accessed.
        public var url: String

        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public enum Object: String, Codable, CaseIterable {
            case list
        }

        public init(data: [BitcoinTransaction], hasMore: Bool, object: Object, url: String) {
            self.data = data
            self.hasMore = hasMore
            self.object = object
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case data
            case hasMore = "has_more"
            case object
            case url
        }
    }

    public init(isActive: Bool, amount: Int, amountReceived: Int, bitcoinAmount: Int, bitcoinAmountReceived: Int, bitcoinUri: String, created: Int, currency: String, customer: String? = nil, description: String? = nil, email: String? = nil, isFilled: Bool, id: String, inboundAddress: String, isLivemode: Bool, metadata: [String: String]? = nil, object: Object, payment: String? = nil, refundAddress: String? = nil, transactions: Transactions? = nil, isUncapturedFunds: Bool, isUsedForPayment: Bool? = nil) {
        self.isActive = isActive
        self.amount = amount
        self.amountReceived = amountReceived
        self.bitcoinAmount = bitcoinAmount
        self.bitcoinAmountReceived = bitcoinAmountReceived
        self.bitcoinUri = bitcoinUri
        self.created = created
        self.currency = currency
        self.customer = customer
        self.description = description
        self.email = email
        self.isFilled = isFilled
        self.id = id
        self.inboundAddress = inboundAddress
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.payment = payment
        self.refundAddress = refundAddress
        self.transactions = transactions
        self.isUncapturedFunds = isUncapturedFunds
        self.isUsedForPayment = isUsedForPayment
    }

    private enum CodingKeys: String, CodingKey {
        case isActive = "active"
        case amount
        case amountReceived = "amount_received"
        case bitcoinAmount = "bitcoin_amount"
        case bitcoinAmountReceived = "bitcoin_amount_received"
        case bitcoinUri = "bitcoin_uri"
        case created
        case currency
        case customer
        case description
        case email
        case isFilled = "filled"
        case id
        case inboundAddress = "inbound_address"
        case isLivemode = "livemode"
        case metadata
        case object
        case payment
        case refundAddress = "refund_address"
        case transactions
        case isUncapturedFunds = "uncaptured_funds"
        case isUsedForPayment = "used_for_payment"
    }
}

public struct BitcoinTransaction: Codable {
    /// The amount of `currency` that the transaction was converted to in real-time.
    public var amount: Int
    /// The amount of bitcoin contained in the transaction.
    public var bitcoinAmount: Int
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which this transaction was converted.
    public var currency: String
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The receiver to which this transaction was sent.
    public var receiver: String

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case bitcoinTransaction = "bitcoin_transaction"
    }

    public init(amount: Int, bitcoinAmount: Int, created: Int, currency: String, id: String, object: Object, receiver: String) {
        self.amount = amount
        self.bitcoinAmount = bitcoinAmount
        self.created = created
        self.currency = currency
        self.id = id
        self.object = object
        self.receiver = receiver
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case bitcoinAmount = "bitcoin_amount"
        case created
        case currency
        case id
        case object
        case receiver
    }
}

/// AccountCapability
///
/// This is an object representing a capability for a Stripe account.
/// 
/// Related guide: [Account capabilities](https://stripe.com/docs/connect/account-capabilities).
public struct Capability: Codable {
    /// The account for which the capability enables functionality.
    public var account: Account
    /// AccountCapabilityFutureRequirements
    public var futureRequirements: AccountCapabilityFutureRequirements?
    /// The identifier for the capability.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Whether the capability has been requested.
    public var isRequested: Bool
    /// Time at which the capability was requested. Measured in seconds since the Unix epoch.
    public var requestedAt: Int?
    /// AccountCapabilityRequirements
    public var requirements: AccountCapabilityRequirements?
    /// The status of the capability. Can be `active`, `inactive`, `pending`, or `unrequested`.
    public var status: Status

    /// The account for which the capability enables functionality.
    public final class Account: Codable {
        public var string: String?
        public var account: StripeAPI.Account?

        public init(string: String? = nil, account: StripeAPI.Account? = nil) {
            self.string = string
            self.account = account
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.account = try? container.decode(StripeAPI.Account.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = account { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case capability
    }

    /// The status of the capability. Can be `active`, `inactive`, `pending`, or `unrequested`.
    public enum Status: String, Codable, CaseIterable {
        case active
        case disabled
        case inactive
        case pending
        case unrequested
    }

    public init(account: Account, futureRequirements: AccountCapabilityFutureRequirements? = nil, id: String, object: Object, isRequested: Bool, requestedAt: Int? = nil, requirements: AccountCapabilityRequirements? = nil, status: Status) {
        self.account = account
        self.futureRequirements = futureRequirements
        self.id = id
        self.object = object
        self.isRequested = isRequested
        self.requestedAt = requestedAt
        self.requirements = requirements
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case account
        case futureRequirements = "future_requirements"
        case id
        case object
        case isRequested = "requested"
        case requestedAt = "requested_at"
        case requirements
        case status
    }
}

/// You can store multiple cards on a customer in order to charge the customer
/// later. You can also store multiple debit cards on a recipient in order to
/// transfer to those cards later.
/// 
/// Related guide: [Card Payments with Sources](https://stripe.com/docs/sources/cards).
public struct Card: Codable {
    /// The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead.
    public var account: Account?
    /// City/District/Suburb/Town/Village.
    public var addressCity: String?
    /// Billing address country, if provided when creating card.
    public var addressCountry: String?
    /// Address line 1 (Street address/PO Box/Company name).
    public var addressLine1: String?
    /// If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
    public var addressLine1Check: String?
    /// Address line 2 (Apartment/Suite/Unit/Building).
    public var addressLine2: String?
    /// State/County/Province/Region.
    public var addressState: String?
    /// ZIP or postal code.
    public var addressZip: String?
    /// If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
    public var addressZipCheck: String?
    /// A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout.
    public var availablePayoutMethods: [AvailablePayoutMethod]?
    /// Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.
    public var brand: String
    /// Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
    public var country: String?
    /// Three-letter [ISO code for currency](https://stripe.com/docs/payouts). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency.
    public var currency: String?
    /// The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead.
    public var customer: Customer?
    /// If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge).
    public var cvcCheck: String?
    /// Whether this card is the default external account for its currency.
    public var isDefaultForCurrency: Bool?
    /// (For tokenized numbers only.) The last four digits of the device account number.
    public var dynamicLast4: String?
    /// Two-digit number representing the card's expiration month.
    public var expMonth: Int
    /// Four-digit number representing the card's expiration year.
    public var expYear: Int
    /// Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
    /// 
    /// *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
    public var fingerprint: String?
    /// Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
    public var funding: String
    /// Unique identifier for the object.
    public var id: String
    /// The last four digits of the card.
    public var last4: String
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// Cardholder name.
    public var name: String?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead.
    public var recipient: Recipient?
    /// If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null.
    public var tokenizationMethod: String?

    /// The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead.
    public final class Account: Codable {
        public var string: String?
        public var account: StripeAPI.Account?

        public init(string: String? = nil, account: StripeAPI.Account? = nil) {
            self.string = string
            self.account = account
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.account = try? container.decode(StripeAPI.Account.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = account { try container.encode(value) }
        }
    }

    public enum AvailablePayoutMethod: String, Codable, CaseIterable {
        case instant
        case standard
    }

    /// The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead.
    public final class Customer: Codable {
        public var string: String?
        public var customer: StripeAPI.Customer?
        public var deletedCustomer: DeletedCustomer?

        public init(string: String? = nil, customer: StripeAPI.Customer? = nil, deletedCustomer: DeletedCustomer? = nil) {
            self.string = string
            self.customer = customer
            self.deletedCustomer = deletedCustomer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeAPI.Customer.self)
            self.deletedCustomer = try? container.decode(DeletedCustomer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
            if let value = deletedCustomer { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case card
    }

    /// The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead.
    public final class Recipient: Codable {
        public var string: String?
        public var recipient: StripeAPI.Recipient?

        public init(string: String? = nil, recipient: StripeAPI.Recipient? = nil) {
            self.string = string
            self.recipient = recipient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.recipient = try? container.decode(StripeAPI.Recipient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = recipient { try container.encode(value) }
        }
    }

    public init(account: Account? = nil, addressCity: String? = nil, addressCountry: String? = nil, addressLine1: String? = nil, addressLine1Check: String? = nil, addressLine2: String? = nil, addressState: String? = nil, addressZip: String? = nil, addressZipCheck: String? = nil, availablePayoutMethods: [AvailablePayoutMethod]? = nil, brand: String, country: String? = nil, currency: String? = nil, customer: Customer? = nil, cvcCheck: String? = nil, isDefaultForCurrency: Bool? = nil, dynamicLast4: String? = nil, expMonth: Int, expYear: Int, fingerprint: String? = nil, funding: String, id: String, last4: String, metadata: [String: String]? = nil, name: String? = nil, object: Object, recipient: Recipient? = nil, tokenizationMethod: String? = nil) {
        self.account = account
        self.addressCity = addressCity
        self.addressCountry = addressCountry
        self.addressLine1 = addressLine1
        self.addressLine1Check = addressLine1Check
        self.addressLine2 = addressLine2
        self.addressState = addressState
        self.addressZip = addressZip
        self.addressZipCheck = addressZipCheck
        self.availablePayoutMethods = availablePayoutMethods
        self.brand = brand
        self.country = country
        self.currency = currency
        self.customer = customer
        self.cvcCheck = cvcCheck
        self.isDefaultForCurrency = isDefaultForCurrency
        self.dynamicLast4 = dynamicLast4
        self.expMonth = expMonth
        self.expYear = expYear
        self.fingerprint = fingerprint
        self.funding = funding
        self.id = id
        self.last4 = last4
        self.metadata = metadata
        self.name = name
        self.object = object
        self.recipient = recipient
        self.tokenizationMethod = tokenizationMethod
    }

    private enum CodingKeys: String, CodingKey {
        case account
        case addressCity = "address_city"
        case addressCountry = "address_country"
        case addressLine1 = "address_line1"
        case addressLine1Check = "address_line1_check"
        case addressLine2 = "address_line2"
        case addressState = "address_state"
        case addressZip = "address_zip"
        case addressZipCheck = "address_zip_check"
        case availablePayoutMethods = "available_payout_methods"
        case brand
        case country
        case currency
        case customer
        case cvcCheck = "cvc_check"
        case isDefaultForCurrency = "default_for_currency"
        case dynamicLast4 = "dynamic_last4"
        case expMonth = "exp_month"
        case expYear = "exp_year"
        case fingerprint
        case funding
        case id
        case last4
        case metadata
        case name
        case object
        case recipient
        case tokenizationMethod = "tokenization_method"
    }
}

/// Card_generated_from_payment_method_details
public struct CardGeneratedFromPaymentMethodDetails: Codable {
    /// Payment_method_details_card_present
    public var cardPresent: PaymentMethodDetailsCardPresent?
    /// The type of payment method transaction-specific details from the transaction that generated this `card` payment method. Always `card_present`.
    public var type: String

    public init(cardPresent: PaymentMethodDetailsCardPresent? = nil, type: String) {
        self.cardPresent = cardPresent
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case cardPresent = "card_present"
        case type
    }
}

public struct CardIssuingAccountTermsOfService: Codable {
    /// The Unix timestamp marking when the account representative accepted the service agreement.
    public var date: Int?
    /// The IP address from which the account representative accepted the service agreement.
    public var ip: String?
    /// The user agent of the browser from which the account representative accepted the service agreement.
    public var userAgent: String?

    public init(date: Int? = nil, ip: String? = nil, userAgent: String? = nil) {
        self.date = date
        self.ip = ip
        self.userAgent = userAgent
    }

    private enum CodingKeys: String, CodingKey {
        case date
        case ip
        case userAgent = "user_agent"
    }
}

/// To charge a credit or a debit card, you create a `Charge` object. You can
/// retrieve and refund individual charges as well as list all charges. Charges
/// are identified by a unique, random ID.
/// 
/// Related guide: [Accept a payment with the Charges API](https://stripe.com/docs/payments/accept-a-payment-charges).
public struct Charge: Codable {
    /// Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
    public var amount: Int
    /// Amount in %s captured (can be less than the amount attribute on the charge if a partial capture was made).
    public var amountCaptured: Int
    /// Amount in %s refunded (can be less than the amount attribute on the charge if a partial refund was issued).
    public var amountRefunded: Int
    /// ID of the Connect application that created the charge.
    public var application: Application?
    /// The application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details.
    public var applicationFee: ApplicationFee?
    /// The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details.
    public var applicationFeeAmount: Int?
    /// ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).
    public var balanceTransaction: BalanceTransaction?
    /// Billing_details
    public var billingDetails: BillingDetails
    /// The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined.
    public var calculatedStatementDescriptor: String?
    /// If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.
    public var isCaptured: Bool
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// ID of the customer this charge is for if one exists.
    public var customer: Customer?
    /// An arbitrary string attached to the object. Often useful for displaying to users.
    public var description: String?
    /// Whether the charge has been disputed.
    public var isDisputed: Bool
    /// Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes).
    public var failureCode: String?
    /// Message to user further explaining reason for charge failure if available.
    public var failureMessage: String?
    /// Information on fraud assessments for the charge.
    public var fraudDetails: FraudDetails?
    /// Unique identifier for the object.
    public var id: String
    /// ID of the invoice this charge is for if one exists.
    public var invoice: Invoice?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers) for details.
    public var onBehalfOf: OnBehalfOf?
    /// ID of the order this charge is for if one exists.
    public var order: Order?
    /// Details about whether the payment was accepted, and why. See [understanding declines](https://stripe.com/docs/declines) for details.
    public var outcome: Outcome?
    /// `true` if the charge succeeded, or was successfully authorized for later capture.
    public var isPaid: Bool
    /// ID of the PaymentIntent associated with this charge, if one exists.
    public var paymentIntent: PaymentIntent?
    /// ID of the payment method used in this charge.
    public var paymentMethod: String?
    /// Details about the payment method at the time of the transaction.
    public var paymentMethodDetails: PaymentMethodDetails?
    /// This is the email address that the receipt for this charge was sent to.
    public var receiptEmail: String?
    /// This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent.
    public var receiptNumber: String?
    /// This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt.
    public var receiptURL: String?
    /// Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.
    public var isRefunded: Bool
    /// RefundList
    ///
    /// A list of refunds that have been applied to the charge.
    public var refunds: Refunds
    /// ID of the review associated with this charge if one exists.
    public var review: Review?
    /// Shipping information for the charge.
    public var shipping: Shipping?
    /// The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.
    public var sourceTransfer: SourceTransfer?
    /// For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters.
    public var statementDescriptor: String?
    /// Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
    public var statementDescriptorSuffix: String?
    /// The status of the payment is either `succeeded`, `pending`, or `failed`.
    public var status: String
    /// ID of the transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter).
    public var transfer: Transfer?
    /// An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.
    public var transferData: TransferData?
    /// A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details.
    public var transferGroup: String?

    /// ID of the Connect application that created the charge.
    public final class Application: Codable {
        public var string: String?
        public var application: StripeAPI.Application?

        public init(string: String? = nil, application: StripeAPI.Application? = nil) {
            self.string = string
            self.application = application
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.application = try? container.decode(StripeAPI.Application.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = application { try container.encode(value) }
        }
    }

    /// The application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details.
    public final class ApplicationFee: Codable {
        public var string: String?
        public var applicationFee: StripeAPI.ApplicationFee?

        public init(string: String? = nil, applicationFee: StripeAPI.ApplicationFee? = nil) {
            self.string = string
            self.applicationFee = applicationFee
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.applicationFee = try? container.decode(StripeAPI.ApplicationFee.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = applicationFee { try container.encode(value) }
        }
    }

    /// ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).
    public final class BalanceTransaction: Codable {
        public var string: String?
        public var balanceTransaction: StripeAPI.BalanceTransaction?

        public init(string: String? = nil, balanceTransaction: StripeAPI.BalanceTransaction? = nil) {
            self.string = string
            self.balanceTransaction = balanceTransaction
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.balanceTransaction = try? container.decode(StripeAPI.BalanceTransaction.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = balanceTransaction { try container.encode(value) }
        }
    }

    /// ID of the customer this charge is for if one exists.
    public final class Customer: Codable {
        public var string: String?
        public var customer: StripeAPI.Customer?
        public var deletedCustomer: DeletedCustomer?

        public init(string: String? = nil, customer: StripeAPI.Customer? = nil, deletedCustomer: DeletedCustomer? = nil) {
            self.string = string
            self.customer = customer
            self.deletedCustomer = deletedCustomer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeAPI.Customer.self)
            self.deletedCustomer = try? container.decode(DeletedCustomer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
            if let value = deletedCustomer { try container.encode(value) }
        }
    }

    /// Information on fraud assessments for the charge.
    public struct FraudDetails: Codable {
        public var chargeFraudDetails: ChargeFraudDetails?

        public init(chargeFraudDetails: ChargeFraudDetails? = nil) {
            self.chargeFraudDetails = chargeFraudDetails
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.chargeFraudDetails = try? container.decode(ChargeFraudDetails.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = chargeFraudDetails { try container.encode(value) }
        }
    }

    /// ID of the invoice this charge is for if one exists.
    public final class Invoice: Codable {
        public var string: String?
        public var invoice: StripeAPI.Invoice?

        public init(string: String? = nil, invoice: StripeAPI.Invoice? = nil) {
            self.string = string
            self.invoice = invoice
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.invoice = try? container.decode(StripeAPI.Invoice.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = invoice { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case charge
    }

    /// The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers) for details.
    public struct OnBehalfOf: Codable {
        public var string: String?
        public var account: Account?

        public init(string: String? = nil, account: Account? = nil) {
            self.string = string
            self.account = account
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.account = try? container.decode(Account.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = account { try container.encode(value) }
        }
    }

    /// ID of the order this charge is for if one exists.
    public final class Order: Codable {
        public var string: String?
        public var order: StripeAPI.Order?

        public init(string: String? = nil, order: StripeAPI.Order? = nil) {
            self.string = string
            self.order = order
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.order = try? container.decode(StripeAPI.Order.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = order { try container.encode(value) }
        }
    }

    /// Details about whether the payment was accepted, and why. See [understanding declines](https://stripe.com/docs/declines) for details.
    public struct Outcome: Codable {
        public var chargeOutcome: ChargeOutcome?

        public init(chargeOutcome: ChargeOutcome? = nil) {
            self.chargeOutcome = chargeOutcome
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.chargeOutcome = try? container.decode(ChargeOutcome.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = chargeOutcome { try container.encode(value) }
        }
    }

    /// ID of the PaymentIntent associated with this charge, if one exists.
    public final class PaymentIntent: Codable {
        public var string: String?
        public var paymentIntent: StripeAPI.PaymentIntent?

        public init(string: String? = nil, paymentIntent: StripeAPI.PaymentIntent? = nil) {
            self.string = string
            self.paymentIntent = paymentIntent
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentIntent = try? container.decode(StripeAPI.PaymentIntent.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentIntent { try container.encode(value) }
        }
    }

    /// Details about the payment method at the time of the transaction.
    public final class PaymentMethodDetails: Codable {
        public var paymentMethodDetails: StripeAPI.PaymentMethodDetails?

        public init(paymentMethodDetails: StripeAPI.PaymentMethodDetails? = nil) {
            self.paymentMethodDetails = paymentMethodDetails
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodDetails = try? container.decode(StripeAPI.PaymentMethodDetails.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodDetails { try container.encode(value) }
        }
    }

    /// RefundList
    ///
    /// A list of refunds that have been applied to the charge.
    public struct Refunds: Codable {
        /// Details about each object.
        public var data: [Refund]
        /// True if this list has another page of items after this one that can be fetched.
        public var hasMore: Bool
        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public var object: Object
        /// The URL where this list can be accessed.
        public var url: String

        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public enum Object: String, Codable, CaseIterable {
            case list
        }

        public init(data: [Refund], hasMore: Bool, object: Object, url: String) {
            self.data = data
            self.hasMore = hasMore
            self.object = object
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case data
            case hasMore = "has_more"
            case object
            case url
        }
    }

    /// ID of the review associated with this charge if one exists.
    public final class Review: Codable {
        public var string: String?
        public var review: StripeAPI.Review?

        public init(string: String? = nil, review: StripeAPI.Review? = nil) {
            self.string = string
            self.review = review
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.review = try? container.decode(StripeAPI.Review.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = review { try container.encode(value) }
        }
    }

    /// Shipping information for the charge.
    public final class Shipping: Codable {
        public var shipping: StripeAPI.Shipping?

        public init(shipping: StripeAPI.Shipping? = nil) {
            self.shipping = shipping
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.shipping = try? container.decode(StripeAPI.Shipping.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = shipping { try container.encode(value) }
        }
    }

    /// The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.
    public struct SourceTransfer: Codable {
        public var string: String?
        public var transfer: Transfer?

        public init(string: String? = nil, transfer: Transfer? = nil) {
            self.string = string
            self.transfer = transfer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.transfer = try? container.decode(Transfer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = transfer { try container.encode(value) }
        }
    }

    /// ID of the transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter).
    public final class Transfer: Codable {
        public var string: String?
        public var transfer: StripeAPI.Transfer?

        public init(string: String? = nil, transfer: StripeAPI.Transfer? = nil) {
            self.string = string
            self.transfer = transfer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.transfer = try? container.decode(StripeAPI.Transfer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = transfer { try container.encode(value) }
        }
    }

    /// An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.
    public struct TransferData: Codable {
        public var chargeTransferData: ChargeTransferData?

        public init(chargeTransferData: ChargeTransferData? = nil) {
            self.chargeTransferData = chargeTransferData
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.chargeTransferData = try? container.decode(ChargeTransferData.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = chargeTransferData { try container.encode(value) }
        }
    }

    public init(amount: Int, amountCaptured: Int, amountRefunded: Int, application: Application? = nil, applicationFee: ApplicationFee? = nil, applicationFeeAmount: Int? = nil, balanceTransaction: BalanceTransaction? = nil, billingDetails: BillingDetails, calculatedStatementDescriptor: String? = nil, isCaptured: Bool, created: Int, currency: String, customer: Customer? = nil, description: String? = nil, isDisputed: Bool, failureCode: String? = nil, failureMessage: String? = nil, fraudDetails: FraudDetails? = nil, id: String, invoice: Invoice? = nil, isLivemode: Bool, metadata: [String: String], object: Object, onBehalfOf: OnBehalfOf? = nil, order: Order? = nil, outcome: Outcome? = nil, isPaid: Bool, paymentIntent: PaymentIntent? = nil, paymentMethod: String? = nil, paymentMethodDetails: PaymentMethodDetails? = nil, receiptEmail: String? = nil, receiptNumber: String? = nil, receiptURL: String? = nil, isRefunded: Bool, refunds: Refunds, review: Review? = nil, shipping: Shipping? = nil, sourceTransfer: SourceTransfer? = nil, statementDescriptor: String? = nil, statementDescriptorSuffix: String? = nil, status: String, transfer: Transfer? = nil, transferData: TransferData? = nil, transferGroup: String? = nil) {
        self.amount = amount
        self.amountCaptured = amountCaptured
        self.amountRefunded = amountRefunded
        self.application = application
        self.applicationFee = applicationFee
        self.applicationFeeAmount = applicationFeeAmount
        self.balanceTransaction = balanceTransaction
        self.billingDetails = billingDetails
        self.calculatedStatementDescriptor = calculatedStatementDescriptor
        self.isCaptured = isCaptured
        self.created = created
        self.currency = currency
        self.customer = customer
        self.description = description
        self.isDisputed = isDisputed
        self.failureCode = failureCode
        self.failureMessage = failureMessage
        self.fraudDetails = fraudDetails
        self.id = id
        self.invoice = invoice
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.onBehalfOf = onBehalfOf
        self.order = order
        self.outcome = outcome
        self.isPaid = isPaid
        self.paymentIntent = paymentIntent
        self.paymentMethod = paymentMethod
        self.paymentMethodDetails = paymentMethodDetails
        self.receiptEmail = receiptEmail
        self.receiptNumber = receiptNumber
        self.receiptURL = receiptURL
        self.isRefunded = isRefunded
        self.refunds = refunds
        self.review = review
        self.shipping = shipping
        self.sourceTransfer = sourceTransfer
        self.statementDescriptor = statementDescriptor
        self.statementDescriptorSuffix = statementDescriptorSuffix
        self.status = status
        self.transfer = transfer
        self.transferData = transferData
        self.transferGroup = transferGroup
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case amountCaptured = "amount_captured"
        case amountRefunded = "amount_refunded"
        case application
        case applicationFee = "application_fee"
        case applicationFeeAmount = "application_fee_amount"
        case balanceTransaction = "balance_transaction"
        case billingDetails = "billing_details"
        case calculatedStatementDescriptor = "calculated_statement_descriptor"
        case isCaptured = "captured"
        case created
        case currency
        case customer
        case description
        case isDisputed = "disputed"
        case failureCode = "failure_code"
        case failureMessage = "failure_message"
        case fraudDetails = "fraud_details"
        case id
        case invoice
        case isLivemode = "livemode"
        case metadata
        case object
        case onBehalfOf = "on_behalf_of"
        case order
        case outcome
        case isPaid = "paid"
        case paymentIntent = "payment_intent"
        case paymentMethod = "payment_method"
        case paymentMethodDetails = "payment_method_details"
        case receiptEmail = "receipt_email"
        case receiptNumber = "receipt_number"
        case receiptURL = "receipt_url"
        case isRefunded = "refunded"
        case refunds
        case review
        case shipping
        case sourceTransfer = "source_transfer"
        case statementDescriptor = "statement_descriptor"
        case statementDescriptorSuffix = "statement_descriptor_suffix"
        case status
        case transfer
        case transferData = "transfer_data"
        case transferGroup = "transfer_group"
    }
}

public struct ChargeFraudDetails: Codable {
    /// Assessments from Stripe. If set, the value is `fraudulent`.
    public var stripeReport: String?
    /// Assessments reported by you. If set, possible values of are `safe` and `fraudulent`.
    public var userReport: String?

    public init(stripeReport: String? = nil, userReport: String? = nil) {
        self.stripeReport = stripeReport
        self.userReport = userReport
    }

    private enum CodingKeys: String, CodingKey {
        case stripeReport = "stripe_report"
        case userReport = "user_report"
    }
}

public struct ChargeOutcome: Codable {
    /// Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder's statement.
    public var networkStatus: String?
    /// An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details.
    public var reason: String?
    /// Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. This field is only available with Radar.
    public var riskLevel: String?
    /// Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams.
    public var riskScore: Int?
    /// The ID of the Radar rule that matched the payment, if applicable.
    public var rule: Rule?
    /// A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer.
    public var sellerMessage: String?
    /// Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details.
    public var type: String

    /// The ID of the Radar rule that matched the payment, if applicable.
    public final class Rule: Codable {
        public var string: String?
        /// RadarRule
        public var rule: StripeAPI.Rule?

        public init(string: String? = nil, rule: StripeAPI.Rule? = nil) {
            self.string = string
            self.rule = rule
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.rule = try? container.decode(StripeAPI.Rule.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = rule { try container.encode(value) }
        }
    }

    public init(networkStatus: String? = nil, reason: String? = nil, riskLevel: String? = nil, riskScore: Int? = nil, rule: Rule? = nil, sellerMessage: String? = nil, type: String) {
        self.networkStatus = networkStatus
        self.reason = reason
        self.riskLevel = riskLevel
        self.riskScore = riskScore
        self.rule = rule
        self.sellerMessage = sellerMessage
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case networkStatus = "network_status"
        case reason
        case riskLevel = "risk_level"
        case riskScore = "risk_score"
        case rule
        case sellerMessage = "seller_message"
        case type
    }
}

public struct ChargeTransferData: Codable {
    /// The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account.
    public var amount: Int?
    /// ID of an existing, connected Stripe account to transfer funds to if `transfer_data` was specified in the charge request.
    public var destination: Destination

    /// ID of an existing, connected Stripe account to transfer funds to if `transfer_data` was specified in the charge request.
    public struct Destination: Codable {
        public var string: String?
        public var account: Account?

        public init(string: String? = nil, account: Account? = nil) {
            self.string = string
            self.account = account
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.account = try? container.decode(Account.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = account { try container.encode(value) }
        }
    }

    public init(amount: Int? = nil, destination: Destination) {
        self.amount = amount
        self.destination = destination
    }
}

/// Session
///
/// A Checkout Session represents your customer's session as they pay for
/// one-time purchases or subscriptions through [Checkout](https://stripe.com/docs/payments/checkout)
/// or [Payment Links](https://stripe.com/docs/payments/payment-links). We recommend creating a
/// new Session each time your customer attempts to pay.
/// 
/// Once payment is successful, the Checkout Session will contain a reference
/// to the [Customer](https://stripe.com/docs/api/customers), and either the successful
/// [PaymentIntent](https://stripe.com/docs/api/payment_intents) or an active
/// [Subscription](https://stripe.com/docs/api/subscriptions).
/// 
/// You can create a Checkout Session on your server and pass its ID to the
/// client to begin Checkout.
/// 
/// Related guide: [Checkout Server Quickstart](https://stripe.com/docs/payments/checkout/api).
public struct CheckoutSession: Codable {
    /// When set, provides configuration for actions to take if this Checkout Session expires.
    public var afterExpiration: AfterExpiration?
    /// Enables user redeemable promotion codes.
    public var allowPromotionCodes: Bool?
    /// Total of all items before discounts or taxes are applied.
    public var amountSubtotal: Int?
    /// Total of all items after discounts and taxes are applied.
    public var amountTotal: Int?
    /// PaymentPagesCheckoutSessionAutomaticTax
    public var automaticTax: PaymentPagesCheckoutSessionAutomaticTax
    /// Describes whether Checkout should collect the customer's billing address.
    public var billingAddressCollection: BillingAddressCollection?
    /// The URL the customer will be directed to if they decide to cancel payment and return to your website.
    public var cancelURL: String
    /// A unique string to reference the Checkout Session. This can be a
    /// customer ID, a cart ID, or similar, and can be used to reconcile the
    /// Session with your internal systems.
    public var clientReferenceID: String?
    /// Results of `consent_collection` for this session.
    public var consent: Consent?
    /// When set, provides configuration for the Checkout Session to gather active consent from customers.
    public var consentCollection: ConsentCollection?
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String?
    /// The ID of the customer for this Session.
    /// For Checkout Sessions in `payment` or `subscription` mode, Checkout
    /// will create a new customer object based on information provided
    /// during the payment flow unless an existing customer was provided when
    /// the Session was created.
    public var customer: Customer?
    /// The customer details including the customer's tax exempt status and the customer's tax IDs. Only present on Sessions in `payment` or `subscription` mode.
    public var customerDetails: CustomerDetails?
    /// If provided, this value will be used when the Customer object is created.
    /// If not provided, customers will be asked to enter their email address.
    /// Use this parameter to prefill customer data if you already have an email
    /// on file. To access information about the customer once the payment flow is
    /// complete, use the `customer` attribute.
    public var customerEmail: String?
    /// The timestamp at which the Checkout Session will expire.
    public var expiresAt: Int
    /// Unique identifier for the object. Used to pass to `redirectToCheckout`
    /// in Stripe.js.
    public var id: String
    /// PaymentPagesCheckoutSessionListLineItems
    ///
    /// The line items purchased by the customer.
    public var lineItems: LineItems?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
    public var locale: Locale?
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// The mode of the Checkout Session.
    public var mode: Mode
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The ID of the PaymentIntent for Checkout Sessions in `payment` mode.
    public var paymentIntent: PaymentIntent?
    /// Payment-method-specific configuration for the PaymentIntent or SetupIntent of this CheckoutSession.
    public var paymentMethodOptions: PaymentMethodOptions?
    /// A list of the types of payment methods (e.g. card) this Checkout
    /// Session is allowed to accept.
    public var paymentMethodTypes: [String]
    /// The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`.
    /// You can use this value to decide when to fulfill your customer's order.
    public var paymentStatus: PaymentStatus
    /// PaymentPagesCheckoutSessionPhoneNumberCollection
    public var phoneNumberCollection: PaymentPagesCheckoutSessionPhoneNumberCollection?
    /// The ID of the original expired Checkout Session that triggered the recovery flow.
    public var recoveredFrom: String?
    /// The ID of the SetupIntent for Checkout Sessions in `setup` mode.
    public var setupIntent: SetupIntent?
    /// Shipping information for this Checkout Session.
    public var shipping: Shipping?
    /// When set, provides configuration for Checkout to collect a shipping address from a customer.
    public var shippingAddressCollection: ShippingAddressCollection?
    /// The shipping rate options applied to this Session.
    public var shippingOptions: [PaymentPagesCheckoutSessionShippingOption]
    /// The ID of the ShippingRate for Checkout Sessions in `payment` mode.
    public var shippingRate: ShippingRate?
    /// The status of the Checkout Session, one of `open`, `complete`, or `expired`.
    public var status: Status?
    /// Describes the type of transaction being performed by Checkout in order to customize
    /// relevant text on the page, such as the submit button. `submit_type` can only be
    /// specified on Checkout Sessions in `payment` mode, but not Checkout Sessions
    /// in `subscription` or `setup` mode.
    public var submitType: SubmitType?
    /// The ID of the subscription for Checkout Sessions in `subscription` mode.
    public var subscription: Subscription?
    /// The URL the customer will be directed to after the payment or
    /// subscription creation is successful.
    public var successURL: String
    /// PaymentPagesCheckoutSessionTaxIDCollection
    public var taxIDCollection: PaymentPagesCheckoutSessionTaxIDCollection?
    /// Tax and discount details for the computed total amount.
    public var totalDetails: TotalDetails?
    /// The URL to the Checkout Session.
    public var url: String?

    /// When set, provides configuration for actions to take if this Checkout Session expires.
    public struct AfterExpiration: Codable {
        public var paymentPagesCheckoutSessionAfterExpiration: PaymentPagesCheckoutSessionAfterExpiration?

        public init(paymentPagesCheckoutSessionAfterExpiration: PaymentPagesCheckoutSessionAfterExpiration? = nil) {
            self.paymentPagesCheckoutSessionAfterExpiration = paymentPagesCheckoutSessionAfterExpiration
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentPagesCheckoutSessionAfterExpiration = try? container.decode(PaymentPagesCheckoutSessionAfterExpiration.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentPagesCheckoutSessionAfterExpiration { try container.encode(value) }
        }
    }

    /// Describes whether Checkout should collect the customer's billing address.
    public enum BillingAddressCollection: String, Codable, CaseIterable {
        case auto
        case required
    }

    /// Results of `consent_collection` for this session.
    public struct Consent: Codable {
        public var paymentPagesCheckoutSessionConsent: PaymentPagesCheckoutSessionConsent?

        public init(paymentPagesCheckoutSessionConsent: PaymentPagesCheckoutSessionConsent? = nil) {
            self.paymentPagesCheckoutSessionConsent = paymentPagesCheckoutSessionConsent
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentPagesCheckoutSessionConsent = try? container.decode(PaymentPagesCheckoutSessionConsent.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentPagesCheckoutSessionConsent { try container.encode(value) }
        }
    }

    /// When set, provides configuration for the Checkout Session to gather active consent from customers.
    public struct ConsentCollection: Codable {
        public var paymentPagesCheckoutSessionConsentCollection: PaymentPagesCheckoutSessionConsentCollection?

        public init(paymentPagesCheckoutSessionConsentCollection: PaymentPagesCheckoutSessionConsentCollection? = nil) {
            self.paymentPagesCheckoutSessionConsentCollection = paymentPagesCheckoutSessionConsentCollection
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentPagesCheckoutSessionConsentCollection = try? container.decode(PaymentPagesCheckoutSessionConsentCollection.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentPagesCheckoutSessionConsentCollection { try container.encode(value) }
        }
    }

    /// The ID of the customer for this Session.
    /// For Checkout Sessions in `payment` or `subscription` mode, Checkout
    /// will create a new customer object based on information provided
    /// during the payment flow unless an existing customer was provided when
    /// the Session was created.
    public final class Customer: Codable {
        public var string: String?
        public var customer: StripeAPI.Customer?
        public var deletedCustomer: DeletedCustomer?

        public init(string: String? = nil, customer: StripeAPI.Customer? = nil, deletedCustomer: DeletedCustomer? = nil) {
            self.string = string
            self.customer = customer
            self.deletedCustomer = deletedCustomer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeAPI.Customer.self)
            self.deletedCustomer = try? container.decode(DeletedCustomer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
            if let value = deletedCustomer { try container.encode(value) }
        }
    }

    /// The customer details including the customer's tax exempt status and the customer's tax IDs. Only present on Sessions in `payment` or `subscription` mode.
    public struct CustomerDetails: Codable {
        public var paymentPagesCheckoutSessionCustomerDetails: PaymentPagesCheckoutSessionCustomerDetails?

        public init(paymentPagesCheckoutSessionCustomerDetails: PaymentPagesCheckoutSessionCustomerDetails? = nil) {
            self.paymentPagesCheckoutSessionCustomerDetails = paymentPagesCheckoutSessionCustomerDetails
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentPagesCheckoutSessionCustomerDetails = try? container.decode(PaymentPagesCheckoutSessionCustomerDetails.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentPagesCheckoutSessionCustomerDetails { try container.encode(value) }
        }
    }

    /// PaymentPagesCheckoutSessionListLineItems
    ///
    /// The line items purchased by the customer.
    public struct LineItems: Codable {
        /// Details about each object.
        public var data: [Item]
        /// True if this list has another page of items after this one that can be fetched.
        public var hasMore: Bool
        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public var object: Object
        /// The URL where this list can be accessed.
        public var url: String

        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public enum Object: String, Codable, CaseIterable {
            case list
        }

        public init(data: [Item], hasMore: Bool, object: Object, url: String) {
            self.data = data
            self.hasMore = hasMore
            self.object = object
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case data
            case hasMore = "has_more"
            case object
            case url
        }
    }

    /// The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
    public enum Locale: String, Codable, CaseIterable {
        case auto
        case bg
        case cs
        case da
        case de
        case el
        case en
        case enGB = "en-GB"
        case es
        case es419 = "es-419"
        case et
        case fi
        case fil
        case fr
        case frCA = "fr-CA"
        case hr
        case hu
        case id
        case it
        case ja
        case ko
        case lt
        case lv
        case ms
        case mt
        case nb
        case nl
        case pl
        case pt
        case ptBR = "pt-BR"
        case ro
        case ru
        case sk
        case sl
        case sv
        case th
        case tr
        case vi
        case zh
        case zhHK = "zh-HK"
        case zhTW = "zh-TW"
    }

    /// The mode of the Checkout Session.
    public enum Mode: String, Codable, CaseIterable {
        case payment
        case setup
        case subscription
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case checkoutSession = "checkout.session"
    }

    /// The ID of the PaymentIntent for Checkout Sessions in `payment` mode.
    public final class PaymentIntent: Codable {
        public var string: String?
        public var paymentIntent: StripeAPI.PaymentIntent?

        public init(string: String? = nil, paymentIntent: StripeAPI.PaymentIntent? = nil) {
            self.string = string
            self.paymentIntent = paymentIntent
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentIntent = try? container.decode(StripeAPI.PaymentIntent.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentIntent { try container.encode(value) }
        }
    }

    /// Payment-method-specific configuration for the PaymentIntent or SetupIntent of this CheckoutSession.
    public struct PaymentMethodOptions: Codable {
        public var checkoutSessionPaymentMethodOptions: CheckoutSessionPaymentMethodOptions?

        public init(checkoutSessionPaymentMethodOptions: CheckoutSessionPaymentMethodOptions? = nil) {
            self.checkoutSessionPaymentMethodOptions = checkoutSessionPaymentMethodOptions
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.checkoutSessionPaymentMethodOptions = try? container.decode(CheckoutSessionPaymentMethodOptions.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = checkoutSessionPaymentMethodOptions { try container.encode(value) }
        }
    }

    /// The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`.
    /// You can use this value to decide when to fulfill your customer's order.
    public enum PaymentStatus: String, Codable, CaseIterable {
        case noPaymentRequired = "no_payment_required"
        case paid
        case unpaid
    }

    /// The ID of the SetupIntent for Checkout Sessions in `setup` mode.
    public final class SetupIntent: Codable {
        public var string: String?
        public var setupIntent: StripeAPI.SetupIntent?

        public init(string: String? = nil, setupIntent: StripeAPI.SetupIntent? = nil) {
            self.string = string
            self.setupIntent = setupIntent
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.setupIntent = try? container.decode(StripeAPI.SetupIntent.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = setupIntent { try container.encode(value) }
        }
    }

    /// Shipping information for this Checkout Session.
    public final class Shipping: Codable {
        public var shipping: StripeAPI.Shipping?

        public init(shipping: StripeAPI.Shipping? = nil) {
            self.shipping = shipping
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.shipping = try? container.decode(StripeAPI.Shipping.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = shipping { try container.encode(value) }
        }
    }

    /// When set, provides configuration for Checkout to collect a shipping address from a customer.
    public struct ShippingAddressCollection: Codable {
        public var paymentPagesPaymentPageResourcesShippingAddressCollection: PaymentPagesPaymentPageResourcesShippingAddressCollection?

        public init(paymentPagesPaymentPageResourcesShippingAddressCollection: PaymentPagesPaymentPageResourcesShippingAddressCollection? = nil) {
            self.paymentPagesPaymentPageResourcesShippingAddressCollection = paymentPagesPaymentPageResourcesShippingAddressCollection
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentPagesPaymentPageResourcesShippingAddressCollection = try? container.decode(PaymentPagesPaymentPageResourcesShippingAddressCollection.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentPagesPaymentPageResourcesShippingAddressCollection { try container.encode(value) }
        }
    }

    /// The ID of the ShippingRate for Checkout Sessions in `payment` mode.
    public final class ShippingRate: Codable {
        public var string: String?
        /// Shipping rates describe the price of shipping presented to your customers and can be
        /// applied to [Checkout Sessions](https://stripe.com/docs/payments/checkout/shipping) to collect shipping costs.
        public var shippingRate: StripeAPI.ShippingRate?

        public init(string: String? = nil, shippingRate: StripeAPI.ShippingRate? = nil) {
            self.string = string
            self.shippingRate = shippingRate
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.shippingRate = try? container.decode(StripeAPI.ShippingRate.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = shippingRate { try container.encode(value) }
        }
    }

    /// The status of the Checkout Session, one of `open`, `complete`, or `expired`.
    public enum Status: String, Codable, CaseIterable {
        case complete
        case expired
        case `open`
    }

    /// Describes the type of transaction being performed by Checkout in order to customize
    /// relevant text on the page, such as the submit button. `submit_type` can only be
    /// specified on Checkout Sessions in `payment` mode, but not Checkout Sessions
    /// in `subscription` or `setup` mode.
    public enum SubmitType: String, Codable, CaseIterable {
        case auto
        case book
        case donate
        case pay
    }

    /// The ID of the subscription for Checkout Sessions in `subscription` mode.
    public final class Subscription: Codable {
        public var string: String?
        public var subscription: StripeAPI.Subscription?

        public init(string: String? = nil, subscription: StripeAPI.Subscription? = nil) {
            self.string = string
            self.subscription = subscription
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.subscription = try? container.decode(StripeAPI.Subscription.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = subscription { try container.encode(value) }
        }
    }

    /// Tax and discount details for the computed total amount.
    public struct TotalDetails: Codable {
        public var paymentPagesCheckoutSessionTotalDetails: PaymentPagesCheckoutSessionTotalDetails?

        public init(paymentPagesCheckoutSessionTotalDetails: PaymentPagesCheckoutSessionTotalDetails? = nil) {
            self.paymentPagesCheckoutSessionTotalDetails = paymentPagesCheckoutSessionTotalDetails
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentPagesCheckoutSessionTotalDetails = try? container.decode(PaymentPagesCheckoutSessionTotalDetails.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentPagesCheckoutSessionTotalDetails { try container.encode(value) }
        }
    }

    public init(afterExpiration: AfterExpiration? = nil, allowPromotionCodes: Bool? = nil, amountSubtotal: Int? = nil, amountTotal: Int? = nil, automaticTax: PaymentPagesCheckoutSessionAutomaticTax, billingAddressCollection: BillingAddressCollection? = nil, cancelURL: String, clientReferenceID: String? = nil, consent: Consent? = nil, consentCollection: ConsentCollection? = nil, currency: String? = nil, customer: Customer? = nil, customerDetails: CustomerDetails? = nil, customerEmail: String? = nil, expiresAt: Int, id: String, lineItems: LineItems? = nil, isLivemode: Bool, locale: Locale? = nil, metadata: [String: String]? = nil, mode: Mode, object: Object, paymentIntent: PaymentIntent? = nil, paymentMethodOptions: PaymentMethodOptions? = nil, paymentMethodTypes: [String], paymentStatus: PaymentStatus, phoneNumberCollection: PaymentPagesCheckoutSessionPhoneNumberCollection? = nil, recoveredFrom: String? = nil, setupIntent: SetupIntent? = nil, shipping: Shipping? = nil, shippingAddressCollection: ShippingAddressCollection? = nil, shippingOptions: [PaymentPagesCheckoutSessionShippingOption], shippingRate: ShippingRate? = nil, status: Status? = nil, submitType: SubmitType? = nil, subscription: Subscription? = nil, successURL: String, taxIDCollection: PaymentPagesCheckoutSessionTaxIDCollection? = nil, totalDetails: TotalDetails? = nil, url: String? = nil) {
        self.afterExpiration = afterExpiration
        self.allowPromotionCodes = allowPromotionCodes
        self.amountSubtotal = amountSubtotal
        self.amountTotal = amountTotal
        self.automaticTax = automaticTax
        self.billingAddressCollection = billingAddressCollection
        self.cancelURL = cancelURL
        self.clientReferenceID = clientReferenceID
        self.consent = consent
        self.consentCollection = consentCollection
        self.currency = currency
        self.customer = customer
        self.customerDetails = customerDetails
        self.customerEmail = customerEmail
        self.expiresAt = expiresAt
        self.id = id
        self.lineItems = lineItems
        self.isLivemode = isLivemode
        self.locale = locale
        self.metadata = metadata
        self.mode = mode
        self.object = object
        self.paymentIntent = paymentIntent
        self.paymentMethodOptions = paymentMethodOptions
        self.paymentMethodTypes = paymentMethodTypes
        self.paymentStatus = paymentStatus
        self.phoneNumberCollection = phoneNumberCollection
        self.recoveredFrom = recoveredFrom
        self.setupIntent = setupIntent
        self.shipping = shipping
        self.shippingAddressCollection = shippingAddressCollection
        self.shippingOptions = shippingOptions
        self.shippingRate = shippingRate
        self.status = status
        self.submitType = submitType
        self.subscription = subscription
        self.successURL = successURL
        self.taxIDCollection = taxIDCollection
        self.totalDetails = totalDetails
        self.url = url
    }

    private enum CodingKeys: String, CodingKey {
        case afterExpiration = "after_expiration"
        case allowPromotionCodes = "allow_promotion_codes"
        case amountSubtotal = "amount_subtotal"
        case amountTotal = "amount_total"
        case automaticTax = "automatic_tax"
        case billingAddressCollection = "billing_address_collection"
        case cancelURL = "cancel_url"
        case clientReferenceID = "client_reference_id"
        case consent
        case consentCollection = "consent_collection"
        case currency
        case customer
        case customerDetails = "customer_details"
        case customerEmail = "customer_email"
        case expiresAt = "expires_at"
        case id
        case lineItems = "line_items"
        case isLivemode = "livemode"
        case locale
        case metadata
        case mode
        case object
        case paymentIntent = "payment_intent"
        case paymentMethodOptions = "payment_method_options"
        case paymentMethodTypes = "payment_method_types"
        case paymentStatus = "payment_status"
        case phoneNumberCollection = "phone_number_collection"
        case recoveredFrom = "recovered_from"
        case setupIntent = "setup_intent"
        case shipping
        case shippingAddressCollection = "shipping_address_collection"
        case shippingOptions = "shipping_options"
        case shippingRate = "shipping_rate"
        case status
        case submitType = "submit_type"
        case subscription
        case successURL = "success_url"
        case taxIDCollection = "tax_id_collection"
        case totalDetails = "total_details"
        case url
    }
}

public struct CheckoutAcssDebitMandateOptions: Codable {
    /// A URL for custom mandate text
    public var customMandateURL: String?
    /// List of Stripe products where this mandate can be selected automatically. Returned when the Session is in `setup` mode.
    public var defaultFor: [DefaultForItem]?
    /// Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
    public var intervalDescription: String?
    /// Payment schedule for the mandate.
    public var paymentSchedule: PaymentSchedule?
    /// Transaction type of the mandate.
    public var transactionType: TransactionType?

    public enum DefaultForItem: String, Codable, CaseIterable {
        case invoice
        case subscription
    }

    /// Payment schedule for the mandate.
    public enum PaymentSchedule: String, Codable, CaseIterable {
        case combined
        case interval
        case sporadic
    }

    /// Transaction type of the mandate.
    public enum TransactionType: String, Codable, CaseIterable {
        case business
        case personal
    }

    public init(customMandateURL: String? = nil, defaultFor: [DefaultForItem]? = nil, intervalDescription: String? = nil, paymentSchedule: PaymentSchedule? = nil, transactionType: TransactionType? = nil) {
        self.customMandateURL = customMandateURL
        self.defaultFor = defaultFor
        self.intervalDescription = intervalDescription
        self.paymentSchedule = paymentSchedule
        self.transactionType = transactionType
    }

    private enum CodingKeys: String, CodingKey {
        case customMandateURL = "custom_mandate_url"
        case defaultFor = "default_for"
        case intervalDescription = "interval_description"
        case paymentSchedule = "payment_schedule"
        case transactionType = "transaction_type"
    }
}

public struct CheckoutAcssDebitPaymentMethodOptions: Codable {
    /// Currency supported by the bank account. Returned when the Session is in `setup` mode.
    public var currency: Currency?
    /// CheckoutAcssDebitMandateOptions
    public var mandateOptions: CheckoutAcssDebitMandateOptions?
    /// Bank account verification method.
    public var verificationMethod: VerificationMethod?

    /// Currency supported by the bank account. Returned when the Session is in `setup` mode.
    public enum Currency: String, Codable, CaseIterable {
        case cad
        case usd
    }

    /// Bank account verification method.
    public enum VerificationMethod: String, Codable, CaseIterable {
        case automatic
        case instant
        case microdeposits
    }

    public init(currency: Currency? = nil, mandateOptions: CheckoutAcssDebitMandateOptions? = nil, verificationMethod: VerificationMethod? = nil) {
        self.currency = currency
        self.mandateOptions = mandateOptions
        self.verificationMethod = verificationMethod
    }

    private enum CodingKeys: String, CodingKey {
        case currency
        case mandateOptions = "mandate_options"
        case verificationMethod = "verification_method"
    }
}

public struct CheckoutSessionPaymentMethodOptions: Codable {
    /// CheckoutAcssDebitPaymentMethodOptions
    public var acssDebit: CheckoutAcssDebitPaymentMethodOptions?
    /// Payment_method_options_boleto
    public var boleto: PaymentMethodOptionsBoleto?
    /// Payment_method_options_oxxo
    public var oxxo: PaymentMethodOptionsOxxo?

    public init(acssDebit: CheckoutAcssDebitPaymentMethodOptions? = nil, boleto: PaymentMethodOptionsBoleto? = nil, oxxo: PaymentMethodOptionsOxxo? = nil) {
        self.acssDebit = acssDebit
        self.boleto = boleto
        self.oxxo = oxxo
    }

    private enum CodingKeys: String, CodingKey {
        case acssDebit = "acss_debit"
        case boleto
        case oxxo
    }
}

public struct ConnectCollectionTransfer: Codable {
    /// Amount transferred, in %s.
    public var amount: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// ID of the account that funds are being collected for.
    public var destination: Destination
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// ID of the account that funds are being collected for.
    public struct Destination: Codable {
        public var string: String?
        public var account: Account?

        public init(string: String? = nil, account: Account? = nil) {
            self.string = string
            self.account = account
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.account = try? container.decode(Account.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = account { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case connectCollectionTransfer = "connect_collection_transfer"
    }

    public init(amount: Int, currency: String, destination: Destination, id: String, isLivemode: Bool, object: Object) {
        self.amount = amount
        self.currency = currency
        self.destination = destination
        self.id = id
        self.isLivemode = isLivemode
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case currency
        case destination
        case id
        case isLivemode = "livemode"
        case object
    }
}

/// Stripe needs to collect certain pieces of information about each account
/// created. These requirements can differ depending on the account's country. The
/// Country Specs API makes these rules available to your integration.
/// 
/// You can also view the information from this API call as [an online
/// guide](/docs/connect/required-verification-information).
public struct CountrySpec: Codable {
    /// The default currency for this country. This applies to both payment methods and bank accounts.
    public var defaultCurrency: String
    /// Unique identifier for the object. Represented as the ISO country code for this country.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Currencies that can be accepted in the specific country (for transfers).
    public var supportedBankAccountCurrencies: [String: [String]]
    /// Currencies that can be accepted in the specified country (for payments).
    public var supportedPaymentCurrencies: [String]
    /// Payment methods available in the specified country. You may need to enable some payment methods (e.g., [ACH](https://stripe.com/docs/ach)) on your account before they appear in this list. The `stripe` payment method refers to [charging through your platform](https://stripe.com/docs/connect/destination-charges).
    public var supportedPaymentMethods: [String]
    /// Countries that can accept transfers from the specified country.
    public var supportedTransferCountries: [String]
    /// CountrySpecVerificationFields
    public var verificationFields: CountrySpecVerificationFields

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case countrySpec = "country_spec"
    }

    public init(defaultCurrency: String, id: String, object: Object, supportedBankAccountCurrencies: [String: [String]], supportedPaymentCurrencies: [String], supportedPaymentMethods: [String], supportedTransferCountries: [String], verificationFields: CountrySpecVerificationFields) {
        self.defaultCurrency = defaultCurrency
        self.id = id
        self.object = object
        self.supportedBankAccountCurrencies = supportedBankAccountCurrencies
        self.supportedPaymentCurrencies = supportedPaymentCurrencies
        self.supportedPaymentMethods = supportedPaymentMethods
        self.supportedTransferCountries = supportedTransferCountries
        self.verificationFields = verificationFields
    }

    private enum CodingKeys: String, CodingKey {
        case defaultCurrency = "default_currency"
        case id
        case object
        case supportedBankAccountCurrencies = "supported_bank_account_currencies"
        case supportedPaymentCurrencies = "supported_payment_currencies"
        case supportedPaymentMethods = "supported_payment_methods"
        case supportedTransferCountries = "supported_transfer_countries"
        case verificationFields = "verification_fields"
    }
}

public struct CountrySpecVerificationFieldDetails: Codable {
    /// Additional fields which are only required for some users.
    public var additional: [String]
    /// Fields which every account must eventually provide.
    public var minimum: [String]

    public init(additional: [String], minimum: [String]) {
        self.additional = additional
        self.minimum = minimum
    }
}

public struct CountrySpecVerificationFields: Codable {
    /// CountrySpecVerificationFieldDetails
    public var company: CountrySpecVerificationFieldDetails
    /// CountrySpecVerificationFieldDetails
    public var individual: CountrySpecVerificationFieldDetails

    public init(company: CountrySpecVerificationFieldDetails, individual: CountrySpecVerificationFieldDetails) {
        self.company = company
        self.individual = individual
    }
}

/// A coupon contains information about a percent-off or amount-off discount you
/// might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
/// [orders](https://stripe.com/docs/api#create_order_legacy-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
public struct Coupon: Codable {
    /// Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.
    public var amountOff: Int?
    /// CouponAppliesTo
    public var appliesTo: CouponAppliesTo?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off.
    public var currency: String?
    /// One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount.
    public var duration: Duration
    /// If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`.
    public var durationInMonths: Int?
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.
    public var maxRedemptions: Int?
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// Name of the coupon displayed to customers on for instance invoices or receipts.
    public var name: String?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a %s100 invoice %s50 instead.
    public var percentOff: Double?
    /// Date after which the coupon can no longer be redeemed.
    public var redeemBy: Int?
    /// Number of times this coupon has been applied to a customer.
    public var timesRedeemed: Int
    /// Taking account of the above properties, whether this coupon can still be applied to a customer.
    public var isValid: Bool

    /// One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount.
    public enum Duration: String, Codable, CaseIterable {
        case forever
        case once
        case repeating
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case coupon
    }

    public init(amountOff: Int? = nil, appliesTo: CouponAppliesTo? = nil, created: Int, currency: String? = nil, duration: Duration, durationInMonths: Int? = nil, id: String, isLivemode: Bool, maxRedemptions: Int? = nil, metadata: [String: String]? = nil, name: String? = nil, object: Object, percentOff: Double? = nil, redeemBy: Int? = nil, timesRedeemed: Int, isValid: Bool) {
        self.amountOff = amountOff
        self.appliesTo = appliesTo
        self.created = created
        self.currency = currency
        self.duration = duration
        self.durationInMonths = durationInMonths
        self.id = id
        self.isLivemode = isLivemode
        self.maxRedemptions = maxRedemptions
        self.metadata = metadata
        self.name = name
        self.object = object
        self.percentOff = percentOff
        self.redeemBy = redeemBy
        self.timesRedeemed = timesRedeemed
        self.isValid = isValid
    }

    private enum CodingKeys: String, CodingKey {
        case amountOff = "amount_off"
        case appliesTo = "applies_to"
        case created
        case currency
        case duration
        case durationInMonths = "duration_in_months"
        case id
        case isLivemode = "livemode"
        case maxRedemptions = "max_redemptions"
        case metadata
        case name
        case object
        case percentOff = "percent_off"
        case redeemBy = "redeem_by"
        case timesRedeemed = "times_redeemed"
        case isValid = "valid"
    }
}

public struct CouponAppliesTo: Codable {
    /// A list of product IDs this coupon applies to
    public var products: [String]

    public init(products: [String]) {
        self.products = products
    }
}

/// Issue a credit note to adjust an invoice's amount after the invoice is finalized.
/// 
/// Related guide: [Credit Notes](https://stripe.com/docs/billing/invoices/credit-notes).
public struct CreditNote: Codable {
    /// The integer amount in %s representing the total amount of the credit note, including tax.
    public var amount: Int
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// ID of the customer.
    public var customer: Customer
    /// Customer balance transaction related to this credit note.
    public var customerBalanceTransaction: CustomerBalanceTransaction?
    /// The integer amount in %s representing the total amount of discount that was credited.
    public var discountAmount: Int
    /// The aggregate amounts calculated per discount for all line items.
    public var discountAmounts: [DiscountsResourceDiscountAmount]
    /// Unique identifier for the object.
    public var id: String
    /// ID of the invoice.
    public var invoice: Invoice
    /// CreditNoteLinesList
    ///
    /// Line items that make up the credit note
    public var lines: Lines
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Customer-facing text that appears on the credit note PDF.
    public var memo: String?
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice.
    public var number: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Amount that was credited outside of Stripe.
    public var outOfBandAmount: Int?
    /// The link to download the PDF of the credit note.
    public var pdf: String
    /// Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
    public var reason: Reason?
    /// Refund related to this credit note.
    public var refund: Refund?
    /// Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding).
    public var status: Status
    /// The integer amount in %s representing the amount of the credit note, excluding tax and invoice level discounts.
    public var subtotal: Int
    /// The aggregate amounts calculated per tax rate for all line items.
    public var taxAmounts: [CreditNoteTaxAmount]
    /// The integer amount in %s representing the total amount of the credit note, including tax and all discount.
    public var total: Int
    /// Type of this credit note, one of `pre_payment` or `post_payment`. A `pre_payment` credit note means it was issued when the invoice was open. A `post_payment` credit note means it was issued when the invoice was paid.
    public var type: `Type`
    /// The time that the credit note was voided.
    public var voidedAt: Int?

    /// ID of the customer.
    public final class Customer: Codable {
        public var string: String?
        public var customer: StripeAPI.Customer?
        public var deletedCustomer: DeletedCustomer?

        public init(string: String? = nil, customer: StripeAPI.Customer? = nil, deletedCustomer: DeletedCustomer? = nil) {
            self.string = string
            self.customer = customer
            self.deletedCustomer = deletedCustomer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeAPI.Customer.self)
            self.deletedCustomer = try? container.decode(DeletedCustomer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
            if let value = deletedCustomer { try container.encode(value) }
        }
    }

    /// Customer balance transaction related to this credit note.
    public final class CustomerBalanceTransaction: Codable {
        public var string: String?
        public var customerBalanceTransaction: StripeAPI.CustomerBalanceTransaction?

        public init(string: String? = nil, customerBalanceTransaction: StripeAPI.CustomerBalanceTransaction? = nil) {
            self.string = string
            self.customerBalanceTransaction = customerBalanceTransaction
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customerBalanceTransaction = try? container.decode(StripeAPI.CustomerBalanceTransaction.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customerBalanceTransaction { try container.encode(value) }
        }
    }

    /// ID of the invoice.
    public final class Invoice: Codable {
        public var string: String?
        public var invoice: StripeAPI.Invoice?

        public init(string: String? = nil, invoice: StripeAPI.Invoice? = nil) {
            self.string = string
            self.invoice = invoice
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.invoice = try? container.decode(StripeAPI.Invoice.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = invoice { try container.encode(value) }
        }
    }

    /// CreditNoteLinesList
    ///
    /// Line items that make up the credit note
    public struct Lines: Codable {
        /// Details about each object.
        public var data: [CreditNoteLineItem]
        /// True if this list has another page of items after this one that can be fetched.
        public var hasMore: Bool
        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public var object: Object
        /// The URL where this list can be accessed.
        public var url: String

        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public enum Object: String, Codable, CaseIterable {
            case list
        }

        public init(data: [CreditNoteLineItem], hasMore: Bool, object: Object, url: String) {
            self.data = data
            self.hasMore = hasMore
            self.object = object
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case data
            case hasMore = "has_more"
            case object
            case url
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case creditNote = "credit_note"
    }

    /// Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
    public enum Reason: String, Codable, CaseIterable {
        case duplicate
        case fraudulent
        case orderChange = "order_change"
        case productUnsatisfactory = "product_unsatisfactory"
    }

    /// Refund related to this credit note.
    public final class Refund: Codable {
        public var string: String?
        public var refund: StripeAPI.Refund?

        public init(string: String? = nil, refund: StripeAPI.Refund? = nil) {
            self.string = string
            self.refund = refund
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.refund = try? container.decode(StripeAPI.Refund.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = refund { try container.encode(value) }
        }
    }

    /// Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding).
    public enum Status: String, Codable, CaseIterable {
        case issued
        case void
    }

    /// Type of this credit note, one of `pre_payment` or `post_payment`. A `pre_payment` credit note means it was issued when the invoice was open. A `post_payment` credit note means it was issued when the invoice was paid.
    public enum `Type`: String, Codable, CaseIterable {
        case postPayment = "post_payment"
        case prePayment = "pre_payment"
    }

    public init(amount: Int, created: Int, currency: String, customer: Customer, customerBalanceTransaction: CustomerBalanceTransaction? = nil, discountAmount: Int, discountAmounts: [DiscountsResourceDiscountAmount], id: String, invoice: Invoice, lines: Lines, isLivemode: Bool, memo: String? = nil, metadata: [String: String]? = nil, number: String, object: Object, outOfBandAmount: Int? = nil, pdf: String, reason: Reason? = nil, refund: Refund? = nil, status: Status, subtotal: Int, taxAmounts: [CreditNoteTaxAmount], total: Int, type: `Type`, voidedAt: Int? = nil) {
        self.amount = amount
        self.created = created
        self.currency = currency
        self.customer = customer
        self.customerBalanceTransaction = customerBalanceTransaction
        self.discountAmount = discountAmount
        self.discountAmounts = discountAmounts
        self.id = id
        self.invoice = invoice
        self.lines = lines
        self.isLivemode = isLivemode
        self.memo = memo
        self.metadata = metadata
        self.number = number
        self.object = object
        self.outOfBandAmount = outOfBandAmount
        self.pdf = pdf
        self.reason = reason
        self.refund = refund
        self.status = status
        self.subtotal = subtotal
        self.taxAmounts = taxAmounts
        self.total = total
        self.type = type
        self.voidedAt = voidedAt
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case created
        case currency
        case customer
        case customerBalanceTransaction = "customer_balance_transaction"
        case discountAmount = "discount_amount"
        case discountAmounts = "discount_amounts"
        case id
        case invoice
        case lines
        case isLivemode = "livemode"
        case memo
        case metadata
        case number
        case object
        case outOfBandAmount = "out_of_band_amount"
        case pdf
        case reason
        case refund
        case status
        case subtotal
        case taxAmounts = "tax_amounts"
        case total
        case type
        case voidedAt = "voided_at"
    }
}

public struct CreditNoteLineItem: Codable {
    /// The integer amount in %s representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts.
    public var amount: Int
    /// Description of the item being credited.
    public var description: String?
    /// The integer amount in %s representing the discount being credited for this line item.
    public var discountAmount: Int
    /// The amount of discount calculated per discount for this line item
    public var discountAmounts: [DiscountsResourceDiscountAmount]
    /// Unique identifier for the object.
    public var id: String
    /// ID of the invoice line item being credited
    public var invoiceLineItem: String?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The number of units of product being credited.
    public var quantity: Int?
    /// The amount of tax calculated per tax rate for this line item
    public var taxAmounts: [CreditNoteTaxAmount]
    /// The tax rates which apply to the line item.
    public var taxRates: [TaxRate]
    /// The type of the credit note line item, one of `invoice_line_item` or `custom_line_item`. When the type is `invoice_line_item` there is an additional `invoice_line_item` property on the resource the value of which is the id of the credited line item on the invoice.
    public var type: `Type`
    /// The cost of each unit of product being credited.
    public var unitAmount: Int?
    /// Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
    public var unitAmountDecimal: String?

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case creditNoteLineItem = "credit_note_line_item"
    }

    /// The type of the credit note line item, one of `invoice_line_item` or `custom_line_item`. When the type is `invoice_line_item` there is an additional `invoice_line_item` property on the resource the value of which is the id of the credited line item on the invoice.
    public enum `Type`: String, Codable, CaseIterable {
        case customLineItem = "custom_line_item"
        case invoiceLineItem = "invoice_line_item"
    }

    public init(amount: Int, description: String? = nil, discountAmount: Int, discountAmounts: [DiscountsResourceDiscountAmount], id: String, invoiceLineItem: String? = nil, isLivemode: Bool, object: Object, quantity: Int? = nil, taxAmounts: [CreditNoteTaxAmount], taxRates: [TaxRate], type: `Type`, unitAmount: Int? = nil, unitAmountDecimal: String? = nil) {
        self.amount = amount
        self.description = description
        self.discountAmount = discountAmount
        self.discountAmounts = discountAmounts
        self.id = id
        self.invoiceLineItem = invoiceLineItem
        self.isLivemode = isLivemode
        self.object = object
        self.quantity = quantity
        self.taxAmounts = taxAmounts
        self.taxRates = taxRates
        self.type = type
        self.unitAmount = unitAmount
        self.unitAmountDecimal = unitAmountDecimal
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case description
        case discountAmount = "discount_amount"
        case discountAmounts = "discount_amounts"
        case id
        case invoiceLineItem = "invoice_line_item"
        case isLivemode = "livemode"
        case object
        case quantity
        case taxAmounts = "tax_amounts"
        case taxRates = "tax_rates"
        case type
        case unitAmount = "unit_amount"
        case unitAmountDecimal = "unit_amount_decimal"
    }
}

public struct CreditNoteTaxAmount: Codable {
    /// The amount, in %s, of the tax.
    public var amount: Int
    /// Whether this tax amount is inclusive or exclusive.
    public var isInclusive: Bool
    /// The tax rate that was applied to get this tax amount.
    public var taxRate: TaxRate

    /// The tax rate that was applied to get this tax amount.
    public final class TaxRate: Codable {
        public var string: String?
        /// Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.
        /// 
        /// Related guide: [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates).
        public var taxRate: StripeAPI.TaxRate?

        public init(string: String? = nil, taxRate: StripeAPI.TaxRate? = nil) {
            self.string = string
            self.taxRate = taxRate
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.taxRate = try? container.decode(StripeAPI.TaxRate.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = taxRate { try container.encode(value) }
        }
    }

    public init(amount: Int, isInclusive: Bool, taxRate: TaxRate) {
        self.amount = amount
        self.isInclusive = isInclusive
        self.taxRate = taxRate
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case isInclusive = "inclusive"
        case taxRate = "tax_rate"
    }
}

/// This object represents a customer of your business. It lets you create recurring charges and track payments that belong to the same customer.
/// 
/// Related guide: [Save a card during payment](https://stripe.com/docs/payments/save-during-payment).
public struct Customer: Codable {
    /// The customer's address.
    public var address: Address?
    /// Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized.
    public var balance: Int?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes.
    public var currency: String?
    /// ID of the default payment source for the customer.
    /// 
    /// If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) field instead.
    public var defaultSource: DefaultSource?
    /// When the customer's latest invoice is billed by charging automatically, `delinquent` is `true` if the invoice's latest charge failed. When the customer's latest invoice is billed by sending an invoice, `delinquent` is `true` if the invoice isn't paid by its due date.
    /// 
    /// If an invoice is marked uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't get reset to `false`.
    public var isDelinquent: Bool?
    /// An arbitrary string attached to the object. Often useful for displaying to users.
    public var description: String?
    /// Describes the current discount active on the customer, if there is one.
    public var discount: Discount?
    /// The customer's email address.
    public var email: String?
    /// Unique identifier for the object.
    public var id: String
    /// The prefix for the customer used to generate unique invoice numbers.
    public var invoicePrefix: String?
    public var invoiceSettings: InvoiceSettingCustomerSetting?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// The customer's full name or business name.
    public var name: String?
    /// The suffix of the customer's next invoice number, e.g., 0001.
    public var nextInvoiceSequence: Int?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The customer's phone number.
    public var phone: String?
    /// The customer's preferred locales (languages), ordered by preference.
    public var preferredLocales: [String]?
    /// Mailing and shipping address for the customer. Appears on invoices emailed to this customer.
    public var shipping: Shipping?
    /// ApmsSourcesSourceList
    ///
    /// The customer's payment sources, if any.
    public var sources: Sources?
    /// SubscriptionList
    ///
    /// The customer's current subscriptions, if any.
    public var subscriptions: Subscriptions?
    /// CustomerTax
    public var tax: CustomerTax?
    /// Describes the customer's tax exemption status. One of `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the text **"Reverse charge"**.
    public var taxExempt: TaxExempt?
    /// TaxIDsList
    ///
    /// The customer's tax IDs.
    public var taxIDs: TaxIDs?

    /// The customer's address.
    public final class Address: Codable {
        public var address: StripeAPI.Address?

        public init(address: StripeAPI.Address? = nil) {
            self.address = address
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.address = try? container.decode(StripeAPI.Address.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = address { try container.encode(value) }
        }
    }

    /// ID of the default payment source for the customer.
    /// 
    /// If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) field instead.
    public struct DefaultSource: Codable {
        public var string: String?
        public var alipayAccount: AlipayAccount?
        public var bankAccount: BankAccount?
        public var bitcoinReceiver: BitcoinReceiver?
        public var card: Card?
        /// `Source` objects allow you to accept a variety of payment methods. They
        /// represent a customer's payment instrument, and can be used with the Stripe API
        /// just like a `Card` object: once chargeable, they can be charged, or can be
        /// attached to customers.
        /// 
        /// Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
        public var source: Source?

        public init(string: String? = nil, alipayAccount: AlipayAccount? = nil, bankAccount: BankAccount? = nil, bitcoinReceiver: BitcoinReceiver? = nil, card: Card? = nil, source: Source? = nil) {
            self.string = string
            self.alipayAccount = alipayAccount
            self.bankAccount = bankAccount
            self.bitcoinReceiver = bitcoinReceiver
            self.card = card
            self.source = source
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.alipayAccount = try? container.decode(AlipayAccount.self)
            self.bankAccount = try? container.decode(BankAccount.self)
            self.bitcoinReceiver = try? container.decode(BitcoinReceiver.self)
            self.card = try? container.decode(Card.self)
            self.source = try? container.decode(Source.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = alipayAccount { try container.encode(value) }
            if let value = bankAccount { try container.encode(value) }
            if let value = bitcoinReceiver { try container.encode(value) }
            if let value = card { try container.encode(value) }
            if let value = source { try container.encode(value) }
        }
    }

    /// Describes the current discount active on the customer, if there is one.
    public final class Discount: Codable {
        public var discount: StripeAPI.Discount?

        public init(discount: StripeAPI.Discount? = nil) {
            self.discount = discount
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.discount = try? container.decode(StripeAPI.Discount.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = discount { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case customer
    }

    /// Mailing and shipping address for the customer. Appears on invoices emailed to this customer.
    public final class Shipping: Codable {
        public var shipping: StripeAPI.Shipping?

        public init(shipping: StripeAPI.Shipping? = nil) {
            self.shipping = shipping
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.shipping = try? container.decode(StripeAPI.Shipping.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = shipping { try container.encode(value) }
        }
    }

    /// ApmsSourcesSourceList
    ///
    /// The customer's payment sources, if any.
    public struct Sources: Codable {
        /// Details about each object.
        public var data: [Datum]
        /// True if this list has another page of items after this one that can be fetched.
        public var hasMore: Bool
        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public var object: Object
        /// The URL where this list can be accessed.
        public var url: String

        /// Polymorphic
        public struct Datum: Codable {
            public var alipayAccount: AlipayAccount?
            public var bankAccount: BankAccount?
            public var bitcoinReceiver: BitcoinReceiver?
            public var card: Card?
            /// `Source` objects allow you to accept a variety of payment methods. They
            /// represent a customer's payment instrument, and can be used with the Stripe API
            /// just like a `Card` object: once chargeable, they can be charged, or can be
            /// attached to customers.
            /// 
            /// Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
            public var source: Source?

            public init(alipayAccount: AlipayAccount? = nil, bankAccount: BankAccount? = nil, bitcoinReceiver: BitcoinReceiver? = nil, card: Card? = nil, source: Source? = nil) {
                self.alipayAccount = alipayAccount
                self.bankAccount = bankAccount
                self.bitcoinReceiver = bitcoinReceiver
                self.card = card
                self.source = source
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.singleValueContainer()
                self.alipayAccount = try? container.decode(AlipayAccount.self)
                self.bankAccount = try? container.decode(BankAccount.self)
                self.bitcoinReceiver = try? container.decode(BitcoinReceiver.self)
                self.card = try? container.decode(Card.self)
                self.source = try? container.decode(Source.self)
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.singleValueContainer()
                if let value = alipayAccount { try container.encode(value) }
                if let value = bankAccount { try container.encode(value) }
                if let value = bitcoinReceiver { try container.encode(value) }
                if let value = card { try container.encode(value) }
                if let value = source { try container.encode(value) }
            }
        }

        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public enum Object: String, Codable, CaseIterable {
            case list
        }

        public init(data: [Datum], hasMore: Bool, object: Object, url: String) {
            self.data = data
            self.hasMore = hasMore
            self.object = object
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case data
            case hasMore = "has_more"
            case object
            case url
        }
    }

    /// SubscriptionList
    ///
    /// The customer's current subscriptions, if any.
    public struct Subscriptions: Codable {
        /// Details about each object.
        public var data: [Subscription]
        /// True if this list has another page of items after this one that can be fetched.
        public var hasMore: Bool
        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public var object: Object
        /// The URL where this list can be accessed.
        public var url: String

        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public enum Object: String, Codable, CaseIterable {
            case list
        }

        public init(data: [Subscription], hasMore: Bool, object: Object, url: String) {
            self.data = data
            self.hasMore = hasMore
            self.object = object
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case data
            case hasMore = "has_more"
            case object
            case url
        }
    }

    /// Describes the customer's tax exemption status. One of `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the text **"Reverse charge"**.
    public enum TaxExempt: String, Codable, CaseIterable {
        case exempt
        case `none`
        case reverse
    }

    /// TaxIDsList
    ///
    /// The customer's tax IDs.
    public struct TaxIDs: Codable {
        /// Details about each object.
        public var data: [TaxID]
        /// True if this list has another page of items after this one that can be fetched.
        public var hasMore: Bool
        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public var object: Object
        /// The URL where this list can be accessed.
        public var url: String

        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public enum Object: String, Codable, CaseIterable {
            case list
        }

        public init(data: [TaxID], hasMore: Bool, object: Object, url: String) {
            self.data = data
            self.hasMore = hasMore
            self.object = object
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case data
            case hasMore = "has_more"
            case object
            case url
        }
    }

    public init(address: Address? = nil, balance: Int? = nil, created: Int, currency: String? = nil, defaultSource: DefaultSource? = nil, isDelinquent: Bool? = nil, description: String? = nil, discount: Discount? = nil, email: String? = nil, id: String, invoicePrefix: String? = nil, invoiceSettings: InvoiceSettingCustomerSetting? = nil, isLivemode: Bool, metadata: [String: String]? = nil, name: String? = nil, nextInvoiceSequence: Int? = nil, object: Object, phone: String? = nil, preferredLocales: [String]? = nil, shipping: Shipping? = nil, sources: Sources? = nil, subscriptions: Subscriptions? = nil, tax: CustomerTax? = nil, taxExempt: TaxExempt? = nil, taxIDs: TaxIDs? = nil) {
        self.address = address
        self.balance = balance
        self.created = created
        self.currency = currency
        self.defaultSource = defaultSource
        self.isDelinquent = isDelinquent
        self.description = description
        self.discount = discount
        self.email = email
        self.id = id
        self.invoicePrefix = invoicePrefix
        self.invoiceSettings = invoiceSettings
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.name = name
        self.nextInvoiceSequence = nextInvoiceSequence
        self.object = object
        self.phone = phone
        self.preferredLocales = preferredLocales
        self.shipping = shipping
        self.sources = sources
        self.subscriptions = subscriptions
        self.tax = tax
        self.taxExempt = taxExempt
        self.taxIDs = taxIDs
    }

    private enum CodingKeys: String, CodingKey {
        case address
        case balance
        case created
        case currency
        case defaultSource = "default_source"
        case isDelinquent = "delinquent"
        case description
        case discount
        case email
        case id
        case invoicePrefix = "invoice_prefix"
        case invoiceSettings = "invoice_settings"
        case isLivemode = "livemode"
        case metadata
        case name
        case nextInvoiceSequence = "next_invoice_sequence"
        case object
        case phone
        case preferredLocales = "preferred_locales"
        case shipping
        case sources
        case subscriptions
        case tax
        case taxExempt = "tax_exempt"
        case taxIDs = "tax_ids"
    }
}

/// Customer_acceptance
public struct CustomerAcceptance: Codable {
    /// The time at which the customer accepted the Mandate.
    public var acceptedAt: Int?
    /// Offline_acceptance
    public var offline: [String: AnyJSON]?
    /// Online_acceptance
    public var online: OnlineAcceptance?
    /// The type of customer acceptance information included with the Mandate. One of `online` or `offline`.
    public var type: `Type`

    /// The type of customer acceptance information included with the Mandate. One of `online` or `offline`.
    public enum `Type`: String, Codable, CaseIterable {
        case offline
        case online
    }

    public init(acceptedAt: Int? = nil, offline: [String: AnyJSON]? = nil, online: OnlineAcceptance? = nil, type: `Type`) {
        self.acceptedAt = acceptedAt
        self.offline = offline
        self.online = online
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case acceptedAt = "accepted_at"
        case offline
        case online
        case type
    }
}

/// Each customer has a [`balance`](https://stripe.com/docs/api/customers/object#customer_object-balance) value,
/// which denotes a debit or credit that's automatically applied to their next invoice upon finalization.
/// You may modify the value directly by using the [update customer API](https://stripe.com/docs/api/customers/update),
/// or by creating a Customer Balance Transaction, which increments or decrements the customer's `balance` by the specified `amount`.
/// 
/// Related guide: [Customer Balance](https://stripe.com/docs/billing/customer/balance) to learn more.
public struct CustomerBalanceTransaction: Codable {
    /// The amount of the transaction. A negative value is a credit for the customer's balance, and a positive value is a debit to the customer's `balance`.
    public var amount: Int
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The ID of the credit note (if any) related to the transaction.
    public var creditNote: CreditNote?
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// The ID of the customer the transaction belongs to.
    public var customer: Customer
    /// An arbitrary string attached to the object. Often useful for displaying to users.
    public var description: String?
    /// The customer's `balance` after the transaction was applied. A negative value decreases the amount due on the customer's next invoice. A positive value increases the amount due on the customer's next invoice.
    public var endingBalance: Int
    /// Unique identifier for the object.
    public var id: String
    /// The ID of the invoice (if any) related to the transaction.
    public var invoice: Invoice?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Transaction type: `adjustment`, `applied_to_invoice`, `credit_note`, `initial`, `invoice_too_large`, `invoice_too_small`, `unspent_receiver_credit`, or `unapplied_from_invoice`. See the [Customer Balance page](https://stripe.com/docs/billing/customer/balance#types) to learn more about transaction types.
    public var type: `Type`

    /// The ID of the credit note (if any) related to the transaction.
    public final class CreditNote: Codable {
        public var string: String?
        public var creditNote: StripeAPI.CreditNote?

        public init(string: String? = nil, creditNote: StripeAPI.CreditNote? = nil) {
            self.string = string
            self.creditNote = creditNote
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.creditNote = try? container.decode(StripeAPI.CreditNote.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = creditNote { try container.encode(value) }
        }
    }

    /// The ID of the customer the transaction belongs to.
    public final class Customer: Codable {
        public var string: String?
        public var customer: StripeAPI.Customer?

        public init(string: String? = nil, customer: StripeAPI.Customer? = nil) {
            self.string = string
            self.customer = customer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeAPI.Customer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
        }
    }

    /// The ID of the invoice (if any) related to the transaction.
    public final class Invoice: Codable {
        public var string: String?
        public var invoice: StripeAPI.Invoice?

        public init(string: String? = nil, invoice: StripeAPI.Invoice? = nil) {
            self.string = string
            self.invoice = invoice
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.invoice = try? container.decode(StripeAPI.Invoice.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = invoice { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case customerBalanceTransaction = "customer_balance_transaction"
    }

    /// Transaction type: `adjustment`, `applied_to_invoice`, `credit_note`, `initial`, `invoice_too_large`, `invoice_too_small`, `unspent_receiver_credit`, or `unapplied_from_invoice`. See the [Customer Balance page](https://stripe.com/docs/billing/customer/balance#types) to learn more about transaction types.
    public enum `Type`: String, Codable, CaseIterable {
        case adjustment
        case appliedToInvoice = "applied_to_invoice"
        case creditNote = "credit_note"
        case initial
        case invoiceTooLarge = "invoice_too_large"
        case invoiceTooSmall = "invoice_too_small"
        case migration
        case unappliedFromInvoice = "unapplied_from_invoice"
        case unspentReceiverCredit = "unspent_receiver_credit"
    }

    public init(amount: Int, created: Int, creditNote: CreditNote? = nil, currency: String, customer: Customer, description: String? = nil, endingBalance: Int, id: String, invoice: Invoice? = nil, isLivemode: Bool, metadata: [String: String]? = nil, object: Object, type: `Type`) {
        self.amount = amount
        self.created = created
        self.creditNote = creditNote
        self.currency = currency
        self.customer = customer
        self.description = description
        self.endingBalance = endingBalance
        self.id = id
        self.invoice = invoice
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case created
        case creditNote = "credit_note"
        case currency
        case customer
        case description
        case endingBalance = "ending_balance"
        case id
        case invoice
        case isLivemode = "livemode"
        case metadata
        case object
        case type
    }
}

public struct CustomerTax: Codable {
    /// Surfaces if automatic tax computation is possible given the current customer location information.
    public var automaticTax: AutomaticTax
    /// A recent IP address of the customer used for tax reporting and tax location inference.
    public var ipAddress: String?
    /// The customer's location as identified by Stripe Tax.
    public var location: Location?

    /// Surfaces if automatic tax computation is possible given the current customer location information.
    public enum AutomaticTax: String, Codable, CaseIterable {
        case failed
        case notCollecting = "not_collecting"
        case supported
        case unrecognizedLocation = "unrecognized_location"
    }

    /// The customer's location as identified by Stripe Tax.
    public struct Location: Codable {
        public var customerTaxLocation: CustomerTaxLocation?

        public init(customerTaxLocation: CustomerTaxLocation? = nil) {
            self.customerTaxLocation = customerTaxLocation
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.customerTaxLocation = try? container.decode(CustomerTaxLocation.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = customerTaxLocation { try container.encode(value) }
        }
    }

    public init(automaticTax: AutomaticTax, ipAddress: String? = nil, location: Location? = nil) {
        self.automaticTax = automaticTax
        self.ipAddress = ipAddress
        self.location = location
    }

    private enum CodingKeys: String, CodingKey {
        case automaticTax = "automatic_tax"
        case ipAddress = "ip_address"
        case location
    }
}

public struct CustomerTaxLocation: Codable {
    /// The customer's country as identified by Stripe Tax.
    public var country: String
    /// The data source used to infer the customer's location.
    public var source: Source
    /// The customer's state, county, province, or region as identified by Stripe Tax.
    public var state: String?

    /// The data source used to infer the customer's location.
    public enum Source: String, Codable, CaseIterable {
        case billingAddress = "billing_address"
        case ipAddress = "ip_address"
        case paymentMethod = "payment_method"
        case shippingDestination = "shipping_destination"
    }

    public init(country: String, source: Source, state: String? = nil) {
        self.country = country
        self.source = source
        self.state = state
    }
}

public struct DeletedAccount: Codable {
    /// Always true for a deleted object
    public var isDeleted: Bool
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case account
    }

    public init(isDeleted: Bool, id: String, object: Object) {
        self.isDeleted = isDeleted
        self.id = id
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case isDeleted = "deleted"
        case id
        case object
    }
}

/// AlipayDeletedAccount
public struct DeletedAlipayAccount: Codable {
    /// Always true for a deleted object
    public var isDeleted: Bool
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case alipayAccount = "alipay_account"
    }

    public init(isDeleted: Bool, id: String, object: Object) {
        self.isDeleted = isDeleted
        self.id = id
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case isDeleted = "deleted"
        case id
        case object
    }
}

public struct DeletedApplePayDomain: Codable {
    /// Always true for a deleted object
    public var isDeleted: Bool
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case applePayDomain = "apple_pay_domain"
    }

    public init(isDeleted: Bool, id: String, object: Object) {
        self.isDeleted = isDeleted
        self.id = id
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case isDeleted = "deleted"
        case id
        case object
    }
}

public struct DeletedBankAccount: Codable {
    /// Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
    public var currency: String?
    /// Always true for a deleted object
    public var isDeleted: Bool
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case bankAccount = "bank_account"
    }

    public init(currency: String? = nil, isDeleted: Bool, id: String, object: Object) {
        self.currency = currency
        self.isDeleted = isDeleted
        self.id = id
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case currency
        case isDeleted = "deleted"
        case id
        case object
    }
}

/// BitcoinDeletedReceiver
public struct DeletedBitcoinReceiver: Codable {
    /// Always true for a deleted object
    public var isDeleted: Bool
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case bitcoinReceiver = "bitcoin_receiver"
    }

    public init(isDeleted: Bool, id: String, object: Object) {
        self.isDeleted = isDeleted
        self.id = id
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case isDeleted = "deleted"
        case id
        case object
    }
}

public struct DeletedCard: Codable {
    /// Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
    public var currency: String?
    /// Always true for a deleted object
    public var isDeleted: Bool
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case card
    }

    public init(currency: String? = nil, isDeleted: Bool, id: String, object: Object) {
        self.currency = currency
        self.isDeleted = isDeleted
        self.id = id
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case currency
        case isDeleted = "deleted"
        case id
        case object
    }
}

public struct DeletedCoupon: Codable {
    /// Always true for a deleted object
    public var isDeleted: Bool
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case coupon
    }

    public init(isDeleted: Bool, id: String, object: Object) {
        self.isDeleted = isDeleted
        self.id = id
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case isDeleted = "deleted"
        case id
        case object
    }
}

public struct DeletedCustomer: Codable {
    /// Always true for a deleted object
    public var isDeleted: Bool
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case customer
    }

    public init(isDeleted: Bool, id: String, object: Object) {
        self.isDeleted = isDeleted
        self.id = id
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case isDeleted = "deleted"
        case id
        case object
    }
}

public struct DeletedDiscount: Codable {
    /// The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode.
    public var checkoutSession: String?
    /// A coupon contains information about a percent-off or amount-off discount you
    /// might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
    /// [orders](https://stripe.com/docs/api#create_order_legacy-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
    public var coupon: Coupon
    /// The ID of the customer associated with this discount.
    public var customer: Customer?
    /// Always true for a deleted object
    public var isDeleted: Bool
    /// The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array.
    public var id: String
    /// The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice.
    public var invoice: String?
    /// The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item.
    public var invoiceItem: String?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The promotion code applied to create this discount.
    public var promotionCode: PromotionCode?
    /// Date that the coupon was applied.
    public var start: Int
    /// The subscription that this coupon is applied to, if it is applied to a particular subscription.
    public var subscription: String?

    /// The ID of the customer associated with this discount.
    public final class Customer: Codable {
        public var string: String?
        public var customer: StripeAPI.Customer?
        public var deletedCustomer: DeletedCustomer?

        public init(string: String? = nil, customer: StripeAPI.Customer? = nil, deletedCustomer: DeletedCustomer? = nil) {
            self.string = string
            self.customer = customer
            self.deletedCustomer = deletedCustomer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeAPI.Customer.self)
            self.deletedCustomer = try? container.decode(DeletedCustomer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
            if let value = deletedCustomer { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case discount
    }

    /// The promotion code applied to create this discount.
    public final class PromotionCode: Codable {
        public var string: String?
        public var promotionCode: StripeAPI.PromotionCode?

        public init(string: String? = nil, promotionCode: StripeAPI.PromotionCode? = nil) {
            self.string = string
            self.promotionCode = promotionCode
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.promotionCode = try? container.decode(StripeAPI.PromotionCode.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = promotionCode { try container.encode(value) }
        }
    }

    public init(checkoutSession: String? = nil, coupon: Coupon, customer: Customer? = nil, isDeleted: Bool, id: String, invoice: String? = nil, invoiceItem: String? = nil, object: Object, promotionCode: PromotionCode? = nil, start: Int, subscription: String? = nil) {
        self.checkoutSession = checkoutSession
        self.coupon = coupon
        self.customer = customer
        self.isDeleted = isDeleted
        self.id = id
        self.invoice = invoice
        self.invoiceItem = invoiceItem
        self.object = object
        self.promotionCode = promotionCode
        self.start = start
        self.subscription = subscription
    }

    private enum CodingKeys: String, CodingKey {
        case checkoutSession = "checkout_session"
        case coupon
        case customer
        case isDeleted = "deleted"
        case id
        case invoice
        case invoiceItem = "invoice_item"
        case object
        case promotionCode = "promotion_code"
        case start
        case subscription
    }
}

/// Polymorphic
public struct DeletedExternalAccount: Codable {
    public var deletedBankAccount: DeletedBankAccount?
    public var deletedCard: DeletedCard?

    public init(deletedBankAccount: DeletedBankAccount? = nil, deletedCard: DeletedCard? = nil) {
        self.deletedBankAccount = deletedBankAccount
        self.deletedCard = deletedCard
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        self.deletedBankAccount = try? container.decode(DeletedBankAccount.self)
        self.deletedCard = try? container.decode(DeletedCard.self)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        if let value = deletedBankAccount { try container.encode(value) }
        if let value = deletedCard { try container.encode(value) }
    }
}

public struct DeletedInvoice: Codable {
    /// Always true for a deleted object
    public var isDeleted: Bool
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case invoice
    }

    public init(isDeleted: Bool, id: String, object: Object) {
        self.isDeleted = isDeleted
        self.id = id
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case isDeleted = "deleted"
        case id
        case object
    }
}

public struct DeletedInvoiceitem: Codable {
    /// Always true for a deleted object
    public var isDeleted: Bool
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case invoiceitem
    }

    public init(isDeleted: Bool, id: String, object: Object) {
        self.isDeleted = isDeleted
        self.id = id
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case isDeleted = "deleted"
        case id
        case object
    }
}

/// Polymorphic
public struct DeletedPaymentSource: Codable {
    /// AlipayDeletedAccount
    public var deletedAlipayAccount: DeletedAlipayAccount?
    public var deletedBankAccount: DeletedBankAccount?
    /// BitcoinDeletedReceiver
    public var deletedBitcoinReceiver: DeletedBitcoinReceiver?
    public var deletedCard: DeletedCard?

    public init(deletedAlipayAccount: DeletedAlipayAccount? = nil, deletedBankAccount: DeletedBankAccount? = nil, deletedBitcoinReceiver: DeletedBitcoinReceiver? = nil, deletedCard: DeletedCard? = nil) {
        self.deletedAlipayAccount = deletedAlipayAccount
        self.deletedBankAccount = deletedBankAccount
        self.deletedBitcoinReceiver = deletedBitcoinReceiver
        self.deletedCard = deletedCard
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        self.deletedAlipayAccount = try? container.decode(DeletedAlipayAccount.self)
        self.deletedBankAccount = try? container.decode(DeletedBankAccount.self)
        self.deletedBitcoinReceiver = try? container.decode(DeletedBitcoinReceiver.self)
        self.deletedCard = try? container.decode(DeletedCard.self)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        if let value = deletedAlipayAccount { try container.encode(value) }
        if let value = deletedBankAccount { try container.encode(value) }
        if let value = deletedBitcoinReceiver { try container.encode(value) }
        if let value = deletedCard { try container.encode(value) }
    }
}

public struct DeletedPerson: Codable {
    /// Always true for a deleted object
    public var isDeleted: Bool
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case person
    }

    public init(isDeleted: Bool, id: String, object: Object) {
        self.isDeleted = isDeleted
        self.id = id
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case isDeleted = "deleted"
        case id
        case object
    }
}

public struct DeletedPlan: Codable {
    /// Always true for a deleted object
    public var isDeleted: Bool
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case plan
    }

    public init(isDeleted: Bool, id: String, object: Object) {
        self.isDeleted = isDeleted
        self.id = id
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case isDeleted = "deleted"
        case id
        case object
    }
}

public struct DeletedPrice: Codable {
    /// Always true for a deleted object
    public var isDeleted: Bool
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case price
    }

    public init(isDeleted: Bool, id: String, object: Object) {
        self.isDeleted = isDeleted
        self.id = id
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case isDeleted = "deleted"
        case id
        case object
    }
}

public struct DeletedProduct: Codable {
    /// Always true for a deleted object
    public var isDeleted: Bool
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case product
    }

    public init(isDeleted: Bool, id: String, object: Object) {
        self.isDeleted = isDeleted
        self.id = id
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case isDeleted = "deleted"
        case id
        case object
    }
}

/// RadarListDeletedList
public struct DeletedRadarValueList: Codable {
    /// Always true for a deleted object
    public var isDeleted: Bool
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case radarValueList = "radar.value_list"
    }

    public init(isDeleted: Bool, id: String, object: Object) {
        self.isDeleted = isDeleted
        self.id = id
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case isDeleted = "deleted"
        case id
        case object
    }
}

/// RadarListDeletedListItem
public struct DeletedRadarValueListItem: Codable {
    /// Always true for a deleted object
    public var isDeleted: Bool
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case radarValueListItem = "radar.value_list_item"
    }

    public init(isDeleted: Bool, id: String, object: Object) {
        self.isDeleted = isDeleted
        self.id = id
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case isDeleted = "deleted"
        case id
        case object
    }
}

/// DeletedTransferRecipient
public struct DeletedRecipient: Codable {
    /// Always true for a deleted object
    public var isDeleted: Bool
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case recipient
    }

    public init(isDeleted: Bool, id: String, object: Object) {
        self.isDeleted = isDeleted
        self.id = id
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case isDeleted = "deleted"
        case id
        case object
    }
}

public struct DeletedSku: Codable {
    /// Always true for a deleted object
    public var isDeleted: Bool
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case sku
    }

    public init(isDeleted: Bool, id: String, object: Object) {
        self.isDeleted = isDeleted
        self.id = id
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case isDeleted = "deleted"
        case id
        case object
    }
}

public struct DeletedSubscriptionItem: Codable {
    /// Always true for a deleted object
    public var isDeleted: Bool
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case subscriptionItem = "subscription_item"
    }

    public init(isDeleted: Bool, id: String, object: Object) {
        self.isDeleted = isDeleted
        self.id = id
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case isDeleted = "deleted"
        case id
        case object
    }
}

/// Deleted_tax_id
public struct DeletedTaxID: Codable {
    /// Always true for a deleted object
    public var isDeleted: Bool
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case taxID = "tax_id"
    }

    public init(isDeleted: Bool, id: String, object: Object) {
        self.isDeleted = isDeleted
        self.id = id
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case isDeleted = "deleted"
        case id
        case object
    }
}

/// TerminalLocationDeletedLocation
public struct DeletedTerminalLocation: Codable {
    /// Always true for a deleted object
    public var isDeleted: Bool
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case terminalLocation = "terminal.location"
    }

    public init(isDeleted: Bool, id: String, object: Object) {
        self.isDeleted = isDeleted
        self.id = id
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case isDeleted = "deleted"
        case id
        case object
    }
}

/// TerminalReaderDeletedReader
public struct DeletedTerminalReader: Codable {
    /// Always true for a deleted object
    public var isDeleted: Bool
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case terminalReader = "terminal.reader"
    }

    public init(isDeleted: Bool, id: String, object: Object) {
        self.isDeleted = isDeleted
        self.id = id
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case isDeleted = "deleted"
        case id
        case object
    }
}

/// NotificationWebhookEndpointDeleted
public struct DeletedWebhookEndpoint: Codable {
    /// Always true for a deleted object
    public var isDeleted: Bool
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case webhookEndpoint = "webhook_endpoint"
    }

    public init(isDeleted: Bool, id: String, object: Object) {
        self.isDeleted = isDeleted
        self.id = id
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case isDeleted = "deleted"
        case id
        case object
    }
}

public struct DeliveryEstimate: Codable {
    /// If `type` is `"exact"`, `date` will be the expected delivery date in the format YYYY-MM-DD.
    public var date: String?
    /// If `type` is `"range"`, `earliest` will be be the earliest delivery date in the format YYYY-MM-DD.
    public var earliest: String?
    /// If `type` is `"range"`, `latest` will be the latest delivery date in the format YYYY-MM-DD.
    public var latest: String?
    /// The type of estimate. Must be either `"range"` or `"exact"`.
    public var type: String

    public init(date: String? = nil, earliest: String? = nil, latest: String? = nil, type: String) {
        self.date = date
        self.earliest = earliest
        self.latest = latest
        self.type = type
    }
}

/// A discount represents the actual application of a coupon to a particular
/// customer. It contains information about when the discount began and when it
/// will end.
/// 
/// Related guide: [Applying Discounts to Subscriptions](https://stripe.com/docs/billing/subscriptions/discounts).
public struct Discount: Codable {
    /// The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode.
    public var checkoutSession: String?
    /// A coupon contains information about a percent-off or amount-off discount you
    /// might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
    /// [orders](https://stripe.com/docs/api#create_order_legacy-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
    public var coupon: Coupon
    /// The ID of the customer associated with this discount.
    public var customer: Customer?
    /// If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null.
    public var end: Int?
    /// The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array.
    public var id: String
    /// The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice.
    public var invoice: String?
    /// The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item.
    public var invoiceItem: String?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The promotion code applied to create this discount.
    public var promotionCode: PromotionCode?
    /// Date that the coupon was applied.
    public var start: Int
    /// The subscription that this coupon is applied to, if it is applied to a particular subscription.
    public var subscription: String?

    /// The ID of the customer associated with this discount.
    public final class Customer: Codable {
        public var string: String?
        public var customer: StripeAPI.Customer?
        public var deletedCustomer: DeletedCustomer?

        public init(string: String? = nil, customer: StripeAPI.Customer? = nil, deletedCustomer: DeletedCustomer? = nil) {
            self.string = string
            self.customer = customer
            self.deletedCustomer = deletedCustomer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeAPI.Customer.self)
            self.deletedCustomer = try? container.decode(DeletedCustomer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
            if let value = deletedCustomer { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case discount
    }

    /// The promotion code applied to create this discount.
    public final class PromotionCode: Codable {
        public var string: String?
        public var promotionCode: StripeAPI.PromotionCode?

        public init(string: String? = nil, promotionCode: StripeAPI.PromotionCode? = nil) {
            self.string = string
            self.promotionCode = promotionCode
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.promotionCode = try? container.decode(StripeAPI.PromotionCode.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = promotionCode { try container.encode(value) }
        }
    }

    public init(checkoutSession: String? = nil, coupon: Coupon, customer: Customer? = nil, end: Int? = nil, id: String, invoice: String? = nil, invoiceItem: String? = nil, object: Object, promotionCode: PromotionCode? = nil, start: Int, subscription: String? = nil) {
        self.checkoutSession = checkoutSession
        self.coupon = coupon
        self.customer = customer
        self.end = end
        self.id = id
        self.invoice = invoice
        self.invoiceItem = invoiceItem
        self.object = object
        self.promotionCode = promotionCode
        self.start = start
        self.subscription = subscription
    }

    private enum CodingKeys: String, CodingKey {
        case checkoutSession = "checkout_session"
        case coupon
        case customer
        case end
        case id
        case invoice
        case invoiceItem = "invoice_item"
        case object
        case promotionCode = "promotion_code"
        case start
        case subscription
    }
}

public struct DiscountsResourceDiscountAmount: Codable {
    /// The amount, in %s, of the discount.
    public var amount: Int
    /// The discount that was applied to get this discount amount.
    public var discount: Discount

    /// The discount that was applied to get this discount amount.
    public final class Discount: Codable {
        public var string: String?
        public var discount: StripeAPI.Discount?
        public var deletedDiscount: DeletedDiscount?

        public init(string: String? = nil, discount: StripeAPI.Discount? = nil, deletedDiscount: DeletedDiscount? = nil) {
            self.string = string
            self.discount = discount
            self.deletedDiscount = deletedDiscount
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.discount = try? container.decode(StripeAPI.Discount.self)
            self.deletedDiscount = try? container.decode(DeletedDiscount.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = discount { try container.encode(value) }
            if let value = deletedDiscount { try container.encode(value) }
        }
    }

    public init(amount: Int, discount: Discount) {
        self.amount = amount
        self.discount = discount
    }
}

/// A dispute occurs when a customer questions your charge with their card issuer.
/// When this happens, you're given the opportunity to respond to the dispute with
/// evidence that shows that the charge is legitimate. You can find more
/// information about the dispute process in our [Disputes and
/// Fraud](/docs/disputes) documentation.
/// 
/// Related guide: [Disputes and Fraud](https://stripe.com/docs/disputes).
public struct Dispute: Codable {
    /// Disputed amount. Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed).
    public var amount: Int
    /// List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute.
    public var balanceTransactions: [BalanceTransaction]
    /// ID of the charge that was disputed.
    public var charge: Charge
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    public var evidence: DisputeEvidence
    /// DisputeEvidenceDetails
    public var evidenceDetails: DisputeEvidenceDetails
    /// Unique identifier for the object.
    public var id: String
    /// If true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute.
    public var isChargeRefundable: Bool
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// ID of the PaymentIntent that was disputed.
    public var paymentIntent: PaymentIntent?
    /// Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).
    public var reason: String
    /// Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `charge_refunded`, `won`, or `lost`.
    public var status: Status

    /// ID of the charge that was disputed.
    public final class Charge: Codable {
        public var string: String?
        public var charge: StripeAPI.Charge?

        public init(string: String? = nil, charge: StripeAPI.Charge? = nil) {
            self.string = string
            self.charge = charge
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.charge = try? container.decode(StripeAPI.Charge.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = charge { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case dispute
    }

    /// ID of the PaymentIntent that was disputed.
    public final class PaymentIntent: Codable {
        public var string: String?
        public var paymentIntent: StripeAPI.PaymentIntent?

        public init(string: String? = nil, paymentIntent: StripeAPI.PaymentIntent? = nil) {
            self.string = string
            self.paymentIntent = paymentIntent
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentIntent = try? container.decode(StripeAPI.PaymentIntent.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentIntent { try container.encode(value) }
        }
    }

    /// Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `charge_refunded`, `won`, or `lost`.
    public enum Status: String, Codable, CaseIterable {
        case chargeRefunded = "charge_refunded"
        case lost
        case needsResponse = "needs_response"
        case underReview = "under_review"
        case warningClosed = "warning_closed"
        case warningNeedsResponse = "warning_needs_response"
        case warningUnderReview = "warning_under_review"
        case won
    }

    public init(amount: Int, balanceTransactions: [BalanceTransaction], charge: Charge, created: Int, currency: String, evidence: DisputeEvidence, evidenceDetails: DisputeEvidenceDetails, id: String, isChargeRefundable: Bool, isLivemode: Bool, metadata: [String: String], object: Object, paymentIntent: PaymentIntent? = nil, reason: String, status: Status) {
        self.amount = amount
        self.balanceTransactions = balanceTransactions
        self.charge = charge
        self.created = created
        self.currency = currency
        self.evidence = evidence
        self.evidenceDetails = evidenceDetails
        self.id = id
        self.isChargeRefundable = isChargeRefundable
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.paymentIntent = paymentIntent
        self.reason = reason
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case balanceTransactions = "balance_transactions"
        case charge
        case created
        case currency
        case evidence
        case evidenceDetails = "evidence_details"
        case id
        case isChargeRefundable = "is_charge_refundable"
        case isLivemode = "livemode"
        case metadata
        case object
        case paymentIntent = "payment_intent"
        case reason
        case status
    }
}

public struct DisputeEvidence: Codable {
    /// Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity.
    public var accessActivityLog: String?
    /// The billing address provided by the customer.
    public var billingAddress: String?
    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your subscription cancellation policy, as shown to the customer.
    public var cancellationPolicy: CancellationPolicy?
    /// An explanation of how and when the customer was shown your refund policy prior to purchase.
    public var cancellationPolicyDisclosure: String?
    /// A justification for why the customer's subscription was not canceled.
    public var cancellationRebuttal: String?
    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any communication with the customer that you feel is relevant to your case. Examples include emails proving that the customer received the product or service, or demonstrating their use of or satisfaction with the product or service.
    public var customerCommunication: CustomerCommunication?
    /// The email address of the customer.
    public var customerEmailAddress: String?
    /// The name of the customer.
    public var customerName: String?
    /// The IP address that the customer used when making the purchase.
    public var customerPurchaseIp: String?
    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A relevant document or contract showing the customer's signature.
    public var customerSignature: CustomerSignature?
    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation for the prior charge that can uniquely identify the charge, such as a receipt, shipping label, work order, etc. This document should be paired with a similar document from the disputed payment that proves the two payments are separate.
    public var duplicateChargeDocumentation: DuplicateChargeDocumentation?
    /// An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate.
    public var duplicateChargeExplanation: String?
    /// The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge.
    public var duplicateChargeID: String?
    /// A description of the product or service that was sold.
    public var productDescription: String?
    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any receipt or message sent to the customer notifying them of the charge.
    public var receipt: Receipt?
    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your refund policy, as shown to the customer.
    public var refundPolicy: RefundPolicy?
    /// Documentation demonstrating that the customer was shown your refund policy prior to purchase.
    public var refundPolicyDisclosure: String?
    /// A justification for why the customer is not entitled to a refund.
    public var refundRefusalExplanation: String?
    /// The date on which the customer received or began receiving the purchased service, in a clear human-readable format.
    public var serviceDate: String?
    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a service was provided to the customer. This could include a copy of a signed contract, work order, or other form of written agreement.
    public var serviceDocumentation: ServiceDocumentation?
    /// The address to which a physical product was shipped. You should try to include as complete address information as possible.
    public var shippingAddress: String?
    /// The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas.
    public var shippingCarrier: String?
    /// The date on which a physical product began its route to the shipping address, in a clear human-readable format.
    public var shippingDate: String?
    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a product was shipped to the customer at the same address the customer provided to you. This could include a copy of the shipment receipt, shipping label, etc. It should show the customer's full shipping address, if possible.
    public var shippingDocumentation: ShippingDocumentation?
    /// The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
    public var shippingTrackingNumber: String?
    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any additional evidence or statements.
    public var uncategorizedFile: UncategorizedFile?
    /// Any additional evidence or statements.
    public var uncategorizedText: String?

    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your subscription cancellation policy, as shown to the customer.
    public struct CancellationPolicy: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any communication with the customer that you feel is relevant to your case. Examples include emails proving that the customer received the product or service, or demonstrating their use of or satisfaction with the product or service.
    public struct CustomerCommunication: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A relevant document or contract showing the customer's signature.
    public struct CustomerSignature: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation for the prior charge that can uniquely identify the charge, such as a receipt, shipping label, work order, etc. This document should be paired with a similar document from the disputed payment that proves the two payments are separate.
    public struct DuplicateChargeDocumentation: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any receipt or message sent to the customer notifying them of the charge.
    public struct Receipt: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your refund policy, as shown to the customer.
    public struct RefundPolicy: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a service was provided to the customer. This could include a copy of a signed contract, work order, or other form of written agreement.
    public struct ServiceDocumentation: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a product was shipped to the customer at the same address the customer provided to you. This could include a copy of the shipment receipt, shipping label, etc. It should show the customer's full shipping address, if possible.
    public struct ShippingDocumentation: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any additional evidence or statements.
    public struct UncategorizedFile: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    public init(accessActivityLog: String? = nil, billingAddress: String? = nil, cancellationPolicy: CancellationPolicy? = nil, cancellationPolicyDisclosure: String? = nil, cancellationRebuttal: String? = nil, customerCommunication: CustomerCommunication? = nil, customerEmailAddress: String? = nil, customerName: String? = nil, customerPurchaseIp: String? = nil, customerSignature: CustomerSignature? = nil, duplicateChargeDocumentation: DuplicateChargeDocumentation? = nil, duplicateChargeExplanation: String? = nil, duplicateChargeID: String? = nil, productDescription: String? = nil, receipt: Receipt? = nil, refundPolicy: RefundPolicy? = nil, refundPolicyDisclosure: String? = nil, refundRefusalExplanation: String? = nil, serviceDate: String? = nil, serviceDocumentation: ServiceDocumentation? = nil, shippingAddress: String? = nil, shippingCarrier: String? = nil, shippingDate: String? = nil, shippingDocumentation: ShippingDocumentation? = nil, shippingTrackingNumber: String? = nil, uncategorizedFile: UncategorizedFile? = nil, uncategorizedText: String? = nil) {
        self.accessActivityLog = accessActivityLog
        self.billingAddress = billingAddress
        self.cancellationPolicy = cancellationPolicy
        self.cancellationPolicyDisclosure = cancellationPolicyDisclosure
        self.cancellationRebuttal = cancellationRebuttal
        self.customerCommunication = customerCommunication
        self.customerEmailAddress = customerEmailAddress
        self.customerName = customerName
        self.customerPurchaseIp = customerPurchaseIp
        self.customerSignature = customerSignature
        self.duplicateChargeDocumentation = duplicateChargeDocumentation
        self.duplicateChargeExplanation = duplicateChargeExplanation
        self.duplicateChargeID = duplicateChargeID
        self.productDescription = productDescription
        self.receipt = receipt
        self.refundPolicy = refundPolicy
        self.refundPolicyDisclosure = refundPolicyDisclosure
        self.refundRefusalExplanation = refundRefusalExplanation
        self.serviceDate = serviceDate
        self.serviceDocumentation = serviceDocumentation
        self.shippingAddress = shippingAddress
        self.shippingCarrier = shippingCarrier
        self.shippingDate = shippingDate
        self.shippingDocumentation = shippingDocumentation
        self.shippingTrackingNumber = shippingTrackingNumber
        self.uncategorizedFile = uncategorizedFile
        self.uncategorizedText = uncategorizedText
    }

    private enum CodingKeys: String, CodingKey {
        case accessActivityLog = "access_activity_log"
        case billingAddress = "billing_address"
        case cancellationPolicy = "cancellation_policy"
        case cancellationPolicyDisclosure = "cancellation_policy_disclosure"
        case cancellationRebuttal = "cancellation_rebuttal"
        case customerCommunication = "customer_communication"
        case customerEmailAddress = "customer_email_address"
        case customerName = "customer_name"
        case customerPurchaseIp = "customer_purchase_ip"
        case customerSignature = "customer_signature"
        case duplicateChargeDocumentation = "duplicate_charge_documentation"
        case duplicateChargeExplanation = "duplicate_charge_explanation"
        case duplicateChargeID = "duplicate_charge_id"
        case productDescription = "product_description"
        case receipt
        case refundPolicy = "refund_policy"
        case refundPolicyDisclosure = "refund_policy_disclosure"
        case refundRefusalExplanation = "refund_refusal_explanation"
        case serviceDate = "service_date"
        case serviceDocumentation = "service_documentation"
        case shippingAddress = "shipping_address"
        case shippingCarrier = "shipping_carrier"
        case shippingDate = "shipping_date"
        case shippingDocumentation = "shipping_documentation"
        case shippingTrackingNumber = "shipping_tracking_number"
        case uncategorizedFile = "uncategorized_file"
        case uncategorizedText = "uncategorized_text"
    }
}

public struct DisputeEvidenceDetails: Codable {
    /// Date by which evidence must be submitted in order to successfully challenge dispute. Will be null if the customer's bank or credit card company doesn't allow a response for this particular dispute.
    public var dueBy: Int?
    /// Whether evidence has been staged for this dispute.
    public var hasEvidence: Bool
    /// Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed.
    public var isPastDue: Bool
    /// The number of times evidence has been submitted. Typically, you may only submit evidence once.
    public var submissionCount: Int

    public init(dueBy: Int? = nil, hasEvidence: Bool, isPastDue: Bool, submissionCount: Int) {
        self.dueBy = dueBy
        self.hasEvidence = hasEvidence
        self.isPastDue = isPastDue
        self.submissionCount = submissionCount
    }

    private enum CodingKeys: String, CodingKey {
        case dueBy = "due_by"
        case hasEvidence = "has_evidence"
        case isPastDue = "past_due"
        case submissionCount = "submission_count"
    }
}

public struct EphemeralKey: Codable {
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Time at which the key will expire. Measured in seconds since the Unix epoch.
    public var expires: Int
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The key's secret. You can use this value to make authorized requests to the Stripe API.
    public var secret: String?

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case ephemeralKey = "ephemeral_key"
    }

    public init(created: Int, expires: Int, id: String, isLivemode: Bool, object: Object, secret: String? = nil) {
        self.created = created
        self.expires = expires
        self.id = id
        self.isLivemode = isLivemode
        self.object = object
        self.secret = secret
    }

    private enum CodingKeys: String, CodingKey {
        case created
        case expires
        case id
        case isLivemode = "livemode"
        case object
        case secret
    }
}

/// An error response from the Stripe API
public struct Error: Codable {
    public var error: APIErrors

    public init(error: APIErrors) {
        self.error = error
    }
}

/// NotificationEvent
///
/// Events are our way of letting you know when something interesting happens in
/// your account. When an interesting event occurs, we create a new `Event`
/// object. For example, when a charge succeeds, we create a `charge.succeeded`
/// event; and when an invoice payment attempt fails, we create an
/// `invoice.payment_failed` event. Note that many API requests may cause multiple
/// events to be created. For example, if you create a new subscription for a
/// customer, you will receive both a `customer.subscription.created` event and a
/// `charge.succeeded` event.
/// 
/// Events occur when the state of another API resource changes. The state of that
/// resource at the time of the change is embedded in the event's data field. For
/// example, a `charge.succeeded` event will contain a charge, and an
/// `invoice.payment_failed` event will contain an invoice.
/// 
/// As with other API resources, you can use endpoints to retrieve an
/// [individual event](https://stripe.com/docs/api#retrieve_event) or a [list of events](https://stripe.com/docs/api#list_events)
/// from the API. We also have a separate
/// [webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the
/// `Event` objects directly to an endpoint on your server. Webhooks are managed
/// in your
/// [account settings](https://dashboard.stripe.com/account/webhooks),
/// and our [Using Webhooks](https://stripe.com/docs/webhooks) guide will help you get set up.
/// 
/// When using [Connect](https://stripe.com/docs/connect), you can also receive notifications of
/// events that occur in connected accounts. For these events, there will be an
/// additional `account` attribute in the received `Event` object.
/// 
/// **NOTE:** Right now, access to events through the [Retrieve Event API](https://stripe.com/docs/api#retrieve_event) is
/// guaranteed only for 30 days.
public struct Event: Codable {
    /// The connected account that originated the event.
    public var account: String?
    /// The Stripe API version used to render `data`. *Note: This property is populated only for events on or after October 31, 2014*.
    public var apiVersion: String?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// NotificationEventData
    public var data: NotificationEventData
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Number of webhooks that have yet to be successfully delivered (i.e., to return a 20x response) to the URLs you've specified.
    public var pendingWebhooks: Int
    /// Information on the API request that instigated the event.
    public var request: Request?
    /// Description of the event (e.g., `invoice.created` or `charge.refunded`).
    public var type: String

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case event
    }

    /// Information on the API request that instigated the event.
    public struct Request: Codable {
        public var notificationEventRequest: NotificationEventRequest?

        public init(notificationEventRequest: NotificationEventRequest? = nil) {
            self.notificationEventRequest = notificationEventRequest
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.notificationEventRequest = try? container.decode(NotificationEventRequest.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = notificationEventRequest { try container.encode(value) }
        }
    }

    public init(account: String? = nil, apiVersion: String? = nil, created: Int, data: NotificationEventData, id: String, isLivemode: Bool, object: Object, pendingWebhooks: Int, request: Request? = nil, type: String) {
        self.account = account
        self.apiVersion = apiVersion
        self.created = created
        self.data = data
        self.id = id
        self.isLivemode = isLivemode
        self.object = object
        self.pendingWebhooks = pendingWebhooks
        self.request = request
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case account
        case apiVersion = "api_version"
        case created
        case data
        case id
        case isLivemode = "livemode"
        case object
        case pendingWebhooks = "pending_webhooks"
        case request
        case type
    }
}

/// `Exchange Rate` objects allow you to determine the rates that Stripe is
/// currently using to convert from one currency to another. Since this number is
/// variable throughout the day, there are various reasons why you might want to
/// know the current rate (for example, to dynamically price an item for a user
/// with a default payment in a foreign currency).
/// 
/// If you want a guarantee that the charge is made with a certain exchange rate
/// you expect is current, you can pass in `exchange_rate` to charges endpoints.
/// If the value is no longer up to date, the charge won't go through. Please
/// refer to our [Exchange Rates API](https://stripe.com/docs/exchange-rates) guide for more
/// details.
public struct ExchangeRate: Codable {
    /// Unique identifier for the object. Represented as the three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) in lowercase.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Hash where the keys are supported currencies and the values are the exchange rate at which the base id currency converts to the key currency.
    public var rates: [String: Double]

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case exchangeRate = "exchange_rate"
    }

    public init(id: String, object: Object, rates: [String: Double]) {
        self.id = id
        self.object = object
        self.rates = rates
    }
}

/// Polymorphic
public struct ExternalAccount: Codable {
    public var bankAccount: BankAccount?
    public var card: Card?

    public init(bankAccount: BankAccount? = nil, card: Card? = nil) {
        self.bankAccount = bankAccount
        self.card = card
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        self.bankAccount = try? container.decode(BankAccount.self)
        self.card = try? container.decode(Card.self)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        if let value = bankAccount { try container.encode(value) }
        if let value = card { try container.encode(value) }
    }
}

public struct Fee: Codable {
    /// Amount of the fee, in cents.
    public var amount: Int
    /// ID of the Connect application that earned the fee.
    public var application: String?
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// An arbitrary string attached to the object. Often useful for displaying to users.
    public var description: String?
    /// Type of the fee, one of: `application_fee`, `stripe_fee` or `tax`.
    public var type: String

    public init(amount: Int, application: String? = nil, currency: String, description: String? = nil, type: String) {
        self.amount = amount
        self.application = application
        self.currency = currency
        self.description = description
        self.type = type
    }
}

/// `Application Fee Refund` objects allow you to refund an application fee that
/// has previously been created but not yet refunded. Funds will be refunded to
/// the Stripe account from which the fee was originally collected.
/// 
/// Related guide: [Refunding Application Fees](https://stripe.com/docs/connect/destination-charges#refunding-app-fee).
public struct FeeRefund: Codable {
    /// Amount, in %s.
    public var amount: Int
    /// Balance transaction that describes the impact on your account balance.
    public var balanceTransaction: BalanceTransaction?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// ID of the application fee that was refunded.
    public var fee: Fee
    /// Unique identifier for the object.
    public var id: String
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// Balance transaction that describes the impact on your account balance.
    public final class BalanceTransaction: Codable {
        public var string: String?
        public var balanceTransaction: StripeAPI.BalanceTransaction?

        public init(string: String? = nil, balanceTransaction: StripeAPI.BalanceTransaction? = nil) {
            self.string = string
            self.balanceTransaction = balanceTransaction
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.balanceTransaction = try? container.decode(StripeAPI.BalanceTransaction.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = balanceTransaction { try container.encode(value) }
        }
    }

    /// ID of the application fee that was refunded.
    public struct Fee: Codable {
        public var string: String?
        public var applicationFee: ApplicationFee?

        public init(string: String? = nil, applicationFee: ApplicationFee? = nil) {
            self.string = string
            self.applicationFee = applicationFee
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.applicationFee = try? container.decode(ApplicationFee.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = applicationFee { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case feeRefund = "fee_refund"
    }

    public init(amount: Int, balanceTransaction: BalanceTransaction? = nil, created: Int, currency: String, fee: Fee, id: String, metadata: [String: String]? = nil, object: Object) {
        self.amount = amount
        self.balanceTransaction = balanceTransaction
        self.created = created
        self.currency = currency
        self.fee = fee
        self.id = id
        self.metadata = metadata
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case balanceTransaction = "balance_transaction"
        case created
        case currency
        case fee
        case id
        case metadata
        case object
    }
}

/// This is an object representing a file hosted on Stripe's servers. The
/// file may have been uploaded by yourself using the [create file](https://stripe.com/docs/api#create_file)
/// request (for example, when uploading dispute evidence) or it may have
/// been created by Stripe (for example, the results of a [Sigma scheduled
/// query](#scheduled_queries)).
/// 
/// Related guide: [File Upload Guide](https://stripe.com/docs/file-upload).
public struct File: Codable {
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The time at which the file expires and is no longer available in epoch seconds.
    public var expiresAt: Int?
    /// A filename for the file, suitable for saving to a filesystem.
    public var filename: String?
    /// Unique identifier for the object.
    public var id: String
    /// FileFileLinkList
    ///
    /// A list of [file links](https://stripe.com/docs/api#file_links) that point at this file.
    public var links: Links?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file.
    public var purpose: Purpose
    /// The size in bytes of the file object.
    public var size: Int
    /// A user friendly title for the document.
    public var title: String?
    /// The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`).
    public var type: String?
    /// The URL from which the file can be downloaded using your live secret API key.
    public var url: String?

    /// FileFileLinkList
    ///
    /// A list of [file links](https://stripe.com/docs/api#file_links) that point at this file.
    public struct Links: Codable {
        /// Details about each object.
        public var data: [FileLink]
        /// True if this list has another page of items after this one that can be fetched.
        public var hasMore: Bool
        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public var object: Object
        /// The URL where this list can be accessed.
        public var url: String

        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public enum Object: String, Codable, CaseIterable {
            case list
        }

        public init(data: [FileLink], hasMore: Bool, object: Object, url: String) {
            self.data = data
            self.hasMore = hasMore
            self.object = object
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case data
            case hasMore = "has_more"
            case object
            case url
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case file
    }

    /// The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file.
    public enum Purpose: String, Codable, CaseIterable {
        case accountRequirement = "account_requirement"
        case additionalVerification = "additional_verification"
        case businessIcon = "business_icon"
        case businessLogo = "business_logo"
        case customerSignature = "customer_signature"
        case disputeEvidence = "dispute_evidence"
        case documentProviderIdentityDocument = "document_provider_identity_document"
        case financeReportRun = "finance_report_run"
        case identityDocument = "identity_document"
        case identityDocumentDownloadable = "identity_document_downloadable"
        case pciDocument = "pci_document"
        case selfie
        case sigmaScheduledQuery = "sigma_scheduled_query"
        case taxDocumentUserUpload = "tax_document_user_upload"
    }

    public init(created: Int, expiresAt: Int? = nil, filename: String? = nil, id: String, links: Links? = nil, object: Object, purpose: Purpose, size: Int, title: String? = nil, type: String? = nil, url: String? = nil) {
        self.created = created
        self.expiresAt = expiresAt
        self.filename = filename
        self.id = id
        self.links = links
        self.object = object
        self.purpose = purpose
        self.size = size
        self.title = title
        self.type = type
        self.url = url
    }

    private enum CodingKeys: String, CodingKey {
        case created
        case expiresAt = "expires_at"
        case filename
        case id
        case links
        case object
        case purpose
        case size
        case title
        case type
        case url
    }
}

/// To share the contents of a `File` object with non-Stripe users, you can
/// create a `FileLink`. `FileLink`s contain a URL that can be used to
/// retrieve the contents of the file without authentication.
public struct FileLink: Codable {
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Whether this link is already expired.
    public var isExpired: Bool
    /// Time at which the link expires.
    public var expiresAt: Int?
    /// The file object this link points to.
    public var file: File
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The publicly accessible URL to download the file.
    public var url: String?

    /// The file object this link points to.
    public final class File: Codable {
        public var string: String?
        public var file: StripeAPI.File?

        public init(string: String? = nil, file: StripeAPI.File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(StripeAPI.File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case fileLink = "file_link"
    }

    public init(created: Int, isExpired: Bool, expiresAt: Int? = nil, file: File, id: String, isLivemode: Bool, metadata: [String: String], object: Object, url: String? = nil) {
        self.created = created
        self.isExpired = isExpired
        self.expiresAt = expiresAt
        self.file = file
        self.id = id
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.url = url
    }

    private enum CodingKeys: String, CodingKey {
        case created
        case isExpired = "expired"
        case expiresAt = "expires_at"
        case file
        case id
        case isLivemode = "livemode"
        case metadata
        case object
        case url
    }
}

public struct FinancialReportingFinanceReportRunRunParameters: Codable {
    /// The set of output columns requested for inclusion in the report run.
    public var columns: [String]?
    /// Connected account ID by which to filter the report run.
    public var connectedAccount: String?
    /// Currency of objects to be included in the report run.
    public var currency: String?
    /// Ending timestamp of data to be included in the report run (exclusive).
    public var intervalEnd: Int?
    /// Starting timestamp of data to be included in the report run.
    public var intervalStart: Int?
    /// Payout ID by which to filter the report run.
    public var payout: String?
    /// Category of balance transactions to be included in the report run.
    public var reportingCategory: String?
    /// Defaults to `Etc/UTC`. The output timezone for all timestamps in the report. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). Has no effect on `interval_start` or `interval_end`.
    public var timezone: String?

    public init(columns: [String]? = nil, connectedAccount: String? = nil, currency: String? = nil, intervalEnd: Int? = nil, intervalStart: Int? = nil, payout: String? = nil, reportingCategory: String? = nil, timezone: String? = nil) {
        self.columns = columns
        self.connectedAccount = connectedAccount
        self.currency = currency
        self.intervalEnd = intervalEnd
        self.intervalStart = intervalStart
        self.payout = payout
        self.reportingCategory = reportingCategory
        self.timezone = timezone
    }

    private enum CodingKeys: String, CodingKey {
        case columns
        case connectedAccount = "connected_account"
        case currency
        case intervalEnd = "interval_end"
        case intervalStart = "interval_start"
        case payout
        case reportingCategory = "reporting_category"
        case timezone
    }
}

/// Point in Time
public struct GelatoDataDocumentReportDateOfBirth: Codable {
    /// Numerical day between 1 and 31.
    public var day: Int?
    /// Numerical month between 1 and 12.
    public var month: Int?
    /// The four-digit year.
    public var year: Int?

    public init(day: Int? = nil, month: Int? = nil, year: Int? = nil) {
        self.day = day
        self.month = month
        self.year = year
    }
}

/// Point in Time
public struct GelatoDataDocumentReportExpirationDate: Codable {
    /// Numerical day between 1 and 31.
    public var day: Int?
    /// Numerical month between 1 and 12.
    public var month: Int?
    /// The four-digit year.
    public var year: Int?

    public init(day: Int? = nil, month: Int? = nil, year: Int? = nil) {
        self.day = day
        self.month = month
        self.year = year
    }
}

/// Point in Time
public struct GelatoDataDocumentReportIssuedDate: Codable {
    /// Numerical day between 1 and 31.
    public var day: Int?
    /// Numerical month between 1 and 12.
    public var month: Int?
    /// The four-digit year.
    public var year: Int?

    public init(day: Int? = nil, month: Int? = nil, year: Int? = nil) {
        self.day = day
        self.month = month
        self.year = year
    }
}

/// Point in Time
public struct GelatoDataIDNumberReportDate: Codable {
    /// Numerical day between 1 and 31.
    public var day: Int?
    /// Numerical month between 1 and 12.
    public var month: Int?
    /// The four-digit year.
    public var year: Int?

    public init(day: Int? = nil, month: Int? = nil, year: Int? = nil) {
        self.day = day
        self.month = month
        self.year = year
    }
}

/// Point in Time
public struct GelatoDataVerifiedOutputsDate: Codable {
    /// Numerical day between 1 and 31.
    public var day: Int?
    /// Numerical month between 1 and 12.
    public var month: Int?
    /// The four-digit year.
    public var year: Int?

    public init(day: Int? = nil, month: Int? = nil, year: Int? = nil) {
        self.day = day
        self.month = month
        self.year = year
    }
}

/// Result from a document check
public struct GelatoDocumentReport: Codable {
    /// Address as it appears in the document.
    public var address: Address?
    /// Date of birth as it appears in the document.
    public var dob: Dob?
    /// Details on the verification error. Present when status is `unverified`.
    public var error: Error?
    /// Expiration date of the document.
    public var expirationDate: ExpirationDate?
    /// Array of [File](https://stripe.com/docs/api/files) ids containing images for this document.
    public var files: [String]?
    /// First name as it appears in the document.
    public var firstName: String?
    /// Issued date of the document.
    public var issuedDate: IssuedDate?
    /// Issuing country of the document.
    public var issuingCountry: String?
    /// Last name as it appears in the document.
    public var lastName: String?
    /// Document ID number.
    public var number: String?
    /// Status of this `document` check.
    public var status: Status
    /// Type of the document.
    public var type: `Type`?

    /// Address as it appears in the document.
    public final class Address: Codable {
        public var address: StripeAPI.Address?

        public init(address: StripeAPI.Address? = nil) {
            self.address = address
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.address = try? container.decode(StripeAPI.Address.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = address { try container.encode(value) }
        }
    }

    /// Date of birth as it appears in the document.
    public struct Dob: Codable {
        /// Point in Time
        public var gelatoDataDocumentReportDateOfBirth: GelatoDataDocumentReportDateOfBirth?

        public init(gelatoDataDocumentReportDateOfBirth: GelatoDataDocumentReportDateOfBirth? = nil) {
            self.gelatoDataDocumentReportDateOfBirth = gelatoDataDocumentReportDateOfBirth
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.gelatoDataDocumentReportDateOfBirth = try? container.decode(GelatoDataDocumentReportDateOfBirth.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = gelatoDataDocumentReportDateOfBirth { try container.encode(value) }
        }
    }

    /// Details on the verification error. Present when status is `unverified`.
    public struct Error: Codable {
        public var gelatoDocumentReportError: GelatoDocumentReportError?

        public init(gelatoDocumentReportError: GelatoDocumentReportError? = nil) {
            self.gelatoDocumentReportError = gelatoDocumentReportError
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.gelatoDocumentReportError = try? container.decode(GelatoDocumentReportError.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = gelatoDocumentReportError { try container.encode(value) }
        }
    }

    /// Expiration date of the document.
    public struct ExpirationDate: Codable {
        /// Point in Time
        public var gelatoDataDocumentReportExpirationDate: GelatoDataDocumentReportExpirationDate?

        public init(gelatoDataDocumentReportExpirationDate: GelatoDataDocumentReportExpirationDate? = nil) {
            self.gelatoDataDocumentReportExpirationDate = gelatoDataDocumentReportExpirationDate
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.gelatoDataDocumentReportExpirationDate = try? container.decode(GelatoDataDocumentReportExpirationDate.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = gelatoDataDocumentReportExpirationDate { try container.encode(value) }
        }
    }

    /// Issued date of the document.
    public struct IssuedDate: Codable {
        /// Point in Time
        public var gelatoDataDocumentReportIssuedDate: GelatoDataDocumentReportIssuedDate?

        public init(gelatoDataDocumentReportIssuedDate: GelatoDataDocumentReportIssuedDate? = nil) {
            self.gelatoDataDocumentReportIssuedDate = gelatoDataDocumentReportIssuedDate
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.gelatoDataDocumentReportIssuedDate = try? container.decode(GelatoDataDocumentReportIssuedDate.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = gelatoDataDocumentReportIssuedDate { try container.encode(value) }
        }
    }

    /// Status of this `document` check.
    public enum Status: String, Codable, CaseIterable {
        case unverified
        case verified
    }

    /// Type of the document.
    public enum `Type`: String, Codable, CaseIterable {
        case drivingLicense = "driving_license"
        case idCard = "id_card"
        case passport
    }

    public init(address: Address? = nil, dob: Dob? = nil, error: Error? = nil, expirationDate: ExpirationDate? = nil, files: [String]? = nil, firstName: String? = nil, issuedDate: IssuedDate? = nil, issuingCountry: String? = nil, lastName: String? = nil, number: String? = nil, status: Status, type: `Type`? = nil) {
        self.address = address
        self.dob = dob
        self.error = error
        self.expirationDate = expirationDate
        self.files = files
        self.firstName = firstName
        self.issuedDate = issuedDate
        self.issuingCountry = issuingCountry
        self.lastName = lastName
        self.number = number
        self.status = status
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case address
        case dob
        case error
        case expirationDate = "expiration_date"
        case files
        case firstName = "first_name"
        case issuedDate = "issued_date"
        case issuingCountry = "issuing_country"
        case lastName = "last_name"
        case number
        case status
        case type
    }
}

public struct GelatoDocumentReportError: Codable {
    /// A short machine-readable string giving the reason for the verification failure.
    public var code: Code?
    /// A human-readable message giving the reason for the failure. These messages can be shown to your users.
    public var reason: String?

    /// A short machine-readable string giving the reason for the verification failure.
    public enum Code: String, Codable, CaseIterable {
        case documentExpired = "document_expired"
        case documentTypeNotSupported = "document_type_not_supported"
        case documentUnverifiedOther = "document_unverified_other"
    }

    public init(code: Code? = nil, reason: String? = nil) {
        self.code = code
        self.reason = reason
    }
}

/// Result from an id_number check
public struct GelatoIDNumberReport: Codable {
    /// Date of birth.
    public var dob: Dob?
    /// Details on the verification error. Present when status is `unverified`.
    public var error: Error?
    /// First name.
    public var firstName: String?
    /// ID number.
    public var idNumber: String?
    /// Type of ID number.
    public var idNumberType: IDNumberType?
    /// Last name.
    public var lastName: String?
    /// Status of this `id_number` check.
    public var status: Status

    /// Date of birth.
    public struct Dob: Codable {
        /// Point in Time
        public var gelatoDataIDNumberReportDate: GelatoDataIDNumberReportDate?

        public init(gelatoDataIDNumberReportDate: GelatoDataIDNumberReportDate? = nil) {
            self.gelatoDataIDNumberReportDate = gelatoDataIDNumberReportDate
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.gelatoDataIDNumberReportDate = try? container.decode(GelatoDataIDNumberReportDate.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = gelatoDataIDNumberReportDate { try container.encode(value) }
        }
    }

    /// Details on the verification error. Present when status is `unverified`.
    public struct Error: Codable {
        public var gelatoIDNumberReportError: GelatoIDNumberReportError?

        public init(gelatoIDNumberReportError: GelatoIDNumberReportError? = nil) {
            self.gelatoIDNumberReportError = gelatoIDNumberReportError
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.gelatoIDNumberReportError = try? container.decode(GelatoIDNumberReportError.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = gelatoIDNumberReportError { try container.encode(value) }
        }
    }

    /// Type of ID number.
    public enum IDNumberType: String, Codable, CaseIterable {
        case brCpf = "br_cpf"
        case sgNric = "sg_nric"
        case usSsn = "us_ssn"
    }

    /// Status of this `id_number` check.
    public enum Status: String, Codable, CaseIterable {
        case unverified
        case verified
    }

    public init(dob: Dob? = nil, error: Error? = nil, firstName: String? = nil, idNumber: String? = nil, idNumberType: IDNumberType? = nil, lastName: String? = nil, status: Status) {
        self.dob = dob
        self.error = error
        self.firstName = firstName
        self.idNumber = idNumber
        self.idNumberType = idNumberType
        self.lastName = lastName
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case dob
        case error
        case firstName = "first_name"
        case idNumber = "id_number"
        case idNumberType = "id_number_type"
        case lastName = "last_name"
        case status
    }
}

public struct GelatoIDNumberReportError: Codable {
    /// A short machine-readable string giving the reason for the verification failure.
    public var code: Code?
    /// A human-readable message giving the reason for the failure. These messages can be shown to your users.
    public var reason: String?

    /// A short machine-readable string giving the reason for the verification failure.
    public enum Code: String, Codable, CaseIterable {
        case idNumberInsufficientDocumentData = "id_number_insufficient_document_data"
        case idNumberMismatch = "id_number_mismatch"
        case idNumberUnverifiedOther = "id_number_unverified_other"
    }

    public init(code: Code? = nil, reason: String? = nil) {
        self.code = code
        self.reason = reason
    }
}

public struct GelatoReportDocumentOptions: Codable {
    /// Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code.
    public var allowedTypes: [AllowedType]?
    /// Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth.
    public var requireIDNumber: Bool?
    /// Disable image uploads, identity document images have to be captured using the device’s camera.
    public var requireLiveCapture: Bool?
    /// Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie).
    public var requireMatchingSelfie: Bool?

    public enum AllowedType: String, Codable, CaseIterable {
        case drivingLicense = "driving_license"
        case idCard = "id_card"
        case passport
    }

    public init(allowedTypes: [AllowedType]? = nil, requireIDNumber: Bool? = nil, requireLiveCapture: Bool? = nil, requireMatchingSelfie: Bool? = nil) {
        self.allowedTypes = allowedTypes
        self.requireIDNumber = requireIDNumber
        self.requireLiveCapture = requireLiveCapture
        self.requireMatchingSelfie = requireMatchingSelfie
    }

    private enum CodingKeys: String, CodingKey {
        case allowedTypes = "allowed_types"
        case requireIDNumber = "require_id_number"
        case requireLiveCapture = "require_live_capture"
        case requireMatchingSelfie = "require_matching_selfie"
    }
}

/// Result from a selfie check
public struct GelatoSelfieReport: Codable {
    /// ID of the [File](https://stripe.com/docs/api/files) holding the image of the identity document used in this check.
    public var document: String?
    /// Details on the verification error. Present when status is `unverified`.
    public var error: Error?
    /// ID of the [File](https://stripe.com/docs/api/files) holding the image of the selfie used in this check.
    public var selfie: String?
    /// Status of this `selfie` check.
    public var status: Status

    /// Details on the verification error. Present when status is `unverified`.
    public struct Error: Codable {
        public var gelatoSelfieReportError: GelatoSelfieReportError?

        public init(gelatoSelfieReportError: GelatoSelfieReportError? = nil) {
            self.gelatoSelfieReportError = gelatoSelfieReportError
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.gelatoSelfieReportError = try? container.decode(GelatoSelfieReportError.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = gelatoSelfieReportError { try container.encode(value) }
        }
    }

    /// Status of this `selfie` check.
    public enum Status: String, Codable, CaseIterable {
        case unverified
        case verified
    }

    public init(document: String? = nil, error: Error? = nil, selfie: String? = nil, status: Status) {
        self.document = document
        self.error = error
        self.selfie = selfie
        self.status = status
    }
}

public struct GelatoSelfieReportError: Codable {
    /// A short machine-readable string giving the reason for the verification failure.
    public var code: Code?
    /// A human-readable message giving the reason for the failure. These messages can be shown to your users.
    public var reason: String?

    /// A short machine-readable string giving the reason for the verification failure.
    public enum Code: String, Codable, CaseIterable {
        case selfieDocumentMissingPhoto = "selfie_document_missing_photo"
        case selfieFaceMismatch = "selfie_face_mismatch"
        case selfieManipulated = "selfie_manipulated"
        case selfieUnverifiedOther = "selfie_unverified_other"
    }

    public init(code: Code? = nil, reason: String? = nil) {
        self.code = code
        self.reason = reason
    }
}

public struct GelatoSessionDocumentOptions: Codable {
    /// Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code.
    public var allowedTypes: [AllowedType]?
    /// Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth.
    public var requireIDNumber: Bool?
    /// Disable image uploads, identity document images have to be captured using the device’s camera.
    public var requireLiveCapture: Bool?
    /// Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie).
    public var requireMatchingSelfie: Bool?

    public enum AllowedType: String, Codable, CaseIterable {
        case drivingLicense = "driving_license"
        case idCard = "id_card"
        case passport
    }

    public init(allowedTypes: [AllowedType]? = nil, requireIDNumber: Bool? = nil, requireLiveCapture: Bool? = nil, requireMatchingSelfie: Bool? = nil) {
        self.allowedTypes = allowedTypes
        self.requireIDNumber = requireIDNumber
        self.requireLiveCapture = requireLiveCapture
        self.requireMatchingSelfie = requireMatchingSelfie
    }

    private enum CodingKeys: String, CodingKey {
        case allowedTypes = "allowed_types"
        case requireIDNumber = "require_id_number"
        case requireLiveCapture = "require_live_capture"
        case requireMatchingSelfie = "require_matching_selfie"
    }
}

/// Shows last VerificationSession error
public struct GelatoSessionLastError: Codable {
    /// A short machine-readable string giving the reason for the verification or user-session failure.
    public var code: Code?
    /// A message that explains the reason for verification or user-session failure.
    public var reason: String?

    /// A short machine-readable string giving the reason for the verification or user-session failure.
    public enum Code: String, Codable, CaseIterable {
        case abandoned
        case consentDeclined = "consent_declined"
        case countryNotSupported = "country_not_supported"
        case deviceNotSupported = "device_not_supported"
        case documentExpired = "document_expired"
        case documentTypeNotSupported = "document_type_not_supported"
        case documentUnverifiedOther = "document_unverified_other"
        case idNumberInsufficientDocumentData = "id_number_insufficient_document_data"
        case idNumberMismatch = "id_number_mismatch"
        case idNumberUnverifiedOther = "id_number_unverified_other"
        case selfieDocumentMissingPhoto = "selfie_document_missing_photo"
        case selfieFaceMismatch = "selfie_face_mismatch"
        case selfieManipulated = "selfie_manipulated"
        case selfieUnverifiedOther = "selfie_unverified_other"
        case underSupportedAge = "under_supported_age"
    }

    public init(code: Code? = nil, reason: String? = nil) {
        self.code = code
        self.reason = reason
    }
}

public struct GelatoVerificationReportOptions: Codable {
    /// GelatoReportDocumentOptions
    public var document: GelatoReportDocumentOptions?
    /// GelatoReportIdNumberOptions
    public var idNumber: [String: AnyJSON]?

    public init(document: GelatoReportDocumentOptions? = nil, idNumber: [String: AnyJSON]? = nil) {
        self.document = document
        self.idNumber = idNumber
    }

    private enum CodingKeys: String, CodingKey {
        case document
        case idNumber = "id_number"
    }
}

public struct GelatoVerificationSessionOptions: Codable {
    /// GelatoSessionDocumentOptions
    public var document: GelatoSessionDocumentOptions?
    /// GelatoSessionIdNumberOptions
    public var idNumber: [String: AnyJSON]?

    public init(document: GelatoSessionDocumentOptions? = nil, idNumber: [String: AnyJSON]? = nil) {
        self.document = document
        self.idNumber = idNumber
    }

    private enum CodingKeys: String, CodingKey {
        case document
        case idNumber = "id_number"
    }
}

public struct GelatoVerifiedOutputs: Codable {
    /// The user's verified address.
    public var address: Address?
    /// The user’s verified date of birth.
    public var dob: Dob?
    /// The user's verified first name.
    public var firstName: String?
    /// The user's verified id number.
    public var idNumber: String?
    /// The user's verified id number type.
    public var idNumberType: IDNumberType?
    /// The user's verified last name.
    public var lastName: String?

    /// The user's verified address.
    public final class Address: Codable {
        public var address: StripeAPI.Address?

        public init(address: StripeAPI.Address? = nil) {
            self.address = address
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.address = try? container.decode(StripeAPI.Address.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = address { try container.encode(value) }
        }
    }

    /// The user’s verified date of birth.
    public struct Dob: Codable {
        /// Point in Time
        public var gelatoDataVerifiedOutputsDate: GelatoDataVerifiedOutputsDate?

        public init(gelatoDataVerifiedOutputsDate: GelatoDataVerifiedOutputsDate? = nil) {
            self.gelatoDataVerifiedOutputsDate = gelatoDataVerifiedOutputsDate
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.gelatoDataVerifiedOutputsDate = try? container.decode(GelatoDataVerifiedOutputsDate.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = gelatoDataVerifiedOutputsDate { try container.encode(value) }
        }
    }

    /// The user's verified id number type.
    public enum IDNumberType: String, Codable, CaseIterable {
        case brCpf = "br_cpf"
        case sgNric = "sg_nric"
        case usSsn = "us_ssn"
    }

    public init(address: Address? = nil, dob: Dob? = nil, firstName: String? = nil, idNumber: String? = nil, idNumberType: IDNumberType? = nil, lastName: String? = nil) {
        self.address = address
        self.dob = dob
        self.firstName = firstName
        self.idNumber = idNumber
        self.idNumberType = idNumberType
        self.lastName = lastName
    }

    private enum CodingKeys: String, CodingKey {
        case address
        case dob
        case firstName = "first_name"
        case idNumber = "id_number"
        case idNumberType = "id_number_type"
        case lastName = "last_name"
    }
}

/// GelatoVerificationReport
///
/// A VerificationReport is the result of an attempt to collect and verify data from a user.
/// The collection of verification checks performed is determined from the `type` and `options`
/// parameters used. You can find the result of each verification check performed in the
/// appropriate sub-resource: `document`, `id_number`, `selfie`.
/// 
/// Each VerificationReport contains a copy of any data collected by the user as well as
/// reference IDs which can be used to access collected images through the [FileUpload](https://stripe.com/docs/api/files)
/// API. To configure and create VerificationReports, use the
/// [VerificationSession](https://stripe.com/docs/api/identity/verification_sessions) API.
/// 
/// Related guides: [Accessing verification results](https://stripe.com/docs/identity/verification-sessions#results).
public struct IdentityVerificationReport: Codable {
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// GelatoDocumentReport
    ///
    /// Result from a document check
    public var document: GelatoDocumentReport?
    /// Unique identifier for the object.
    public var id: String
    /// GelatoIdNumberReport
    ///
    /// Result from an id_number check
    public var idNumber: GelatoIDNumberReport?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// GelatoVerificationReportOptions
    public var options: GelatoVerificationReportOptions
    /// GelatoSelfieReport
    ///
    /// Result from a selfie check
    public var selfie: GelatoSelfieReport?
    /// Type of report.
    public var type: `Type`
    /// ID of the VerificationSession that created this report.
    public var verificationSession: String?

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case identityVerificationReport = "identity.verification_report"
    }

    /// Type of report.
    public enum `Type`: String, Codable, CaseIterable {
        case document
        case idNumber = "id_number"
    }

    public init(created: Int, document: GelatoDocumentReport? = nil, id: String, idNumber: GelatoIDNumberReport? = nil, isLivemode: Bool, object: Object, options: GelatoVerificationReportOptions, selfie: GelatoSelfieReport? = nil, type: `Type`, verificationSession: String? = nil) {
        self.created = created
        self.document = document
        self.id = id
        self.idNumber = idNumber
        self.isLivemode = isLivemode
        self.object = object
        self.options = options
        self.selfie = selfie
        self.type = type
        self.verificationSession = verificationSession
    }

    private enum CodingKeys: String, CodingKey {
        case created
        case document
        case id
        case idNumber = "id_number"
        case isLivemode = "livemode"
        case object
        case options
        case selfie
        case type
        case verificationSession = "verification_session"
    }
}

/// GelatoVerificationSession
///
/// A VerificationSession guides you through the process of collecting and verifying the identities
/// of your users. It contains details about the type of verification, such as what [verification
/// check](/docs/identity/verification-checks) to perform. Only create one VerificationSession for
/// each verification in your system.
/// 
/// A VerificationSession transitions through [multiple
/// statuses](/docs/identity/how-sessions-work) throughout its lifetime as it progresses through
/// the verification flow. The VerificationSession contains the user’s verified data after
/// verification checks are complete.
/// 
/// Related guide: [The Verification Sessions API](https://stripe.com/docs/identity/verification-sessions)
public struct IdentityVerificationSession: Codable {
    /// The short-lived client secret used by Stripe.js to [show a verification modal](https://stripe.com/docs/js/identity/modal) inside your app. This client secret expires after 24 hours and can only be used once. Don’t store it, log it, embed it in a URL, or expose it to anyone other than the user. Make sure that you have TLS enabled on any page that includes the client secret. Refer to our docs on [passing the client secret to the frontend](https://stripe.com/docs/identity/verification-sessions#client-secret) to learn more.
    public var clientSecret: String?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Unique identifier for the object.
    public var id: String
    /// If present, this property tells you the last error encountered when processing the verification.
    public var lastError: LastError?
    /// ID of the most recent VerificationReport. [Learn more about accessing detailed verification results.](https://stripe.com/docs/identity/verification-sessions#results)
    public var lastVerificationReport: LastVerificationReport?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// GelatoVerificationSessionOptions
    public var options: GelatoVerificationSessionOptions
    /// Redaction status of this VerificationSession. If the VerificationSession is not redacted, this field will be null.
    public var redaction: Redaction?
    /// Status of this VerificationSession. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work).
    public var status: Status
    /// The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
    public var type: `Type`
    /// The short-lived URL that you use to redirect a user to Stripe to submit their identity information. This URL expires after 48 hours and can only be used once. Don’t store it, log it, send it in emails or expose it to anyone other than the user. Refer to our docs on [verifying identity documents](https://stripe.com/docs/identity/verify-identity-documents?platform=web&type=redirect) to learn how to redirect users to Stripe.
    public var url: String?
    /// The user’s verified data.
    public var verifiedOutputs: VerifiedOutputs?

    /// If present, this property tells you the last error encountered when processing the verification.
    public struct LastError: Codable {
        /// Shows last VerificationSession error
        public var gelatoSessionLastError: GelatoSessionLastError?

        public init(gelatoSessionLastError: GelatoSessionLastError? = nil) {
            self.gelatoSessionLastError = gelatoSessionLastError
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.gelatoSessionLastError = try? container.decode(GelatoSessionLastError.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = gelatoSessionLastError { try container.encode(value) }
        }
    }

    /// ID of the most recent VerificationReport. [Learn more about accessing detailed verification results.](https://stripe.com/docs/identity/verification-sessions#results)
    public struct LastVerificationReport: Codable {
        public var string: String?
        /// GelatoVerificationReport
        ///
        /// A VerificationReport is the result of an attempt to collect and verify data from a user.
        /// The collection of verification checks performed is determined from the `type` and `options`
        /// parameters used. You can find the result of each verification check performed in the
        /// appropriate sub-resource: `document`, `id_number`, `selfie`.
        /// 
        /// Each VerificationReport contains a copy of any data collected by the user as well as
        /// reference IDs which can be used to access collected images through the [FileUpload](https://stripe.com/docs/api/files)
        /// API. To configure and create VerificationReports, use the
        /// [VerificationSession](https://stripe.com/docs/api/identity/verification_sessions) API.
        /// 
        /// Related guides: [Accessing verification results](https://stripe.com/docs/identity/verification-sessions#results).
        public var identityVerificationReport: IdentityVerificationReport?

        public init(string: String? = nil, identityVerificationReport: IdentityVerificationReport? = nil) {
            self.string = string
            self.identityVerificationReport = identityVerificationReport
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.identityVerificationReport = try? container.decode(IdentityVerificationReport.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = identityVerificationReport { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case identityVerificationSession = "identity.verification_session"
    }

    /// Redaction status of this VerificationSession. If the VerificationSession is not redacted, this field will be null.
    public struct Redaction: Codable {
        /// Verification_session_redaction
        public var verificationSessionRedaction: VerificationSessionRedaction?

        public init(verificationSessionRedaction: VerificationSessionRedaction? = nil) {
            self.verificationSessionRedaction = verificationSessionRedaction
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.verificationSessionRedaction = try? container.decode(VerificationSessionRedaction.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = verificationSessionRedaction { try container.encode(value) }
        }
    }

    /// Status of this VerificationSession. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work).
    public enum Status: String, Codable, CaseIterable {
        case canceled
        case processing
        case requiresInput = "requires_input"
        case verified
    }

    /// The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
    public enum `Type`: String, Codable, CaseIterable {
        case document
        case idNumber = "id_number"
    }

    /// The user’s verified data.
    public struct VerifiedOutputs: Codable {
        public var gelatoVerifiedOutputs: GelatoVerifiedOutputs?

        public init(gelatoVerifiedOutputs: GelatoVerifiedOutputs? = nil) {
            self.gelatoVerifiedOutputs = gelatoVerifiedOutputs
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.gelatoVerifiedOutputs = try? container.decode(GelatoVerifiedOutputs.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = gelatoVerifiedOutputs { try container.encode(value) }
        }
    }

    public init(clientSecret: String? = nil, created: Int, id: String, lastError: LastError? = nil, lastVerificationReport: LastVerificationReport? = nil, isLivemode: Bool, metadata: [String: String], object: Object, options: GelatoVerificationSessionOptions, redaction: Redaction? = nil, status: Status, type: `Type`, url: String? = nil, verifiedOutputs: VerifiedOutputs? = nil) {
        self.clientSecret = clientSecret
        self.created = created
        self.id = id
        self.lastError = lastError
        self.lastVerificationReport = lastVerificationReport
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.options = options
        self.redaction = redaction
        self.status = status
        self.type = type
        self.url = url
        self.verifiedOutputs = verifiedOutputs
    }

    private enum CodingKeys: String, CodingKey {
        case clientSecret = "client_secret"
        case created
        case id
        case lastError = "last_error"
        case lastVerificationReport = "last_verification_report"
        case isLivemode = "livemode"
        case metadata
        case object
        case options
        case redaction
        case status
        case type
        case url
        case verifiedOutputs = "verified_outputs"
    }
}

/// Invoices are statements of amounts owed by a customer, and are either
/// generated one-off, or generated periodically from a subscription.
/// 
/// They contain [invoice items](https://stripe.com/docs/api#invoiceitems), and proration adjustments
/// that may be caused by subscription upgrades/downgrades (if necessary).
/// 
/// If your invoice is configured to be billed through automatic charges,
/// Stripe automatically finalizes your invoice and attempts payment. Note
/// that finalizing the invoice,
/// [when automatic](https://stripe.com/docs/billing/invoices/workflow/#auto_advance), does
/// not happen immediately as the invoice is created. Stripe waits
/// until one hour after the last webhook was successfully sent (or the last
/// webhook timed out after failing). If you (and the platforms you may have
/// connected to) have no webhooks configured, Stripe waits one hour after
/// creation to finalize the invoice.
/// 
/// If your invoice is configured to be billed by sending an email, then based on your
/// [email settings](https://dashboard.stripe.com/account/billing/automatic),
/// Stripe will email the invoice to your customer and await payment. These
/// emails can contain a link to a hosted page to pay the invoice.
/// 
/// Stripe applies any customer credit on the account before determining the
/// amount due for the invoice (i.e., the amount that will be actually
/// charged). If the amount due for the invoice is less than Stripe's [minimum allowed charge
/// per currency](/docs/currencies#minimum-and-maximum-charge-amounts), the
/// invoice is automatically marked paid, and we add the amount due to the
/// customer's credit balance which is applied to the next invoice.
/// 
/// More details on the customer's credit balance are
/// [here](https://stripe.com/docs/billing/customer/balance).
/// 
/// Related guide: [Send Invoices to Customers](https://stripe.com/docs/billing/invoices/sending).
public struct Invoice: Codable {
    /// The country of the business associated with this invoice, most often the business creating the invoice.
    public var accountCountry: String?
    /// The public name of the business associated with this invoice, most often the business creating the invoice.
    public var accountName: String?
    /// The account tax IDs associated with the invoice. Only editable when the invoice is a draft.
    public var accountTaxIDs: [AccountTaxID]?
    /// Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`.
    public var amountDue: Int
    /// The amount, in %s, that was paid.
    public var amountPaid: Int
    /// The amount remaining, in %s, that is due.
    public var amountRemaining: Int
    /// The fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid.
    public var applicationFeeAmount: Int?
    /// Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule.
    public var attemptCount: Int
    /// Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users.
    public var isAttempted: Bool
    /// Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action.
    public var isAutoAdvance: Bool?
    public var automaticTax: AutomaticTax
    /// Indicates the reason why the invoice was created. `subscription_cycle` indicates an invoice created by a subscription advancing into a new period. `subscription_create` indicates an invoice created due to creating a subscription. `subscription_update` indicates an invoice created due to updating a subscription. `subscription` is set for all old invoices to indicate either a change to a subscription or a period advancement. `manual` is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The `upcoming` value is reserved for simulated invoices per the upcoming invoice endpoint. `subscription_threshold` indicates an invoice created due to a billing threshold being reached.
    public var billingReason: BillingReason?
    /// ID of the latest charge generated for this invoice, if any.
    public var charge: Charge?
    /// Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.
    public var collectionMethod: CollectionMethod
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// Custom fields displayed on the invoice.
    public var customFields: [InvoiceSettingCustomField]?
    /// The ID of the customer who will be billed.
    public var customer: Customer?
    /// The customer's address. Until the invoice is finalized, this field will equal `customer.address`. Once the invoice is finalized, this field will no longer be updated.
    public var customerAddress: CustomerAddress?
    /// The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated.
    public var customerEmail: String?
    /// The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated.
    public var customerName: String?
    /// The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated.
    public var customerPhone: String?
    /// The customer's shipping information. Until the invoice is finalized, this field will equal `customer.shipping`. Once the invoice is finalized, this field will no longer be updated.
    public var customerShipping: CustomerShipping?
    /// The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated.
    public var customerTaxExempt: CustomerTaxExempt?
    /// The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated.
    public var customerTaxIDs: [InvoicesResourceInvoiceTaxID]?
    /// ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings.
    public var defaultPaymentMethod: DefaultPaymentMethod?
    /// ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.
    public var defaultSource: DefaultSource?
    /// The tax rates applied to this invoice, if any.
    public var defaultTaxRates: [TaxRate]
    /// An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard.
    public var description: String?
    /// Describes the current discount applied to this invoice, if there is one. Not populated if there are multiple discounts.
    public var discount: Discount?
    /// The discounts applied to the invoice. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
    public var discounts: [DiscountsItem]?
    /// The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`.
    public var dueDate: Int?
    /// Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null.
    public var endingBalance: Int?
    /// Footer displayed on the invoice.
    public var footer: String?
    /// The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null.
    public var hostedInvoiceURL: String?
    /// Unique identifier for the object.
    public var id: String?
    /// The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null.
    public var invoicePdf: String?
    /// The error encountered during the previous attempt to finalize the invoice. This field is cleared when the invoice is successfully finalized.
    public var lastFinalizationError: LastFinalizationError?
    /// InvoiceLinesList
    ///
    /// The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any.
    public var lines: Lines
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`.
    public var nextPaymentAttempt: Int?
    /// A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified.
    public var number: String?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details.
    public var onBehalfOf: OnBehalfOf?
    /// Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance.
    public var isPaid: Bool
    /// The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent.
    public var paymentIntent: PaymentIntent?
    /// InvoicesPaymentSettings
    public var paymentSettings: InvoicesPaymentSettings
    /// End of the usage period during which invoice items were added to this invoice.
    public var periodEnd: Int
    /// Start of the usage period during which invoice items were added to this invoice.
    public var periodStart: Int
    /// Total amount of all post-payment credit notes issued for this invoice.
    public var postPaymentCreditNotesAmount: Int
    /// Total amount of all pre-payment credit notes issued for this invoice.
    public var prePaymentCreditNotesAmount: Int
    /// The quote this invoice was generated from.
    public var quote: Quote?
    /// This is the transaction number that appears on email receipts sent for this invoice.
    public var receiptNumber: String?
    /// Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance.
    public var startingBalance: Int
    /// Extra information about an invoice for the customer's credit card statement.
    public var statementDescriptor: String?
    /// The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
    public var status: Status?
    /// InvoicesStatusTransitions
    public var statusTransitions: InvoicesStatusTransitions
    /// The subscription that this invoice was prepared for, if any.
    public var subscription: Subscription?
    /// Only set for upcoming invoices that preview prorations. The time used to calculate prorations.
    public var subscriptionProrationDate: Int?
    /// Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or tax is applied. Item discounts are already incorporated
    public var subtotal: Int
    /// The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice.
    public var tax: Int?
    /// InvoiceThresholdReason
    public var thresholdReason: InvoiceThresholdReason?
    /// Total after discounts and taxes.
    public var total: Int
    /// The aggregate amounts calculated per discount across all line items.
    public var totalDiscountAmounts: [DiscountsResourceDiscountAmount]?
    /// The aggregate amounts calculated per tax rate for all line items.
    public var totalTaxAmounts: [InvoiceTaxAmount]
    /// The account (if any) the payment will be attributed to for tax reporting, and where funds from the payment will be transferred to for the invoice.
    public var transferData: TransferData?
    /// Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created.
    public var webhooksDeliveredAt: Int?

    public struct AccountTaxID: Codable {
        public var string: String?
        public var taxID: TaxID?
        /// Deleted_tax_id
        public var deletedTaxID: DeletedTaxID?

        public init(string: String? = nil, taxID: TaxID? = nil, deletedTaxID: DeletedTaxID? = nil) {
            self.string = string
            self.taxID = taxID
            self.deletedTaxID = deletedTaxID
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.taxID = try? container.decode(TaxID.self)
            self.deletedTaxID = try? container.decode(DeletedTaxID.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = taxID { try container.encode(value) }
            if let value = deletedTaxID { try container.encode(value) }
        }
    }

    /// Indicates the reason why the invoice was created. `subscription_cycle` indicates an invoice created by a subscription advancing into a new period. `subscription_create` indicates an invoice created due to creating a subscription. `subscription_update` indicates an invoice created due to updating a subscription. `subscription` is set for all old invoices to indicate either a change to a subscription or a period advancement. `manual` is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The `upcoming` value is reserved for simulated invoices per the upcoming invoice endpoint. `subscription_threshold` indicates an invoice created due to a billing threshold being reached.
    public enum BillingReason: String, Codable, CaseIterable {
        case automaticPendingInvoiceItemInvoice = "automatic_pending_invoice_item_invoice"
        case manual
        case quoteAccept = "quote_accept"
        case subscription
        case subscriptionCreate = "subscription_create"
        case subscriptionCycle = "subscription_cycle"
        case subscriptionThreshold = "subscription_threshold"
        case subscriptionUpdate = "subscription_update"
        case upcoming
    }

    /// ID of the latest charge generated for this invoice, if any.
    public final class Charge: Codable {
        public var string: String?
        public var charge: StripeAPI.Charge?

        public init(string: String? = nil, charge: StripeAPI.Charge? = nil) {
            self.string = string
            self.charge = charge
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.charge = try? container.decode(StripeAPI.Charge.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = charge { try container.encode(value) }
        }
    }

    /// Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.
    public enum CollectionMethod: String, Codable, CaseIterable {
        case chargeAutomatically = "charge_automatically"
        case sendInvoice = "send_invoice"
    }

    /// The ID of the customer who will be billed.
    public final class Customer: Codable {
        public var string: String?
        public var customer: StripeAPI.Customer?
        public var deletedCustomer: DeletedCustomer?

        public init(string: String? = nil, customer: StripeAPI.Customer? = nil, deletedCustomer: DeletedCustomer? = nil) {
            self.string = string
            self.customer = customer
            self.deletedCustomer = deletedCustomer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeAPI.Customer.self)
            self.deletedCustomer = try? container.decode(DeletedCustomer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
            if let value = deletedCustomer { try container.encode(value) }
        }
    }

    /// The customer's address. Until the invoice is finalized, this field will equal `customer.address`. Once the invoice is finalized, this field will no longer be updated.
    public struct CustomerAddress: Codable {
        public var address: Address?

        public init(address: Address? = nil) {
            self.address = address
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.address = try? container.decode(Address.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = address { try container.encode(value) }
        }
    }

    /// The customer's shipping information. Until the invoice is finalized, this field will equal `customer.shipping`. Once the invoice is finalized, this field will no longer be updated.
    public struct CustomerShipping: Codable {
        public var shipping: Shipping?

        public init(shipping: Shipping? = nil) {
            self.shipping = shipping
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.shipping = try? container.decode(Shipping.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = shipping { try container.encode(value) }
        }
    }

    /// The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated.
    public enum CustomerTaxExempt: String, Codable, CaseIterable {
        case exempt
        case `none`
        case reverse
    }

    /// ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings.
    public struct DefaultPaymentMethod: Codable {
        public var string: String?
        public var paymentMethod: PaymentMethod?

        public init(string: String? = nil, paymentMethod: PaymentMethod? = nil) {
            self.string = string
            self.paymentMethod = paymentMethod
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentMethod = try? container.decode(PaymentMethod.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentMethod { try container.encode(value) }
        }
    }

    /// ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.
    public struct DefaultSource: Codable {
        public var string: String?
        public var alipayAccount: AlipayAccount?
        public var bankAccount: BankAccount?
        public var bitcoinReceiver: BitcoinReceiver?
        public var card: Card?
        /// `Source` objects allow you to accept a variety of payment methods. They
        /// represent a customer's payment instrument, and can be used with the Stripe API
        /// just like a `Card` object: once chargeable, they can be charged, or can be
        /// attached to customers.
        /// 
        /// Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
        public var source: Source?

        public init(string: String? = nil, alipayAccount: AlipayAccount? = nil, bankAccount: BankAccount? = nil, bitcoinReceiver: BitcoinReceiver? = nil, card: Card? = nil, source: Source? = nil) {
            self.string = string
            self.alipayAccount = alipayAccount
            self.bankAccount = bankAccount
            self.bitcoinReceiver = bitcoinReceiver
            self.card = card
            self.source = source
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.alipayAccount = try? container.decode(AlipayAccount.self)
            self.bankAccount = try? container.decode(BankAccount.self)
            self.bitcoinReceiver = try? container.decode(BitcoinReceiver.self)
            self.card = try? container.decode(Card.self)
            self.source = try? container.decode(Source.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = alipayAccount { try container.encode(value) }
            if let value = bankAccount { try container.encode(value) }
            if let value = bitcoinReceiver { try container.encode(value) }
            if let value = card { try container.encode(value) }
            if let value = source { try container.encode(value) }
        }
    }

    /// Describes the current discount applied to this invoice, if there is one. Not populated if there are multiple discounts.
    public final class Discount: Codable {
        public var discount: StripeAPI.Discount?

        public init(discount: StripeAPI.Discount? = nil) {
            self.discount = discount
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.discount = try? container.decode(StripeAPI.Discount.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = discount { try container.encode(value) }
        }
    }

    public struct DiscountsItem: Codable {
        public var string: String?
        public var discount: Discount?
        public var deletedDiscount: DeletedDiscount?

        public init(string: String? = nil, discount: Discount? = nil, deletedDiscount: DeletedDiscount? = nil) {
            self.string = string
            self.discount = discount
            self.deletedDiscount = deletedDiscount
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.discount = try? container.decode(Discount.self)
            self.deletedDiscount = try? container.decode(DeletedDiscount.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = discount { try container.encode(value) }
            if let value = deletedDiscount { try container.encode(value) }
        }
    }

    /// The error encountered during the previous attempt to finalize the invoice. This field is cleared when the invoice is successfully finalized.
    public struct LastFinalizationError: Codable {
        public var apiErrors: APIErrors?

        public init(apiErrors: APIErrors? = nil) {
            self.apiErrors = apiErrors
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.apiErrors = try? container.decode(APIErrors.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = apiErrors { try container.encode(value) }
        }
    }

    /// InvoiceLinesList
    ///
    /// The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any.
    public struct Lines: Codable {
        /// Details about each object.
        public var data: [LineItem]
        /// True if this list has another page of items after this one that can be fetched.
        public var hasMore: Bool
        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public var object: Object
        /// The URL where this list can be accessed.
        public var url: String

        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public enum Object: String, Codable, CaseIterable {
            case list
        }

        public init(data: [LineItem], hasMore: Bool, object: Object, url: String) {
            self.data = data
            self.hasMore = hasMore
            self.object = object
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case data
            case hasMore = "has_more"
            case object
            case url
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case invoice
    }

    /// The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details.
    public struct OnBehalfOf: Codable {
        public var string: String?
        public var account: Account?

        public init(string: String? = nil, account: Account? = nil) {
            self.string = string
            self.account = account
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.account = try? container.decode(Account.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = account { try container.encode(value) }
        }
    }

    /// The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent.
    public final class PaymentIntent: Codable {
        public var string: String?
        public var paymentIntent: StripeAPI.PaymentIntent?

        public init(string: String? = nil, paymentIntent: StripeAPI.PaymentIntent? = nil) {
            self.string = string
            self.paymentIntent = paymentIntent
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentIntent = try? container.decode(StripeAPI.PaymentIntent.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentIntent { try container.encode(value) }
        }
    }

    /// The quote this invoice was generated from.
    public final class Quote: Codable {
        public var string: String?
        public var quote: StripeAPI.Quote?

        public init(string: String? = nil, quote: StripeAPI.Quote? = nil) {
            self.string = string
            self.quote = quote
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.quote = try? container.decode(StripeAPI.Quote.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = quote { try container.encode(value) }
        }
    }

    /// The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
    public enum Status: String, Codable, CaseIterable {
        case deleted
        case draft
        case `open`
        case paid
        case uncollectible
        case void
    }

    /// The subscription that this invoice was prepared for, if any.
    public final class Subscription: Codable {
        public var string: String?
        public var subscription: StripeAPI.Subscription?

        public init(string: String? = nil, subscription: StripeAPI.Subscription? = nil) {
            self.string = string
            self.subscription = subscription
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.subscription = try? container.decode(StripeAPI.Subscription.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = subscription { try container.encode(value) }
        }
    }

    /// The account (if any) the payment will be attributed to for tax reporting, and where funds from the payment will be transferred to for the invoice.
    public struct TransferData: Codable {
        public var invoiceTransferData: InvoiceTransferData?

        public init(invoiceTransferData: InvoiceTransferData? = nil) {
            self.invoiceTransferData = invoiceTransferData
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.invoiceTransferData = try? container.decode(InvoiceTransferData.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = invoiceTransferData { try container.encode(value) }
        }
    }

    public init(accountCountry: String? = nil, accountName: String? = nil, accountTaxIDs: [AccountTaxID]? = nil, amountDue: Int, amountPaid: Int, amountRemaining: Int, applicationFeeAmount: Int? = nil, attemptCount: Int, isAttempted: Bool, isAutoAdvance: Bool? = nil, automaticTax: AutomaticTax, billingReason: BillingReason? = nil, charge: Charge? = nil, collectionMethod: CollectionMethod, created: Int, currency: String, customFields: [InvoiceSettingCustomField]? = nil, customer: Customer? = nil, customerAddress: CustomerAddress? = nil, customerEmail: String? = nil, customerName: String? = nil, customerPhone: String? = nil, customerShipping: CustomerShipping? = nil, customerTaxExempt: CustomerTaxExempt? = nil, customerTaxIDs: [InvoicesResourceInvoiceTaxID]? = nil, defaultPaymentMethod: DefaultPaymentMethod? = nil, defaultSource: DefaultSource? = nil, defaultTaxRates: [TaxRate], description: String? = nil, discount: Discount? = nil, discounts: [DiscountsItem]? = nil, dueDate: Int? = nil, endingBalance: Int? = nil, footer: String? = nil, hostedInvoiceURL: String? = nil, id: String? = nil, invoicePdf: String? = nil, lastFinalizationError: LastFinalizationError? = nil, lines: Lines, isLivemode: Bool, metadata: [String: String]? = nil, nextPaymentAttempt: Int? = nil, number: String? = nil, object: Object, onBehalfOf: OnBehalfOf? = nil, isPaid: Bool, paymentIntent: PaymentIntent? = nil, paymentSettings: InvoicesPaymentSettings, periodEnd: Int, periodStart: Int, postPaymentCreditNotesAmount: Int, prePaymentCreditNotesAmount: Int, quote: Quote? = nil, receiptNumber: String? = nil, startingBalance: Int, statementDescriptor: String? = nil, status: Status? = nil, statusTransitions: InvoicesStatusTransitions, subscription: Subscription? = nil, subscriptionProrationDate: Int? = nil, subtotal: Int, tax: Int? = nil, thresholdReason: InvoiceThresholdReason? = nil, total: Int, totalDiscountAmounts: [DiscountsResourceDiscountAmount]? = nil, totalTaxAmounts: [InvoiceTaxAmount], transferData: TransferData? = nil, webhooksDeliveredAt: Int? = nil) {
        self.accountCountry = accountCountry
        self.accountName = accountName
        self.accountTaxIDs = accountTaxIDs
        self.amountDue = amountDue
        self.amountPaid = amountPaid
        self.amountRemaining = amountRemaining
        self.applicationFeeAmount = applicationFeeAmount
        self.attemptCount = attemptCount
        self.isAttempted = isAttempted
        self.isAutoAdvance = isAutoAdvance
        self.automaticTax = automaticTax
        self.billingReason = billingReason
        self.charge = charge
        self.collectionMethod = collectionMethod
        self.created = created
        self.currency = currency
        self.customFields = customFields
        self.customer = customer
        self.customerAddress = customerAddress
        self.customerEmail = customerEmail
        self.customerName = customerName
        self.customerPhone = customerPhone
        self.customerShipping = customerShipping
        self.customerTaxExempt = customerTaxExempt
        self.customerTaxIDs = customerTaxIDs
        self.defaultPaymentMethod = defaultPaymentMethod
        self.defaultSource = defaultSource
        self.defaultTaxRates = defaultTaxRates
        self.description = description
        self.discount = discount
        self.discounts = discounts
        self.dueDate = dueDate
        self.endingBalance = endingBalance
        self.footer = footer
        self.hostedInvoiceURL = hostedInvoiceURL
        self.id = id
        self.invoicePdf = invoicePdf
        self.lastFinalizationError = lastFinalizationError
        self.lines = lines
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.nextPaymentAttempt = nextPaymentAttempt
        self.number = number
        self.object = object
        self.onBehalfOf = onBehalfOf
        self.isPaid = isPaid
        self.paymentIntent = paymentIntent
        self.paymentSettings = paymentSettings
        self.periodEnd = periodEnd
        self.periodStart = periodStart
        self.postPaymentCreditNotesAmount = postPaymentCreditNotesAmount
        self.prePaymentCreditNotesAmount = prePaymentCreditNotesAmount
        self.quote = quote
        self.receiptNumber = receiptNumber
        self.startingBalance = startingBalance
        self.statementDescriptor = statementDescriptor
        self.status = status
        self.statusTransitions = statusTransitions
        self.subscription = subscription
        self.subscriptionProrationDate = subscriptionProrationDate
        self.subtotal = subtotal
        self.tax = tax
        self.thresholdReason = thresholdReason
        self.total = total
        self.totalDiscountAmounts = totalDiscountAmounts
        self.totalTaxAmounts = totalTaxAmounts
        self.transferData = transferData
        self.webhooksDeliveredAt = webhooksDeliveredAt
    }

    private enum CodingKeys: String, CodingKey {
        case accountCountry = "account_country"
        case accountName = "account_name"
        case accountTaxIDs = "account_tax_ids"
        case amountDue = "amount_due"
        case amountPaid = "amount_paid"
        case amountRemaining = "amount_remaining"
        case applicationFeeAmount = "application_fee_amount"
        case attemptCount = "attempt_count"
        case isAttempted = "attempted"
        case isAutoAdvance = "auto_advance"
        case automaticTax = "automatic_tax"
        case billingReason = "billing_reason"
        case charge
        case collectionMethod = "collection_method"
        case created
        case currency
        case customFields = "custom_fields"
        case customer
        case customerAddress = "customer_address"
        case customerEmail = "customer_email"
        case customerName = "customer_name"
        case customerPhone = "customer_phone"
        case customerShipping = "customer_shipping"
        case customerTaxExempt = "customer_tax_exempt"
        case customerTaxIDs = "customer_tax_ids"
        case defaultPaymentMethod = "default_payment_method"
        case defaultSource = "default_source"
        case defaultTaxRates = "default_tax_rates"
        case description
        case discount
        case discounts
        case dueDate = "due_date"
        case endingBalance = "ending_balance"
        case footer
        case hostedInvoiceURL = "hosted_invoice_url"
        case id
        case invoicePdf = "invoice_pdf"
        case lastFinalizationError = "last_finalization_error"
        case lines
        case isLivemode = "livemode"
        case metadata
        case nextPaymentAttempt = "next_payment_attempt"
        case number
        case object
        case onBehalfOf = "on_behalf_of"
        case isPaid = "paid"
        case paymentIntent = "payment_intent"
        case paymentSettings = "payment_settings"
        case periodEnd = "period_end"
        case periodStart = "period_start"
        case postPaymentCreditNotesAmount = "post_payment_credit_notes_amount"
        case prePaymentCreditNotesAmount = "pre_payment_credit_notes_amount"
        case quote
        case receiptNumber = "receipt_number"
        case startingBalance = "starting_balance"
        case statementDescriptor = "statement_descriptor"
        case status
        case statusTransitions = "status_transitions"
        case subscription
        case subscriptionProrationDate = "subscription_proration_date"
        case subtotal
        case tax
        case thresholdReason = "threshold_reason"
        case total
        case totalDiscountAmounts = "total_discount_amounts"
        case totalTaxAmounts = "total_tax_amounts"
        case transferData = "transfer_data"
        case webhooksDeliveredAt = "webhooks_delivered_at"
    }
}

public struct InvoiceItemThresholdReason: Codable {
    /// The IDs of the line items that triggered the threshold invoice.
    public var lineItemIDs: [String]
    /// The quantity threshold boundary that applied to the given line item.
    public var usageGte: Int

    public init(lineItemIDs: [String], usageGte: Int) {
        self.lineItemIDs = lineItemIDs
        self.usageGte = usageGte
    }

    private enum CodingKeys: String, CodingKey {
        case lineItemIDs = "line_item_ids"
        case usageGte = "usage_gte"
    }
}

public struct InvoiceLineItemPeriod: Codable {
    /// End of the line item's billing period
    public var end: Int
    /// Start of the line item's billing period
    public var start: Int

    public init(end: Int, start: Int) {
        self.end = end
        self.start = start
    }
}

/// Invoice_payment_method_options_acss_debit
public struct InvoicePaymentMethodOptionsAcssDebit: Codable {
    /// Invoice_payment_method_options_acss_debit_mandate_options
    public var mandateOptions: InvoicePaymentMethodOptionsAcssDebitMandateOptions?
    /// Bank account verification method.
    public var verificationMethod: VerificationMethod?

    /// Bank account verification method.
    public enum VerificationMethod: String, Codable, CaseIterable {
        case automatic
        case instant
        case microdeposits
    }

    public init(mandateOptions: InvoicePaymentMethodOptionsAcssDebitMandateOptions? = nil, verificationMethod: VerificationMethod? = nil) {
        self.mandateOptions = mandateOptions
        self.verificationMethod = verificationMethod
    }

    private enum CodingKeys: String, CodingKey {
        case mandateOptions = "mandate_options"
        case verificationMethod = "verification_method"
    }
}

/// Invoice_payment_method_options_acss_debit_mandate_options
public struct InvoicePaymentMethodOptionsAcssDebitMandateOptions: Codable {
    /// Transaction type of the mandate.
    public var transactionType: TransactionType?

    /// Transaction type of the mandate.
    public enum TransactionType: String, Codable, CaseIterable {
        case business
        case personal
    }

    public init(transactionType: TransactionType? = nil) {
        self.transactionType = transactionType
    }

    private enum CodingKeys: String, CodingKey {
        case transactionType = "transaction_type"
    }
}

/// Invoice_payment_method_options_bancontact
public struct InvoicePaymentMethodOptionsBancontact: Codable {
    /// Preferred language of the Bancontact authorization page that the customer is redirected to.
    public var preferredLanguage: PreferredLanguage

    /// Preferred language of the Bancontact authorization page that the customer is redirected to.
    public enum PreferredLanguage: String, Codable, CaseIterable {
        case de
        case en
        case fr
        case nl
    }

    public init(preferredLanguage: PreferredLanguage) {
        self.preferredLanguage = preferredLanguage
    }

    private enum CodingKeys: String, CodingKey {
        case preferredLanguage = "preferred_language"
    }
}

/// Invoice_payment_method_options_card
public struct InvoicePaymentMethodOptionsCard: Codable {
    /// We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
    public var requestThreeDSecure: RequestThreeDSecure?

    /// We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
    public enum RequestThreeDSecure: String, Codable, CaseIterable {
        case any
        case automatic
    }

    public init(requestThreeDSecure: RequestThreeDSecure? = nil) {
        self.requestThreeDSecure = requestThreeDSecure
    }

    private enum CodingKeys: String, CodingKey {
        case requestThreeDSecure = "request_three_d_secure"
    }
}

public struct InvoiceSettingCustomField: Codable {
    /// The name of the custom field.
    public var name: String
    /// The value of the custom field.
    public var value: String

    public init(name: String, value: String) {
        self.name = name
        self.value = value
    }
}

public struct InvoiceSettingCustomerSetting: Codable {
    /// Default custom fields to be displayed on invoices for this customer.
    public var customFields: [InvoiceSettingCustomField]?
    /// ID of a payment method that's attached to the customer, to be used as the customer's default payment method for subscriptions and invoices.
    public var defaultPaymentMethod: DefaultPaymentMethod?
    /// Default footer to be displayed on invoices for this customer.
    public var footer: String?

    /// ID of a payment method that's attached to the customer, to be used as the customer's default payment method for subscriptions and invoices.
    public struct DefaultPaymentMethod: Codable {
        public var string: String?
        public var paymentMethod: PaymentMethod?

        public init(string: String? = nil, paymentMethod: PaymentMethod? = nil) {
            self.string = string
            self.paymentMethod = paymentMethod
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentMethod = try? container.decode(PaymentMethod.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentMethod { try container.encode(value) }
        }
    }

    public init(customFields: [InvoiceSettingCustomField]? = nil, defaultPaymentMethod: DefaultPaymentMethod? = nil, footer: String? = nil) {
        self.customFields = customFields
        self.defaultPaymentMethod = defaultPaymentMethod
        self.footer = footer
    }

    private enum CodingKeys: String, CodingKey {
        case customFields = "custom_fields"
        case defaultPaymentMethod = "default_payment_method"
        case footer
    }
}

public struct InvoiceSettingQuoteSetting: Codable {
    /// Number of days within which a customer must pay invoices generated by this quote. This value will be `null` for quotes where `collection_method=charge_automatically`.
    public var daysUntilDue: Int?

    public init(daysUntilDue: Int? = nil) {
        self.daysUntilDue = daysUntilDue
    }

    private enum CodingKeys: String, CodingKey {
        case daysUntilDue = "days_until_due"
    }
}

public struct InvoiceSettingSubscriptionScheduleSetting: Codable {
    /// Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.
    public var daysUntilDue: Int?

    public init(daysUntilDue: Int? = nil) {
        self.daysUntilDue = daysUntilDue
    }

    private enum CodingKeys: String, CodingKey {
        case daysUntilDue = "days_until_due"
    }
}

public struct InvoiceTaxAmount: Codable {
    /// The amount, in %s, of the tax.
    public var amount: Int
    /// Whether this tax amount is inclusive or exclusive.
    public var isInclusive: Bool
    /// The tax rate that was applied to get this tax amount.
    public var taxRate: TaxRate

    /// The tax rate that was applied to get this tax amount.
    public final class TaxRate: Codable {
        public var string: String?
        /// Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.
        /// 
        /// Related guide: [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates).
        public var taxRate: StripeAPI.TaxRate?

        public init(string: String? = nil, taxRate: StripeAPI.TaxRate? = nil) {
            self.string = string
            self.taxRate = taxRate
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.taxRate = try? container.decode(StripeAPI.TaxRate.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = taxRate { try container.encode(value) }
        }
    }

    public init(amount: Int, isInclusive: Bool, taxRate: TaxRate) {
        self.amount = amount
        self.isInclusive = isInclusive
        self.taxRate = taxRate
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case isInclusive = "inclusive"
        case taxRate = "tax_rate"
    }
}

public struct InvoiceThresholdReason: Codable {
    /// The total invoice amount threshold boundary if it triggered the threshold invoice.
    public var amountGte: Int?
    /// Indicates which line items triggered a threshold invoice.
    public var itemReasons: [InvoiceItemThresholdReason]

    public init(amountGte: Int? = nil, itemReasons: [InvoiceItemThresholdReason]) {
        self.amountGte = amountGte
        self.itemReasons = itemReasons
    }

    private enum CodingKeys: String, CodingKey {
        case amountGte = "amount_gte"
        case itemReasons = "item_reasons"
    }
}

public struct InvoiceTransferData: Codable {
    /// The amount in %s that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination.
    public var amount: Int?
    /// The account where funds from the payment will be transferred to upon payment success.
    public var destination: Destination

    /// The account where funds from the payment will be transferred to upon payment success.
    public struct Destination: Codable {
        public var string: String?
        public var account: Account?

        public init(string: String? = nil, account: Account? = nil) {
            self.string = string
            self.account = account
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.account = try? container.decode(Account.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = account { try container.encode(value) }
        }
    }

    public init(amount: Int? = nil, destination: Destination) {
        self.amount = amount
        self.destination = destination
    }
}

/// Sometimes you want to add a charge or credit to a customer, but actually
/// charge or credit the customer's card only at the end of a regular billing
/// cycle. This is useful for combining several charges (to minimize
/// per-transaction fees), or for having Stripe tabulate your usage-based billing
/// totals.
/// 
/// Related guide: [Subscription Invoices](https://stripe.com/docs/billing/invoices/subscription#adding-upcoming-invoice-items).
public struct Invoiceitem: Codable {
    /// Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`.
    public var amount: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// The ID of the customer who will be billed when this invoice item is billed.
    public var customer: Customer
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var date: Int
    /// An arbitrary string attached to the object. Often useful for displaying to users.
    public var description: String?
    /// If true, discounts will apply to this invoice item. Always false for prorations.
    public var isDiscountable: Bool
    /// The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
    public var discounts: [Discount]?
    /// Unique identifier for the object.
    public var id: String
    /// The ID of the invoice this invoice item belongs to.
    public var invoice: Invoice?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// InvoiceLineItemPeriod
    public var period: InvoiceLineItemPeriod
    /// The price of the invoice item.
    public var price: Price?
    /// Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.
    public var isProration: Bool
    /// Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for.
    public var quantity: Int
    /// The subscription that this invoice item has been created for, if any.
    public var subscription: Subscription?
    /// The subscription item that this invoice item has been created for, if any.
    public var subscriptionItem: String?
    /// The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item.
    public var taxRates: [TaxRate]?
    /// Unit amount (in the `currency` specified) of the invoice item.
    public var unitAmount: Int?
    /// Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
    public var unitAmountDecimal: String?

    /// The ID of the customer who will be billed when this invoice item is billed.
    public final class Customer: Codable {
        public var string: String?
        public var customer: StripeAPI.Customer?
        public var deletedCustomer: DeletedCustomer?

        public init(string: String? = nil, customer: StripeAPI.Customer? = nil, deletedCustomer: DeletedCustomer? = nil) {
            self.string = string
            self.customer = customer
            self.deletedCustomer = deletedCustomer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeAPI.Customer.self)
            self.deletedCustomer = try? container.decode(DeletedCustomer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
            if let value = deletedCustomer { try container.encode(value) }
        }
    }

    public final class Discount: Codable {
        public var string: String?
        public var discount: StripeAPI.Discount?

        public init(string: String? = nil, discount: StripeAPI.Discount? = nil) {
            self.string = string
            self.discount = discount
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.discount = try? container.decode(StripeAPI.Discount.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = discount { try container.encode(value) }
        }
    }

    /// The ID of the invoice this invoice item belongs to.
    public final class Invoice: Codable {
        public var string: String?
        public var invoice: StripeAPI.Invoice?

        public init(string: String? = nil, invoice: StripeAPI.Invoice? = nil) {
            self.string = string
            self.invoice = invoice
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.invoice = try? container.decode(StripeAPI.Invoice.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = invoice { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case invoiceitem
    }

    /// The price of the invoice item.
    public final class Price: Codable {
        /// Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
        /// [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
        /// 
        /// For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.
        /// 
        /// Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/billing/prices-guide).
        public var price: StripeAPI.Price?

        public init(price: StripeAPI.Price? = nil) {
            self.price = price
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.price = try? container.decode(StripeAPI.Price.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = price { try container.encode(value) }
        }
    }

    /// The subscription that this invoice item has been created for, if any.
    public final class Subscription: Codable {
        public var string: String?
        public var subscription: StripeAPI.Subscription?

        public init(string: String? = nil, subscription: StripeAPI.Subscription? = nil) {
            self.string = string
            self.subscription = subscription
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.subscription = try? container.decode(StripeAPI.Subscription.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = subscription { try container.encode(value) }
        }
    }

    public init(amount: Int, currency: String, customer: Customer, date: Int, description: String? = nil, isDiscountable: Bool, discounts: [Discount]? = nil, id: String, invoice: Invoice? = nil, isLivemode: Bool, metadata: [String: String]? = nil, object: Object, period: InvoiceLineItemPeriod, price: Price? = nil, isProration: Bool, quantity: Int, subscription: Subscription? = nil, subscriptionItem: String? = nil, taxRates: [TaxRate]? = nil, unitAmount: Int? = nil, unitAmountDecimal: String? = nil) {
        self.amount = amount
        self.currency = currency
        self.customer = customer
        self.date = date
        self.description = description
        self.isDiscountable = isDiscountable
        self.discounts = discounts
        self.id = id
        self.invoice = invoice
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.period = period
        self.price = price
        self.isProration = isProration
        self.quantity = quantity
        self.subscription = subscription
        self.subscriptionItem = subscriptionItem
        self.taxRates = taxRates
        self.unitAmount = unitAmount
        self.unitAmountDecimal = unitAmountDecimal
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case currency
        case customer
        case date
        case description
        case isDiscountable = "discountable"
        case discounts
        case id
        case invoice
        case isLivemode = "livemode"
        case metadata
        case object
        case period
        case price
        case isProration = "proration"
        case quantity
        case subscription
        case subscriptionItem = "subscription_item"
        case taxRates = "tax_rates"
        case unitAmount = "unit_amount"
        case unitAmountDecimal = "unit_amount_decimal"
    }
}

public struct InvoicesPaymentMethodOptions: Codable {
    /// If paying by `acss_debit`, this sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to the invoice’s PaymentIntent.
    public var acssDebit: AcssDebit?
    /// If paying by `bancontact`, this sub-hash contains details about the Bancontact payment method options to pass to the invoice’s PaymentIntent.
    public var bancontact: Bancontact?
    /// If paying by `card`, this sub-hash contains details about the Card payment method options to pass to the invoice’s PaymentIntent.
    public var card: Card?

    /// If paying by `acss_debit`, this sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to the invoice’s PaymentIntent.
    public struct AcssDebit: Codable {
        /// Invoice_payment_method_options_acss_debit
        public var invoicePaymentMethodOptionsAcssDebit: InvoicePaymentMethodOptionsAcssDebit?

        public init(invoicePaymentMethodOptionsAcssDebit: InvoicePaymentMethodOptionsAcssDebit? = nil) {
            self.invoicePaymentMethodOptionsAcssDebit = invoicePaymentMethodOptionsAcssDebit
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.invoicePaymentMethodOptionsAcssDebit = try? container.decode(InvoicePaymentMethodOptionsAcssDebit.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = invoicePaymentMethodOptionsAcssDebit { try container.encode(value) }
        }
    }

    /// If paying by `bancontact`, this sub-hash contains details about the Bancontact payment method options to pass to the invoice’s PaymentIntent.
    public struct Bancontact: Codable {
        /// Invoice_payment_method_options_bancontact
        public var invoicePaymentMethodOptionsBancontact: InvoicePaymentMethodOptionsBancontact?

        public init(invoicePaymentMethodOptionsBancontact: InvoicePaymentMethodOptionsBancontact? = nil) {
            self.invoicePaymentMethodOptionsBancontact = invoicePaymentMethodOptionsBancontact
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.invoicePaymentMethodOptionsBancontact = try? container.decode(InvoicePaymentMethodOptionsBancontact.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = invoicePaymentMethodOptionsBancontact { try container.encode(value) }
        }
    }

    /// If paying by `card`, this sub-hash contains details about the Card payment method options to pass to the invoice’s PaymentIntent.
    public struct Card: Codable {
        /// Invoice_payment_method_options_card
        public var invoicePaymentMethodOptionsCard: InvoicePaymentMethodOptionsCard?

        public init(invoicePaymentMethodOptionsCard: InvoicePaymentMethodOptionsCard? = nil) {
            self.invoicePaymentMethodOptionsCard = invoicePaymentMethodOptionsCard
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.invoicePaymentMethodOptionsCard = try? container.decode(InvoicePaymentMethodOptionsCard.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = invoicePaymentMethodOptionsCard { try container.encode(value) }
        }
    }

    public init(acssDebit: AcssDebit? = nil, bancontact: Bancontact? = nil, card: Card? = nil) {
        self.acssDebit = acssDebit
        self.bancontact = bancontact
        self.card = card
    }

    private enum CodingKeys: String, CodingKey {
        case acssDebit = "acss_debit"
        case bancontact
        case card
    }
}

public struct InvoicesPaymentSettings: Codable {
    /// Payment-method-specific configuration to provide to the invoice’s PaymentIntent.
    public var paymentMethodOptions: PaymentMethodOptions?
    /// The list of payment method types (e.g. card) to provide to the invoice’s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).
    public var paymentMethodTypes: [PaymentMethodType]?

    /// Payment-method-specific configuration to provide to the invoice’s PaymentIntent.
    public struct PaymentMethodOptions: Codable {
        public var invoicesPaymentMethodOptions: InvoicesPaymentMethodOptions?

        public init(invoicesPaymentMethodOptions: InvoicesPaymentMethodOptions? = nil) {
            self.invoicesPaymentMethodOptions = invoicesPaymentMethodOptions
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.invoicesPaymentMethodOptions = try? container.decode(InvoicesPaymentMethodOptions.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = invoicesPaymentMethodOptions { try container.encode(value) }
        }
    }

    public enum PaymentMethodType: String, Codable, CaseIterable {
        case achCreditTransfer = "ach_credit_transfer"
        case achDebit = "ach_debit"
        case acssDebit = "acss_debit"
        case auBecsDebit = "au_becs_debit"
        case bacsDebit = "bacs_debit"
        case bancontact
        case boleto
        case card
        case fpx
        case giropay
        case ideal
        case sepaDebit = "sepa_debit"
        case sofort
        case wechatPay = "wechat_pay"
    }

    public init(paymentMethodOptions: PaymentMethodOptions? = nil, paymentMethodTypes: [PaymentMethodType]? = nil) {
        self.paymentMethodOptions = paymentMethodOptions
        self.paymentMethodTypes = paymentMethodTypes
    }

    private enum CodingKeys: String, CodingKey {
        case paymentMethodOptions = "payment_method_options"
        case paymentMethodTypes = "payment_method_types"
    }
}

public struct InvoicesResourceInvoiceTaxID: Codable {
    /// The type of the tax ID, one of `eu_vat`, `br_cnpj`, `br_cpf`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, or `unknown`
    public var type: `Type`
    /// The value of the tax ID.
    public var value: String?

    /// The type of the tax ID, one of `eu_vat`, `br_cnpj`, `br_cpf`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, or `unknown`
    public enum `Type`: String, Codable, CaseIterable {
        case aeTrn = "ae_trn"
        case auAbn = "au_abn"
        case auArn = "au_arn"
        case brCnpj = "br_cnpj"
        case brCpf = "br_cpf"
        case caBn = "ca_bn"
        case caGstHst = "ca_gst_hst"
        case caPstBc = "ca_pst_bc"
        case caPstMb = "ca_pst_mb"
        case caPstSk = "ca_pst_sk"
        case caQst = "ca_qst"
        case chVat = "ch_vat"
        case clTin = "cl_tin"
        case esCif = "es_cif"
        case euVat = "eu_vat"
        case gbVat = "gb_vat"
        case geVat = "ge_vat"
        case hkBr = "hk_br"
        case idNpwp = "id_npwp"
        case ilVat = "il_vat"
        case inGst = "in_gst"
        case jpCn = "jp_cn"
        case jpRn = "jp_rn"
        case krBrn = "kr_brn"
        case liUid = "li_uid"
        case mxRfc = "mx_rfc"
        case myFrp = "my_frp"
        case myItn = "my_itn"
        case mySst = "my_sst"
        case noVat = "no_vat"
        case nzGst = "nz_gst"
        case ruInn = "ru_inn"
        case ruKpp = "ru_kpp"
        case saVat = "sa_vat"
        case sgGst = "sg_gst"
        case sgUen = "sg_uen"
        case thVat = "th_vat"
        case twVat = "tw_vat"
        case uaVat = "ua_vat"
        case unknown
        case usEin = "us_ein"
        case zaVat = "za_vat"
    }

    public init(type: `Type`, value: String? = nil) {
        self.type = type
        self.value = value
    }
}

public struct InvoicesStatusTransitions: Codable {
    /// The time that the invoice draft was finalized.
    public var finalizedAt: Int?
    /// The time that the invoice was marked uncollectible.
    public var markedUncollectibleAt: Int?
    /// The time that the invoice was paid.
    public var paidAt: Int?
    /// The time that the invoice was voided.
    public var voidedAt: Int?

    public init(finalizedAt: Int? = nil, markedUncollectibleAt: Int? = nil, paidAt: Int? = nil, voidedAt: Int? = nil) {
        self.finalizedAt = finalizedAt
        self.markedUncollectibleAt = markedUncollectibleAt
        self.paidAt = paidAt
        self.voidedAt = voidedAt
    }

    private enum CodingKeys: String, CodingKey {
        case finalizedAt = "finalized_at"
        case markedUncollectibleAt = "marked_uncollectible_at"
        case paidAt = "paid_at"
        case voidedAt = "voided_at"
    }
}

/// This resource has been renamed to [Early Fraud
/// Warning](#early_fraud_warning_object) and will be removed in a future API
/// version.
public struct IssuerFraudRecord: Codable {
    /// An IFR is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an IFR, in order to avoid receiving a dispute later.
    public var isActionable: Bool
    /// ID of the charge this issuer fraud record is for, optionally expanded.
    public var charge: Charge
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`.
    public var fraudType: String
    /// If true, the associated charge is subject to [liability shift](https://stripe.com/docs/payments/3d-secure#disputed-payments).
    public var hasLiabilityShift: Bool
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The timestamp at which the card issuer posted the issuer fraud record.
    public var postDate: Int

    /// ID of the charge this issuer fraud record is for, optionally expanded.
    public final class Charge: Codable {
        public var string: String?
        public var charge: StripeAPI.Charge?

        public init(string: String? = nil, charge: StripeAPI.Charge? = nil) {
            self.string = string
            self.charge = charge
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.charge = try? container.decode(StripeAPI.Charge.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = charge { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case issuerFraudRecord = "issuer_fraud_record"
    }

    public init(isActionable: Bool, charge: Charge, created: Int, fraudType: String, hasLiabilityShift: Bool, id: String, isLivemode: Bool, object: Object, postDate: Int) {
        self.isActionable = isActionable
        self.charge = charge
        self.created = created
        self.fraudType = fraudType
        self.hasLiabilityShift = hasLiabilityShift
        self.id = id
        self.isLivemode = isLivemode
        self.object = object
        self.postDate = postDate
    }

    private enum CodingKeys: String, CodingKey {
        case isActionable = "actionable"
        case charge
        case created
        case fraudType = "fraud_type"
        case hasLiabilityShift = "has_liability_shift"
        case id
        case isLivemode = "livemode"
        case object
        case postDate = "post_date"
    }
}

/// When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization`
/// object is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the
/// purchase to be completed successfully.
/// 
/// Related guide: [Issued Card Authorizations](https://stripe.com/docs/issuing/purchases/authorizations).
public struct IssuingAuthorization: Codable {
    /// The total amount that was authorized or rejected. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    public var amount: Int
    /// Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    public var amountDetails: AmountDetails?
    /// Whether the authorization has been approved.
    public var isApproved: Bool
    /// How the card details were provided.
    public var authorizationMethod: AuthorizationMethod
    /// List of balance transactions associated with this authorization.
    public var balanceTransactions: [BalanceTransaction]
    public var card: IssuingCard
    /// The cardholder to whom this authorization belongs.
    public var cardholder: Cardholder?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    public var merchantAmount: Int
    /// The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var merchantCurrency: String
    /// IssuingAuthorizationMerchantData
    public var merchantData: IssuingAuthorizationMerchantData
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The pending authorization request. This field will only be non-null during an `issuing_authorization.request` webhook.
    public var pendingRequest: PendingRequest?
    /// History of every time `pending_request` was approved/denied, either by you directly or by Stripe (e.g. based on your `spending_controls`). If the merchant changes the authorization by performing an [incremental authorization](https://stripe.com/docs/issuing/purchases/authorizations), you can look at this field to see the previous requests for the authorization.
    public var requestHistory: [IssuingAuthorizationRequest]
    /// The current status of the authorization in its lifecycle.
    public var status: Status
    /// List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization.
    public var transactions: [IssuingTransaction]
    /// IssuingAuthorizationVerificationData
    public var verificationData: IssuingAuthorizationVerificationData
    /// The digital wallet used for this authorization. One of `apple_pay`, `google_pay`, or `samsung_pay`.
    public var wallet: String?

    /// Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    public struct AmountDetails: Codable {
        public var issuingAuthorizationAmountDetails: IssuingAuthorizationAmountDetails?

        public init(issuingAuthorizationAmountDetails: IssuingAuthorizationAmountDetails? = nil) {
            self.issuingAuthorizationAmountDetails = issuingAuthorizationAmountDetails
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.issuingAuthorizationAmountDetails = try? container.decode(IssuingAuthorizationAmountDetails.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = issuingAuthorizationAmountDetails { try container.encode(value) }
        }
    }

    /// How the card details were provided.
    public enum AuthorizationMethod: String, Codable, CaseIterable {
        case chip
        case contactless
        case keyedIn = "keyed_in"
        case online
        case swipe
    }

    /// The cardholder to whom this authorization belongs.
    public struct Cardholder: Codable {
        public var string: String?
        public var issuingCardholder: IssuingCardholder?

        public init(string: String? = nil, issuingCardholder: IssuingCardholder? = nil) {
            self.string = string
            self.issuingCardholder = issuingCardholder
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.issuingCardholder = try? container.decode(IssuingCardholder.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = issuingCardholder { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case issuingAuthorization = "issuing.authorization"
    }

    /// The pending authorization request. This field will only be non-null during an `issuing_authorization.request` webhook.
    public struct PendingRequest: Codable {
        public var issuingAuthorizationPendingRequest: IssuingAuthorizationPendingRequest?

        public init(issuingAuthorizationPendingRequest: IssuingAuthorizationPendingRequest? = nil) {
            self.issuingAuthorizationPendingRequest = issuingAuthorizationPendingRequest
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.issuingAuthorizationPendingRequest = try? container.decode(IssuingAuthorizationPendingRequest.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = issuingAuthorizationPendingRequest { try container.encode(value) }
        }
    }

    /// The current status of the authorization in its lifecycle.
    public enum Status: String, Codable, CaseIterable {
        case closed
        case pending
        case reversed
    }

    public init(amount: Int, amountDetails: AmountDetails? = nil, isApproved: Bool, authorizationMethod: AuthorizationMethod, balanceTransactions: [BalanceTransaction], card: IssuingCard, cardholder: Cardholder? = nil, created: Int, currency: String, id: String, isLivemode: Bool, merchantAmount: Int, merchantCurrency: String, merchantData: IssuingAuthorizationMerchantData, metadata: [String: String], object: Object, pendingRequest: PendingRequest? = nil, requestHistory: [IssuingAuthorizationRequest], status: Status, transactions: [IssuingTransaction], verificationData: IssuingAuthorizationVerificationData, wallet: String? = nil) {
        self.amount = amount
        self.amountDetails = amountDetails
        self.isApproved = isApproved
        self.authorizationMethod = authorizationMethod
        self.balanceTransactions = balanceTransactions
        self.card = card
        self.cardholder = cardholder
        self.created = created
        self.currency = currency
        self.id = id
        self.isLivemode = isLivemode
        self.merchantAmount = merchantAmount
        self.merchantCurrency = merchantCurrency
        self.merchantData = merchantData
        self.metadata = metadata
        self.object = object
        self.pendingRequest = pendingRequest
        self.requestHistory = requestHistory
        self.status = status
        self.transactions = transactions
        self.verificationData = verificationData
        self.wallet = wallet
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case amountDetails = "amount_details"
        case isApproved = "approved"
        case authorizationMethod = "authorization_method"
        case balanceTransactions = "balance_transactions"
        case card
        case cardholder
        case created
        case currency
        case id
        case isLivemode = "livemode"
        case merchantAmount = "merchant_amount"
        case merchantCurrency = "merchant_currency"
        case merchantData = "merchant_data"
        case metadata
        case object
        case pendingRequest = "pending_request"
        case requestHistory = "request_history"
        case status
        case transactions
        case verificationData = "verification_data"
        case wallet
    }
}

/// You can [create physical or virtual cards](https://stripe.com/docs/issuing/cards) that are issued to cardholders.
public final class IssuingCard: Codable {
    /// The brand of the card.
    public var brand: String
    /// The reason why the card was canceled.
    public var cancellationReason: CancellationReason?
    public var cardholder: IssuingCardholder
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// The card's CVC. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint.
    public var cvc: String?
    /// The expiration month of the card.
    public var expMonth: Int
    /// The expiration year of the card.
    public var expYear: Int
    /// Unique identifier for the object.
    public var id: String
    /// The last 4 digits of the card number.
    public var last4: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// The full unredacted card number. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint.
    public var number: String?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The latest card that replaces this card, if any.
    public var replacedBy: ReplacedBy?
    /// The card this card replaces, if any.
    public var replacementFor: ReplacementFor?
    /// The reason why the previous card needed to be replaced.
    public var replacementReason: ReplacementReason?
    /// Where and how the card will be shipped.
    public var shipping: Shipping?
    /// IssuingCardAuthorizationControls
    public var spendingControls: IssuingCardAuthorizationControls
    /// Whether authorizations can be approved on this card.
    public var status: Status
    /// The type of the card.
    public var type: `Type`
    /// Information relating to digital wallets (like Apple Pay and Google Pay).
    public var wallets: Wallets?

    /// The reason why the card was canceled.
    public enum CancellationReason: String, Codable, CaseIterable {
        case lost
        case stolen
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case issuingCard = "issuing.card"
    }

    /// The latest card that replaces this card, if any.
    public struct ReplacedBy: Codable {
        public var string: String?
        public var issuingCard: IssuingCard?

        public init(string: String? = nil, issuingCard: IssuingCard? = nil) {
            self.string = string
            self.issuingCard = issuingCard
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.issuingCard = try? container.decode(IssuingCard.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = issuingCard { try container.encode(value) }
        }
    }

    /// The card this card replaces, if any.
    public struct ReplacementFor: Codable {
        public var string: String?
        public var issuingCard: IssuingCard?

        public init(string: String? = nil, issuingCard: IssuingCard? = nil) {
            self.string = string
            self.issuingCard = issuingCard
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.issuingCard = try? container.decode(IssuingCard.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = issuingCard { try container.encode(value) }
        }
    }

    /// The reason why the previous card needed to be replaced.
    public enum ReplacementReason: String, Codable, CaseIterable {
        case damaged
        case expired
        case lost
        case stolen
    }

    /// Where and how the card will be shipped.
    public struct Shipping: Codable {
        public var issuingCardShipping: IssuingCardShipping?

        public init(issuingCardShipping: IssuingCardShipping? = nil) {
            self.issuingCardShipping = issuingCardShipping
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.issuingCardShipping = try? container.decode(IssuingCardShipping.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = issuingCardShipping { try container.encode(value) }
        }
    }

    /// Whether authorizations can be approved on this card.
    public enum Status: String, Codable, CaseIterable {
        case active
        case canceled
        case inactive
    }

    /// The type of the card.
    public enum `Type`: String, Codable, CaseIterable {
        case physical
        case virtual
    }

    /// Information relating to digital wallets (like Apple Pay and Google Pay).
    public struct Wallets: Codable {
        public var issuingCardWallets: IssuingCardWallets?

        public init(issuingCardWallets: IssuingCardWallets? = nil) {
            self.issuingCardWallets = issuingCardWallets
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.issuingCardWallets = try? container.decode(IssuingCardWallets.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = issuingCardWallets { try container.encode(value) }
        }
    }

    public init(brand: String, cancellationReason: CancellationReason? = nil, cardholder: IssuingCardholder, created: Int, currency: String, cvc: String? = nil, expMonth: Int, expYear: Int, id: String, last4: String, isLivemode: Bool, metadata: [String: String], number: String? = nil, object: Object, replacedBy: ReplacedBy? = nil, replacementFor: ReplacementFor? = nil, replacementReason: ReplacementReason? = nil, shipping: Shipping? = nil, spendingControls: IssuingCardAuthorizationControls, status: Status, type: `Type`, wallets: Wallets? = nil) {
        self.brand = brand
        self.cancellationReason = cancellationReason
        self.cardholder = cardholder
        self.created = created
        self.currency = currency
        self.cvc = cvc
        self.expMonth = expMonth
        self.expYear = expYear
        self.id = id
        self.last4 = last4
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.number = number
        self.object = object
        self.replacedBy = replacedBy
        self.replacementFor = replacementFor
        self.replacementReason = replacementReason
        self.shipping = shipping
        self.spendingControls = spendingControls
        self.status = status
        self.type = type
        self.wallets = wallets
    }

    private enum CodingKeys: String, CodingKey {
        case brand
        case cancellationReason = "cancellation_reason"
        case cardholder
        case created
        case currency
        case cvc
        case expMonth = "exp_month"
        case expYear = "exp_year"
        case id
        case last4
        case isLivemode = "livemode"
        case metadata
        case number
        case object
        case replacedBy = "replaced_by"
        case replacementFor = "replacement_for"
        case replacementReason = "replacement_reason"
        case shipping
        case spendingControls = "spending_controls"
        case status
        case type
        case wallets
    }
}

/// An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.
/// 
/// Related guide: [How to create a Cardholder](https://stripe.com/docs/issuing/cards#create-cardholder)
public struct IssuingCardholder: Codable {
    /// IssuingCardholderAddress
    public var billing: IssuingCardholderAddress
    /// Additional information about a `company` cardholder.
    public var company: Company?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The cardholder's email address.
    public var email: String?
    /// Unique identifier for the object.
    public var id: String
    /// Additional information about an `individual` cardholder.
    public var individual: Individual?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// The cardholder's name. This will be printed on cards issued to them.
    public var name: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The cardholder's phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details.
    public var phoneNumber: String?
    /// IssuingCardholderRequirements
    public var requirements: IssuingCardholderRequirements
    /// Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details.
    public var spendingControls: SpendingControls?
    /// Specifies whether to permit authorizations on this cardholder's cards.
    public var status: Status
    /// One of `individual` or `company`.
    public var type: `Type`

    /// Additional information about a `company` cardholder.
    public struct Company: Codable {
        public var issuingCardholderCompany: IssuingCardholderCompany?

        public init(issuingCardholderCompany: IssuingCardholderCompany? = nil) {
            self.issuingCardholderCompany = issuingCardholderCompany
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.issuingCardholderCompany = try? container.decode(IssuingCardholderCompany.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = issuingCardholderCompany { try container.encode(value) }
        }
    }

    /// Additional information about an `individual` cardholder.
    public struct Individual: Codable {
        public var issuingCardholderIndividual: IssuingCardholderIndividual?

        public init(issuingCardholderIndividual: IssuingCardholderIndividual? = nil) {
            self.issuingCardholderIndividual = issuingCardholderIndividual
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.issuingCardholderIndividual = try? container.decode(IssuingCardholderIndividual.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = issuingCardholderIndividual { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case issuingCardholder = "issuing.cardholder"
    }

    /// Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details.
    public struct SpendingControls: Codable {
        public var issuingCardholderAuthorizationControls: IssuingCardholderAuthorizationControls?

        public init(issuingCardholderAuthorizationControls: IssuingCardholderAuthorizationControls? = nil) {
            self.issuingCardholderAuthorizationControls = issuingCardholderAuthorizationControls
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.issuingCardholderAuthorizationControls = try? container.decode(IssuingCardholderAuthorizationControls.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = issuingCardholderAuthorizationControls { try container.encode(value) }
        }
    }

    /// Specifies whether to permit authorizations on this cardholder's cards.
    public enum Status: String, Codable, CaseIterable {
        case active
        case blocked
        case inactive
    }

    /// One of `individual` or `company`.
    public enum `Type`: String, Codable, CaseIterable {
        case company
        case individual
    }

    public init(billing: IssuingCardholderAddress, company: Company? = nil, created: Int, email: String? = nil, id: String, individual: Individual? = nil, isLivemode: Bool, metadata: [String: String], name: String, object: Object, phoneNumber: String? = nil, requirements: IssuingCardholderRequirements, spendingControls: SpendingControls? = nil, status: Status, type: `Type`) {
        self.billing = billing
        self.company = company
        self.created = created
        self.email = email
        self.id = id
        self.individual = individual
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.name = name
        self.object = object
        self.phoneNumber = phoneNumber
        self.requirements = requirements
        self.spendingControls = spendingControls
        self.status = status
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case billing
        case company
        case created
        case email
        case id
        case individual
        case isLivemode = "livemode"
        case metadata
        case name
        case object
        case phoneNumber = "phone_number"
        case requirements
        case spendingControls = "spending_controls"
        case status
        case type
    }
}

/// As a [card issuer](https://stripe.com/docs/issuing), you can dispute transactions that the cardholder does not recognize, suspects to be fraudulent, or has other issues with.
/// 
/// Related guide: [Disputing Transactions](https://stripe.com/docs/issuing/purchases/disputes)
public final class IssuingDispute: Codable {
    /// Disputed amount. Usually the amount of the `transaction`, but can differ (usually because of currency fluctuation).
    public var amount: Int
    /// List of balance transactions associated with the dispute.
    public var balanceTransactions: [BalanceTransaction]?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The currency the `transaction` was made in.
    public var currency: String
    public var evidence: IssuingDisputeEvidence
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Current status of the dispute.
    public var status: Status
    /// The transaction being disputed.
    public var transaction: Transaction

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case issuingDispute = "issuing.dispute"
    }

    /// Current status of the dispute.
    public enum Status: String, Codable, CaseIterable {
        case expired
        case lost
        case submitted
        case unsubmitted
        case won
    }

    /// The transaction being disputed.
    public struct Transaction: Codable {
        public var string: String?
        public var issuingTransaction: IssuingTransaction?

        public init(string: String? = nil, issuingTransaction: IssuingTransaction? = nil) {
            self.string = string
            self.issuingTransaction = issuingTransaction
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.issuingTransaction = try? container.decode(IssuingTransaction.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = issuingTransaction { try container.encode(value) }
        }
    }

    public init(amount: Int, balanceTransactions: [BalanceTransaction]? = nil, created: Int, currency: String, evidence: IssuingDisputeEvidence, id: String, isLivemode: Bool, metadata: [String: String], object: Object, status: Status, transaction: Transaction) {
        self.amount = amount
        self.balanceTransactions = balanceTransactions
        self.created = created
        self.currency = currency
        self.evidence = evidence
        self.id = id
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.status = status
        self.transaction = transaction
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case balanceTransactions = "balance_transactions"
        case created
        case currency
        case evidence
        case id
        case isLivemode = "livemode"
        case metadata
        case object
        case status
        case transaction
    }
}

/// When a non-stripe BIN is used, any use of an [issued card](https://stripe.com/docs/issuing) must be settled directly with the card network. The net amount owed is represented by an Issuing `Settlement` object.
public struct IssuingSettlement: Codable {
    /// The Bank Identification Number reflecting this settlement record.
    public var bin: String
    /// The date that the transactions are cleared and posted to user's accounts.
    public var clearingDate: Int
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// Unique identifier for the object.
    public var id: String
    /// The total interchange received as reimbursement for the transactions.
    public var interchangeFees: Int
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// The total net amount required to settle with the network.
    public var netTotal: Int
    /// The card network for this settlement report. One of ["visa"]
    public var network: Network
    /// The total amount of fees owed to the network.
    public var networkFees: Int
    /// The Settlement Identification Number assigned by the network.
    public var networkSettlementIdentifier: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// One of `international` or `uk_national_net`.
    public var settlementService: String
    /// The total number of transactions reflected in this settlement.
    public var transactionCount: Int
    /// The total transaction amount reflected in this settlement.
    public var transactionVolume: Int

    /// The card network for this settlement report. One of ["visa"]
    public enum Network: String, Codable, CaseIterable {
        case visa
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case issuingSettlement = "issuing.settlement"
    }

    public init(bin: String, clearingDate: Int, created: Int, currency: String, id: String, interchangeFees: Int, isLivemode: Bool, metadata: [String: String], netTotal: Int, network: Network, networkFees: Int, networkSettlementIdentifier: String, object: Object, settlementService: String, transactionCount: Int, transactionVolume: Int) {
        self.bin = bin
        self.clearingDate = clearingDate
        self.created = created
        self.currency = currency
        self.id = id
        self.interchangeFees = interchangeFees
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.netTotal = netTotal
        self.network = network
        self.networkFees = networkFees
        self.networkSettlementIdentifier = networkSettlementIdentifier
        self.object = object
        self.settlementService = settlementService
        self.transactionCount = transactionCount
        self.transactionVolume = transactionVolume
    }

    private enum CodingKeys: String, CodingKey {
        case bin
        case clearingDate = "clearing_date"
        case created
        case currency
        case id
        case interchangeFees = "interchange_fees"
        case isLivemode = "livemode"
        case metadata
        case netTotal = "net_total"
        case network
        case networkFees = "network_fees"
        case networkSettlementIdentifier = "network_settlement_identifier"
        case object
        case settlementService = "settlement_service"
        case transactionCount = "transaction_count"
        case transactionVolume = "transaction_volume"
    }
}

/// Any use of an [issued card](https://stripe.com/docs/issuing) that results in funds entering or leaving
/// your Stripe account, such as a completed purchase or refund, is represented by an Issuing
/// `Transaction` object.
/// 
/// Related guide: [Issued Card Transactions](https://stripe.com/docs/issuing/purchases/transactions).
public final class IssuingTransaction: Codable {
    /// The transaction amount, which will be reflected in your balance. This amount is in your currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    public var amount: Int
    /// Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    public var amountDetails: AmountDetails?
    /// The `Authorization` object that led to this transaction.
    public var authorization: Authorization?
    /// ID of the [balance transaction](https://stripe.com/docs/api/balance_transactions) associated with this transaction.
    public var balanceTransaction: BalanceTransaction?
    /// The card used to make this transaction.
    public var card: Card
    /// The cardholder to whom this transaction belongs.
    public var cardholder: Cardholder?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// If you've disputed the transaction, the ID of the dispute.
    public var dispute: Dispute?
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency.
    public var merchantAmount: Int
    /// The currency with which the merchant is taking payment.
    public var merchantCurrency: String
    /// IssuingAuthorizationMerchantData
    public var merchantData: IssuingAuthorizationMerchantData
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Additional purchase information that is optionally provided by the merchant.
    public var purchaseDetails: PurchaseDetails?
    /// The nature of the transaction.
    public var type: `Type`
    /// The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`.
    public var wallet: Wallet?

    /// Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    public struct AmountDetails: Codable {
        public var issuingTransactionAmountDetails: IssuingTransactionAmountDetails?

        public init(issuingTransactionAmountDetails: IssuingTransactionAmountDetails? = nil) {
            self.issuingTransactionAmountDetails = issuingTransactionAmountDetails
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.issuingTransactionAmountDetails = try? container.decode(IssuingTransactionAmountDetails.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = issuingTransactionAmountDetails { try container.encode(value) }
        }
    }

    /// The `Authorization` object that led to this transaction.
    public struct Authorization: Codable {
        public var string: String?
        public var issuingAuthorization: IssuingAuthorization?

        public init(string: String? = nil, issuingAuthorization: IssuingAuthorization? = nil) {
            self.string = string
            self.issuingAuthorization = issuingAuthorization
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.issuingAuthorization = try? container.decode(IssuingAuthorization.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = issuingAuthorization { try container.encode(value) }
        }
    }

    /// ID of the [balance transaction](https://stripe.com/docs/api/balance_transactions) associated with this transaction.
    public final class BalanceTransaction: Codable {
        public var string: String?
        public var balanceTransaction: StripeAPI.BalanceTransaction?

        public init(string: String? = nil, balanceTransaction: StripeAPI.BalanceTransaction? = nil) {
            self.string = string
            self.balanceTransaction = balanceTransaction
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.balanceTransaction = try? container.decode(StripeAPI.BalanceTransaction.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = balanceTransaction { try container.encode(value) }
        }
    }

    /// The card used to make this transaction.
    public struct Card: Codable {
        public var string: String?
        public var issuingCard: IssuingCard?

        public init(string: String? = nil, issuingCard: IssuingCard? = nil) {
            self.string = string
            self.issuingCard = issuingCard
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.issuingCard = try? container.decode(IssuingCard.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = issuingCard { try container.encode(value) }
        }
    }

    /// The cardholder to whom this transaction belongs.
    public struct Cardholder: Codable {
        public var string: String?
        public var issuingCardholder: IssuingCardholder?

        public init(string: String? = nil, issuingCardholder: IssuingCardholder? = nil) {
            self.string = string
            self.issuingCardholder = issuingCardholder
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.issuingCardholder = try? container.decode(IssuingCardholder.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = issuingCardholder { try container.encode(value) }
        }
    }

    /// If you've disputed the transaction, the ID of the dispute.
    public struct Dispute: Codable {
        public var string: String?
        public var issuingDispute: IssuingDispute?

        public init(string: String? = nil, issuingDispute: IssuingDispute? = nil) {
            self.string = string
            self.issuingDispute = issuingDispute
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.issuingDispute = try? container.decode(IssuingDispute.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = issuingDispute { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case issuingTransaction = "issuing.transaction"
    }

    /// Additional purchase information that is optionally provided by the merchant.
    public struct PurchaseDetails: Codable {
        public var issuingTransactionPurchaseDetails: IssuingTransactionPurchaseDetails?

        public init(issuingTransactionPurchaseDetails: IssuingTransactionPurchaseDetails? = nil) {
            self.issuingTransactionPurchaseDetails = issuingTransactionPurchaseDetails
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.issuingTransactionPurchaseDetails = try? container.decode(IssuingTransactionPurchaseDetails.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = issuingTransactionPurchaseDetails { try container.encode(value) }
        }
    }

    /// The nature of the transaction.
    public enum `Type`: String, Codable, CaseIterable {
        case capture
        case refund
    }

    /// The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`.
    public enum Wallet: String, Codable, CaseIterable {
        case applePay = "apple_pay"
        case googlePay = "google_pay"
        case samsungPay = "samsung_pay"
    }

    public init(amount: Int, amountDetails: AmountDetails? = nil, authorization: Authorization? = nil, balanceTransaction: BalanceTransaction? = nil, card: Card, cardholder: Cardholder? = nil, created: Int, currency: String, dispute: Dispute? = nil, id: String, isLivemode: Bool, merchantAmount: Int, merchantCurrency: String, merchantData: IssuingAuthorizationMerchantData, metadata: [String: String], object: Object, purchaseDetails: PurchaseDetails? = nil, type: `Type`, wallet: Wallet? = nil) {
        self.amount = amount
        self.amountDetails = amountDetails
        self.authorization = authorization
        self.balanceTransaction = balanceTransaction
        self.card = card
        self.cardholder = cardholder
        self.created = created
        self.currency = currency
        self.dispute = dispute
        self.id = id
        self.isLivemode = isLivemode
        self.merchantAmount = merchantAmount
        self.merchantCurrency = merchantCurrency
        self.merchantData = merchantData
        self.metadata = metadata
        self.object = object
        self.purchaseDetails = purchaseDetails
        self.type = type
        self.wallet = wallet
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case amountDetails = "amount_details"
        case authorization
        case balanceTransaction = "balance_transaction"
        case card
        case cardholder
        case created
        case currency
        case dispute
        case id
        case isLivemode = "livemode"
        case merchantAmount = "merchant_amount"
        case merchantCurrency = "merchant_currency"
        case merchantData = "merchant_data"
        case metadata
        case object
        case purchaseDetails = "purchase_details"
        case type
        case wallet
    }
}

public struct IssuingAuthorizationAmountDetails: Codable {
    /// The fee charged by the ATM for the cash withdrawal.
    public var atmFee: Int?

    public init(atmFee: Int? = nil) {
        self.atmFee = atmFee
    }

    private enum CodingKeys: String, CodingKey {
        case atmFee = "atm_fee"
    }
}

public struct IssuingAuthorizationMerchantData: Codable {
    /// A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values.
    public var category: String
    /// The merchant category code for the seller’s business
    public var categoryCode: String
    /// City where the seller is located
    public var city: String?
    /// Country where the seller is located
    public var country: String?
    /// Name of the seller
    public var name: String?
    /// Identifier assigned to the seller by the card brand
    public var networkID: String
    /// Postal code where the seller is located
    public var postalCode: String?
    /// State where the seller is located
    public var state: String?

    public init(category: String, categoryCode: String, city: String? = nil, country: String? = nil, name: String? = nil, networkID: String, postalCode: String? = nil, state: String? = nil) {
        self.category = category
        self.categoryCode = categoryCode
        self.city = city
        self.country = country
        self.name = name
        self.networkID = networkID
        self.postalCode = postalCode
        self.state = state
    }

    private enum CodingKeys: String, CodingKey {
        case category
        case categoryCode = "category_code"
        case city
        case country
        case name
        case networkID = "network_id"
        case postalCode = "postal_code"
        case state
    }
}

public struct IssuingAuthorizationPendingRequest: Codable {
    /// The additional amount Stripe will hold if the authorization is approved, in the card's [currency](https://stripe.com/docs/api#issuing_authorization_object-pending-request-currency) and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    public var amount: Int
    /// Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    public var amountDetails: AmountDetails?
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.
    public var isAmountControllable: Bool
    /// The amount the merchant is requesting to be authorized in the `merchant_currency`. The amount is in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    public var merchantAmount: Int
    /// The local currency the merchant is requesting to authorize.
    public var merchantCurrency: String

    /// Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    public struct AmountDetails: Codable {
        public var issuingAuthorizationAmountDetails: IssuingAuthorizationAmountDetails?

        public init(issuingAuthorizationAmountDetails: IssuingAuthorizationAmountDetails? = nil) {
            self.issuingAuthorizationAmountDetails = issuingAuthorizationAmountDetails
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.issuingAuthorizationAmountDetails = try? container.decode(IssuingAuthorizationAmountDetails.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = issuingAuthorizationAmountDetails { try container.encode(value) }
        }
    }

    public init(amount: Int, amountDetails: AmountDetails? = nil, currency: String, isAmountControllable: Bool, merchantAmount: Int, merchantCurrency: String) {
        self.amount = amount
        self.amountDetails = amountDetails
        self.currency = currency
        self.isAmountControllable = isAmountControllable
        self.merchantAmount = merchantAmount
        self.merchantCurrency = merchantCurrency
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case amountDetails = "amount_details"
        case currency
        case isAmountControllable = "is_amount_controllable"
        case merchantAmount = "merchant_amount"
        case merchantCurrency = "merchant_currency"
    }
}

public struct IssuingAuthorizationRequest: Codable {
    /// The `pending_request.amount` at the time of the request, presented in your card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved.
    public var amount: Int
    /// Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    public var amountDetails: AmountDetails?
    /// Whether this request was approved.
    public var isApproved: Bool
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// The `pending_request.merchant_amount` at the time of the request, presented in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    public var merchantAmount: Int
    /// The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var merchantCurrency: String
    /// The reason for the approval or decline.
    public var reason: Reason

    /// Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
    public struct AmountDetails: Codable {
        public var issuingAuthorizationAmountDetails: IssuingAuthorizationAmountDetails?

        public init(issuingAuthorizationAmountDetails: IssuingAuthorizationAmountDetails? = nil) {
            self.issuingAuthorizationAmountDetails = issuingAuthorizationAmountDetails
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.issuingAuthorizationAmountDetails = try? container.decode(IssuingAuthorizationAmountDetails.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = issuingAuthorizationAmountDetails { try container.encode(value) }
        }
    }

    /// The reason for the approval or decline.
    public enum Reason: String, Codable, CaseIterable {
        case accountDisabled = "account_disabled"
        case cardActive = "card_active"
        case cardInactive = "card_inactive"
        case cardholderInactive = "cardholder_inactive"
        case cardholderVerificationRequired = "cardholder_verification_required"
        case insufficientFunds = "insufficient_funds"
        case notAllowed = "not_allowed"
        case spendingControls = "spending_controls"
        case suspectedFraud = "suspected_fraud"
        case verificationFailed = "verification_failed"
        case webhookApproved = "webhook_approved"
        case webhookDeclined = "webhook_declined"
        case webhookTimeout = "webhook_timeout"
    }

    public init(amount: Int, amountDetails: AmountDetails? = nil, isApproved: Bool, created: Int, currency: String, merchantAmount: Int, merchantCurrency: String, reason: Reason) {
        self.amount = amount
        self.amountDetails = amountDetails
        self.isApproved = isApproved
        self.created = created
        self.currency = currency
        self.merchantAmount = merchantAmount
        self.merchantCurrency = merchantCurrency
        self.reason = reason
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case amountDetails = "amount_details"
        case isApproved = "approved"
        case created
        case currency
        case merchantAmount = "merchant_amount"
        case merchantCurrency = "merchant_currency"
        case reason
    }
}

public struct IssuingAuthorizationVerificationData: Codable {
    /// Whether the cardholder provided an address first line and if it matched the cardholder’s `billing.address.line1`.
    public var addressLine1Check: AddressLine1Check
    /// Whether the cardholder provided a postal code and if it matched the cardholder’s `billing.address.postal_code`.
    public var addressPostalCodeCheck: AddressPostalCodeCheck
    /// Whether the cardholder provided a CVC and if it matched Stripe’s record.
    public var cvcCheck: CvcCheck
    /// Whether the cardholder provided an expiry date and if it matched Stripe’s record.
    public var expiryCheck: ExpiryCheck

    /// Whether the cardholder provided an address first line and if it matched the cardholder’s `billing.address.line1`.
    public enum AddressLine1Check: String, Codable, CaseIterable {
        case match
        case mismatch
        case notProvided = "not_provided"
    }

    /// Whether the cardholder provided a postal code and if it matched the cardholder’s `billing.address.postal_code`.
    public enum AddressPostalCodeCheck: String, Codable, CaseIterable {
        case match
        case mismatch
        case notProvided = "not_provided"
    }

    /// Whether the cardholder provided a CVC and if it matched Stripe’s record.
    public enum CvcCheck: String, Codable, CaseIterable {
        case match
        case mismatch
        case notProvided = "not_provided"
    }

    /// Whether the cardholder provided an expiry date and if it matched Stripe’s record.
    public enum ExpiryCheck: String, Codable, CaseIterable {
        case match
        case mismatch
        case notProvided = "not_provided"
    }

    public init(addressLine1Check: AddressLine1Check, addressPostalCodeCheck: AddressPostalCodeCheck, cvcCheck: CvcCheck, expiryCheck: ExpiryCheck) {
        self.addressLine1Check = addressLine1Check
        self.addressPostalCodeCheck = addressPostalCodeCheck
        self.cvcCheck = cvcCheck
        self.expiryCheck = expiryCheck
    }

    private enum CodingKeys: String, CodingKey {
        case addressLine1Check = "address_line1_check"
        case addressPostalCodeCheck = "address_postal_code_check"
        case cvcCheck = "cvc_check"
        case expiryCheck = "expiry_check"
    }
}

public struct IssuingCardApplePay: Codable {
    /// Apple Pay Eligibility
    public var isEligible: Bool
    /// Reason the card is ineligible for Apple Pay
    public var ineligibleReason: IneligibleReason?

    /// Reason the card is ineligible for Apple Pay
    public enum IneligibleReason: String, Codable, CaseIterable {
        case missingAgreement = "missing_agreement"
        case missingCardholderContact = "missing_cardholder_contact"
        case unsupportedRegion = "unsupported_region"
    }

    public init(isEligible: Bool, ineligibleReason: IneligibleReason? = nil) {
        self.isEligible = isEligible
        self.ineligibleReason = ineligibleReason
    }

    private enum CodingKeys: String, CodingKey {
        case isEligible = "eligible"
        case ineligibleReason = "ineligible_reason"
    }
}

public struct IssuingCardAuthorizationControls: Codable {
    /// Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`.
    public var allowedCategories: [AllowedCategory]?
    /// Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`.
    public var blockedCategories: [BlockedCategory]?
    /// Limit spending with amount-based rules that apply across any cards this card replaced (i.e., its `replacement_for` card and _that_ card's `replacement_for` card, up the chain).
    public var spendingLimits: [IssuingCardSpendingLimit]?
    /// Currency of the amounts within `spending_limits`. Always the same as the currency of the card.
    public var spendingLimitsCurrency: String?

    public enum AllowedCategory: String, Codable, CaseIterable {
        case acRefrigerationRepair = "ac_refrigeration_repair"
        case accountingBookkeepingServices = "accounting_bookkeeping_services"
        case advertisingServices = "advertising_services"
        case agriculturalCooperative = "agricultural_cooperative"
        case airlinesAirCarriers = "airlines_air_carriers"
        case airportsFlyingFields = "airports_flying_fields"
        case ambulanceServices = "ambulance_services"
        case amusementParksCarnivals = "amusement_parks_carnivals"
        case antiqueReproductions = "antique_reproductions"
        case antiqueShops = "antique_shops"
        case aquariums
        case architecturalSurveyingServices = "architectural_surveying_services"
        case artDealersAndGalleries = "art_dealers_and_galleries"
        case artistsSupplyAndCraftShops = "artists_supply_and_craft_shops"
        case autoAndHomeSupplyStores = "auto_and_home_supply_stores"
        case autoBodyRepairShops = "auto_body_repair_shops"
        case autoPaintShops = "auto_paint_shops"
        case autoServiceShops = "auto_service_shops"
        case automatedCashDisburse = "automated_cash_disburse"
        case automatedFuelDispensers = "automated_fuel_dispensers"
        case automobileAssociations = "automobile_associations"
        case automotivePartsAndAccessoriesStores = "automotive_parts_and_accessories_stores"
        case automotiveTireStores = "automotive_tire_stores"
        case bailAndBondPayments = "bail_and_bond_payments"
        case bakeries
        case bandsOrchestras = "bands_orchestras"
        case barberAndBeautyShops = "barber_and_beauty_shops"
        case bettingCasinoGambling = "betting_casino_gambling"
        case bicycleShops = "bicycle_shops"
        case billiardPoolEstablishments = "billiard_pool_establishments"
        case boatDealers = "boat_dealers"
        case boatRentalsAndLeases = "boat_rentals_and_leases"
        case bookStores = "book_stores"
        case booksPeriodicalsAndNewspapers = "books_periodicals_and_newspapers"
        case bowlingAlleys = "bowling_alleys"
        case busLines = "bus_lines"
        case businessSecretarialSchools = "business_secretarial_schools"
        case buyingShoppingServices = "buying_shopping_services"
        case cableSatelliteAndOtherPayTelevisionAndRadio = "cable_satellite_and_other_pay_television_and_radio"
        case cameraAndPhotographicSupplyStores = "camera_and_photographic_supply_stores"
        case candyNutAndConfectioneryStores = "candy_nut_and_confectionery_stores"
        case carAndTruckDealersNewUsed = "car_and_truck_dealers_new_used"
        case carAndTruckDealersUsedOnly = "car_and_truck_dealers_used_only"
        case carRentalAgencies = "car_rental_agencies"
        case carWashes = "car_washes"
        case carpentryServices = "carpentry_services"
        case carpetUpholsteryCleaning = "carpet_upholstery_cleaning"
        case caterers
        case charitableAndSocialServiceOrganizationsFundraising = "charitable_and_social_service_organizations_fundraising"
        case chemicalsAndAlliedProducts = "chemicals_and_allied_products"
        case childCareServices = "child_care_services"
        case childrensAndInfantsWearStores = "childrens_and_infants_wear_stores"
        case chiropodistsPodiatrists = "chiropodists_podiatrists"
        case chiropractors
        case cigarStoresAndStands = "cigar_stores_and_stands"
        case civicSocialFraternalAssociations = "civic_social_fraternal_associations"
        case cleaningAndMaintenance = "cleaning_and_maintenance"
        case clothingRental = "clothing_rental"
        case collegesUniversities = "colleges_universities"
        case commercialEquipment = "commercial_equipment"
        case commercialFootwear = "commercial_footwear"
        case commercialPhotographyArtAndGraphics = "commercial_photography_art_and_graphics"
        case commuterTransportAndFerries = "commuter_transport_and_ferries"
        case computerNetworkServices = "computer_network_services"
        case computerProgramming = "computer_programming"
        case computerRepair = "computer_repair"
        case computerSoftwareStores = "computer_software_stores"
        case computersPeripheralsAndSoftware = "computers_peripherals_and_software"
        case concreteWorkServices = "concrete_work_services"
        case constructionMaterials = "construction_materials"
        case consultingPublicRelations = "consulting_public_relations"
        case correspondenceSchools = "correspondence_schools"
        case cosmeticStores = "cosmetic_stores"
        case counselingServices = "counseling_services"
        case countryClubs = "country_clubs"
        case courierServices = "courier_services"
        case courtCosts = "court_costs"
        case creditReportingAgencies = "credit_reporting_agencies"
        case cruiseLines = "cruise_lines"
        case dairyProductsStores = "dairy_products_stores"
        case danceHallStudiosSchools = "dance_hall_studios_schools"
        case datingEscortServices = "dating_escort_services"
        case dentistsOrthodontists = "dentists_orthodontists"
        case departmentStores = "department_stores"
        case detectiveAgencies = "detective_agencies"
        case digitalGoodsApplications = "digital_goods_applications"
        case digitalGoodsGames = "digital_goods_games"
        case digitalGoodsLargeVolume = "digital_goods_large_volume"
        case digitalGoodsMedia = "digital_goods_media"
        case directMarketingCatalogMerchant = "direct_marketing_catalog_merchant"
        case directMarketingCombinationCatalogAndRetailMerchant = "direct_marketing_combination_catalog_and_retail_merchant"
        case directMarketingInboundTelemarketing = "direct_marketing_inbound_telemarketing"
        case directMarketingInsuranceServices = "direct_marketing_insurance_services"
        case directMarketingOther = "direct_marketing_other"
        case directMarketingOutboundTelemarketing = "direct_marketing_outbound_telemarketing"
        case directMarketingSubscription = "direct_marketing_subscription"
        case directMarketingTravel = "direct_marketing_travel"
        case discountStores = "discount_stores"
        case doctors
        case doorToDoorSales = "door_to_door_sales"
        case draperyWindowCoveringAndUpholsteryStores = "drapery_window_covering_and_upholstery_stores"
        case drinkingPlaces = "drinking_places"
        case drugStoresAndPharmacies = "drug_stores_and_pharmacies"
        case drugsDrugProprietariesAndDruggistSundries = "drugs_drug_proprietaries_and_druggist_sundries"
        case dryCleaners = "dry_cleaners"
        case durableGoods = "durable_goods"
        case dutyFreeStores = "duty_free_stores"
        case eatingPlacesRestaurants = "eating_places_restaurants"
        case educationalServices = "educational_services"
        case electricRazorStores = "electric_razor_stores"
        case electricalPartsAndEquipment = "electrical_parts_and_equipment"
        case electricalServices = "electrical_services"
        case electronicsRepairShops = "electronics_repair_shops"
        case electronicsStores = "electronics_stores"
        case elementarySecondarySchools = "elementary_secondary_schools"
        case employmentTempAgencies = "employment_temp_agencies"
        case equipmentRental = "equipment_rental"
        case exterminatingServices = "exterminating_services"
        case familyClothingStores = "family_clothing_stores"
        case fastFoodRestaurants = "fast_food_restaurants"
        case financialInstitutions = "financial_institutions"
        case finesGovernmentAdministrativeEntities = "fines_government_administrative_entities"
        case fireplaceFireplaceScreensAndAccessoriesStores = "fireplace_fireplace_screens_and_accessories_stores"
        case floorCoveringStores = "floor_covering_stores"
        case florists
        case floristsSuppliesNurseryStockAndFlowers = "florists_supplies_nursery_stock_and_flowers"
        case freezerAndLockerMeatProvisioners = "freezer_and_locker_meat_provisioners"
        case fuelDealersNonAutomotive = "fuel_dealers_non_automotive"
        case funeralServicesCrematories = "funeral_services_crematories"
        case furnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = "furniture_home_furnishings_and_equipment_stores_except_appliances"
        case furnitureRepairRefinishing = "furniture_repair_refinishing"
        case furriersAndFurShops = "furriers_and_fur_shops"
        case generalServices = "general_services"
        case giftCardNoveltyAndSouvenirShops = "gift_card_novelty_and_souvenir_shops"
        case glassPaintAndWallpaperStores = "glass_paint_and_wallpaper_stores"
        case glasswareCrystalStores = "glassware_crystal_stores"
        case golfCoursesPublic = "golf_courses_public"
        case governmentServices = "government_services"
        case groceryStoresSupermarkets = "grocery_stores_supermarkets"
        case hardwareEquipmentAndSupplies = "hardware_equipment_and_supplies"
        case hardwareStores = "hardware_stores"
        case healthAndBeautySpas = "health_and_beauty_spas"
        case hearingAidsSalesAndSupplies = "hearing_aids_sales_and_supplies"
        case heatingPlumbingAC = "heating_plumbing_a_c"
        case hobbyToyAndGameShops = "hobby_toy_and_game_shops"
        case homeSupplyWarehouseStores = "home_supply_warehouse_stores"
        case hospitals
        case hotelsMotelsAndResorts = "hotels_motels_and_resorts"
        case householdApplianceStores = "household_appliance_stores"
        case industrialSupplies = "industrial_supplies"
        case informationRetrievalServices = "information_retrieval_services"
        case insuranceDefault = "insurance_default"
        case insuranceUnderwritingPremiums = "insurance_underwriting_premiums"
        case intraCompanyPurchases = "intra_company_purchases"
        case jewelryStoresWatchesClocksAndSilverwareStores = "jewelry_stores_watches_clocks_and_silverware_stores"
        case landscapingServices = "landscaping_services"
        case laundries
        case laundryCleaningServices = "laundry_cleaning_services"
        case legalServicesAttorneys = "legal_services_attorneys"
        case luggageAndLeatherGoodsStores = "luggage_and_leather_goods_stores"
        case lumberBuildingMaterialsStores = "lumber_building_materials_stores"
        case manualCashDisburse = "manual_cash_disburse"
        case marinasServiceAndSupplies = "marinas_service_and_supplies"
        case masonryStoneworkAndPlaster = "masonry_stonework_and_plaster"
        case massageParlors = "massage_parlors"
        case medicalAndDentalLabs = "medical_and_dental_labs"
        case medicalDentalOphthalmicAndHospitalEquipmentAndSupplies = "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
        case medicalServices = "medical_services"
        case membershipOrganizations = "membership_organizations"
        case mensAndBoysClothingAndAccessoriesStores = "mens_and_boys_clothing_and_accessories_stores"
        case mensWomensClothingStores = "mens_womens_clothing_stores"
        case metalServiceCenters = "metal_service_centers"
        case miscellaneous
        case miscellaneousApparelAndAccessoryShops = "miscellaneous_apparel_and_accessory_shops"
        case miscellaneousAutoDealers = "miscellaneous_auto_dealers"
        case miscellaneousBusinessServices = "miscellaneous_business_services"
        case miscellaneousFoodStores = "miscellaneous_food_stores"
        case miscellaneousGeneralMerchandise = "miscellaneous_general_merchandise"
        case miscellaneousGeneralServices = "miscellaneous_general_services"
        case miscellaneousHomeFurnishingSpecialtyStores = "miscellaneous_home_furnishing_specialty_stores"
        case miscellaneousPublishingAndPrinting = "miscellaneous_publishing_and_printing"
        case miscellaneousRecreationServices = "miscellaneous_recreation_services"
        case miscellaneousRepairShops = "miscellaneous_repair_shops"
        case miscellaneousSpecialtyRetail = "miscellaneous_specialty_retail"
        case mobileHomeDealers = "mobile_home_dealers"
        case motionPictureTheaters = "motion_picture_theaters"
        case motorFreightCarriersAndTrucking = "motor_freight_carriers_and_trucking"
        case motorHomesDealers = "motor_homes_dealers"
        case motorVehicleSuppliesAndNewParts = "motor_vehicle_supplies_and_new_parts"
        case motorcycleShopsAndDealers = "motorcycle_shops_and_dealers"
        case motorcycleShopsDealers = "motorcycle_shops_dealers"
        case musicStoresMusicalInstrumentsPianosAndSheetMusic = "music_stores_musical_instruments_pianos_and_sheet_music"
        case newsDealersAndNewsstands = "news_dealers_and_newsstands"
        case nonFiMoneyOrders = "non_fi_money_orders"
        case nonFiStoredValueCardPurchaseLoad = "non_fi_stored_value_card_purchase_load"
        case nondurableGoods = "nondurable_goods"
        case nurseriesLawnAndGardenSupplyStores = "nurseries_lawn_and_garden_supply_stores"
        case nursingPersonalCare = "nursing_personal_care"
        case officeAndCommercialFurniture = "office_and_commercial_furniture"
        case opticiansEyeglasses = "opticians_eyeglasses"
        case optometristsOphthalmologist = "optometrists_ophthalmologist"
        case orthopedicGoodsProstheticDevices = "orthopedic_goods_prosthetic_devices"
        case osteopaths
        case packageStoresBeerWineAndLiquor = "package_stores_beer_wine_and_liquor"
        case paintsVarnishesAndSupplies = "paints_varnishes_and_supplies"
        case parkingLotsGarages = "parking_lots_garages"
        case passengerRailways = "passenger_railways"
        case pawnShops = "pawn_shops"
        case petShopsPetFoodAndSupplies = "pet_shops_pet_food_and_supplies"
        case petroleumAndPetroleumProducts = "petroleum_and_petroleum_products"
        case photoDeveloping = "photo_developing"
        case photographicPhotocopyMicrofilmEquipmentAndSupplies = "photographic_photocopy_microfilm_equipment_and_supplies"
        case photographicStudios = "photographic_studios"
        case pictureVideoProduction = "picture_video_production"
        case pieceGoodsNotionsAndOtherDryGoods = "piece_goods_notions_and_other_dry_goods"
        case plumbingHeatingEquipmentAndSupplies = "plumbing_heating_equipment_and_supplies"
        case politicalOrganizations = "political_organizations"
        case postalServicesGovernmentOnly = "postal_services_government_only"
        case preciousStonesAndMetalsWatchesAndJewelry = "precious_stones_and_metals_watches_and_jewelry"
        case professionalServices = "professional_services"
        case publicWarehousingAndStorage = "public_warehousing_and_storage"
        case quickCopyReproAndBlueprint = "quick_copy_repro_and_blueprint"
        case railroads
        case realEstateAgentsAndManagersRentals = "real_estate_agents_and_managers_rentals"
        case recordStores = "record_stores"
        case recreationalVehicleRentals = "recreational_vehicle_rentals"
        case religiousGoodsStores = "religious_goods_stores"
        case religiousOrganizations = "religious_organizations"
        case roofingSidingSheetMetal = "roofing_siding_sheet_metal"
        case secretarialSupportServices = "secretarial_support_services"
        case securityBrokersDealers = "security_brokers_dealers"
        case serviceStations = "service_stations"
        case sewingNeedleworkFabricAndPieceGoodsStores = "sewing_needlework_fabric_and_piece_goods_stores"
        case shoeRepairHatCleaning = "shoe_repair_hat_cleaning"
        case shoeStores = "shoe_stores"
        case smallApplianceRepair = "small_appliance_repair"
        case snowmobileDealers = "snowmobile_dealers"
        case specialTradeServices = "special_trade_services"
        case specialtyCleaning = "specialty_cleaning"
        case sportingGoodsStores = "sporting_goods_stores"
        case sportingRecreationCamps = "sporting_recreation_camps"
        case sportsAndRidingApparelStores = "sports_and_riding_apparel_stores"
        case sportsClubsFields = "sports_clubs_fields"
        case stampAndCoinStores = "stamp_and_coin_stores"
        case stationaryOfficeSuppliesPrintingAndWritingPaper = "stationary_office_supplies_printing_and_writing_paper"
        case stationeryStoresOfficeAndSchoolSupplyStores = "stationery_stores_office_and_school_supply_stores"
        case swimmingPoolsSales = "swimming_pools_sales"
        case tUiTravelGermany = "t_ui_travel_germany"
        case tailorsAlterations = "tailors_alterations"
        case taxPaymentsGovernmentAgencies = "tax_payments_government_agencies"
        case taxPreparationServices = "tax_preparation_services"
        case taxicabsLimousines = "taxicabs_limousines"
        case telecommunicationEquipmentAndTelephoneSales = "telecommunication_equipment_and_telephone_sales"
        case telecommunicationServices = "telecommunication_services"
        case telegraphServices = "telegraph_services"
        case tentAndAwningShops = "tent_and_awning_shops"
        case testingLaboratories = "testing_laboratories"
        case theatricalTicketAgencies = "theatrical_ticket_agencies"
        case timeshares
        case tireRetreadingAndRepair = "tire_retreading_and_repair"
        case tollsBridgeFees = "tolls_bridge_fees"
        case touristAttractionsAndExhibits = "tourist_attractions_and_exhibits"
        case towingServices = "towing_services"
        case trailerParksCampgrounds = "trailer_parks_campgrounds"
        case transportationServices = "transportation_services"
        case travelAgenciesTourOperators = "travel_agencies_tour_operators"
        case truckStopIteration = "truck_stop_iteration"
        case truckUtilityTrailerRentals = "truck_utility_trailer_rentals"
        case typesettingPlateMakingAndRelatedServices = "typesetting_plate_making_and_related_services"
        case typewriterStores = "typewriter_stores"
        case uSFederalGovernmentAgenciesOrDepartments = "u_s_federal_government_agencies_or_departments"
        case uniformsCommercialClothing = "uniforms_commercial_clothing"
        case usedMerchandiseAndSecondhandStores = "used_merchandise_and_secondhand_stores"
        case utilities
        case varietyStores = "variety_stores"
        case veterinaryServices = "veterinary_services"
        case videoAmusementGameSupplies = "video_amusement_game_supplies"
        case videoGameArcades = "video_game_arcades"
        case videoTapeRentalStores = "video_tape_rental_stores"
        case vocationalTradeSchools = "vocational_trade_schools"
        case watchJewelryRepair = "watch_jewelry_repair"
        case weldingRepair = "welding_repair"
        case wholesaleClubs = "wholesale_clubs"
        case wigAndToupeeStores = "wig_and_toupee_stores"
        case wiresMoneyOrders = "wires_money_orders"
        case womensAccessoryAndSpecialtyShops = "womens_accessory_and_specialty_shops"
        case womensReadyToWearStores = "womens_ready_to_wear_stores"
        case wreckingAndSalvageYards = "wrecking_and_salvage_yards"
    }

    public enum BlockedCategory: String, Codable, CaseIterable {
        case acRefrigerationRepair = "ac_refrigeration_repair"
        case accountingBookkeepingServices = "accounting_bookkeeping_services"
        case advertisingServices = "advertising_services"
        case agriculturalCooperative = "agricultural_cooperative"
        case airlinesAirCarriers = "airlines_air_carriers"
        case airportsFlyingFields = "airports_flying_fields"
        case ambulanceServices = "ambulance_services"
        case amusementParksCarnivals = "amusement_parks_carnivals"
        case antiqueReproductions = "antique_reproductions"
        case antiqueShops = "antique_shops"
        case aquariums
        case architecturalSurveyingServices = "architectural_surveying_services"
        case artDealersAndGalleries = "art_dealers_and_galleries"
        case artistsSupplyAndCraftShops = "artists_supply_and_craft_shops"
        case autoAndHomeSupplyStores = "auto_and_home_supply_stores"
        case autoBodyRepairShops = "auto_body_repair_shops"
        case autoPaintShops = "auto_paint_shops"
        case autoServiceShops = "auto_service_shops"
        case automatedCashDisburse = "automated_cash_disburse"
        case automatedFuelDispensers = "automated_fuel_dispensers"
        case automobileAssociations = "automobile_associations"
        case automotivePartsAndAccessoriesStores = "automotive_parts_and_accessories_stores"
        case automotiveTireStores = "automotive_tire_stores"
        case bailAndBondPayments = "bail_and_bond_payments"
        case bakeries
        case bandsOrchestras = "bands_orchestras"
        case barberAndBeautyShops = "barber_and_beauty_shops"
        case bettingCasinoGambling = "betting_casino_gambling"
        case bicycleShops = "bicycle_shops"
        case billiardPoolEstablishments = "billiard_pool_establishments"
        case boatDealers = "boat_dealers"
        case boatRentalsAndLeases = "boat_rentals_and_leases"
        case bookStores = "book_stores"
        case booksPeriodicalsAndNewspapers = "books_periodicals_and_newspapers"
        case bowlingAlleys = "bowling_alleys"
        case busLines = "bus_lines"
        case businessSecretarialSchools = "business_secretarial_schools"
        case buyingShoppingServices = "buying_shopping_services"
        case cableSatelliteAndOtherPayTelevisionAndRadio = "cable_satellite_and_other_pay_television_and_radio"
        case cameraAndPhotographicSupplyStores = "camera_and_photographic_supply_stores"
        case candyNutAndConfectioneryStores = "candy_nut_and_confectionery_stores"
        case carAndTruckDealersNewUsed = "car_and_truck_dealers_new_used"
        case carAndTruckDealersUsedOnly = "car_and_truck_dealers_used_only"
        case carRentalAgencies = "car_rental_agencies"
        case carWashes = "car_washes"
        case carpentryServices = "carpentry_services"
        case carpetUpholsteryCleaning = "carpet_upholstery_cleaning"
        case caterers
        case charitableAndSocialServiceOrganizationsFundraising = "charitable_and_social_service_organizations_fundraising"
        case chemicalsAndAlliedProducts = "chemicals_and_allied_products"
        case childCareServices = "child_care_services"
        case childrensAndInfantsWearStores = "childrens_and_infants_wear_stores"
        case chiropodistsPodiatrists = "chiropodists_podiatrists"
        case chiropractors
        case cigarStoresAndStands = "cigar_stores_and_stands"
        case civicSocialFraternalAssociations = "civic_social_fraternal_associations"
        case cleaningAndMaintenance = "cleaning_and_maintenance"
        case clothingRental = "clothing_rental"
        case collegesUniversities = "colleges_universities"
        case commercialEquipment = "commercial_equipment"
        case commercialFootwear = "commercial_footwear"
        case commercialPhotographyArtAndGraphics = "commercial_photography_art_and_graphics"
        case commuterTransportAndFerries = "commuter_transport_and_ferries"
        case computerNetworkServices = "computer_network_services"
        case computerProgramming = "computer_programming"
        case computerRepair = "computer_repair"
        case computerSoftwareStores = "computer_software_stores"
        case computersPeripheralsAndSoftware = "computers_peripherals_and_software"
        case concreteWorkServices = "concrete_work_services"
        case constructionMaterials = "construction_materials"
        case consultingPublicRelations = "consulting_public_relations"
        case correspondenceSchools = "correspondence_schools"
        case cosmeticStores = "cosmetic_stores"
        case counselingServices = "counseling_services"
        case countryClubs = "country_clubs"
        case courierServices = "courier_services"
        case courtCosts = "court_costs"
        case creditReportingAgencies = "credit_reporting_agencies"
        case cruiseLines = "cruise_lines"
        case dairyProductsStores = "dairy_products_stores"
        case danceHallStudiosSchools = "dance_hall_studios_schools"
        case datingEscortServices = "dating_escort_services"
        case dentistsOrthodontists = "dentists_orthodontists"
        case departmentStores = "department_stores"
        case detectiveAgencies = "detective_agencies"
        case digitalGoodsApplications = "digital_goods_applications"
        case digitalGoodsGames = "digital_goods_games"
        case digitalGoodsLargeVolume = "digital_goods_large_volume"
        case digitalGoodsMedia = "digital_goods_media"
        case directMarketingCatalogMerchant = "direct_marketing_catalog_merchant"
        case directMarketingCombinationCatalogAndRetailMerchant = "direct_marketing_combination_catalog_and_retail_merchant"
        case directMarketingInboundTelemarketing = "direct_marketing_inbound_telemarketing"
        case directMarketingInsuranceServices = "direct_marketing_insurance_services"
        case directMarketingOther = "direct_marketing_other"
        case directMarketingOutboundTelemarketing = "direct_marketing_outbound_telemarketing"
        case directMarketingSubscription = "direct_marketing_subscription"
        case directMarketingTravel = "direct_marketing_travel"
        case discountStores = "discount_stores"
        case doctors
        case doorToDoorSales = "door_to_door_sales"
        case draperyWindowCoveringAndUpholsteryStores = "drapery_window_covering_and_upholstery_stores"
        case drinkingPlaces = "drinking_places"
        case drugStoresAndPharmacies = "drug_stores_and_pharmacies"
        case drugsDrugProprietariesAndDruggistSundries = "drugs_drug_proprietaries_and_druggist_sundries"
        case dryCleaners = "dry_cleaners"
        case durableGoods = "durable_goods"
        case dutyFreeStores = "duty_free_stores"
        case eatingPlacesRestaurants = "eating_places_restaurants"
        case educationalServices = "educational_services"
        case electricRazorStores = "electric_razor_stores"
        case electricalPartsAndEquipment = "electrical_parts_and_equipment"
        case electricalServices = "electrical_services"
        case electronicsRepairShops = "electronics_repair_shops"
        case electronicsStores = "electronics_stores"
        case elementarySecondarySchools = "elementary_secondary_schools"
        case employmentTempAgencies = "employment_temp_agencies"
        case equipmentRental = "equipment_rental"
        case exterminatingServices = "exterminating_services"
        case familyClothingStores = "family_clothing_stores"
        case fastFoodRestaurants = "fast_food_restaurants"
        case financialInstitutions = "financial_institutions"
        case finesGovernmentAdministrativeEntities = "fines_government_administrative_entities"
        case fireplaceFireplaceScreensAndAccessoriesStores = "fireplace_fireplace_screens_and_accessories_stores"
        case floorCoveringStores = "floor_covering_stores"
        case florists
        case floristsSuppliesNurseryStockAndFlowers = "florists_supplies_nursery_stock_and_flowers"
        case freezerAndLockerMeatProvisioners = "freezer_and_locker_meat_provisioners"
        case fuelDealersNonAutomotive = "fuel_dealers_non_automotive"
        case funeralServicesCrematories = "funeral_services_crematories"
        case furnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = "furniture_home_furnishings_and_equipment_stores_except_appliances"
        case furnitureRepairRefinishing = "furniture_repair_refinishing"
        case furriersAndFurShops = "furriers_and_fur_shops"
        case generalServices = "general_services"
        case giftCardNoveltyAndSouvenirShops = "gift_card_novelty_and_souvenir_shops"
        case glassPaintAndWallpaperStores = "glass_paint_and_wallpaper_stores"
        case glasswareCrystalStores = "glassware_crystal_stores"
        case golfCoursesPublic = "golf_courses_public"
        case governmentServices = "government_services"
        case groceryStoresSupermarkets = "grocery_stores_supermarkets"
        case hardwareEquipmentAndSupplies = "hardware_equipment_and_supplies"
        case hardwareStores = "hardware_stores"
        case healthAndBeautySpas = "health_and_beauty_spas"
        case hearingAidsSalesAndSupplies = "hearing_aids_sales_and_supplies"
        case heatingPlumbingAC = "heating_plumbing_a_c"
        case hobbyToyAndGameShops = "hobby_toy_and_game_shops"
        case homeSupplyWarehouseStores = "home_supply_warehouse_stores"
        case hospitals
        case hotelsMotelsAndResorts = "hotels_motels_and_resorts"
        case householdApplianceStores = "household_appliance_stores"
        case industrialSupplies = "industrial_supplies"
        case informationRetrievalServices = "information_retrieval_services"
        case insuranceDefault = "insurance_default"
        case insuranceUnderwritingPremiums = "insurance_underwriting_premiums"
        case intraCompanyPurchases = "intra_company_purchases"
        case jewelryStoresWatchesClocksAndSilverwareStores = "jewelry_stores_watches_clocks_and_silverware_stores"
        case landscapingServices = "landscaping_services"
        case laundries
        case laundryCleaningServices = "laundry_cleaning_services"
        case legalServicesAttorneys = "legal_services_attorneys"
        case luggageAndLeatherGoodsStores = "luggage_and_leather_goods_stores"
        case lumberBuildingMaterialsStores = "lumber_building_materials_stores"
        case manualCashDisburse = "manual_cash_disburse"
        case marinasServiceAndSupplies = "marinas_service_and_supplies"
        case masonryStoneworkAndPlaster = "masonry_stonework_and_plaster"
        case massageParlors = "massage_parlors"
        case medicalAndDentalLabs = "medical_and_dental_labs"
        case medicalDentalOphthalmicAndHospitalEquipmentAndSupplies = "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
        case medicalServices = "medical_services"
        case membershipOrganizations = "membership_organizations"
        case mensAndBoysClothingAndAccessoriesStores = "mens_and_boys_clothing_and_accessories_stores"
        case mensWomensClothingStores = "mens_womens_clothing_stores"
        case metalServiceCenters = "metal_service_centers"
        case miscellaneous
        case miscellaneousApparelAndAccessoryShops = "miscellaneous_apparel_and_accessory_shops"
        case miscellaneousAutoDealers = "miscellaneous_auto_dealers"
        case miscellaneousBusinessServices = "miscellaneous_business_services"
        case miscellaneousFoodStores = "miscellaneous_food_stores"
        case miscellaneousGeneralMerchandise = "miscellaneous_general_merchandise"
        case miscellaneousGeneralServices = "miscellaneous_general_services"
        case miscellaneousHomeFurnishingSpecialtyStores = "miscellaneous_home_furnishing_specialty_stores"
        case miscellaneousPublishingAndPrinting = "miscellaneous_publishing_and_printing"
        case miscellaneousRecreationServices = "miscellaneous_recreation_services"
        case miscellaneousRepairShops = "miscellaneous_repair_shops"
        case miscellaneousSpecialtyRetail = "miscellaneous_specialty_retail"
        case mobileHomeDealers = "mobile_home_dealers"
        case motionPictureTheaters = "motion_picture_theaters"
        case motorFreightCarriersAndTrucking = "motor_freight_carriers_and_trucking"
        case motorHomesDealers = "motor_homes_dealers"
        case motorVehicleSuppliesAndNewParts = "motor_vehicle_supplies_and_new_parts"
        case motorcycleShopsAndDealers = "motorcycle_shops_and_dealers"
        case motorcycleShopsDealers = "motorcycle_shops_dealers"
        case musicStoresMusicalInstrumentsPianosAndSheetMusic = "music_stores_musical_instruments_pianos_and_sheet_music"
        case newsDealersAndNewsstands = "news_dealers_and_newsstands"
        case nonFiMoneyOrders = "non_fi_money_orders"
        case nonFiStoredValueCardPurchaseLoad = "non_fi_stored_value_card_purchase_load"
        case nondurableGoods = "nondurable_goods"
        case nurseriesLawnAndGardenSupplyStores = "nurseries_lawn_and_garden_supply_stores"
        case nursingPersonalCare = "nursing_personal_care"
        case officeAndCommercialFurniture = "office_and_commercial_furniture"
        case opticiansEyeglasses = "opticians_eyeglasses"
        case optometristsOphthalmologist = "optometrists_ophthalmologist"
        case orthopedicGoodsProstheticDevices = "orthopedic_goods_prosthetic_devices"
        case osteopaths
        case packageStoresBeerWineAndLiquor = "package_stores_beer_wine_and_liquor"
        case paintsVarnishesAndSupplies = "paints_varnishes_and_supplies"
        case parkingLotsGarages = "parking_lots_garages"
        case passengerRailways = "passenger_railways"
        case pawnShops = "pawn_shops"
        case petShopsPetFoodAndSupplies = "pet_shops_pet_food_and_supplies"
        case petroleumAndPetroleumProducts = "petroleum_and_petroleum_products"
        case photoDeveloping = "photo_developing"
        case photographicPhotocopyMicrofilmEquipmentAndSupplies = "photographic_photocopy_microfilm_equipment_and_supplies"
        case photographicStudios = "photographic_studios"
        case pictureVideoProduction = "picture_video_production"
        case pieceGoodsNotionsAndOtherDryGoods = "piece_goods_notions_and_other_dry_goods"
        case plumbingHeatingEquipmentAndSupplies = "plumbing_heating_equipment_and_supplies"
        case politicalOrganizations = "political_organizations"
        case postalServicesGovernmentOnly = "postal_services_government_only"
        case preciousStonesAndMetalsWatchesAndJewelry = "precious_stones_and_metals_watches_and_jewelry"
        case professionalServices = "professional_services"
        case publicWarehousingAndStorage = "public_warehousing_and_storage"
        case quickCopyReproAndBlueprint = "quick_copy_repro_and_blueprint"
        case railroads
        case realEstateAgentsAndManagersRentals = "real_estate_agents_and_managers_rentals"
        case recordStores = "record_stores"
        case recreationalVehicleRentals = "recreational_vehicle_rentals"
        case religiousGoodsStores = "religious_goods_stores"
        case religiousOrganizations = "religious_organizations"
        case roofingSidingSheetMetal = "roofing_siding_sheet_metal"
        case secretarialSupportServices = "secretarial_support_services"
        case securityBrokersDealers = "security_brokers_dealers"
        case serviceStations = "service_stations"
        case sewingNeedleworkFabricAndPieceGoodsStores = "sewing_needlework_fabric_and_piece_goods_stores"
        case shoeRepairHatCleaning = "shoe_repair_hat_cleaning"
        case shoeStores = "shoe_stores"
        case smallApplianceRepair = "small_appliance_repair"
        case snowmobileDealers = "snowmobile_dealers"
        case specialTradeServices = "special_trade_services"
        case specialtyCleaning = "specialty_cleaning"
        case sportingGoodsStores = "sporting_goods_stores"
        case sportingRecreationCamps = "sporting_recreation_camps"
        case sportsAndRidingApparelStores = "sports_and_riding_apparel_stores"
        case sportsClubsFields = "sports_clubs_fields"
        case stampAndCoinStores = "stamp_and_coin_stores"
        case stationaryOfficeSuppliesPrintingAndWritingPaper = "stationary_office_supplies_printing_and_writing_paper"
        case stationeryStoresOfficeAndSchoolSupplyStores = "stationery_stores_office_and_school_supply_stores"
        case swimmingPoolsSales = "swimming_pools_sales"
        case tUiTravelGermany = "t_ui_travel_germany"
        case tailorsAlterations = "tailors_alterations"
        case taxPaymentsGovernmentAgencies = "tax_payments_government_agencies"
        case taxPreparationServices = "tax_preparation_services"
        case taxicabsLimousines = "taxicabs_limousines"
        case telecommunicationEquipmentAndTelephoneSales = "telecommunication_equipment_and_telephone_sales"
        case telecommunicationServices = "telecommunication_services"
        case telegraphServices = "telegraph_services"
        case tentAndAwningShops = "tent_and_awning_shops"
        case testingLaboratories = "testing_laboratories"
        case theatricalTicketAgencies = "theatrical_ticket_agencies"
        case timeshares
        case tireRetreadingAndRepair = "tire_retreading_and_repair"
        case tollsBridgeFees = "tolls_bridge_fees"
        case touristAttractionsAndExhibits = "tourist_attractions_and_exhibits"
        case towingServices = "towing_services"
        case trailerParksCampgrounds = "trailer_parks_campgrounds"
        case transportationServices = "transportation_services"
        case travelAgenciesTourOperators = "travel_agencies_tour_operators"
        case truckStopIteration = "truck_stop_iteration"
        case truckUtilityTrailerRentals = "truck_utility_trailer_rentals"
        case typesettingPlateMakingAndRelatedServices = "typesetting_plate_making_and_related_services"
        case typewriterStores = "typewriter_stores"
        case uSFederalGovernmentAgenciesOrDepartments = "u_s_federal_government_agencies_or_departments"
        case uniformsCommercialClothing = "uniforms_commercial_clothing"
        case usedMerchandiseAndSecondhandStores = "used_merchandise_and_secondhand_stores"
        case utilities
        case varietyStores = "variety_stores"
        case veterinaryServices = "veterinary_services"
        case videoAmusementGameSupplies = "video_amusement_game_supplies"
        case videoGameArcades = "video_game_arcades"
        case videoTapeRentalStores = "video_tape_rental_stores"
        case vocationalTradeSchools = "vocational_trade_schools"
        case watchJewelryRepair = "watch_jewelry_repair"
        case weldingRepair = "welding_repair"
        case wholesaleClubs = "wholesale_clubs"
        case wigAndToupeeStores = "wig_and_toupee_stores"
        case wiresMoneyOrders = "wires_money_orders"
        case womensAccessoryAndSpecialtyShops = "womens_accessory_and_specialty_shops"
        case womensReadyToWearStores = "womens_ready_to_wear_stores"
        case wreckingAndSalvageYards = "wrecking_and_salvage_yards"
    }

    public init(allowedCategories: [AllowedCategory]? = nil, blockedCategories: [BlockedCategory]? = nil, spendingLimits: [IssuingCardSpendingLimit]? = nil, spendingLimitsCurrency: String? = nil) {
        self.allowedCategories = allowedCategories
        self.blockedCategories = blockedCategories
        self.spendingLimits = spendingLimits
        self.spendingLimitsCurrency = spendingLimitsCurrency
    }

    private enum CodingKeys: String, CodingKey {
        case allowedCategories = "allowed_categories"
        case blockedCategories = "blocked_categories"
        case spendingLimits = "spending_limits"
        case spendingLimitsCurrency = "spending_limits_currency"
    }
}

public struct IssuingCardGooglePay: Codable {
    /// Google Pay Eligibility
    public var isEligible: Bool
    /// Reason the card is ineligible for Google Pay
    public var ineligibleReason: IneligibleReason?

    /// Reason the card is ineligible for Google Pay
    public enum IneligibleReason: String, Codable, CaseIterable {
        case missingAgreement = "missing_agreement"
        case missingCardholderContact = "missing_cardholder_contact"
        case unsupportedRegion = "unsupported_region"
    }

    public init(isEligible: Bool, ineligibleReason: IneligibleReason? = nil) {
        self.isEligible = isEligible
        self.ineligibleReason = ineligibleReason
    }

    private enum CodingKeys: String, CodingKey {
        case isEligible = "eligible"
        case ineligibleReason = "ineligible_reason"
    }
}

public struct IssuingCardShipping: Codable {
    public var address: Address
    /// The delivery company that shipped a card.
    public var carrier: Carrier?
    /// A unix timestamp representing a best estimate of when the card will be delivered.
    public var eta: Int?
    /// Recipient name.
    public var name: String
    /// Shipment service, such as `standard` or `express`.
    public var service: Service
    /// The delivery status of the card.
    public var status: Status?
    /// A tracking number for a card shipment.
    public var trackingNumber: String?
    /// A link to the shipping carrier's site where you can view detailed information about a card shipment.
    public var trackingURL: String?
    /// Packaging options.
    public var type: `Type`

    /// The delivery company that shipped a card.
    public enum Carrier: String, Codable, CaseIterable {
        case dhl
        case fedex
        case royalMail = "royal_mail"
        case usps
    }

    /// Shipment service, such as `standard` or `express`.
    public enum Service: String, Codable, CaseIterable {
        case express
        case priority
        case standard
    }

    /// The delivery status of the card.
    public enum Status: String, Codable, CaseIterable {
        case canceled
        case delivered
        case failure
        case pending
        case returned
        case shipped
    }

    /// Packaging options.
    public enum `Type`: String, Codable, CaseIterable {
        case bulk
        case individual
    }

    public init(address: Address, carrier: Carrier? = nil, eta: Int? = nil, name: String, service: Service, status: Status? = nil, trackingNumber: String? = nil, trackingURL: String? = nil, type: `Type`) {
        self.address = address
        self.carrier = carrier
        self.eta = eta
        self.name = name
        self.service = service
        self.status = status
        self.trackingNumber = trackingNumber
        self.trackingURL = trackingURL
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case address
        case carrier
        case eta
        case name
        case service
        case status
        case trackingNumber = "tracking_number"
        case trackingURL = "tracking_url"
        case type
    }
}

public struct IssuingCardSpendingLimit: Codable {
    /// Maximum amount allowed to spend per interval.
    public var amount: Int
    /// Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories.
    public var categories: [Category]?
    /// Interval (or event) to which the amount applies.
    public var interval: Interval

    public enum Category: String, Codable, CaseIterable {
        case acRefrigerationRepair = "ac_refrigeration_repair"
        case accountingBookkeepingServices = "accounting_bookkeeping_services"
        case advertisingServices = "advertising_services"
        case agriculturalCooperative = "agricultural_cooperative"
        case airlinesAirCarriers = "airlines_air_carriers"
        case airportsFlyingFields = "airports_flying_fields"
        case ambulanceServices = "ambulance_services"
        case amusementParksCarnivals = "amusement_parks_carnivals"
        case antiqueReproductions = "antique_reproductions"
        case antiqueShops = "antique_shops"
        case aquariums
        case architecturalSurveyingServices = "architectural_surveying_services"
        case artDealersAndGalleries = "art_dealers_and_galleries"
        case artistsSupplyAndCraftShops = "artists_supply_and_craft_shops"
        case autoAndHomeSupplyStores = "auto_and_home_supply_stores"
        case autoBodyRepairShops = "auto_body_repair_shops"
        case autoPaintShops = "auto_paint_shops"
        case autoServiceShops = "auto_service_shops"
        case automatedCashDisburse = "automated_cash_disburse"
        case automatedFuelDispensers = "automated_fuel_dispensers"
        case automobileAssociations = "automobile_associations"
        case automotivePartsAndAccessoriesStores = "automotive_parts_and_accessories_stores"
        case automotiveTireStores = "automotive_tire_stores"
        case bailAndBondPayments = "bail_and_bond_payments"
        case bakeries
        case bandsOrchestras = "bands_orchestras"
        case barberAndBeautyShops = "barber_and_beauty_shops"
        case bettingCasinoGambling = "betting_casino_gambling"
        case bicycleShops = "bicycle_shops"
        case billiardPoolEstablishments = "billiard_pool_establishments"
        case boatDealers = "boat_dealers"
        case boatRentalsAndLeases = "boat_rentals_and_leases"
        case bookStores = "book_stores"
        case booksPeriodicalsAndNewspapers = "books_periodicals_and_newspapers"
        case bowlingAlleys = "bowling_alleys"
        case busLines = "bus_lines"
        case businessSecretarialSchools = "business_secretarial_schools"
        case buyingShoppingServices = "buying_shopping_services"
        case cableSatelliteAndOtherPayTelevisionAndRadio = "cable_satellite_and_other_pay_television_and_radio"
        case cameraAndPhotographicSupplyStores = "camera_and_photographic_supply_stores"
        case candyNutAndConfectioneryStores = "candy_nut_and_confectionery_stores"
        case carAndTruckDealersNewUsed = "car_and_truck_dealers_new_used"
        case carAndTruckDealersUsedOnly = "car_and_truck_dealers_used_only"
        case carRentalAgencies = "car_rental_agencies"
        case carWashes = "car_washes"
        case carpentryServices = "carpentry_services"
        case carpetUpholsteryCleaning = "carpet_upholstery_cleaning"
        case caterers
        case charitableAndSocialServiceOrganizationsFundraising = "charitable_and_social_service_organizations_fundraising"
        case chemicalsAndAlliedProducts = "chemicals_and_allied_products"
        case childCareServices = "child_care_services"
        case childrensAndInfantsWearStores = "childrens_and_infants_wear_stores"
        case chiropodistsPodiatrists = "chiropodists_podiatrists"
        case chiropractors
        case cigarStoresAndStands = "cigar_stores_and_stands"
        case civicSocialFraternalAssociations = "civic_social_fraternal_associations"
        case cleaningAndMaintenance = "cleaning_and_maintenance"
        case clothingRental = "clothing_rental"
        case collegesUniversities = "colleges_universities"
        case commercialEquipment = "commercial_equipment"
        case commercialFootwear = "commercial_footwear"
        case commercialPhotographyArtAndGraphics = "commercial_photography_art_and_graphics"
        case commuterTransportAndFerries = "commuter_transport_and_ferries"
        case computerNetworkServices = "computer_network_services"
        case computerProgramming = "computer_programming"
        case computerRepair = "computer_repair"
        case computerSoftwareStores = "computer_software_stores"
        case computersPeripheralsAndSoftware = "computers_peripherals_and_software"
        case concreteWorkServices = "concrete_work_services"
        case constructionMaterials = "construction_materials"
        case consultingPublicRelations = "consulting_public_relations"
        case correspondenceSchools = "correspondence_schools"
        case cosmeticStores = "cosmetic_stores"
        case counselingServices = "counseling_services"
        case countryClubs = "country_clubs"
        case courierServices = "courier_services"
        case courtCosts = "court_costs"
        case creditReportingAgencies = "credit_reporting_agencies"
        case cruiseLines = "cruise_lines"
        case dairyProductsStores = "dairy_products_stores"
        case danceHallStudiosSchools = "dance_hall_studios_schools"
        case datingEscortServices = "dating_escort_services"
        case dentistsOrthodontists = "dentists_orthodontists"
        case departmentStores = "department_stores"
        case detectiveAgencies = "detective_agencies"
        case digitalGoodsApplications = "digital_goods_applications"
        case digitalGoodsGames = "digital_goods_games"
        case digitalGoodsLargeVolume = "digital_goods_large_volume"
        case digitalGoodsMedia = "digital_goods_media"
        case directMarketingCatalogMerchant = "direct_marketing_catalog_merchant"
        case directMarketingCombinationCatalogAndRetailMerchant = "direct_marketing_combination_catalog_and_retail_merchant"
        case directMarketingInboundTelemarketing = "direct_marketing_inbound_telemarketing"
        case directMarketingInsuranceServices = "direct_marketing_insurance_services"
        case directMarketingOther = "direct_marketing_other"
        case directMarketingOutboundTelemarketing = "direct_marketing_outbound_telemarketing"
        case directMarketingSubscription = "direct_marketing_subscription"
        case directMarketingTravel = "direct_marketing_travel"
        case discountStores = "discount_stores"
        case doctors
        case doorToDoorSales = "door_to_door_sales"
        case draperyWindowCoveringAndUpholsteryStores = "drapery_window_covering_and_upholstery_stores"
        case drinkingPlaces = "drinking_places"
        case drugStoresAndPharmacies = "drug_stores_and_pharmacies"
        case drugsDrugProprietariesAndDruggistSundries = "drugs_drug_proprietaries_and_druggist_sundries"
        case dryCleaners = "dry_cleaners"
        case durableGoods = "durable_goods"
        case dutyFreeStores = "duty_free_stores"
        case eatingPlacesRestaurants = "eating_places_restaurants"
        case educationalServices = "educational_services"
        case electricRazorStores = "electric_razor_stores"
        case electricalPartsAndEquipment = "electrical_parts_and_equipment"
        case electricalServices = "electrical_services"
        case electronicsRepairShops = "electronics_repair_shops"
        case electronicsStores = "electronics_stores"
        case elementarySecondarySchools = "elementary_secondary_schools"
        case employmentTempAgencies = "employment_temp_agencies"
        case equipmentRental = "equipment_rental"
        case exterminatingServices = "exterminating_services"
        case familyClothingStores = "family_clothing_stores"
        case fastFoodRestaurants = "fast_food_restaurants"
        case financialInstitutions = "financial_institutions"
        case finesGovernmentAdministrativeEntities = "fines_government_administrative_entities"
        case fireplaceFireplaceScreensAndAccessoriesStores = "fireplace_fireplace_screens_and_accessories_stores"
        case floorCoveringStores = "floor_covering_stores"
        case florists
        case floristsSuppliesNurseryStockAndFlowers = "florists_supplies_nursery_stock_and_flowers"
        case freezerAndLockerMeatProvisioners = "freezer_and_locker_meat_provisioners"
        case fuelDealersNonAutomotive = "fuel_dealers_non_automotive"
        case funeralServicesCrematories = "funeral_services_crematories"
        case furnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = "furniture_home_furnishings_and_equipment_stores_except_appliances"
        case furnitureRepairRefinishing = "furniture_repair_refinishing"
        case furriersAndFurShops = "furriers_and_fur_shops"
        case generalServices = "general_services"
        case giftCardNoveltyAndSouvenirShops = "gift_card_novelty_and_souvenir_shops"
        case glassPaintAndWallpaperStores = "glass_paint_and_wallpaper_stores"
        case glasswareCrystalStores = "glassware_crystal_stores"
        case golfCoursesPublic = "golf_courses_public"
        case governmentServices = "government_services"
        case groceryStoresSupermarkets = "grocery_stores_supermarkets"
        case hardwareEquipmentAndSupplies = "hardware_equipment_and_supplies"
        case hardwareStores = "hardware_stores"
        case healthAndBeautySpas = "health_and_beauty_spas"
        case hearingAidsSalesAndSupplies = "hearing_aids_sales_and_supplies"
        case heatingPlumbingAC = "heating_plumbing_a_c"
        case hobbyToyAndGameShops = "hobby_toy_and_game_shops"
        case homeSupplyWarehouseStores = "home_supply_warehouse_stores"
        case hospitals
        case hotelsMotelsAndResorts = "hotels_motels_and_resorts"
        case householdApplianceStores = "household_appliance_stores"
        case industrialSupplies = "industrial_supplies"
        case informationRetrievalServices = "information_retrieval_services"
        case insuranceDefault = "insurance_default"
        case insuranceUnderwritingPremiums = "insurance_underwriting_premiums"
        case intraCompanyPurchases = "intra_company_purchases"
        case jewelryStoresWatchesClocksAndSilverwareStores = "jewelry_stores_watches_clocks_and_silverware_stores"
        case landscapingServices = "landscaping_services"
        case laundries
        case laundryCleaningServices = "laundry_cleaning_services"
        case legalServicesAttorneys = "legal_services_attorneys"
        case luggageAndLeatherGoodsStores = "luggage_and_leather_goods_stores"
        case lumberBuildingMaterialsStores = "lumber_building_materials_stores"
        case manualCashDisburse = "manual_cash_disburse"
        case marinasServiceAndSupplies = "marinas_service_and_supplies"
        case masonryStoneworkAndPlaster = "masonry_stonework_and_plaster"
        case massageParlors = "massage_parlors"
        case medicalAndDentalLabs = "medical_and_dental_labs"
        case medicalDentalOphthalmicAndHospitalEquipmentAndSupplies = "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
        case medicalServices = "medical_services"
        case membershipOrganizations = "membership_organizations"
        case mensAndBoysClothingAndAccessoriesStores = "mens_and_boys_clothing_and_accessories_stores"
        case mensWomensClothingStores = "mens_womens_clothing_stores"
        case metalServiceCenters = "metal_service_centers"
        case miscellaneous
        case miscellaneousApparelAndAccessoryShops = "miscellaneous_apparel_and_accessory_shops"
        case miscellaneousAutoDealers = "miscellaneous_auto_dealers"
        case miscellaneousBusinessServices = "miscellaneous_business_services"
        case miscellaneousFoodStores = "miscellaneous_food_stores"
        case miscellaneousGeneralMerchandise = "miscellaneous_general_merchandise"
        case miscellaneousGeneralServices = "miscellaneous_general_services"
        case miscellaneousHomeFurnishingSpecialtyStores = "miscellaneous_home_furnishing_specialty_stores"
        case miscellaneousPublishingAndPrinting = "miscellaneous_publishing_and_printing"
        case miscellaneousRecreationServices = "miscellaneous_recreation_services"
        case miscellaneousRepairShops = "miscellaneous_repair_shops"
        case miscellaneousSpecialtyRetail = "miscellaneous_specialty_retail"
        case mobileHomeDealers = "mobile_home_dealers"
        case motionPictureTheaters = "motion_picture_theaters"
        case motorFreightCarriersAndTrucking = "motor_freight_carriers_and_trucking"
        case motorHomesDealers = "motor_homes_dealers"
        case motorVehicleSuppliesAndNewParts = "motor_vehicle_supplies_and_new_parts"
        case motorcycleShopsAndDealers = "motorcycle_shops_and_dealers"
        case motorcycleShopsDealers = "motorcycle_shops_dealers"
        case musicStoresMusicalInstrumentsPianosAndSheetMusic = "music_stores_musical_instruments_pianos_and_sheet_music"
        case newsDealersAndNewsstands = "news_dealers_and_newsstands"
        case nonFiMoneyOrders = "non_fi_money_orders"
        case nonFiStoredValueCardPurchaseLoad = "non_fi_stored_value_card_purchase_load"
        case nondurableGoods = "nondurable_goods"
        case nurseriesLawnAndGardenSupplyStores = "nurseries_lawn_and_garden_supply_stores"
        case nursingPersonalCare = "nursing_personal_care"
        case officeAndCommercialFurniture = "office_and_commercial_furniture"
        case opticiansEyeglasses = "opticians_eyeglasses"
        case optometristsOphthalmologist = "optometrists_ophthalmologist"
        case orthopedicGoodsProstheticDevices = "orthopedic_goods_prosthetic_devices"
        case osteopaths
        case packageStoresBeerWineAndLiquor = "package_stores_beer_wine_and_liquor"
        case paintsVarnishesAndSupplies = "paints_varnishes_and_supplies"
        case parkingLotsGarages = "parking_lots_garages"
        case passengerRailways = "passenger_railways"
        case pawnShops = "pawn_shops"
        case petShopsPetFoodAndSupplies = "pet_shops_pet_food_and_supplies"
        case petroleumAndPetroleumProducts = "petroleum_and_petroleum_products"
        case photoDeveloping = "photo_developing"
        case photographicPhotocopyMicrofilmEquipmentAndSupplies = "photographic_photocopy_microfilm_equipment_and_supplies"
        case photographicStudios = "photographic_studios"
        case pictureVideoProduction = "picture_video_production"
        case pieceGoodsNotionsAndOtherDryGoods = "piece_goods_notions_and_other_dry_goods"
        case plumbingHeatingEquipmentAndSupplies = "plumbing_heating_equipment_and_supplies"
        case politicalOrganizations = "political_organizations"
        case postalServicesGovernmentOnly = "postal_services_government_only"
        case preciousStonesAndMetalsWatchesAndJewelry = "precious_stones_and_metals_watches_and_jewelry"
        case professionalServices = "professional_services"
        case publicWarehousingAndStorage = "public_warehousing_and_storage"
        case quickCopyReproAndBlueprint = "quick_copy_repro_and_blueprint"
        case railroads
        case realEstateAgentsAndManagersRentals = "real_estate_agents_and_managers_rentals"
        case recordStores = "record_stores"
        case recreationalVehicleRentals = "recreational_vehicle_rentals"
        case religiousGoodsStores = "religious_goods_stores"
        case religiousOrganizations = "religious_organizations"
        case roofingSidingSheetMetal = "roofing_siding_sheet_metal"
        case secretarialSupportServices = "secretarial_support_services"
        case securityBrokersDealers = "security_brokers_dealers"
        case serviceStations = "service_stations"
        case sewingNeedleworkFabricAndPieceGoodsStores = "sewing_needlework_fabric_and_piece_goods_stores"
        case shoeRepairHatCleaning = "shoe_repair_hat_cleaning"
        case shoeStores = "shoe_stores"
        case smallApplianceRepair = "small_appliance_repair"
        case snowmobileDealers = "snowmobile_dealers"
        case specialTradeServices = "special_trade_services"
        case specialtyCleaning = "specialty_cleaning"
        case sportingGoodsStores = "sporting_goods_stores"
        case sportingRecreationCamps = "sporting_recreation_camps"
        case sportsAndRidingApparelStores = "sports_and_riding_apparel_stores"
        case sportsClubsFields = "sports_clubs_fields"
        case stampAndCoinStores = "stamp_and_coin_stores"
        case stationaryOfficeSuppliesPrintingAndWritingPaper = "stationary_office_supplies_printing_and_writing_paper"
        case stationeryStoresOfficeAndSchoolSupplyStores = "stationery_stores_office_and_school_supply_stores"
        case swimmingPoolsSales = "swimming_pools_sales"
        case tUiTravelGermany = "t_ui_travel_germany"
        case tailorsAlterations = "tailors_alterations"
        case taxPaymentsGovernmentAgencies = "tax_payments_government_agencies"
        case taxPreparationServices = "tax_preparation_services"
        case taxicabsLimousines = "taxicabs_limousines"
        case telecommunicationEquipmentAndTelephoneSales = "telecommunication_equipment_and_telephone_sales"
        case telecommunicationServices = "telecommunication_services"
        case telegraphServices = "telegraph_services"
        case tentAndAwningShops = "tent_and_awning_shops"
        case testingLaboratories = "testing_laboratories"
        case theatricalTicketAgencies = "theatrical_ticket_agencies"
        case timeshares
        case tireRetreadingAndRepair = "tire_retreading_and_repair"
        case tollsBridgeFees = "tolls_bridge_fees"
        case touristAttractionsAndExhibits = "tourist_attractions_and_exhibits"
        case towingServices = "towing_services"
        case trailerParksCampgrounds = "trailer_parks_campgrounds"
        case transportationServices = "transportation_services"
        case travelAgenciesTourOperators = "travel_agencies_tour_operators"
        case truckStopIteration = "truck_stop_iteration"
        case truckUtilityTrailerRentals = "truck_utility_trailer_rentals"
        case typesettingPlateMakingAndRelatedServices = "typesetting_plate_making_and_related_services"
        case typewriterStores = "typewriter_stores"
        case uSFederalGovernmentAgenciesOrDepartments = "u_s_federal_government_agencies_or_departments"
        case uniformsCommercialClothing = "uniforms_commercial_clothing"
        case usedMerchandiseAndSecondhandStores = "used_merchandise_and_secondhand_stores"
        case utilities
        case varietyStores = "variety_stores"
        case veterinaryServices = "veterinary_services"
        case videoAmusementGameSupplies = "video_amusement_game_supplies"
        case videoGameArcades = "video_game_arcades"
        case videoTapeRentalStores = "video_tape_rental_stores"
        case vocationalTradeSchools = "vocational_trade_schools"
        case watchJewelryRepair = "watch_jewelry_repair"
        case weldingRepair = "welding_repair"
        case wholesaleClubs = "wholesale_clubs"
        case wigAndToupeeStores = "wig_and_toupee_stores"
        case wiresMoneyOrders = "wires_money_orders"
        case womensAccessoryAndSpecialtyShops = "womens_accessory_and_specialty_shops"
        case womensReadyToWearStores = "womens_ready_to_wear_stores"
        case wreckingAndSalvageYards = "wrecking_and_salvage_yards"
    }

    /// Interval (or event) to which the amount applies.
    public enum Interval: String, Codable, CaseIterable {
        case allTime = "all_time"
        case daily
        case monthly
        case perAuthorization = "per_authorization"
        case weekly
        case yearly
    }

    public init(amount: Int, categories: [Category]? = nil, interval: Interval) {
        self.amount = amount
        self.categories = categories
        self.interval = interval
    }
}

public struct IssuingCardWallets: Codable {
    /// IssuingCardApplePay
    public var applePay: IssuingCardApplePay
    /// IssuingCardGooglePay
    public var googlePay: IssuingCardGooglePay
    /// Unique identifier for a card used with digital wallets
    public var primaryAccountIdentifier: String?

    public init(applePay: IssuingCardApplePay, googlePay: IssuingCardGooglePay, primaryAccountIdentifier: String? = nil) {
        self.applePay = applePay
        self.googlePay = googlePay
        self.primaryAccountIdentifier = primaryAccountIdentifier
    }

    private enum CodingKeys: String, CodingKey {
        case applePay = "apple_pay"
        case googlePay = "google_pay"
        case primaryAccountIdentifier = "primary_account_identifier"
    }
}

public struct IssuingCardholderAddress: Codable {
    public var address: Address

    public init(address: Address) {
        self.address = address
    }
}

public struct IssuingCardholderAuthorizationControls: Codable {
    /// Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`.
    public var allowedCategories: [AllowedCategory]?
    /// Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`.
    public var blockedCategories: [BlockedCategory]?
    /// Limit spending with amount-based rules that apply across this cardholder's cards.
    public var spendingLimits: [IssuingCardholderSpendingLimit]?
    /// Currency of the amounts within `spending_limits`.
    public var spendingLimitsCurrency: String?

    public enum AllowedCategory: String, Codable, CaseIterable {
        case acRefrigerationRepair = "ac_refrigeration_repair"
        case accountingBookkeepingServices = "accounting_bookkeeping_services"
        case advertisingServices = "advertising_services"
        case agriculturalCooperative = "agricultural_cooperative"
        case airlinesAirCarriers = "airlines_air_carriers"
        case airportsFlyingFields = "airports_flying_fields"
        case ambulanceServices = "ambulance_services"
        case amusementParksCarnivals = "amusement_parks_carnivals"
        case antiqueReproductions = "antique_reproductions"
        case antiqueShops = "antique_shops"
        case aquariums
        case architecturalSurveyingServices = "architectural_surveying_services"
        case artDealersAndGalleries = "art_dealers_and_galleries"
        case artistsSupplyAndCraftShops = "artists_supply_and_craft_shops"
        case autoAndHomeSupplyStores = "auto_and_home_supply_stores"
        case autoBodyRepairShops = "auto_body_repair_shops"
        case autoPaintShops = "auto_paint_shops"
        case autoServiceShops = "auto_service_shops"
        case automatedCashDisburse = "automated_cash_disburse"
        case automatedFuelDispensers = "automated_fuel_dispensers"
        case automobileAssociations = "automobile_associations"
        case automotivePartsAndAccessoriesStores = "automotive_parts_and_accessories_stores"
        case automotiveTireStores = "automotive_tire_stores"
        case bailAndBondPayments = "bail_and_bond_payments"
        case bakeries
        case bandsOrchestras = "bands_orchestras"
        case barberAndBeautyShops = "barber_and_beauty_shops"
        case bettingCasinoGambling = "betting_casino_gambling"
        case bicycleShops = "bicycle_shops"
        case billiardPoolEstablishments = "billiard_pool_establishments"
        case boatDealers = "boat_dealers"
        case boatRentalsAndLeases = "boat_rentals_and_leases"
        case bookStores = "book_stores"
        case booksPeriodicalsAndNewspapers = "books_periodicals_and_newspapers"
        case bowlingAlleys = "bowling_alleys"
        case busLines = "bus_lines"
        case businessSecretarialSchools = "business_secretarial_schools"
        case buyingShoppingServices = "buying_shopping_services"
        case cableSatelliteAndOtherPayTelevisionAndRadio = "cable_satellite_and_other_pay_television_and_radio"
        case cameraAndPhotographicSupplyStores = "camera_and_photographic_supply_stores"
        case candyNutAndConfectioneryStores = "candy_nut_and_confectionery_stores"
        case carAndTruckDealersNewUsed = "car_and_truck_dealers_new_used"
        case carAndTruckDealersUsedOnly = "car_and_truck_dealers_used_only"
        case carRentalAgencies = "car_rental_agencies"
        case carWashes = "car_washes"
        case carpentryServices = "carpentry_services"
        case carpetUpholsteryCleaning = "carpet_upholstery_cleaning"
        case caterers
        case charitableAndSocialServiceOrganizationsFundraising = "charitable_and_social_service_organizations_fundraising"
        case chemicalsAndAlliedProducts = "chemicals_and_allied_products"
        case childCareServices = "child_care_services"
        case childrensAndInfantsWearStores = "childrens_and_infants_wear_stores"
        case chiropodistsPodiatrists = "chiropodists_podiatrists"
        case chiropractors
        case cigarStoresAndStands = "cigar_stores_and_stands"
        case civicSocialFraternalAssociations = "civic_social_fraternal_associations"
        case cleaningAndMaintenance = "cleaning_and_maintenance"
        case clothingRental = "clothing_rental"
        case collegesUniversities = "colleges_universities"
        case commercialEquipment = "commercial_equipment"
        case commercialFootwear = "commercial_footwear"
        case commercialPhotographyArtAndGraphics = "commercial_photography_art_and_graphics"
        case commuterTransportAndFerries = "commuter_transport_and_ferries"
        case computerNetworkServices = "computer_network_services"
        case computerProgramming = "computer_programming"
        case computerRepair = "computer_repair"
        case computerSoftwareStores = "computer_software_stores"
        case computersPeripheralsAndSoftware = "computers_peripherals_and_software"
        case concreteWorkServices = "concrete_work_services"
        case constructionMaterials = "construction_materials"
        case consultingPublicRelations = "consulting_public_relations"
        case correspondenceSchools = "correspondence_schools"
        case cosmeticStores = "cosmetic_stores"
        case counselingServices = "counseling_services"
        case countryClubs = "country_clubs"
        case courierServices = "courier_services"
        case courtCosts = "court_costs"
        case creditReportingAgencies = "credit_reporting_agencies"
        case cruiseLines = "cruise_lines"
        case dairyProductsStores = "dairy_products_stores"
        case danceHallStudiosSchools = "dance_hall_studios_schools"
        case datingEscortServices = "dating_escort_services"
        case dentistsOrthodontists = "dentists_orthodontists"
        case departmentStores = "department_stores"
        case detectiveAgencies = "detective_agencies"
        case digitalGoodsApplications = "digital_goods_applications"
        case digitalGoodsGames = "digital_goods_games"
        case digitalGoodsLargeVolume = "digital_goods_large_volume"
        case digitalGoodsMedia = "digital_goods_media"
        case directMarketingCatalogMerchant = "direct_marketing_catalog_merchant"
        case directMarketingCombinationCatalogAndRetailMerchant = "direct_marketing_combination_catalog_and_retail_merchant"
        case directMarketingInboundTelemarketing = "direct_marketing_inbound_telemarketing"
        case directMarketingInsuranceServices = "direct_marketing_insurance_services"
        case directMarketingOther = "direct_marketing_other"
        case directMarketingOutboundTelemarketing = "direct_marketing_outbound_telemarketing"
        case directMarketingSubscription = "direct_marketing_subscription"
        case directMarketingTravel = "direct_marketing_travel"
        case discountStores = "discount_stores"
        case doctors
        case doorToDoorSales = "door_to_door_sales"
        case draperyWindowCoveringAndUpholsteryStores = "drapery_window_covering_and_upholstery_stores"
        case drinkingPlaces = "drinking_places"
        case drugStoresAndPharmacies = "drug_stores_and_pharmacies"
        case drugsDrugProprietariesAndDruggistSundries = "drugs_drug_proprietaries_and_druggist_sundries"
        case dryCleaners = "dry_cleaners"
        case durableGoods = "durable_goods"
        case dutyFreeStores = "duty_free_stores"
        case eatingPlacesRestaurants = "eating_places_restaurants"
        case educationalServices = "educational_services"
        case electricRazorStores = "electric_razor_stores"
        case electricalPartsAndEquipment = "electrical_parts_and_equipment"
        case electricalServices = "electrical_services"
        case electronicsRepairShops = "electronics_repair_shops"
        case electronicsStores = "electronics_stores"
        case elementarySecondarySchools = "elementary_secondary_schools"
        case employmentTempAgencies = "employment_temp_agencies"
        case equipmentRental = "equipment_rental"
        case exterminatingServices = "exterminating_services"
        case familyClothingStores = "family_clothing_stores"
        case fastFoodRestaurants = "fast_food_restaurants"
        case financialInstitutions = "financial_institutions"
        case finesGovernmentAdministrativeEntities = "fines_government_administrative_entities"
        case fireplaceFireplaceScreensAndAccessoriesStores = "fireplace_fireplace_screens_and_accessories_stores"
        case floorCoveringStores = "floor_covering_stores"
        case florists
        case floristsSuppliesNurseryStockAndFlowers = "florists_supplies_nursery_stock_and_flowers"
        case freezerAndLockerMeatProvisioners = "freezer_and_locker_meat_provisioners"
        case fuelDealersNonAutomotive = "fuel_dealers_non_automotive"
        case funeralServicesCrematories = "funeral_services_crematories"
        case furnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = "furniture_home_furnishings_and_equipment_stores_except_appliances"
        case furnitureRepairRefinishing = "furniture_repair_refinishing"
        case furriersAndFurShops = "furriers_and_fur_shops"
        case generalServices = "general_services"
        case giftCardNoveltyAndSouvenirShops = "gift_card_novelty_and_souvenir_shops"
        case glassPaintAndWallpaperStores = "glass_paint_and_wallpaper_stores"
        case glasswareCrystalStores = "glassware_crystal_stores"
        case golfCoursesPublic = "golf_courses_public"
        case governmentServices = "government_services"
        case groceryStoresSupermarkets = "grocery_stores_supermarkets"
        case hardwareEquipmentAndSupplies = "hardware_equipment_and_supplies"
        case hardwareStores = "hardware_stores"
        case healthAndBeautySpas = "health_and_beauty_spas"
        case hearingAidsSalesAndSupplies = "hearing_aids_sales_and_supplies"
        case heatingPlumbingAC = "heating_plumbing_a_c"
        case hobbyToyAndGameShops = "hobby_toy_and_game_shops"
        case homeSupplyWarehouseStores = "home_supply_warehouse_stores"
        case hospitals
        case hotelsMotelsAndResorts = "hotels_motels_and_resorts"
        case householdApplianceStores = "household_appliance_stores"
        case industrialSupplies = "industrial_supplies"
        case informationRetrievalServices = "information_retrieval_services"
        case insuranceDefault = "insurance_default"
        case insuranceUnderwritingPremiums = "insurance_underwriting_premiums"
        case intraCompanyPurchases = "intra_company_purchases"
        case jewelryStoresWatchesClocksAndSilverwareStores = "jewelry_stores_watches_clocks_and_silverware_stores"
        case landscapingServices = "landscaping_services"
        case laundries
        case laundryCleaningServices = "laundry_cleaning_services"
        case legalServicesAttorneys = "legal_services_attorneys"
        case luggageAndLeatherGoodsStores = "luggage_and_leather_goods_stores"
        case lumberBuildingMaterialsStores = "lumber_building_materials_stores"
        case manualCashDisburse = "manual_cash_disburse"
        case marinasServiceAndSupplies = "marinas_service_and_supplies"
        case masonryStoneworkAndPlaster = "masonry_stonework_and_plaster"
        case massageParlors = "massage_parlors"
        case medicalAndDentalLabs = "medical_and_dental_labs"
        case medicalDentalOphthalmicAndHospitalEquipmentAndSupplies = "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
        case medicalServices = "medical_services"
        case membershipOrganizations = "membership_organizations"
        case mensAndBoysClothingAndAccessoriesStores = "mens_and_boys_clothing_and_accessories_stores"
        case mensWomensClothingStores = "mens_womens_clothing_stores"
        case metalServiceCenters = "metal_service_centers"
        case miscellaneous
        case miscellaneousApparelAndAccessoryShops = "miscellaneous_apparel_and_accessory_shops"
        case miscellaneousAutoDealers = "miscellaneous_auto_dealers"
        case miscellaneousBusinessServices = "miscellaneous_business_services"
        case miscellaneousFoodStores = "miscellaneous_food_stores"
        case miscellaneousGeneralMerchandise = "miscellaneous_general_merchandise"
        case miscellaneousGeneralServices = "miscellaneous_general_services"
        case miscellaneousHomeFurnishingSpecialtyStores = "miscellaneous_home_furnishing_specialty_stores"
        case miscellaneousPublishingAndPrinting = "miscellaneous_publishing_and_printing"
        case miscellaneousRecreationServices = "miscellaneous_recreation_services"
        case miscellaneousRepairShops = "miscellaneous_repair_shops"
        case miscellaneousSpecialtyRetail = "miscellaneous_specialty_retail"
        case mobileHomeDealers = "mobile_home_dealers"
        case motionPictureTheaters = "motion_picture_theaters"
        case motorFreightCarriersAndTrucking = "motor_freight_carriers_and_trucking"
        case motorHomesDealers = "motor_homes_dealers"
        case motorVehicleSuppliesAndNewParts = "motor_vehicle_supplies_and_new_parts"
        case motorcycleShopsAndDealers = "motorcycle_shops_and_dealers"
        case motorcycleShopsDealers = "motorcycle_shops_dealers"
        case musicStoresMusicalInstrumentsPianosAndSheetMusic = "music_stores_musical_instruments_pianos_and_sheet_music"
        case newsDealersAndNewsstands = "news_dealers_and_newsstands"
        case nonFiMoneyOrders = "non_fi_money_orders"
        case nonFiStoredValueCardPurchaseLoad = "non_fi_stored_value_card_purchase_load"
        case nondurableGoods = "nondurable_goods"
        case nurseriesLawnAndGardenSupplyStores = "nurseries_lawn_and_garden_supply_stores"
        case nursingPersonalCare = "nursing_personal_care"
        case officeAndCommercialFurniture = "office_and_commercial_furniture"
        case opticiansEyeglasses = "opticians_eyeglasses"
        case optometristsOphthalmologist = "optometrists_ophthalmologist"
        case orthopedicGoodsProstheticDevices = "orthopedic_goods_prosthetic_devices"
        case osteopaths
        case packageStoresBeerWineAndLiquor = "package_stores_beer_wine_and_liquor"
        case paintsVarnishesAndSupplies = "paints_varnishes_and_supplies"
        case parkingLotsGarages = "parking_lots_garages"
        case passengerRailways = "passenger_railways"
        case pawnShops = "pawn_shops"
        case petShopsPetFoodAndSupplies = "pet_shops_pet_food_and_supplies"
        case petroleumAndPetroleumProducts = "petroleum_and_petroleum_products"
        case photoDeveloping = "photo_developing"
        case photographicPhotocopyMicrofilmEquipmentAndSupplies = "photographic_photocopy_microfilm_equipment_and_supplies"
        case photographicStudios = "photographic_studios"
        case pictureVideoProduction = "picture_video_production"
        case pieceGoodsNotionsAndOtherDryGoods = "piece_goods_notions_and_other_dry_goods"
        case plumbingHeatingEquipmentAndSupplies = "plumbing_heating_equipment_and_supplies"
        case politicalOrganizations = "political_organizations"
        case postalServicesGovernmentOnly = "postal_services_government_only"
        case preciousStonesAndMetalsWatchesAndJewelry = "precious_stones_and_metals_watches_and_jewelry"
        case professionalServices = "professional_services"
        case publicWarehousingAndStorage = "public_warehousing_and_storage"
        case quickCopyReproAndBlueprint = "quick_copy_repro_and_blueprint"
        case railroads
        case realEstateAgentsAndManagersRentals = "real_estate_agents_and_managers_rentals"
        case recordStores = "record_stores"
        case recreationalVehicleRentals = "recreational_vehicle_rentals"
        case religiousGoodsStores = "religious_goods_stores"
        case religiousOrganizations = "religious_organizations"
        case roofingSidingSheetMetal = "roofing_siding_sheet_metal"
        case secretarialSupportServices = "secretarial_support_services"
        case securityBrokersDealers = "security_brokers_dealers"
        case serviceStations = "service_stations"
        case sewingNeedleworkFabricAndPieceGoodsStores = "sewing_needlework_fabric_and_piece_goods_stores"
        case shoeRepairHatCleaning = "shoe_repair_hat_cleaning"
        case shoeStores = "shoe_stores"
        case smallApplianceRepair = "small_appliance_repair"
        case snowmobileDealers = "snowmobile_dealers"
        case specialTradeServices = "special_trade_services"
        case specialtyCleaning = "specialty_cleaning"
        case sportingGoodsStores = "sporting_goods_stores"
        case sportingRecreationCamps = "sporting_recreation_camps"
        case sportsAndRidingApparelStores = "sports_and_riding_apparel_stores"
        case sportsClubsFields = "sports_clubs_fields"
        case stampAndCoinStores = "stamp_and_coin_stores"
        case stationaryOfficeSuppliesPrintingAndWritingPaper = "stationary_office_supplies_printing_and_writing_paper"
        case stationeryStoresOfficeAndSchoolSupplyStores = "stationery_stores_office_and_school_supply_stores"
        case swimmingPoolsSales = "swimming_pools_sales"
        case tUiTravelGermany = "t_ui_travel_germany"
        case tailorsAlterations = "tailors_alterations"
        case taxPaymentsGovernmentAgencies = "tax_payments_government_agencies"
        case taxPreparationServices = "tax_preparation_services"
        case taxicabsLimousines = "taxicabs_limousines"
        case telecommunicationEquipmentAndTelephoneSales = "telecommunication_equipment_and_telephone_sales"
        case telecommunicationServices = "telecommunication_services"
        case telegraphServices = "telegraph_services"
        case tentAndAwningShops = "tent_and_awning_shops"
        case testingLaboratories = "testing_laboratories"
        case theatricalTicketAgencies = "theatrical_ticket_agencies"
        case timeshares
        case tireRetreadingAndRepair = "tire_retreading_and_repair"
        case tollsBridgeFees = "tolls_bridge_fees"
        case touristAttractionsAndExhibits = "tourist_attractions_and_exhibits"
        case towingServices = "towing_services"
        case trailerParksCampgrounds = "trailer_parks_campgrounds"
        case transportationServices = "transportation_services"
        case travelAgenciesTourOperators = "travel_agencies_tour_operators"
        case truckStopIteration = "truck_stop_iteration"
        case truckUtilityTrailerRentals = "truck_utility_trailer_rentals"
        case typesettingPlateMakingAndRelatedServices = "typesetting_plate_making_and_related_services"
        case typewriterStores = "typewriter_stores"
        case uSFederalGovernmentAgenciesOrDepartments = "u_s_federal_government_agencies_or_departments"
        case uniformsCommercialClothing = "uniforms_commercial_clothing"
        case usedMerchandiseAndSecondhandStores = "used_merchandise_and_secondhand_stores"
        case utilities
        case varietyStores = "variety_stores"
        case veterinaryServices = "veterinary_services"
        case videoAmusementGameSupplies = "video_amusement_game_supplies"
        case videoGameArcades = "video_game_arcades"
        case videoTapeRentalStores = "video_tape_rental_stores"
        case vocationalTradeSchools = "vocational_trade_schools"
        case watchJewelryRepair = "watch_jewelry_repair"
        case weldingRepair = "welding_repair"
        case wholesaleClubs = "wholesale_clubs"
        case wigAndToupeeStores = "wig_and_toupee_stores"
        case wiresMoneyOrders = "wires_money_orders"
        case womensAccessoryAndSpecialtyShops = "womens_accessory_and_specialty_shops"
        case womensReadyToWearStores = "womens_ready_to_wear_stores"
        case wreckingAndSalvageYards = "wrecking_and_salvage_yards"
    }

    public enum BlockedCategory: String, Codable, CaseIterable {
        case acRefrigerationRepair = "ac_refrigeration_repair"
        case accountingBookkeepingServices = "accounting_bookkeeping_services"
        case advertisingServices = "advertising_services"
        case agriculturalCooperative = "agricultural_cooperative"
        case airlinesAirCarriers = "airlines_air_carriers"
        case airportsFlyingFields = "airports_flying_fields"
        case ambulanceServices = "ambulance_services"
        case amusementParksCarnivals = "amusement_parks_carnivals"
        case antiqueReproductions = "antique_reproductions"
        case antiqueShops = "antique_shops"
        case aquariums
        case architecturalSurveyingServices = "architectural_surveying_services"
        case artDealersAndGalleries = "art_dealers_and_galleries"
        case artistsSupplyAndCraftShops = "artists_supply_and_craft_shops"
        case autoAndHomeSupplyStores = "auto_and_home_supply_stores"
        case autoBodyRepairShops = "auto_body_repair_shops"
        case autoPaintShops = "auto_paint_shops"
        case autoServiceShops = "auto_service_shops"
        case automatedCashDisburse = "automated_cash_disburse"
        case automatedFuelDispensers = "automated_fuel_dispensers"
        case automobileAssociations = "automobile_associations"
        case automotivePartsAndAccessoriesStores = "automotive_parts_and_accessories_stores"
        case automotiveTireStores = "automotive_tire_stores"
        case bailAndBondPayments = "bail_and_bond_payments"
        case bakeries
        case bandsOrchestras = "bands_orchestras"
        case barberAndBeautyShops = "barber_and_beauty_shops"
        case bettingCasinoGambling = "betting_casino_gambling"
        case bicycleShops = "bicycle_shops"
        case billiardPoolEstablishments = "billiard_pool_establishments"
        case boatDealers = "boat_dealers"
        case boatRentalsAndLeases = "boat_rentals_and_leases"
        case bookStores = "book_stores"
        case booksPeriodicalsAndNewspapers = "books_periodicals_and_newspapers"
        case bowlingAlleys = "bowling_alleys"
        case busLines = "bus_lines"
        case businessSecretarialSchools = "business_secretarial_schools"
        case buyingShoppingServices = "buying_shopping_services"
        case cableSatelliteAndOtherPayTelevisionAndRadio = "cable_satellite_and_other_pay_television_and_radio"
        case cameraAndPhotographicSupplyStores = "camera_and_photographic_supply_stores"
        case candyNutAndConfectioneryStores = "candy_nut_and_confectionery_stores"
        case carAndTruckDealersNewUsed = "car_and_truck_dealers_new_used"
        case carAndTruckDealersUsedOnly = "car_and_truck_dealers_used_only"
        case carRentalAgencies = "car_rental_agencies"
        case carWashes = "car_washes"
        case carpentryServices = "carpentry_services"
        case carpetUpholsteryCleaning = "carpet_upholstery_cleaning"
        case caterers
        case charitableAndSocialServiceOrganizationsFundraising = "charitable_and_social_service_organizations_fundraising"
        case chemicalsAndAlliedProducts = "chemicals_and_allied_products"
        case childCareServices = "child_care_services"
        case childrensAndInfantsWearStores = "childrens_and_infants_wear_stores"
        case chiropodistsPodiatrists = "chiropodists_podiatrists"
        case chiropractors
        case cigarStoresAndStands = "cigar_stores_and_stands"
        case civicSocialFraternalAssociations = "civic_social_fraternal_associations"
        case cleaningAndMaintenance = "cleaning_and_maintenance"
        case clothingRental = "clothing_rental"
        case collegesUniversities = "colleges_universities"
        case commercialEquipment = "commercial_equipment"
        case commercialFootwear = "commercial_footwear"
        case commercialPhotographyArtAndGraphics = "commercial_photography_art_and_graphics"
        case commuterTransportAndFerries = "commuter_transport_and_ferries"
        case computerNetworkServices = "computer_network_services"
        case computerProgramming = "computer_programming"
        case computerRepair = "computer_repair"
        case computerSoftwareStores = "computer_software_stores"
        case computersPeripheralsAndSoftware = "computers_peripherals_and_software"
        case concreteWorkServices = "concrete_work_services"
        case constructionMaterials = "construction_materials"
        case consultingPublicRelations = "consulting_public_relations"
        case correspondenceSchools = "correspondence_schools"
        case cosmeticStores = "cosmetic_stores"
        case counselingServices = "counseling_services"
        case countryClubs = "country_clubs"
        case courierServices = "courier_services"
        case courtCosts = "court_costs"
        case creditReportingAgencies = "credit_reporting_agencies"
        case cruiseLines = "cruise_lines"
        case dairyProductsStores = "dairy_products_stores"
        case danceHallStudiosSchools = "dance_hall_studios_schools"
        case datingEscortServices = "dating_escort_services"
        case dentistsOrthodontists = "dentists_orthodontists"
        case departmentStores = "department_stores"
        case detectiveAgencies = "detective_agencies"
        case digitalGoodsApplications = "digital_goods_applications"
        case digitalGoodsGames = "digital_goods_games"
        case digitalGoodsLargeVolume = "digital_goods_large_volume"
        case digitalGoodsMedia = "digital_goods_media"
        case directMarketingCatalogMerchant = "direct_marketing_catalog_merchant"
        case directMarketingCombinationCatalogAndRetailMerchant = "direct_marketing_combination_catalog_and_retail_merchant"
        case directMarketingInboundTelemarketing = "direct_marketing_inbound_telemarketing"
        case directMarketingInsuranceServices = "direct_marketing_insurance_services"
        case directMarketingOther = "direct_marketing_other"
        case directMarketingOutboundTelemarketing = "direct_marketing_outbound_telemarketing"
        case directMarketingSubscription = "direct_marketing_subscription"
        case directMarketingTravel = "direct_marketing_travel"
        case discountStores = "discount_stores"
        case doctors
        case doorToDoorSales = "door_to_door_sales"
        case draperyWindowCoveringAndUpholsteryStores = "drapery_window_covering_and_upholstery_stores"
        case drinkingPlaces = "drinking_places"
        case drugStoresAndPharmacies = "drug_stores_and_pharmacies"
        case drugsDrugProprietariesAndDruggistSundries = "drugs_drug_proprietaries_and_druggist_sundries"
        case dryCleaners = "dry_cleaners"
        case durableGoods = "durable_goods"
        case dutyFreeStores = "duty_free_stores"
        case eatingPlacesRestaurants = "eating_places_restaurants"
        case educationalServices = "educational_services"
        case electricRazorStores = "electric_razor_stores"
        case electricalPartsAndEquipment = "electrical_parts_and_equipment"
        case electricalServices = "electrical_services"
        case electronicsRepairShops = "electronics_repair_shops"
        case electronicsStores = "electronics_stores"
        case elementarySecondarySchools = "elementary_secondary_schools"
        case employmentTempAgencies = "employment_temp_agencies"
        case equipmentRental = "equipment_rental"
        case exterminatingServices = "exterminating_services"
        case familyClothingStores = "family_clothing_stores"
        case fastFoodRestaurants = "fast_food_restaurants"
        case financialInstitutions = "financial_institutions"
        case finesGovernmentAdministrativeEntities = "fines_government_administrative_entities"
        case fireplaceFireplaceScreensAndAccessoriesStores = "fireplace_fireplace_screens_and_accessories_stores"
        case floorCoveringStores = "floor_covering_stores"
        case florists
        case floristsSuppliesNurseryStockAndFlowers = "florists_supplies_nursery_stock_and_flowers"
        case freezerAndLockerMeatProvisioners = "freezer_and_locker_meat_provisioners"
        case fuelDealersNonAutomotive = "fuel_dealers_non_automotive"
        case funeralServicesCrematories = "funeral_services_crematories"
        case furnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = "furniture_home_furnishings_and_equipment_stores_except_appliances"
        case furnitureRepairRefinishing = "furniture_repair_refinishing"
        case furriersAndFurShops = "furriers_and_fur_shops"
        case generalServices = "general_services"
        case giftCardNoveltyAndSouvenirShops = "gift_card_novelty_and_souvenir_shops"
        case glassPaintAndWallpaperStores = "glass_paint_and_wallpaper_stores"
        case glasswareCrystalStores = "glassware_crystal_stores"
        case golfCoursesPublic = "golf_courses_public"
        case governmentServices = "government_services"
        case groceryStoresSupermarkets = "grocery_stores_supermarkets"
        case hardwareEquipmentAndSupplies = "hardware_equipment_and_supplies"
        case hardwareStores = "hardware_stores"
        case healthAndBeautySpas = "health_and_beauty_spas"
        case hearingAidsSalesAndSupplies = "hearing_aids_sales_and_supplies"
        case heatingPlumbingAC = "heating_plumbing_a_c"
        case hobbyToyAndGameShops = "hobby_toy_and_game_shops"
        case homeSupplyWarehouseStores = "home_supply_warehouse_stores"
        case hospitals
        case hotelsMotelsAndResorts = "hotels_motels_and_resorts"
        case householdApplianceStores = "household_appliance_stores"
        case industrialSupplies = "industrial_supplies"
        case informationRetrievalServices = "information_retrieval_services"
        case insuranceDefault = "insurance_default"
        case insuranceUnderwritingPremiums = "insurance_underwriting_premiums"
        case intraCompanyPurchases = "intra_company_purchases"
        case jewelryStoresWatchesClocksAndSilverwareStores = "jewelry_stores_watches_clocks_and_silverware_stores"
        case landscapingServices = "landscaping_services"
        case laundries
        case laundryCleaningServices = "laundry_cleaning_services"
        case legalServicesAttorneys = "legal_services_attorneys"
        case luggageAndLeatherGoodsStores = "luggage_and_leather_goods_stores"
        case lumberBuildingMaterialsStores = "lumber_building_materials_stores"
        case manualCashDisburse = "manual_cash_disburse"
        case marinasServiceAndSupplies = "marinas_service_and_supplies"
        case masonryStoneworkAndPlaster = "masonry_stonework_and_plaster"
        case massageParlors = "massage_parlors"
        case medicalAndDentalLabs = "medical_and_dental_labs"
        case medicalDentalOphthalmicAndHospitalEquipmentAndSupplies = "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
        case medicalServices = "medical_services"
        case membershipOrganizations = "membership_organizations"
        case mensAndBoysClothingAndAccessoriesStores = "mens_and_boys_clothing_and_accessories_stores"
        case mensWomensClothingStores = "mens_womens_clothing_stores"
        case metalServiceCenters = "metal_service_centers"
        case miscellaneous
        case miscellaneousApparelAndAccessoryShops = "miscellaneous_apparel_and_accessory_shops"
        case miscellaneousAutoDealers = "miscellaneous_auto_dealers"
        case miscellaneousBusinessServices = "miscellaneous_business_services"
        case miscellaneousFoodStores = "miscellaneous_food_stores"
        case miscellaneousGeneralMerchandise = "miscellaneous_general_merchandise"
        case miscellaneousGeneralServices = "miscellaneous_general_services"
        case miscellaneousHomeFurnishingSpecialtyStores = "miscellaneous_home_furnishing_specialty_stores"
        case miscellaneousPublishingAndPrinting = "miscellaneous_publishing_and_printing"
        case miscellaneousRecreationServices = "miscellaneous_recreation_services"
        case miscellaneousRepairShops = "miscellaneous_repair_shops"
        case miscellaneousSpecialtyRetail = "miscellaneous_specialty_retail"
        case mobileHomeDealers = "mobile_home_dealers"
        case motionPictureTheaters = "motion_picture_theaters"
        case motorFreightCarriersAndTrucking = "motor_freight_carriers_and_trucking"
        case motorHomesDealers = "motor_homes_dealers"
        case motorVehicleSuppliesAndNewParts = "motor_vehicle_supplies_and_new_parts"
        case motorcycleShopsAndDealers = "motorcycle_shops_and_dealers"
        case motorcycleShopsDealers = "motorcycle_shops_dealers"
        case musicStoresMusicalInstrumentsPianosAndSheetMusic = "music_stores_musical_instruments_pianos_and_sheet_music"
        case newsDealersAndNewsstands = "news_dealers_and_newsstands"
        case nonFiMoneyOrders = "non_fi_money_orders"
        case nonFiStoredValueCardPurchaseLoad = "non_fi_stored_value_card_purchase_load"
        case nondurableGoods = "nondurable_goods"
        case nurseriesLawnAndGardenSupplyStores = "nurseries_lawn_and_garden_supply_stores"
        case nursingPersonalCare = "nursing_personal_care"
        case officeAndCommercialFurniture = "office_and_commercial_furniture"
        case opticiansEyeglasses = "opticians_eyeglasses"
        case optometristsOphthalmologist = "optometrists_ophthalmologist"
        case orthopedicGoodsProstheticDevices = "orthopedic_goods_prosthetic_devices"
        case osteopaths
        case packageStoresBeerWineAndLiquor = "package_stores_beer_wine_and_liquor"
        case paintsVarnishesAndSupplies = "paints_varnishes_and_supplies"
        case parkingLotsGarages = "parking_lots_garages"
        case passengerRailways = "passenger_railways"
        case pawnShops = "pawn_shops"
        case petShopsPetFoodAndSupplies = "pet_shops_pet_food_and_supplies"
        case petroleumAndPetroleumProducts = "petroleum_and_petroleum_products"
        case photoDeveloping = "photo_developing"
        case photographicPhotocopyMicrofilmEquipmentAndSupplies = "photographic_photocopy_microfilm_equipment_and_supplies"
        case photographicStudios = "photographic_studios"
        case pictureVideoProduction = "picture_video_production"
        case pieceGoodsNotionsAndOtherDryGoods = "piece_goods_notions_and_other_dry_goods"
        case plumbingHeatingEquipmentAndSupplies = "plumbing_heating_equipment_and_supplies"
        case politicalOrganizations = "political_organizations"
        case postalServicesGovernmentOnly = "postal_services_government_only"
        case preciousStonesAndMetalsWatchesAndJewelry = "precious_stones_and_metals_watches_and_jewelry"
        case professionalServices = "professional_services"
        case publicWarehousingAndStorage = "public_warehousing_and_storage"
        case quickCopyReproAndBlueprint = "quick_copy_repro_and_blueprint"
        case railroads
        case realEstateAgentsAndManagersRentals = "real_estate_agents_and_managers_rentals"
        case recordStores = "record_stores"
        case recreationalVehicleRentals = "recreational_vehicle_rentals"
        case religiousGoodsStores = "religious_goods_stores"
        case religiousOrganizations = "religious_organizations"
        case roofingSidingSheetMetal = "roofing_siding_sheet_metal"
        case secretarialSupportServices = "secretarial_support_services"
        case securityBrokersDealers = "security_brokers_dealers"
        case serviceStations = "service_stations"
        case sewingNeedleworkFabricAndPieceGoodsStores = "sewing_needlework_fabric_and_piece_goods_stores"
        case shoeRepairHatCleaning = "shoe_repair_hat_cleaning"
        case shoeStores = "shoe_stores"
        case smallApplianceRepair = "small_appliance_repair"
        case snowmobileDealers = "snowmobile_dealers"
        case specialTradeServices = "special_trade_services"
        case specialtyCleaning = "specialty_cleaning"
        case sportingGoodsStores = "sporting_goods_stores"
        case sportingRecreationCamps = "sporting_recreation_camps"
        case sportsAndRidingApparelStores = "sports_and_riding_apparel_stores"
        case sportsClubsFields = "sports_clubs_fields"
        case stampAndCoinStores = "stamp_and_coin_stores"
        case stationaryOfficeSuppliesPrintingAndWritingPaper = "stationary_office_supplies_printing_and_writing_paper"
        case stationeryStoresOfficeAndSchoolSupplyStores = "stationery_stores_office_and_school_supply_stores"
        case swimmingPoolsSales = "swimming_pools_sales"
        case tUiTravelGermany = "t_ui_travel_germany"
        case tailorsAlterations = "tailors_alterations"
        case taxPaymentsGovernmentAgencies = "tax_payments_government_agencies"
        case taxPreparationServices = "tax_preparation_services"
        case taxicabsLimousines = "taxicabs_limousines"
        case telecommunicationEquipmentAndTelephoneSales = "telecommunication_equipment_and_telephone_sales"
        case telecommunicationServices = "telecommunication_services"
        case telegraphServices = "telegraph_services"
        case tentAndAwningShops = "tent_and_awning_shops"
        case testingLaboratories = "testing_laboratories"
        case theatricalTicketAgencies = "theatrical_ticket_agencies"
        case timeshares
        case tireRetreadingAndRepair = "tire_retreading_and_repair"
        case tollsBridgeFees = "tolls_bridge_fees"
        case touristAttractionsAndExhibits = "tourist_attractions_and_exhibits"
        case towingServices = "towing_services"
        case trailerParksCampgrounds = "trailer_parks_campgrounds"
        case transportationServices = "transportation_services"
        case travelAgenciesTourOperators = "travel_agencies_tour_operators"
        case truckStopIteration = "truck_stop_iteration"
        case truckUtilityTrailerRentals = "truck_utility_trailer_rentals"
        case typesettingPlateMakingAndRelatedServices = "typesetting_plate_making_and_related_services"
        case typewriterStores = "typewriter_stores"
        case uSFederalGovernmentAgenciesOrDepartments = "u_s_federal_government_agencies_or_departments"
        case uniformsCommercialClothing = "uniforms_commercial_clothing"
        case usedMerchandiseAndSecondhandStores = "used_merchandise_and_secondhand_stores"
        case utilities
        case varietyStores = "variety_stores"
        case veterinaryServices = "veterinary_services"
        case videoAmusementGameSupplies = "video_amusement_game_supplies"
        case videoGameArcades = "video_game_arcades"
        case videoTapeRentalStores = "video_tape_rental_stores"
        case vocationalTradeSchools = "vocational_trade_schools"
        case watchJewelryRepair = "watch_jewelry_repair"
        case weldingRepair = "welding_repair"
        case wholesaleClubs = "wholesale_clubs"
        case wigAndToupeeStores = "wig_and_toupee_stores"
        case wiresMoneyOrders = "wires_money_orders"
        case womensAccessoryAndSpecialtyShops = "womens_accessory_and_specialty_shops"
        case womensReadyToWearStores = "womens_ready_to_wear_stores"
        case wreckingAndSalvageYards = "wrecking_and_salvage_yards"
    }

    public init(allowedCategories: [AllowedCategory]? = nil, blockedCategories: [BlockedCategory]? = nil, spendingLimits: [IssuingCardholderSpendingLimit]? = nil, spendingLimitsCurrency: String? = nil) {
        self.allowedCategories = allowedCategories
        self.blockedCategories = blockedCategories
        self.spendingLimits = spendingLimits
        self.spendingLimitsCurrency = spendingLimitsCurrency
    }

    private enum CodingKeys: String, CodingKey {
        case allowedCategories = "allowed_categories"
        case blockedCategories = "blocked_categories"
        case spendingLimits = "spending_limits"
        case spendingLimitsCurrency = "spending_limits_currency"
    }
}

public struct IssuingCardholderCompany: Codable {
    /// Whether the company's business ID number was provided.
    public var isTaxIDProvided: Bool

    public init(isTaxIDProvided: Bool) {
        self.isTaxIDProvided = isTaxIDProvided
    }

    private enum CodingKeys: String, CodingKey {
        case isTaxIDProvided = "tax_id_provided"
    }
}

public struct IssuingCardholderIDDocument: Codable {
    /// The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
    public var back: Back?
    /// The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
    public var front: Front?

    /// The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
    public struct Back: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    /// The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
    public struct Front: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    public init(back: Back? = nil, front: Front? = nil) {
        self.back = back
        self.front = front
    }
}

public struct IssuingCardholderIndividual: Codable {
    /// The date of birth of this cardholder.
    public var dob: Dob?
    /// The first name of this cardholder.
    public var firstName: String
    /// The last name of this cardholder.
    public var lastName: String
    /// Government-issued ID document for this cardholder.
    public var verification: Verification?

    /// The date of birth of this cardholder.
    public struct Dob: Codable {
        public var issuingCardholderIndividualDob: IssuingCardholderIndividualDob?

        public init(issuingCardholderIndividualDob: IssuingCardholderIndividualDob? = nil) {
            self.issuingCardholderIndividualDob = issuingCardholderIndividualDob
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.issuingCardholderIndividualDob = try? container.decode(IssuingCardholderIndividualDob.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = issuingCardholderIndividualDob { try container.encode(value) }
        }
    }

    /// Government-issued ID document for this cardholder.
    public struct Verification: Codable {
        public var issuingCardholderVerification: IssuingCardholderVerification?

        public init(issuingCardholderVerification: IssuingCardholderVerification? = nil) {
            self.issuingCardholderVerification = issuingCardholderVerification
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.issuingCardholderVerification = try? container.decode(IssuingCardholderVerification.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = issuingCardholderVerification { try container.encode(value) }
        }
    }

    public init(dob: Dob? = nil, firstName: String, lastName: String, verification: Verification? = nil) {
        self.dob = dob
        self.firstName = firstName
        self.lastName = lastName
        self.verification = verification
    }

    private enum CodingKeys: String, CodingKey {
        case dob
        case firstName = "first_name"
        case lastName = "last_name"
        case verification
    }
}

public struct IssuingCardholderIndividualDob: Codable {
    /// The day of birth, between 1 and 31.
    public var day: Int?
    /// The month of birth, between 1 and 12.
    public var month: Int?
    /// The four-digit year of birth.
    public var year: Int?

    public init(day: Int? = nil, month: Int? = nil, year: Int? = nil) {
        self.day = day
        self.month = month
        self.year = year
    }
}

public struct IssuingCardholderRequirements: Codable {
    /// If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason.
    public var disabledReason: DisabledReason?
    /// Array of fields that need to be collected in order to verify and re-enable the cardholder.
    public var pastDue: [PastDueItem]?

    /// If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason.
    public enum DisabledReason: String, Codable, CaseIterable {
        case listed
        case rejectedListed = "rejected.listed"
        case underReview = "under_review"
    }

    public enum PastDueItem: String, Codable, CaseIterable {
        case companyTaxID = "company.tax_id"
        case individualDobDay = "individual.dob.day"
        case individualDobMonth = "individual.dob.month"
        case individualDobYear = "individual.dob.year"
        case individualFirstName = "individual.first_name"
        case individualLastName = "individual.last_name"
        case individualVerificationDocument = "individual.verification.document"
    }

    public init(disabledReason: DisabledReason? = nil, pastDue: [PastDueItem]? = nil) {
        self.disabledReason = disabledReason
        self.pastDue = pastDue
    }

    private enum CodingKeys: String, CodingKey {
        case disabledReason = "disabled_reason"
        case pastDue = "past_due"
    }
}

public struct IssuingCardholderSpendingLimit: Codable {
    /// Maximum amount allowed to spend per interval.
    public var amount: Int
    /// Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories.
    public var categories: [Category]?
    /// Interval (or event) to which the amount applies.
    public var interval: Interval

    public enum Category: String, Codable, CaseIterable {
        case acRefrigerationRepair = "ac_refrigeration_repair"
        case accountingBookkeepingServices = "accounting_bookkeeping_services"
        case advertisingServices = "advertising_services"
        case agriculturalCooperative = "agricultural_cooperative"
        case airlinesAirCarriers = "airlines_air_carriers"
        case airportsFlyingFields = "airports_flying_fields"
        case ambulanceServices = "ambulance_services"
        case amusementParksCarnivals = "amusement_parks_carnivals"
        case antiqueReproductions = "antique_reproductions"
        case antiqueShops = "antique_shops"
        case aquariums
        case architecturalSurveyingServices = "architectural_surveying_services"
        case artDealersAndGalleries = "art_dealers_and_galleries"
        case artistsSupplyAndCraftShops = "artists_supply_and_craft_shops"
        case autoAndHomeSupplyStores = "auto_and_home_supply_stores"
        case autoBodyRepairShops = "auto_body_repair_shops"
        case autoPaintShops = "auto_paint_shops"
        case autoServiceShops = "auto_service_shops"
        case automatedCashDisburse = "automated_cash_disburse"
        case automatedFuelDispensers = "automated_fuel_dispensers"
        case automobileAssociations = "automobile_associations"
        case automotivePartsAndAccessoriesStores = "automotive_parts_and_accessories_stores"
        case automotiveTireStores = "automotive_tire_stores"
        case bailAndBondPayments = "bail_and_bond_payments"
        case bakeries
        case bandsOrchestras = "bands_orchestras"
        case barberAndBeautyShops = "barber_and_beauty_shops"
        case bettingCasinoGambling = "betting_casino_gambling"
        case bicycleShops = "bicycle_shops"
        case billiardPoolEstablishments = "billiard_pool_establishments"
        case boatDealers = "boat_dealers"
        case boatRentalsAndLeases = "boat_rentals_and_leases"
        case bookStores = "book_stores"
        case booksPeriodicalsAndNewspapers = "books_periodicals_and_newspapers"
        case bowlingAlleys = "bowling_alleys"
        case busLines = "bus_lines"
        case businessSecretarialSchools = "business_secretarial_schools"
        case buyingShoppingServices = "buying_shopping_services"
        case cableSatelliteAndOtherPayTelevisionAndRadio = "cable_satellite_and_other_pay_television_and_radio"
        case cameraAndPhotographicSupplyStores = "camera_and_photographic_supply_stores"
        case candyNutAndConfectioneryStores = "candy_nut_and_confectionery_stores"
        case carAndTruckDealersNewUsed = "car_and_truck_dealers_new_used"
        case carAndTruckDealersUsedOnly = "car_and_truck_dealers_used_only"
        case carRentalAgencies = "car_rental_agencies"
        case carWashes = "car_washes"
        case carpentryServices = "carpentry_services"
        case carpetUpholsteryCleaning = "carpet_upholstery_cleaning"
        case caterers
        case charitableAndSocialServiceOrganizationsFundraising = "charitable_and_social_service_organizations_fundraising"
        case chemicalsAndAlliedProducts = "chemicals_and_allied_products"
        case childCareServices = "child_care_services"
        case childrensAndInfantsWearStores = "childrens_and_infants_wear_stores"
        case chiropodistsPodiatrists = "chiropodists_podiatrists"
        case chiropractors
        case cigarStoresAndStands = "cigar_stores_and_stands"
        case civicSocialFraternalAssociations = "civic_social_fraternal_associations"
        case cleaningAndMaintenance = "cleaning_and_maintenance"
        case clothingRental = "clothing_rental"
        case collegesUniversities = "colleges_universities"
        case commercialEquipment = "commercial_equipment"
        case commercialFootwear = "commercial_footwear"
        case commercialPhotographyArtAndGraphics = "commercial_photography_art_and_graphics"
        case commuterTransportAndFerries = "commuter_transport_and_ferries"
        case computerNetworkServices = "computer_network_services"
        case computerProgramming = "computer_programming"
        case computerRepair = "computer_repair"
        case computerSoftwareStores = "computer_software_stores"
        case computersPeripheralsAndSoftware = "computers_peripherals_and_software"
        case concreteWorkServices = "concrete_work_services"
        case constructionMaterials = "construction_materials"
        case consultingPublicRelations = "consulting_public_relations"
        case correspondenceSchools = "correspondence_schools"
        case cosmeticStores = "cosmetic_stores"
        case counselingServices = "counseling_services"
        case countryClubs = "country_clubs"
        case courierServices = "courier_services"
        case courtCosts = "court_costs"
        case creditReportingAgencies = "credit_reporting_agencies"
        case cruiseLines = "cruise_lines"
        case dairyProductsStores = "dairy_products_stores"
        case danceHallStudiosSchools = "dance_hall_studios_schools"
        case datingEscortServices = "dating_escort_services"
        case dentistsOrthodontists = "dentists_orthodontists"
        case departmentStores = "department_stores"
        case detectiveAgencies = "detective_agencies"
        case digitalGoodsApplications = "digital_goods_applications"
        case digitalGoodsGames = "digital_goods_games"
        case digitalGoodsLargeVolume = "digital_goods_large_volume"
        case digitalGoodsMedia = "digital_goods_media"
        case directMarketingCatalogMerchant = "direct_marketing_catalog_merchant"
        case directMarketingCombinationCatalogAndRetailMerchant = "direct_marketing_combination_catalog_and_retail_merchant"
        case directMarketingInboundTelemarketing = "direct_marketing_inbound_telemarketing"
        case directMarketingInsuranceServices = "direct_marketing_insurance_services"
        case directMarketingOther = "direct_marketing_other"
        case directMarketingOutboundTelemarketing = "direct_marketing_outbound_telemarketing"
        case directMarketingSubscription = "direct_marketing_subscription"
        case directMarketingTravel = "direct_marketing_travel"
        case discountStores = "discount_stores"
        case doctors
        case doorToDoorSales = "door_to_door_sales"
        case draperyWindowCoveringAndUpholsteryStores = "drapery_window_covering_and_upholstery_stores"
        case drinkingPlaces = "drinking_places"
        case drugStoresAndPharmacies = "drug_stores_and_pharmacies"
        case drugsDrugProprietariesAndDruggistSundries = "drugs_drug_proprietaries_and_druggist_sundries"
        case dryCleaners = "dry_cleaners"
        case durableGoods = "durable_goods"
        case dutyFreeStores = "duty_free_stores"
        case eatingPlacesRestaurants = "eating_places_restaurants"
        case educationalServices = "educational_services"
        case electricRazorStores = "electric_razor_stores"
        case electricalPartsAndEquipment = "electrical_parts_and_equipment"
        case electricalServices = "electrical_services"
        case electronicsRepairShops = "electronics_repair_shops"
        case electronicsStores = "electronics_stores"
        case elementarySecondarySchools = "elementary_secondary_schools"
        case employmentTempAgencies = "employment_temp_agencies"
        case equipmentRental = "equipment_rental"
        case exterminatingServices = "exterminating_services"
        case familyClothingStores = "family_clothing_stores"
        case fastFoodRestaurants = "fast_food_restaurants"
        case financialInstitutions = "financial_institutions"
        case finesGovernmentAdministrativeEntities = "fines_government_administrative_entities"
        case fireplaceFireplaceScreensAndAccessoriesStores = "fireplace_fireplace_screens_and_accessories_stores"
        case floorCoveringStores = "floor_covering_stores"
        case florists
        case floristsSuppliesNurseryStockAndFlowers = "florists_supplies_nursery_stock_and_flowers"
        case freezerAndLockerMeatProvisioners = "freezer_and_locker_meat_provisioners"
        case fuelDealersNonAutomotive = "fuel_dealers_non_automotive"
        case funeralServicesCrematories = "funeral_services_crematories"
        case furnitureHomeFurnishingsAndEquipmentStoresExceptAppliances = "furniture_home_furnishings_and_equipment_stores_except_appliances"
        case furnitureRepairRefinishing = "furniture_repair_refinishing"
        case furriersAndFurShops = "furriers_and_fur_shops"
        case generalServices = "general_services"
        case giftCardNoveltyAndSouvenirShops = "gift_card_novelty_and_souvenir_shops"
        case glassPaintAndWallpaperStores = "glass_paint_and_wallpaper_stores"
        case glasswareCrystalStores = "glassware_crystal_stores"
        case golfCoursesPublic = "golf_courses_public"
        case governmentServices = "government_services"
        case groceryStoresSupermarkets = "grocery_stores_supermarkets"
        case hardwareEquipmentAndSupplies = "hardware_equipment_and_supplies"
        case hardwareStores = "hardware_stores"
        case healthAndBeautySpas = "health_and_beauty_spas"
        case hearingAidsSalesAndSupplies = "hearing_aids_sales_and_supplies"
        case heatingPlumbingAC = "heating_plumbing_a_c"
        case hobbyToyAndGameShops = "hobby_toy_and_game_shops"
        case homeSupplyWarehouseStores = "home_supply_warehouse_stores"
        case hospitals
        case hotelsMotelsAndResorts = "hotels_motels_and_resorts"
        case householdApplianceStores = "household_appliance_stores"
        case industrialSupplies = "industrial_supplies"
        case informationRetrievalServices = "information_retrieval_services"
        case insuranceDefault = "insurance_default"
        case insuranceUnderwritingPremiums = "insurance_underwriting_premiums"
        case intraCompanyPurchases = "intra_company_purchases"
        case jewelryStoresWatchesClocksAndSilverwareStores = "jewelry_stores_watches_clocks_and_silverware_stores"
        case landscapingServices = "landscaping_services"
        case laundries
        case laundryCleaningServices = "laundry_cleaning_services"
        case legalServicesAttorneys = "legal_services_attorneys"
        case luggageAndLeatherGoodsStores = "luggage_and_leather_goods_stores"
        case lumberBuildingMaterialsStores = "lumber_building_materials_stores"
        case manualCashDisburse = "manual_cash_disburse"
        case marinasServiceAndSupplies = "marinas_service_and_supplies"
        case masonryStoneworkAndPlaster = "masonry_stonework_and_plaster"
        case massageParlors = "massage_parlors"
        case medicalAndDentalLabs = "medical_and_dental_labs"
        case medicalDentalOphthalmicAndHospitalEquipmentAndSupplies = "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
        case medicalServices = "medical_services"
        case membershipOrganizations = "membership_organizations"
        case mensAndBoysClothingAndAccessoriesStores = "mens_and_boys_clothing_and_accessories_stores"
        case mensWomensClothingStores = "mens_womens_clothing_stores"
        case metalServiceCenters = "metal_service_centers"
        case miscellaneous
        case miscellaneousApparelAndAccessoryShops = "miscellaneous_apparel_and_accessory_shops"
        case miscellaneousAutoDealers = "miscellaneous_auto_dealers"
        case miscellaneousBusinessServices = "miscellaneous_business_services"
        case miscellaneousFoodStores = "miscellaneous_food_stores"
        case miscellaneousGeneralMerchandise = "miscellaneous_general_merchandise"
        case miscellaneousGeneralServices = "miscellaneous_general_services"
        case miscellaneousHomeFurnishingSpecialtyStores = "miscellaneous_home_furnishing_specialty_stores"
        case miscellaneousPublishingAndPrinting = "miscellaneous_publishing_and_printing"
        case miscellaneousRecreationServices = "miscellaneous_recreation_services"
        case miscellaneousRepairShops = "miscellaneous_repair_shops"
        case miscellaneousSpecialtyRetail = "miscellaneous_specialty_retail"
        case mobileHomeDealers = "mobile_home_dealers"
        case motionPictureTheaters = "motion_picture_theaters"
        case motorFreightCarriersAndTrucking = "motor_freight_carriers_and_trucking"
        case motorHomesDealers = "motor_homes_dealers"
        case motorVehicleSuppliesAndNewParts = "motor_vehicle_supplies_and_new_parts"
        case motorcycleShopsAndDealers = "motorcycle_shops_and_dealers"
        case motorcycleShopsDealers = "motorcycle_shops_dealers"
        case musicStoresMusicalInstrumentsPianosAndSheetMusic = "music_stores_musical_instruments_pianos_and_sheet_music"
        case newsDealersAndNewsstands = "news_dealers_and_newsstands"
        case nonFiMoneyOrders = "non_fi_money_orders"
        case nonFiStoredValueCardPurchaseLoad = "non_fi_stored_value_card_purchase_load"
        case nondurableGoods = "nondurable_goods"
        case nurseriesLawnAndGardenSupplyStores = "nurseries_lawn_and_garden_supply_stores"
        case nursingPersonalCare = "nursing_personal_care"
        case officeAndCommercialFurniture = "office_and_commercial_furniture"
        case opticiansEyeglasses = "opticians_eyeglasses"
        case optometristsOphthalmologist = "optometrists_ophthalmologist"
        case orthopedicGoodsProstheticDevices = "orthopedic_goods_prosthetic_devices"
        case osteopaths
        case packageStoresBeerWineAndLiquor = "package_stores_beer_wine_and_liquor"
        case paintsVarnishesAndSupplies = "paints_varnishes_and_supplies"
        case parkingLotsGarages = "parking_lots_garages"
        case passengerRailways = "passenger_railways"
        case pawnShops = "pawn_shops"
        case petShopsPetFoodAndSupplies = "pet_shops_pet_food_and_supplies"
        case petroleumAndPetroleumProducts = "petroleum_and_petroleum_products"
        case photoDeveloping = "photo_developing"
        case photographicPhotocopyMicrofilmEquipmentAndSupplies = "photographic_photocopy_microfilm_equipment_and_supplies"
        case photographicStudios = "photographic_studios"
        case pictureVideoProduction = "picture_video_production"
        case pieceGoodsNotionsAndOtherDryGoods = "piece_goods_notions_and_other_dry_goods"
        case plumbingHeatingEquipmentAndSupplies = "plumbing_heating_equipment_and_supplies"
        case politicalOrganizations = "political_organizations"
        case postalServicesGovernmentOnly = "postal_services_government_only"
        case preciousStonesAndMetalsWatchesAndJewelry = "precious_stones_and_metals_watches_and_jewelry"
        case professionalServices = "professional_services"
        case publicWarehousingAndStorage = "public_warehousing_and_storage"
        case quickCopyReproAndBlueprint = "quick_copy_repro_and_blueprint"
        case railroads
        case realEstateAgentsAndManagersRentals = "real_estate_agents_and_managers_rentals"
        case recordStores = "record_stores"
        case recreationalVehicleRentals = "recreational_vehicle_rentals"
        case religiousGoodsStores = "religious_goods_stores"
        case religiousOrganizations = "religious_organizations"
        case roofingSidingSheetMetal = "roofing_siding_sheet_metal"
        case secretarialSupportServices = "secretarial_support_services"
        case securityBrokersDealers = "security_brokers_dealers"
        case serviceStations = "service_stations"
        case sewingNeedleworkFabricAndPieceGoodsStores = "sewing_needlework_fabric_and_piece_goods_stores"
        case shoeRepairHatCleaning = "shoe_repair_hat_cleaning"
        case shoeStores = "shoe_stores"
        case smallApplianceRepair = "small_appliance_repair"
        case snowmobileDealers = "snowmobile_dealers"
        case specialTradeServices = "special_trade_services"
        case specialtyCleaning = "specialty_cleaning"
        case sportingGoodsStores = "sporting_goods_stores"
        case sportingRecreationCamps = "sporting_recreation_camps"
        case sportsAndRidingApparelStores = "sports_and_riding_apparel_stores"
        case sportsClubsFields = "sports_clubs_fields"
        case stampAndCoinStores = "stamp_and_coin_stores"
        case stationaryOfficeSuppliesPrintingAndWritingPaper = "stationary_office_supplies_printing_and_writing_paper"
        case stationeryStoresOfficeAndSchoolSupplyStores = "stationery_stores_office_and_school_supply_stores"
        case swimmingPoolsSales = "swimming_pools_sales"
        case tUiTravelGermany = "t_ui_travel_germany"
        case tailorsAlterations = "tailors_alterations"
        case taxPaymentsGovernmentAgencies = "tax_payments_government_agencies"
        case taxPreparationServices = "tax_preparation_services"
        case taxicabsLimousines = "taxicabs_limousines"
        case telecommunicationEquipmentAndTelephoneSales = "telecommunication_equipment_and_telephone_sales"
        case telecommunicationServices = "telecommunication_services"
        case telegraphServices = "telegraph_services"
        case tentAndAwningShops = "tent_and_awning_shops"
        case testingLaboratories = "testing_laboratories"
        case theatricalTicketAgencies = "theatrical_ticket_agencies"
        case timeshares
        case tireRetreadingAndRepair = "tire_retreading_and_repair"
        case tollsBridgeFees = "tolls_bridge_fees"
        case touristAttractionsAndExhibits = "tourist_attractions_and_exhibits"
        case towingServices = "towing_services"
        case trailerParksCampgrounds = "trailer_parks_campgrounds"
        case transportationServices = "transportation_services"
        case travelAgenciesTourOperators = "travel_agencies_tour_operators"
        case truckStopIteration = "truck_stop_iteration"
        case truckUtilityTrailerRentals = "truck_utility_trailer_rentals"
        case typesettingPlateMakingAndRelatedServices = "typesetting_plate_making_and_related_services"
        case typewriterStores = "typewriter_stores"
        case uSFederalGovernmentAgenciesOrDepartments = "u_s_federal_government_agencies_or_departments"
        case uniformsCommercialClothing = "uniforms_commercial_clothing"
        case usedMerchandiseAndSecondhandStores = "used_merchandise_and_secondhand_stores"
        case utilities
        case varietyStores = "variety_stores"
        case veterinaryServices = "veterinary_services"
        case videoAmusementGameSupplies = "video_amusement_game_supplies"
        case videoGameArcades = "video_game_arcades"
        case videoTapeRentalStores = "video_tape_rental_stores"
        case vocationalTradeSchools = "vocational_trade_schools"
        case watchJewelryRepair = "watch_jewelry_repair"
        case weldingRepair = "welding_repair"
        case wholesaleClubs = "wholesale_clubs"
        case wigAndToupeeStores = "wig_and_toupee_stores"
        case wiresMoneyOrders = "wires_money_orders"
        case womensAccessoryAndSpecialtyShops = "womens_accessory_and_specialty_shops"
        case womensReadyToWearStores = "womens_ready_to_wear_stores"
        case wreckingAndSalvageYards = "wrecking_and_salvage_yards"
    }

    /// Interval (or event) to which the amount applies.
    public enum Interval: String, Codable, CaseIterable {
        case allTime = "all_time"
        case daily
        case monthly
        case perAuthorization = "per_authorization"
        case weekly
        case yearly
    }

    public init(amount: Int, categories: [Category]? = nil, interval: Interval) {
        self.amount = amount
        self.categories = categories
        self.interval = interval
    }
}

public struct IssuingCardholderVerification: Codable {
    /// An identifying document, either a passport or local ID card.
    public var document: Document?

    /// An identifying document, either a passport or local ID card.
    public struct Document: Codable {
        public var issuingCardholderIDDocument: IssuingCardholderIDDocument?

        public init(issuingCardholderIDDocument: IssuingCardholderIDDocument? = nil) {
            self.issuingCardholderIDDocument = issuingCardholderIDDocument
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.issuingCardholderIDDocument = try? container.decode(IssuingCardholderIDDocument.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = issuingCardholderIDDocument { try container.encode(value) }
        }
    }

    public init(document: Document? = nil) {
        self.document = document
    }
}

public struct IssuingDisputeCanceledEvidence: Codable {
    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
    public var additionalDocumentation: AdditionalDocumentation?
    /// Date when order was canceled.
    public var canceledAt: Int?
    /// Whether the cardholder was provided with a cancellation policy.
    public var isCancellationPolicyProvided: Bool?
    /// Reason for canceling the order.
    public var cancellationReason: String?
    /// Date when the cardholder expected to receive the product.
    public var expectedAt: Int?
    /// Explanation of why the cardholder is disputing this transaction.
    public var explanation: String?
    /// Description of the merchandise or service that was purchased.
    public var productDescription: String?
    /// Whether the product was a merchandise or service.
    public var productType: ProductType?
    /// Result of cardholder's attempt to return the product.
    public var returnStatus: ReturnStatus?
    /// Date when the product was returned or attempted to be returned.
    public var returnedAt: Int?

    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
    public struct AdditionalDocumentation: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    /// Whether the product was a merchandise or service.
    public enum ProductType: String, Codable, CaseIterable {
        case merchandise
        case service
    }

    /// Result of cardholder's attempt to return the product.
    public enum ReturnStatus: String, Codable, CaseIterable {
        case merchantRejected = "merchant_rejected"
        case successful
    }

    public init(additionalDocumentation: AdditionalDocumentation? = nil, canceledAt: Int? = nil, isCancellationPolicyProvided: Bool? = nil, cancellationReason: String? = nil, expectedAt: Int? = nil, explanation: String? = nil, productDescription: String? = nil, productType: ProductType? = nil, returnStatus: ReturnStatus? = nil, returnedAt: Int? = nil) {
        self.additionalDocumentation = additionalDocumentation
        self.canceledAt = canceledAt
        self.isCancellationPolicyProvided = isCancellationPolicyProvided
        self.cancellationReason = cancellationReason
        self.expectedAt = expectedAt
        self.explanation = explanation
        self.productDescription = productDescription
        self.productType = productType
        self.returnStatus = returnStatus
        self.returnedAt = returnedAt
    }

    private enum CodingKeys: String, CodingKey {
        case additionalDocumentation = "additional_documentation"
        case canceledAt = "canceled_at"
        case isCancellationPolicyProvided = "cancellation_policy_provided"
        case cancellationReason = "cancellation_reason"
        case expectedAt = "expected_at"
        case explanation
        case productDescription = "product_description"
        case productType = "product_type"
        case returnStatus = "return_status"
        case returnedAt = "returned_at"
    }
}

public struct IssuingDisputeDuplicateEvidence: Codable {
    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
    public var additionalDocumentation: AdditionalDocumentation?
    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the card statement showing that the product had already been paid for.
    public var cardStatement: CardStatement?
    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the receipt showing that the product had been paid for in cash.
    public var cashReceipt: CashReceipt?
    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Image of the front and back of the check that was used to pay for the product.
    public var checkImage: CheckImage?
    /// Explanation of why the cardholder is disputing this transaction.
    public var explanation: String?
    /// Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one.
    public var originalTransaction: String?

    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
    public struct AdditionalDocumentation: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the card statement showing that the product had already been paid for.
    public struct CardStatement: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the receipt showing that the product had been paid for in cash.
    public struct CashReceipt: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Image of the front and back of the check that was used to pay for the product.
    public struct CheckImage: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    public init(additionalDocumentation: AdditionalDocumentation? = nil, cardStatement: CardStatement? = nil, cashReceipt: CashReceipt? = nil, checkImage: CheckImage? = nil, explanation: String? = nil, originalTransaction: String? = nil) {
        self.additionalDocumentation = additionalDocumentation
        self.cardStatement = cardStatement
        self.cashReceipt = cashReceipt
        self.checkImage = checkImage
        self.explanation = explanation
        self.originalTransaction = originalTransaction
    }

    private enum CodingKeys: String, CodingKey {
        case additionalDocumentation = "additional_documentation"
        case cardStatement = "card_statement"
        case cashReceipt = "cash_receipt"
        case checkImage = "check_image"
        case explanation
        case originalTransaction = "original_transaction"
    }
}

public struct IssuingDisputeEvidence: Codable {
    public var canceled: IssuingDisputeCanceledEvidence?
    public var duplicate: IssuingDisputeDuplicateEvidence?
    public var fraudulent: IssuingDisputeFraudulentEvidence?
    public var merchandiseNotAsDescribed: IssuingDisputeMerchandiseNotAsDescribedEvidence?
    public var notReceived: IssuingDisputeNotReceivedEvidence?
    public var other: IssuingDisputeOtherEvidence?
    /// The reason for filing the dispute. Its value will match the field containing the evidence.
    public var reason: Reason
    public var serviceNotAsDescribed: IssuingDisputeServiceNotAsDescribedEvidence?

    /// The reason for filing the dispute. Its value will match the field containing the evidence.
    public enum Reason: String, Codable, CaseIterable {
        case canceled
        case duplicate
        case fraudulent
        case merchandiseNotAsDescribed = "merchandise_not_as_described"
        case notReceived = "not_received"
        case other
        case serviceNotAsDescribed = "service_not_as_described"
    }

    public init(canceled: IssuingDisputeCanceledEvidence? = nil, duplicate: IssuingDisputeDuplicateEvidence? = nil, fraudulent: IssuingDisputeFraudulentEvidence? = nil, merchandiseNotAsDescribed: IssuingDisputeMerchandiseNotAsDescribedEvidence? = nil, notReceived: IssuingDisputeNotReceivedEvidence? = nil, other: IssuingDisputeOtherEvidence? = nil, reason: Reason, serviceNotAsDescribed: IssuingDisputeServiceNotAsDescribedEvidence? = nil) {
        self.canceled = canceled
        self.duplicate = duplicate
        self.fraudulent = fraudulent
        self.merchandiseNotAsDescribed = merchandiseNotAsDescribed
        self.notReceived = notReceived
        self.other = other
        self.reason = reason
        self.serviceNotAsDescribed = serviceNotAsDescribed
    }

    private enum CodingKeys: String, CodingKey {
        case canceled
        case duplicate
        case fraudulent
        case merchandiseNotAsDescribed = "merchandise_not_as_described"
        case notReceived = "not_received"
        case other
        case reason
        case serviceNotAsDescribed = "service_not_as_described"
    }
}

public struct IssuingDisputeFraudulentEvidence: Codable {
    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
    public var additionalDocumentation: AdditionalDocumentation?
    /// Explanation of why the cardholder is disputing this transaction.
    public var explanation: String?

    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
    public struct AdditionalDocumentation: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    public init(additionalDocumentation: AdditionalDocumentation? = nil, explanation: String? = nil) {
        self.additionalDocumentation = additionalDocumentation
        self.explanation = explanation
    }

    private enum CodingKeys: String, CodingKey {
        case additionalDocumentation = "additional_documentation"
        case explanation
    }
}

public struct IssuingDisputeMerchandiseNotAsDescribedEvidence: Codable {
    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
    public var additionalDocumentation: AdditionalDocumentation?
    /// Explanation of why the cardholder is disputing this transaction.
    public var explanation: String?
    /// Date when the product was received.
    public var receivedAt: Int?
    /// Description of the cardholder's attempt to return the product.
    public var returnDescription: String?
    /// Result of cardholder's attempt to return the product.
    public var returnStatus: ReturnStatus?
    /// Date when the product was returned or attempted to be returned.
    public var returnedAt: Int?

    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
    public struct AdditionalDocumentation: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    /// Result of cardholder's attempt to return the product.
    public enum ReturnStatus: String, Codable, CaseIterable {
        case merchantRejected = "merchant_rejected"
        case successful
    }

    public init(additionalDocumentation: AdditionalDocumentation? = nil, explanation: String? = nil, receivedAt: Int? = nil, returnDescription: String? = nil, returnStatus: ReturnStatus? = nil, returnedAt: Int? = nil) {
        self.additionalDocumentation = additionalDocumentation
        self.explanation = explanation
        self.receivedAt = receivedAt
        self.returnDescription = returnDescription
        self.returnStatus = returnStatus
        self.returnedAt = returnedAt
    }

    private enum CodingKeys: String, CodingKey {
        case additionalDocumentation = "additional_documentation"
        case explanation
        case receivedAt = "received_at"
        case returnDescription = "return_description"
        case returnStatus = "return_status"
        case returnedAt = "returned_at"
    }
}

public struct IssuingDisputeNotReceivedEvidence: Codable {
    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
    public var additionalDocumentation: AdditionalDocumentation?
    /// Date when the cardholder expected to receive the product.
    public var expectedAt: Int?
    /// Explanation of why the cardholder is disputing this transaction.
    public var explanation: String?
    /// Description of the merchandise or service that was purchased.
    public var productDescription: String?
    /// Whether the product was a merchandise or service.
    public var productType: ProductType?

    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
    public struct AdditionalDocumentation: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    /// Whether the product was a merchandise or service.
    public enum ProductType: String, Codable, CaseIterable {
        case merchandise
        case service
    }

    public init(additionalDocumentation: AdditionalDocumentation? = nil, expectedAt: Int? = nil, explanation: String? = nil, productDescription: String? = nil, productType: ProductType? = nil) {
        self.additionalDocumentation = additionalDocumentation
        self.expectedAt = expectedAt
        self.explanation = explanation
        self.productDescription = productDescription
        self.productType = productType
    }

    private enum CodingKeys: String, CodingKey {
        case additionalDocumentation = "additional_documentation"
        case expectedAt = "expected_at"
        case explanation
        case productDescription = "product_description"
        case productType = "product_type"
    }
}

public struct IssuingDisputeOtherEvidence: Codable {
    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
    public var additionalDocumentation: AdditionalDocumentation?
    /// Explanation of why the cardholder is disputing this transaction.
    public var explanation: String?
    /// Description of the merchandise or service that was purchased.
    public var productDescription: String?
    /// Whether the product was a merchandise or service.
    public var productType: ProductType?

    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
    public struct AdditionalDocumentation: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    /// Whether the product was a merchandise or service.
    public enum ProductType: String, Codable, CaseIterable {
        case merchandise
        case service
    }

    public init(additionalDocumentation: AdditionalDocumentation? = nil, explanation: String? = nil, productDescription: String? = nil, productType: ProductType? = nil) {
        self.additionalDocumentation = additionalDocumentation
        self.explanation = explanation
        self.productDescription = productDescription
        self.productType = productType
    }

    private enum CodingKeys: String, CodingKey {
        case additionalDocumentation = "additional_documentation"
        case explanation
        case productDescription = "product_description"
        case productType = "product_type"
    }
}

public struct IssuingDisputeServiceNotAsDescribedEvidence: Codable {
    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
    public var additionalDocumentation: AdditionalDocumentation?
    /// Date when order was canceled.
    public var canceledAt: Int?
    /// Reason for canceling the order.
    public var cancellationReason: String?
    /// Explanation of why the cardholder is disputing this transaction.
    public var explanation: String?
    /// Date when the product was received.
    public var receivedAt: Int?

    /// (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
    public struct AdditionalDocumentation: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    public init(additionalDocumentation: AdditionalDocumentation? = nil, canceledAt: Int? = nil, cancellationReason: String? = nil, explanation: String? = nil, receivedAt: Int? = nil) {
        self.additionalDocumentation = additionalDocumentation
        self.canceledAt = canceledAt
        self.cancellationReason = cancellationReason
        self.explanation = explanation
        self.receivedAt = receivedAt
    }

    private enum CodingKeys: String, CodingKey {
        case additionalDocumentation = "additional_documentation"
        case canceledAt = "canceled_at"
        case cancellationReason = "cancellation_reason"
        case explanation
        case receivedAt = "received_at"
    }
}

public struct IssuingTransactionAmountDetails: Codable {
    /// The fee charged by the ATM for the cash withdrawal.
    public var atmFee: Int?

    public init(atmFee: Int? = nil) {
        self.atmFee = atmFee
    }

    private enum CodingKeys: String, CodingKey {
        case atmFee = "atm_fee"
    }
}

public struct IssuingTransactionFlightData: Codable {
    /// The time that the flight departed.
    public var departureAt: Int?
    /// The name of the passenger.
    public var passengerName: String?
    /// Whether the ticket is refundable.
    public var isRefundable: Bool?
    /// The legs of the trip.
    public var segments: [IssuingTransactionFlightDataLeg]?
    /// The travel agency that issued the ticket.
    public var travelAgency: String?

    public init(departureAt: Int? = nil, passengerName: String? = nil, isRefundable: Bool? = nil, segments: [IssuingTransactionFlightDataLeg]? = nil, travelAgency: String? = nil) {
        self.departureAt = departureAt
        self.passengerName = passengerName
        self.isRefundable = isRefundable
        self.segments = segments
        self.travelAgency = travelAgency
    }

    private enum CodingKeys: String, CodingKey {
        case departureAt = "departure_at"
        case passengerName = "passenger_name"
        case isRefundable = "refundable"
        case segments
        case travelAgency = "travel_agency"
    }
}

public struct IssuingTransactionFlightDataLeg: Codable {
    /// The three-letter IATA airport code of the flight's destination.
    public var arrivalAirportCode: String?
    /// The airline carrier code.
    public var carrier: String?
    /// The three-letter IATA airport code that the flight departed from.
    public var departureAirportCode: String?
    /// The flight number.
    public var flightNumber: String?
    /// The flight's service class.
    public var serviceClass: String?
    /// Whether a stopover is allowed on this flight.
    public var isStopoverAllowed: Bool?

    public init(arrivalAirportCode: String? = nil, carrier: String? = nil, departureAirportCode: String? = nil, flightNumber: String? = nil, serviceClass: String? = nil, isStopoverAllowed: Bool? = nil) {
        self.arrivalAirportCode = arrivalAirportCode
        self.carrier = carrier
        self.departureAirportCode = departureAirportCode
        self.flightNumber = flightNumber
        self.serviceClass = serviceClass
        self.isStopoverAllowed = isStopoverAllowed
    }

    private enum CodingKeys: String, CodingKey {
        case arrivalAirportCode = "arrival_airport_code"
        case carrier
        case departureAirportCode = "departure_airport_code"
        case flightNumber = "flight_number"
        case serviceClass = "service_class"
        case isStopoverAllowed = "stopover_allowed"
    }
}

public struct IssuingTransactionFuelData: Codable {
    /// The type of fuel that was purchased. One of `diesel`, `unleaded_plus`, `unleaded_regular`, `unleaded_super`, or `other`.
    public var type: String
    /// The units for `volume_decimal`. One of `us_gallon` or `liter`.
    public var unit: String
    /// The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places.
    public var unitCostDecimal: String
    /// The volume of the fuel that was pumped, represented as a decimal string with at most 12 decimal places.
    public var volumeDecimal: String?

    public init(type: String, unit: String, unitCostDecimal: String, volumeDecimal: String? = nil) {
        self.type = type
        self.unit = unit
        self.unitCostDecimal = unitCostDecimal
        self.volumeDecimal = volumeDecimal
    }

    private enum CodingKeys: String, CodingKey {
        case type
        case unit
        case unitCostDecimal = "unit_cost_decimal"
        case volumeDecimal = "volume_decimal"
    }
}

public struct IssuingTransactionLodgingData: Codable {
    /// The time of checking into the lodging.
    public var checkInAt: Int?
    /// The number of nights stayed at the lodging.
    public var nights: Int?

    public init(checkInAt: Int? = nil, nights: Int? = nil) {
        self.checkInAt = checkInAt
        self.nights = nights
    }

    private enum CodingKeys: String, CodingKey {
        case checkInAt = "check_in_at"
        case nights
    }
}

public struct IssuingTransactionPurchaseDetails: Codable {
    /// Information about the flight that was purchased with this transaction.
    public var flight: Flight?
    /// Information about fuel that was purchased with this transaction.
    public var fuel: Fuel?
    /// Information about lodging that was purchased with this transaction.
    public var lodging: Lodging?
    /// The line items in the purchase.
    public var receipt: [IssuingTransactionReceiptData]?
    /// A merchant-specific order number.
    public var reference: String?

    /// Information about the flight that was purchased with this transaction.
    public struct Flight: Codable {
        public var issuingTransactionFlightData: IssuingTransactionFlightData?

        public init(issuingTransactionFlightData: IssuingTransactionFlightData? = nil) {
            self.issuingTransactionFlightData = issuingTransactionFlightData
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.issuingTransactionFlightData = try? container.decode(IssuingTransactionFlightData.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = issuingTransactionFlightData { try container.encode(value) }
        }
    }

    /// Information about fuel that was purchased with this transaction.
    public struct Fuel: Codable {
        public var issuingTransactionFuelData: IssuingTransactionFuelData?

        public init(issuingTransactionFuelData: IssuingTransactionFuelData? = nil) {
            self.issuingTransactionFuelData = issuingTransactionFuelData
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.issuingTransactionFuelData = try? container.decode(IssuingTransactionFuelData.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = issuingTransactionFuelData { try container.encode(value) }
        }
    }

    /// Information about lodging that was purchased with this transaction.
    public struct Lodging: Codable {
        public var issuingTransactionLodgingData: IssuingTransactionLodgingData?

        public init(issuingTransactionLodgingData: IssuingTransactionLodgingData? = nil) {
            self.issuingTransactionLodgingData = issuingTransactionLodgingData
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.issuingTransactionLodgingData = try? container.decode(IssuingTransactionLodgingData.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = issuingTransactionLodgingData { try container.encode(value) }
        }
    }

    public init(flight: Flight? = nil, fuel: Fuel? = nil, lodging: Lodging? = nil, receipt: [IssuingTransactionReceiptData]? = nil, reference: String? = nil) {
        self.flight = flight
        self.fuel = fuel
        self.lodging = lodging
        self.receipt = receipt
        self.reference = reference
    }
}

public struct IssuingTransactionReceiptData: Codable {
    /// The description of the item. The maximum length of this field is 26 characters.
    public var description: String?
    /// The quantity of the item.
    public var quantity: Double?
    /// The total for this line item in cents.
    public var total: Int?
    /// The unit cost of the item in cents.
    public var unitCost: Int?

    public init(description: String? = nil, quantity: Double? = nil, total: Int? = nil, unitCost: Int? = nil) {
        self.description = description
        self.quantity = quantity
        self.total = total
        self.unitCost = unitCost
    }

    private enum CodingKeys: String, CodingKey {
        case description
        case quantity
        case total
        case unitCost = "unit_cost"
    }
}

/// LineItem
///
/// A line item.
public struct Item: Codable {
    /// Total before any discounts or taxes are applied.
    public var amountSubtotal: Int
    /// Total after discounts and taxes.
    public var amountTotal: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// An arbitrary string attached to the object. Often useful for displaying to users. Defaults to product name.
    public var description: String
    /// The discounts applied to the line item.
    public var discounts: [LineItemsDiscountAmount]?
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The price used to generate the line item.
    public var price: Price?
    /// The quantity of products being purchased.
    public var quantity: Int?
    /// The taxes applied to the line item.
    public var taxes: [LineItemsTaxAmount]?

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case item
    }

    /// The price used to generate the line item.
    public final class Price: Codable {
        /// Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
        /// [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
        /// 
        /// For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.
        /// 
        /// Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/billing/prices-guide).
        public var price: StripeAPI.Price?

        public init(price: StripeAPI.Price? = nil) {
            self.price = price
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.price = try? container.decode(StripeAPI.Price.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = price { try container.encode(value) }
        }
    }

    public init(amountSubtotal: Int, amountTotal: Int, currency: String, description: String, discounts: [LineItemsDiscountAmount]? = nil, id: String, object: Object, price: Price? = nil, quantity: Int? = nil, taxes: [LineItemsTaxAmount]? = nil) {
        self.amountSubtotal = amountSubtotal
        self.amountTotal = amountTotal
        self.currency = currency
        self.description = description
        self.discounts = discounts
        self.id = id
        self.object = object
        self.price = price
        self.quantity = quantity
        self.taxes = taxes
    }

    private enum CodingKeys: String, CodingKey {
        case amountSubtotal = "amount_subtotal"
        case amountTotal = "amount_total"
        case currency
        case description
        case discounts
        case id
        case object
        case price
        case quantity
        case taxes
    }
}

public struct LegalEntityCompany: Codable {
    public var address: Address?
    /// The Kana variation of the company's primary address (Japan only).
    public var addressKana: AddressKana?
    /// The Kanji variation of the company's primary address (Japan only).
    public var addressKanji: AddressKanji?
    /// Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided).
    public var isDirectorsProvided: Bool?
    /// Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided.
    public var isExecutivesProvided: Bool?
    /// The company's legal name.
    public var name: String?
    /// The Kana variation of the company's legal name (Japan only).
    public var nameKana: String?
    /// The Kanji variation of the company's legal name (Japan only).
    public var nameKanji: String?
    /// Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together).
    public var isOwnersProvided: Bool?
    /// This hash is used to attest that the beneficial owner information provided to Stripe is both current and correct.
    public var ownershipDeclaration: OwnershipDeclaration?
    /// The company's phone number (used for verification).
    public var phone: String?
    /// The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details.
    public var structure: Structure?
    /// Whether the company's business ID number was provided.
    public var isTaxIDProvided: Bool?
    /// The jurisdiction in which the `tax_id` is registered (Germany-based companies only).
    public var taxIDRegistrar: String?
    /// Whether the company's business VAT number was provided.
    public var isVatIDProvided: Bool?
    /// Information on the verification state of the company.
    public var verification: Verification?

    /// The Kana variation of the company's primary address (Japan only).
    public struct AddressKana: Codable {
        public var legalEntityJapanAddress: LegalEntityJapanAddress?

        public init(legalEntityJapanAddress: LegalEntityJapanAddress? = nil) {
            self.legalEntityJapanAddress = legalEntityJapanAddress
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.legalEntityJapanAddress = try? container.decode(LegalEntityJapanAddress.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = legalEntityJapanAddress { try container.encode(value) }
        }
    }

    /// The Kanji variation of the company's primary address (Japan only).
    public struct AddressKanji: Codable {
        public var legalEntityJapanAddress: LegalEntityJapanAddress?

        public init(legalEntityJapanAddress: LegalEntityJapanAddress? = nil) {
            self.legalEntityJapanAddress = legalEntityJapanAddress
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.legalEntityJapanAddress = try? container.decode(LegalEntityJapanAddress.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = legalEntityJapanAddress { try container.encode(value) }
        }
    }

    /// This hash is used to attest that the beneficial owner information provided to Stripe is both current and correct.
    public struct OwnershipDeclaration: Codable {
        public var legalEntityUboDeclaration: LegalEntityUboDeclaration?

        public init(legalEntityUboDeclaration: LegalEntityUboDeclaration? = nil) {
            self.legalEntityUboDeclaration = legalEntityUboDeclaration
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.legalEntityUboDeclaration = try? container.decode(LegalEntityUboDeclaration.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = legalEntityUboDeclaration { try container.encode(value) }
        }
    }

    /// The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details.
    public enum Structure: String, Codable, CaseIterable {
        case freeZoneEstablishment = "free_zone_establishment"
        case freeZoneLlc = "free_zone_llc"
        case governmentInstrumentality = "government_instrumentality"
        case governmentalUnit = "governmental_unit"
        case incorporatedNonProfit = "incorporated_non_profit"
        case limitedLiabilityPartnership = "limited_liability_partnership"
        case llc
        case multiMemberLlc = "multi_member_llc"
        case privateCompany = "private_company"
        case privateCorporation = "private_corporation"
        case privatePartnership = "private_partnership"
        case publicCompany = "public_company"
        case publicCorporation = "public_corporation"
        case publicPartnership = "public_partnership"
        case singleMemberLlc = "single_member_llc"
        case soleEstablishment = "sole_establishment"
        case soleProprietorship = "sole_proprietorship"
        case taxExemptGovernmentInstrumentality = "tax_exempt_government_instrumentality"
        case unincorporatedAssociation = "unincorporated_association"
        case unincorporatedNonProfit = "unincorporated_non_profit"
    }

    /// Information on the verification state of the company.
    public struct Verification: Codable {
        public var legalEntityCompanyVerification: LegalEntityCompanyVerification?

        public init(legalEntityCompanyVerification: LegalEntityCompanyVerification? = nil) {
            self.legalEntityCompanyVerification = legalEntityCompanyVerification
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.legalEntityCompanyVerification = try? container.decode(LegalEntityCompanyVerification.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = legalEntityCompanyVerification { try container.encode(value) }
        }
    }

    public init(address: Address? = nil, addressKana: AddressKana? = nil, addressKanji: AddressKanji? = nil, isDirectorsProvided: Bool? = nil, isExecutivesProvided: Bool? = nil, name: String? = nil, nameKana: String? = nil, nameKanji: String? = nil, isOwnersProvided: Bool? = nil, ownershipDeclaration: OwnershipDeclaration? = nil, phone: String? = nil, structure: Structure? = nil, isTaxIDProvided: Bool? = nil, taxIDRegistrar: String? = nil, isVatIDProvided: Bool? = nil, verification: Verification? = nil) {
        self.address = address
        self.addressKana = addressKana
        self.addressKanji = addressKanji
        self.isDirectorsProvided = isDirectorsProvided
        self.isExecutivesProvided = isExecutivesProvided
        self.name = name
        self.nameKana = nameKana
        self.nameKanji = nameKanji
        self.isOwnersProvided = isOwnersProvided
        self.ownershipDeclaration = ownershipDeclaration
        self.phone = phone
        self.structure = structure
        self.isTaxIDProvided = isTaxIDProvided
        self.taxIDRegistrar = taxIDRegistrar
        self.isVatIDProvided = isVatIDProvided
        self.verification = verification
    }

    private enum CodingKeys: String, CodingKey {
        case address
        case addressKana = "address_kana"
        case addressKanji = "address_kanji"
        case isDirectorsProvided = "directors_provided"
        case isExecutivesProvided = "executives_provided"
        case name
        case nameKana = "name_kana"
        case nameKanji = "name_kanji"
        case isOwnersProvided = "owners_provided"
        case ownershipDeclaration = "ownership_declaration"
        case phone
        case structure
        case isTaxIDProvided = "tax_id_provided"
        case taxIDRegistrar = "tax_id_registrar"
        case isVatIDProvided = "vat_id_provided"
        case verification
    }
}

public struct LegalEntityCompanyVerification: Codable {
    public var document: LegalEntityCompanyVerificationDocument

    public init(document: LegalEntityCompanyVerificationDocument) {
        self.document = document
    }
}

public struct LegalEntityCompanyVerificationDocument: Codable {
    /// The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`.
    public var back: Back?
    /// A user-displayable string describing the verification state of this document.
    public var details: String?
    /// One of `document_corrupt`, `document_expired`, `document_failed_copy`, `document_failed_greyscale`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_not_readable`, `document_not_uploaded`, `document_type_not_supported`, or `document_too_large`. A machine-readable code specifying the verification state for this document.
    public var detailsCode: String?
    /// The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`.
    public var front: Front?

    /// The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`.
    public struct Back: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    /// The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`.
    public struct Front: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    public init(back: Back? = nil, details: String? = nil, detailsCode: String? = nil, front: Front? = nil) {
        self.back = back
        self.details = details
        self.detailsCode = detailsCode
        self.front = front
    }

    private enum CodingKeys: String, CodingKey {
        case back
        case details
        case detailsCode = "details_code"
        case front
    }
}

public struct LegalEntityDob: Codable {
    /// The day of birth, between 1 and 31.
    public var day: Int?
    /// The month of birth, between 1 and 12.
    public var month: Int?
    /// The four-digit year of birth.
    public var year: Int?

    public init(day: Int? = nil, month: Int? = nil, year: Int? = nil) {
        self.day = day
        self.month = month
        self.year = year
    }
}

public struct LegalEntityJapanAddress: Codable {
    /// City/Ward.
    public var city: String?
    /// Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
    public var country: String?
    /// Block/Building number.
    public var line1: String?
    /// Building details.
    public var line2: String?
    /// ZIP or postal code.
    public var postalCode: String?
    /// Prefecture.
    public var state: String?
    /// Town/cho-me.
    public var town: String?

    public init(city: String? = nil, country: String? = nil, line1: String? = nil, line2: String? = nil, postalCode: String? = nil, state: String? = nil, town: String? = nil) {
        self.city = city
        self.country = country
        self.line1 = line1
        self.line2 = line2
        self.postalCode = postalCode
        self.state = state
        self.town = town
    }

    private enum CodingKeys: String, CodingKey {
        case city
        case country
        case line1
        case line2
        case postalCode = "postal_code"
        case state
        case town
    }
}

public struct LegalEntityPersonVerification: Codable {
    /// A document showing address, either a passport, local ID card, or utility bill from a well-known utility company.
    public var additionalDocument: AdditionalDocument?
    /// A user-displayable string describing the verification state for the person. For example, this may say "Provided identity information could not be verified".
    public var details: String?
    /// One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person.
    public var detailsCode: String?
    public var document: LegalEntityPersonVerificationDocument?
    /// The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`.
    public var status: String

    /// A document showing address, either a passport, local ID card, or utility bill from a well-known utility company.
    public struct AdditionalDocument: Codable {
        public var legalEntityPersonVerificationDocument: LegalEntityPersonVerificationDocument?

        public init(legalEntityPersonVerificationDocument: LegalEntityPersonVerificationDocument? = nil) {
            self.legalEntityPersonVerificationDocument = legalEntityPersonVerificationDocument
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.legalEntityPersonVerificationDocument = try? container.decode(LegalEntityPersonVerificationDocument.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = legalEntityPersonVerificationDocument { try container.encode(value) }
        }
    }

    public init(additionalDocument: AdditionalDocument? = nil, details: String? = nil, detailsCode: String? = nil, document: LegalEntityPersonVerificationDocument? = nil, status: String) {
        self.additionalDocument = additionalDocument
        self.details = details
        self.detailsCode = detailsCode
        self.document = document
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case additionalDocument = "additional_document"
        case details
        case detailsCode = "details_code"
        case document
        case status
    }
}

public struct LegalEntityPersonVerificationDocument: Codable {
    /// The back of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
    public var back: Back?
    /// A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say "Identity document is too unclear to read".
    public var details: String?
    /// One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document.
    public var detailsCode: String?
    /// The front of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
    public var front: Front?

    /// The back of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
    public struct Back: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    /// The front of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
    public struct Front: Codable {
        public var string: String?
        public var file: File?

        public init(string: String? = nil, file: File? = nil) {
            self.string = string
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = file { try container.encode(value) }
        }
    }

    public init(back: Back? = nil, details: String? = nil, detailsCode: String? = nil, front: Front? = nil) {
        self.back = back
        self.details = details
        self.detailsCode = detailsCode
        self.front = front
    }

    private enum CodingKeys: String, CodingKey {
        case back
        case details
        case detailsCode = "details_code"
        case front
    }
}

public struct LegalEntityUboDeclaration: Codable {
    /// The Unix timestamp marking when the beneficial owner attestation was made.
    public var date: Int?
    /// The IP address from which the beneficial owner attestation was made.
    public var ip: String?
    /// The user-agent string from the browser where the beneficial owner attestation was made.
    public var userAgent: String?

    public init(date: Int? = nil, ip: String? = nil, userAgent: String? = nil) {
        self.date = date
        self.ip = ip
        self.userAgent = userAgent
    }

    private enum CodingKeys: String, CodingKey {
        case date
        case ip
        case userAgent = "user_agent"
    }
}

/// InvoiceLineItem
public struct LineItem: Codable {
    /// The amount, in %s.
    public var amount: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// An arbitrary string attached to the object. Often useful for displaying to users.
    public var description: String?
    /// The amount of discount calculated per discount for this line item.
    public var discountAmounts: [DiscountsResourceDiscountAmount]?
    /// If true, discounts will apply to this line item. Always false for prorations.
    public var isDiscountable: Bool
    /// The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
    public var discounts: [Discount]?
    /// Unique identifier for the object.
    public var id: String
    /// The ID of the [invoice item](https://stripe.com/docs/api/invoiceitems) associated with this line item if any.
    public var invoiceItem: String?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription` this will reflect the metadata of the subscription that caused the line item to be created.
    public var metadata: [String: String]
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// InvoiceLineItemPeriod
    public var period: InvoiceLineItemPeriod
    /// The price of the line item.
    public var price: Price?
    /// Whether this is a proration.
    public var isProration: Bool
    /// The quantity of the subscription, if the line item is a subscription or a proration.
    public var quantity: Int?
    /// The subscription that the invoice item pertains to, if any.
    public var subscription: String?
    /// The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription.
    public var subscriptionItem: String?
    /// The amount of tax calculated per tax rate for this line item
    public var taxAmounts: [InvoiceTaxAmount]?
    /// The tax rates which apply to the line item.
    public var taxRates: [TaxRate]?
    /// A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`.
    public var type: `Type`

    public final class Discount: Codable {
        public var string: String?
        public var discount: StripeAPI.Discount?

        public init(string: String? = nil, discount: StripeAPI.Discount? = nil) {
            self.string = string
            self.discount = discount
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.discount = try? container.decode(StripeAPI.Discount.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = discount { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case lineItem = "line_item"
    }

    /// The price of the line item.
    public final class Price: Codable {
        /// Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
        /// [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
        /// 
        /// For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.
        /// 
        /// Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/billing/prices-guide).
        public var price: StripeAPI.Price?

        public init(price: StripeAPI.Price? = nil) {
            self.price = price
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.price = try? container.decode(StripeAPI.Price.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = price { try container.encode(value) }
        }
    }

    /// A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`.
    public enum `Type`: String, Codable, CaseIterable {
        case invoiceitem
        case subscription
    }

    public init(amount: Int, currency: String, description: String? = nil, discountAmounts: [DiscountsResourceDiscountAmount]? = nil, isDiscountable: Bool, discounts: [Discount]? = nil, id: String, invoiceItem: String? = nil, isLivemode: Bool, metadata: [String: String], object: Object, period: InvoiceLineItemPeriod, price: Price? = nil, isProration: Bool, quantity: Int? = nil, subscription: String? = nil, subscriptionItem: String? = nil, taxAmounts: [InvoiceTaxAmount]? = nil, taxRates: [TaxRate]? = nil, type: `Type`) {
        self.amount = amount
        self.currency = currency
        self.description = description
        self.discountAmounts = discountAmounts
        self.isDiscountable = isDiscountable
        self.discounts = discounts
        self.id = id
        self.invoiceItem = invoiceItem
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.period = period
        self.price = price
        self.isProration = isProration
        self.quantity = quantity
        self.subscription = subscription
        self.subscriptionItem = subscriptionItem
        self.taxAmounts = taxAmounts
        self.taxRates = taxRates
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case currency
        case description
        case discountAmounts = "discount_amounts"
        case isDiscountable = "discountable"
        case discounts
        case id
        case invoiceItem = "invoice_item"
        case isLivemode = "livemode"
        case metadata
        case object
        case period
        case price
        case isProration = "proration"
        case quantity
        case subscription
        case subscriptionItem = "subscription_item"
        case taxAmounts = "tax_amounts"
        case taxRates = "tax_rates"
        case type
    }
}

public struct LineItemsDiscountAmount: Codable {
    /// The amount discounted.
    public var amount: Int
    public var discount: Discount

    public init(amount: Int, discount: Discount) {
        self.amount = amount
        self.discount = discount
    }
}

public struct LineItemsTaxAmount: Codable {
    /// Amount of tax applied for this rate.
    public var amount: Int
    /// TaxRate
    ///
    /// Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.
    /// 
    /// Related guide: [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates).
    public var rate: TaxRate

    public init(amount: Int, rate: TaxRate) {
        self.amount = amount
        self.rate = rate
    }
}

public struct LoginLink: Codable {
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The URL for the login link.
    public var url: String

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case loginLink = "login_link"
    }

    public init(created: Int, object: Object, url: String) {
        self.created = created
        self.object = object
        self.url = url
    }
}

/// A Mandate is a record of the permission a customer has given you to debit their payment method.
public struct Mandate: Codable {
    /// Customer_acceptance
    public var customerAcceptance: CustomerAcceptance
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Mandate_multi_use
    public var multiUse: [String: AnyJSON]?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// ID of the payment method associated with this mandate.
    public var paymentMethod: PaymentMethod
    /// Mandate_payment_method_details
    public var paymentMethodDetails: MandatePaymentMethodDetails
    /// Mandate_single_use
    public var singleUse: MandateSingleUse?
    /// The status of the mandate, which indicates whether it can be used to initiate a payment.
    public var status: Status
    /// The type of the mandate.
    public var type: `Type`

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case mandate
    }

    /// ID of the payment method associated with this mandate.
    public final class PaymentMethod: Codable {
        public var string: String?
        public var paymentMethod: StripeAPI.PaymentMethod?

        public init(string: String? = nil, paymentMethod: StripeAPI.PaymentMethod? = nil) {
            self.string = string
            self.paymentMethod = paymentMethod
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentMethod = try? container.decode(StripeAPI.PaymentMethod.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentMethod { try container.encode(value) }
        }
    }

    /// The status of the mandate, which indicates whether it can be used to initiate a payment.
    public enum Status: String, Codable, CaseIterable {
        case active
        case inactive
        case pending
    }

    /// The type of the mandate.
    public enum `Type`: String, Codable, CaseIterable {
        case multiUse = "multi_use"
        case singleUse = "single_use"
    }

    public init(customerAcceptance: CustomerAcceptance, id: String, isLivemode: Bool, multiUse: [String: AnyJSON]? = nil, object: Object, paymentMethod: PaymentMethod, paymentMethodDetails: MandatePaymentMethodDetails, singleUse: MandateSingleUse? = nil, status: Status, type: `Type`) {
        self.customerAcceptance = customerAcceptance
        self.id = id
        self.isLivemode = isLivemode
        self.multiUse = multiUse
        self.object = object
        self.paymentMethod = paymentMethod
        self.paymentMethodDetails = paymentMethodDetails
        self.singleUse = singleUse
        self.status = status
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case customerAcceptance = "customer_acceptance"
        case id
        case isLivemode = "livemode"
        case multiUse = "multi_use"
        case object
        case paymentMethod = "payment_method"
        case paymentMethodDetails = "payment_method_details"
        case singleUse = "single_use"
        case status
        case type
    }
}

/// Mandate_acss_debit
public struct MandateAcssDebit: Codable {
    /// List of Stripe products where this mandate can be selected automatically.
    public var defaultFor: [DefaultForItem]?
    /// Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
    public var intervalDescription: String?
    /// Payment schedule for the mandate.
    public var paymentSchedule: PaymentSchedule
    /// Transaction type of the mandate.
    public var transactionType: TransactionType

    public enum DefaultForItem: String, Codable, CaseIterable {
        case invoice
        case subscription
    }

    /// Payment schedule for the mandate.
    public enum PaymentSchedule: String, Codable, CaseIterable {
        case combined
        case interval
        case sporadic
    }

    /// Transaction type of the mandate.
    public enum TransactionType: String, Codable, CaseIterable {
        case business
        case personal
    }

    public init(defaultFor: [DefaultForItem]? = nil, intervalDescription: String? = nil, paymentSchedule: PaymentSchedule, transactionType: TransactionType) {
        self.defaultFor = defaultFor
        self.intervalDescription = intervalDescription
        self.paymentSchedule = paymentSchedule
        self.transactionType = transactionType
    }

    private enum CodingKeys: String, CodingKey {
        case defaultFor = "default_for"
        case intervalDescription = "interval_description"
        case paymentSchedule = "payment_schedule"
        case transactionType = "transaction_type"
    }
}

/// Mandate_au_becs_debit
public struct MandateAuBecsDebit: Codable {
    /// The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively.
    public var url: String

    public init(url: String) {
        self.url = url
    }
}

/// Mandate_bacs_debit
public struct MandateBacsDebit: Codable {
    /// The status of the mandate on the Bacs network. Can be one of `pending`, `revoked`, `refused`, or `accepted`.
    public var networkStatus: NetworkStatus
    /// The unique reference identifying the mandate on the Bacs network.
    public var reference: String
    /// The URL that will contain the mandate that the customer has signed.
    public var url: String

    /// The status of the mandate on the Bacs network. Can be one of `pending`, `revoked`, `refused`, or `accepted`.
    public enum NetworkStatus: String, Codable, CaseIterable {
        case accepted
        case pending
        case refused
        case revoked
    }

    public init(networkStatus: NetworkStatus, reference: String, url: String) {
        self.networkStatus = networkStatus
        self.reference = reference
        self.url = url
    }

    private enum CodingKeys: String, CodingKey {
        case networkStatus = "network_status"
        case reference
        case url
    }
}

/// Mandate_payment_method_details
public struct MandatePaymentMethodDetails: Codable {
    /// Mandate_acss_debit
    public var acssDebit: MandateAcssDebit?
    /// Mandate_au_becs_debit
    public var auBecsDebit: MandateAuBecsDebit?
    /// Mandate_bacs_debit
    public var bacsDebit: MandateBacsDebit?
    /// Card_mandate_payment_method_details
    public var card: [String: AnyJSON]?
    /// Mandate_sepa_debit
    public var sepaDebit: MandateSepaDebit?
    /// The type of the payment method associated with this mandate. An additional hash is included on `payment_method_details` with a name matching this value. It contains mandate information specific to the payment method.
    public var type: String

    public init(acssDebit: MandateAcssDebit? = nil, auBecsDebit: MandateAuBecsDebit? = nil, bacsDebit: MandateBacsDebit? = nil, card: [String: AnyJSON]? = nil, sepaDebit: MandateSepaDebit? = nil, type: String) {
        self.acssDebit = acssDebit
        self.auBecsDebit = auBecsDebit
        self.bacsDebit = bacsDebit
        self.card = card
        self.sepaDebit = sepaDebit
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case acssDebit = "acss_debit"
        case auBecsDebit = "au_becs_debit"
        case bacsDebit = "bacs_debit"
        case card
        case sepaDebit = "sepa_debit"
        case type
    }
}

/// Mandate_sepa_debit
public struct MandateSepaDebit: Codable {
    /// The unique reference of the mandate.
    public var reference: String
    /// The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively.
    public var url: String

    public init(reference: String, url: String) {
        self.reference = reference
        self.url = url
    }
}

/// Mandate_single_use
public struct MandateSingleUse: Codable {
    /// On a single use mandate, the amount of the payment.
    public var amount: Int
    /// On a single use mandate, the currency of the payment.
    public var currency: String

    public init(amount: Int, currency: String) {
        self.amount = amount
        self.currency = currency
    }
}

public struct Networks: Codable {
    /// All available networks for the card.
    public var available: [String]
    /// The preferred network for the card.
    public var preferred: String?

    public init(available: [String], preferred: String? = nil) {
        self.available = available
        self.preferred = preferred
    }
}

public struct NotificationEventData: Codable {
    /// Object containing the API resource relevant to the event. For example, an `invoice.created` event will have a full [invoice object](https://stripe.com/docs/api#invoice_object) as the value of the object key.
    public var object: [String: AnyJSON]
    /// Object containing the names of the attributes that have changed, and their previous values (sent along only with *.updated events).
    public var previousAttributes: [String: AnyJSON]?

    public init(object: [String: AnyJSON], previousAttributes: [String: AnyJSON]? = nil) {
        self.object = object
        self.previousAttributes = previousAttributes
    }

    private enum CodingKeys: String, CodingKey {
        case object
        case previousAttributes = "previous_attributes"
    }
}

public struct NotificationEventRequest: Codable {
    /// ID of the API request that caused the event. If null, the event was automatic (e.g., Stripe's automatic subscription handling). Request logs are available in the [dashboard](https://dashboard.stripe.com/logs), but currently not in the API.
    public var id: String?
    /// The idempotency key transmitted during the request, if any. *Note: This property is populated only for events on or after May 23, 2017*.
    public var idempotencyKey: String?

    public init(id: String? = nil, idempotencyKey: String? = nil) {
        self.id = id
        self.idempotencyKey = idempotencyKey
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case idempotencyKey = "idempotency_key"
    }
}

/// Online_acceptance
public struct OnlineAcceptance: Codable {
    /// The IP address from which the Mandate was accepted by the customer.
    public var ipAddress: String?
    /// The user agent of the browser from which the Mandate was accepted by the customer.
    public var userAgent: String?

    public init(ipAddress: String? = nil, userAgent: String? = nil) {
        self.ipAddress = ipAddress
        self.userAgent = userAgent
    }

    private enum CodingKeys: String, CodingKey {
        case ipAddress = "ip_address"
        case userAgent = "user_agent"
    }
}

/// Order objects are created to handle end customers' purchases of previously
/// defined [products](https://stripe.com/docs/api#products). You can create, retrieve, and pay individual orders, as well
/// as list all orders. Orders are identified by a unique, random ID.
/// 
/// Related guide: [Tax, Shipping, and Inventory](https://stripe.com/docs/orders).
public struct Order: Codable {
    /// A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order.
    public var amount: Int
    /// The total amount that was returned to the customer.
    public var amountReturned: Int?
    /// ID of the Connect Application that created the order.
    public var application: String?
    /// A fee in cents that will be applied to the order and transferred to the application owner’s Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees documentation.
    public var applicationFee: Int?
    /// The ID of the payment used to pay for the order. Present if the order status is `paid`, `fulfilled`, or `refunded`.
    public var charge: Charge?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// The customer used for the order.
    public var customer: Customer?
    /// The email address of the customer placing the order.
    public var email: String?
    /// External coupon code to load for this order.
    public var externalCouponCode: String?
    /// Unique identifier for the object.
    public var id: String
    /// List of items constituting the order. An order can have up to 25 items.
    public var items: [OrderItem]
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// OrdersResourceOrderReturnList
    ///
    /// A list of returns that have taken place for this order.
    public var returns: Returns?
    /// The shipping method that is currently selected for this order, if any. If present, it is equal to one of the `id`s of shipping methods in the `shipping_methods` array. At order creation time, if there are multiple shipping methods, Stripe will automatically selected the first method.
    public var selectedShippingMethod: String?
    /// The shipping address for the order. Present if the order is for goods to be shipped.
    public var shipping: Shipping?
    /// A list of supported shipping methods for this order. The desired shipping method can be specified either by updating the order, or when paying it.
    public var shippingMethods: [ShippingMethod]?
    /// Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More details in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses).
    public var status: String
    /// The timestamps at which the order status was updated.
    public var statusTransitions: StatusTransitions?
    /// Time at which the object was last updated. Measured in seconds since the Unix epoch.
    public var updated: Int?
    /// The user's order ID if it is different from the Stripe order ID.
    public var upstreamID: String?

    /// The ID of the payment used to pay for the order. Present if the order status is `paid`, `fulfilled`, or `refunded`.
    public final class Charge: Codable {
        public var string: String?
        public var charge: StripeAPI.Charge?

        public init(string: String? = nil, charge: StripeAPI.Charge? = nil) {
            self.string = string
            self.charge = charge
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.charge = try? container.decode(StripeAPI.Charge.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = charge { try container.encode(value) }
        }
    }

    /// The customer used for the order.
    public final class Customer: Codable {
        public var string: String?
        public var customer: StripeAPI.Customer?
        public var deletedCustomer: DeletedCustomer?

        public init(string: String? = nil, customer: StripeAPI.Customer? = nil, deletedCustomer: DeletedCustomer? = nil) {
            self.string = string
            self.customer = customer
            self.deletedCustomer = deletedCustomer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeAPI.Customer.self)
            self.deletedCustomer = try? container.decode(DeletedCustomer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
            if let value = deletedCustomer { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case order
    }

    /// OrdersResourceOrderReturnList
    ///
    /// A list of returns that have taken place for this order.
    public struct Returns: Codable {
        /// Details about each object.
        public var data: [OrderReturn]
        /// True if this list has another page of items after this one that can be fetched.
        public var hasMore: Bool
        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public var object: Object
        /// The URL where this list can be accessed.
        public var url: String

        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public enum Object: String, Codable, CaseIterable {
            case list
        }

        public init(data: [OrderReturn], hasMore: Bool, object: Object, url: String) {
            self.data = data
            self.hasMore = hasMore
            self.object = object
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case data
            case hasMore = "has_more"
            case object
            case url
        }
    }

    /// The shipping address for the order. Present if the order is for goods to be shipped.
    public final class Shipping: Codable {
        public var shipping: StripeAPI.Shipping?

        public init(shipping: StripeAPI.Shipping? = nil) {
            self.shipping = shipping
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.shipping = try? container.decode(StripeAPI.Shipping.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = shipping { try container.encode(value) }
        }
    }

    /// The timestamps at which the order status was updated.
    public final class StatusTransitions: Codable {
        public var statusTransitions: StripeAPI.StatusTransitions?

        public init(statusTransitions: StripeAPI.StatusTransitions? = nil) {
            self.statusTransitions = statusTransitions
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.statusTransitions = try? container.decode(StripeAPI.StatusTransitions.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = statusTransitions { try container.encode(value) }
        }
    }

    public init(amount: Int, amountReturned: Int? = nil, application: String? = nil, applicationFee: Int? = nil, charge: Charge? = nil, created: Int, currency: String, customer: Customer? = nil, email: String? = nil, externalCouponCode: String? = nil, id: String, items: [OrderItem], isLivemode: Bool, metadata: [String: String]? = nil, object: Object, returns: Returns? = nil, selectedShippingMethod: String? = nil, shipping: Shipping? = nil, shippingMethods: [ShippingMethod]? = nil, status: String, statusTransitions: StatusTransitions? = nil, updated: Int? = nil, upstreamID: String? = nil) {
        self.amount = amount
        self.amountReturned = amountReturned
        self.application = application
        self.applicationFee = applicationFee
        self.charge = charge
        self.created = created
        self.currency = currency
        self.customer = customer
        self.email = email
        self.externalCouponCode = externalCouponCode
        self.id = id
        self.items = items
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.returns = returns
        self.selectedShippingMethod = selectedShippingMethod
        self.shipping = shipping
        self.shippingMethods = shippingMethods
        self.status = status
        self.statusTransitions = statusTransitions
        self.updated = updated
        self.upstreamID = upstreamID
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case amountReturned = "amount_returned"
        case application
        case applicationFee = "application_fee"
        case charge
        case created
        case currency
        case customer
        case email
        case externalCouponCode = "external_coupon_code"
        case id
        case items
        case isLivemode = "livemode"
        case metadata
        case object
        case returns
        case selectedShippingMethod = "selected_shipping_method"
        case shipping
        case shippingMethods = "shipping_methods"
        case status
        case statusTransitions = "status_transitions"
        case updated
        case upstreamID = "upstream_id"
    }
}

/// A representation of the constituent items of any given order. Can be used to
/// represent [SKUs](https://stripe.com/docs/api#skus), shipping costs, or taxes owed on the order.
/// 
/// Related guide: [Orders](https://stripe.com/docs/orders/guide).
public struct OrderItem: Codable {
    /// A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item.
    public var amount: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// Description of the line item, meant to be displayable to the user (e.g., `"Express shipping"`).
    public var description: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU).
    public var parent: Parent?
    /// A positive integer representing the number of instances of `parent` that are included in this order item. Applicable/present only if `type` is `sku`.
    public var quantity: Int?
    /// The type of line item. One of `sku`, `tax`, `shipping`, or `discount`.
    public var type: String

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case orderItem = "order_item"
    }

    /// The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU).
    public struct Parent: Codable {
        public var string: String?
        /// Stores representations of [stock keeping units](http://en.wikipedia.org/wiki/Stock_keeping_unit).
        /// SKUs describe specific product variations, taking into account any combination of: attributes,
        /// currency, and cost. For example, a product may be a T-shirt, whereas a specific SKU represents
        /// the `size: large`, `color: red` version of that shirt.
        /// 
        /// Can also be used to manage inventory.
        /// 
        /// Related guide: [Tax, Shipping, and Inventory](https://stripe.com/docs/orders).
        public var sku: Sku?

        public init(string: String? = nil, sku: Sku? = nil) {
            self.string = string
            self.sku = sku
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.sku = try? container.decode(Sku.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = sku { try container.encode(value) }
        }
    }

    public init(amount: Int, currency: String, description: String, object: Object, parent: Parent? = nil, quantity: Int? = nil, type: String) {
        self.amount = amount
        self.currency = currency
        self.description = description
        self.object = object
        self.parent = parent
        self.quantity = quantity
        self.type = type
    }
}

/// A return represents the full or partial return of a number of [order items](https://stripe.com/docs/api#order_items).
/// Returns always belong to an order, and may optionally contain a refund.
/// 
/// Related guide: [Handling Returns](https://stripe.com/docs/orders/guide#handling-returns).
public struct OrderReturn: Codable {
    /// A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the returned line item.
    public var amount: Int
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// Unique identifier for the object.
    public var id: String
    /// The items included in this order return.
    public var items: [OrderItem]
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The order that this return includes items from.
    public var order: Order?
    /// The ID of the refund issued for this return.
    public var refund: Refund?

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case orderReturn = "order_return"
    }

    /// The order that this return includes items from.
    public final class Order: Codable {
        public var string: String?
        public var order: StripeAPI.Order?

        public init(string: String? = nil, order: StripeAPI.Order? = nil) {
            self.string = string
            self.order = order
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.order = try? container.decode(StripeAPI.Order.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = order { try container.encode(value) }
        }
    }

    /// The ID of the refund issued for this return.
    public final class Refund: Codable {
        public var string: String?
        public var refund: StripeAPI.Refund?

        public init(string: String? = nil, refund: StripeAPI.Refund? = nil) {
            self.string = string
            self.refund = refund
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.refund = try? container.decode(StripeAPI.Refund.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = refund { try container.encode(value) }
        }
    }

    public init(amount: Int, created: Int, currency: String, id: String, items: [OrderItem], isLivemode: Bool, object: Object, order: Order? = nil, refund: Refund? = nil) {
        self.amount = amount
        self.created = created
        self.currency = currency
        self.id = id
        self.items = items
        self.isLivemode = isLivemode
        self.object = object
        self.order = order
        self.refund = refund
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case created
        case currency
        case id
        case items
        case isLivemode = "livemode"
        case object
        case order
        case refund
    }
}

public struct PackageDimensions: Codable {
    /// Height, in inches.
    public var height: Double
    /// Length, in inches.
    public var length: Double
    /// Weight, in ounces.
    public var weight: Double
    /// Width, in inches.
    public var width: Double

    public init(height: Double, length: Double, weight: Double, width: Double) {
        self.height = height
        self.length = length
        self.weight = weight
        self.width = width
    }
}

public struct PaymentFlowsAutomaticPaymentMethodsPaymentIntent: Codable {
    /// Automatically calculates compatible payment methods
    public var isEnabled: Bool

    public init(isEnabled: Bool) {
        self.isEnabled = isEnabled
    }

    private enum CodingKeys: String, CodingKey {
        case isEnabled = "enabled"
    }
}

public struct PaymentFlowsPrivatePaymentMethodsAlipayDetails: Codable {
    /// Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same.
    public var buyerID: String?
    /// Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same.
    public var fingerprint: String?
    /// Transaction ID of this particular Alipay transaction.
    public var transactionID: String?

    public init(buyerID: String? = nil, fingerprint: String? = nil, transactionID: String? = nil) {
        self.buyerID = buyerID
        self.fingerprint = fingerprint
        self.transactionID = transactionID
    }

    private enum CodingKeys: String, CodingKey {
        case buyerID = "buyer_id"
        case fingerprint
        case transactionID = "transaction_id"
    }
}

public struct PaymentFlowsPrivatePaymentMethodsKlarnaDob: Codable {
    /// The day of birth, between 1 and 31.
    public var day: Int?
    /// The month of birth, between 1 and 12.
    public var month: Int?
    /// The four-digit year of birth.
    public var year: Int?

    public init(day: Int? = nil, month: Int? = nil, year: Int? = nil) {
        self.day = day
        self.month = month
        self.year = year
    }
}

/// A PaymentIntent guides you through the process of collecting a payment from your customer.
/// We recommend that you create exactly one PaymentIntent for each order or
/// customer session in your system. You can reference the PaymentIntent later to
/// see the history of payment attempts for a particular session.
/// 
/// A PaymentIntent transitions through
/// [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
/// throughout its lifetime as it interfaces with Stripe.js to perform
/// authentication flows and ultimately creates at most one successful charge.
/// 
/// Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents).
public final class PaymentIntent: Codable {
    /// Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
    public var amount: Int
    /// Amount that can be captured from this PaymentIntent.
    public var amountCapturable: Int?
    /// Amount that was collected by this PaymentIntent.
    public var amountReceived: Int?
    /// ID of the Connect application that created the PaymentIntent.
    public var application: Application?
    /// The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
    public var applicationFeeAmount: Int?
    /// Settings to configure compatible payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods)
    public var automaticPaymentMethods: AutomaticPaymentMethods?
    /// Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.
    public var canceledAt: Int?
    /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`).
    public var cancellationReason: CancellationReason?
    /// Controls when the funds will be captured from the customer's account.
    public var captureMethod: CaptureMethod
    /// PaymentFlowsPaymentIntentResourceChargeList
    ///
    /// Charges that were created by this PaymentIntent, if any.
    public var charges: Charges?
    /// The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key. 
    /// 
    /// The client secret can be used to complete a payment from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
    /// 
    /// Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?integration=elements) and learn about how `client_secret` should be handled.
    public var clientSecret: String?
    public var confirmationMethod: ConfirmationMethod
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// ID of the Customer this PaymentIntent belongs to, if one exists.
    /// 
    /// Payment methods attached to other Customers cannot be used with this PaymentIntent.
    /// 
    /// If present in combination with [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage), this PaymentIntent's payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.
    public var customer: Customer?
    /// An arbitrary string attached to the object. Often useful for displaying to users.
    public var description: String?
    /// Unique identifier for the object.
    public var id: String
    /// ID of the invoice that created this PaymentIntent, if it exists.
    public var invoice: Invoice?
    /// The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.
    public var lastPaymentError: LastPaymentError?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. For more information, see the [documentation](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata).
    public var metadata: [String: String]?
    /// If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source.
    public var nextAction: NextAction?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The account (if any) for which the funds of the PaymentIntent are intended. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.
    public var onBehalfOf: OnBehalfOf?
    /// ID of the payment method used in this PaymentIntent.
    public var paymentMethod: PaymentMethod?
    /// Payment-method-specific configuration for this PaymentIntent.
    public var paymentMethodOptions: PaymentMethodOptions?
    /// The list of payment method types (e.g. card) that this PaymentIntent is allowed to use.
    public var paymentMethodTypes: [String]
    /// If present, this property tells you about the processing state of the payment.
    public var processing: Processing?
    /// Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).
    public var receiptEmail: String?
    /// ID of the review associated with this PaymentIntent, if any.
    public var review: Review?
    /// Indicates that you intend to make future payments with this PaymentIntent's payment method.
    /// 
    /// Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
    /// 
    /// When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
    public var setupFutureUsage: SetupFutureUsage?
    /// Shipping information for this PaymentIntent.
    public var shipping: Shipping?
    /// For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters.
    public var statementDescriptor: String?
    /// Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
    public var statementDescriptorSuffix: String?
    /// Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
    public var status: Status
    /// The data with which to automatically create a Transfer when the payment is finalized. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.
    public var transferData: TransferData?
    /// A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.
    public var transferGroup: String?

    /// ID of the Connect application that created the PaymentIntent.
    public final class Application: Codable {
        public var string: String?
        public var application: StripeAPI.Application?

        public init(string: String? = nil, application: StripeAPI.Application? = nil) {
            self.string = string
            self.application = application
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.application = try? container.decode(StripeAPI.Application.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = application { try container.encode(value) }
        }
    }

    /// Settings to configure compatible payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods)
    public struct AutomaticPaymentMethods: Codable {
        public var paymentFlowsAutomaticPaymentMethodsPaymentIntent: PaymentFlowsAutomaticPaymentMethodsPaymentIntent?

        public init(paymentFlowsAutomaticPaymentMethodsPaymentIntent: PaymentFlowsAutomaticPaymentMethodsPaymentIntent? = nil) {
            self.paymentFlowsAutomaticPaymentMethodsPaymentIntent = paymentFlowsAutomaticPaymentMethodsPaymentIntent
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentFlowsAutomaticPaymentMethodsPaymentIntent = try? container.decode(PaymentFlowsAutomaticPaymentMethodsPaymentIntent.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentFlowsAutomaticPaymentMethodsPaymentIntent { try container.encode(value) }
        }
    }

    /// Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`).
    public enum CancellationReason: String, Codable, CaseIterable {
        case abandoned
        case automatic
        case duplicate
        case failedInvoice = "failed_invoice"
        case fraudulent
        case requestedByCustomer = "requested_by_customer"
        case voidInvoice = "void_invoice"
    }

    /// Controls when the funds will be captured from the customer's account.
    public enum CaptureMethod: String, Codable, CaseIterable {
        case automatic
        case manual
    }

    /// PaymentFlowsPaymentIntentResourceChargeList
    ///
    /// Charges that were created by this PaymentIntent, if any.
    public struct Charges: Codable {
        /// This list only contains the latest charge, even if there were previously multiple unsuccessful charges. To view all previous charges for a PaymentIntent, you can filter the charges list using the `payment_intent` [parameter](https://stripe.com/docs/api/charges/list#list_charges-payment_intent).
        public var data: [Charge]
        /// True if this list has another page of items after this one that can be fetched.
        public var hasMore: Bool
        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public var object: Object
        /// The URL where this list can be accessed.
        public var url: String

        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public enum Object: String, Codable, CaseIterable {
            case list
        }

        public init(data: [Charge], hasMore: Bool, object: Object, url: String) {
            self.data = data
            self.hasMore = hasMore
            self.object = object
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case data
            case hasMore = "has_more"
            case object
            case url
        }
    }

    public enum ConfirmationMethod: String, Codable, CaseIterable {
        case automatic
        case manual
    }

    /// ID of the Customer this PaymentIntent belongs to, if one exists.
    /// 
    /// Payment methods attached to other Customers cannot be used with this PaymentIntent.
    /// 
    /// If present in combination with [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage), this PaymentIntent's payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.
    public final class Customer: Codable {
        public var string: String?
        public var customer: StripeAPI.Customer?
        public var deletedCustomer: DeletedCustomer?

        public init(string: String? = nil, customer: StripeAPI.Customer? = nil, deletedCustomer: DeletedCustomer? = nil) {
            self.string = string
            self.customer = customer
            self.deletedCustomer = deletedCustomer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeAPI.Customer.self)
            self.deletedCustomer = try? container.decode(DeletedCustomer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
            if let value = deletedCustomer { try container.encode(value) }
        }
    }

    /// ID of the invoice that created this PaymentIntent, if it exists.
    public final class Invoice: Codable {
        public var string: String?
        public var invoice: StripeAPI.Invoice?

        public init(string: String? = nil, invoice: StripeAPI.Invoice? = nil) {
            self.string = string
            self.invoice = invoice
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.invoice = try? container.decode(StripeAPI.Invoice.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = invoice { try container.encode(value) }
        }
    }

    /// The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.
    public struct LastPaymentError: Codable {
        public var apiErrors: APIErrors?

        public init(apiErrors: APIErrors? = nil) {
            self.apiErrors = apiErrors
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.apiErrors = try? container.decode(APIErrors.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = apiErrors { try container.encode(value) }
        }
    }

    /// If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source.
    public struct NextAction: Codable {
        public var paymentIntentNextAction: PaymentIntentNextAction?

        public init(paymentIntentNextAction: PaymentIntentNextAction? = nil) {
            self.paymentIntentNextAction = paymentIntentNextAction
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentIntentNextAction = try? container.decode(PaymentIntentNextAction.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentIntentNextAction { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case paymentIntent = "payment_intent"
    }

    /// The account (if any) for which the funds of the PaymentIntent are intended. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.
    public struct OnBehalfOf: Codable {
        public var string: String?
        public var account: Account?

        public init(string: String? = nil, account: Account? = nil) {
            self.string = string
            self.account = account
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.account = try? container.decode(Account.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = account { try container.encode(value) }
        }
    }

    /// ID of the payment method used in this PaymentIntent.
    public final class PaymentMethod: Codable {
        public var string: String?
        public var paymentMethod: StripeAPI.PaymentMethod?

        public init(string: String? = nil, paymentMethod: StripeAPI.PaymentMethod? = nil) {
            self.string = string
            self.paymentMethod = paymentMethod
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentMethod = try? container.decode(StripeAPI.PaymentMethod.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentMethod { try container.encode(value) }
        }
    }

    /// Payment-method-specific configuration for this PaymentIntent.
    public struct PaymentMethodOptions: Codable {
        public var paymentIntentPaymentMethodOptions: PaymentIntentPaymentMethodOptions?

        public init(paymentIntentPaymentMethodOptions: PaymentIntentPaymentMethodOptions? = nil) {
            self.paymentIntentPaymentMethodOptions = paymentIntentPaymentMethodOptions
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentIntentPaymentMethodOptions = try? container.decode(PaymentIntentPaymentMethodOptions.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentIntentPaymentMethodOptions { try container.encode(value) }
        }
    }

    /// If present, this property tells you about the processing state of the payment.
    public struct Processing: Codable {
        public var paymentIntentProcessing: PaymentIntentProcessing?

        public init(paymentIntentProcessing: PaymentIntentProcessing? = nil) {
            self.paymentIntentProcessing = paymentIntentProcessing
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentIntentProcessing = try? container.decode(PaymentIntentProcessing.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentIntentProcessing { try container.encode(value) }
        }
    }

    /// ID of the review associated with this PaymentIntent, if any.
    public final class Review: Codable {
        public var string: String?
        public var review: StripeAPI.Review?

        public init(string: String? = nil, review: StripeAPI.Review? = nil) {
            self.string = string
            self.review = review
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.review = try? container.decode(StripeAPI.Review.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = review { try container.encode(value) }
        }
    }

    /// Indicates that you intend to make future payments with this PaymentIntent's payment method.
    /// 
    /// Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
    /// 
    /// When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
    public enum SetupFutureUsage: String, Codable, CaseIterable {
        case offSession = "off_session"
        case onSession = "on_session"
    }

    /// Shipping information for this PaymentIntent.
    public final class Shipping: Codable {
        public var shipping: StripeAPI.Shipping?

        public init(shipping: StripeAPI.Shipping? = nil) {
            self.shipping = shipping
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.shipping = try? container.decode(StripeAPI.Shipping.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = shipping { try container.encode(value) }
        }
    }

    /// Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
    public enum Status: String, Codable, CaseIterable {
        case canceled
        case processing
        case requiresAction = "requires_action"
        case requiresCapture = "requires_capture"
        case requiresConfirmation = "requires_confirmation"
        case requiresPaymentMethod = "requires_payment_method"
        case succeeded
    }

    /// The data with which to automatically create a Transfer when the payment is finalized. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.
    public final class TransferData: Codable {
        public var transferData: StripeAPI.TransferData?

        public init(transferData: StripeAPI.TransferData? = nil) {
            self.transferData = transferData
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.transferData = try? container.decode(StripeAPI.TransferData.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = transferData { try container.encode(value) }
        }
    }

    public init(amount: Int, amountCapturable: Int? = nil, amountReceived: Int? = nil, application: Application? = nil, applicationFeeAmount: Int? = nil, automaticPaymentMethods: AutomaticPaymentMethods? = nil, canceledAt: Int? = nil, cancellationReason: CancellationReason? = nil, captureMethod: CaptureMethod, charges: Charges? = nil, clientSecret: String? = nil, confirmationMethod: ConfirmationMethod, created: Int, currency: String, customer: Customer? = nil, description: String? = nil, id: String, invoice: Invoice? = nil, lastPaymentError: LastPaymentError? = nil, isLivemode: Bool, metadata: [String: String]? = nil, nextAction: NextAction? = nil, object: Object, onBehalfOf: OnBehalfOf? = nil, paymentMethod: PaymentMethod? = nil, paymentMethodOptions: PaymentMethodOptions? = nil, paymentMethodTypes: [String], processing: Processing? = nil, receiptEmail: String? = nil, review: Review? = nil, setupFutureUsage: SetupFutureUsage? = nil, shipping: Shipping? = nil, statementDescriptor: String? = nil, statementDescriptorSuffix: String? = nil, status: Status, transferData: TransferData? = nil, transferGroup: String? = nil) {
        self.amount = amount
        self.amountCapturable = amountCapturable
        self.amountReceived = amountReceived
        self.application = application
        self.applicationFeeAmount = applicationFeeAmount
        self.automaticPaymentMethods = automaticPaymentMethods
        self.canceledAt = canceledAt
        self.cancellationReason = cancellationReason
        self.captureMethod = captureMethod
        self.charges = charges
        self.clientSecret = clientSecret
        self.confirmationMethod = confirmationMethod
        self.created = created
        self.currency = currency
        self.customer = customer
        self.description = description
        self.id = id
        self.invoice = invoice
        self.lastPaymentError = lastPaymentError
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.nextAction = nextAction
        self.object = object
        self.onBehalfOf = onBehalfOf
        self.paymentMethod = paymentMethod
        self.paymentMethodOptions = paymentMethodOptions
        self.paymentMethodTypes = paymentMethodTypes
        self.processing = processing
        self.receiptEmail = receiptEmail
        self.review = review
        self.setupFutureUsage = setupFutureUsage
        self.shipping = shipping
        self.statementDescriptor = statementDescriptor
        self.statementDescriptorSuffix = statementDescriptorSuffix
        self.status = status
        self.transferData = transferData
        self.transferGroup = transferGroup
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case amountCapturable = "amount_capturable"
        case amountReceived = "amount_received"
        case application
        case applicationFeeAmount = "application_fee_amount"
        case automaticPaymentMethods = "automatic_payment_methods"
        case canceledAt = "canceled_at"
        case cancellationReason = "cancellation_reason"
        case captureMethod = "capture_method"
        case charges
        case clientSecret = "client_secret"
        case confirmationMethod = "confirmation_method"
        case created
        case currency
        case customer
        case description
        case id
        case invoice
        case lastPaymentError = "last_payment_error"
        case isLivemode = "livemode"
        case metadata
        case nextAction = "next_action"
        case object
        case onBehalfOf = "on_behalf_of"
        case paymentMethod = "payment_method"
        case paymentMethodOptions = "payment_method_options"
        case paymentMethodTypes = "payment_method_types"
        case processing
        case receiptEmail = "receipt_email"
        case review
        case setupFutureUsage = "setup_future_usage"
        case shipping
        case statementDescriptor = "statement_descriptor"
        case statementDescriptorSuffix = "statement_descriptor_suffix"
        case status
        case transferData = "transfer_data"
        case transferGroup = "transfer_group"
    }
}

public struct PaymentIntentNextAction: Codable {
    /// PaymentIntentNextActionAlipayHandleRedirect
    public var alipayHandleRedirect: PaymentIntentNextActionAlipayHandleRedirect?
    /// Payment_intent_next_action_boleto
    public var boletoDisplayDetails: PaymentIntentNextActionBoleto?
    /// PaymentIntentNextActionDisplayOxxoDetails
    public var oxxoDisplayDetails: PaymentIntentNextActionDisplayOxxoDetails?
    /// PaymentIntentNextActionRedirectToUrl
    public var redirectToURL: PaymentIntentNextActionRedirectToURL?
    /// Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`.
    public var type: String
    /// When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.
    public var useStripeSdk: [String: AnyJSON]?
    /// PaymentIntentNextActionVerifyWithMicrodeposits
    public var verifyWithMicrodeposits: PaymentIntentNextActionVerifyWithMicrodeposits?
    /// PaymentIntentNextActionWechatPayDisplayQrCode
    public var wechatPayDisplayQrCode: PaymentIntentNextActionWechatPayDisplayQrCode?
    /// PaymentIntentNextActionWechatPayRedirectToAndroidApp
    public var wechatPayRedirectToAndroidApp: PaymentIntentNextActionWechatPayRedirectToAndroidApp?
    /// PaymentIntentNextActionWechatPayRedirectToIOSApp
    public var wechatPayRedirectToIosApp: PaymentIntentNextActionWechatPayRedirectToIosApp?

    public init(alipayHandleRedirect: PaymentIntentNextActionAlipayHandleRedirect? = nil, boletoDisplayDetails: PaymentIntentNextActionBoleto? = nil, oxxoDisplayDetails: PaymentIntentNextActionDisplayOxxoDetails? = nil, redirectToURL: PaymentIntentNextActionRedirectToURL? = nil, type: String, useStripeSdk: [String: AnyJSON]? = nil, verifyWithMicrodeposits: PaymentIntentNextActionVerifyWithMicrodeposits? = nil, wechatPayDisplayQrCode: PaymentIntentNextActionWechatPayDisplayQrCode? = nil, wechatPayRedirectToAndroidApp: PaymentIntentNextActionWechatPayRedirectToAndroidApp? = nil, wechatPayRedirectToIosApp: PaymentIntentNextActionWechatPayRedirectToIosApp? = nil) {
        self.alipayHandleRedirect = alipayHandleRedirect
        self.boletoDisplayDetails = boletoDisplayDetails
        self.oxxoDisplayDetails = oxxoDisplayDetails
        self.redirectToURL = redirectToURL
        self.type = type
        self.useStripeSdk = useStripeSdk
        self.verifyWithMicrodeposits = verifyWithMicrodeposits
        self.wechatPayDisplayQrCode = wechatPayDisplayQrCode
        self.wechatPayRedirectToAndroidApp = wechatPayRedirectToAndroidApp
        self.wechatPayRedirectToIosApp = wechatPayRedirectToIosApp
    }

    private enum CodingKeys: String, CodingKey {
        case alipayHandleRedirect = "alipay_handle_redirect"
        case boletoDisplayDetails = "boleto_display_details"
        case oxxoDisplayDetails = "oxxo_display_details"
        case redirectToURL = "redirect_to_url"
        case type
        case useStripeSdk = "use_stripe_sdk"
        case verifyWithMicrodeposits = "verify_with_microdeposits"
        case wechatPayDisplayQrCode = "wechat_pay_display_qr_code"
        case wechatPayRedirectToAndroidApp = "wechat_pay_redirect_to_android_app"
        case wechatPayRedirectToIosApp = "wechat_pay_redirect_to_ios_app"
    }
}

public struct PaymentIntentNextActionAlipayHandleRedirect: Codable {
    /// The native data to be used with Alipay SDK you must redirect your customer to in order to authenticate the payment in an Android App.
    public var nativeData: String?
    /// The native URL you must redirect your customer to in order to authenticate the payment in an iOS App.
    public var nativeURL: String?
    /// If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
    public var returnURL: String?
    /// The URL you must redirect your customer to in order to authenticate the payment.
    public var url: String?

    public init(nativeData: String? = nil, nativeURL: String? = nil, returnURL: String? = nil, url: String? = nil) {
        self.nativeData = nativeData
        self.nativeURL = nativeURL
        self.returnURL = returnURL
        self.url = url
    }

    private enum CodingKeys: String, CodingKey {
        case nativeData = "native_data"
        case nativeURL = "native_url"
        case returnURL = "return_url"
        case url
    }
}

/// Payment_intent_next_action_boleto
public struct PaymentIntentNextActionBoleto: Codable {
    /// The timestamp after which the boleto expires.
    public var expiresAt: Int?
    /// The URL to the hosted boleto voucher page, which allows customers to view the boleto voucher.
    public var hostedVoucherURL: String?
    /// The boleto number.
    public var number: String?
    /// The URL to the downloadable boleto voucher PDF.
    public var pdf: String?

    public init(expiresAt: Int? = nil, hostedVoucherURL: String? = nil, number: String? = nil, pdf: String? = nil) {
        self.expiresAt = expiresAt
        self.hostedVoucherURL = hostedVoucherURL
        self.number = number
        self.pdf = pdf
    }

    private enum CodingKeys: String, CodingKey {
        case expiresAt = "expires_at"
        case hostedVoucherURL = "hosted_voucher_url"
        case number
        case pdf
    }
}

public struct PaymentIntentNextActionDisplayOxxoDetails: Codable {
    /// The timestamp after which the OXXO voucher expires.
    public var expiresAfter: Int?
    /// The URL for the hosted OXXO voucher page, which allows customers to view and print an OXXO voucher.
    public var hostedVoucherURL: String?
    /// OXXO reference number.
    public var number: String?

    public init(expiresAfter: Int? = nil, hostedVoucherURL: String? = nil, number: String? = nil) {
        self.expiresAfter = expiresAfter
        self.hostedVoucherURL = hostedVoucherURL
        self.number = number
    }

    private enum CodingKeys: String, CodingKey {
        case expiresAfter = "expires_after"
        case hostedVoucherURL = "hosted_voucher_url"
        case number
    }
}

public struct PaymentIntentNextActionRedirectToURL: Codable {
    /// If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
    public var returnURL: String?
    /// The URL you must redirect your customer to in order to authenticate the payment.
    public var url: String?

    public init(returnURL: String? = nil, url: String? = nil) {
        self.returnURL = returnURL
        self.url = url
    }

    private enum CodingKeys: String, CodingKey {
        case returnURL = "return_url"
        case url
    }
}

public struct PaymentIntentNextActionVerifyWithMicrodeposits: Codable {
    /// The timestamp when the microdeposits are expected to land.
    public var arrivalDate: Int
    /// The URL for the hosted verification page, which allows customers to verify their bank account.
    public var hostedVerificationURL: String

    public init(arrivalDate: Int, hostedVerificationURL: String) {
        self.arrivalDate = arrivalDate
        self.hostedVerificationURL = hostedVerificationURL
    }

    private enum CodingKeys: String, CodingKey {
        case arrivalDate = "arrival_date"
        case hostedVerificationURL = "hosted_verification_url"
    }
}

public struct PaymentIntentNextActionWechatPayDisplayQrCode: Codable {
    /// The data being used to generate QR code
    public var data: String
    /// The base64 image data for a pre-generated QR code
    public var imageDataURL: String

    public init(data: String, imageDataURL: String) {
        self.data = data
        self.imageDataURL = imageDataURL
    }

    private enum CodingKeys: String, CodingKey {
        case data
        case imageDataURL = "image_data_url"
    }
}

public struct PaymentIntentNextActionWechatPayRedirectToAndroidApp: Codable {
    /// App_id is the APP ID registered on WeChat open platform
    public var appID: String
    /// Nonce_str is a random string
    public var nonceStr: String
    /// Package is static value
    public var package: String
    /// An unique merchant ID assigned by Wechat Pay
    public var partnerID: String
    /// An unique trading ID assigned by Wechat Pay
    public var prepayID: String
    /// A signature
    public var sign: String
    /// Specifies the current time in epoch format
    public var timestamp: String

    public init(appID: String, nonceStr: String, package: String, partnerID: String, prepayID: String, sign: String, timestamp: String) {
        self.appID = appID
        self.nonceStr = nonceStr
        self.package = package
        self.partnerID = partnerID
        self.prepayID = prepayID
        self.sign = sign
        self.timestamp = timestamp
    }

    private enum CodingKeys: String, CodingKey {
        case appID = "app_id"
        case nonceStr = "nonce_str"
        case package
        case partnerID = "partner_id"
        case prepayID = "prepay_id"
        case sign
        case timestamp
    }
}

public struct PaymentIntentNextActionWechatPayRedirectToIosApp: Codable {
    /// An universal link that redirect to Wechat Pay APP
    public var nativeURL: String

    public init(nativeURL: String) {
        self.nativeURL = nativeURL
    }

    private enum CodingKeys: String, CodingKey {
        case nativeURL = "native_url"
    }
}

public struct PaymentIntentPaymentMethodOptions: Codable {
    public var acssDebit: AcssDebit?
    public var afterpayClearpay: AfterpayClearpay?
    public var alipay: Alipay?
    public var bancontact: Bancontact?
    public var boleto: Boleto?
    public var card: Card?
    public var cardPresent: CardPresent?
    public var giropay: Giropay?
    public var ideal: Ideal?
    public var interacPresent: InteracPresent?
    public var klarna: Klarna?
    public var oxxo: Oxxo?
    public var p24: P24?
    public var sepaDebit: SepaDebit?
    public var sofort: Sofort?
    public var wechatPay: WechatPay?

    public struct AcssDebit: Codable {
        /// Payment_intent_payment_method_options_acss_debit
        public var paymentIntentPaymentMethodOptionsAcssDebit: PaymentIntentPaymentMethodOptionsAcssDebit?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentIntentPaymentMethodOptionsAcssDebit: PaymentIntentPaymentMethodOptionsAcssDebit? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentIntentPaymentMethodOptionsAcssDebit = paymentIntentPaymentMethodOptionsAcssDebit
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentIntentPaymentMethodOptionsAcssDebit = try? container.decode(PaymentIntentPaymentMethodOptionsAcssDebit.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentIntentPaymentMethodOptionsAcssDebit { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct AfterpayClearpay: Codable {
        /// Payment_method_options_afterpay_clearpay
        public var paymentMethodOptionsAfterpayClearpay: PaymentMethodOptionsAfterpayClearpay?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsAfterpayClearpay: PaymentMethodOptionsAfterpayClearpay? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsAfterpayClearpay = paymentMethodOptionsAfterpayClearpay
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsAfterpayClearpay = try? container.decode(PaymentMethodOptionsAfterpayClearpay.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsAfterpayClearpay { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Alipay: Codable {
        /// Payment_method_options_alipay
        public var object: [String: AnyJSON]?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(object: [String: AnyJSON]? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.object = object
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.object = try? container.decode([String: AnyJSON].self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = object { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Bancontact: Codable {
        /// Payment_method_options_bancontact
        public var paymentMethodOptionsBancontact: PaymentMethodOptionsBancontact?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsBancontact: PaymentMethodOptionsBancontact? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsBancontact = paymentMethodOptionsBancontact
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsBancontact = try? container.decode(PaymentMethodOptionsBancontact.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsBancontact { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Boleto: Codable {
        /// Payment_method_options_boleto
        public var paymentMethodOptionsBoleto: PaymentMethodOptionsBoleto?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsBoleto: PaymentMethodOptionsBoleto? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsBoleto = paymentMethodOptionsBoleto
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsBoleto = try? container.decode(PaymentMethodOptionsBoleto.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsBoleto { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Card: Codable {
        /// Payment_intent_payment_method_options_card
        public var paymentIntentPaymentMethodOptionsCard: PaymentIntentPaymentMethodOptionsCard?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentIntentPaymentMethodOptionsCard: PaymentIntentPaymentMethodOptionsCard? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentIntentPaymentMethodOptionsCard = paymentIntentPaymentMethodOptionsCard
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentIntentPaymentMethodOptionsCard = try? container.decode(PaymentIntentPaymentMethodOptionsCard.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentIntentPaymentMethodOptionsCard { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct CardPresent: Codable {
        /// Payment_method_options_card_present
        public var object: [String: AnyJSON]?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(object: [String: AnyJSON]? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.object = object
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.object = try? container.decode([String: AnyJSON].self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = object { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Giropay: Codable {
        /// Payment_method_options_giropay
        public var object: [String: AnyJSON]?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(object: [String: AnyJSON]? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.object = object
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.object = try? container.decode([String: AnyJSON].self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = object { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Ideal: Codable {
        /// Payment_method_options_ideal
        public var object: [String: AnyJSON]?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(object: [String: AnyJSON]? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.object = object
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.object = try? container.decode([String: AnyJSON].self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = object { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct InteracPresent: Codable {
        /// Payment_method_options_interac_present
        public var object: [String: AnyJSON]?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(object: [String: AnyJSON]? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.object = object
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.object = try? container.decode([String: AnyJSON].self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = object { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Klarna: Codable {
        /// Payment_method_options_klarna
        public var paymentMethodOptionsKlarna: PaymentMethodOptionsKlarna?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsKlarna: PaymentMethodOptionsKlarna? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsKlarna = paymentMethodOptionsKlarna
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsKlarna = try? container.decode(PaymentMethodOptionsKlarna.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsKlarna { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Oxxo: Codable {
        /// Payment_method_options_oxxo
        public var paymentMethodOptionsOxxo: PaymentMethodOptionsOxxo?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsOxxo: PaymentMethodOptionsOxxo? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsOxxo = paymentMethodOptionsOxxo
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsOxxo = try? container.decode(PaymentMethodOptionsOxxo.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsOxxo { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct P24: Codable {
        /// Payment_method_options_p24
        public var object: [String: AnyJSON]?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(object: [String: AnyJSON]? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.object = object
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.object = try? container.decode([String: AnyJSON].self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = object { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct SepaDebit: Codable {
        /// Payment_intent_payment_method_options_sepa_debit
        public var paymentIntentPaymentMethodOptionsSepaDebit: PaymentIntentPaymentMethodOptionsSepaDebit?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentIntentPaymentMethodOptionsSepaDebit: PaymentIntentPaymentMethodOptionsSepaDebit? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentIntentPaymentMethodOptionsSepaDebit = paymentIntentPaymentMethodOptionsSepaDebit
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentIntentPaymentMethodOptionsSepaDebit = try? container.decode(PaymentIntentPaymentMethodOptionsSepaDebit.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentIntentPaymentMethodOptionsSepaDebit { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct Sofort: Codable {
        /// Payment_method_options_sofort
        public var paymentMethodOptionsSofort: PaymentMethodOptionsSofort?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsSofort: PaymentMethodOptionsSofort? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsSofort = paymentMethodOptionsSofort
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsSofort = try? container.decode(PaymentMethodOptionsSofort.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsSofort { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public struct WechatPay: Codable {
        /// Payment_method_options_wechat_pay
        public var paymentMethodOptionsWechatPay: PaymentMethodOptionsWechatPay?
        public var paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient?

        public init(paymentMethodOptionsWechatPay: PaymentMethodOptionsWechatPay? = nil, paymentIntentTypeSpecificPaymentMethodOptionsClient: PaymentIntentTypeSpecificPaymentMethodOptionsClient? = nil) {
            self.paymentMethodOptionsWechatPay = paymentMethodOptionsWechatPay
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = paymentIntentTypeSpecificPaymentMethodOptionsClient
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsWechatPay = try? container.decode(PaymentMethodOptionsWechatPay.self)
            self.paymentIntentTypeSpecificPaymentMethodOptionsClient = try? container.decode(PaymentIntentTypeSpecificPaymentMethodOptionsClient.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsWechatPay { try container.encode(value) }
            if let value = paymentIntentTypeSpecificPaymentMethodOptionsClient { try container.encode(value) }
        }
    }

    public init(acssDebit: AcssDebit? = nil, afterpayClearpay: AfterpayClearpay? = nil, alipay: Alipay? = nil, bancontact: Bancontact? = nil, boleto: Boleto? = nil, card: Card? = nil, cardPresent: CardPresent? = nil, giropay: Giropay? = nil, ideal: Ideal? = nil, interacPresent: InteracPresent? = nil, klarna: Klarna? = nil, oxxo: Oxxo? = nil, p24: P24? = nil, sepaDebit: SepaDebit? = nil, sofort: Sofort? = nil, wechatPay: WechatPay? = nil) {
        self.acssDebit = acssDebit
        self.afterpayClearpay = afterpayClearpay
        self.alipay = alipay
        self.bancontact = bancontact
        self.boleto = boleto
        self.card = card
        self.cardPresent = cardPresent
        self.giropay = giropay
        self.ideal = ideal
        self.interacPresent = interacPresent
        self.klarna = klarna
        self.oxxo = oxxo
        self.p24 = p24
        self.sepaDebit = sepaDebit
        self.sofort = sofort
        self.wechatPay = wechatPay
    }

    private enum CodingKeys: String, CodingKey {
        case acssDebit = "acss_debit"
        case afterpayClearpay = "afterpay_clearpay"
        case alipay
        case bancontact
        case boleto
        case card
        case cardPresent = "card_present"
        case giropay
        case ideal
        case interacPresent = "interac_present"
        case klarna
        case oxxo
        case p24
        case sepaDebit = "sepa_debit"
        case sofort
        case wechatPay = "wechat_pay"
    }
}

/// Payment_intent_payment_method_options_acss_debit
public struct PaymentIntentPaymentMethodOptionsAcssDebit: Codable {
    /// Payment_intent_payment_method_options_mandate_options_acss_debit
    public var mandateOptions: PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit?
    /// Bank account verification method.
    public var verificationMethod: VerificationMethod?

    /// Bank account verification method.
    public enum VerificationMethod: String, Codable, CaseIterable {
        case automatic
        case instant
        case microdeposits
    }

    public init(mandateOptions: PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit? = nil, verificationMethod: VerificationMethod? = nil) {
        self.mandateOptions = mandateOptions
        self.verificationMethod = verificationMethod
    }

    private enum CodingKeys: String, CodingKey {
        case mandateOptions = "mandate_options"
        case verificationMethod = "verification_method"
    }
}

/// Payment_intent_payment_method_options_card
public struct PaymentIntentPaymentMethodOptionsCard: Codable {
    /// Installment details for this payment (Mexico only).
    /// 
    /// For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
    public var installments: Installments?
    /// Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time.
    public var network: Network?
    /// We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
    public var requestThreeDSecure: RequestThreeDSecure?
    /// Indicates that you intend to make future payments with this PaymentIntent's payment method.
    /// 
    /// Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
    /// 
    /// When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
    public var setupFutureUsage: SetupFutureUsage?

    /// Installment details for this payment (Mexico only).
    /// 
    /// For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
    public struct Installments: Codable {
        /// Payment_method_options_card_installments
        public var paymentMethodOptionsCardInstallments: PaymentMethodOptionsCardInstallments?

        public init(paymentMethodOptionsCardInstallments: PaymentMethodOptionsCardInstallments? = nil) {
            self.paymentMethodOptionsCardInstallments = paymentMethodOptionsCardInstallments
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodOptionsCardInstallments = try? container.decode(PaymentMethodOptionsCardInstallments.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodOptionsCardInstallments { try container.encode(value) }
        }
    }

    /// Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time.
    public enum Network: String, Codable, CaseIterable {
        case amex
        case cartesBancaires = "cartes_bancaires"
        case diners
        case discover
        case interac
        case jcb
        case mastercard
        case unionpay
        case unknown
        case visa
    }

    /// We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
    public enum RequestThreeDSecure: String, Codable, CaseIterable {
        case any
        case automatic
        case challengeOnly = "challenge_only"
    }

    /// Indicates that you intend to make future payments with this PaymentIntent's payment method.
    /// 
    /// Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
    /// 
    /// When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
    public enum SetupFutureUsage: String, Codable, CaseIterable {
        case `none`
        case offSession = "off_session"
        case onSession = "on_session"
    }

    public init(installments: Installments? = nil, network: Network? = nil, requestThreeDSecure: RequestThreeDSecure? = nil, setupFutureUsage: SetupFutureUsage? = nil) {
        self.installments = installments
        self.network = network
        self.requestThreeDSecure = requestThreeDSecure
        self.setupFutureUsage = setupFutureUsage
    }

    private enum CodingKeys: String, CodingKey {
        case installments
        case network
        case requestThreeDSecure = "request_three_d_secure"
        case setupFutureUsage = "setup_future_usage"
    }
}

/// Payment_intent_payment_method_options_mandate_options_acss_debit
public struct PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit: Codable {
    /// A URL for custom mandate text
    public var customMandateURL: String?
    /// Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
    public var intervalDescription: String?
    /// Payment schedule for the mandate.
    public var paymentSchedule: PaymentSchedule?
    /// Transaction type of the mandate.
    public var transactionType: TransactionType?

    /// Payment schedule for the mandate.
    public enum PaymentSchedule: String, Codable, CaseIterable {
        case combined
        case interval
        case sporadic
    }

    /// Transaction type of the mandate.
    public enum TransactionType: String, Codable, CaseIterable {
        case business
        case personal
    }

    public init(customMandateURL: String? = nil, intervalDescription: String? = nil, paymentSchedule: PaymentSchedule? = nil, transactionType: TransactionType? = nil) {
        self.customMandateURL = customMandateURL
        self.intervalDescription = intervalDescription
        self.paymentSchedule = paymentSchedule
        self.transactionType = transactionType
    }

    private enum CodingKeys: String, CodingKey {
        case customMandateURL = "custom_mandate_url"
        case intervalDescription = "interval_description"
        case paymentSchedule = "payment_schedule"
        case transactionType = "transaction_type"
    }
}

/// Payment_intent_payment_method_options_sepa_debit
public struct PaymentIntentPaymentMethodOptionsSepaDebit: Codable {
    /// Payment_intent_payment_method_options_mandate_options_sepa_debit
    public var mandateOptions: [String: AnyJSON]?

    public init(mandateOptions: [String: AnyJSON]? = nil) {
        self.mandateOptions = mandateOptions
    }

    private enum CodingKeys: String, CodingKey {
        case mandateOptions = "mandate_options"
    }
}

public struct PaymentIntentProcessing: Codable {
    /// PaymentIntentCardProcessing
    public var card: [String: AnyJSON]?
    /// Type of the next action to perform, one of `card`.
    public var type: String

    public init(card: [String: AnyJSON]? = nil, type: String) {
        self.card = card
        self.type = type
    }
}

public struct PaymentIntentTypeSpecificPaymentMethodOptionsClient: Codable {
    /// Indicates that you intend to make future payments with this PaymentIntent's payment method.
    /// 
    /// Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
    /// 
    /// When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
    public var setupFutureUsage: SetupFutureUsage?

    /// Indicates that you intend to make future payments with this PaymentIntent's payment method.
    /// 
    /// Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
    /// 
    /// When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
    public enum SetupFutureUsage: String, Codable, CaseIterable {
        case `none`
        case offSession = "off_session"
        case onSession = "on_session"
    }

    public init(setupFutureUsage: SetupFutureUsage? = nil) {
        self.setupFutureUsage = setupFutureUsage
    }

    private enum CodingKeys: String, CodingKey {
        case setupFutureUsage = "setup_future_usage"
    }
}

/// PaymentMethod objects represent your customer's payment instruments.
/// They can be used with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or saved to
/// Customer objects to store instrument details for future payments.
/// 
/// Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
public struct PaymentMethod: Codable {
    /// Payment_method_acss_debit
    public var acssDebit: PaymentMethodAcssDebit?
    /// Payment_method_afterpay_clearpay
    public var afterpayClearpay: [String: AnyJSON]?
    /// PaymentFlowsPrivatePaymentMethodsAlipay
    public var alipay: [String: AnyJSON]?
    /// Payment_method_au_becs_debit
    public var auBecsDebit: PaymentMethodAuBecsDebit?
    /// Payment_method_bacs_debit
    public var bacsDebit: PaymentMethodBacsDebit?
    /// Payment_method_bancontact
    public var bancontact: [String: AnyJSON]?
    /// Billing_details
    public var billingDetails: BillingDetails
    /// Payment_method_boleto
    public var boleto: PaymentMethodBoleto?
    public var card: PaymentMethodCard?
    /// Payment_method_card_present
    public var cardPresent: [String: AnyJSON]?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.
    public var customer: Customer?
    /// Payment_method_eps
    public var eps: PaymentMethodEps?
    /// Payment_method_fpx
    public var fpx: PaymentMethodFpx?
    /// Payment_method_giropay
    public var giropay: [String: AnyJSON]?
    /// Payment_method_grabpay
    public var grabpay: [String: AnyJSON]?
    /// Unique identifier for the object.
    public var id: String
    /// Payment_method_ideal
    public var ideal: PaymentMethodIdeal?
    /// Payment_method_interac_present
    public var interacPresent: [String: AnyJSON]?
    /// Payment_method_klarna
    public var klarna: PaymentMethodKlarna?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Payment_method_oxxo
    public var oxxo: [String: AnyJSON]?
    /// Payment_method_p24
    public var p24: PaymentMethodP24?
    public var sepaDebit: PaymentMethodSepaDebit?
    /// Payment_method_sofort
    public var sofort: PaymentMethodSofort?
    /// The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
    public var type: `Type`
    /// Payment_method_wechat_pay
    public var wechatPay: [String: AnyJSON]?

    /// The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.
    public final class Customer: Codable {
        public var string: String?
        public var customer: StripeAPI.Customer?

        public init(string: String? = nil, customer: StripeAPI.Customer? = nil) {
            self.string = string
            self.customer = customer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeAPI.Customer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case paymentMethod = "payment_method"
    }

    /// The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
    public enum `Type`: String, Codable, CaseIterable {
        case acssDebit = "acss_debit"
        case afterpayClearpay = "afterpay_clearpay"
        case alipay
        case auBecsDebit = "au_becs_debit"
        case bacsDebit = "bacs_debit"
        case bancontact
        case boleto
        case card
        case cardPresent = "card_present"
        case eps
        case fpx
        case giropay
        case grabpay
        case ideal
        case interacPresent = "interac_present"
        case klarna
        case oxxo
        case p24
        case sepaDebit = "sepa_debit"
        case sofort
        case wechatPay = "wechat_pay"
    }

    public init(acssDebit: PaymentMethodAcssDebit? = nil, afterpayClearpay: [String: AnyJSON]? = nil, alipay: [String: AnyJSON]? = nil, auBecsDebit: PaymentMethodAuBecsDebit? = nil, bacsDebit: PaymentMethodBacsDebit? = nil, bancontact: [String: AnyJSON]? = nil, billingDetails: BillingDetails, boleto: PaymentMethodBoleto? = nil, card: PaymentMethodCard? = nil, cardPresent: [String: AnyJSON]? = nil, created: Int, customer: Customer? = nil, eps: PaymentMethodEps? = nil, fpx: PaymentMethodFpx? = nil, giropay: [String: AnyJSON]? = nil, grabpay: [String: AnyJSON]? = nil, id: String, ideal: PaymentMethodIdeal? = nil, interacPresent: [String: AnyJSON]? = nil, klarna: PaymentMethodKlarna? = nil, isLivemode: Bool, metadata: [String: String]? = nil, object: Object, oxxo: [String: AnyJSON]? = nil, p24: PaymentMethodP24? = nil, sepaDebit: PaymentMethodSepaDebit? = nil, sofort: PaymentMethodSofort? = nil, type: `Type`, wechatPay: [String: AnyJSON]? = nil) {
        self.acssDebit = acssDebit
        self.afterpayClearpay = afterpayClearpay
        self.alipay = alipay
        self.auBecsDebit = auBecsDebit
        self.bacsDebit = bacsDebit
        self.bancontact = bancontact
        self.billingDetails = billingDetails
        self.boleto = boleto
        self.card = card
        self.cardPresent = cardPresent
        self.created = created
        self.customer = customer
        self.eps = eps
        self.fpx = fpx
        self.giropay = giropay
        self.grabpay = grabpay
        self.id = id
        self.ideal = ideal
        self.interacPresent = interacPresent
        self.klarna = klarna
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.oxxo = oxxo
        self.p24 = p24
        self.sepaDebit = sepaDebit
        self.sofort = sofort
        self.type = type
        self.wechatPay = wechatPay
    }

    private enum CodingKeys: String, CodingKey {
        case acssDebit = "acss_debit"
        case afterpayClearpay = "afterpay_clearpay"
        case alipay
        case auBecsDebit = "au_becs_debit"
        case bacsDebit = "bacs_debit"
        case bancontact
        case billingDetails = "billing_details"
        case boleto
        case card
        case cardPresent = "card_present"
        case created
        case customer
        case eps
        case fpx
        case giropay
        case grabpay
        case id
        case ideal
        case interacPresent = "interac_present"
        case klarna
        case isLivemode = "livemode"
        case metadata
        case object
        case oxxo
        case p24
        case sepaDebit = "sepa_debit"
        case sofort
        case type
        case wechatPay = "wechat_pay"
    }
}

/// Payment_method_acss_debit
public struct PaymentMethodAcssDebit: Codable {
    /// Name of the bank associated with the bank account.
    public var bankName: String?
    /// Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
    public var fingerprint: String?
    /// Institution number of the bank account.
    public var institutionNumber: String?
    /// Last four digits of the bank account number.
    public var last4: String?
    /// Transit number of the bank account.
    public var transitNumber: String?

    public init(bankName: String? = nil, fingerprint: String? = nil, institutionNumber: String? = nil, last4: String? = nil, transitNumber: String? = nil) {
        self.bankName = bankName
        self.fingerprint = fingerprint
        self.institutionNumber = institutionNumber
        self.last4 = last4
        self.transitNumber = transitNumber
    }

    private enum CodingKeys: String, CodingKey {
        case bankName = "bank_name"
        case fingerprint
        case institutionNumber = "institution_number"
        case last4
        case transitNumber = "transit_number"
    }
}

/// Payment_method_au_becs_debit
public struct PaymentMethodAuBecsDebit: Codable {
    /// Six-digit number identifying bank and branch associated with this bank account.
    public var bsbNumber: String?
    /// Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
    public var fingerprint: String?
    /// Last four digits of the bank account number.
    public var last4: String?

    public init(bsbNumber: String? = nil, fingerprint: String? = nil, last4: String? = nil) {
        self.bsbNumber = bsbNumber
        self.fingerprint = fingerprint
        self.last4 = last4
    }

    private enum CodingKeys: String, CodingKey {
        case bsbNumber = "bsb_number"
        case fingerprint
        case last4
    }
}

/// Payment_method_bacs_debit
public struct PaymentMethodBacsDebit: Codable {
    /// Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
    public var fingerprint: String?
    /// Last four digits of the bank account number.
    public var last4: String?
    /// Sort code of the bank account. (e.g., `10-20-30`)
    public var sortCode: String?

    public init(fingerprint: String? = nil, last4: String? = nil, sortCode: String? = nil) {
        self.fingerprint = fingerprint
        self.last4 = last4
        self.sortCode = sortCode
    }

    private enum CodingKeys: String, CodingKey {
        case fingerprint
        case last4
        case sortCode = "sort_code"
    }
}

/// Payment_method_boleto
public struct PaymentMethodBoleto: Codable {
    /// Uniquely identifies the customer tax id (CNPJ or CPF)
    public var taxID: String

    public init(taxID: String) {
        self.taxID = taxID
    }

    private enum CodingKeys: String, CodingKey {
        case taxID = "tax_id"
    }
}

/// Payment_method_card
public struct PaymentMethodCard: Codable {
    /// Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
    public var brand: String
    /// Checks on Card address and CVC if provided.
    public var checks: Checks?
    /// Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
    public var country: String?
    /// Two-digit number representing the card's expiration month.
    public var expMonth: Int
    /// Four-digit number representing the card's expiration year.
    public var expYear: Int
    /// Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
    /// 
    /// *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
    public var fingerprint: String?
    /// Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
    public var funding: String
    /// Details of the original PaymentMethod that created this object.
    public var generatedFrom: GeneratedFrom?
    /// The last four digits of the card.
    public var last4: String
    /// Contains information about card networks that can be used to process the payment.
    public var networks: Networks?
    /// Contains details on how this Card maybe be used for 3D Secure authentication.
    public var threeDSecureUsage: ThreeDSecureUsage?
    /// If this Card is part of a card wallet, this contains the details of the card wallet.
    public var wallet: Wallet?

    /// Checks on Card address and CVC if provided.
    public struct Checks: Codable {
        /// Payment_method_card_checks
        public var paymentMethodCardChecks: PaymentMethodCardChecks?

        public init(paymentMethodCardChecks: PaymentMethodCardChecks? = nil) {
            self.paymentMethodCardChecks = paymentMethodCardChecks
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodCardChecks = try? container.decode(PaymentMethodCardChecks.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodCardChecks { try container.encode(value) }
        }
    }

    /// Details of the original PaymentMethod that created this object.
    public struct GeneratedFrom: Codable {
        public var paymentMethodCardGeneratedCard: PaymentMethodCardGeneratedCard?

        public init(paymentMethodCardGeneratedCard: PaymentMethodCardGeneratedCard? = nil) {
            self.paymentMethodCardGeneratedCard = paymentMethodCardGeneratedCard
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodCardGeneratedCard = try? container.decode(PaymentMethodCardGeneratedCard.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodCardGeneratedCard { try container.encode(value) }
        }
    }

    /// Contains information about card networks that can be used to process the payment.
    public final class Networks: Codable {
        public var networks: StripeAPI.Networks?

        public init(networks: StripeAPI.Networks? = nil) {
            self.networks = networks
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.networks = try? container.decode(StripeAPI.Networks.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = networks { try container.encode(value) }
        }
    }

    /// Contains details on how this Card maybe be used for 3D Secure authentication.
    public final class ThreeDSecureUsage: Codable {
        /// Three_d_secure_usage
        public var threeDSecureUsage: StripeAPI.ThreeDSecureUsage?

        public init(threeDSecureUsage: StripeAPI.ThreeDSecureUsage? = nil) {
            self.threeDSecureUsage = threeDSecureUsage
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.threeDSecureUsage = try? container.decode(StripeAPI.ThreeDSecureUsage.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = threeDSecureUsage { try container.encode(value) }
        }
    }

    /// If this Card is part of a card wallet, this contains the details of the card wallet.
    public struct Wallet: Codable {
        /// Payment_method_card_wallet
        public var paymentMethodCardWallet: PaymentMethodCardWallet?

        public init(paymentMethodCardWallet: PaymentMethodCardWallet? = nil) {
            self.paymentMethodCardWallet = paymentMethodCardWallet
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodCardWallet = try? container.decode(PaymentMethodCardWallet.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodCardWallet { try container.encode(value) }
        }
    }

    public init(brand: String, checks: Checks? = nil, country: String? = nil, expMonth: Int, expYear: Int, fingerprint: String? = nil, funding: String, generatedFrom: GeneratedFrom? = nil, last4: String, networks: Networks? = nil, threeDSecureUsage: ThreeDSecureUsage? = nil, wallet: Wallet? = nil) {
        self.brand = brand
        self.checks = checks
        self.country = country
        self.expMonth = expMonth
        self.expYear = expYear
        self.fingerprint = fingerprint
        self.funding = funding
        self.generatedFrom = generatedFrom
        self.last4 = last4
        self.networks = networks
        self.threeDSecureUsage = threeDSecureUsage
        self.wallet = wallet
    }

    private enum CodingKeys: String, CodingKey {
        case brand
        case checks
        case country
        case expMonth = "exp_month"
        case expYear = "exp_year"
        case fingerprint
        case funding
        case generatedFrom = "generated_from"
        case last4
        case networks
        case threeDSecureUsage = "three_d_secure_usage"
        case wallet
    }
}

/// Payment_method_card_checks
public struct PaymentMethodCardChecks: Codable {
    /// If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
    public var addressLine1Check: String?
    /// If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
    public var addressPostalCodeCheck: String?
    /// If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
    public var cvcCheck: String?

    public init(addressLine1Check: String? = nil, addressPostalCodeCheck: String? = nil, cvcCheck: String? = nil) {
        self.addressLine1Check = addressLine1Check
        self.addressPostalCodeCheck = addressPostalCodeCheck
        self.cvcCheck = cvcCheck
    }

    private enum CodingKeys: String, CodingKey {
        case addressLine1Check = "address_line1_check"
        case addressPostalCodeCheck = "address_postal_code_check"
        case cvcCheck = "cvc_check"
    }
}

/// Payment_method_card_generated_card
public struct PaymentMethodCardGeneratedCard: Codable {
    /// The charge that created this object.
    public var charge: String?
    /// Transaction-specific details of the payment method used in the payment.
    public var paymentMethodDetails: PaymentMethodDetails?
    /// The ID of the SetupAttempt that generated this PaymentMethod, if any.
    public var setupAttempt: SetupAttempt?

    /// Transaction-specific details of the payment method used in the payment.
    public struct PaymentMethodDetails: Codable {
        /// Card_generated_from_payment_method_details
        public var cardGeneratedFromPaymentMethodDetails: CardGeneratedFromPaymentMethodDetails?

        public init(cardGeneratedFromPaymentMethodDetails: CardGeneratedFromPaymentMethodDetails? = nil) {
            self.cardGeneratedFromPaymentMethodDetails = cardGeneratedFromPaymentMethodDetails
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.cardGeneratedFromPaymentMethodDetails = try? container.decode(CardGeneratedFromPaymentMethodDetails.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = cardGeneratedFromPaymentMethodDetails { try container.encode(value) }
        }
    }

    /// The ID of the SetupAttempt that generated this PaymentMethod, if any.
    public final class SetupAttempt: Codable {
        public var string: String?
        public var setupAttempt: StripeAPI.SetupAttempt?

        public init(string: String? = nil, setupAttempt: StripeAPI.SetupAttempt? = nil) {
            self.string = string
            self.setupAttempt = setupAttempt
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.setupAttempt = try? container.decode(StripeAPI.SetupAttempt.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = setupAttempt { try container.encode(value) }
        }
    }

    public init(charge: String? = nil, paymentMethodDetails: PaymentMethodDetails? = nil, setupAttempt: SetupAttempt? = nil) {
        self.charge = charge
        self.paymentMethodDetails = paymentMethodDetails
        self.setupAttempt = setupAttempt
    }

    private enum CodingKeys: String, CodingKey {
        case charge
        case paymentMethodDetails = "payment_method_details"
        case setupAttempt = "setup_attempt"
    }
}

/// Payment_method_card_wallet
public struct PaymentMethodCardWallet: Codable {
    /// Payment_method_card_wallet_amex_express_checkout
    public var amexExpressCheckout: [String: AnyJSON]?
    /// Payment_method_card_wallet_apple_pay
    public var applePay: [String: AnyJSON]?
    /// (For tokenized numbers only.) The last four digits of the device account number.
    public var dynamicLast4: String?
    /// Payment_method_card_wallet_google_pay
    public var googlePay: [String: AnyJSON]?
    /// Payment_method_card_wallet_masterpass
    public var masterpass: PaymentMethodCardWalletMasterpass?
    /// Payment_method_card_wallet_samsung_pay
    public var samsungPay: [String: AnyJSON]?
    /// The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
    public var type: `Type`
    /// Payment_method_card_wallet_visa_checkout
    public var visaCheckout: PaymentMethodCardWalletVisaCheckout?

    /// The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
    public enum `Type`: String, Codable, CaseIterable {
        case amexExpressCheckout = "amex_express_checkout"
        case applePay = "apple_pay"
        case googlePay = "google_pay"
        case masterpass
        case samsungPay = "samsung_pay"
        case visaCheckout = "visa_checkout"
    }

    public init(amexExpressCheckout: [String: AnyJSON]? = nil, applePay: [String: AnyJSON]? = nil, dynamicLast4: String? = nil, googlePay: [String: AnyJSON]? = nil, masterpass: PaymentMethodCardWalletMasterpass? = nil, samsungPay: [String: AnyJSON]? = nil, type: `Type`, visaCheckout: PaymentMethodCardWalletVisaCheckout? = nil) {
        self.amexExpressCheckout = amexExpressCheckout
        self.applePay = applePay
        self.dynamicLast4 = dynamicLast4
        self.googlePay = googlePay
        self.masterpass = masterpass
        self.samsungPay = samsungPay
        self.type = type
        self.visaCheckout = visaCheckout
    }

    private enum CodingKeys: String, CodingKey {
        case amexExpressCheckout = "amex_express_checkout"
        case applePay = "apple_pay"
        case dynamicLast4 = "dynamic_last4"
        case googlePay = "google_pay"
        case masterpass
        case samsungPay = "samsung_pay"
        case type
        case visaCheckout = "visa_checkout"
    }
}

/// Payment_method_card_wallet_masterpass
public struct PaymentMethodCardWalletMasterpass: Codable {
    /// Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var billingAddress: BillingAddress?
    /// Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var email: String?
    /// Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var name: String?
    /// Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var shippingAddress: ShippingAddress?

    /// Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public struct BillingAddress: Codable {
        public var address: Address?

        public init(address: Address? = nil) {
            self.address = address
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.address = try? container.decode(Address.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = address { try container.encode(value) }
        }
    }

    /// Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public struct ShippingAddress: Codable {
        public var address: Address?

        public init(address: Address? = nil) {
            self.address = address
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.address = try? container.decode(Address.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = address { try container.encode(value) }
        }
    }

    public init(billingAddress: BillingAddress? = nil, email: String? = nil, name: String? = nil, shippingAddress: ShippingAddress? = nil) {
        self.billingAddress = billingAddress
        self.email = email
        self.name = name
        self.shippingAddress = shippingAddress
    }

    private enum CodingKeys: String, CodingKey {
        case billingAddress = "billing_address"
        case email
        case name
        case shippingAddress = "shipping_address"
    }
}

/// Payment_method_card_wallet_visa_checkout
public struct PaymentMethodCardWalletVisaCheckout: Codable {
    /// Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var billingAddress: BillingAddress?
    /// Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var email: String?
    /// Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var name: String?
    /// Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var shippingAddress: ShippingAddress?

    /// Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public struct BillingAddress: Codable {
        public var address: Address?

        public init(address: Address? = nil) {
            self.address = address
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.address = try? container.decode(Address.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = address { try container.encode(value) }
        }
    }

    /// Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public struct ShippingAddress: Codable {
        public var address: Address?

        public init(address: Address? = nil) {
            self.address = address
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.address = try? container.decode(Address.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = address { try container.encode(value) }
        }
    }

    public init(billingAddress: BillingAddress? = nil, email: String? = nil, name: String? = nil, shippingAddress: ShippingAddress? = nil) {
        self.billingAddress = billingAddress
        self.email = email
        self.name = name
        self.shippingAddress = shippingAddress
    }

    private enum CodingKeys: String, CodingKey {
        case billingAddress = "billing_address"
        case email
        case name
        case shippingAddress = "shipping_address"
    }
}

/// Payment_method_details
public struct PaymentMethodDetails: Codable {
    /// Payment_method_details_ach_credit_transfer
    public var achCreditTransfer: PaymentMethodDetailsAchCreditTransfer?
    /// Payment_method_details_ach_debit
    public var achDebit: PaymentMethodDetailsAchDebit?
    /// Payment_method_details_acss_debit
    public var acssDebit: PaymentMethodDetailsAcssDebit?
    /// Payment_method_details_afterpay_clearpay
    public var afterpayClearpay: PaymentMethodDetailsAfterpayClearpay?
    /// PaymentFlowsPrivatePaymentMethodsAlipayDetails
    public var alipay: PaymentFlowsPrivatePaymentMethodsAlipayDetails?
    /// Payment_method_details_au_becs_debit
    public var auBecsDebit: PaymentMethodDetailsAuBecsDebit?
    /// Payment_method_details_bacs_debit
    public var bacsDebit: PaymentMethodDetailsBacsDebit?
    public var bancontact: PaymentMethodDetailsBancontact?
    /// Payment_method_details_boleto
    public var boleto: PaymentMethodDetailsBoleto?
    /// Payment_method_details_card
    public var card: PaymentMethodDetailsCard?
    /// Payment_method_details_card_present
    public var cardPresent: PaymentMethodDetailsCardPresent?
    /// Payment_method_details_eps
    public var eps: PaymentMethodDetailsEps?
    /// Payment_method_details_fpx
    public var fpx: PaymentMethodDetailsFpx?
    /// Payment_method_details_giropay
    public var giropay: PaymentMethodDetailsGiropay?
    /// Payment_method_details_grabpay
    public var grabpay: PaymentMethodDetailsGrabpay?
    public var ideal: PaymentMethodDetailsIdeal?
    /// Payment_method_details_interac_present
    public var interacPresent: PaymentMethodDetailsInteracPresent?
    /// Payment_method_details_klarna
    public var klarna: PaymentMethodDetailsKlarna?
    /// Payment_method_details_multibanco
    public var multibanco: PaymentMethodDetailsMultibanco?
    /// Payment_method_details_oxxo
    public var oxxo: PaymentMethodDetailsOxxo?
    /// Payment_method_details_p24
    public var p24: PaymentMethodDetailsP24?
    /// Payment_method_details_sepa_debit
    public var sepaDebit: PaymentMethodDetailsSepaDebit?
    public var sofort: PaymentMethodDetailsSofort?
    /// Payment_method_details_stripe_account
    public var stripeAccount: [String: AnyJSON]?
    /// The type of transaction-specific details of the payment method used in the payment, one of `ach_credit_transfer`, `ach_debit`, `acss_debit`, `alipay`, `au_becs_debit`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `klarna`, `multibanco`, `p24`, `sepa_debit`, `sofort`, `stripe_account`, or `wechat`.
    /// An additional hash is included on `payment_method_details` with a name matching this value.
    /// It contains information specific to the payment method.
    public var type: String
    /// Payment_method_details_wechat
    public var wechat: [String: AnyJSON]?
    /// Payment_method_details_wechat_pay
    public var wechatPay: PaymentMethodDetailsWechatPay?

    public init(achCreditTransfer: PaymentMethodDetailsAchCreditTransfer? = nil, achDebit: PaymentMethodDetailsAchDebit? = nil, acssDebit: PaymentMethodDetailsAcssDebit? = nil, afterpayClearpay: PaymentMethodDetailsAfterpayClearpay? = nil, alipay: PaymentFlowsPrivatePaymentMethodsAlipayDetails? = nil, auBecsDebit: PaymentMethodDetailsAuBecsDebit? = nil, bacsDebit: PaymentMethodDetailsBacsDebit? = nil, bancontact: PaymentMethodDetailsBancontact? = nil, boleto: PaymentMethodDetailsBoleto? = nil, card: PaymentMethodDetailsCard? = nil, cardPresent: PaymentMethodDetailsCardPresent? = nil, eps: PaymentMethodDetailsEps? = nil, fpx: PaymentMethodDetailsFpx? = nil, giropay: PaymentMethodDetailsGiropay? = nil, grabpay: PaymentMethodDetailsGrabpay? = nil, ideal: PaymentMethodDetailsIdeal? = nil, interacPresent: PaymentMethodDetailsInteracPresent? = nil, klarna: PaymentMethodDetailsKlarna? = nil, multibanco: PaymentMethodDetailsMultibanco? = nil, oxxo: PaymentMethodDetailsOxxo? = nil, p24: PaymentMethodDetailsP24? = nil, sepaDebit: PaymentMethodDetailsSepaDebit? = nil, sofort: PaymentMethodDetailsSofort? = nil, stripeAccount: [String: AnyJSON]? = nil, type: String, wechat: [String: AnyJSON]? = nil, wechatPay: PaymentMethodDetailsWechatPay? = nil) {
        self.achCreditTransfer = achCreditTransfer
        self.achDebit = achDebit
        self.acssDebit = acssDebit
        self.afterpayClearpay = afterpayClearpay
        self.alipay = alipay
        self.auBecsDebit = auBecsDebit
        self.bacsDebit = bacsDebit
        self.bancontact = bancontact
        self.boleto = boleto
        self.card = card
        self.cardPresent = cardPresent
        self.eps = eps
        self.fpx = fpx
        self.giropay = giropay
        self.grabpay = grabpay
        self.ideal = ideal
        self.interacPresent = interacPresent
        self.klarna = klarna
        self.multibanco = multibanco
        self.oxxo = oxxo
        self.p24 = p24
        self.sepaDebit = sepaDebit
        self.sofort = sofort
        self.stripeAccount = stripeAccount
        self.type = type
        self.wechat = wechat
        self.wechatPay = wechatPay
    }

    private enum CodingKeys: String, CodingKey {
        case achCreditTransfer = "ach_credit_transfer"
        case achDebit = "ach_debit"
        case acssDebit = "acss_debit"
        case afterpayClearpay = "afterpay_clearpay"
        case alipay
        case auBecsDebit = "au_becs_debit"
        case bacsDebit = "bacs_debit"
        case bancontact
        case boleto
        case card
        case cardPresent = "card_present"
        case eps
        case fpx
        case giropay
        case grabpay
        case ideal
        case interacPresent = "interac_present"
        case klarna
        case multibanco
        case oxxo
        case p24
        case sepaDebit = "sepa_debit"
        case sofort
        case stripeAccount = "stripe_account"
        case type
        case wechat
        case wechatPay = "wechat_pay"
    }
}

/// Payment_method_details_ach_credit_transfer
public struct PaymentMethodDetailsAchCreditTransfer: Codable {
    /// Account number to transfer funds to.
    public var accountNumber: String?
    /// Name of the bank associated with the routing number.
    public var bankName: String?
    /// Routing transit number for the bank account to transfer funds to.
    public var routingNumber: String?
    /// SWIFT code of the bank associated with the routing number.
    public var swiftCode: String?

    public init(accountNumber: String? = nil, bankName: String? = nil, routingNumber: String? = nil, swiftCode: String? = nil) {
        self.accountNumber = accountNumber
        self.bankName = bankName
        self.routingNumber = routingNumber
        self.swiftCode = swiftCode
    }

    private enum CodingKeys: String, CodingKey {
        case accountNumber = "account_number"
        case bankName = "bank_name"
        case routingNumber = "routing_number"
        case swiftCode = "swift_code"
    }
}

/// Payment_method_details_ach_debit
public struct PaymentMethodDetailsAchDebit: Codable {
    /// Type of entity that holds the account. This can be either `individual` or `company`.
    public var accountHolderType: AccountHolderType?
    /// Name of the bank associated with the bank account.
    public var bankName: String?
    /// Two-letter ISO code representing the country the bank account is located in.
    public var country: String?
    /// Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
    public var fingerprint: String?
    /// Last four digits of the bank account number.
    public var last4: String?
    /// Routing transit number of the bank account.
    public var routingNumber: String?

    /// Type of entity that holds the account. This can be either `individual` or `company`.
    public enum AccountHolderType: String, Codable, CaseIterable {
        case company
        case individual
    }

    public init(accountHolderType: AccountHolderType? = nil, bankName: String? = nil, country: String? = nil, fingerprint: String? = nil, last4: String? = nil, routingNumber: String? = nil) {
        self.accountHolderType = accountHolderType
        self.bankName = bankName
        self.country = country
        self.fingerprint = fingerprint
        self.last4 = last4
        self.routingNumber = routingNumber
    }

    private enum CodingKeys: String, CodingKey {
        case accountHolderType = "account_holder_type"
        case bankName = "bank_name"
        case country
        case fingerprint
        case last4
        case routingNumber = "routing_number"
    }
}

/// Payment_method_details_acss_debit
public struct PaymentMethodDetailsAcssDebit: Codable {
    /// Name of the bank associated with the bank account.
    public var bankName: String?
    /// Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
    public var fingerprint: String?
    /// Institution number of the bank account
    public var institutionNumber: String?
    /// Last four digits of the bank account number.
    public var last4: String?
    /// ID of the mandate used to make this payment.
    public var mandate: String?
    /// Transit number of the bank account.
    public var transitNumber: String?

    public init(bankName: String? = nil, fingerprint: String? = nil, institutionNumber: String? = nil, last4: String? = nil, mandate: String? = nil, transitNumber: String? = nil) {
        self.bankName = bankName
        self.fingerprint = fingerprint
        self.institutionNumber = institutionNumber
        self.last4 = last4
        self.mandate = mandate
        self.transitNumber = transitNumber
    }

    private enum CodingKeys: String, CodingKey {
        case bankName = "bank_name"
        case fingerprint
        case institutionNumber = "institution_number"
        case last4
        case mandate
        case transitNumber = "transit_number"
    }
}

/// Payment_method_details_afterpay_clearpay
public struct PaymentMethodDetailsAfterpayClearpay: Codable {
    /// Order identifier shown to the merchant in Afterpay’s online portal.
    public var reference: String?

    public init(reference: String? = nil) {
        self.reference = reference
    }
}

/// Payment_method_details_au_becs_debit
public struct PaymentMethodDetailsAuBecsDebit: Codable {
    /// Bank-State-Branch number of the bank account.
    public var bsbNumber: String?
    /// Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
    public var fingerprint: String?
    /// Last four digits of the bank account number.
    public var last4: String?
    /// ID of the mandate used to make this payment.
    public var mandate: String?

    public init(bsbNumber: String? = nil, fingerprint: String? = nil, last4: String? = nil, mandate: String? = nil) {
        self.bsbNumber = bsbNumber
        self.fingerprint = fingerprint
        self.last4 = last4
        self.mandate = mandate
    }

    private enum CodingKeys: String, CodingKey {
        case bsbNumber = "bsb_number"
        case fingerprint
        case last4
        case mandate
    }
}

/// Payment_method_details_bacs_debit
public struct PaymentMethodDetailsBacsDebit: Codable {
    /// Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
    public var fingerprint: String?
    /// Last four digits of the bank account number.
    public var last4: String?
    /// ID of the mandate used to make this payment.
    public var mandate: String?
    /// Sort code of the bank account. (e.g., `10-20-30`)
    public var sortCode: String?

    public init(fingerprint: String? = nil, last4: String? = nil, mandate: String? = nil, sortCode: String? = nil) {
        self.fingerprint = fingerprint
        self.last4 = last4
        self.mandate = mandate
        self.sortCode = sortCode
    }

    private enum CodingKeys: String, CodingKey {
        case fingerprint
        case last4
        case mandate
        case sortCode = "sort_code"
    }
}

/// Payment_method_details_bancontact
public struct PaymentMethodDetailsBancontact: Codable {
    /// Bank code of bank associated with the bank account.
    public var bankCode: String?
    /// Name of the bank associated with the bank account.
    public var bankName: String?
    /// Bank Identifier Code of the bank associated with the bank account.
    public var bic: String?
    /// The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
    public var generatedSepaDebit: GeneratedSepaDebit?
    /// The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
    public var generatedSepaDebitMandate: GeneratedSepaDebitMandate?
    /// Last four characters of the IBAN.
    public var ibanLast4: String?
    /// Preferred language of the Bancontact authorization page that the customer is redirected to.
    /// Can be one of `en`, `de`, `fr`, or `nl`
    public var preferredLanguage: PreferredLanguage?
    /// Owner's verified full name. Values are verified or provided by Bancontact directly
    /// (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var verifiedName: String?

    /// The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
    public struct GeneratedSepaDebit: Codable {
        public var string: String?
        public var paymentMethod: PaymentMethod?

        public init(string: String? = nil, paymentMethod: PaymentMethod? = nil) {
            self.string = string
            self.paymentMethod = paymentMethod
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentMethod = try? container.decode(PaymentMethod.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentMethod { try container.encode(value) }
        }
    }

    /// The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
    public struct GeneratedSepaDebitMandate: Codable {
        public var string: String?
        public var mandate: Mandate?

        public init(string: String? = nil, mandate: Mandate? = nil) {
            self.string = string
            self.mandate = mandate
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.mandate = try? container.decode(Mandate.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = mandate { try container.encode(value) }
        }
    }

    /// Preferred language of the Bancontact authorization page that the customer is redirected to.
    /// Can be one of `en`, `de`, `fr`, or `nl`
    public enum PreferredLanguage: String, Codable, CaseIterable {
        case de
        case en
        case fr
        case nl
    }

    public init(bankCode: String? = nil, bankName: String? = nil, bic: String? = nil, generatedSepaDebit: GeneratedSepaDebit? = nil, generatedSepaDebitMandate: GeneratedSepaDebitMandate? = nil, ibanLast4: String? = nil, preferredLanguage: PreferredLanguage? = nil, verifiedName: String? = nil) {
        self.bankCode = bankCode
        self.bankName = bankName
        self.bic = bic
        self.generatedSepaDebit = generatedSepaDebit
        self.generatedSepaDebitMandate = generatedSepaDebitMandate
        self.ibanLast4 = ibanLast4
        self.preferredLanguage = preferredLanguage
        self.verifiedName = verifiedName
    }

    private enum CodingKeys: String, CodingKey {
        case bankCode = "bank_code"
        case bankName = "bank_name"
        case bic
        case generatedSepaDebit = "generated_sepa_debit"
        case generatedSepaDebitMandate = "generated_sepa_debit_mandate"
        case ibanLast4 = "iban_last4"
        case preferredLanguage = "preferred_language"
        case verifiedName = "verified_name"
    }
}

/// Payment_method_details_boleto
public struct PaymentMethodDetailsBoleto: Codable {
    /// The tax ID of the customer (CPF for individuals consumers or CNPJ for businesses consumers)
    public var taxID: String

    public init(taxID: String) {
        self.taxID = taxID
    }

    private enum CodingKeys: String, CodingKey {
        case taxID = "tax_id"
    }
}

/// Payment_method_details_card
public struct PaymentMethodDetailsCard: Codable {
    /// Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
    public var brand: String?
    /// Check results by Card networks on Card address and CVC at time of payment.
    public var checks: Checks?
    /// Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
    public var country: String?
    /// Two-digit number representing the card's expiration month.
    public var expMonth: Int
    /// Four-digit number representing the card's expiration year.
    public var expYear: Int
    /// Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
    /// 
    /// *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
    public var fingerprint: String?
    /// Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
    public var funding: String?
    /// Installment details for this payment (Mexico only).
    /// 
    /// For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
    public var installments: Installments?
    /// The last four digits of the card.
    public var last4: String?
    /// Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
    public var network: String?
    /// Populated if this transaction used 3D Secure authentication.
    public var threeDSecure: ThreeDSecure?
    /// If this Card is part of a card wallet, this contains the details of the card wallet.
    public var wallet: Wallet?

    /// Check results by Card networks on Card address and CVC at time of payment.
    public struct Checks: Codable {
        /// Payment_method_details_card_checks
        public var paymentMethodDetailsCardChecks: PaymentMethodDetailsCardChecks?

        public init(paymentMethodDetailsCardChecks: PaymentMethodDetailsCardChecks? = nil) {
            self.paymentMethodDetailsCardChecks = paymentMethodDetailsCardChecks
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodDetailsCardChecks = try? container.decode(PaymentMethodDetailsCardChecks.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodDetailsCardChecks { try container.encode(value) }
        }
    }

    /// Installment details for this payment (Mexico only).
    /// 
    /// For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
    public struct Installments: Codable {
        /// Payment_method_details_card_installments
        public var paymentMethodDetailsCardInstallments: PaymentMethodDetailsCardInstallments?

        public init(paymentMethodDetailsCardInstallments: PaymentMethodDetailsCardInstallments? = nil) {
            self.paymentMethodDetailsCardInstallments = paymentMethodDetailsCardInstallments
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodDetailsCardInstallments = try? container.decode(PaymentMethodDetailsCardInstallments.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodDetailsCardInstallments { try container.encode(value) }
        }
    }

    /// Populated if this transaction used 3D Secure authentication.
    public struct ThreeDSecure: Codable {
        /// Three_d_secure_details
        public var threeDSecureDetails: ThreeDSecureDetails?

        public init(threeDSecureDetails: ThreeDSecureDetails? = nil) {
            self.threeDSecureDetails = threeDSecureDetails
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.threeDSecureDetails = try? container.decode(ThreeDSecureDetails.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = threeDSecureDetails { try container.encode(value) }
        }
    }

    /// If this Card is part of a card wallet, this contains the details of the card wallet.
    public struct Wallet: Codable {
        /// Payment_method_details_card_wallet
        public var paymentMethodDetailsCardWallet: PaymentMethodDetailsCardWallet?

        public init(paymentMethodDetailsCardWallet: PaymentMethodDetailsCardWallet? = nil) {
            self.paymentMethodDetailsCardWallet = paymentMethodDetailsCardWallet
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodDetailsCardWallet = try? container.decode(PaymentMethodDetailsCardWallet.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodDetailsCardWallet { try container.encode(value) }
        }
    }

    public init(brand: String? = nil, checks: Checks? = nil, country: String? = nil, expMonth: Int, expYear: Int, fingerprint: String? = nil, funding: String? = nil, installments: Installments? = nil, last4: String? = nil, network: String? = nil, threeDSecure: ThreeDSecure? = nil, wallet: Wallet? = nil) {
        self.brand = brand
        self.checks = checks
        self.country = country
        self.expMonth = expMonth
        self.expYear = expYear
        self.fingerprint = fingerprint
        self.funding = funding
        self.installments = installments
        self.last4 = last4
        self.network = network
        self.threeDSecure = threeDSecure
        self.wallet = wallet
    }

    private enum CodingKeys: String, CodingKey {
        case brand
        case checks
        case country
        case expMonth = "exp_month"
        case expYear = "exp_year"
        case fingerprint
        case funding
        case installments
        case last4
        case network
        case threeDSecure = "three_d_secure"
        case wallet
    }
}

/// Payment_method_details_card_checks
public struct PaymentMethodDetailsCardChecks: Codable {
    /// If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
    public var addressLine1Check: String?
    /// If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
    public var addressPostalCodeCheck: String?
    /// If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
    public var cvcCheck: String?

    public init(addressLine1Check: String? = nil, addressPostalCodeCheck: String? = nil, cvcCheck: String? = nil) {
        self.addressLine1Check = addressLine1Check
        self.addressPostalCodeCheck = addressPostalCodeCheck
        self.cvcCheck = cvcCheck
    }

    private enum CodingKeys: String, CodingKey {
        case addressLine1Check = "address_line1_check"
        case addressPostalCodeCheck = "address_postal_code_check"
        case cvcCheck = "cvc_check"
    }
}

/// Payment_method_details_card_installments
public struct PaymentMethodDetailsCardInstallments: Codable {
    /// Installment plan selected for the payment.
    public var plan: Plan?

    /// Installment plan selected for the payment.
    public struct Plan: Codable {
        /// Payment_method_details_card_installments_plan
        public var paymentMethodDetailsCardInstallmentsPlan: PaymentMethodDetailsCardInstallmentsPlan?

        public init(paymentMethodDetailsCardInstallmentsPlan: PaymentMethodDetailsCardInstallmentsPlan? = nil) {
            self.paymentMethodDetailsCardInstallmentsPlan = paymentMethodDetailsCardInstallmentsPlan
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodDetailsCardInstallmentsPlan = try? container.decode(PaymentMethodDetailsCardInstallmentsPlan.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodDetailsCardInstallmentsPlan { try container.encode(value) }
        }
    }

    public init(plan: Plan? = nil) {
        self.plan = plan
    }
}

/// Payment_method_details_card_installments_plan
public struct PaymentMethodDetailsCardInstallmentsPlan: Codable {
    /// For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card.
    public var count: Int?
    /// For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
    /// One of `month`.
    public var interval: Interval?
    /// Type of installment plan, one of `fixed_count`.
    public var type: `Type`

    /// For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
    /// One of `month`.
    public enum Interval: String, Codable, CaseIterable {
        case month
    }

    /// Type of installment plan, one of `fixed_count`.
    public enum `Type`: String, Codable, CaseIterable {
        case fixedCount = "fixed_count"
    }

    public init(count: Int? = nil, interval: Interval? = nil, type: `Type`) {
        self.count = count
        self.interval = interval
        self.type = type
    }
}

/// Payment_method_details_card_present
public struct PaymentMethodDetailsCardPresent: Codable {
    /// The authorized amount
    public var amountAuthorized: Int?
    /// Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
    public var brand: String?
    /// The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
    public var cardholderName: String?
    /// Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
    public var country: String?
    /// Authorization response cryptogram.
    public var emvAuthData: String?
    /// Two-digit number representing the card's expiration month.
    public var expMonth: Int
    /// Four-digit number representing the card's expiration year.
    public var expYear: Int
    /// Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
    /// 
    /// *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
    public var fingerprint: String?
    /// Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
    public var funding: String?
    /// ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
    public var generatedCard: String?
    /// The last four digits of the card.
    public var last4: String?
    /// Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
    public var network: String?
    /// Defines whether the authorized amount can be over-captured or not
    public var isOvercaptureSupported: Bool?
    /// How card details were read in this transaction.
    public var readMethod: ReadMethod?
    /// A collection of fields required to be displayed on receipts. Only required for EMV transactions.
    public var receipt: Receipt?

    /// How card details were read in this transaction.
    public enum ReadMethod: String, Codable, CaseIterable {
        case contactEmv = "contact_emv"
        case contactlessEmv = "contactless_emv"
        case contactlessMagstripeMode = "contactless_magstripe_mode"
        case magneticStripeFallback = "magnetic_stripe_fallback"
        case magneticStripeTrack2 = "magnetic_stripe_track2"
    }

    /// A collection of fields required to be displayed on receipts. Only required for EMV transactions.
    public struct Receipt: Codable {
        /// Payment_method_details_card_present_receipt
        public var paymentMethodDetailsCardPresentReceipt: PaymentMethodDetailsCardPresentReceipt?

        public init(paymentMethodDetailsCardPresentReceipt: PaymentMethodDetailsCardPresentReceipt? = nil) {
            self.paymentMethodDetailsCardPresentReceipt = paymentMethodDetailsCardPresentReceipt
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodDetailsCardPresentReceipt = try? container.decode(PaymentMethodDetailsCardPresentReceipt.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodDetailsCardPresentReceipt { try container.encode(value) }
        }
    }

    public init(amountAuthorized: Int? = nil, brand: String? = nil, cardholderName: String? = nil, country: String? = nil, emvAuthData: String? = nil, expMonth: Int, expYear: Int, fingerprint: String? = nil, funding: String? = nil, generatedCard: String? = nil, last4: String? = nil, network: String? = nil, isOvercaptureSupported: Bool? = nil, readMethod: ReadMethod? = nil, receipt: Receipt? = nil) {
        self.amountAuthorized = amountAuthorized
        self.brand = brand
        self.cardholderName = cardholderName
        self.country = country
        self.emvAuthData = emvAuthData
        self.expMonth = expMonth
        self.expYear = expYear
        self.fingerprint = fingerprint
        self.funding = funding
        self.generatedCard = generatedCard
        self.last4 = last4
        self.network = network
        self.isOvercaptureSupported = isOvercaptureSupported
        self.readMethod = readMethod
        self.receipt = receipt
    }

    private enum CodingKeys: String, CodingKey {
        case amountAuthorized = "amount_authorized"
        case brand
        case cardholderName = "cardholder_name"
        case country
        case emvAuthData = "emv_auth_data"
        case expMonth = "exp_month"
        case expYear = "exp_year"
        case fingerprint
        case funding
        case generatedCard = "generated_card"
        case last4
        case network
        case isOvercaptureSupported = "overcapture_supported"
        case readMethod = "read_method"
        case receipt
    }
}

/// Payment_method_details_card_present_receipt
public struct PaymentMethodDetailsCardPresentReceipt: Codable {
    /// The type of account being debited or credited
    public var accountType: AccountType?
    /// EMV tag 9F26, cryptogram generated by the integrated circuit chip.
    public var applicationCryptogram: String?
    /// Mnenomic of the Application Identifier.
    public var applicationPreferredName: String?
    /// Identifier for this transaction.
    public var authorizationCode: String?
    /// EMV tag 8A. A code returned by the card issuer.
    public var authorizationResponseCode: String?
    /// How the cardholder verified ownership of the card.
    public var cardholderVerificationMethod: String?
    /// EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.
    public var dedicatedFileName: String?
    /// The outcome of a series of EMV functions performed by the card reader.
    public var terminalVerificationResults: String?
    /// An indication of various EMV functions performed during the transaction.
    public var transactionStatusInformation: String?

    /// The type of account being debited or credited
    public enum AccountType: String, Codable, CaseIterable {
        case checking
        case credit
        case prepaid
        case unknown
    }

    public init(accountType: AccountType? = nil, applicationCryptogram: String? = nil, applicationPreferredName: String? = nil, authorizationCode: String? = nil, authorizationResponseCode: String? = nil, cardholderVerificationMethod: String? = nil, dedicatedFileName: String? = nil, terminalVerificationResults: String? = nil, transactionStatusInformation: String? = nil) {
        self.accountType = accountType
        self.applicationCryptogram = applicationCryptogram
        self.applicationPreferredName = applicationPreferredName
        self.authorizationCode = authorizationCode
        self.authorizationResponseCode = authorizationResponseCode
        self.cardholderVerificationMethod = cardholderVerificationMethod
        self.dedicatedFileName = dedicatedFileName
        self.terminalVerificationResults = terminalVerificationResults
        self.transactionStatusInformation = transactionStatusInformation
    }

    private enum CodingKeys: String, CodingKey {
        case accountType = "account_type"
        case applicationCryptogram = "application_cryptogram"
        case applicationPreferredName = "application_preferred_name"
        case authorizationCode = "authorization_code"
        case authorizationResponseCode = "authorization_response_code"
        case cardholderVerificationMethod = "cardholder_verification_method"
        case dedicatedFileName = "dedicated_file_name"
        case terminalVerificationResults = "terminal_verification_results"
        case transactionStatusInformation = "transaction_status_information"
    }
}

/// Payment_method_details_card_wallet
public struct PaymentMethodDetailsCardWallet: Codable {
    /// Payment_method_details_card_wallet_amex_express_checkout
    public var amexExpressCheckout: [String: AnyJSON]?
    /// Payment_method_details_card_wallet_apple_pay
    public var applePay: [String: AnyJSON]?
    /// (For tokenized numbers only.) The last four digits of the device account number.
    public var dynamicLast4: String?
    /// Payment_method_details_card_wallet_google_pay
    public var googlePay: [String: AnyJSON]?
    /// Payment_method_details_card_wallet_masterpass
    public var masterpass: PaymentMethodDetailsCardWalletMasterpass?
    /// Payment_method_details_card_wallet_samsung_pay
    public var samsungPay: [String: AnyJSON]?
    /// The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
    public var type: `Type`
    /// Payment_method_details_card_wallet_visa_checkout
    public var visaCheckout: PaymentMethodDetailsCardWalletVisaCheckout?

    /// The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
    public enum `Type`: String, Codable, CaseIterable {
        case amexExpressCheckout = "amex_express_checkout"
        case applePay = "apple_pay"
        case googlePay = "google_pay"
        case masterpass
        case samsungPay = "samsung_pay"
        case visaCheckout = "visa_checkout"
    }

    public init(amexExpressCheckout: [String: AnyJSON]? = nil, applePay: [String: AnyJSON]? = nil, dynamicLast4: String? = nil, googlePay: [String: AnyJSON]? = nil, masterpass: PaymentMethodDetailsCardWalletMasterpass? = nil, samsungPay: [String: AnyJSON]? = nil, type: `Type`, visaCheckout: PaymentMethodDetailsCardWalletVisaCheckout? = nil) {
        self.amexExpressCheckout = amexExpressCheckout
        self.applePay = applePay
        self.dynamicLast4 = dynamicLast4
        self.googlePay = googlePay
        self.masterpass = masterpass
        self.samsungPay = samsungPay
        self.type = type
        self.visaCheckout = visaCheckout
    }

    private enum CodingKeys: String, CodingKey {
        case amexExpressCheckout = "amex_express_checkout"
        case applePay = "apple_pay"
        case dynamicLast4 = "dynamic_last4"
        case googlePay = "google_pay"
        case masterpass
        case samsungPay = "samsung_pay"
        case type
        case visaCheckout = "visa_checkout"
    }
}

/// Payment_method_details_card_wallet_masterpass
public struct PaymentMethodDetailsCardWalletMasterpass: Codable {
    /// Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var billingAddress: BillingAddress?
    /// Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var email: String?
    /// Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var name: String?
    /// Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var shippingAddress: ShippingAddress?

    /// Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public struct BillingAddress: Codable {
        public var address: Address?

        public init(address: Address? = nil) {
            self.address = address
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.address = try? container.decode(Address.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = address { try container.encode(value) }
        }
    }

    /// Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public struct ShippingAddress: Codable {
        public var address: Address?

        public init(address: Address? = nil) {
            self.address = address
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.address = try? container.decode(Address.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = address { try container.encode(value) }
        }
    }

    public init(billingAddress: BillingAddress? = nil, email: String? = nil, name: String? = nil, shippingAddress: ShippingAddress? = nil) {
        self.billingAddress = billingAddress
        self.email = email
        self.name = name
        self.shippingAddress = shippingAddress
    }

    private enum CodingKeys: String, CodingKey {
        case billingAddress = "billing_address"
        case email
        case name
        case shippingAddress = "shipping_address"
    }
}

/// Payment_method_details_card_wallet_visa_checkout
public struct PaymentMethodDetailsCardWalletVisaCheckout: Codable {
    /// Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var billingAddress: BillingAddress?
    /// Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var email: String?
    /// Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var name: String?
    /// Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var shippingAddress: ShippingAddress?

    /// Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public struct BillingAddress: Codable {
        public var address: Address?

        public init(address: Address? = nil) {
            self.address = address
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.address = try? container.decode(Address.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = address { try container.encode(value) }
        }
    }

    /// Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public struct ShippingAddress: Codable {
        public var address: Address?

        public init(address: Address? = nil) {
            self.address = address
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.address = try? container.decode(Address.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = address { try container.encode(value) }
        }
    }

    public init(billingAddress: BillingAddress? = nil, email: String? = nil, name: String? = nil, shippingAddress: ShippingAddress? = nil) {
        self.billingAddress = billingAddress
        self.email = email
        self.name = name
        self.shippingAddress = shippingAddress
    }

    private enum CodingKeys: String, CodingKey {
        case billingAddress = "billing_address"
        case email
        case name
        case shippingAddress = "shipping_address"
    }
}

/// Payment_method_details_eps
public struct PaymentMethodDetailsEps: Codable {
    /// The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
    public var bank: Bank?
    /// Owner's verified full name. Values are verified or provided by EPS directly
    /// (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    /// EPS rarely provides this information so the attribute is usually empty.
    public var verifiedName: String?

    /// The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
    public enum Bank: String, Codable, CaseIterable {
        case arzteUndApothekerBank = "arzte_und_apotheker_bank"
        case austrianAnadiBankAg = "austrian_anadi_bank_ag"
        case bankAustria = "bank_austria"
        case bankhausCarlSpangler = "bankhaus_carl_spangler"
        case bankhausSchelhammerUndSchatteraAg = "bankhaus_schelhammer_und_schattera_ag"
        case bawagPskAg = "bawag_psk_ag"
        case bksBankAg = "bks_bank_ag"
        case brullKallmusBankAg = "brull_kallmus_bank_ag"
        case btvVierLanderBank = "btv_vier_lander_bank"
        case capitalBankGraweGruppeAg = "capital_bank_grawe_gruppe_ag"
        case dolomitenbank
        case easybankAg = "easybank_ag"
        case ersteBankUndSparkassen = "erste_bank_und_sparkassen"
        case hypoAlpeadriabankInternationalAg = "hypo_alpeadriabank_international_ag"
        case hypoBankBurgenlandAktiengesellschaft = "hypo_bank_burgenland_aktiengesellschaft"
        case hypoNoeLbFurNiederosterreichUWien = "hypo_noe_lb_fur_niederosterreich_u_wien"
        case hypoOberosterreichSalzburgSteiermark = "hypo_oberosterreich_salzburg_steiermark"
        case hypoTirolBankAg = "hypo_tirol_bank_ag"
        case hypoVorarlbergBankAg = "hypo_vorarlberg_bank_ag"
        case marchfelderBank = "marchfelder_bank"
        case oberbankAg = "oberbank_ag"
        case raiffeisenBankengruppeOsterreich = "raiffeisen_bankengruppe_osterreich"
        case schoellerbankAg = "schoellerbank_ag"
        case spardaBankWien = "sparda_bank_wien"
        case volksbankGruppe = "volksbank_gruppe"
        case volkskreditbankAg = "volkskreditbank_ag"
        case vrBankBraunau = "vr_bank_braunau"
    }

    public init(bank: Bank? = nil, verifiedName: String? = nil) {
        self.bank = bank
        self.verifiedName = verifiedName
    }

    private enum CodingKeys: String, CodingKey {
        case bank
        case verifiedName = "verified_name"
    }
}

/// Payment_method_details_fpx
public struct PaymentMethodDetailsFpx: Codable {
    /// The customer's bank. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`.
    public var bank: Bank
    /// Unique transaction id generated by FPX for every request from the merchant
    public var transactionID: String?

    /// The customer's bank. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`.
    public enum Bank: String, Codable, CaseIterable {
        case affinBank = "affin_bank"
        case agrobank
        case allianceBank = "alliance_bank"
        case ambank
        case bankIslam = "bank_islam"
        case bankMuamalat = "bank_muamalat"
        case bankRakyat = "bank_rakyat"
        case bsn
        case cimb
        case deutscheBank = "deutsche_bank"
        case hongLeongBank = "hong_leong_bank"
        case hsbc
        case kfh
        case maybank2e
        case maybank2u
        case ocbc
        case pbEnterprise = "pb_enterprise"
        case publicBank = "public_bank"
        case rhb
        case standardChartered = "standard_chartered"
        case uob
    }

    public init(bank: Bank, transactionID: String? = nil) {
        self.bank = bank
        self.transactionID = transactionID
    }

    private enum CodingKeys: String, CodingKey {
        case bank
        case transactionID = "transaction_id"
    }
}

/// Payment_method_details_giropay
public struct PaymentMethodDetailsGiropay: Codable {
    /// Bank code of bank associated with the bank account.
    public var bankCode: String?
    /// Name of the bank associated with the bank account.
    public var bankName: String?
    /// Bank Identifier Code of the bank associated with the bank account.
    public var bic: String?
    /// Owner's verified full name. Values are verified or provided by Giropay directly
    /// (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    /// Giropay rarely provides this information so the attribute is usually empty.
    public var verifiedName: String?

    public init(bankCode: String? = nil, bankName: String? = nil, bic: String? = nil, verifiedName: String? = nil) {
        self.bankCode = bankCode
        self.bankName = bankName
        self.bic = bic
        self.verifiedName = verifiedName
    }

    private enum CodingKeys: String, CodingKey {
        case bankCode = "bank_code"
        case bankName = "bank_name"
        case bic
        case verifiedName = "verified_name"
    }
}

/// Payment_method_details_grabpay
public struct PaymentMethodDetailsGrabpay: Codable {
    /// Unique transaction id generated by GrabPay
    public var transactionID: String?

    public init(transactionID: String? = nil) {
        self.transactionID = transactionID
    }

    private enum CodingKeys: String, CodingKey {
        case transactionID = "transaction_id"
    }
}

/// Payment_method_details_ideal
public struct PaymentMethodDetailsIdeal: Codable {
    /// The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
    public var bank: Bank?
    /// The Bank Identifier Code of the customer's bank.
    public var bic: Bic?
    /// The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
    public var generatedSepaDebit: GeneratedSepaDebit?
    /// The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
    public var generatedSepaDebitMandate: GeneratedSepaDebitMandate?
    /// Last four characters of the IBAN.
    public var ibanLast4: String?
    /// Owner's verified full name. Values are verified or provided by iDEAL directly
    /// (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var verifiedName: String?

    /// The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
    public enum Bank: String, Codable, CaseIterable {
        case abnAmro = "abn_amro"
        case asnBank = "asn_bank"
        case bunq
        case handelsbanken
        case ing
        case knab
        case moneyou
        case rabobank
        case regiobank
        case revolut
        case snsBank = "sns_bank"
        case triodosBank = "triodos_bank"
        case vanLanschot = "van_lanschot"
    }

    /// The Bank Identifier Code of the customer's bank.
    public enum Bic: String, Codable, CaseIterable {
        case abnanl2a = "ABNANL2A"
        case asnbnl21 = "ASNBNL21"
        case bunqnl2a = "BUNQNL2A"
        case fvlbnl22 = "FVLBNL22"
        case handnl2a = "HANDNL2A"
        case ingbnl2a = "INGBNL2A"
        case knabnl2h = "KNABNL2H"
        case moyonl21 = "MOYONL21"
        case rabonl2u = "RABONL2U"
        case rbrbnl21 = "RBRBNL21"
        case revolt21 = "REVOLT21"
        case snsbnl2a = "SNSBNL2A"
        case trionl2u = "TRIONL2U"
    }

    /// The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
    public struct GeneratedSepaDebit: Codable {
        public var string: String?
        public var paymentMethod: PaymentMethod?

        public init(string: String? = nil, paymentMethod: PaymentMethod? = nil) {
            self.string = string
            self.paymentMethod = paymentMethod
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentMethod = try? container.decode(PaymentMethod.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentMethod { try container.encode(value) }
        }
    }

    /// The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
    public struct GeneratedSepaDebitMandate: Codable {
        public var string: String?
        public var mandate: Mandate?

        public init(string: String? = nil, mandate: Mandate? = nil) {
            self.string = string
            self.mandate = mandate
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.mandate = try? container.decode(Mandate.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = mandate { try container.encode(value) }
        }
    }

    public init(bank: Bank? = nil, bic: Bic? = nil, generatedSepaDebit: GeneratedSepaDebit? = nil, generatedSepaDebitMandate: GeneratedSepaDebitMandate? = nil, ibanLast4: String? = nil, verifiedName: String? = nil) {
        self.bank = bank
        self.bic = bic
        self.generatedSepaDebit = generatedSepaDebit
        self.generatedSepaDebitMandate = generatedSepaDebitMandate
        self.ibanLast4 = ibanLast4
        self.verifiedName = verifiedName
    }

    private enum CodingKeys: String, CodingKey {
        case bank
        case bic
        case generatedSepaDebit = "generated_sepa_debit"
        case generatedSepaDebitMandate = "generated_sepa_debit_mandate"
        case ibanLast4 = "iban_last4"
        case verifiedName = "verified_name"
    }
}

/// Payment_method_details_interac_present
public struct PaymentMethodDetailsInteracPresent: Codable {
    /// Card brand. Can be `interac`, `mastercard` or `visa`.
    public var brand: String?
    /// The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
    public var cardholderName: String?
    /// Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
    public var country: String?
    /// Authorization response cryptogram.
    public var emvAuthData: String?
    /// Two-digit number representing the card's expiration month.
    public var expMonth: Int
    /// Four-digit number representing the card's expiration year.
    public var expYear: Int
    /// Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
    /// 
    /// *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
    public var fingerprint: String?
    /// Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
    public var funding: String?
    /// ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
    public var generatedCard: String?
    /// The last four digits of the card.
    public var last4: String?
    /// Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.
    public var network: String?
    /// EMV tag 5F2D. Preferred languages specified by the integrated circuit chip.
    public var preferredLocales: [String]?
    /// How card details were read in this transaction.
    public var readMethod: ReadMethod?
    /// A collection of fields required to be displayed on receipts. Only required for EMV transactions.
    public var receipt: Receipt?

    /// How card details were read in this transaction.
    public enum ReadMethod: String, Codable, CaseIterable {
        case contactEmv = "contact_emv"
        case contactlessEmv = "contactless_emv"
        case contactlessMagstripeMode = "contactless_magstripe_mode"
        case magneticStripeFallback = "magnetic_stripe_fallback"
        case magneticStripeTrack2 = "magnetic_stripe_track2"
    }

    /// A collection of fields required to be displayed on receipts. Only required for EMV transactions.
    public struct Receipt: Codable {
        /// Payment_method_details_interac_present_receipt
        public var paymentMethodDetailsInteracPresentReceipt: PaymentMethodDetailsInteracPresentReceipt?

        public init(paymentMethodDetailsInteracPresentReceipt: PaymentMethodDetailsInteracPresentReceipt? = nil) {
            self.paymentMethodDetailsInteracPresentReceipt = paymentMethodDetailsInteracPresentReceipt
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodDetailsInteracPresentReceipt = try? container.decode(PaymentMethodDetailsInteracPresentReceipt.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodDetailsInteracPresentReceipt { try container.encode(value) }
        }
    }

    public init(brand: String? = nil, cardholderName: String? = nil, country: String? = nil, emvAuthData: String? = nil, expMonth: Int, expYear: Int, fingerprint: String? = nil, funding: String? = nil, generatedCard: String? = nil, last4: String? = nil, network: String? = nil, preferredLocales: [String]? = nil, readMethod: ReadMethod? = nil, receipt: Receipt? = nil) {
        self.brand = brand
        self.cardholderName = cardholderName
        self.country = country
        self.emvAuthData = emvAuthData
        self.expMonth = expMonth
        self.expYear = expYear
        self.fingerprint = fingerprint
        self.funding = funding
        self.generatedCard = generatedCard
        self.last4 = last4
        self.network = network
        self.preferredLocales = preferredLocales
        self.readMethod = readMethod
        self.receipt = receipt
    }

    private enum CodingKeys: String, CodingKey {
        case brand
        case cardholderName = "cardholder_name"
        case country
        case emvAuthData = "emv_auth_data"
        case expMonth = "exp_month"
        case expYear = "exp_year"
        case fingerprint
        case funding
        case generatedCard = "generated_card"
        case last4
        case network
        case preferredLocales = "preferred_locales"
        case readMethod = "read_method"
        case receipt
    }
}

/// Payment_method_details_interac_present_receipt
public struct PaymentMethodDetailsInteracPresentReceipt: Codable {
    /// The type of account being debited or credited
    public var accountType: AccountType?
    /// EMV tag 9F26, cryptogram generated by the integrated circuit chip.
    public var applicationCryptogram: String?
    /// Mnenomic of the Application Identifier.
    public var applicationPreferredName: String?
    /// Identifier for this transaction.
    public var authorizationCode: String?
    /// EMV tag 8A. A code returned by the card issuer.
    public var authorizationResponseCode: String?
    /// How the cardholder verified ownership of the card.
    public var cardholderVerificationMethod: String?
    /// EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.
    public var dedicatedFileName: String?
    /// The outcome of a series of EMV functions performed by the card reader.
    public var terminalVerificationResults: String?
    /// An indication of various EMV functions performed during the transaction.
    public var transactionStatusInformation: String?

    /// The type of account being debited or credited
    public enum AccountType: String, Codable, CaseIterable {
        case checking
        case savings
        case unknown
    }

    public init(accountType: AccountType? = nil, applicationCryptogram: String? = nil, applicationPreferredName: String? = nil, authorizationCode: String? = nil, authorizationResponseCode: String? = nil, cardholderVerificationMethod: String? = nil, dedicatedFileName: String? = nil, terminalVerificationResults: String? = nil, transactionStatusInformation: String? = nil) {
        self.accountType = accountType
        self.applicationCryptogram = applicationCryptogram
        self.applicationPreferredName = applicationPreferredName
        self.authorizationCode = authorizationCode
        self.authorizationResponseCode = authorizationResponseCode
        self.cardholderVerificationMethod = cardholderVerificationMethod
        self.dedicatedFileName = dedicatedFileName
        self.terminalVerificationResults = terminalVerificationResults
        self.transactionStatusInformation = transactionStatusInformation
    }

    private enum CodingKeys: String, CodingKey {
        case accountType = "account_type"
        case applicationCryptogram = "application_cryptogram"
        case applicationPreferredName = "application_preferred_name"
        case authorizationCode = "authorization_code"
        case authorizationResponseCode = "authorization_response_code"
        case cardholderVerificationMethod = "cardholder_verification_method"
        case dedicatedFileName = "dedicated_file_name"
        case terminalVerificationResults = "terminal_verification_results"
        case transactionStatusInformation = "transaction_status_information"
    }
}

/// Payment_method_details_klarna
public struct PaymentMethodDetailsKlarna: Codable {
    /// The Klarna payment method used for this transaction.
    /// Can be one of `pay_later`, `pay_now`, `pay_with_financing`, or `pay_in_installments`
    public var paymentMethodCategory: String?
    /// Preferred language of the Klarna authorization page that the customer is redirected to.
    /// Can be one of `de-AT`, `en-AT`, `nl-BE`, `fr-BE`, `en-BE`, `de-DE`, `en-DE`, `da-DK`, `en-DK`, `es-ES`, `en-ES`, `fi-FI`, `sv-FI`, `en-FI`, `en-GB`, `en-IE`, `it-IT`, `en-IT`, `nl-NL`, `en-NL`, `nb-NO`, `en-NO`, `sv-SE`, `en-SE`, `en-US`, `fr-FR`, or `en-FR`
    public var preferredLocale: String?

    public init(paymentMethodCategory: String? = nil, preferredLocale: String? = nil) {
        self.paymentMethodCategory = paymentMethodCategory
        self.preferredLocale = preferredLocale
    }

    private enum CodingKeys: String, CodingKey {
        case paymentMethodCategory = "payment_method_category"
        case preferredLocale = "preferred_locale"
    }
}

/// Payment_method_details_multibanco
public struct PaymentMethodDetailsMultibanco: Codable {
    /// Entity number associated with this Multibanco payment.
    public var entity: String?
    /// Reference number associated with this Multibanco payment.
    public var reference: String?

    public init(entity: String? = nil, reference: String? = nil) {
        self.entity = entity
        self.reference = reference
    }
}

/// Payment_method_details_oxxo
public struct PaymentMethodDetailsOxxo: Codable {
    /// OXXO reference number
    public var number: String?

    public init(number: String? = nil) {
        self.number = number
    }
}

/// Payment_method_details_p24
public struct PaymentMethodDetailsP24: Codable {
    /// The customer's bank. Can be one of `ing`, `citi_handlowy`, `tmobile_usbugi_bankowe`, `plus_bank`, `etransfer_pocztowy24`, `banki_spbdzielcze`, `bank_nowy_bfg_sa`, `getin_bank`, `blik`, `noble_pay`, `ideabank`, `envelobank`, `santander_przelew24`, `nest_przelew`, `mbank_mtransfer`, `inteligo`, `pbac_z_ipko`, `bnp_paribas`, `credit_agricole`, `toyota_bank`, `bank_pekao_sa`, `volkswagen_bank`, `bank_millennium`, `alior_bank`, or `boz`.
    public var bank: Bank?
    /// Unique reference for this Przelewy24 payment.
    public var reference: String?
    /// Owner's verified full name. Values are verified or provided by Przelewy24 directly
    /// (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    /// Przelewy24 rarely provides this information so the attribute is usually empty.
    public var verifiedName: String?

    /// The customer's bank. Can be one of `ing`, `citi_handlowy`, `tmobile_usbugi_bankowe`, `plus_bank`, `etransfer_pocztowy24`, `banki_spbdzielcze`, `bank_nowy_bfg_sa`, `getin_bank`, `blik`, `noble_pay`, `ideabank`, `envelobank`, `santander_przelew24`, `nest_przelew`, `mbank_mtransfer`, `inteligo`, `pbac_z_ipko`, `bnp_paribas`, `credit_agricole`, `toyota_bank`, `bank_pekao_sa`, `volkswagen_bank`, `bank_millennium`, `alior_bank`, or `boz`.
    public enum Bank: String, Codable, CaseIterable {
        case aliorBank = "alior_bank"
        case bankMillennium = "bank_millennium"
        case bankNowyBfgSa = "bank_nowy_bfg_sa"
        case bankPekaoSa = "bank_pekao_sa"
        case bankiSpbdzielcze = "banki_spbdzielcze"
        case blik
        case bnpParibas = "bnp_paribas"
        case boz
        case citiHandlowy = "citi_handlowy"
        case creditAgricole = "credit_agricole"
        case envelobank
        case etransferPocztowy24 = "etransfer_pocztowy24"
        case getinBank = "getin_bank"
        case ideabank
        case ing
        case inteligo
        case mbankMtransfer = "mbank_mtransfer"
        case nestPrzelew = "nest_przelew"
        case noblePay = "noble_pay"
        case pbacZIpko = "pbac_z_ipko"
        case plusBank = "plus_bank"
        case santanderPrzelew24 = "santander_przelew24"
        case tmobileUsbugiBankowe = "tmobile_usbugi_bankowe"
        case toyotaBank = "toyota_bank"
        case volkswagenBank = "volkswagen_bank"
    }

    public init(bank: Bank? = nil, reference: String? = nil, verifiedName: String? = nil) {
        self.bank = bank
        self.reference = reference
        self.verifiedName = verifiedName
    }

    private enum CodingKeys: String, CodingKey {
        case bank
        case reference
        case verifiedName = "verified_name"
    }
}

/// Payment_method_details_sepa_debit
public struct PaymentMethodDetailsSepaDebit: Codable {
    /// Bank code of bank associated with the bank account.
    public var bankCode: String?
    /// Branch code of bank associated with the bank account.
    public var branchCode: String?
    /// Two-letter ISO code representing the country the bank account is located in.
    public var country: String?
    /// Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
    public var fingerprint: String?
    /// Last four characters of the IBAN.
    public var last4: String?
    /// ID of the mandate used to make this payment.
    public var mandate: String?

    public init(bankCode: String? = nil, branchCode: String? = nil, country: String? = nil, fingerprint: String? = nil, last4: String? = nil, mandate: String? = nil) {
        self.bankCode = bankCode
        self.branchCode = branchCode
        self.country = country
        self.fingerprint = fingerprint
        self.last4 = last4
        self.mandate = mandate
    }

    private enum CodingKeys: String, CodingKey {
        case bankCode = "bank_code"
        case branchCode = "branch_code"
        case country
        case fingerprint
        case last4
        case mandate
    }
}

/// Payment_method_details_sofort
public struct PaymentMethodDetailsSofort: Codable {
    /// Bank code of bank associated with the bank account.
    public var bankCode: String?
    /// Name of the bank associated with the bank account.
    public var bankName: String?
    /// Bank Identifier Code of the bank associated with the bank account.
    public var bic: String?
    /// Two-letter ISO code representing the country the bank account is located in.
    public var country: String?
    /// The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
    public var generatedSepaDebit: GeneratedSepaDebit?
    /// The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
    public var generatedSepaDebitMandate: GeneratedSepaDebitMandate?
    /// Last four characters of the IBAN.
    public var ibanLast4: String?
    /// Preferred language of the SOFORT authorization page that the customer is redirected to.
    /// Can be one of `de`, `en`, `es`, `fr`, `it`, `nl`, or `pl`
    public var preferredLanguage: PreferredLanguage?
    /// Owner's verified full name. Values are verified or provided by SOFORT directly
    /// (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var verifiedName: String?

    /// The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
    public struct GeneratedSepaDebit: Codable {
        public var string: String?
        public var paymentMethod: PaymentMethod?

        public init(string: String? = nil, paymentMethod: PaymentMethod? = nil) {
            self.string = string
            self.paymentMethod = paymentMethod
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentMethod = try? container.decode(PaymentMethod.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentMethod { try container.encode(value) }
        }
    }

    /// The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
    public struct GeneratedSepaDebitMandate: Codable {
        public var string: String?
        public var mandate: Mandate?

        public init(string: String? = nil, mandate: Mandate? = nil) {
            self.string = string
            self.mandate = mandate
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.mandate = try? container.decode(Mandate.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = mandate { try container.encode(value) }
        }
    }

    /// Preferred language of the SOFORT authorization page that the customer is redirected to.
    /// Can be one of `de`, `en`, `es`, `fr`, `it`, `nl`, or `pl`
    public enum PreferredLanguage: String, Codable, CaseIterable {
        case de
        case en
        case es
        case fr
        case it
        case nl
        case pl
    }

    public init(bankCode: String? = nil, bankName: String? = nil, bic: String? = nil, country: String? = nil, generatedSepaDebit: GeneratedSepaDebit? = nil, generatedSepaDebitMandate: GeneratedSepaDebitMandate? = nil, ibanLast4: String? = nil, preferredLanguage: PreferredLanguage? = nil, verifiedName: String? = nil) {
        self.bankCode = bankCode
        self.bankName = bankName
        self.bic = bic
        self.country = country
        self.generatedSepaDebit = generatedSepaDebit
        self.generatedSepaDebitMandate = generatedSepaDebitMandate
        self.ibanLast4 = ibanLast4
        self.preferredLanguage = preferredLanguage
        self.verifiedName = verifiedName
    }

    private enum CodingKeys: String, CodingKey {
        case bankCode = "bank_code"
        case bankName = "bank_name"
        case bic
        case country
        case generatedSepaDebit = "generated_sepa_debit"
        case generatedSepaDebitMandate = "generated_sepa_debit_mandate"
        case ibanLast4 = "iban_last4"
        case preferredLanguage = "preferred_language"
        case verifiedName = "verified_name"
    }
}

/// Payment_method_details_wechat_pay
public struct PaymentMethodDetailsWechatPay: Codable {
    /// Uniquely identifies this particular WeChat Pay account. You can use this attribute to check whether two WeChat accounts are the same.
    public var fingerprint: String?
    /// Transaction ID of this particular WeChat Pay transaction.
    public var transactionID: String?

    public init(fingerprint: String? = nil, transactionID: String? = nil) {
        self.fingerprint = fingerprint
        self.transactionID = transactionID
    }

    private enum CodingKeys: String, CodingKey {
        case fingerprint
        case transactionID = "transaction_id"
    }
}

/// Payment_method_eps
public struct PaymentMethodEps: Codable {
    /// The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
    public var bank: Bank?

    /// The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
    public enum Bank: String, Codable, CaseIterable {
        case arzteUndApothekerBank = "arzte_und_apotheker_bank"
        case austrianAnadiBankAg = "austrian_anadi_bank_ag"
        case bankAustria = "bank_austria"
        case bankhausCarlSpangler = "bankhaus_carl_spangler"
        case bankhausSchelhammerUndSchatteraAg = "bankhaus_schelhammer_und_schattera_ag"
        case bawagPskAg = "bawag_psk_ag"
        case bksBankAg = "bks_bank_ag"
        case brullKallmusBankAg = "brull_kallmus_bank_ag"
        case btvVierLanderBank = "btv_vier_lander_bank"
        case capitalBankGraweGruppeAg = "capital_bank_grawe_gruppe_ag"
        case dolomitenbank
        case easybankAg = "easybank_ag"
        case ersteBankUndSparkassen = "erste_bank_und_sparkassen"
        case hypoAlpeadriabankInternationalAg = "hypo_alpeadriabank_international_ag"
        case hypoBankBurgenlandAktiengesellschaft = "hypo_bank_burgenland_aktiengesellschaft"
        case hypoNoeLbFurNiederosterreichUWien = "hypo_noe_lb_fur_niederosterreich_u_wien"
        case hypoOberosterreichSalzburgSteiermark = "hypo_oberosterreich_salzburg_steiermark"
        case hypoTirolBankAg = "hypo_tirol_bank_ag"
        case hypoVorarlbergBankAg = "hypo_vorarlberg_bank_ag"
        case marchfelderBank = "marchfelder_bank"
        case oberbankAg = "oberbank_ag"
        case raiffeisenBankengruppeOsterreich = "raiffeisen_bankengruppe_osterreich"
        case schoellerbankAg = "schoellerbank_ag"
        case spardaBankWien = "sparda_bank_wien"
        case volksbankGruppe = "volksbank_gruppe"
        case volkskreditbankAg = "volkskreditbank_ag"
        case vrBankBraunau = "vr_bank_braunau"
    }

    public init(bank: Bank? = nil) {
        self.bank = bank
    }
}

/// Payment_method_fpx
public struct PaymentMethodFpx: Codable {
    /// The customer's bank, if provided. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`.
    public var bank: Bank

    /// The customer's bank, if provided. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`.
    public enum Bank: String, Codable, CaseIterable {
        case affinBank = "affin_bank"
        case agrobank
        case allianceBank = "alliance_bank"
        case ambank
        case bankIslam = "bank_islam"
        case bankMuamalat = "bank_muamalat"
        case bankRakyat = "bank_rakyat"
        case bsn
        case cimb
        case deutscheBank = "deutsche_bank"
        case hongLeongBank = "hong_leong_bank"
        case hsbc
        case kfh
        case maybank2e
        case maybank2u
        case ocbc
        case pbEnterprise = "pb_enterprise"
        case publicBank = "public_bank"
        case rhb
        case standardChartered = "standard_chartered"
        case uob
    }

    public init(bank: Bank) {
        self.bank = bank
    }
}

/// Payment_method_ideal
public struct PaymentMethodIdeal: Codable {
    /// The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
    public var bank: Bank?
    /// The Bank Identifier Code of the customer's bank, if the bank was provided.
    public var bic: Bic?

    /// The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
    public enum Bank: String, Codable, CaseIterable {
        case abnAmro = "abn_amro"
        case asnBank = "asn_bank"
        case bunq
        case handelsbanken
        case ing
        case knab
        case moneyou
        case rabobank
        case regiobank
        case revolut
        case snsBank = "sns_bank"
        case triodosBank = "triodos_bank"
        case vanLanschot = "van_lanschot"
    }

    /// The Bank Identifier Code of the customer's bank, if the bank was provided.
    public enum Bic: String, Codable, CaseIterable {
        case abnanl2a = "ABNANL2A"
        case asnbnl21 = "ASNBNL21"
        case bunqnl2a = "BUNQNL2A"
        case fvlbnl22 = "FVLBNL22"
        case handnl2a = "HANDNL2A"
        case ingbnl2a = "INGBNL2A"
        case knabnl2h = "KNABNL2H"
        case moyonl21 = "MOYONL21"
        case rabonl2u = "RABONL2U"
        case rbrbnl21 = "RBRBNL21"
        case revolt21 = "REVOLT21"
        case snsbnl2a = "SNSBNL2A"
        case trionl2u = "TRIONL2U"
    }

    public init(bank: Bank? = nil, bic: Bic? = nil) {
        self.bank = bank
        self.bic = bic
    }
}

/// Payment_method_klarna
public struct PaymentMethodKlarna: Codable {
    /// The customer's date of birth, if provided.
    public var dob: Dob?

    /// The customer's date of birth, if provided.
    public struct Dob: Codable {
        public var paymentFlowsPrivatePaymentMethodsKlarnaDob: PaymentFlowsPrivatePaymentMethodsKlarnaDob?

        public init(paymentFlowsPrivatePaymentMethodsKlarnaDob: PaymentFlowsPrivatePaymentMethodsKlarnaDob? = nil) {
            self.paymentFlowsPrivatePaymentMethodsKlarnaDob = paymentFlowsPrivatePaymentMethodsKlarnaDob
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentFlowsPrivatePaymentMethodsKlarnaDob = try? container.decode(PaymentFlowsPrivatePaymentMethodsKlarnaDob.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentFlowsPrivatePaymentMethodsKlarnaDob { try container.encode(value) }
        }
    }

    public init(dob: Dob? = nil) {
        self.dob = dob
    }
}

/// Payment_method_options_afterpay_clearpay
public struct PaymentMethodOptionsAfterpayClearpay: Codable {
    /// Order identifier shown to the merchant in Afterpay’s online portal. We recommend using a value that helps you answer any questions a customer might have about
    /// the payment. The identifier is limited to 128 characters and may contain only letters, digits, underscores, backslashes and dashes.
    public var reference: String?

    public init(reference: String? = nil) {
        self.reference = reference
    }
}

/// Payment_method_options_bancontact
public struct PaymentMethodOptionsBancontact: Codable {
    /// Preferred language of the Bancontact authorization page that the customer is redirected to.
    public var preferredLanguage: PreferredLanguage

    /// Preferred language of the Bancontact authorization page that the customer is redirected to.
    public enum PreferredLanguage: String, Codable, CaseIterable {
        case de
        case en
        case fr
        case nl
    }

    public init(preferredLanguage: PreferredLanguage) {
        self.preferredLanguage = preferredLanguage
    }

    private enum CodingKeys: String, CodingKey {
        case preferredLanguage = "preferred_language"
    }
}

/// Payment_method_options_boleto
public struct PaymentMethodOptionsBoleto: Codable {
    /// The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time.
    public var expiresAfterDays: Int

    public init(expiresAfterDays: Int) {
        self.expiresAfterDays = expiresAfterDays
    }

    private enum CodingKeys: String, CodingKey {
        case expiresAfterDays = "expires_after_days"
    }
}

/// Payment_method_options_card_installments
public struct PaymentMethodOptionsCardInstallments: Codable {
    /// Installment plans that may be selected for this PaymentIntent.
    public var availablePlans: [PaymentMethodDetailsCardInstallmentsPlan]?
    /// Whether Installments are enabled for this PaymentIntent.
    public var isEnabled: Bool
    /// Installment plan selected for this PaymentIntent.
    public var plan: Plan?

    /// Installment plan selected for this PaymentIntent.
    public struct Plan: Codable {
        /// Payment_method_details_card_installments_plan
        public var paymentMethodDetailsCardInstallmentsPlan: PaymentMethodDetailsCardInstallmentsPlan?

        public init(paymentMethodDetailsCardInstallmentsPlan: PaymentMethodDetailsCardInstallmentsPlan? = nil) {
            self.paymentMethodDetailsCardInstallmentsPlan = paymentMethodDetailsCardInstallmentsPlan
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentMethodDetailsCardInstallmentsPlan = try? container.decode(PaymentMethodDetailsCardInstallmentsPlan.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentMethodDetailsCardInstallmentsPlan { try container.encode(value) }
        }
    }

    public init(availablePlans: [PaymentMethodDetailsCardInstallmentsPlan]? = nil, isEnabled: Bool, plan: Plan? = nil) {
        self.availablePlans = availablePlans
        self.isEnabled = isEnabled
        self.plan = plan
    }

    private enum CodingKeys: String, CodingKey {
        case availablePlans = "available_plans"
        case isEnabled = "enabled"
        case plan
    }
}

/// Payment_method_options_klarna
public struct PaymentMethodOptionsKlarna: Codable {
    /// Preferred locale of the Klarna checkout page that the customer is redirected to.
    public var preferredLocale: String?

    public init(preferredLocale: String? = nil) {
        self.preferredLocale = preferredLocale
    }

    private enum CodingKeys: String, CodingKey {
        case preferredLocale = "preferred_locale"
    }
}

/// Payment_method_options_oxxo
public struct PaymentMethodOptionsOxxo: Codable {
    /// The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time.
    public var expiresAfterDays: Int

    public init(expiresAfterDays: Int) {
        self.expiresAfterDays = expiresAfterDays
    }

    private enum CodingKeys: String, CodingKey {
        case expiresAfterDays = "expires_after_days"
    }
}

/// Payment_method_options_sofort
public struct PaymentMethodOptionsSofort: Codable {
    /// Preferred language of the SOFORT authorization page that the customer is redirected to.
    public var preferredLanguage: PreferredLanguage?

    /// Preferred language of the SOFORT authorization page that the customer is redirected to.
    public enum PreferredLanguage: String, Codable, CaseIterable {
        case de
        case en
        case es
        case fr
        case it
        case nl
        case pl
    }

    public init(preferredLanguage: PreferredLanguage? = nil) {
        self.preferredLanguage = preferredLanguage
    }

    private enum CodingKeys: String, CodingKey {
        case preferredLanguage = "preferred_language"
    }
}

/// Payment_method_options_wechat_pay
public struct PaymentMethodOptionsWechatPay: Codable {
    /// The app ID registered with WeChat Pay. Only required when client is ios or android.
    public var appID: String?
    /// The client type that the end customer will pay from
    public var client: Client?

    /// The client type that the end customer will pay from
    public enum Client: String, Codable, CaseIterable {
        case android
        case ios
        case web
    }

    public init(appID: String? = nil, client: Client? = nil) {
        self.appID = appID
        self.client = client
    }

    private enum CodingKeys: String, CodingKey {
        case appID = "app_id"
        case client
    }
}

/// Payment_method_p24
public struct PaymentMethodP24: Codable {
    /// The customer's bank, if provided.
    public var bank: Bank?

    /// The customer's bank, if provided.
    public enum Bank: String, Codable, CaseIterable {
        case aliorBank = "alior_bank"
        case bankMillennium = "bank_millennium"
        case bankNowyBfgSa = "bank_nowy_bfg_sa"
        case bankPekaoSa = "bank_pekao_sa"
        case bankiSpbdzielcze = "banki_spbdzielcze"
        case blik
        case bnpParibas = "bnp_paribas"
        case boz
        case citiHandlowy = "citi_handlowy"
        case creditAgricole = "credit_agricole"
        case envelobank
        case etransferPocztowy24 = "etransfer_pocztowy24"
        case getinBank = "getin_bank"
        case ideabank
        case ing
        case inteligo
        case mbankMtransfer = "mbank_mtransfer"
        case nestPrzelew = "nest_przelew"
        case noblePay = "noble_pay"
        case pbacZIpko = "pbac_z_ipko"
        case plusBank = "plus_bank"
        case santanderPrzelew24 = "santander_przelew24"
        case tmobileUsbugiBankowe = "tmobile_usbugi_bankowe"
        case toyotaBank = "toyota_bank"
        case volkswagenBank = "volkswagen_bank"
    }

    public init(bank: Bank? = nil) {
        self.bank = bank
    }
}

/// Payment_method_sepa_debit
public struct PaymentMethodSepaDebit: Codable {
    /// Bank code of bank associated with the bank account.
    public var bankCode: String?
    /// Branch code of bank associated with the bank account.
    public var branchCode: String?
    /// Two-letter ISO code representing the country the bank account is located in.
    public var country: String?
    /// Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
    public var fingerprint: String?
    /// Information about the object that generated this PaymentMethod.
    public var generatedFrom: GeneratedFrom?
    /// Last four characters of the IBAN.
    public var last4: String?

    /// Information about the object that generated this PaymentMethod.
    public struct GeneratedFrom: Codable {
        public var sepaDebitGeneratedFrom: SepaDebitGeneratedFrom?

        public init(sepaDebitGeneratedFrom: SepaDebitGeneratedFrom? = nil) {
            self.sepaDebitGeneratedFrom = sepaDebitGeneratedFrom
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.sepaDebitGeneratedFrom = try? container.decode(SepaDebitGeneratedFrom.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = sepaDebitGeneratedFrom { try container.encode(value) }
        }
    }

    public init(bankCode: String? = nil, branchCode: String? = nil, country: String? = nil, fingerprint: String? = nil, generatedFrom: GeneratedFrom? = nil, last4: String? = nil) {
        self.bankCode = bankCode
        self.branchCode = branchCode
        self.country = country
        self.fingerprint = fingerprint
        self.generatedFrom = generatedFrom
        self.last4 = last4
    }

    private enum CodingKeys: String, CodingKey {
        case bankCode = "bank_code"
        case branchCode = "branch_code"
        case country
        case fingerprint
        case generatedFrom = "generated_from"
        case last4
    }
}

/// Payment_method_sofort
public struct PaymentMethodSofort: Codable {
    /// Two-letter ISO code representing the country the bank account is located in.
    public var country: String?

    public init(country: String? = nil) {
        self.country = country
    }
}

public struct PaymentPagesCheckoutSessionAfterExpiration: Codable {
    /// When set, configuration used to recover the Checkout Session on expiry.
    public var recovery: Recovery?

    /// When set, configuration used to recover the Checkout Session on expiry.
    public struct Recovery: Codable {
        public var paymentPagesCheckoutSessionAfterExpirationRecovery: PaymentPagesCheckoutSessionAfterExpirationRecovery?

        public init(paymentPagesCheckoutSessionAfterExpirationRecovery: PaymentPagesCheckoutSessionAfterExpirationRecovery? = nil) {
            self.paymentPagesCheckoutSessionAfterExpirationRecovery = paymentPagesCheckoutSessionAfterExpirationRecovery
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.paymentPagesCheckoutSessionAfterExpirationRecovery = try? container.decode(PaymentPagesCheckoutSessionAfterExpirationRecovery.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = paymentPagesCheckoutSessionAfterExpirationRecovery { try container.encode(value) }
        }
    }

    public init(recovery: Recovery? = nil) {
        self.recovery = recovery
    }
}

public struct PaymentPagesCheckoutSessionAfterExpirationRecovery: Codable {
    /// Enables user redeemable promotion codes on the recovered Checkout Sessions. Defaults to `false`
    public var allowPromotionCodes: Bool
    /// If `true`, a recovery url will be generated to recover this Checkout Session if it
    /// expires before a transaction is completed. It will be attached to the
    /// Checkout Session object upon expiration.
    public var isEnabled: Bool
    /// The timestamp at which the recovery URL will expire.
    public var expiresAt: Int?
    /// URL that creates a new Checkout Session when clicked that is a copy of this expired Checkout Session
    public var url: String?

    public init(allowPromotionCodes: Bool, isEnabled: Bool, expiresAt: Int? = nil, url: String? = nil) {
        self.allowPromotionCodes = allowPromotionCodes
        self.isEnabled = isEnabled
        self.expiresAt = expiresAt
        self.url = url
    }

    private enum CodingKeys: String, CodingKey {
        case allowPromotionCodes = "allow_promotion_codes"
        case isEnabled = "enabled"
        case expiresAt = "expires_at"
        case url
    }
}

public struct PaymentPagesCheckoutSessionAutomaticTax: Codable {
    /// Indicates whether automatic tax is enabled for the session
    public var isEnabled: Bool
    /// The status of the most recent automated tax calculation for this session.
    public var status: Status?

    /// The status of the most recent automated tax calculation for this session.
    public enum Status: String, Codable, CaseIterable {
        case complete
        case failed
        case requiresLocationInputs = "requires_location_inputs"
    }

    public init(isEnabled: Bool, status: Status? = nil) {
        self.isEnabled = isEnabled
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case isEnabled = "enabled"
        case status
    }
}

public struct PaymentPagesCheckoutSessionConsent: Codable {
    /// If `opt_in`, the customer consents to receiving promotional communications
    /// from the merchant about this Checkout Session.
    public var promotions: Promotions?

    /// If `opt_in`, the customer consents to receiving promotional communications
    /// from the merchant about this Checkout Session.
    public enum Promotions: String, Codable, CaseIterable {
        case optIn = "opt_in"
        case optOut = "opt_out"
    }

    public init(promotions: Promotions? = nil) {
        self.promotions = promotions
    }
}

public struct PaymentPagesCheckoutSessionConsentCollection: Codable {
    /// If set to `auto`, enables the collection of customer consent for promotional communications. The Checkout
    /// Session will determine whether to display an option to opt into promotional communication
    /// from the merchant depending on the customer's locale. Only available to US merchants.
    public var promotions: Promotions?

    /// If set to `auto`, enables the collection of customer consent for promotional communications. The Checkout
    /// Session will determine whether to display an option to opt into promotional communication
    /// from the merchant depending on the customer's locale. Only available to US merchants.
    public enum Promotions: String, Codable, CaseIterable {
        case auto
    }

    public init(promotions: Promotions? = nil) {
        self.promotions = promotions
    }
}

public struct PaymentPagesCheckoutSessionCustomerDetails: Codable {
    /// The email associated with the Customer, if one exists, on the Checkout Session at the time of checkout or at time of session expiry.
    /// Otherwise, if the customer has consented to promotional content, this value is the most recent valid email provided by the customer on the Checkout form.
    public var email: String?
    /// The customer's phone number at the time of checkout
    public var phone: String?
    /// The customer’s tax exempt status at time of checkout.
    public var taxExempt: TaxExempt?
    /// The customer’s tax IDs at time of checkout.
    public var taxIDs: [PaymentPagesCheckoutSessionTaxID]?

    /// The customer’s tax exempt status at time of checkout.
    public enum TaxExempt: String, Codable, CaseIterable {
        case exempt
        case `none`
        case reverse
    }

    public init(email: String? = nil, phone: String? = nil, taxExempt: TaxExempt? = nil, taxIDs: [PaymentPagesCheckoutSessionTaxID]? = nil) {
        self.email = email
        self.phone = phone
        self.taxExempt = taxExempt
        self.taxIDs = taxIDs
    }

    private enum CodingKeys: String, CodingKey {
        case email
        case phone
        case taxExempt = "tax_exempt"
        case taxIDs = "tax_ids"
    }
}

public struct PaymentPagesCheckoutSessionPhoneNumberCollection: Codable {
    /// Indicates whether phone number collection is enabled for the session
    public var isEnabled: Bool

    public init(isEnabled: Bool) {
        self.isEnabled = isEnabled
    }

    private enum CodingKeys: String, CodingKey {
        case isEnabled = "enabled"
    }
}

public struct PaymentPagesCheckoutSessionShippingOption: Codable {
    /// A non-negative integer in cents representing how much to charge.
    public var shippingAmount: Int
    /// The shipping rate.
    public var shippingRate: ShippingRate

    /// The shipping rate.
    public final class ShippingRate: Codable {
        public var string: String?
        /// Shipping rates describe the price of shipping presented to your customers and can be
        /// applied to [Checkout Sessions](https://stripe.com/docs/payments/checkout/shipping) to collect shipping costs.
        public var shippingRate: StripeAPI.ShippingRate?

        public init(string: String? = nil, shippingRate: StripeAPI.ShippingRate? = nil) {
            self.string = string
            self.shippingRate = shippingRate
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.shippingRate = try? container.decode(StripeAPI.ShippingRate.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = shippingRate { try container.encode(value) }
        }
    }

    public init(shippingAmount: Int, shippingRate: ShippingRate) {
        self.shippingAmount = shippingAmount
        self.shippingRate = shippingRate
    }

    private enum CodingKeys: String, CodingKey {
        case shippingAmount = "shipping_amount"
        case shippingRate = "shipping_rate"
    }
}

public struct PaymentPagesCheckoutSessionTaxID: Codable {
    /// The type of the tax ID, one of `eu_vat`, `br_cnpj`, `br_cpf`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, or `unknown`
    public var type: `Type`
    /// The value of the tax ID.
    public var value: String?

    /// The type of the tax ID, one of `eu_vat`, `br_cnpj`, `br_cpf`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, or `unknown`
    public enum `Type`: String, Codable, CaseIterable {
        case aeTrn = "ae_trn"
        case auAbn = "au_abn"
        case auArn = "au_arn"
        case brCnpj = "br_cnpj"
        case brCpf = "br_cpf"
        case caBn = "ca_bn"
        case caGstHst = "ca_gst_hst"
        case caPstBc = "ca_pst_bc"
        case caPstMb = "ca_pst_mb"
        case caPstSk = "ca_pst_sk"
        case caQst = "ca_qst"
        case chVat = "ch_vat"
        case clTin = "cl_tin"
        case esCif = "es_cif"
        case euVat = "eu_vat"
        case gbVat = "gb_vat"
        case geVat = "ge_vat"
        case hkBr = "hk_br"
        case idNpwp = "id_npwp"
        case ilVat = "il_vat"
        case inGst = "in_gst"
        case jpCn = "jp_cn"
        case jpRn = "jp_rn"
        case krBrn = "kr_brn"
        case liUid = "li_uid"
        case mxRfc = "mx_rfc"
        case myFrp = "my_frp"
        case myItn = "my_itn"
        case mySst = "my_sst"
        case noVat = "no_vat"
        case nzGst = "nz_gst"
        case ruInn = "ru_inn"
        case ruKpp = "ru_kpp"
        case saVat = "sa_vat"
        case sgGst = "sg_gst"
        case sgUen = "sg_uen"
        case thVat = "th_vat"
        case twVat = "tw_vat"
        case uaVat = "ua_vat"
        case unknown
        case usEin = "us_ein"
        case zaVat = "za_vat"
    }

    public init(type: `Type`, value: String? = nil) {
        self.type = type
        self.value = value
    }
}

public struct PaymentPagesCheckoutSessionTaxIDCollection: Codable {
    /// Indicates whether tax ID collection is enabled for the session
    public var isEnabled: Bool

    public init(isEnabled: Bool) {
        self.isEnabled = isEnabled
    }

    private enum CodingKeys: String, CodingKey {
        case isEnabled = "enabled"
    }
}

public struct PaymentPagesCheckoutSessionTotalDetails: Codable {
    /// This is the sum of all the line item discounts.
    public var amountDiscount: Int
    /// This is the sum of all the line item shipping amounts.
    public var amountShipping: Int?
    /// This is the sum of all the line item tax amounts.
    public var amountTax: Int
    public var breakdown: PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown?

    public init(amountDiscount: Int, amountShipping: Int? = nil, amountTax: Int, breakdown: PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown? = nil) {
        self.amountDiscount = amountDiscount
        self.amountShipping = amountShipping
        self.amountTax = amountTax
        self.breakdown = breakdown
    }

    private enum CodingKeys: String, CodingKey {
        case amountDiscount = "amount_discount"
        case amountShipping = "amount_shipping"
        case amountTax = "amount_tax"
        case breakdown
    }
}

public struct PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown: Codable {
    /// The aggregated line item discounts.
    public var discounts: [LineItemsDiscountAmount]
    /// The aggregated line item tax amounts by rate.
    public var taxes: [LineItemsTaxAmount]

    public init(discounts: [LineItemsDiscountAmount], taxes: [LineItemsTaxAmount]) {
        self.discounts = discounts
        self.taxes = taxes
    }
}

public struct PaymentPagesPaymentPageResourcesShippingAddressCollection: Codable {
    /// An array of two-letter ISO country codes representing which countries Checkout should provide as options for
    /// shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`.
    public var allowedCountries: [AllowedCountry]

    public enum AllowedCountry: String, Codable, CaseIterable {
        case ac = "AC"
        case ad = "AD"
        case ae = "AE"
        case af = "AF"
        case ag = "AG"
        case ai = "AI"
        case al = "AL"
        case am = "AM"
        case ao = "AO"
        case aq = "AQ"
        case ar = "AR"
        case at = "AT"
        case au = "AU"
        case aw = "AW"
        case ax = "AX"
        case az = "AZ"
        case ba = "BA"
        case bb = "BB"
        case bd = "BD"
        case be = "BE"
        case bf = "BF"
        case bg = "BG"
        case bh = "BH"
        case bi = "BI"
        case bj = "BJ"
        case bl = "BL"
        case bm = "BM"
        case bn = "BN"
        case bo = "BO"
        case bq = "BQ"
        case br = "BR"
        case bs = "BS"
        case bt = "BT"
        case bv = "BV"
        case bw = "BW"
        case by = "BY"
        case bz = "BZ"
        case ca = "CA"
        case cd = "CD"
        case cf = "CF"
        case cg = "CG"
        case ch = "CH"
        case ci = "CI"
        case ck = "CK"
        case cl = "CL"
        case cm = "CM"
        case cn = "CN"
        case co = "CO"
        case cr = "CR"
        case cv = "CV"
        case cw = "CW"
        case cy = "CY"
        case cz = "CZ"
        case de = "DE"
        case dj = "DJ"
        case dk = "DK"
        case dm = "DM"
        case `do` = "DO"
        case dz = "DZ"
        case ec = "EC"
        case ee = "EE"
        case eg = "EG"
        case eh = "EH"
        case er = "ER"
        case es = "ES"
        case et = "ET"
        case fi = "FI"
        case fj = "FJ"
        case fk = "FK"
        case fo = "FO"
        case fr = "FR"
        case ga = "GA"
        case gb = "GB"
        case gd = "GD"
        case ge = "GE"
        case gf = "GF"
        case gg = "GG"
        case gh = "GH"
        case gi = "GI"
        case gl = "GL"
        case gm = "GM"
        case gn = "GN"
        case gp = "GP"
        case gq = "GQ"
        case gr = "GR"
        case gs = "GS"
        case gt = "GT"
        case gu = "GU"
        case gw = "GW"
        case gy = "GY"
        case hk = "HK"
        case hn = "HN"
        case hr = "HR"
        case ht = "HT"
        case hu = "HU"
        case id = "ID"
        case ie = "IE"
        case il = "IL"
        case im = "IM"
        case `in` = "IN"
        case io = "IO"
        case iq = "IQ"
        case `is` = "IS"
        case it = "IT"
        case je = "JE"
        case jm = "JM"
        case jo = "JO"
        case jp = "JP"
        case ke = "KE"
        case kg = "KG"
        case kh = "KH"
        case ki = "KI"
        case km = "KM"
        case kn = "KN"
        case kr = "KR"
        case kw = "KW"
        case ky = "KY"
        case kz = "KZ"
        case la = "LA"
        case lb = "LB"
        case lc = "LC"
        case li = "LI"
        case lk = "LK"
        case lr = "LR"
        case ls = "LS"
        case lt = "LT"
        case lu = "LU"
        case lv = "LV"
        case ly = "LY"
        case ma = "MA"
        case mc = "MC"
        case md = "MD"
        case me = "ME"
        case mf = "MF"
        case mg = "MG"
        case mk = "MK"
        case ml = "ML"
        case mm = "MM"
        case mn = "MN"
        case mo = "MO"
        case mq = "MQ"
        case mr = "MR"
        case ms = "MS"
        case mt = "MT"
        case mu = "MU"
        case mv = "MV"
        case mw = "MW"
        case mx = "MX"
        case my = "MY"
        case mz = "MZ"
        case na = "NA"
        case nc = "NC"
        case ne = "NE"
        case ng = "NG"
        case ni = "NI"
        case nl = "NL"
        case no = "NO"
        case np = "NP"
        case nr = "NR"
        case nu = "NU"
        case nz = "NZ"
        case om = "OM"
        case pa = "PA"
        case pe = "PE"
        case pf = "PF"
        case pg = "PG"
        case ph = "PH"
        case pk = "PK"
        case pl = "PL"
        case pm = "PM"
        case pn = "PN"
        case pr = "PR"
        case ps = "PS"
        case pt = "PT"
        case py = "PY"
        case qa = "QA"
        case re = "RE"
        case ro = "RO"
        case rs = "RS"
        case ru = "RU"
        case rw = "RW"
        case sa = "SA"
        case sb = "SB"
        case sc = "SC"
        case se = "SE"
        case sg = "SG"
        case sh = "SH"
        case si = "SI"
        case sj = "SJ"
        case sk = "SK"
        case sl = "SL"
        case sm = "SM"
        case sn = "SN"
        case so = "SO"
        case sr = "SR"
        case ss = "SS"
        case st = "ST"
        case sv = "SV"
        case sx = "SX"
        case sz = "SZ"
        case ta = "TA"
        case tc = "TC"
        case td = "TD"
        case tf = "TF"
        case tg = "TG"
        case th = "TH"
        case tj = "TJ"
        case tk = "TK"
        case tl = "TL"
        case tm = "TM"
        case tn = "TN"
        case to = "TO"
        case tr = "TR"
        case tt = "TT"
        case tv = "TV"
        case tw = "TW"
        case tz = "TZ"
        case ua = "UA"
        case ug = "UG"
        case us = "US"
        case uy = "UY"
        case uz = "UZ"
        case va = "VA"
        case vc = "VC"
        case ve = "VE"
        case vg = "VG"
        case vn = "VN"
        case vu = "VU"
        case wf = "WF"
        case ws = "WS"
        case xk = "XK"
        case ye = "YE"
        case yt = "YT"
        case za = "ZA"
        case zm = "ZM"
        case zw = "ZW"
        case zz = "ZZ"
    }

    public init(allowedCountries: [AllowedCountry]) {
        self.allowedCountries = allowedCountries
    }

    private enum CodingKeys: String, CodingKey {
        case allowedCountries = "allowed_countries"
    }
}

/// Polymorphic
public struct PaymentSource: Codable {
    public var account: Account?
    public var alipayAccount: AlipayAccount?
    public var bankAccount: BankAccount?
    public var bitcoinReceiver: BitcoinReceiver?
    public var card: Card?
    /// `Source` objects allow you to accept a variety of payment methods. They
    /// represent a customer's payment instrument, and can be used with the Stripe API
    /// just like a `Card` object: once chargeable, they can be charged, or can be
    /// attached to customers.
    /// 
    /// Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
    public var source: Source?

    public init(account: Account? = nil, alipayAccount: AlipayAccount? = nil, bankAccount: BankAccount? = nil, bitcoinReceiver: BitcoinReceiver? = nil, card: Card? = nil, source: Source? = nil) {
        self.account = account
        self.alipayAccount = alipayAccount
        self.bankAccount = bankAccount
        self.bitcoinReceiver = bitcoinReceiver
        self.card = card
        self.source = source
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        self.account = try? container.decode(Account.self)
        self.alipayAccount = try? container.decode(AlipayAccount.self)
        self.bankAccount = try? container.decode(BankAccount.self)
        self.bitcoinReceiver = try? container.decode(BitcoinReceiver.self)
        self.card = try? container.decode(Card.self)
        self.source = try? container.decode(Source.self)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        if let value = account { try container.encode(value) }
        if let value = alipayAccount { try container.encode(value) }
        if let value = bankAccount { try container.encode(value) }
        if let value = bitcoinReceiver { try container.encode(value) }
        if let value = card { try container.encode(value) }
        if let value = source { try container.encode(value) }
    }
}

/// A `Payout` object is created when you receive funds from Stripe, or when you
/// initiate a payout to either a bank account or debit card of a [connected
/// Stripe account](/docs/connect/bank-debit-card-payouts). You can retrieve individual payouts,
/// as well as list all payouts. Payouts are made on [varying
/// schedules](/docs/connect/manage-payout-schedule), depending on your country and
/// industry.
/// 
/// Related guide: [Receiving Payouts](https://stripe.com/docs/payouts).
public final class Payout: Codable {
    /// Amount (in %s) to be transferred to your bank account or debit card.
    public var amount: Int
    /// Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.
    public var arrivalDate: Int
    /// Returns `true` if the payout was created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule), and `false` if it was [requested manually](https://stripe.com/docs/payouts#manual-payouts).
    public var isAutomatic: Bool
    /// ID of the balance transaction that describes the impact of this payout on your account balance.
    public var balanceTransaction: BalanceTransaction?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// An arbitrary string attached to the object. Often useful for displaying to users.
    public var description: String?
    /// ID of the bank account or card the payout was sent to.
    public var destination: Destination?
    /// If the payout failed or was canceled, this will be the ID of the balance transaction that reversed the initial balance transaction, and puts the funds from the failed payout back in your balance.
    public var failureBalanceTransaction: FailureBalanceTransaction?
    /// Error code explaining reason for payout failure if available. See [Types of payout failures](https://stripe.com/docs/api#payout_failures) for a list of failure codes.
    public var failureCode: String?
    /// Message to user further explaining reason for payout failure if available.
    public var failureMessage: String?
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces](https://stripe.com/blog/instant-payouts-for-marketplaces) for more information.)
    public var method: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// If the payout reverses another, this is the ID of the original payout.
    public var originalPayout: OriginalPayout?
    /// If the payout was reversed, this is the ID of the payout that reverses this payout.
    public var reversedBy: ReversedBy?
    /// The source balance this payout came from. One of `card`, `fpx`, or `bank_account`.
    public var sourceType: String
    /// Extra information about a payout to be displayed on the user's bank statement.
    public var statementDescriptor: String?
    /// Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it is submitted to the bank, when it becomes `in_transit`. The status then changes to `paid` if the transaction goes through, or to `failed` or `canceled` (within 5 business days). Some failed payouts may initially show as `paid` but then change to `failed`.
    public var status: String
    /// Can be `bank_account` or `card`.
    public var type: `Type`

    /// ID of the balance transaction that describes the impact of this payout on your account balance.
    public final class BalanceTransaction: Codable {
        public var string: String?
        public var balanceTransaction: StripeAPI.BalanceTransaction?

        public init(string: String? = nil, balanceTransaction: StripeAPI.BalanceTransaction? = nil) {
            self.string = string
            self.balanceTransaction = balanceTransaction
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.balanceTransaction = try? container.decode(StripeAPI.BalanceTransaction.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = balanceTransaction { try container.encode(value) }
        }
    }

    /// ID of the bank account or card the payout was sent to.
    public struct Destination: Codable {
        public var string: String?
        public var bankAccount: BankAccount?
        public var card: Card?
        public var deletedBankAccount: DeletedBankAccount?
        public var deletedCard: DeletedCard?

        public init(string: String? = nil, bankAccount: BankAccount? = nil, card: Card? = nil, deletedBankAccount: DeletedBankAccount? = nil, deletedCard: DeletedCard? = nil) {
            self.string = string
            self.bankAccount = bankAccount
            self.card = card
            self.deletedBankAccount = deletedBankAccount
            self.deletedCard = deletedCard
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.bankAccount = try? container.decode(BankAccount.self)
            self.card = try? container.decode(Card.self)
            self.deletedBankAccount = try? container.decode(DeletedBankAccount.self)
            self.deletedCard = try? container.decode(DeletedCard.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = bankAccount { try container.encode(value) }
            if let value = card { try container.encode(value) }
            if let value = deletedBankAccount { try container.encode(value) }
            if let value = deletedCard { try container.encode(value) }
        }
    }

    /// If the payout failed or was canceled, this will be the ID of the balance transaction that reversed the initial balance transaction, and puts the funds from the failed payout back in your balance.
    public struct FailureBalanceTransaction: Codable {
        public var string: String?
        public var balanceTransaction: BalanceTransaction?

        public init(string: String? = nil, balanceTransaction: BalanceTransaction? = nil) {
            self.string = string
            self.balanceTransaction = balanceTransaction
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.balanceTransaction = try? container.decode(BalanceTransaction.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = balanceTransaction { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case payout
    }

    /// If the payout reverses another, this is the ID of the original payout.
    public struct OriginalPayout: Codable {
        public var string: String?
        public var payout: Payout?

        public init(string: String? = nil, payout: Payout? = nil) {
            self.string = string
            self.payout = payout
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.payout = try? container.decode(Payout.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = payout { try container.encode(value) }
        }
    }

    /// If the payout was reversed, this is the ID of the payout that reverses this payout.
    public struct ReversedBy: Codable {
        public var string: String?
        public var payout: Payout?

        public init(string: String? = nil, payout: Payout? = nil) {
            self.string = string
            self.payout = payout
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.payout = try? container.decode(Payout.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = payout { try container.encode(value) }
        }
    }

    /// Can be `bank_account` or `card`.
    public enum `Type`: String, Codable, CaseIterable {
        case bankAccount = "bank_account"
        case card
    }

    public init(amount: Int, arrivalDate: Int, isAutomatic: Bool, balanceTransaction: BalanceTransaction? = nil, created: Int, currency: String, description: String? = nil, destination: Destination? = nil, failureBalanceTransaction: FailureBalanceTransaction? = nil, failureCode: String? = nil, failureMessage: String? = nil, id: String, isLivemode: Bool, metadata: [String: String]? = nil, method: String, object: Object, originalPayout: OriginalPayout? = nil, reversedBy: ReversedBy? = nil, sourceType: String, statementDescriptor: String? = nil, status: String, type: `Type`) {
        self.amount = amount
        self.arrivalDate = arrivalDate
        self.isAutomatic = isAutomatic
        self.balanceTransaction = balanceTransaction
        self.created = created
        self.currency = currency
        self.description = description
        self.destination = destination
        self.failureBalanceTransaction = failureBalanceTransaction
        self.failureCode = failureCode
        self.failureMessage = failureMessage
        self.id = id
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.method = method
        self.object = object
        self.originalPayout = originalPayout
        self.reversedBy = reversedBy
        self.sourceType = sourceType
        self.statementDescriptor = statementDescriptor
        self.status = status
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case arrivalDate = "arrival_date"
        case isAutomatic = "automatic"
        case balanceTransaction = "balance_transaction"
        case created
        case currency
        case description
        case destination
        case failureBalanceTransaction = "failure_balance_transaction"
        case failureCode = "failure_code"
        case failureMessage = "failure_message"
        case id
        case isLivemode = "livemode"
        case metadata
        case method
        case object
        case originalPayout = "original_payout"
        case reversedBy = "reversed_by"
        case sourceType = "source_type"
        case statementDescriptor = "statement_descriptor"
        case status
        case type
    }
}

public struct Period: Codable {
    /// The end date of this usage period. All usage up to and including this point in time is included.
    public var end: Int?
    /// The start date of this usage period. All usage after this point in time is included.
    public var start: Int?

    public init(end: Int? = nil, start: Int? = nil) {
        self.end = end
        self.start = start
    }
}

/// This is an object representing a person associated with a Stripe account.
/// 
/// A platform cannot access a Standard or Express account's persons after the account starts onboarding, such as after generating an account link for the account.
/// See the [Standard onboarding](https://stripe.com/docs/connect/standard-accounts) or [Express onboarding documentation](https://stripe.com/docs/connect/express-accounts) for information about platform pre-filling and account onboarding steps.
/// 
/// Related guide: [Handling Identity Verification with the API](https://stripe.com/docs/connect/identity-verification-api#person-information).
public struct Person: Codable {
    /// The account the person is associated with.
    public var account: String
    public var address: Address?
    public var addressKana: AddressKana?
    public var addressKanji: AddressKanji?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// LegalEntityDOB
    public var dob: LegalEntityDob?
    /// The person's email address.
    public var email: String?
    /// The person's first name.
    public var firstName: String?
    /// The Kana variation of the person's first name (Japan only).
    public var firstNameKana: String?
    /// The Kanji variation of the person's first name (Japan only).
    public var firstNameKanji: String?
    /// A list of alternate names or aliases that the person is known by.
    public var fullNameAliases: [String]?
    public var futureRequirements: FutureRequirements?
    /// The person's gender (International regulations require either "male" or "female").
    public var gender: String?
    /// Unique identifier for the object.
    public var id: String
    /// Whether the person's `id_number` was provided.
    public var isIDNumberProvided: Bool?
    /// The person's last name.
    public var lastName: String?
    /// The Kana variation of the person's last name (Japan only).
    public var lastNameKana: String?
    /// The Kanji variation of the person's last name (Japan only).
    public var lastNameKanji: String?
    /// The person's maiden name.
    public var maidenName: String?
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// The country where the person is a national.
    public var nationality: String?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The person's phone number.
    public var phone: String?
    /// Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction.
    public var politicalExposure: PoliticalExposure?
    /// PersonRelationship
    public var relationship: PersonRelationship?
    public var requirements: Requirements?
    /// Whether the last four digits of the person's Social Security number have been provided (U.S. only).
    public var isSsnLast4Provided: Bool?
    public var verification: LegalEntityPersonVerification?

    public struct AddressKana: Codable {
        public var legalEntityJapanAddress: LegalEntityJapanAddress?

        public init(legalEntityJapanAddress: LegalEntityJapanAddress? = nil) {
            self.legalEntityJapanAddress = legalEntityJapanAddress
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.legalEntityJapanAddress = try? container.decode(LegalEntityJapanAddress.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = legalEntityJapanAddress { try container.encode(value) }
        }
    }

    public struct AddressKanji: Codable {
        public var legalEntityJapanAddress: LegalEntityJapanAddress?

        public init(legalEntityJapanAddress: LegalEntityJapanAddress? = nil) {
            self.legalEntityJapanAddress = legalEntityJapanAddress
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.legalEntityJapanAddress = try? container.decode(LegalEntityJapanAddress.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = legalEntityJapanAddress { try container.encode(value) }
        }
    }

    public struct FutureRequirements: Codable {
        public var personFutureRequirements: PersonFutureRequirements?

        public init(personFutureRequirements: PersonFutureRequirements? = nil) {
            self.personFutureRequirements = personFutureRequirements
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.personFutureRequirements = try? container.decode(PersonFutureRequirements.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = personFutureRequirements { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case person
    }

    /// Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction.
    public enum PoliticalExposure: String, Codable, CaseIterable {
        case existing
        case `none`
    }

    public struct Requirements: Codable {
        public var personRequirements: PersonRequirements?

        public init(personRequirements: PersonRequirements? = nil) {
            self.personRequirements = personRequirements
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.personRequirements = try? container.decode(PersonRequirements.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = personRequirements { try container.encode(value) }
        }
    }

    public init(account: String, address: Address? = nil, addressKana: AddressKana? = nil, addressKanji: AddressKanji? = nil, created: Int, dob: LegalEntityDob? = nil, email: String? = nil, firstName: String? = nil, firstNameKana: String? = nil, firstNameKanji: String? = nil, fullNameAliases: [String]? = nil, futureRequirements: FutureRequirements? = nil, gender: String? = nil, id: String, isIDNumberProvided: Bool? = nil, lastName: String? = nil, lastNameKana: String? = nil, lastNameKanji: String? = nil, maidenName: String? = nil, metadata: [String: String]? = nil, nationality: String? = nil, object: Object, phone: String? = nil, politicalExposure: PoliticalExposure? = nil, relationship: PersonRelationship? = nil, requirements: Requirements? = nil, isSsnLast4Provided: Bool? = nil, verification: LegalEntityPersonVerification? = nil) {
        self.account = account
        self.address = address
        self.addressKana = addressKana
        self.addressKanji = addressKanji
        self.created = created
        self.dob = dob
        self.email = email
        self.firstName = firstName
        self.firstNameKana = firstNameKana
        self.firstNameKanji = firstNameKanji
        self.fullNameAliases = fullNameAliases
        self.futureRequirements = futureRequirements
        self.gender = gender
        self.id = id
        self.isIDNumberProvided = isIDNumberProvided
        self.lastName = lastName
        self.lastNameKana = lastNameKana
        self.lastNameKanji = lastNameKanji
        self.maidenName = maidenName
        self.metadata = metadata
        self.nationality = nationality
        self.object = object
        self.phone = phone
        self.politicalExposure = politicalExposure
        self.relationship = relationship
        self.requirements = requirements
        self.isSsnLast4Provided = isSsnLast4Provided
        self.verification = verification
    }

    private enum CodingKeys: String, CodingKey {
        case account
        case address
        case addressKana = "address_kana"
        case addressKanji = "address_kanji"
        case created
        case dob
        case email
        case firstName = "first_name"
        case firstNameKana = "first_name_kana"
        case firstNameKanji = "first_name_kanji"
        case fullNameAliases = "full_name_aliases"
        case futureRequirements = "future_requirements"
        case gender
        case id
        case isIDNumberProvided = "id_number_provided"
        case lastName = "last_name"
        case lastNameKana = "last_name_kana"
        case lastNameKanji = "last_name_kanji"
        case maidenName = "maiden_name"
        case metadata
        case nationality
        case object
        case phone
        case politicalExposure = "political_exposure"
        case relationship
        case requirements
        case isSsnLast4Provided = "ssn_last_4_provided"
        case verification
    }
}

public struct PersonFutureRequirements: Codable {
    /// Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
    public var alternatives: [AccountRequirementsAlternative]?
    /// Fields that need to be collected to keep the person's account enabled. If not collected by the account's `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash, and may immediately become `past_due`, but the account may also be given a grace period depending on the account's enablement state prior to transition.
    public var currentlyDue: [String]
    /// Fields that are `currently_due` and need to be collected again because validation or verification failed.
    public var errors: [AccountRequirementsError]
    /// Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `future_requirements[current_deadline]` becomes set.
    public var eventuallyDue: [String]
    /// Fields that weren't collected by the account's `requirements.current_deadline`. These fields need to be collected to enable the person's account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`.
    public var pastDue: [String]
    /// Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`.
    public var pendingVerification: [String]

    public init(alternatives: [AccountRequirementsAlternative]? = nil, currentlyDue: [String], errors: [AccountRequirementsError], eventuallyDue: [String], pastDue: [String], pendingVerification: [String]) {
        self.alternatives = alternatives
        self.currentlyDue = currentlyDue
        self.errors = errors
        self.eventuallyDue = eventuallyDue
        self.pastDue = pastDue
        self.pendingVerification = pendingVerification
    }

    private enum CodingKeys: String, CodingKey {
        case alternatives
        case currentlyDue = "currently_due"
        case errors
        case eventuallyDue = "eventually_due"
        case pastDue = "past_due"
        case pendingVerification = "pending_verification"
    }
}

public struct PersonRelationship: Codable {
    /// Whether the person is a director of the account's legal entity. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations.
    public var isDirector: Bool?
    /// Whether the person has significant responsibility to control, manage, or direct the organization.
    public var isExecutive: Bool?
    /// Whether the person is an owner of the account’s legal entity.
    public var isOwner: Bool?
    /// The percent owned by the person of the account's legal entity.
    public var percentOwnership: Double?
    /// Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account.
    public var isRepresentative: Bool?
    /// The person's title (e.g., CEO, Support Engineer).
    public var title: String?

    public init(isDirector: Bool? = nil, isExecutive: Bool? = nil, isOwner: Bool? = nil, percentOwnership: Double? = nil, isRepresentative: Bool? = nil, title: String? = nil) {
        self.isDirector = isDirector
        self.isExecutive = isExecutive
        self.isOwner = isOwner
        self.percentOwnership = percentOwnership
        self.isRepresentative = isRepresentative
        self.title = title
    }

    private enum CodingKeys: String, CodingKey {
        case isDirector = "director"
        case isExecutive = "executive"
        case isOwner = "owner"
        case percentOwnership = "percent_ownership"
        case isRepresentative = "representative"
        case title
    }
}

public struct PersonRequirements: Codable {
    /// Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
    public var alternatives: [AccountRequirementsAlternative]?
    /// Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.
    public var currentlyDue: [String]
    /// Fields that are `currently_due` and need to be collected again because validation or verification failed.
    public var errors: [AccountRequirementsError]
    /// Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `current_deadline` becomes set.
    public var eventuallyDue: [String]
    /// Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable the person's account.
    public var pastDue: [String]
    /// Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`.
    public var pendingVerification: [String]

    public init(alternatives: [AccountRequirementsAlternative]? = nil, currentlyDue: [String], errors: [AccountRequirementsError], eventuallyDue: [String], pastDue: [String], pendingVerification: [String]) {
        self.alternatives = alternatives
        self.currentlyDue = currentlyDue
        self.errors = errors
        self.eventuallyDue = eventuallyDue
        self.pastDue = pastDue
        self.pendingVerification = pendingVerification
    }

    private enum CodingKeys: String, CodingKey {
        case alternatives
        case currentlyDue = "currently_due"
        case errors
        case eventuallyDue = "eventually_due"
        case pastDue = "past_due"
        case pendingVerification = "pending_verification"
    }
}

/// You can now model subscriptions more flexibly using the [Prices API](https://stripe.com/docs/api#prices). It replaces the Plans API and is backwards compatible to simplify your migration.
/// 
/// Plans define the base price, currency, and billing cycle for recurring purchases of products.
/// [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.
/// 
/// For example, you might have a single "gold" product that has plans for $10/month, $100/year, €9/month, and €90/year.
/// 
/// Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) and more about [products and prices](https://stripe.com/docs/billing/prices-guide).
public struct Plan: Codable {
    /// Whether the plan can be used for new purchases.
    public var isActive: Bool
    /// Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.
    public var aggregateUsage: AggregateUsage?
    /// The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
    public var amount: Int?
    /// The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
    public var amountDecimal: String?
    /// Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
    public var billingScheme: BillingScheme
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// Unique identifier for the object.
    public var id: String
    /// The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
    public var interval: Interval
    /// The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
    public var intervalCount: Int
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// A brief description of the plan, hidden from customers.
    public var nickname: String?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The product whose pricing this plan determines.
    public var product: Product?
    /// Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
    public var tiers: [PlanTier]?
    /// Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
    public var tiersMode: TiersMode?
    /// Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`.
    public var transformUsage: TransformUsage?
    /// Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).
    public var trialPeriodDays: Int?
    /// Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
    public var usageType: UsageType

    /// Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.
    public enum AggregateUsage: String, Codable, CaseIterable {
        case lastDuringPeriod = "last_during_period"
        case lastEver = "last_ever"
        case max
        case sum
    }

    /// Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
    public enum BillingScheme: String, Codable, CaseIterable {
        case perUnit = "per_unit"
        case tiered
    }

    /// The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
    public enum Interval: String, Codable, CaseIterable {
        case day
        case month
        case week
        case year
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case plan
    }

    /// The product whose pricing this plan determines.
    public final class Product: Codable {
        public var string: String?
        /// Products describe the specific goods or services you offer to your customers.
        /// For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.
        /// They can be used in conjunction with [Prices](https://stripe.com/docs/api#prices) to configure pricing in Checkout and Subscriptions.
        /// 
        /// Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) or accept [one-time payments with Checkout](https://stripe.com/docs/payments/checkout/client#create-products) and more about [Products and Prices](https://stripe.com/docs/billing/prices-guide)
        public var product: StripeAPI.Product?
        public var deletedProduct: DeletedProduct?

        public init(string: String? = nil, product: StripeAPI.Product? = nil, deletedProduct: DeletedProduct? = nil) {
            self.string = string
            self.product = product
            self.deletedProduct = deletedProduct
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.product = try? container.decode(StripeAPI.Product.self)
            self.deletedProduct = try? container.decode(DeletedProduct.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = product { try container.encode(value) }
            if let value = deletedProduct { try container.encode(value) }
        }
    }

    /// Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
    public enum TiersMode: String, Codable, CaseIterable {
        case graduated
        case volume
    }

    /// Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`.
    public final class TransformUsage: Codable {
        public var transformUsage: StripeAPI.TransformUsage?

        public init(transformUsage: StripeAPI.TransformUsage? = nil) {
            self.transformUsage = transformUsage
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.transformUsage = try? container.decode(StripeAPI.TransformUsage.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = transformUsage { try container.encode(value) }
        }
    }

    /// Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
    public enum UsageType: String, Codable, CaseIterable {
        case licensed
        case metered
    }

    public init(isActive: Bool, aggregateUsage: AggregateUsage? = nil, amount: Int? = nil, amountDecimal: String? = nil, billingScheme: BillingScheme, created: Int, currency: String, id: String, interval: Interval, intervalCount: Int, isLivemode: Bool, metadata: [String: String]? = nil, nickname: String? = nil, object: Object, product: Product? = nil, tiers: [PlanTier]? = nil, tiersMode: TiersMode? = nil, transformUsage: TransformUsage? = nil, trialPeriodDays: Int? = nil, usageType: UsageType) {
        self.isActive = isActive
        self.aggregateUsage = aggregateUsage
        self.amount = amount
        self.amountDecimal = amountDecimal
        self.billingScheme = billingScheme
        self.created = created
        self.currency = currency
        self.id = id
        self.interval = interval
        self.intervalCount = intervalCount
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.nickname = nickname
        self.object = object
        self.product = product
        self.tiers = tiers
        self.tiersMode = tiersMode
        self.transformUsage = transformUsage
        self.trialPeriodDays = trialPeriodDays
        self.usageType = usageType
    }

    private enum CodingKeys: String, CodingKey {
        case isActive = "active"
        case aggregateUsage = "aggregate_usage"
        case amount
        case amountDecimal = "amount_decimal"
        case billingScheme = "billing_scheme"
        case created
        case currency
        case id
        case interval
        case intervalCount = "interval_count"
        case isLivemode = "livemode"
        case metadata
        case nickname
        case object
        case product
        case tiers
        case tiersMode = "tiers_mode"
        case transformUsage = "transform_usage"
        case trialPeriodDays = "trial_period_days"
        case usageType = "usage_type"
    }
}

public struct PlanTier: Codable {
    /// Price for the entire tier.
    public var flatAmount: Int?
    /// Same as `flat_amount`, but contains a decimal value with at most 12 decimal places.
    public var flatAmountDecimal: String?
    /// Per unit price for units relevant to the tier.
    public var unitAmount: Int?
    /// Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
    public var unitAmountDecimal: String?
    /// Up to and including to this quantity will be contained in the tier.
    public var upTo: Int?

    public init(flatAmount: Int? = nil, flatAmountDecimal: String? = nil, unitAmount: Int? = nil, unitAmountDecimal: String? = nil, upTo: Int? = nil) {
        self.flatAmount = flatAmount
        self.flatAmountDecimal = flatAmountDecimal
        self.unitAmount = unitAmount
        self.unitAmountDecimal = unitAmountDecimal
        self.upTo = upTo
    }

    private enum CodingKeys: String, CodingKey {
        case flatAmount = "flat_amount"
        case flatAmountDecimal = "flat_amount_decimal"
        case unitAmount = "unit_amount"
        case unitAmountDecimal = "unit_amount_decimal"
        case upTo = "up_to"
    }
}

/// PlatformTax
public struct PlatformTaxFee: Codable {
    /// The Connected account that incurred this charge.
    public var account: String
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The payment object that caused this tax to be inflicted.
    public var sourceTransaction: String
    /// The type of tax (VAT).
    public var type: String

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case platformTaxFee = "platform_tax_fee"
    }

    public init(account: String, id: String, object: Object, sourceTransaction: String, type: String) {
        self.account = account
        self.id = id
        self.object = object
        self.sourceTransaction = sourceTransaction
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case account
        case id
        case object
        case sourceTransaction = "source_transaction"
        case type
    }
}

public struct PortalBusinessProfile: Codable {
    /// The messaging shown to customers in the portal.
    public var headline: String?
    /// A link to the business’s publicly available privacy policy.
    public var privacyPolicyURL: String
    /// A link to the business’s publicly available terms of service.
    public var termsOfServiceURL: String

    public init(headline: String? = nil, privacyPolicyURL: String, termsOfServiceURL: String) {
        self.headline = headline
        self.privacyPolicyURL = privacyPolicyURL
        self.termsOfServiceURL = termsOfServiceURL
    }

    private enum CodingKeys: String, CodingKey {
        case headline
        case privacyPolicyURL = "privacy_policy_url"
        case termsOfServiceURL = "terms_of_service_url"
    }
}

public struct PortalCustomerUpdate: Codable {
    /// The types of customer updates that are supported. When empty, customers are not updateable.
    public var allowedUpdates: [AllowedUpdate]
    /// Whether the feature is enabled.
    public var isEnabled: Bool

    public enum AllowedUpdate: String, Codable, CaseIterable {
        case address
        case email
        case phone
        case shipping
        case taxID = "tax_id"
    }

    public init(allowedUpdates: [AllowedUpdate], isEnabled: Bool) {
        self.allowedUpdates = allowedUpdates
        self.isEnabled = isEnabled
    }

    private enum CodingKeys: String, CodingKey {
        case allowedUpdates = "allowed_updates"
        case isEnabled = "enabled"
    }
}

public struct PortalFeatures: Codable {
    /// PortalCustomerUpdate
    public var customerUpdate: PortalCustomerUpdate
    /// PortalInvoiceList
    public var invoiceHistory: PortalInvoiceList
    /// PortalPaymentMethodUpdate
    public var paymentMethodUpdate: PortalPaymentMethodUpdate
    /// PortalSubscriptionCancel
    public var subscriptionCancel: PortalSubscriptionCancel
    /// PortalSubscriptionPause
    public var subscriptionPause: PortalSubscriptionPause
    /// PortalSubscriptionUpdate
    public var subscriptionUpdate: PortalSubscriptionUpdate

    public init(customerUpdate: PortalCustomerUpdate, invoiceHistory: PortalInvoiceList, paymentMethodUpdate: PortalPaymentMethodUpdate, subscriptionCancel: PortalSubscriptionCancel, subscriptionPause: PortalSubscriptionPause, subscriptionUpdate: PortalSubscriptionUpdate) {
        self.customerUpdate = customerUpdate
        self.invoiceHistory = invoiceHistory
        self.paymentMethodUpdate = paymentMethodUpdate
        self.subscriptionCancel = subscriptionCancel
        self.subscriptionPause = subscriptionPause
        self.subscriptionUpdate = subscriptionUpdate
    }

    private enum CodingKeys: String, CodingKey {
        case customerUpdate = "customer_update"
        case invoiceHistory = "invoice_history"
        case paymentMethodUpdate = "payment_method_update"
        case subscriptionCancel = "subscription_cancel"
        case subscriptionPause = "subscription_pause"
        case subscriptionUpdate = "subscription_update"
    }
}

public struct PortalInvoiceList: Codable {
    /// Whether the feature is enabled.
    public var isEnabled: Bool

    public init(isEnabled: Bool) {
        self.isEnabled = isEnabled
    }

    private enum CodingKeys: String, CodingKey {
        case isEnabled = "enabled"
    }
}

public struct PortalPaymentMethodUpdate: Codable {
    /// Whether the feature is enabled.
    public var isEnabled: Bool

    public init(isEnabled: Bool) {
        self.isEnabled = isEnabled
    }

    private enum CodingKeys: String, CodingKey {
        case isEnabled = "enabled"
    }
}

public struct PortalSubscriptionCancel: Codable {
    /// PortalSubscriptionCancellationReason
    public var cancellationReason: PortalSubscriptionCancellationReason
    /// Whether the feature is enabled.
    public var isEnabled: Bool
    /// Whether to cancel subscriptions immediately or at the end of the billing period.
    public var mode: Mode
    /// Whether to create prorations when canceling subscriptions. Possible values are `none` and `create_prorations`.
    public var prorationBehavior: ProrationBehavior

    /// Whether to cancel subscriptions immediately or at the end of the billing period.
    public enum Mode: String, Codable, CaseIterable {
        case atPeriodEnd = "at_period_end"
        case immediately
    }

    /// Whether to create prorations when canceling subscriptions. Possible values are `none` and `create_prorations`.
    public enum ProrationBehavior: String, Codable, CaseIterable {
        case alwaysInvoice = "always_invoice"
        case createProrations = "create_prorations"
        case `none`
    }

    public init(cancellationReason: PortalSubscriptionCancellationReason, isEnabled: Bool, mode: Mode, prorationBehavior: ProrationBehavior) {
        self.cancellationReason = cancellationReason
        self.isEnabled = isEnabled
        self.mode = mode
        self.prorationBehavior = prorationBehavior
    }

    private enum CodingKeys: String, CodingKey {
        case cancellationReason = "cancellation_reason"
        case isEnabled = "enabled"
        case mode
        case prorationBehavior = "proration_behavior"
    }
}

public struct PortalSubscriptionCancellationReason: Codable {
    /// Whether the feature is enabled.
    public var isEnabled: Bool
    /// Which cancellation reasons will be given as options to the customer.
    public var options: [Option]

    public enum Option: String, Codable, CaseIterable {
        case customerService = "customer_service"
        case lowQuality = "low_quality"
        case missingFeatures = "missing_features"
        case other
        case switchedService = "switched_service"
        case tooComplex = "too_complex"
        case tooExpensive = "too_expensive"
        case unused
    }

    public init(isEnabled: Bool, options: [Option]) {
        self.isEnabled = isEnabled
        self.options = options
    }

    private enum CodingKeys: String, CodingKey {
        case isEnabled = "enabled"
        case options
    }
}

public struct PortalSubscriptionPause: Codable {
    /// Whether the feature is enabled.
    public var isEnabled: Bool

    public init(isEnabled: Bool) {
        self.isEnabled = isEnabled
    }

    private enum CodingKeys: String, CodingKey {
        case isEnabled = "enabled"
    }
}

public struct PortalSubscriptionUpdate: Codable {
    /// The types of subscription updates that are supported for items listed in the `products` attribute. When empty, subscriptions are not updateable.
    public var defaultAllowedUpdates: [DefaultAllowedUpdate]
    /// Whether the feature is enabled.
    public var isEnabled: Bool
    /// The list of products that support subscription updates.
    public var products: [PortalSubscriptionUpdateProduct]?
    /// Determines how to handle prorations resulting from subscription updates. Valid values are `none`, `create_prorations`, and `always_invoice`.
    public var prorationBehavior: ProrationBehavior

    public enum DefaultAllowedUpdate: String, Codable, CaseIterable {
        case price
        case promotionCode = "promotion_code"
        case quantity
    }

    /// Determines how to handle prorations resulting from subscription updates. Valid values are `none`, `create_prorations`, and `always_invoice`.
    public enum ProrationBehavior: String, Codable, CaseIterable {
        case alwaysInvoice = "always_invoice"
        case createProrations = "create_prorations"
        case `none`
    }

    public init(defaultAllowedUpdates: [DefaultAllowedUpdate], isEnabled: Bool, products: [PortalSubscriptionUpdateProduct]? = nil, prorationBehavior: ProrationBehavior) {
        self.defaultAllowedUpdates = defaultAllowedUpdates
        self.isEnabled = isEnabled
        self.products = products
        self.prorationBehavior = prorationBehavior
    }

    private enum CodingKeys: String, CodingKey {
        case defaultAllowedUpdates = "default_allowed_updates"
        case isEnabled = "enabled"
        case products
        case prorationBehavior = "proration_behavior"
    }
}

public struct PortalSubscriptionUpdateProduct: Codable {
    /// The list of price IDs which, when subscribed to, a subscription can be updated.
    public var prices: [String]
    /// The product ID.
    public var product: String

    public init(prices: [String], product: String) {
        self.prices = prices
        self.product = product
    }
}

/// Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
/// [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
/// 
/// For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.
/// 
/// Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/billing/prices-guide).
public struct Price: Codable {
    /// Whether the price can be used for new purchases.
    public var isActive: Bool
    /// Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
    public var billingScheme: BillingScheme
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters.
    public var lookupKey: String?
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// A brief description of the price, hidden from customers.
    public var nickname: String?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The ID of the product this price is associated with.
    public var product: Product
    /// The recurring components of a price such as `interval` and `usage_type`.
    public var recurring: Recurring?
    /// Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
    public var taxBehavior: TaxBehavior?
    /// Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
    public var tiers: [PriceTier]?
    /// Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
    public var tiersMode: TiersMode?
    /// Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`.
    public var transformQuantity: TransformQuantity?
    /// One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
    public var type: `Type`
    /// The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
    public var unitAmount: Int?
    /// The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
    public var unitAmountDecimal: String?

    /// Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
    public enum BillingScheme: String, Codable, CaseIterable {
        case perUnit = "per_unit"
        case tiered
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case price
    }

    /// The ID of the product this price is associated with.
    public final class Product: Codable {
        public var string: String?
        /// Products describe the specific goods or services you offer to your customers.
        /// For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.
        /// They can be used in conjunction with [Prices](https://stripe.com/docs/api#prices) to configure pricing in Checkout and Subscriptions.
        /// 
        /// Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) or accept [one-time payments with Checkout](https://stripe.com/docs/payments/checkout/client#create-products) and more about [Products and Prices](https://stripe.com/docs/billing/prices-guide)
        public var product: StripeAPI.Product?
        public var deletedProduct: DeletedProduct?

        public init(string: String? = nil, product: StripeAPI.Product? = nil, deletedProduct: DeletedProduct? = nil) {
            self.string = string
            self.product = product
            self.deletedProduct = deletedProduct
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.product = try? container.decode(StripeAPI.Product.self)
            self.deletedProduct = try? container.decode(DeletedProduct.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = product { try container.encode(value) }
            if let value = deletedProduct { try container.encode(value) }
        }
    }

    /// The recurring components of a price such as `interval` and `usage_type`.
    public final class Recurring: Codable {
        public var recurring: StripeAPI.Recurring?

        public init(recurring: StripeAPI.Recurring? = nil) {
            self.recurring = recurring
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.recurring = try? container.decode(StripeAPI.Recurring.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = recurring { try container.encode(value) }
        }
    }

    /// Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
    public enum TaxBehavior: String, Codable, CaseIterable {
        case exclusive
        case inclusive
        case unspecified
    }

    /// Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
    public enum TiersMode: String, Codable, CaseIterable {
        case graduated
        case volume
    }

    /// Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`.
    public final class TransformQuantity: Codable {
        public var transformQuantity: StripeAPI.TransformQuantity?

        public init(transformQuantity: StripeAPI.TransformQuantity? = nil) {
            self.transformQuantity = transformQuantity
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.transformQuantity = try? container.decode(StripeAPI.TransformQuantity.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = transformQuantity { try container.encode(value) }
        }
    }

    /// One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
    public enum `Type`: String, Codable, CaseIterable {
        case oneTime = "one_time"
        case recurring
    }

    public init(isActive: Bool, billingScheme: BillingScheme, created: Int, currency: String, id: String, isLivemode: Bool, lookupKey: String? = nil, metadata: [String: String], nickname: String? = nil, object: Object, product: Product, recurring: Recurring? = nil, taxBehavior: TaxBehavior? = nil, tiers: [PriceTier]? = nil, tiersMode: TiersMode? = nil, transformQuantity: TransformQuantity? = nil, type: `Type`, unitAmount: Int? = nil, unitAmountDecimal: String? = nil) {
        self.isActive = isActive
        self.billingScheme = billingScheme
        self.created = created
        self.currency = currency
        self.id = id
        self.isLivemode = isLivemode
        self.lookupKey = lookupKey
        self.metadata = metadata
        self.nickname = nickname
        self.object = object
        self.product = product
        self.recurring = recurring
        self.taxBehavior = taxBehavior
        self.tiers = tiers
        self.tiersMode = tiersMode
        self.transformQuantity = transformQuantity
        self.type = type
        self.unitAmount = unitAmount
        self.unitAmountDecimal = unitAmountDecimal
    }

    private enum CodingKeys: String, CodingKey {
        case isActive = "active"
        case billingScheme = "billing_scheme"
        case created
        case currency
        case id
        case isLivemode = "livemode"
        case lookupKey = "lookup_key"
        case metadata
        case nickname
        case object
        case product
        case recurring
        case taxBehavior = "tax_behavior"
        case tiers
        case tiersMode = "tiers_mode"
        case transformQuantity = "transform_quantity"
        case type
        case unitAmount = "unit_amount"
        case unitAmountDecimal = "unit_amount_decimal"
    }
}

public struct PriceTier: Codable {
    /// Price for the entire tier.
    public var flatAmount: Int?
    /// Same as `flat_amount`, but contains a decimal value with at most 12 decimal places.
    public var flatAmountDecimal: String?
    /// Per unit price for units relevant to the tier.
    public var unitAmount: Int?
    /// Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
    public var unitAmountDecimal: String?
    /// Up to and including to this quantity will be contained in the tier.
    public var upTo: Int?

    public init(flatAmount: Int? = nil, flatAmountDecimal: String? = nil, unitAmount: Int? = nil, unitAmountDecimal: String? = nil, upTo: Int? = nil) {
        self.flatAmount = flatAmount
        self.flatAmountDecimal = flatAmountDecimal
        self.unitAmount = unitAmount
        self.unitAmountDecimal = unitAmountDecimal
        self.upTo = upTo
    }

    private enum CodingKeys: String, CodingKey {
        case flatAmount = "flat_amount"
        case flatAmountDecimal = "flat_amount_decimal"
        case unitAmount = "unit_amount"
        case unitAmountDecimal = "unit_amount_decimal"
        case upTo = "up_to"
    }
}

/// Products describe the specific goods or services you offer to your customers.
/// For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.
/// They can be used in conjunction with [Prices](https://stripe.com/docs/api#prices) to configure pricing in Checkout and Subscriptions.
/// 
/// Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) or accept [one-time payments with Checkout](https://stripe.com/docs/payments/checkout/client#create-products) and more about [Products and Prices](https://stripe.com/docs/billing/prices-guide)
public struct Product: Codable {
    /// Whether the product is currently available for purchase.
    public var isActive: Bool
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
    public var description: String?
    /// Unique identifier for the object.
    public var id: String
    /// A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
    public var images: [String]
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions.
    public var name: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The dimensions of this product for shipping purposes.
    public var packageDimensions: PackageDimensions?
    /// Whether this product is shipped (i.e., physical goods).
    public var isShippable: Bool?
    /// Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used.
    public var statementDescriptor: String?
    /// A [tax code](https://stripe.com/docs/tax/tax-codes) ID.
    public var taxCode: TaxCode?
    /// A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions.
    public var unitLabel: String?
    /// Time at which the object was last updated. Measured in seconds since the Unix epoch.
    public var updated: Int
    /// A URL of a publicly-accessible webpage for this product.
    public var url: String?

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case product
    }

    /// The dimensions of this product for shipping purposes.
    public final class PackageDimensions: Codable {
        public var packageDimensions: StripeAPI.PackageDimensions?

        public init(packageDimensions: StripeAPI.PackageDimensions? = nil) {
            self.packageDimensions = packageDimensions
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.packageDimensions = try? container.decode(StripeAPI.PackageDimensions.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = packageDimensions { try container.encode(value) }
        }
    }

    /// A [tax code](https://stripe.com/docs/tax/tax-codes) ID.
    public final class TaxCode: Codable {
        public var string: String?
        /// TaxProductResourceTaxCode
        ///
        /// [Tax codes](https://stripe.com/docs/tax/tax-codes) classify goods and services for tax purposes.
        public var taxCode: StripeAPI.TaxCode?

        public init(string: String? = nil, taxCode: StripeAPI.TaxCode? = nil) {
            self.string = string
            self.taxCode = taxCode
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.taxCode = try? container.decode(StripeAPI.TaxCode.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = taxCode { try container.encode(value) }
        }
    }

    public init(isActive: Bool, created: Int, description: String? = nil, id: String, images: [String], isLivemode: Bool, metadata: [String: String], name: String, object: Object, packageDimensions: PackageDimensions? = nil, isShippable: Bool? = nil, statementDescriptor: String? = nil, taxCode: TaxCode? = nil, unitLabel: String? = nil, updated: Int, url: String? = nil) {
        self.isActive = isActive
        self.created = created
        self.description = description
        self.id = id
        self.images = images
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.name = name
        self.object = object
        self.packageDimensions = packageDimensions
        self.isShippable = isShippable
        self.statementDescriptor = statementDescriptor
        self.taxCode = taxCode
        self.unitLabel = unitLabel
        self.updated = updated
        self.url = url
    }

    private enum CodingKeys: String, CodingKey {
        case isActive = "active"
        case created
        case description
        case id
        case images
        case isLivemode = "livemode"
        case metadata
        case name
        case object
        case packageDimensions = "package_dimensions"
        case isShippable = "shippable"
        case statementDescriptor = "statement_descriptor"
        case taxCode = "tax_code"
        case unitLabel = "unit_label"
        case updated
        case url
    }
}

/// A Promotion Code represents a customer-redeemable code for a coupon. It can be used to
/// create multiple codes for a single coupon.
public struct PromotionCode: Codable {
    /// Whether the promotion code is currently active. A promotion code is only active if the coupon is also valid.
    public var isActive: Bool
    /// The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer.
    public var code: String
    /// A coupon contains information about a percent-off or amount-off discount you
    /// might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
    /// [orders](https://stripe.com/docs/api#create_order_legacy-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
    public var coupon: Coupon
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The customer that this promotion code can be used by.
    public var customer: Customer?
    /// Date at which the promotion code can no longer be redeemed.
    public var expiresAt: Int?
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Maximum number of times this promotion code can be redeemed.
    public var maxRedemptions: Int?
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// PromotionCodesResourceRestrictions
    public var restrictions: PromotionCodesResourceRestrictions
    /// Number of times this promotion code has been used.
    public var timesRedeemed: Int

    /// The customer that this promotion code can be used by.
    public final class Customer: Codable {
        public var string: String?
        public var customer: StripeAPI.Customer?
        public var deletedCustomer: DeletedCustomer?

        public init(string: String? = nil, customer: StripeAPI.Customer? = nil, deletedCustomer: DeletedCustomer? = nil) {
            self.string = string
            self.customer = customer
            self.deletedCustomer = deletedCustomer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeAPI.Customer.self)
            self.deletedCustomer = try? container.decode(DeletedCustomer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
            if let value = deletedCustomer { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case promotionCode = "promotion_code"
    }

    public init(isActive: Bool, code: String, coupon: Coupon, created: Int, customer: Customer? = nil, expiresAt: Int? = nil, id: String, isLivemode: Bool, maxRedemptions: Int? = nil, metadata: [String: String]? = nil, object: Object, restrictions: PromotionCodesResourceRestrictions, timesRedeemed: Int) {
        self.isActive = isActive
        self.code = code
        self.coupon = coupon
        self.created = created
        self.customer = customer
        self.expiresAt = expiresAt
        self.id = id
        self.isLivemode = isLivemode
        self.maxRedemptions = maxRedemptions
        self.metadata = metadata
        self.object = object
        self.restrictions = restrictions
        self.timesRedeemed = timesRedeemed
    }

    private enum CodingKeys: String, CodingKey {
        case isActive = "active"
        case code
        case coupon
        case created
        case customer
        case expiresAt = "expires_at"
        case id
        case isLivemode = "livemode"
        case maxRedemptions = "max_redemptions"
        case metadata
        case object
        case restrictions
        case timesRedeemed = "times_redeemed"
    }
}

public struct PromotionCodesResourceRestrictions: Codable {
    /// A Boolean indicating if the Promotion Code should only be redeemed for Customers without any successful payments or invoices
    public var isFirstTimeTransaction: Bool
    /// Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work).
    public var minimumAmount: Int?
    /// Three-letter [ISO code](https://stripe.com/docs/currencies) for minimum_amount
    public var minimumAmountCurrency: String?

    public init(isFirstTimeTransaction: Bool, minimumAmount: Int? = nil, minimumAmountCurrency: String? = nil) {
        self.isFirstTimeTransaction = isFirstTimeTransaction
        self.minimumAmount = minimumAmount
        self.minimumAmountCurrency = minimumAmountCurrency
    }

    private enum CodingKeys: String, CodingKey {
        case isFirstTimeTransaction = "first_time_transaction"
        case minimumAmount = "minimum_amount"
        case minimumAmountCurrency = "minimum_amount_currency"
    }
}

/// A Quote is a way to model prices that you'd like to provide to a customer.
/// Once accepted, it will automatically create an invoice, subscription or subscription schedule.
public struct Quote: Codable {
    /// Total before any discounts or taxes are applied.
    public var amountSubtotal: Int
    /// Total after discounts and taxes are applied.
    public var amountTotal: Int
    /// The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Only applicable if there are no line items with recurring prices on the quote.
    public var applicationFeeAmount: Int?
    /// A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. Only applicable if there are line items with recurring prices on the quote.
    public var applicationFeePercent: Double?
    /// QuotesResourceAutomaticTax
    public var automaticTax: QuotesResourceAutomaticTax
    /// Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.
    public var collectionMethod: CollectionMethod
    public var computed: QuotesResourceComputed
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String?
    /// The customer which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
    public var customer: Customer?
    /// The tax rates applied to this quote.
    public var defaultTaxRates: [DefaultTaxRate]?
    /// A description that will be displayed on the quote PDF.
    public var description: String?
    /// The discounts applied to this quote.
    public var discounts: [Discount]
    /// The date on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
    public var expiresAt: Int
    /// A footer that will be displayed on the quote PDF.
    public var footer: String?
    /// Details of the quote that was cloned. See the [cloning documentation](https://stripe.com/docs/quotes/clone) for more details.
    public var fromQuote: FromQuote?
    /// A header that will be displayed on the quote PDF.
    public var header: String?
    /// Unique identifier for the object.
    public var id: String
    /// The invoice that was created from this quote.
    public var invoice: Invoice?
    /// All invoices will be billed using the specified settings.
    public var invoiceSettings: InvoiceSettings?
    /// QuotesResourceListLineItems
    ///
    /// A list of items the customer is being quoted for.
    public var lineItems: LineItems?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize).
    public var number: String?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details.
    public var onBehalfOf: OnBehalfOf?
    /// The status of the quote.
    public var status: Status
    /// QuotesResourceStatusTransitions
    public var statusTransitions: QuotesResourceStatusTransitions
    /// The subscription that was created or updated from this quote.
    public var subscription: Subscription?
    /// QuotesResourceSubscriptionData
    public var subscriptionData: QuotesResourceSubscriptionData
    /// The subscription schedule that was created or updated from this quote.
    public var subscriptionSchedule: SubscriptionSchedule?
    public var totalDetails: QuotesResourceTotalDetails
    /// The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the invoices.
    public var transferData: TransferData?

    /// Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.
    public enum CollectionMethod: String, Codable, CaseIterable {
        case chargeAutomatically = "charge_automatically"
        case sendInvoice = "send_invoice"
    }

    /// The customer which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
    public final class Customer: Codable {
        public var string: String?
        public var customer: StripeAPI.Customer?
        public var deletedCustomer: DeletedCustomer?

        public init(string: String? = nil, customer: StripeAPI.Customer? = nil, deletedCustomer: DeletedCustomer? = nil) {
            self.string = string
            self.customer = customer
            self.deletedCustomer = deletedCustomer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeAPI.Customer.self)
            self.deletedCustomer = try? container.decode(DeletedCustomer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
            if let value = deletedCustomer { try container.encode(value) }
        }
    }

    public struct DefaultTaxRate: Codable {
        public var string: String?
        /// Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.
        /// 
        /// Related guide: [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates).
        public var taxRate: TaxRate?

        public init(string: String? = nil, taxRate: TaxRate? = nil) {
            self.string = string
            self.taxRate = taxRate
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.taxRate = try? container.decode(TaxRate.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = taxRate { try container.encode(value) }
        }
    }

    public final class Discount: Codable {
        public var string: String?
        public var discount: StripeAPI.Discount?

        public init(string: String? = nil, discount: StripeAPI.Discount? = nil) {
            self.string = string
            self.discount = discount
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.discount = try? container.decode(StripeAPI.Discount.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = discount { try container.encode(value) }
        }
    }

    /// Details of the quote that was cloned. See the [cloning documentation](https://stripe.com/docs/quotes/clone) for more details.
    public struct FromQuote: Codable {
        public var quotesResourceFromQuote: QuotesResourceFromQuote?

        public init(quotesResourceFromQuote: QuotesResourceFromQuote? = nil) {
            self.quotesResourceFromQuote = quotesResourceFromQuote
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.quotesResourceFromQuote = try? container.decode(QuotesResourceFromQuote.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = quotesResourceFromQuote { try container.encode(value) }
        }
    }

    /// The invoice that was created from this quote.
    public final class Invoice: Codable {
        public var string: String?
        public var invoice: StripeAPI.Invoice?
        public var deletedInvoice: DeletedInvoice?

        public init(string: String? = nil, invoice: StripeAPI.Invoice? = nil, deletedInvoice: DeletedInvoice? = nil) {
            self.string = string
            self.invoice = invoice
            self.deletedInvoice = deletedInvoice
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.invoice = try? container.decode(StripeAPI.Invoice.self)
            self.deletedInvoice = try? container.decode(DeletedInvoice.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = invoice { try container.encode(value) }
            if let value = deletedInvoice { try container.encode(value) }
        }
    }

    /// All invoices will be billed using the specified settings.
    public struct InvoiceSettings: Codable {
        public var invoiceSettingQuoteSetting: InvoiceSettingQuoteSetting?

        public init(invoiceSettingQuoteSetting: InvoiceSettingQuoteSetting? = nil) {
            self.invoiceSettingQuoteSetting = invoiceSettingQuoteSetting
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.invoiceSettingQuoteSetting = try? container.decode(InvoiceSettingQuoteSetting.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = invoiceSettingQuoteSetting { try container.encode(value) }
        }
    }

    /// QuotesResourceListLineItems
    ///
    /// A list of items the customer is being quoted for.
    public struct LineItems: Codable {
        /// Details about each object.
        public var data: [Item]
        /// True if this list has another page of items after this one that can be fetched.
        public var hasMore: Bool
        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public var object: Object
        /// The URL where this list can be accessed.
        public var url: String

        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public enum Object: String, Codable, CaseIterable {
            case list
        }

        public init(data: [Item], hasMore: Bool, object: Object, url: String) {
            self.data = data
            self.hasMore = hasMore
            self.object = object
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case data
            case hasMore = "has_more"
            case object
            case url
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case quote
    }

    /// The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details.
    public struct OnBehalfOf: Codable {
        public var string: String?
        public var account: Account?

        public init(string: String? = nil, account: Account? = nil) {
            self.string = string
            self.account = account
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.account = try? container.decode(Account.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = account { try container.encode(value) }
        }
    }

    /// The status of the quote.
    public enum Status: String, Codable, CaseIterable {
        case accepted
        case canceled
        case draft
        case `open`
    }

    /// The subscription that was created or updated from this quote.
    public final class Subscription: Codable {
        public var string: String?
        public var subscription: StripeAPI.Subscription?

        public init(string: String? = nil, subscription: StripeAPI.Subscription? = nil) {
            self.string = string
            self.subscription = subscription
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.subscription = try? container.decode(StripeAPI.Subscription.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = subscription { try container.encode(value) }
        }
    }

    /// The subscription schedule that was created or updated from this quote.
    public final class SubscriptionSchedule: Codable {
        public var string: String?
        public var subscriptionSchedule: StripeAPI.SubscriptionSchedule?

        public init(string: String? = nil, subscriptionSchedule: StripeAPI.SubscriptionSchedule? = nil) {
            self.string = string
            self.subscriptionSchedule = subscriptionSchedule
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.subscriptionSchedule = try? container.decode(StripeAPI.SubscriptionSchedule.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = subscriptionSchedule { try container.encode(value) }
        }
    }

    /// The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the invoices.
    public struct TransferData: Codable {
        public var quotesResourceTransferData: QuotesResourceTransferData?

        public init(quotesResourceTransferData: QuotesResourceTransferData? = nil) {
            self.quotesResourceTransferData = quotesResourceTransferData
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.quotesResourceTransferData = try? container.decode(QuotesResourceTransferData.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = quotesResourceTransferData { try container.encode(value) }
        }
    }

    public init(amountSubtotal: Int, amountTotal: Int, applicationFeeAmount: Int? = nil, applicationFeePercent: Double? = nil, automaticTax: QuotesResourceAutomaticTax, collectionMethod: CollectionMethod, computed: QuotesResourceComputed, created: Int, currency: String? = nil, customer: Customer? = nil, defaultTaxRates: [DefaultTaxRate]? = nil, description: String? = nil, discounts: [Discount], expiresAt: Int, footer: String? = nil, fromQuote: FromQuote? = nil, header: String? = nil, id: String, invoice: Invoice? = nil, invoiceSettings: InvoiceSettings? = nil, lineItems: LineItems? = nil, isLivemode: Bool, metadata: [String: String], number: String? = nil, object: Object, onBehalfOf: OnBehalfOf? = nil, status: Status, statusTransitions: QuotesResourceStatusTransitions, subscription: Subscription? = nil, subscriptionData: QuotesResourceSubscriptionData, subscriptionSchedule: SubscriptionSchedule? = nil, totalDetails: QuotesResourceTotalDetails, transferData: TransferData? = nil) {
        self.amountSubtotal = amountSubtotal
        self.amountTotal = amountTotal
        self.applicationFeeAmount = applicationFeeAmount
        self.applicationFeePercent = applicationFeePercent
        self.automaticTax = automaticTax
        self.collectionMethod = collectionMethod
        self.computed = computed
        self.created = created
        self.currency = currency
        self.customer = customer
        self.defaultTaxRates = defaultTaxRates
        self.description = description
        self.discounts = discounts
        self.expiresAt = expiresAt
        self.footer = footer
        self.fromQuote = fromQuote
        self.header = header
        self.id = id
        self.invoice = invoice
        self.invoiceSettings = invoiceSettings
        self.lineItems = lineItems
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.number = number
        self.object = object
        self.onBehalfOf = onBehalfOf
        self.status = status
        self.statusTransitions = statusTransitions
        self.subscription = subscription
        self.subscriptionData = subscriptionData
        self.subscriptionSchedule = subscriptionSchedule
        self.totalDetails = totalDetails
        self.transferData = transferData
    }

    private enum CodingKeys: String, CodingKey {
        case amountSubtotal = "amount_subtotal"
        case amountTotal = "amount_total"
        case applicationFeeAmount = "application_fee_amount"
        case applicationFeePercent = "application_fee_percent"
        case automaticTax = "automatic_tax"
        case collectionMethod = "collection_method"
        case computed
        case created
        case currency
        case customer
        case defaultTaxRates = "default_tax_rates"
        case description
        case discounts
        case expiresAt = "expires_at"
        case footer
        case fromQuote = "from_quote"
        case header
        case id
        case invoice
        case invoiceSettings = "invoice_settings"
        case lineItems = "line_items"
        case isLivemode = "livemode"
        case metadata
        case number
        case object
        case onBehalfOf = "on_behalf_of"
        case status
        case statusTransitions = "status_transitions"
        case subscription
        case subscriptionData = "subscription_data"
        case subscriptionSchedule = "subscription_schedule"
        case totalDetails = "total_details"
        case transferData = "transfer_data"
    }
}

public struct QuotesResourceAutomaticTax: Codable {
    /// Automatically calculate taxes
    public var isEnabled: Bool
    /// The status of the most recent automated tax calculation for this quote.
    public var status: Status?

    /// The status of the most recent automated tax calculation for this quote.
    public enum Status: String, Codable, CaseIterable {
        case complete
        case failed
        case requiresLocationInputs = "requires_location_inputs"
    }

    public init(isEnabled: Bool, status: Status? = nil) {
        self.isEnabled = isEnabled
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case isEnabled = "enabled"
        case status
    }
}

public struct QuotesResourceComputed: Codable {
    /// The definitive totals and line items the customer will be charged on a recurring basis. Takes into account the line items with recurring prices and discounts with `duration=forever` coupons only. Defaults to `null` if no inputted line items with recurring prices.
    public var recurring: Recurring?
    public var upfront: QuotesResourceUpfront

    /// The definitive totals and line items the customer will be charged on a recurring basis. Takes into account the line items with recurring prices and discounts with `duration=forever` coupons only. Defaults to `null` if no inputted line items with recurring prices.
    public struct Recurring: Codable {
        public var quotesResourceRecurring: QuotesResourceRecurring?

        public init(quotesResourceRecurring: QuotesResourceRecurring? = nil) {
            self.quotesResourceRecurring = quotesResourceRecurring
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.quotesResourceRecurring = try? container.decode(QuotesResourceRecurring.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = quotesResourceRecurring { try container.encode(value) }
        }
    }

    public init(recurring: Recurring? = nil, upfront: QuotesResourceUpfront) {
        self.recurring = recurring
        self.upfront = upfront
    }
}

public struct QuotesResourceFromQuote: Codable {
    /// Whether this quote is a revision of a different quote.
    public var isRevision: Bool
    /// The quote that was cloned.
    public var quote: Quote

    /// The quote that was cloned.
    public final class Quote: Codable {
        public var string: String?
        public var quote: StripeAPI.Quote?

        public init(string: String? = nil, quote: StripeAPI.Quote? = nil) {
            self.string = string
            self.quote = quote
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.quote = try? container.decode(StripeAPI.Quote.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = quote { try container.encode(value) }
        }
    }

    public init(isRevision: Bool, quote: Quote) {
        self.isRevision = isRevision
        self.quote = quote
    }

    private enum CodingKeys: String, CodingKey {
        case isRevision = "is_revision"
        case quote
    }
}

public struct QuotesResourceRecurring: Codable {
    /// Total before any discounts or taxes are applied.
    public var amountSubtotal: Int
    /// Total after discounts and taxes are applied.
    public var amountTotal: Int
    /// The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
    public var interval: Interval
    /// The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
    public var intervalCount: Int
    public var totalDetails: QuotesResourceTotalDetails

    /// The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
    public enum Interval: String, Codable, CaseIterable {
        case day
        case month
        case week
        case year
    }

    public init(amountSubtotal: Int, amountTotal: Int, interval: Interval, intervalCount: Int, totalDetails: QuotesResourceTotalDetails) {
        self.amountSubtotal = amountSubtotal
        self.amountTotal = amountTotal
        self.interval = interval
        self.intervalCount = intervalCount
        self.totalDetails = totalDetails
    }

    private enum CodingKeys: String, CodingKey {
        case amountSubtotal = "amount_subtotal"
        case amountTotal = "amount_total"
        case interval
        case intervalCount = "interval_count"
        case totalDetails = "total_details"
    }
}

public struct QuotesResourceStatusTransitions: Codable {
    /// The time that the quote was accepted. Measured in seconds since Unix epoch.
    public var acceptedAt: Int?
    /// The time that the quote was canceled. Measured in seconds since Unix epoch.
    public var canceledAt: Int?
    /// The time that the quote was finalized. Measured in seconds since Unix epoch.
    public var finalizedAt: Int?

    public init(acceptedAt: Int? = nil, canceledAt: Int? = nil, finalizedAt: Int? = nil) {
        self.acceptedAt = acceptedAt
        self.canceledAt = canceledAt
        self.finalizedAt = finalizedAt
    }

    private enum CodingKeys: String, CodingKey {
        case acceptedAt = "accepted_at"
        case canceledAt = "canceled_at"
        case finalizedAt = "finalized_at"
    }
}

public struct QuotesResourceSubscriptionData: Codable {
    /// When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. This date is ignored if it is in the past when the quote is accepted. Measured in seconds since the Unix epoch.
    public var effectiveDate: Int?
    /// Integer representing the number of trial period days before the customer is charged for the first time.
    public var trialPeriodDays: Int?

    public init(effectiveDate: Int? = nil, trialPeriodDays: Int? = nil) {
        self.effectiveDate = effectiveDate
        self.trialPeriodDays = trialPeriodDays
    }

    private enum CodingKeys: String, CodingKey {
        case effectiveDate = "effective_date"
        case trialPeriodDays = "trial_period_days"
    }
}

public struct QuotesResourceTotalDetails: Codable {
    /// This is the sum of all the line item discounts.
    public var amountDiscount: Int
    /// This is the sum of all the line item shipping amounts.
    public var amountShipping: Int?
    /// This is the sum of all the line item tax amounts.
    public var amountTax: Int
    public var breakdown: QuotesResourceTotalDetailsResourceBreakdown?

    public init(amountDiscount: Int, amountShipping: Int? = nil, amountTax: Int, breakdown: QuotesResourceTotalDetailsResourceBreakdown? = nil) {
        self.amountDiscount = amountDiscount
        self.amountShipping = amountShipping
        self.amountTax = amountTax
        self.breakdown = breakdown
    }

    private enum CodingKeys: String, CodingKey {
        case amountDiscount = "amount_discount"
        case amountShipping = "amount_shipping"
        case amountTax = "amount_tax"
        case breakdown
    }
}

public struct QuotesResourceTotalDetailsResourceBreakdown: Codable {
    /// The aggregated line item discounts.
    public var discounts: [LineItemsDiscountAmount]
    /// The aggregated line item tax amounts by rate.
    public var taxes: [LineItemsTaxAmount]

    public init(discounts: [LineItemsDiscountAmount], taxes: [LineItemsTaxAmount]) {
        self.discounts = discounts
        self.taxes = taxes
    }
}

public struct QuotesResourceTransferData: Codable {
    /// The amount in %s that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination.
    public var amount: Int?
    /// A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount will be transferred to the destination.
    public var amountPercent: Double?
    /// The account where funds from the payment will be transferred to upon payment success.
    public var destination: Destination

    /// The account where funds from the payment will be transferred to upon payment success.
    public struct Destination: Codable {
        public var string: String?
        public var account: Account?

        public init(string: String? = nil, account: Account? = nil) {
            self.string = string
            self.account = account
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.account = try? container.decode(Account.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = account { try container.encode(value) }
        }
    }

    public init(amount: Int? = nil, amountPercent: Double? = nil, destination: Destination) {
        self.amount = amount
        self.amountPercent = amountPercent
        self.destination = destination
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case amountPercent = "amount_percent"
        case destination
    }
}

public struct QuotesResourceUpfront: Codable {
    /// Total before any discounts or taxes are applied.
    public var amountSubtotal: Int
    /// Total after discounts and taxes are applied.
    public var amountTotal: Int
    /// QuotesResourceListLineItems
    ///
    /// The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice.
    public var lineItems: LineItems?
    public var totalDetails: QuotesResourceTotalDetails

    /// QuotesResourceListLineItems
    ///
    /// The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice.
    public struct LineItems: Codable {
        /// Details about each object.
        public var data: [Item]
        /// True if this list has another page of items after this one that can be fetched.
        public var hasMore: Bool
        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public var object: Object
        /// The URL where this list can be accessed.
        public var url: String

        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public enum Object: String, Codable, CaseIterable {
            case list
        }

        public init(data: [Item], hasMore: Bool, object: Object, url: String) {
            self.data = data
            self.hasMore = hasMore
            self.object = object
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case data
            case hasMore = "has_more"
            case object
            case url
        }
    }

    public init(amountSubtotal: Int, amountTotal: Int, lineItems: LineItems? = nil, totalDetails: QuotesResourceTotalDetails) {
        self.amountSubtotal = amountSubtotal
        self.amountTotal = amountTotal
        self.lineItems = lineItems
        self.totalDetails = totalDetails
    }

    private enum CodingKeys: String, CodingKey {
        case amountSubtotal = "amount_subtotal"
        case amountTotal = "amount_total"
        case lineItems = "line_items"
        case totalDetails = "total_details"
    }
}

/// An early fraud warning indicates that the card issuer has notified us that a
/// charge may be fraudulent.
/// 
/// Related guide: [Early Fraud Warnings](https://stripe.com/docs/disputes/measuring#early-fraud-warnings).
public struct RadarEarlyFraudWarning: Codable {
    /// An EFW is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an EFW, in order to avoid receiving a dispute later.
    public var isActionable: Bool
    /// ID of the charge this early fraud warning is for, optionally expanded.
    public var charge: Charge
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`.
    public var fraudType: String
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// ID of the Payment Intent this early fraud warning is for, optionally expanded.
    public var paymentIntent: PaymentIntent?

    /// ID of the charge this early fraud warning is for, optionally expanded.
    public final class Charge: Codable {
        public var string: String?
        public var charge: StripeAPI.Charge?

        public init(string: String? = nil, charge: StripeAPI.Charge? = nil) {
            self.string = string
            self.charge = charge
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.charge = try? container.decode(StripeAPI.Charge.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = charge { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case radarEarlyFraudWarning = "radar.early_fraud_warning"
    }

    /// ID of the Payment Intent this early fraud warning is for, optionally expanded.
    public final class PaymentIntent: Codable {
        public var string: String?
        public var paymentIntent: StripeAPI.PaymentIntent?

        public init(string: String? = nil, paymentIntent: StripeAPI.PaymentIntent? = nil) {
            self.string = string
            self.paymentIntent = paymentIntent
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentIntent = try? container.decode(StripeAPI.PaymentIntent.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentIntent { try container.encode(value) }
        }
    }

    public init(isActionable: Bool, charge: Charge, created: Int, fraudType: String, id: String, isLivemode: Bool, object: Object, paymentIntent: PaymentIntent? = nil) {
        self.isActionable = isActionable
        self.charge = charge
        self.created = created
        self.fraudType = fraudType
        self.id = id
        self.isLivemode = isLivemode
        self.object = object
        self.paymentIntent = paymentIntent
    }

    private enum CodingKeys: String, CodingKey {
        case isActionable = "actionable"
        case charge
        case created
        case fraudType = "fraud_type"
        case id
        case isLivemode = "livemode"
        case object
        case paymentIntent = "payment_intent"
    }
}

/// RadarListList
///
/// Value lists allow you to group values together which can then be referenced in rules.
/// 
/// Related guide: [Default Stripe Lists](https://stripe.com/docs/radar/lists#managing-list-items).
public struct RadarValueList: Codable {
    /// The name of the value list for use in rules.
    public var alias: String
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The name or email address of the user who created this value list.
    public var createdBy: String
    /// Unique identifier for the object.
    public var id: String
    /// The type of items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`.
    public var itemType: ItemType
    /// RadarListListItemList
    ///
    /// List of items contained within this value list.
    public var listItems: ListItems
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// The name of the value list.
    public var name: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// The type of items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`.
    public enum ItemType: String, Codable, CaseIterable {
        case cardBin = "card_bin"
        case cardFingerprint = "card_fingerprint"
        case caseSensitiveString = "case_sensitive_string"
        case country
        case customerID = "customer_id"
        case email
        case ipAddress = "ip_address"
        case string
    }

    /// RadarListListItemList
    ///
    /// List of items contained within this value list.
    public struct ListItems: Codable {
        /// Details about each object.
        public var data: [RadarValueListItem]
        /// True if this list has another page of items after this one that can be fetched.
        public var hasMore: Bool
        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public var object: Object
        /// The URL where this list can be accessed.
        public var url: String

        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public enum Object: String, Codable, CaseIterable {
            case list
        }

        public init(data: [RadarValueListItem], hasMore: Bool, object: Object, url: String) {
            self.data = data
            self.hasMore = hasMore
            self.object = object
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case data
            case hasMore = "has_more"
            case object
            case url
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case radarValueList = "radar.value_list"
    }

    public init(alias: String, created: Int, createdBy: String, id: String, itemType: ItemType, listItems: ListItems, isLivemode: Bool, metadata: [String: String], name: String, object: Object) {
        self.alias = alias
        self.created = created
        self.createdBy = createdBy
        self.id = id
        self.itemType = itemType
        self.listItems = listItems
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.name = name
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case alias
        case created
        case createdBy = "created_by"
        case id
        case itemType = "item_type"
        case listItems = "list_items"
        case isLivemode = "livemode"
        case metadata
        case name
        case object
    }
}

/// RadarListListItem
///
/// Value list items allow you to add specific values to a given Radar value list, which can then be used in rules.
/// 
/// Related guide: [Managing List Items](https://stripe.com/docs/radar/lists#managing-list-items).
public struct RadarValueListItem: Codable {
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The name or email address of the user who added this item to the value list.
    public var createdBy: String
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The value of the item.
    public var value: String
    /// The identifier of the value list this item belongs to.
    public var valueList: String

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case radarValueListItem = "radar.value_list_item"
    }

    public init(created: Int, createdBy: String, id: String, isLivemode: Bool, object: Object, value: String, valueList: String) {
        self.created = created
        self.createdBy = createdBy
        self.id = id
        self.isLivemode = isLivemode
        self.object = object
        self.value = value
        self.valueList = valueList
    }

    private enum CodingKeys: String, CodingKey {
        case created
        case createdBy = "created_by"
        case id
        case isLivemode = "livemode"
        case object
        case value
        case valueList = "value_list"
    }
}

public struct RadarReviewResourceLocation: Codable {
    /// The city where the payment originated.
    public var city: String?
    /// Two-letter ISO code representing the country where the payment originated.
    public var country: String?
    /// The geographic latitude where the payment originated.
    public var latitude: Double?
    /// The geographic longitude where the payment originated.
    public var longitude: Double?
    /// The state/county/province/region where the payment originated.
    public var region: String?

    public init(city: String? = nil, country: String? = nil, latitude: Double? = nil, longitude: Double? = nil, region: String? = nil) {
        self.city = city
        self.country = country
        self.latitude = latitude
        self.longitude = longitude
        self.region = region
    }
}

public struct RadarReviewResourceSession: Codable {
    /// The browser used in this browser session (e.g., `Chrome`).
    public var browser: String?
    /// Information about the device used for the browser session (e.g., `Samsung SM-G930T`).
    public var device: String?
    /// The platform for the browser session (e.g., `Macintosh`).
    public var platform: String?
    /// The version for the browser session (e.g., `61.0.3163.100`).
    public var version: String?

    public init(browser: String? = nil, device: String? = nil, platform: String? = nil, version: String? = nil) {
        self.browser = browser
        self.device = device
        self.platform = platform
        self.version = version
    }
}

/// TransferRecipient
///
/// With `Recipient` objects, you can transfer money from your Stripe account to a
/// third-party bank account or debit card. The API allows you to create, delete,
/// and update your recipients. You can retrieve individual recipients as well as
/// a list of all your recipients.
/// 
/// **`Recipient` objects have been deprecated in favor of
/// [Connect](https://stripe.com/docs/connect), specifically Connect's much more powerful
/// [Account objects](https://stripe.com/docs/api#account). Stripe accounts that don't already use
/// recipients can no longer begin doing so. Please use `Account` objects
/// instead.**
public struct Recipient: Codable {
    /// Hash describing the current account on the recipient, if there is one.
    public var activeAccount: ActiveAccount?
    /// CardList
    public var cards: Cards?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The default card to use for creating transfers to this recipient.
    public var defaultCard: DefaultCard?
    /// An arbitrary string attached to the object. Often useful for displaying to users.
    public var description: String?
    public var email: String?
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// The ID of the [Custom account](https://stripe.com/docs/connect/custom-accounts) this recipient was migrated to. If set, the recipient can no longer be updated, nor can transfers be made to it: use the Custom account instead.
    public var migratedTo: MigratedTo?
    /// Full, legal name of the recipient.
    public var name: String?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    public var rolledBackFrom: RolledBackFrom?
    /// Type of the recipient, one of `individual` or `corporation`.
    public var type: String

    /// Hash describing the current account on the recipient, if there is one.
    public struct ActiveAccount: Codable {
        public var bankAccount: BankAccount?

        public init(bankAccount: BankAccount? = nil) {
            self.bankAccount = bankAccount
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.bankAccount = try? container.decode(BankAccount.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = bankAccount { try container.encode(value) }
        }
    }

    /// CardList
    public struct Cards: Codable {
        public var data: [Card]
        /// True if this list has another page of items after this one that can be fetched.
        public var hasMore: Bool
        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public var object: Object
        /// The URL where this list can be accessed.
        public var url: String

        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public enum Object: String, Codable, CaseIterable {
            case list
        }

        public init(data: [Card], hasMore: Bool, object: Object, url: String) {
            self.data = data
            self.hasMore = hasMore
            self.object = object
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case data
            case hasMore = "has_more"
            case object
            case url
        }
    }

    /// The default card to use for creating transfers to this recipient.
    public struct DefaultCard: Codable {
        public var string: String?
        public var card: Card?

        public init(string: String? = nil, card: Card? = nil) {
            self.string = string
            self.card = card
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.card = try? container.decode(Card.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = card { try container.encode(value) }
        }
    }

    /// The ID of the [Custom account](https://stripe.com/docs/connect/custom-accounts) this recipient was migrated to. If set, the recipient can no longer be updated, nor can transfers be made to it: use the Custom account instead.
    public struct MigratedTo: Codable {
        public var string: String?
        public var account: Account?

        public init(string: String? = nil, account: Account? = nil) {
            self.string = string
            self.account = account
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.account = try? container.decode(Account.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = account { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case recipient
    }

    public struct RolledBackFrom: Codable {
        public var string: String?
        public var account: Account?

        public init(string: String? = nil, account: Account? = nil) {
            self.string = string
            self.account = account
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.account = try? container.decode(Account.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = account { try container.encode(value) }
        }
    }

    public init(activeAccount: ActiveAccount? = nil, cards: Cards? = nil, created: Int, defaultCard: DefaultCard? = nil, description: String? = nil, email: String? = nil, id: String, isLivemode: Bool, metadata: [String: String], migratedTo: MigratedTo? = nil, name: String? = nil, object: Object, rolledBackFrom: RolledBackFrom? = nil, type: String) {
        self.activeAccount = activeAccount
        self.cards = cards
        self.created = created
        self.defaultCard = defaultCard
        self.description = description
        self.email = email
        self.id = id
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.migratedTo = migratedTo
        self.name = name
        self.object = object
        self.rolledBackFrom = rolledBackFrom
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case activeAccount = "active_account"
        case cards
        case created
        case defaultCard = "default_card"
        case description
        case email
        case id
        case isLivemode = "livemode"
        case metadata
        case migratedTo = "migrated_to"
        case name
        case object
        case rolledBackFrom = "rolled_back_from"
        case type
    }
}

public struct Recurring: Codable {
    /// Specifies a usage aggregation strategy for prices of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.
    public var aggregateUsage: AggregateUsage?
    /// The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
    public var interval: Interval
    /// The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
    public var intervalCount: Int
    /// Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
    public var usageType: UsageType

    /// Specifies a usage aggregation strategy for prices of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.
    public enum AggregateUsage: String, Codable, CaseIterable {
        case lastDuringPeriod = "last_during_period"
        case lastEver = "last_ever"
        case max
        case sum
    }

    /// The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
    public enum Interval: String, Codable, CaseIterable {
        case day
        case month
        case week
        case year
    }

    /// Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
    public enum UsageType: String, Codable, CaseIterable {
        case licensed
        case metered
    }

    public init(aggregateUsage: AggregateUsage? = nil, interval: Interval, intervalCount: Int, usageType: UsageType) {
        self.aggregateUsage = aggregateUsage
        self.interval = interval
        self.intervalCount = intervalCount
        self.usageType = usageType
    }

    private enum CodingKeys: String, CodingKey {
        case aggregateUsage = "aggregate_usage"
        case interval
        case intervalCount = "interval_count"
        case usageType = "usage_type"
    }
}

/// `Refund` objects allow you to refund a charge that has previously been created
/// but not yet refunded. Funds will be refunded to the credit or debit card that
/// was originally charged.
/// 
/// Related guide: [Refunds](https://stripe.com/docs/refunds).
public final class Refund: Codable {
    /// Amount, in %s.
    public var amount: Int
    /// Balance transaction that describes the impact on your account balance.
    public var balanceTransaction: BalanceTransaction?
    /// ID of the charge that was refunded.
    public var charge: Charge?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)
    public var description: String?
    /// If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.
    public var failureBalanceTransaction: FailureBalanceTransaction?
    /// If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`.
    public var failureReason: String?
    /// Unique identifier for the object.
    public var id: String
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// ID of the PaymentIntent that was refunded.
    public var paymentIntent: PaymentIntent?
    /// Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
    public var reason: String?
    /// This is the transaction number that appears on email receipts sent for this refund.
    public var receiptNumber: String?
    /// The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details.
    public var sourceTransferReversal: SourceTransferReversal?
    /// Status of the refund. For credit card refunds, this can be `pending`, `succeeded`, or `failed`. For other types of refunds, it can be `pending`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details.
    public var status: String?
    /// If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter.
    public var transferReversal: TransferReversal?

    /// Balance transaction that describes the impact on your account balance.
    public final class BalanceTransaction: Codable {
        public var string: String?
        public var balanceTransaction: StripeAPI.BalanceTransaction?

        public init(string: String? = nil, balanceTransaction: StripeAPI.BalanceTransaction? = nil) {
            self.string = string
            self.balanceTransaction = balanceTransaction
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.balanceTransaction = try? container.decode(StripeAPI.BalanceTransaction.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = balanceTransaction { try container.encode(value) }
        }
    }

    /// ID of the charge that was refunded.
    public final class Charge: Codable {
        public var string: String?
        public var charge: StripeAPI.Charge?

        public init(string: String? = nil, charge: StripeAPI.Charge? = nil) {
            self.string = string
            self.charge = charge
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.charge = try? container.decode(StripeAPI.Charge.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = charge { try container.encode(value) }
        }
    }

    /// If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.
    public struct FailureBalanceTransaction: Codable {
        public var string: String?
        public var balanceTransaction: BalanceTransaction?

        public init(string: String? = nil, balanceTransaction: BalanceTransaction? = nil) {
            self.string = string
            self.balanceTransaction = balanceTransaction
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.balanceTransaction = try? container.decode(BalanceTransaction.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = balanceTransaction { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case refund
    }

    /// ID of the PaymentIntent that was refunded.
    public final class PaymentIntent: Codable {
        public var string: String?
        public var paymentIntent: StripeAPI.PaymentIntent?

        public init(string: String? = nil, paymentIntent: StripeAPI.PaymentIntent? = nil) {
            self.string = string
            self.paymentIntent = paymentIntent
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentIntent = try? container.decode(StripeAPI.PaymentIntent.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentIntent { try container.encode(value) }
        }
    }

    /// The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details.
    public struct SourceTransferReversal: Codable {
        public var string: String?
        public var transferReversal: TransferReversal?

        public init(string: String? = nil, transferReversal: TransferReversal? = nil) {
            self.string = string
            self.transferReversal = transferReversal
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.transferReversal = try? container.decode(TransferReversal.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = transferReversal { try container.encode(value) }
        }
    }

    /// If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter.
    public final class TransferReversal: Codable {
        public var string: String?
        public var transferReversal: StripeAPI.TransferReversal?

        public init(string: String? = nil, transferReversal: StripeAPI.TransferReversal? = nil) {
            self.string = string
            self.transferReversal = transferReversal
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.transferReversal = try? container.decode(StripeAPI.TransferReversal.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = transferReversal { try container.encode(value) }
        }
    }

    public init(amount: Int, balanceTransaction: BalanceTransaction? = nil, charge: Charge? = nil, created: Int, currency: String, description: String? = nil, failureBalanceTransaction: FailureBalanceTransaction? = nil, failureReason: String? = nil, id: String, metadata: [String: String]? = nil, object: Object, paymentIntent: PaymentIntent? = nil, reason: String? = nil, receiptNumber: String? = nil, sourceTransferReversal: SourceTransferReversal? = nil, status: String? = nil, transferReversal: TransferReversal? = nil) {
        self.amount = amount
        self.balanceTransaction = balanceTransaction
        self.charge = charge
        self.created = created
        self.currency = currency
        self.description = description
        self.failureBalanceTransaction = failureBalanceTransaction
        self.failureReason = failureReason
        self.id = id
        self.metadata = metadata
        self.object = object
        self.paymentIntent = paymentIntent
        self.reason = reason
        self.receiptNumber = receiptNumber
        self.sourceTransferReversal = sourceTransferReversal
        self.status = status
        self.transferReversal = transferReversal
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case balanceTransaction = "balance_transaction"
        case charge
        case created
        case currency
        case description
        case failureBalanceTransaction = "failure_balance_transaction"
        case failureReason = "failure_reason"
        case id
        case metadata
        case object
        case paymentIntent = "payment_intent"
        case reason
        case receiptNumber = "receipt_number"
        case sourceTransferReversal = "source_transfer_reversal"
        case status
        case transferReversal = "transfer_reversal"
    }
}

/// Reporting_report_run
///
/// The Report Run object represents an instance of a report type generated with
/// specific run parameters. Once the object is created, Stripe begins processing the report.
/// When the report has finished running, it will give you a reference to a file
/// where you can retrieve your results. For an overview, see
/// [API Access to Reports](https://stripe.com/docs/reporting/statements/api).
/// 
/// Note that certain report types can only be run based on your live-mode data (not test-mode
/// data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
public struct ReportingReportRun: Codable {
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// If something should go wrong during the run, a message about the failure (populated when
    ///  `status=failed`).
    public var error: String?
    /// Unique identifier for the object.
    public var id: String
    /// `true` if the report is run on live mode data and `false` if it is run on test mode data.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// FinancialReportingFinanceReportRunRunParameters
    public var parameters: FinancialReportingFinanceReportRunRunParameters
    /// The ID of the [report type](https://stripe.com/docs/reports/report-types) to run, such as `"balance.summary.1"`.
    public var reportType: String
    /// The file object representing the result of the report run (populated when
    ///  `status=succeeded`).
    public var result: Result?
    /// Status of this report run. This will be `pending` when the run is initially created.
    ///  When the run finishes, this will be set to `succeeded` and the `result` field will be populated.
    ///  Rarely, we may encounter an error, at which point this will be set to `failed` and the `error` field will be populated.
    public var status: String
    /// Timestamp at which this run successfully finished (populated when
    ///  `status=succeeded`). Measured in seconds since the Unix epoch.
    public var succeededAt: Int?

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case reportingReportRun = "reporting.report_run"
    }

    /// The file object representing the result of the report run (populated when
    ///  `status=succeeded`).
    public struct Result: Codable {
        public var file: File?

        public init(file: File? = nil) {
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.file = try? container.decode(File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = file { try container.encode(value) }
        }
    }

    public init(created: Int, error: String? = nil, id: String, isLivemode: Bool, object: Object, parameters: FinancialReportingFinanceReportRunRunParameters, reportType: String, result: Result? = nil, status: String, succeededAt: Int? = nil) {
        self.created = created
        self.error = error
        self.id = id
        self.isLivemode = isLivemode
        self.object = object
        self.parameters = parameters
        self.reportType = reportType
        self.result = result
        self.status = status
        self.succeededAt = succeededAt
    }

    private enum CodingKeys: String, CodingKey {
        case created
        case error
        case id
        case isLivemode = "livemode"
        case object
        case parameters
        case reportType = "report_type"
        case result
        case status
        case succeededAt = "succeeded_at"
    }
}

/// Reporting_report_type
///
/// The Report Type resource corresponds to a particular type of report, such as
/// the "Activity summary" or "Itemized payouts" reports. These objects are
/// identified by an ID belonging to a set of enumerated values. See
/// [API Access to Reports documentation](https://stripe.com/docs/reporting/statements/api)
/// for those Report Type IDs, along with required and optional parameters.
/// 
/// Note that certain report types can only be run based on your live-mode data (not test-mode
/// data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
public struct ReportingReportType: Codable {
    /// Most recent time for which this Report Type is available. Measured in seconds since the Unix epoch.
    public var dataAvailableEnd: Int
    /// Earliest time for which this Report Type is available. Measured in seconds since the Unix epoch.
    public var dataAvailableStart: Int
    /// List of column names that are included by default when this Report Type gets run. (If the Report Type doesn't support the `columns` parameter, this will be null.)
    public var defaultColumns: [String]?
    /// The [ID of the Report Type](https://stripe.com/docs/reporting/statements/api#available-report-types), such as `balance.summary.1`.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Human-readable name of the Report Type
    public var name: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// When this Report Type was latest updated. Measured in seconds since the Unix epoch.
    public var updated: Int
    /// Version of the Report Type. Different versions report with the same ID will have the same purpose, but may take different run parameters or have different result schemas.
    public var version: Int

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case reportingReportType = "reporting.report_type"
    }

    public init(dataAvailableEnd: Int, dataAvailableStart: Int, defaultColumns: [String]? = nil, id: String, isLivemode: Bool, name: String, object: Object, updated: Int, version: Int) {
        self.dataAvailableEnd = dataAvailableEnd
        self.dataAvailableStart = dataAvailableStart
        self.defaultColumns = defaultColumns
        self.id = id
        self.isLivemode = isLivemode
        self.name = name
        self.object = object
        self.updated = updated
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case dataAvailableEnd = "data_available_end"
        case dataAvailableStart = "data_available_start"
        case defaultColumns = "default_columns"
        case id
        case isLivemode = "livemode"
        case name
        case object
        case updated
        case version
    }
}

public struct ReserveTransaction: Codable {
    public var amount: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// An arbitrary string attached to the object. Often useful for displaying to users.
    public var description: String?
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case reserveTransaction = "reserve_transaction"
    }

    public init(amount: Int, currency: String, description: String? = nil, id: String, object: Object) {
        self.amount = amount
        self.currency = currency
        self.description = description
        self.id = id
        self.object = object
    }
}

/// RadarReview
///
/// Reviews can be used to supplement automated fraud detection with human expertise.
/// 
/// Learn more about [Radar](/radar) and reviewing payments
/// [here](https://stripe.com/docs/radar/reviews).
public struct Review: Codable {
    /// The ZIP or postal code of the card used, if applicable.
    public var billingZip: String?
    /// The charge associated with this review.
    public var charge: Charge?
    /// The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.
    public var closedReason: ClosedReason?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Unique identifier for the object.
    public var id: String
    /// The IP address where the payment originated.
    public var ipAddress: String?
    /// Information related to the location of the payment. Note that this information is an approximation and attempts to locate the nearest population center - it should not be used to determine a specific address.
    public var ipAddressLocation: IpAddressLocation?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// If `true`, the review needs action.
    public var isOpen: Bool
    /// The reason the review was opened. One of `rule` or `manual`.
    public var openedReason: OpenedReason
    /// The PaymentIntent ID associated with this review, if one exists.
    public var paymentIntent: PaymentIntent?
    /// The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.
    public var reason: String
    /// Information related to the browsing session of the user who initiated the payment.
    public var session: Session?

    /// The charge associated with this review.
    public final class Charge: Codable {
        public var string: String?
        public var charge: StripeAPI.Charge?

        public init(string: String? = nil, charge: StripeAPI.Charge? = nil) {
            self.string = string
            self.charge = charge
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.charge = try? container.decode(StripeAPI.Charge.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = charge { try container.encode(value) }
        }
    }

    /// The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.
    public enum ClosedReason: String, Codable, CaseIterable {
        case approved
        case disputed
        case redacted
        case refunded
        case refundedAsFraud = "refunded_as_fraud"
    }

    /// Information related to the location of the payment. Note that this information is an approximation and attempts to locate the nearest population center - it should not be used to determine a specific address.
    public struct IpAddressLocation: Codable {
        public var radarReviewResourceLocation: RadarReviewResourceLocation?

        public init(radarReviewResourceLocation: RadarReviewResourceLocation? = nil) {
            self.radarReviewResourceLocation = radarReviewResourceLocation
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.radarReviewResourceLocation = try? container.decode(RadarReviewResourceLocation.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = radarReviewResourceLocation { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case review
    }

    /// The reason the review was opened. One of `rule` or `manual`.
    public enum OpenedReason: String, Codable, CaseIterable {
        case manual
        case rule
    }

    /// The PaymentIntent ID associated with this review, if one exists.
    public final class PaymentIntent: Codable {
        public var string: String?
        public var paymentIntent: StripeAPI.PaymentIntent?

        public init(string: String? = nil, paymentIntent: StripeAPI.PaymentIntent? = nil) {
            self.string = string
            self.paymentIntent = paymentIntent
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentIntent = try? container.decode(StripeAPI.PaymentIntent.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentIntent { try container.encode(value) }
        }
    }

    /// Information related to the browsing session of the user who initiated the payment.
    public struct Session: Codable {
        public var radarReviewResourceSession: RadarReviewResourceSession?

        public init(radarReviewResourceSession: RadarReviewResourceSession? = nil) {
            self.radarReviewResourceSession = radarReviewResourceSession
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.radarReviewResourceSession = try? container.decode(RadarReviewResourceSession.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = radarReviewResourceSession { try container.encode(value) }
        }
    }

    public init(billingZip: String? = nil, charge: Charge? = nil, closedReason: ClosedReason? = nil, created: Int, id: String, ipAddress: String? = nil, ipAddressLocation: IpAddressLocation? = nil, isLivemode: Bool, object: Object, isOpen: Bool, openedReason: OpenedReason, paymentIntent: PaymentIntent? = nil, reason: String, session: Session? = nil) {
        self.billingZip = billingZip
        self.charge = charge
        self.closedReason = closedReason
        self.created = created
        self.id = id
        self.ipAddress = ipAddress
        self.ipAddressLocation = ipAddressLocation
        self.isLivemode = isLivemode
        self.object = object
        self.isOpen = isOpen
        self.openedReason = openedReason
        self.paymentIntent = paymentIntent
        self.reason = reason
        self.session = session
    }

    private enum CodingKeys: String, CodingKey {
        case billingZip = "billing_zip"
        case charge
        case closedReason = "closed_reason"
        case created
        case id
        case ipAddress = "ip_address"
        case ipAddressLocation = "ip_address_location"
        case isLivemode = "livemode"
        case object
        case isOpen = "open"
        case openedReason = "opened_reason"
        case paymentIntent = "payment_intent"
        case reason
        case session
    }
}

/// RadarRule
public struct Rule: Codable {
    /// The action taken on the payment.
    public var action: String
    /// Unique identifier for the object.
    public var id: String
    /// The predicate to evaluate the payment against.
    public var predicate: String

    public init(action: String, id: String, predicate: String) {
        self.action = action
        self.id = id
        self.predicate = predicate
    }
}

/// If you have [scheduled a Sigma query](https://stripe.com/docs/sigma/scheduled-queries), you'll
/// receive a `sigma.scheduled_query_run.created` webhook each time the query
/// runs. The webhook contains a `ScheduledQueryRun` object, which you can use to
/// retrieve the query results.
public struct ScheduledQueryRun: Codable {
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// When the query was run, Sigma contained a snapshot of your Stripe data at this time.
    public var dataLoadTime: Int
    /// SigmaScheduledQueryRunError
    public var error: SigmaScheduledQueryRunError?
    /// The file object representing the results of the query.
    public var file: File?
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Time at which the result expires and is no longer available for download.
    public var resultAvailableUntil: Int
    /// SQL for the query.
    public var sql: String
    /// The query's execution status, which will be `completed` for successful runs, and `canceled`, `failed`, or `timed_out` otherwise.
    public var status: String
    /// Title of the query.
    public var title: String

    /// The file object representing the results of the query.
    public final class File: Codable {
        public var file: StripeAPI.File?

        public init(file: StripeAPI.File? = nil) {
            self.file = file
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.file = try? container.decode(StripeAPI.File.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = file { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case scheduledQueryRun = "scheduled_query_run"
    }

    public init(created: Int, dataLoadTime: Int, error: SigmaScheduledQueryRunError? = nil, file: File? = nil, id: String, isLivemode: Bool, object: Object, resultAvailableUntil: Int, sql: String, status: String, title: String) {
        self.created = created
        self.dataLoadTime = dataLoadTime
        self.error = error
        self.file = file
        self.id = id
        self.isLivemode = isLivemode
        self.object = object
        self.resultAvailableUntil = resultAvailableUntil
        self.sql = sql
        self.status = status
        self.title = title
    }

    private enum CodingKeys: String, CodingKey {
        case created
        case dataLoadTime = "data_load_time"
        case error
        case file
        case id
        case isLivemode = "livemode"
        case object
        case resultAvailableUntil = "result_available_until"
        case sql
        case status
        case title
    }
}

public struct SchedulesPhaseAutomaticTax: Codable {
    /// Whether Stripe automatically computes tax on invoices created during this phase.
    public var isEnabled: Bool

    public init(isEnabled: Bool) {
        self.isEnabled = isEnabled
    }

    private enum CodingKeys: String, CodingKey {
        case isEnabled = "enabled"
    }
}

/// Sepa_debit_generated_from
public struct SepaDebitGeneratedFrom: Codable {
    /// The ID of the Charge that generated this PaymentMethod, if any.
    public var charge: Charge?
    /// The ID of the SetupAttempt that generated this PaymentMethod, if any.
    public var setupAttempt: SetupAttempt?

    /// The ID of the Charge that generated this PaymentMethod, if any.
    public final class Charge: Codable {
        public var string: String?
        public var charge: StripeAPI.Charge?

        public init(string: String? = nil, charge: StripeAPI.Charge? = nil) {
            self.string = string
            self.charge = charge
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.charge = try? container.decode(StripeAPI.Charge.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = charge { try container.encode(value) }
        }
    }

    /// The ID of the SetupAttempt that generated this PaymentMethod, if any.
    public final class SetupAttempt: Codable {
        public var string: String?
        public var setupAttempt: StripeAPI.SetupAttempt?

        public init(string: String? = nil, setupAttempt: StripeAPI.SetupAttempt? = nil) {
            self.string = string
            self.setupAttempt = setupAttempt
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.setupAttempt = try? container.decode(StripeAPI.SetupAttempt.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = setupAttempt { try container.encode(value) }
        }
    }

    public init(charge: Charge? = nil, setupAttempt: SetupAttempt? = nil) {
        self.charge = charge
        self.setupAttempt = setupAttempt
    }

    private enum CodingKeys: String, CodingKey {
        case charge
        case setupAttempt = "setup_attempt"
    }
}

/// PaymentFlowsSetupIntentSetupAttempt
///
/// A SetupAttempt describes one attempted confirmation of a SetupIntent,
/// whether that confirmation was successful or unsuccessful. You can use
/// SetupAttempts to inspect details of a specific attempt at setting up a
/// payment method using a SetupIntent.
public struct SetupAttempt: Codable {
    /// The value of [application](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-application) on the SetupIntent at the time of this confirmation.
    public var application: Application?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The value of [customer](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-customer) on the SetupIntent at the time of this confirmation.
    public var customer: Customer?
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The value of [on_behalf_of](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-on_behalf_of) on the SetupIntent at the time of this confirmation.
    public var onBehalfOf: OnBehalfOf?
    /// ID of the payment method used with this SetupAttempt.
    public var paymentMethod: PaymentMethod
    public var paymentMethodDetails: SetupAttemptPaymentMethodDetails
    /// The error encountered during this attempt to confirm the SetupIntent, if any.
    public var setupError: SetupError?
    /// ID of the SetupIntent that this attempt belongs to.
    public var setupIntent: SetupIntent
    /// Status of this SetupAttempt, one of `requires_confirmation`, `requires_action`, `processing`, `succeeded`, `failed`, or `abandoned`.
    public var status: String
    /// The value of [usage](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-usage) on the SetupIntent at the time of this confirmation, one of `off_session` or `on_session`.
    public var usage: String

    /// The value of [application](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-application) on the SetupIntent at the time of this confirmation.
    public final class Application: Codable {
        public var string: String?
        public var application: StripeAPI.Application?

        public init(string: String? = nil, application: StripeAPI.Application? = nil) {
            self.string = string
            self.application = application
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.application = try? container.decode(StripeAPI.Application.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = application { try container.encode(value) }
        }
    }

    /// The value of [customer](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-customer) on the SetupIntent at the time of this confirmation.
    public final class Customer: Codable {
        public var string: String?
        public var customer: StripeAPI.Customer?
        public var deletedCustomer: DeletedCustomer?

        public init(string: String? = nil, customer: StripeAPI.Customer? = nil, deletedCustomer: DeletedCustomer? = nil) {
            self.string = string
            self.customer = customer
            self.deletedCustomer = deletedCustomer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeAPI.Customer.self)
            self.deletedCustomer = try? container.decode(DeletedCustomer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
            if let value = deletedCustomer { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case setupAttempt = "setup_attempt"
    }

    /// The value of [on_behalf_of](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-on_behalf_of) on the SetupIntent at the time of this confirmation.
    public struct OnBehalfOf: Codable {
        public var string: String?
        public var account: Account?

        public init(string: String? = nil, account: Account? = nil) {
            self.string = string
            self.account = account
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.account = try? container.decode(Account.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = account { try container.encode(value) }
        }
    }

    /// ID of the payment method used with this SetupAttempt.
    public final class PaymentMethod: Codable {
        public var string: String?
        public var paymentMethod: StripeAPI.PaymentMethod?

        public init(string: String? = nil, paymentMethod: StripeAPI.PaymentMethod? = nil) {
            self.string = string
            self.paymentMethod = paymentMethod
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentMethod = try? container.decode(StripeAPI.PaymentMethod.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentMethod { try container.encode(value) }
        }
    }

    /// The error encountered during this attempt to confirm the SetupIntent, if any.
    public struct SetupError: Codable {
        public var apiErrors: APIErrors?

        public init(apiErrors: APIErrors? = nil) {
            self.apiErrors = apiErrors
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.apiErrors = try? container.decode(APIErrors.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = apiErrors { try container.encode(value) }
        }
    }

    /// ID of the SetupIntent that this attempt belongs to.
    public final class SetupIntent: Codable {
        public var string: String?
        public var setupIntent: StripeAPI.SetupIntent?

        public init(string: String? = nil, setupIntent: StripeAPI.SetupIntent? = nil) {
            self.string = string
            self.setupIntent = setupIntent
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.setupIntent = try? container.decode(StripeAPI.SetupIntent.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = setupIntent { try container.encode(value) }
        }
    }

    public init(application: Application? = nil, created: Int, customer: Customer? = nil, id: String, isLivemode: Bool, object: Object, onBehalfOf: OnBehalfOf? = nil, paymentMethod: PaymentMethod, paymentMethodDetails: SetupAttemptPaymentMethodDetails, setupError: SetupError? = nil, setupIntent: SetupIntent, status: String, usage: String) {
        self.application = application
        self.created = created
        self.customer = customer
        self.id = id
        self.isLivemode = isLivemode
        self.object = object
        self.onBehalfOf = onBehalfOf
        self.paymentMethod = paymentMethod
        self.paymentMethodDetails = paymentMethodDetails
        self.setupError = setupError
        self.setupIntent = setupIntent
        self.status = status
        self.usage = usage
    }

    private enum CodingKeys: String, CodingKey {
        case application
        case created
        case customer
        case id
        case isLivemode = "livemode"
        case object
        case onBehalfOf = "on_behalf_of"
        case paymentMethod = "payment_method"
        case paymentMethodDetails = "payment_method_details"
        case setupError = "setup_error"
        case setupIntent = "setup_intent"
        case status
        case usage
    }
}

public struct SetupAttemptPaymentMethodDetails: Codable {
    /// Setup_attempt_payment_method_details_acss_debit
    public var acssDebit: [String: AnyJSON]?
    /// Setup_attempt_payment_method_details_au_becs_debit
    public var auBecsDebit: [String: AnyJSON]?
    /// Setup_attempt_payment_method_details_bacs_debit
    public var bacsDebit: [String: AnyJSON]?
    public var bancontact: SetupAttemptPaymentMethodDetailsBancontact?
    /// Setup_attempt_payment_method_details_card
    public var card: SetupAttemptPaymentMethodDetailsCard?
    public var cardPresent: SetupAttemptPaymentMethodDetailsCardPresent?
    public var ideal: SetupAttemptPaymentMethodDetailsIdeal?
    /// Setup_attempt_payment_method_details_sepa_debit
    public var sepaDebit: [String: AnyJSON]?
    public var sofort: SetupAttemptPaymentMethodDetailsSofort?
    /// The type of the payment method used in the SetupIntent (e.g., `card`). An additional hash is included on `payment_method_details` with a name matching this value. It contains confirmation-specific information for the payment method.
    public var type: String

    public init(acssDebit: [String: AnyJSON]? = nil, auBecsDebit: [String: AnyJSON]? = nil, bacsDebit: [String: AnyJSON]? = nil, bancontact: SetupAttemptPaymentMethodDetailsBancontact? = nil, card: SetupAttemptPaymentMethodDetailsCard? = nil, cardPresent: SetupAttemptPaymentMethodDetailsCardPresent? = nil, ideal: SetupAttemptPaymentMethodDetailsIdeal? = nil, sepaDebit: [String: AnyJSON]? = nil, sofort: SetupAttemptPaymentMethodDetailsSofort? = nil, type: String) {
        self.acssDebit = acssDebit
        self.auBecsDebit = auBecsDebit
        self.bacsDebit = bacsDebit
        self.bancontact = bancontact
        self.card = card
        self.cardPresent = cardPresent
        self.ideal = ideal
        self.sepaDebit = sepaDebit
        self.sofort = sofort
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case acssDebit = "acss_debit"
        case auBecsDebit = "au_becs_debit"
        case bacsDebit = "bacs_debit"
        case bancontact
        case card
        case cardPresent = "card_present"
        case ideal
        case sepaDebit = "sepa_debit"
        case sofort
        case type
    }
}

/// Setup_attempt_payment_method_details_bancontact
public struct SetupAttemptPaymentMethodDetailsBancontact: Codable {
    /// Bank code of bank associated with the bank account.
    public var bankCode: String?
    /// Name of the bank associated with the bank account.
    public var bankName: String?
    /// Bank Identifier Code of the bank associated with the bank account.
    public var bic: String?
    /// The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
    public var generatedSepaDebit: GeneratedSepaDebit?
    /// The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
    public var generatedSepaDebitMandate: GeneratedSepaDebitMandate?
    /// Last four characters of the IBAN.
    public var ibanLast4: String?
    /// Preferred language of the Bancontact authorization page that the customer is redirected to.
    /// Can be one of `en`, `de`, `fr`, or `nl`
    public var preferredLanguage: PreferredLanguage?
    /// Owner's verified full name. Values are verified or provided by Bancontact directly
    /// (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var verifiedName: String?

    /// The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
    public struct GeneratedSepaDebit: Codable {
        public var string: String?
        public var paymentMethod: PaymentMethod?

        public init(string: String? = nil, paymentMethod: PaymentMethod? = nil) {
            self.string = string
            self.paymentMethod = paymentMethod
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentMethod = try? container.decode(PaymentMethod.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentMethod { try container.encode(value) }
        }
    }

    /// The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
    public struct GeneratedSepaDebitMandate: Codable {
        public var string: String?
        public var mandate: Mandate?

        public init(string: String? = nil, mandate: Mandate? = nil) {
            self.string = string
            self.mandate = mandate
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.mandate = try? container.decode(Mandate.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = mandate { try container.encode(value) }
        }
    }

    /// Preferred language of the Bancontact authorization page that the customer is redirected to.
    /// Can be one of `en`, `de`, `fr`, or `nl`
    public enum PreferredLanguage: String, Codable, CaseIterable {
        case de
        case en
        case fr
        case nl
    }

    public init(bankCode: String? = nil, bankName: String? = nil, bic: String? = nil, generatedSepaDebit: GeneratedSepaDebit? = nil, generatedSepaDebitMandate: GeneratedSepaDebitMandate? = nil, ibanLast4: String? = nil, preferredLanguage: PreferredLanguage? = nil, verifiedName: String? = nil) {
        self.bankCode = bankCode
        self.bankName = bankName
        self.bic = bic
        self.generatedSepaDebit = generatedSepaDebit
        self.generatedSepaDebitMandate = generatedSepaDebitMandate
        self.ibanLast4 = ibanLast4
        self.preferredLanguage = preferredLanguage
        self.verifiedName = verifiedName
    }

    private enum CodingKeys: String, CodingKey {
        case bankCode = "bank_code"
        case bankName = "bank_name"
        case bic
        case generatedSepaDebit = "generated_sepa_debit"
        case generatedSepaDebitMandate = "generated_sepa_debit_mandate"
        case ibanLast4 = "iban_last4"
        case preferredLanguage = "preferred_language"
        case verifiedName = "verified_name"
    }
}

/// Setup_attempt_payment_method_details_card
public struct SetupAttemptPaymentMethodDetailsCard: Codable {
    /// Populated if this authorization used 3D Secure authentication.
    public var threeDSecure: ThreeDSecure?

    /// Populated if this authorization used 3D Secure authentication.
    public struct ThreeDSecure: Codable {
        /// Three_d_secure_details
        public var threeDSecureDetails: ThreeDSecureDetails?

        public init(threeDSecureDetails: ThreeDSecureDetails? = nil) {
            self.threeDSecureDetails = threeDSecureDetails
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.threeDSecureDetails = try? container.decode(ThreeDSecureDetails.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = threeDSecureDetails { try container.encode(value) }
        }
    }

    public init(threeDSecure: ThreeDSecure? = nil) {
        self.threeDSecure = threeDSecure
    }

    private enum CodingKeys: String, CodingKey {
        case threeDSecure = "three_d_secure"
    }
}

/// Setup_attempt_payment_method_details_card_present
public struct SetupAttemptPaymentMethodDetailsCardPresent: Codable {
    /// The ID of the Card PaymentMethod which was generated by this SetupAttempt.
    public var generatedCard: GeneratedCard?

    /// The ID of the Card PaymentMethod which was generated by this SetupAttempt.
    public struct GeneratedCard: Codable {
        public var string: String?
        public var paymentMethod: PaymentMethod?

        public init(string: String? = nil, paymentMethod: PaymentMethod? = nil) {
            self.string = string
            self.paymentMethod = paymentMethod
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentMethod = try? container.decode(PaymentMethod.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentMethod { try container.encode(value) }
        }
    }

    public init(generatedCard: GeneratedCard? = nil) {
        self.generatedCard = generatedCard
    }

    private enum CodingKeys: String, CodingKey {
        case generatedCard = "generated_card"
    }
}

/// Setup_attempt_payment_method_details_ideal
public struct SetupAttemptPaymentMethodDetailsIdeal: Codable {
    /// The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
    public var bank: Bank?
    /// The Bank Identifier Code of the customer's bank.
    public var bic: Bic?
    /// The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
    public var generatedSepaDebit: GeneratedSepaDebit?
    /// The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
    public var generatedSepaDebitMandate: GeneratedSepaDebitMandate?
    /// Last four characters of the IBAN.
    public var ibanLast4: String?
    /// Owner's verified full name. Values are verified or provided by iDEAL directly
    /// (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var verifiedName: String?

    /// The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
    public enum Bank: String, Codable, CaseIterable {
        case abnAmro = "abn_amro"
        case asnBank = "asn_bank"
        case bunq
        case handelsbanken
        case ing
        case knab
        case moneyou
        case rabobank
        case regiobank
        case revolut
        case snsBank = "sns_bank"
        case triodosBank = "triodos_bank"
        case vanLanschot = "van_lanschot"
    }

    /// The Bank Identifier Code of the customer's bank.
    public enum Bic: String, Codable, CaseIterable {
        case abnanl2a = "ABNANL2A"
        case asnbnl21 = "ASNBNL21"
        case bunqnl2a = "BUNQNL2A"
        case fvlbnl22 = "FVLBNL22"
        case handnl2a = "HANDNL2A"
        case ingbnl2a = "INGBNL2A"
        case knabnl2h = "KNABNL2H"
        case moyonl21 = "MOYONL21"
        case rabonl2u = "RABONL2U"
        case rbrbnl21 = "RBRBNL21"
        case revolt21 = "REVOLT21"
        case snsbnl2a = "SNSBNL2A"
        case trionl2u = "TRIONL2U"
    }

    /// The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
    public struct GeneratedSepaDebit: Codable {
        public var string: String?
        public var paymentMethod: PaymentMethod?

        public init(string: String? = nil, paymentMethod: PaymentMethod? = nil) {
            self.string = string
            self.paymentMethod = paymentMethod
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentMethod = try? container.decode(PaymentMethod.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentMethod { try container.encode(value) }
        }
    }

    /// The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
    public struct GeneratedSepaDebitMandate: Codable {
        public var string: String?
        public var mandate: Mandate?

        public init(string: String? = nil, mandate: Mandate? = nil) {
            self.string = string
            self.mandate = mandate
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.mandate = try? container.decode(Mandate.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = mandate { try container.encode(value) }
        }
    }

    public init(bank: Bank? = nil, bic: Bic? = nil, generatedSepaDebit: GeneratedSepaDebit? = nil, generatedSepaDebitMandate: GeneratedSepaDebitMandate? = nil, ibanLast4: String? = nil, verifiedName: String? = nil) {
        self.bank = bank
        self.bic = bic
        self.generatedSepaDebit = generatedSepaDebit
        self.generatedSepaDebitMandate = generatedSepaDebitMandate
        self.ibanLast4 = ibanLast4
        self.verifiedName = verifiedName
    }

    private enum CodingKeys: String, CodingKey {
        case bank
        case bic
        case generatedSepaDebit = "generated_sepa_debit"
        case generatedSepaDebitMandate = "generated_sepa_debit_mandate"
        case ibanLast4 = "iban_last4"
        case verifiedName = "verified_name"
    }
}

/// Setup_attempt_payment_method_details_sofort
public struct SetupAttemptPaymentMethodDetailsSofort: Codable {
    /// Bank code of bank associated with the bank account.
    public var bankCode: String?
    /// Name of the bank associated with the bank account.
    public var bankName: String?
    /// Bank Identifier Code of the bank associated with the bank account.
    public var bic: String?
    /// The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
    public var generatedSepaDebit: GeneratedSepaDebit?
    /// The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
    public var generatedSepaDebitMandate: GeneratedSepaDebitMandate?
    /// Last four characters of the IBAN.
    public var ibanLast4: String?
    /// Preferred language of the Sofort authorization page that the customer is redirected to.
    /// Can be one of `en`, `de`, `fr`, or `nl`
    public var preferredLanguage: PreferredLanguage?
    /// Owner's verified full name. Values are verified or provided by Sofort directly
    /// (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var verifiedName: String?

    /// The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
    public struct GeneratedSepaDebit: Codable {
        public var string: String?
        public var paymentMethod: PaymentMethod?

        public init(string: String? = nil, paymentMethod: PaymentMethod? = nil) {
            self.string = string
            self.paymentMethod = paymentMethod
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentMethod = try? container.decode(PaymentMethod.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentMethod { try container.encode(value) }
        }
    }

    /// The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
    public struct GeneratedSepaDebitMandate: Codable {
        public var string: String?
        public var mandate: Mandate?

        public init(string: String? = nil, mandate: Mandate? = nil) {
            self.string = string
            self.mandate = mandate
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.mandate = try? container.decode(Mandate.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = mandate { try container.encode(value) }
        }
    }

    /// Preferred language of the Sofort authorization page that the customer is redirected to.
    /// Can be one of `en`, `de`, `fr`, or `nl`
    public enum PreferredLanguage: String, Codable, CaseIterable {
        case de
        case en
        case fr
        case nl
    }

    public init(bankCode: String? = nil, bankName: String? = nil, bic: String? = nil, generatedSepaDebit: GeneratedSepaDebit? = nil, generatedSepaDebitMandate: GeneratedSepaDebitMandate? = nil, ibanLast4: String? = nil, preferredLanguage: PreferredLanguage? = nil, verifiedName: String? = nil) {
        self.bankCode = bankCode
        self.bankName = bankName
        self.bic = bic
        self.generatedSepaDebit = generatedSepaDebit
        self.generatedSepaDebitMandate = generatedSepaDebitMandate
        self.ibanLast4 = ibanLast4
        self.preferredLanguage = preferredLanguage
        self.verifiedName = verifiedName
    }

    private enum CodingKeys: String, CodingKey {
        case bankCode = "bank_code"
        case bankName = "bank_name"
        case bic
        case generatedSepaDebit = "generated_sepa_debit"
        case generatedSepaDebitMandate = "generated_sepa_debit_mandate"
        case ibanLast4 = "iban_last4"
        case preferredLanguage = "preferred_language"
        case verifiedName = "verified_name"
    }
}

/// A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
/// For example, you could use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
/// Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
/// 
/// Create a SetupIntent as soon as you're ready to collect your customer's payment credentials.
/// Do not maintain long-lived, unconfirmed SetupIntents as they may no longer be valid.
/// The SetupIntent then transitions through multiple [statuses](https://stripe.com/docs/payments/intents#intent-statuses) as it guides
/// you through the setup process.
/// 
/// Successful SetupIntents result in payment credentials that are optimized for future payments.
/// For example, cardholders in [certain regions](/guides/strong-customer-authentication) may need to be run through
/// [Strong Customer Authentication](https://stripe.com/docs/strong-customer-authentication) at the time of payment method collection
/// in order to streamline later [off-session payments](https://stripe.com/docs/payments/setup-intents).
/// If the SetupIntent is used with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer), upon success,
/// it will automatically attach the resulting payment method to that Customer.
/// We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
/// PaymentIntents to save payment methods in order to prevent saving invalid or unoptimized payment methods.
/// 
/// By using SetupIntents, you ensure that your customers experience the minimum set of required friction,
/// even as regulations change over time.
/// 
/// Related guide: [Setup Intents API](https://stripe.com/docs/payments/setup-intents).
public struct SetupIntent: Codable {
    /// ID of the Connect application that created the SetupIntent.
    public var application: Application?
    /// Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`.
    public var cancellationReason: CancellationReason?
    /// The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.
    /// 
    /// The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
    public var clientSecret: String?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// ID of the Customer this SetupIntent belongs to, if one exists.
    /// 
    /// If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
    public var customer: Customer?
    /// An arbitrary string attached to the object. Often useful for displaying to users.
    public var description: String?
    /// Unique identifier for the object.
    public var id: String
    /// The error encountered in the previous SetupIntent confirmation.
    public var lastSetupError: LastSetupError?
    /// The most recent SetupAttempt for this SetupIntent.
    public var latestAttempt: LatestAttempt?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// ID of the multi use Mandate generated by the SetupIntent.
    public var mandate: Mandate?
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// If present, this property tells you what actions you need to take in order for your customer to continue payment setup.
    public var nextAction: NextAction?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The account (if any) for which the setup is intended.
    public var onBehalfOf: OnBehalfOf?
    /// ID of the payment method used with this SetupIntent.
    public var paymentMethod: PaymentMethod?
    /// Payment-method-specific configuration for this SetupIntent.
    public var paymentMethodOptions: PaymentMethodOptions?
    /// The list of payment method types (e.g. card) that this SetupIntent is allowed to set up.
    public var paymentMethodTypes: [String]
    /// ID of the single_use Mandate generated by the SetupIntent.
    public var singleUseMandate: SingleUseMandate?
    /// [Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`.
    public var status: Status
    /// Indicates how the payment method is intended to be used in the future.
    /// 
    /// Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`.
    public var usage: String

    /// ID of the Connect application that created the SetupIntent.
    public final class Application: Codable {
        public var string: String?
        public var application: StripeAPI.Application?

        public init(string: String? = nil, application: StripeAPI.Application? = nil) {
            self.string = string
            self.application = application
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.application = try? container.decode(StripeAPI.Application.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = application { try container.encode(value) }
        }
    }

    /// Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`.
    public enum CancellationReason: String, Codable, CaseIterable {
        case abandoned
        case duplicate
        case requestedByCustomer = "requested_by_customer"
    }

    /// ID of the Customer this SetupIntent belongs to, if one exists.
    /// 
    /// If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
    public final class Customer: Codable {
        public var string: String?
        public var customer: StripeAPI.Customer?
        public var deletedCustomer: DeletedCustomer?

        public init(string: String? = nil, customer: StripeAPI.Customer? = nil, deletedCustomer: DeletedCustomer? = nil) {
            self.string = string
            self.customer = customer
            self.deletedCustomer = deletedCustomer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeAPI.Customer.self)
            self.deletedCustomer = try? container.decode(DeletedCustomer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
            if let value = deletedCustomer { try container.encode(value) }
        }
    }

    /// The error encountered in the previous SetupIntent confirmation.
    public struct LastSetupError: Codable {
        public var apiErrors: APIErrors?

        public init(apiErrors: APIErrors? = nil) {
            self.apiErrors = apiErrors
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.apiErrors = try? container.decode(APIErrors.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = apiErrors { try container.encode(value) }
        }
    }

    /// The most recent SetupAttempt for this SetupIntent.
    public struct LatestAttempt: Codable {
        public var string: String?
        public var setupAttempt: SetupAttempt?

        public init(string: String? = nil, setupAttempt: SetupAttempt? = nil) {
            self.string = string
            self.setupAttempt = setupAttempt
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.setupAttempt = try? container.decode(SetupAttempt.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = setupAttempt { try container.encode(value) }
        }
    }

    /// ID of the multi use Mandate generated by the SetupIntent.
    public final class Mandate: Codable {
        public var string: String?
        public var mandate: StripeAPI.Mandate?

        public init(string: String? = nil, mandate: StripeAPI.Mandate? = nil) {
            self.string = string
            self.mandate = mandate
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.mandate = try? container.decode(StripeAPI.Mandate.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = mandate { try container.encode(value) }
        }
    }

    /// If present, this property tells you what actions you need to take in order for your customer to continue payment setup.
    public struct NextAction: Codable {
        public var setupIntentNextAction: SetupIntentNextAction?

        public init(setupIntentNextAction: SetupIntentNextAction? = nil) {
            self.setupIntentNextAction = setupIntentNextAction
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.setupIntentNextAction = try? container.decode(SetupIntentNextAction.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = setupIntentNextAction { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case setupIntent = "setup_intent"
    }

    /// The account (if any) for which the setup is intended.
    public struct OnBehalfOf: Codable {
        public var string: String?
        public var account: Account?

        public init(string: String? = nil, account: Account? = nil) {
            self.string = string
            self.account = account
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.account = try? container.decode(Account.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = account { try container.encode(value) }
        }
    }

    /// ID of the payment method used with this SetupIntent.
    public final class PaymentMethod: Codable {
        public var string: String?
        public var paymentMethod: StripeAPI.PaymentMethod?

        public init(string: String? = nil, paymentMethod: StripeAPI.PaymentMethod? = nil) {
            self.string = string
            self.paymentMethod = paymentMethod
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentMethod = try? container.decode(StripeAPI.PaymentMethod.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentMethod { try container.encode(value) }
        }
    }

    /// Payment-method-specific configuration for this SetupIntent.
    public struct PaymentMethodOptions: Codable {
        public var setupIntentPaymentMethodOptions: SetupIntentPaymentMethodOptions?

        public init(setupIntentPaymentMethodOptions: SetupIntentPaymentMethodOptions? = nil) {
            self.setupIntentPaymentMethodOptions = setupIntentPaymentMethodOptions
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.setupIntentPaymentMethodOptions = try? container.decode(SetupIntentPaymentMethodOptions.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = setupIntentPaymentMethodOptions { try container.encode(value) }
        }
    }

    /// ID of the single_use Mandate generated by the SetupIntent.
    public struct SingleUseMandate: Codable {
        public var string: String?
        public var mandate: Mandate?

        public init(string: String? = nil, mandate: Mandate? = nil) {
            self.string = string
            self.mandate = mandate
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.mandate = try? container.decode(Mandate.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = mandate { try container.encode(value) }
        }
    }

    /// [Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`.
    public enum Status: String, Codable, CaseIterable {
        case canceled
        case processing
        case requiresAction = "requires_action"
        case requiresConfirmation = "requires_confirmation"
        case requiresPaymentMethod = "requires_payment_method"
        case succeeded
    }

    public init(application: Application? = nil, cancellationReason: CancellationReason? = nil, clientSecret: String? = nil, created: Int, customer: Customer? = nil, description: String? = nil, id: String, lastSetupError: LastSetupError? = nil, latestAttempt: LatestAttempt? = nil, isLivemode: Bool, mandate: Mandate? = nil, metadata: [String: String]? = nil, nextAction: NextAction? = nil, object: Object, onBehalfOf: OnBehalfOf? = nil, paymentMethod: PaymentMethod? = nil, paymentMethodOptions: PaymentMethodOptions? = nil, paymentMethodTypes: [String], singleUseMandate: SingleUseMandate? = nil, status: Status, usage: String) {
        self.application = application
        self.cancellationReason = cancellationReason
        self.clientSecret = clientSecret
        self.created = created
        self.customer = customer
        self.description = description
        self.id = id
        self.lastSetupError = lastSetupError
        self.latestAttempt = latestAttempt
        self.isLivemode = isLivemode
        self.mandate = mandate
        self.metadata = metadata
        self.nextAction = nextAction
        self.object = object
        self.onBehalfOf = onBehalfOf
        self.paymentMethod = paymentMethod
        self.paymentMethodOptions = paymentMethodOptions
        self.paymentMethodTypes = paymentMethodTypes
        self.singleUseMandate = singleUseMandate
        self.status = status
        self.usage = usage
    }

    private enum CodingKeys: String, CodingKey {
        case application
        case cancellationReason = "cancellation_reason"
        case clientSecret = "client_secret"
        case created
        case customer
        case description
        case id
        case lastSetupError = "last_setup_error"
        case latestAttempt = "latest_attempt"
        case isLivemode = "livemode"
        case mandate
        case metadata
        case nextAction = "next_action"
        case object
        case onBehalfOf = "on_behalf_of"
        case paymentMethod = "payment_method"
        case paymentMethodOptions = "payment_method_options"
        case paymentMethodTypes = "payment_method_types"
        case singleUseMandate = "single_use_mandate"
        case status
        case usage
    }
}

public struct SetupIntentNextAction: Codable {
    /// SetupIntentNextActionRedirectToUrl
    public var redirectToURL: SetupIntentNextActionRedirectToURL?
    /// Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`.
    public var type: String
    /// When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.
    public var useStripeSdk: [String: AnyJSON]?
    /// SetupIntentNextActionVerifyWithMicrodeposits
    public var verifyWithMicrodeposits: SetupIntentNextActionVerifyWithMicrodeposits?

    public init(redirectToURL: SetupIntentNextActionRedirectToURL? = nil, type: String, useStripeSdk: [String: AnyJSON]? = nil, verifyWithMicrodeposits: SetupIntentNextActionVerifyWithMicrodeposits? = nil) {
        self.redirectToURL = redirectToURL
        self.type = type
        self.useStripeSdk = useStripeSdk
        self.verifyWithMicrodeposits = verifyWithMicrodeposits
    }

    private enum CodingKeys: String, CodingKey {
        case redirectToURL = "redirect_to_url"
        case type
        case useStripeSdk = "use_stripe_sdk"
        case verifyWithMicrodeposits = "verify_with_microdeposits"
    }
}

public struct SetupIntentNextActionRedirectToURL: Codable {
    /// If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
    public var returnURL: String?
    /// The URL you must redirect your customer to in order to authenticate.
    public var url: String?

    public init(returnURL: String? = nil, url: String? = nil) {
        self.returnURL = returnURL
        self.url = url
    }

    private enum CodingKeys: String, CodingKey {
        case returnURL = "return_url"
        case url
    }
}

public struct SetupIntentNextActionVerifyWithMicrodeposits: Codable {
    /// The timestamp when the microdeposits are expected to land.
    public var arrivalDate: Int
    /// The URL for the hosted verification page, which allows customers to verify their bank account.
    public var hostedVerificationURL: String

    public init(arrivalDate: Int, hostedVerificationURL: String) {
        self.arrivalDate = arrivalDate
        self.hostedVerificationURL = hostedVerificationURL
    }

    private enum CodingKeys: String, CodingKey {
        case arrivalDate = "arrival_date"
        case hostedVerificationURL = "hosted_verification_url"
    }
}

public struct SetupIntentPaymentMethodOptions: Codable {
    /// Setup_intent_payment_method_options_acss_debit
    public var acssDebit: SetupIntentPaymentMethodOptionsAcssDebit?
    /// Setup_intent_payment_method_options_card
    public var card: SetupIntentPaymentMethodOptionsCard?
    /// Setup_intent_payment_method_options_sepa_debit
    public var sepaDebit: SetupIntentPaymentMethodOptionsSepaDebit?

    public init(acssDebit: SetupIntentPaymentMethodOptionsAcssDebit? = nil, card: SetupIntentPaymentMethodOptionsCard? = nil, sepaDebit: SetupIntentPaymentMethodOptionsSepaDebit? = nil) {
        self.acssDebit = acssDebit
        self.card = card
        self.sepaDebit = sepaDebit
    }

    private enum CodingKeys: String, CodingKey {
        case acssDebit = "acss_debit"
        case card
        case sepaDebit = "sepa_debit"
    }
}

/// Setup_intent_payment_method_options_acss_debit
public struct SetupIntentPaymentMethodOptionsAcssDebit: Codable {
    /// Currency supported by the bank account
    public var currency: Currency?
    /// Setup_intent_payment_method_options_mandate_options_acss_debit
    public var mandateOptions: SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit?
    /// Bank account verification method.
    public var verificationMethod: VerificationMethod?

    /// Currency supported by the bank account
    public enum Currency: String, Codable, CaseIterable {
        case cad
        case usd
    }

    /// Bank account verification method.
    public enum VerificationMethod: String, Codable, CaseIterable {
        case automatic
        case instant
        case microdeposits
    }

    public init(currency: Currency? = nil, mandateOptions: SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit? = nil, verificationMethod: VerificationMethod? = nil) {
        self.currency = currency
        self.mandateOptions = mandateOptions
        self.verificationMethod = verificationMethod
    }

    private enum CodingKeys: String, CodingKey {
        case currency
        case mandateOptions = "mandate_options"
        case verificationMethod = "verification_method"
    }
}

/// Setup_intent_payment_method_options_card
public struct SetupIntentPaymentMethodOptionsCard: Codable {
    /// We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
    public var requestThreeDSecure: RequestThreeDSecure?

    /// We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
    public enum RequestThreeDSecure: String, Codable, CaseIterable {
        case any
        case automatic
        case challengeOnly = "challenge_only"
    }

    public init(requestThreeDSecure: RequestThreeDSecure? = nil) {
        self.requestThreeDSecure = requestThreeDSecure
    }

    private enum CodingKeys: String, CodingKey {
        case requestThreeDSecure = "request_three_d_secure"
    }
}

/// Setup_intent_payment_method_options_mandate_options_acss_debit
public struct SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit: Codable {
    /// A URL for custom mandate text
    public var customMandateURL: String?
    /// List of Stripe products where this mandate can be selected automatically.
    public var defaultFor: [DefaultForItem]?
    /// Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
    public var intervalDescription: String?
    /// Payment schedule for the mandate.
    public var paymentSchedule: PaymentSchedule?
    /// Transaction type of the mandate.
    public var transactionType: TransactionType?

    public enum DefaultForItem: String, Codable, CaseIterable {
        case invoice
        case subscription
    }

    /// Payment schedule for the mandate.
    public enum PaymentSchedule: String, Codable, CaseIterable {
        case combined
        case interval
        case sporadic
    }

    /// Transaction type of the mandate.
    public enum TransactionType: String, Codable, CaseIterable {
        case business
        case personal
    }

    public init(customMandateURL: String? = nil, defaultFor: [DefaultForItem]? = nil, intervalDescription: String? = nil, paymentSchedule: PaymentSchedule? = nil, transactionType: TransactionType? = nil) {
        self.customMandateURL = customMandateURL
        self.defaultFor = defaultFor
        self.intervalDescription = intervalDescription
        self.paymentSchedule = paymentSchedule
        self.transactionType = transactionType
    }

    private enum CodingKeys: String, CodingKey {
        case customMandateURL = "custom_mandate_url"
        case defaultFor = "default_for"
        case intervalDescription = "interval_description"
        case paymentSchedule = "payment_schedule"
        case transactionType = "transaction_type"
    }
}

/// Setup_intent_payment_method_options_sepa_debit
public struct SetupIntentPaymentMethodOptionsSepaDebit: Codable {
    /// Setup_intent_payment_method_options_mandate_options_sepa_debit
    public var mandateOptions: [String: AnyJSON]?

    public init(mandateOptions: [String: AnyJSON]? = nil) {
        self.mandateOptions = mandateOptions
    }

    private enum CodingKeys: String, CodingKey {
        case mandateOptions = "mandate_options"
    }
}

public struct Shipping: Codable {
    public var address: Address?
    /// The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.
    public var carrier: String?
    /// Recipient name.
    public var name: String?
    /// Recipient phone (including extension).
    public var phone: String?
    /// The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
    public var trackingNumber: String?

    public init(address: Address? = nil, carrier: String? = nil, name: String? = nil, phone: String? = nil, trackingNumber: String? = nil) {
        self.address = address
        self.carrier = carrier
        self.name = name
        self.phone = phone
        self.trackingNumber = trackingNumber
    }

    private enum CodingKeys: String, CodingKey {
        case address
        case carrier
        case name
        case phone
        case trackingNumber = "tracking_number"
    }
}

public struct ShippingMethod: Codable {
    /// A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item.
    public var amount: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// The estimated delivery date for the given shipping method. Can be either a specific date or a range.
    public var deliveryEstimate: DeliveryEstimate?
    /// An arbitrary string attached to the object. Often useful for displaying to users.
    public var description: String
    /// Unique identifier for the object.
    public var id: String

    /// The estimated delivery date for the given shipping method. Can be either a specific date or a range.
    public final class DeliveryEstimate: Codable {
        public var deliveryEstimate: StripeAPI.DeliveryEstimate?

        public init(deliveryEstimate: StripeAPI.DeliveryEstimate? = nil) {
            self.deliveryEstimate = deliveryEstimate
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.deliveryEstimate = try? container.decode(StripeAPI.DeliveryEstimate.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = deliveryEstimate { try container.encode(value) }
        }
    }

    public init(amount: Int, currency: String, deliveryEstimate: DeliveryEstimate? = nil, description: String, id: String) {
        self.amount = amount
        self.currency = currency
        self.deliveryEstimate = deliveryEstimate
        self.description = description
        self.id = id
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case currency
        case deliveryEstimate = "delivery_estimate"
        case description
        case id
    }
}

/// Shipping rates describe the price of shipping presented to your customers and can be
/// applied to [Checkout Sessions](https://stripe.com/docs/payments/checkout/shipping) to collect shipping costs.
public struct ShippingRate: Codable {
    /// Whether the shipping rate can be used for new purchases. Defaults to `true`.
    public var isActive: Bool
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// The estimated range for how long shipping will take, meant to be displayable to the customer. This will appear on CheckoutSessions.
    public var deliveryEstimate: DeliveryEstimate?
    /// The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions.
    public var displayName: String?
    /// ShippingRateFixedAmount
    public var fixedAmount: ShippingRateFixedAmount?
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
    public var taxBehavior: TaxBehavior?
    /// A [tax code](https://stripe.com/docs/tax/tax-codes) ID. The Shipping tax code is `txcd_92010001`.
    public var taxCode: TaxCode?
    /// The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now.
    public var type: `Type`

    /// The estimated range for how long shipping will take, meant to be displayable to the customer. This will appear on CheckoutSessions.
    public struct DeliveryEstimate: Codable {
        public var shippingRateDeliveryEstimate: ShippingRateDeliveryEstimate?

        public init(shippingRateDeliveryEstimate: ShippingRateDeliveryEstimate? = nil) {
            self.shippingRateDeliveryEstimate = shippingRateDeliveryEstimate
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.shippingRateDeliveryEstimate = try? container.decode(ShippingRateDeliveryEstimate.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = shippingRateDeliveryEstimate { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case shippingRate = "shipping_rate"
    }

    /// Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
    public enum TaxBehavior: String, Codable, CaseIterable {
        case exclusive
        case inclusive
        case unspecified
    }

    /// A [tax code](https://stripe.com/docs/tax/tax-codes) ID. The Shipping tax code is `txcd_92010001`.
    public final class TaxCode: Codable {
        public var string: String?
        /// TaxProductResourceTaxCode
        ///
        /// [Tax codes](https://stripe.com/docs/tax/tax-codes) classify goods and services for tax purposes.
        public var taxCode: StripeAPI.TaxCode?

        public init(string: String? = nil, taxCode: StripeAPI.TaxCode? = nil) {
            self.string = string
            self.taxCode = taxCode
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.taxCode = try? container.decode(StripeAPI.TaxCode.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = taxCode { try container.encode(value) }
        }
    }

    /// The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now.
    public enum `Type`: String, Codable, CaseIterable {
        case fixedAmount = "fixed_amount"
    }

    public init(isActive: Bool, created: Int, deliveryEstimate: DeliveryEstimate? = nil, displayName: String? = nil, fixedAmount: ShippingRateFixedAmount? = nil, id: String, isLivemode: Bool, metadata: [String: String], object: Object, taxBehavior: TaxBehavior? = nil, taxCode: TaxCode? = nil, type: `Type`) {
        self.isActive = isActive
        self.created = created
        self.deliveryEstimate = deliveryEstimate
        self.displayName = displayName
        self.fixedAmount = fixedAmount
        self.id = id
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.taxBehavior = taxBehavior
        self.taxCode = taxCode
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case isActive = "active"
        case created
        case deliveryEstimate = "delivery_estimate"
        case displayName = "display_name"
        case fixedAmount = "fixed_amount"
        case id
        case isLivemode = "livemode"
        case metadata
        case object
        case taxBehavior = "tax_behavior"
        case taxCode = "tax_code"
        case type
    }
}

public struct ShippingRateDeliveryEstimate: Codable {
    /// The upper bound of the estimated range. If empty, represents no upper bound i.e., infinite.
    public var maximum: Maximum?
    /// The lower bound of the estimated range. If empty, represents no lower bound.
    public var minimum: Minimum?

    /// The upper bound of the estimated range. If empty, represents no upper bound i.e., infinite.
    public struct Maximum: Codable {
        public var shippingRateDeliveryEstimateBound: ShippingRateDeliveryEstimateBound?

        public init(shippingRateDeliveryEstimateBound: ShippingRateDeliveryEstimateBound? = nil) {
            self.shippingRateDeliveryEstimateBound = shippingRateDeliveryEstimateBound
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.shippingRateDeliveryEstimateBound = try? container.decode(ShippingRateDeliveryEstimateBound.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = shippingRateDeliveryEstimateBound { try container.encode(value) }
        }
    }

    /// The lower bound of the estimated range. If empty, represents no lower bound.
    public struct Minimum: Codable {
        public var shippingRateDeliveryEstimateBound: ShippingRateDeliveryEstimateBound?

        public init(shippingRateDeliveryEstimateBound: ShippingRateDeliveryEstimateBound? = nil) {
            self.shippingRateDeliveryEstimateBound = shippingRateDeliveryEstimateBound
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.shippingRateDeliveryEstimateBound = try? container.decode(ShippingRateDeliveryEstimateBound.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = shippingRateDeliveryEstimateBound { try container.encode(value) }
        }
    }

    public init(maximum: Maximum? = nil, minimum: Minimum? = nil) {
        self.maximum = maximum
        self.minimum = minimum
    }
}

public struct ShippingRateDeliveryEstimateBound: Codable {
    /// A unit of time.
    public var unit: Unit
    /// Must be greater than 0.
    public var value: Int

    /// A unit of time.
    public enum Unit: String, Codable, CaseIterable {
        case businessDay = "business_day"
        case day
        case hour
        case month
        case week
    }

    public init(unit: Unit, value: Int) {
        self.unit = unit
        self.value = value
    }
}

public struct ShippingRateFixedAmount: Codable {
    /// A non-negative integer in cents representing how much to charge.
    public var amount: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String

    public init(amount: Int, currency: String) {
        self.amount = amount
        self.currency = currency
    }
}

public struct SigmaScheduledQueryRunError: Codable {
    /// Information about the run failure.
    public var message: String

    public init(message: String) {
        self.message = message
    }
}

/// Stores representations of [stock keeping units](http://en.wikipedia.org/wiki/Stock_keeping_unit).
/// SKUs describe specific product variations, taking into account any combination of: attributes,
/// currency, and cost. For example, a product may be a T-shirt, whereas a specific SKU represents
/// the `size: large`, `color: red` version of that shirt.
/// 
/// Can also be used to manage inventory.
/// 
/// Related guide: [Tax, Shipping, and Inventory](https://stripe.com/docs/orders).
public struct Sku: Codable {
    /// Whether the SKU is available for purchase.
    public var isActive: Bool
    /// A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`.
    public var attributes: [String: String]
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// Unique identifier for the object.
    public var id: String
    /// The URL of an image for this SKU, meant to be displayable to the customer.
    public var image: String?
    /// SKUInventory
    public var inventory: SkuInventory
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The dimensions of this SKU for shipping purposes.
    public var packageDimensions: PackageDimensions?
    /// The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency).
    public var price: Int
    /// The ID of the product this SKU is associated with. The product must be currently active.
    public var product: Product
    /// Time at which the object was last updated. Measured in seconds since the Unix epoch.
    public var updated: Int

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case sku
    }

    /// The dimensions of this SKU for shipping purposes.
    public final class PackageDimensions: Codable {
        public var packageDimensions: StripeAPI.PackageDimensions?

        public init(packageDimensions: StripeAPI.PackageDimensions? = nil) {
            self.packageDimensions = packageDimensions
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.packageDimensions = try? container.decode(StripeAPI.PackageDimensions.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = packageDimensions { try container.encode(value) }
        }
    }

    /// The ID of the product this SKU is associated with. The product must be currently active.
    public final class Product: Codable {
        public var string: String?
        /// Products describe the specific goods or services you offer to your customers.
        /// For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.
        /// They can be used in conjunction with [Prices](https://stripe.com/docs/api#prices) to configure pricing in Checkout and Subscriptions.
        /// 
        /// Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) or accept [one-time payments with Checkout](https://stripe.com/docs/payments/checkout/client#create-products) and more about [Products and Prices](https://stripe.com/docs/billing/prices-guide)
        public var product: StripeAPI.Product?

        public init(string: String? = nil, product: StripeAPI.Product? = nil) {
            self.string = string
            self.product = product
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.product = try? container.decode(StripeAPI.Product.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = product { try container.encode(value) }
        }
    }

    public init(isActive: Bool, attributes: [String: String], created: Int, currency: String, id: String, image: String? = nil, inventory: SkuInventory, isLivemode: Bool, metadata: [String: String], object: Object, packageDimensions: PackageDimensions? = nil, price: Int, product: Product, updated: Int) {
        self.isActive = isActive
        self.attributes = attributes
        self.created = created
        self.currency = currency
        self.id = id
        self.image = image
        self.inventory = inventory
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.packageDimensions = packageDimensions
        self.price = price
        self.product = product
        self.updated = updated
    }

    private enum CodingKeys: String, CodingKey {
        case isActive = "active"
        case attributes
        case created
        case currency
        case id
        case image
        case inventory
        case isLivemode = "livemode"
        case metadata
        case object
        case packageDimensions = "package_dimensions"
        case price
        case product
        case updated
    }
}

public struct SkuInventory: Codable {
    /// The count of inventory available. Will be present if and only if `type` is `finite`.
    public var quantity: Int?
    /// Inventory type. Possible values are `finite`, `bucket` (not quantified), and `infinite`.
    public var type: String
    /// An indicator of the inventory available. Possible values are `in_stock`, `limited`, and `out_of_stock`. Will be present if and only if `type` is `bucket`.
    public var value: String?

    public init(quantity: Int? = nil, type: String, value: String? = nil) {
        self.quantity = quantity
        self.type = type
        self.value = value
    }
}

/// `Source` objects allow you to accept a variety of payment methods. They
/// represent a customer's payment instrument, and can be used with the Stripe API
/// just like a `Card` object: once chargeable, they can be charged, or can be
/// attached to customers.
/// 
/// Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
public struct Source: Codable {
    public var achCreditTransfer: SourceTypeAchCreditTransfer?
    public var achDebit: SourceTypeAchDebit?
    public var acssDebit: SourceTypeAcssDebit?
    public var alipay: SourceTypeAlipay?
    /// A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.
    public var amount: Int?
    public var auBecsDebit: SourceTypeAuBecsDebit?
    public var bancontact: SourceTypeBancontact?
    public var card: SourceTypeCard?
    public var cardPresent: SourceTypeCardPresent?
    /// The client secret of the source. Used for client-side retrieval using a publishable key.
    public var clientSecret: String
    /// SourceCodeVerificationFlow
    public var codeVerification: SourceCodeVerificationFlow?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources.
    public var currency: String?
    /// The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer.
    public var customer: String?
    public var eps: SourceTypeEps?
    /// The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`.
    public var flow: String
    public var giropay: SourceTypeGiropay?
    /// Unique identifier for the object.
    public var id: String
    public var ideal: SourceTypeIdeal?
    public var klarna: SourceTypeKlarna?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    public var multibanco: SourceTypeMultibanco?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Information about the owner of the payment instrument that may be used or required by particular source types.
    public var owner: Owner?
    public var p24: SourceTypeP24?
    /// SourceReceiverFlow
    public var receiver: SourceReceiverFlow?
    /// SourceRedirectFlow
    public var redirect: SourceRedirectFlow?
    public var sepaDebit: SourceTypeSepaDebit?
    public var sofort: SourceTypeSofort?
    public var sourceOrder: SourceOrder?
    /// Extra information about a source. This will appear on your customer's statement every time you charge the source.
    public var statementDescriptor: String?
    /// The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge.
    public var status: String
    public var threeDSecure: SourceTypeThreeDSecure?
    /// The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.
    public var type: `Type`
    /// Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
    public var usage: String?
    public var wechat: SourceTypeWechat?

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case source
    }

    /// Information about the owner of the payment instrument that may be used or required by particular source types.
    public struct Owner: Codable {
        public var sourceOwner: SourceOwner?

        public init(sourceOwner: SourceOwner? = nil) {
            self.sourceOwner = sourceOwner
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.sourceOwner = try? container.decode(SourceOwner.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = sourceOwner { try container.encode(value) }
        }
    }

    /// The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.
    public enum `Type`: String, Codable, CaseIterable {
        case achCreditTransfer = "ach_credit_transfer"
        case achDebit = "ach_debit"
        case acssDebit = "acss_debit"
        case alipay
        case auBecsDebit = "au_becs_debit"
        case bancontact
        case card
        case cardPresent = "card_present"
        case eps
        case giropay
        case ideal
        case klarna
        case multibanco
        case p24
        case sepaDebit = "sepa_debit"
        case sofort
        case threeDSecure = "three_d_secure"
        case wechat
    }

    public init(achCreditTransfer: SourceTypeAchCreditTransfer? = nil, achDebit: SourceTypeAchDebit? = nil, acssDebit: SourceTypeAcssDebit? = nil, alipay: SourceTypeAlipay? = nil, amount: Int? = nil, auBecsDebit: SourceTypeAuBecsDebit? = nil, bancontact: SourceTypeBancontact? = nil, card: SourceTypeCard? = nil, cardPresent: SourceTypeCardPresent? = nil, clientSecret: String, codeVerification: SourceCodeVerificationFlow? = nil, created: Int, currency: String? = nil, customer: String? = nil, eps: SourceTypeEps? = nil, flow: String, giropay: SourceTypeGiropay? = nil, id: String, ideal: SourceTypeIdeal? = nil, klarna: SourceTypeKlarna? = nil, isLivemode: Bool, metadata: [String: String]? = nil, multibanco: SourceTypeMultibanco? = nil, object: Object, owner: Owner? = nil, p24: SourceTypeP24? = nil, receiver: SourceReceiverFlow? = nil, redirect: SourceRedirectFlow? = nil, sepaDebit: SourceTypeSepaDebit? = nil, sofort: SourceTypeSofort? = nil, sourceOrder: SourceOrder? = nil, statementDescriptor: String? = nil, status: String, threeDSecure: SourceTypeThreeDSecure? = nil, type: `Type`, usage: String? = nil, wechat: SourceTypeWechat? = nil) {
        self.achCreditTransfer = achCreditTransfer
        self.achDebit = achDebit
        self.acssDebit = acssDebit
        self.alipay = alipay
        self.amount = amount
        self.auBecsDebit = auBecsDebit
        self.bancontact = bancontact
        self.card = card
        self.cardPresent = cardPresent
        self.clientSecret = clientSecret
        self.codeVerification = codeVerification
        self.created = created
        self.currency = currency
        self.customer = customer
        self.eps = eps
        self.flow = flow
        self.giropay = giropay
        self.id = id
        self.ideal = ideal
        self.klarna = klarna
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.multibanco = multibanco
        self.object = object
        self.owner = owner
        self.p24 = p24
        self.receiver = receiver
        self.redirect = redirect
        self.sepaDebit = sepaDebit
        self.sofort = sofort
        self.sourceOrder = sourceOrder
        self.statementDescriptor = statementDescriptor
        self.status = status
        self.threeDSecure = threeDSecure
        self.type = type
        self.usage = usage
        self.wechat = wechat
    }

    private enum CodingKeys: String, CodingKey {
        case achCreditTransfer = "ach_credit_transfer"
        case achDebit = "ach_debit"
        case acssDebit = "acss_debit"
        case alipay
        case amount
        case auBecsDebit = "au_becs_debit"
        case bancontact
        case card
        case cardPresent = "card_present"
        case clientSecret = "client_secret"
        case codeVerification = "code_verification"
        case created
        case currency
        case customer
        case eps
        case flow
        case giropay
        case id
        case ideal
        case klarna
        case isLivemode = "livemode"
        case metadata
        case multibanco
        case object
        case owner
        case p24
        case receiver
        case redirect
        case sepaDebit = "sepa_debit"
        case sofort
        case sourceOrder = "source_order"
        case statementDescriptor = "statement_descriptor"
        case status
        case threeDSecure = "three_d_secure"
        case type
        case usage
        case wechat
    }
}

public struct SourceCodeVerificationFlow: Codable {
    /// The number of attempts remaining to authenticate the source object with a verification code.
    public var attemptsRemaining: Int
    /// The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0).
    public var status: String

    public init(attemptsRemaining: Int, status: String) {
        self.attemptsRemaining = attemptsRemaining
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case attemptsRemaining = "attempts_remaining"
        case status
    }
}

/// Source mandate notifications should be created when a notification related to
/// a source mandate must be sent to the payer. They will trigger a webhook or
/// deliver an email to the customer.
public struct SourceMandateNotification: Codable {
    /// SourceMandateNotificationAcssDebitData
    public var acssDebit: SourceMandateNotificationAcssDebitData?
    /// A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount associated with the mandate notification. The amount is expressed in the currency of the underlying source. Required if the notification type is `debit_initiated`.
    public var amount: Int?
    /// SourceMandateNotificationBacsDebitData
    public var bacsDebit: SourceMandateNotificationBacsDebitData?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The reason of the mandate notification. Valid reasons are `mandate_confirmed` or `debit_initiated`.
    public var reason: String
    /// SourceMandateNotificationSepaDebitData
    public var sepaDebit: SourceMandateNotificationSepaDebitData?
    /// `Source` objects allow you to accept a variety of payment methods. They
    /// represent a customer's payment instrument, and can be used with the Stripe API
    /// just like a `Card` object: once chargeable, they can be charged, or can be
    /// attached to customers.
    /// 
    /// Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
    public var source: Source
    /// The status of the mandate notification. Valid statuses are `pending` or `submitted`.
    public var status: String
    /// The type of source this mandate notification is attached to. Should be the source type identifier code for the payment method, such as `three_d_secure`.
    public var type: String

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case sourceMandateNotification = "source_mandate_notification"
    }

    public init(acssDebit: SourceMandateNotificationAcssDebitData? = nil, amount: Int? = nil, bacsDebit: SourceMandateNotificationBacsDebitData? = nil, created: Int, id: String, isLivemode: Bool, object: Object, reason: String, sepaDebit: SourceMandateNotificationSepaDebitData? = nil, source: Source, status: String, type: String) {
        self.acssDebit = acssDebit
        self.amount = amount
        self.bacsDebit = bacsDebit
        self.created = created
        self.id = id
        self.isLivemode = isLivemode
        self.object = object
        self.reason = reason
        self.sepaDebit = sepaDebit
        self.source = source
        self.status = status
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case acssDebit = "acss_debit"
        case amount
        case bacsDebit = "bacs_debit"
        case created
        case id
        case isLivemode = "livemode"
        case object
        case reason
        case sepaDebit = "sepa_debit"
        case source
        case status
        case type
    }
}

public struct SourceMandateNotificationAcssDebitData: Codable {
    /// The statement descriptor associate with the debit.
    public var statementDescriptor: String?

    public init(statementDescriptor: String? = nil) {
        self.statementDescriptor = statementDescriptor
    }

    private enum CodingKeys: String, CodingKey {
        case statementDescriptor = "statement_descriptor"
    }
}

public struct SourceMandateNotificationBacsDebitData: Codable {
    /// Last 4 digits of the account number associated with the debit.
    public var last4: String?

    public init(last4: String? = nil) {
        self.last4 = last4
    }
}

public struct SourceMandateNotificationSepaDebitData: Codable {
    /// SEPA creditor ID.
    public var creditorIdentifier: String?
    /// Last 4 digits of the account number associated with the debit.
    public var last4: String?
    /// Mandate reference associated with the debit.
    public var mandateReference: String?

    public init(creditorIdentifier: String? = nil, last4: String? = nil, mandateReference: String? = nil) {
        self.creditorIdentifier = creditorIdentifier
        self.last4 = last4
        self.mandateReference = mandateReference
    }

    private enum CodingKeys: String, CodingKey {
        case creditorIdentifier = "creditor_identifier"
        case last4
        case mandateReference = "mandate_reference"
    }
}

public struct SourceOrder: Codable {
    /// A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order.
    public var amount: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// The email address of the customer placing the order.
    public var email: String?
    /// List of items constituting the order.
    public var items: [SourceOrderItem]?
    public var shipping: Shipping?

    public init(amount: Int, currency: String, email: String? = nil, items: [SourceOrderItem]? = nil, shipping: Shipping? = nil) {
        self.amount = amount
        self.currency = currency
        self.email = email
        self.items = items
        self.shipping = shipping
    }
}

public struct SourceOrderItem: Codable {
    /// The amount (price) for this order item.
    public var amount: Int?
    /// This currency of this order item. Required when `amount` is present.
    public var currency: String?
    /// Human-readable description for this order item.
    public var description: String?
    /// The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU).
    public var parent: String?
    /// The quantity of this order item. When type is `sku`, this is the number of instances of the SKU to be ordered.
    public var quantity: Int?
    /// The type of this order item. Must be `sku`, `tax`, or `shipping`.
    public var type: String?

    public init(amount: Int? = nil, currency: String? = nil, description: String? = nil, parent: String? = nil, quantity: Int? = nil, type: String? = nil) {
        self.amount = amount
        self.currency = currency
        self.description = description
        self.parent = parent
        self.quantity = quantity
        self.type = type
    }
}

public struct SourceOwner: Codable {
    /// Owner's address.
    public var address: Address?
    /// Owner's email address.
    public var email: String?
    /// Owner's full name.
    public var name: String?
    /// Owner's phone number (including extension).
    public var phone: String?
    /// Verified owner's address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var verifiedAddress: VerifiedAddress?
    /// Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var verifiedEmail: String?
    /// Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var verifiedName: String?
    /// Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public var verifiedPhone: String?

    /// Owner's address.
    public final class Address: Codable {
        public var address: StripeAPI.Address?

        public init(address: StripeAPI.Address? = nil) {
            self.address = address
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.address = try? container.decode(StripeAPI.Address.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = address { try container.encode(value) }
        }
    }

    /// Verified owner's address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    public struct VerifiedAddress: Codable {
        public var address: Address?

        public init(address: Address? = nil) {
            self.address = address
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.address = try? container.decode(Address.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = address { try container.encode(value) }
        }
    }

    public init(address: Address? = nil, email: String? = nil, name: String? = nil, phone: String? = nil, verifiedAddress: VerifiedAddress? = nil, verifiedEmail: String? = nil, verifiedName: String? = nil, verifiedPhone: String? = nil) {
        self.address = address
        self.email = email
        self.name = name
        self.phone = phone
        self.verifiedAddress = verifiedAddress
        self.verifiedEmail = verifiedEmail
        self.verifiedName = verifiedName
        self.verifiedPhone = verifiedPhone
    }

    private enum CodingKeys: String, CodingKey {
        case address
        case email
        case name
        case phone
        case verifiedAddress = "verified_address"
        case verifiedEmail = "verified_email"
        case verifiedName = "verified_name"
        case verifiedPhone = "verified_phone"
    }
}

public struct SourceReceiverFlow: Codable {
    /// The address of the receiver source. This is the value that should be communicated to the customer to send their funds to.
    public var address: String?
    /// The total amount that was moved to your balance. This is almost always equal to the amount charged. In rare cases when customers deposit excess funds and we are unable to refund those, those funds get moved to your balance and show up in amount_charged as well. The amount charged is expressed in the source's currency.
    public var amountCharged: Int
    /// The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` should be true for consumed sources unless customers deposit excess funds. The amount received is expressed in the source's currency.
    public var amountReceived: Int
    /// The total amount that was returned to the customer. The amount returned is expressed in the source's currency.
    public var amountReturned: Int
    /// Type of refund attribute method, one of `email`, `manual`, or `none`.
    public var refundAttributesMethod: String
    /// Type of refund attribute status, one of `missing`, `requested`, or `available`.
    public var refundAttributesStatus: String

    public init(address: String? = nil, amountCharged: Int, amountReceived: Int, amountReturned: Int, refundAttributesMethod: String, refundAttributesStatus: String) {
        self.address = address
        self.amountCharged = amountCharged
        self.amountReceived = amountReceived
        self.amountReturned = amountReturned
        self.refundAttributesMethod = refundAttributesMethod
        self.refundAttributesStatus = refundAttributesStatus
    }

    private enum CodingKeys: String, CodingKey {
        case address
        case amountCharged = "amount_charged"
        case amountReceived = "amount_received"
        case amountReturned = "amount_returned"
        case refundAttributesMethod = "refund_attributes_method"
        case refundAttributesStatus = "refund_attributes_status"
    }
}

public struct SourceRedirectFlow: Codable {
    /// The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`.
    public var failureReason: String?
    /// The URL you provide to redirect the customer to after they authenticated their payment.
    public var returnURL: String
    /// The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused).
    public var status: String
    /// The URL provided to you to redirect a customer to as part of a `redirect` authentication flow.
    public var url: String

    public init(failureReason: String? = nil, returnURL: String, status: String, url: String) {
        self.failureReason = failureReason
        self.returnURL = returnURL
        self.status = status
        self.url = url
    }

    private enum CodingKeys: String, CodingKey {
        case failureReason = "failure_reason"
        case returnURL = "return_url"
        case status
        case url
    }
}

/// Some payment methods have no required amount that a customer must send.
/// Customers can be instructed to send any amount, and it can be made up of
/// multiple transactions. As such, sources can have multiple associated
/// transactions.
public struct SourceTransaction: Codable {
    /// SourceTransactionAchCreditTransferData
    public var achCreditTransfer: SourceTransactionAchCreditTransferData?
    /// A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver.
    public var amount: Int
    /// SourceTransactionChfCreditTransferData
    public var chfCreditTransfer: SourceTransactionChfCreditTransferData?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// SourceTransactionGbpCreditTransferData
    public var gbpCreditTransfer: SourceTransactionGbpCreditTransferData?
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// SourceTransactionPaperCheckData
    public var paperCheck: SourceTransactionPaperCheckData?
    /// SourceTransactionSepaCreditTransferData
    public var sepaCreditTransfer: SourceTransactionSepaCreditTransferData?
    /// The ID of the source this transaction is attached to.
    public var source: String
    /// The status of the transaction, one of `succeeded`, `pending`, or `failed`.
    public var status: String
    /// The type of source this transaction is attached to.
    public var type: `Type`

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case sourceTransaction = "source_transaction"
    }

    /// The type of source this transaction is attached to.
    public enum `Type`: String, Codable, CaseIterable {
        case achCreditTransfer = "ach_credit_transfer"
        case achDebit = "ach_debit"
        case alipay
        case bancontact
        case card
        case cardPresent = "card_present"
        case eps
        case giropay
        case ideal
        case klarna
        case multibanco
        case p24
        case sepaDebit = "sepa_debit"
        case sofort
        case threeDSecure = "three_d_secure"
        case wechat
    }

    public init(achCreditTransfer: SourceTransactionAchCreditTransferData? = nil, amount: Int, chfCreditTransfer: SourceTransactionChfCreditTransferData? = nil, created: Int, currency: String, gbpCreditTransfer: SourceTransactionGbpCreditTransferData? = nil, id: String, isLivemode: Bool, object: Object, paperCheck: SourceTransactionPaperCheckData? = nil, sepaCreditTransfer: SourceTransactionSepaCreditTransferData? = nil, source: String, status: String, type: `Type`) {
        self.achCreditTransfer = achCreditTransfer
        self.amount = amount
        self.chfCreditTransfer = chfCreditTransfer
        self.created = created
        self.currency = currency
        self.gbpCreditTransfer = gbpCreditTransfer
        self.id = id
        self.isLivemode = isLivemode
        self.object = object
        self.paperCheck = paperCheck
        self.sepaCreditTransfer = sepaCreditTransfer
        self.source = source
        self.status = status
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case achCreditTransfer = "ach_credit_transfer"
        case amount
        case chfCreditTransfer = "chf_credit_transfer"
        case created
        case currency
        case gbpCreditTransfer = "gbp_credit_transfer"
        case id
        case isLivemode = "livemode"
        case object
        case paperCheck = "paper_check"
        case sepaCreditTransfer = "sepa_credit_transfer"
        case source
        case status
        case type
    }
}

public struct SourceTransactionAchCreditTransferData: Codable {
    /// Customer data associated with the transfer.
    public var customerData: String?
    /// Bank account fingerprint associated with the transfer.
    public var fingerprint: String?
    /// Last 4 digits of the account number associated with the transfer.
    public var last4: String?
    /// Routing number associated with the transfer.
    public var routingNumber: String?

    public init(customerData: String? = nil, fingerprint: String? = nil, last4: String? = nil, routingNumber: String? = nil) {
        self.customerData = customerData
        self.fingerprint = fingerprint
        self.last4 = last4
        self.routingNumber = routingNumber
    }

    private enum CodingKeys: String, CodingKey {
        case customerData = "customer_data"
        case fingerprint
        case last4
        case routingNumber = "routing_number"
    }
}

public struct SourceTransactionChfCreditTransferData: Codable {
    /// Reference associated with the transfer.
    public var reference: String?
    /// Sender's country address.
    public var senderAddressCountry: String?
    /// Sender's line 1 address.
    public var senderAddressLine1: String?
    /// Sender's bank account IBAN.
    public var senderIban: String?
    /// Sender's name.
    public var senderName: String?

    public init(reference: String? = nil, senderAddressCountry: String? = nil, senderAddressLine1: String? = nil, senderIban: String? = nil, senderName: String? = nil) {
        self.reference = reference
        self.senderAddressCountry = senderAddressCountry
        self.senderAddressLine1 = senderAddressLine1
        self.senderIban = senderIban
        self.senderName = senderName
    }

    private enum CodingKeys: String, CodingKey {
        case reference
        case senderAddressCountry = "sender_address_country"
        case senderAddressLine1 = "sender_address_line1"
        case senderIban = "sender_iban"
        case senderName = "sender_name"
    }
}

public struct SourceTransactionGbpCreditTransferData: Codable {
    /// Bank account fingerprint associated with the Stripe owned bank account receiving the transfer.
    public var fingerprint: String?
    /// The credit transfer rails the sender used to push this transfer. The possible rails are: Faster Payments, BACS, CHAPS, and wire transfers. Currently only Faster Payments is supported.
    public var fundingMethod: String?
    /// Last 4 digits of sender account number associated with the transfer.
    public var last4: String?
    /// Sender entered arbitrary information about the transfer.
    public var reference: String?
    /// Sender account number associated with the transfer.
    public var senderAccountNumber: String?
    /// Sender name associated with the transfer.
    public var senderName: String?
    /// Sender sort code associated with the transfer.
    public var senderSortCode: String?

    public init(fingerprint: String? = nil, fundingMethod: String? = nil, last4: String? = nil, reference: String? = nil, senderAccountNumber: String? = nil, senderName: String? = nil, senderSortCode: String? = nil) {
        self.fingerprint = fingerprint
        self.fundingMethod = fundingMethod
        self.last4 = last4
        self.reference = reference
        self.senderAccountNumber = senderAccountNumber
        self.senderName = senderName
        self.senderSortCode = senderSortCode
    }

    private enum CodingKeys: String, CodingKey {
        case fingerprint
        case fundingMethod = "funding_method"
        case last4
        case reference
        case senderAccountNumber = "sender_account_number"
        case senderName = "sender_name"
        case senderSortCode = "sender_sort_code"
    }
}

public struct SourceTransactionPaperCheckData: Codable {
    /// Time at which the deposited funds will be available for use. Measured in seconds since the Unix epoch.
    public var availableAt: String?
    /// Comma-separated list of invoice IDs associated with the paper check.
    public var invoices: String?

    public init(availableAt: String? = nil, invoices: String? = nil) {
        self.availableAt = availableAt
        self.invoices = invoices
    }

    private enum CodingKeys: String, CodingKey {
        case availableAt = "available_at"
        case invoices
    }
}

public struct SourceTransactionSepaCreditTransferData: Codable {
    /// Reference associated with the transfer.
    public var reference: String?
    /// Sender's bank account IBAN.
    public var senderIban: String?
    /// Sender's name.
    public var senderName: String?

    public init(reference: String? = nil, senderIban: String? = nil, senderName: String? = nil) {
        self.reference = reference
        self.senderIban = senderIban
        self.senderName = senderName
    }

    private enum CodingKeys: String, CodingKey {
        case reference
        case senderIban = "sender_iban"
        case senderName = "sender_name"
    }
}

public struct SourceTypeAchCreditTransfer: Codable {
    public var accountNumber: String?
    public var bankName: String?
    public var fingerprint: String?
    public var refundAccountHolderName: String?
    public var refundAccountHolderType: String?
    public var refundRoutingNumber: String?
    public var routingNumber: String?
    public var swiftCode: String?

    public init(accountNumber: String? = nil, bankName: String? = nil, fingerprint: String? = nil, refundAccountHolderName: String? = nil, refundAccountHolderType: String? = nil, refundRoutingNumber: String? = nil, routingNumber: String? = nil, swiftCode: String? = nil) {
        self.accountNumber = accountNumber
        self.bankName = bankName
        self.fingerprint = fingerprint
        self.refundAccountHolderName = refundAccountHolderName
        self.refundAccountHolderType = refundAccountHolderType
        self.refundRoutingNumber = refundRoutingNumber
        self.routingNumber = routingNumber
        self.swiftCode = swiftCode
    }

    private enum CodingKeys: String, CodingKey {
        case accountNumber = "account_number"
        case bankName = "bank_name"
        case fingerprint
        case refundAccountHolderName = "refund_account_holder_name"
        case refundAccountHolderType = "refund_account_holder_type"
        case refundRoutingNumber = "refund_routing_number"
        case routingNumber = "routing_number"
        case swiftCode = "swift_code"
    }
}

public struct SourceTypeAchDebit: Codable {
    public var bankName: String?
    public var country: String?
    public var fingerprint: String?
    public var last4: String?
    public var routingNumber: String?
    public var type: String?

    public init(bankName: String? = nil, country: String? = nil, fingerprint: String? = nil, last4: String? = nil, routingNumber: String? = nil, type: String? = nil) {
        self.bankName = bankName
        self.country = country
        self.fingerprint = fingerprint
        self.last4 = last4
        self.routingNumber = routingNumber
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case bankName = "bank_name"
        case country
        case fingerprint
        case last4
        case routingNumber = "routing_number"
        case type
    }
}

public struct SourceTypeAcssDebit: Codable {
    public var bankAddressCity: String?
    public var bankAddressLine1: String?
    public var bankAddressLine2: String?
    public var bankAddressPostalCode: String?
    public var bankName: String?
    public var category: String?
    public var country: String?
    public var fingerprint: String?
    public var last4: String?
    public var routingNumber: String?

    public init(bankAddressCity: String? = nil, bankAddressLine1: String? = nil, bankAddressLine2: String? = nil, bankAddressPostalCode: String? = nil, bankName: String? = nil, category: String? = nil, country: String? = nil, fingerprint: String? = nil, last4: String? = nil, routingNumber: String? = nil) {
        self.bankAddressCity = bankAddressCity
        self.bankAddressLine1 = bankAddressLine1
        self.bankAddressLine2 = bankAddressLine2
        self.bankAddressPostalCode = bankAddressPostalCode
        self.bankName = bankName
        self.category = category
        self.country = country
        self.fingerprint = fingerprint
        self.last4 = last4
        self.routingNumber = routingNumber
    }

    private enum CodingKeys: String, CodingKey {
        case bankAddressCity = "bank_address_city"
        case bankAddressLine1 = "bank_address_line_1"
        case bankAddressLine2 = "bank_address_line_2"
        case bankAddressPostalCode = "bank_address_postal_code"
        case bankName = "bank_name"
        case category
        case country
        case fingerprint
        case last4
        case routingNumber = "routing_number"
    }
}

public struct SourceTypeAlipay: Codable {
    public var dataString: String?
    public var nativeURL: String?
    public var statementDescriptor: String?

    public init(dataString: String? = nil, nativeURL: String? = nil, statementDescriptor: String? = nil) {
        self.dataString = dataString
        self.nativeURL = nativeURL
        self.statementDescriptor = statementDescriptor
    }

    private enum CodingKeys: String, CodingKey {
        case dataString = "data_string"
        case nativeURL = "native_url"
        case statementDescriptor = "statement_descriptor"
    }
}

public struct SourceTypeAuBecsDebit: Codable {
    public var bsbNumber: String?
    public var fingerprint: String?
    public var last4: String?

    public init(bsbNumber: String? = nil, fingerprint: String? = nil, last4: String? = nil) {
        self.bsbNumber = bsbNumber
        self.fingerprint = fingerprint
        self.last4 = last4
    }

    private enum CodingKeys: String, CodingKey {
        case bsbNumber = "bsb_number"
        case fingerprint
        case last4
    }
}

public struct SourceTypeBancontact: Codable {
    public var bankCode: String?
    public var bankName: String?
    public var bic: String?
    public var ibanLast4: String?
    public var preferredLanguage: String?
    public var statementDescriptor: String?

    public init(bankCode: String? = nil, bankName: String? = nil, bic: String? = nil, ibanLast4: String? = nil, preferredLanguage: String? = nil, statementDescriptor: String? = nil) {
        self.bankCode = bankCode
        self.bankName = bankName
        self.bic = bic
        self.ibanLast4 = ibanLast4
        self.preferredLanguage = preferredLanguage
        self.statementDescriptor = statementDescriptor
    }

    private enum CodingKeys: String, CodingKey {
        case bankCode = "bank_code"
        case bankName = "bank_name"
        case bic
        case ibanLast4 = "iban_last4"
        case preferredLanguage = "preferred_language"
        case statementDescriptor = "statement_descriptor"
    }
}

public struct SourceTypeCard: Codable {
    public var addressLine1Check: String?
    public var addressZipCheck: String?
    public var brand: String?
    public var country: String?
    public var cvcCheck: String?
    public var dynamicLast4: String?
    public var expMonth: Int?
    public var expYear: Int?
    public var fingerprint: String?
    public var funding: String?
    public var last4: String?
    public var name: String?
    public var threeDSecure: String?
    public var tokenizationMethod: String?

    public init(addressLine1Check: String? = nil, addressZipCheck: String? = nil, brand: String? = nil, country: String? = nil, cvcCheck: String? = nil, dynamicLast4: String? = nil, expMonth: Int? = nil, expYear: Int? = nil, fingerprint: String? = nil, funding: String? = nil, last4: String? = nil, name: String? = nil, threeDSecure: String? = nil, tokenizationMethod: String? = nil) {
        self.addressLine1Check = addressLine1Check
        self.addressZipCheck = addressZipCheck
        self.brand = brand
        self.country = country
        self.cvcCheck = cvcCheck
        self.dynamicLast4 = dynamicLast4
        self.expMonth = expMonth
        self.expYear = expYear
        self.fingerprint = fingerprint
        self.funding = funding
        self.last4 = last4
        self.name = name
        self.threeDSecure = threeDSecure
        self.tokenizationMethod = tokenizationMethod
    }

    private enum CodingKeys: String, CodingKey {
        case addressLine1Check = "address_line1_check"
        case addressZipCheck = "address_zip_check"
        case brand
        case country
        case cvcCheck = "cvc_check"
        case dynamicLast4 = "dynamic_last4"
        case expMonth = "exp_month"
        case expYear = "exp_year"
        case fingerprint
        case funding
        case last4
        case name
        case threeDSecure = "three_d_secure"
        case tokenizationMethod = "tokenization_method"
    }
}

public struct SourceTypeCardPresent: Codable {
    public var applicationCryptogram: String?
    public var applicationPreferredName: String?
    public var authorizationCode: String?
    public var authorizationResponseCode: String?
    public var brand: String?
    public var country: String?
    public var cvmType: String?
    public var dataType: String?
    public var dedicatedFileName: String?
    public var emvAuthData: String?
    public var evidenceCustomerSignature: String?
    public var evidenceTransactionCertificate: String?
    public var expMonth: Int?
    public var expYear: Int?
    public var fingerprint: String?
    public var funding: String?
    public var last4: String?
    public var posDeviceID: String?
    public var posEntryMode: String?
    public var readMethod: String?
    public var reader: String?
    public var terminalVerificationResults: String?
    public var transactionStatusInformation: String?

    public init(applicationCryptogram: String? = nil, applicationPreferredName: String? = nil, authorizationCode: String? = nil, authorizationResponseCode: String? = nil, brand: String? = nil, country: String? = nil, cvmType: String? = nil, dataType: String? = nil, dedicatedFileName: String? = nil, emvAuthData: String? = nil, evidenceCustomerSignature: String? = nil, evidenceTransactionCertificate: String? = nil, expMonth: Int? = nil, expYear: Int? = nil, fingerprint: String? = nil, funding: String? = nil, last4: String? = nil, posDeviceID: String? = nil, posEntryMode: String? = nil, readMethod: String? = nil, reader: String? = nil, terminalVerificationResults: String? = nil, transactionStatusInformation: String? = nil) {
        self.applicationCryptogram = applicationCryptogram
        self.applicationPreferredName = applicationPreferredName
        self.authorizationCode = authorizationCode
        self.authorizationResponseCode = authorizationResponseCode
        self.brand = brand
        self.country = country
        self.cvmType = cvmType
        self.dataType = dataType
        self.dedicatedFileName = dedicatedFileName
        self.emvAuthData = emvAuthData
        self.evidenceCustomerSignature = evidenceCustomerSignature
        self.evidenceTransactionCertificate = evidenceTransactionCertificate
        self.expMonth = expMonth
        self.expYear = expYear
        self.fingerprint = fingerprint
        self.funding = funding
        self.last4 = last4
        self.posDeviceID = posDeviceID
        self.posEntryMode = posEntryMode
        self.readMethod = readMethod
        self.reader = reader
        self.terminalVerificationResults = terminalVerificationResults
        self.transactionStatusInformation = transactionStatusInformation
    }

    private enum CodingKeys: String, CodingKey {
        case applicationCryptogram = "application_cryptogram"
        case applicationPreferredName = "application_preferred_name"
        case authorizationCode = "authorization_code"
        case authorizationResponseCode = "authorization_response_code"
        case brand
        case country
        case cvmType = "cvm_type"
        case dataType = "data_type"
        case dedicatedFileName = "dedicated_file_name"
        case emvAuthData = "emv_auth_data"
        case evidenceCustomerSignature = "evidence_customer_signature"
        case evidenceTransactionCertificate = "evidence_transaction_certificate"
        case expMonth = "exp_month"
        case expYear = "exp_year"
        case fingerprint
        case funding
        case last4
        case posDeviceID = "pos_device_id"
        case posEntryMode = "pos_entry_mode"
        case readMethod = "read_method"
        case reader
        case terminalVerificationResults = "terminal_verification_results"
        case transactionStatusInformation = "transaction_status_information"
    }
}

public struct SourceTypeEps: Codable {
    public var reference: String?
    public var statementDescriptor: String?

    public init(reference: String? = nil, statementDescriptor: String? = nil) {
        self.reference = reference
        self.statementDescriptor = statementDescriptor
    }

    private enum CodingKeys: String, CodingKey {
        case reference
        case statementDescriptor = "statement_descriptor"
    }
}

public struct SourceTypeGiropay: Codable {
    public var bankCode: String?
    public var bankName: String?
    public var bic: String?
    public var statementDescriptor: String?

    public init(bankCode: String? = nil, bankName: String? = nil, bic: String? = nil, statementDescriptor: String? = nil) {
        self.bankCode = bankCode
        self.bankName = bankName
        self.bic = bic
        self.statementDescriptor = statementDescriptor
    }

    private enum CodingKeys: String, CodingKey {
        case bankCode = "bank_code"
        case bankName = "bank_name"
        case bic
        case statementDescriptor = "statement_descriptor"
    }
}

public struct SourceTypeIdeal: Codable {
    public var bank: String?
    public var bic: String?
    public var ibanLast4: String?
    public var statementDescriptor: String?

    public init(bank: String? = nil, bic: String? = nil, ibanLast4: String? = nil, statementDescriptor: String? = nil) {
        self.bank = bank
        self.bic = bic
        self.ibanLast4 = ibanLast4
        self.statementDescriptor = statementDescriptor
    }

    private enum CodingKeys: String, CodingKey {
        case bank
        case bic
        case ibanLast4 = "iban_last4"
        case statementDescriptor = "statement_descriptor"
    }
}

public struct SourceTypeKlarna: Codable {
    public var backgroundImageURL: String?
    public var clientToken: String?
    public var firstName: String?
    public var lastName: String?
    public var locale: String?
    public var logoURL: String?
    public var pageTitle: String?
    public var payLaterAssetURLsDescriptive: String?
    public var payLaterAssetURLsStandard: String?
    public var payLaterName: String?
    public var payLaterRedirectURL: String?
    public var payNowAssetURLsDescriptive: String?
    public var payNowAssetURLsStandard: String?
    public var payNowName: String?
    public var payNowRedirectURL: String?
    public var payOverTimeAssetURLsDescriptive: String?
    public var payOverTimeAssetURLsStandard: String?
    public var payOverTimeName: String?
    public var payOverTimeRedirectURL: String?
    public var paymentMethodCategories: String?
    public var purchaseCountry: String?
    public var purchaseType: String?
    public var redirectURL: String?
    public var shippingDelay: Int?
    public var shippingFirstName: String?
    public var shippingLastName: String?

    public init(backgroundImageURL: String? = nil, clientToken: String? = nil, firstName: String? = nil, lastName: String? = nil, locale: String? = nil, logoURL: String? = nil, pageTitle: String? = nil, payLaterAssetURLsDescriptive: String? = nil, payLaterAssetURLsStandard: String? = nil, payLaterName: String? = nil, payLaterRedirectURL: String? = nil, payNowAssetURLsDescriptive: String? = nil, payNowAssetURLsStandard: String? = nil, payNowName: String? = nil, payNowRedirectURL: String? = nil, payOverTimeAssetURLsDescriptive: String? = nil, payOverTimeAssetURLsStandard: String? = nil, payOverTimeName: String? = nil, payOverTimeRedirectURL: String? = nil, paymentMethodCategories: String? = nil, purchaseCountry: String? = nil, purchaseType: String? = nil, redirectURL: String? = nil, shippingDelay: Int? = nil, shippingFirstName: String? = nil, shippingLastName: String? = nil) {
        self.backgroundImageURL = backgroundImageURL
        self.clientToken = clientToken
        self.firstName = firstName
        self.lastName = lastName
        self.locale = locale
        self.logoURL = logoURL
        self.pageTitle = pageTitle
        self.payLaterAssetURLsDescriptive = payLaterAssetURLsDescriptive
        self.payLaterAssetURLsStandard = payLaterAssetURLsStandard
        self.payLaterName = payLaterName
        self.payLaterRedirectURL = payLaterRedirectURL
        self.payNowAssetURLsDescriptive = payNowAssetURLsDescriptive
        self.payNowAssetURLsStandard = payNowAssetURLsStandard
        self.payNowName = payNowName
        self.payNowRedirectURL = payNowRedirectURL
        self.payOverTimeAssetURLsDescriptive = payOverTimeAssetURLsDescriptive
        self.payOverTimeAssetURLsStandard = payOverTimeAssetURLsStandard
        self.payOverTimeName = payOverTimeName
        self.payOverTimeRedirectURL = payOverTimeRedirectURL
        self.paymentMethodCategories = paymentMethodCategories
        self.purchaseCountry = purchaseCountry
        self.purchaseType = purchaseType
        self.redirectURL = redirectURL
        self.shippingDelay = shippingDelay
        self.shippingFirstName = shippingFirstName
        self.shippingLastName = shippingLastName
    }

    private enum CodingKeys: String, CodingKey {
        case backgroundImageURL = "background_image_url"
        case clientToken = "client_token"
        case firstName = "first_name"
        case lastName = "last_name"
        case locale
        case logoURL = "logo_url"
        case pageTitle = "page_title"
        case payLaterAssetURLsDescriptive = "pay_later_asset_urls_descriptive"
        case payLaterAssetURLsStandard = "pay_later_asset_urls_standard"
        case payLaterName = "pay_later_name"
        case payLaterRedirectURL = "pay_later_redirect_url"
        case payNowAssetURLsDescriptive = "pay_now_asset_urls_descriptive"
        case payNowAssetURLsStandard = "pay_now_asset_urls_standard"
        case payNowName = "pay_now_name"
        case payNowRedirectURL = "pay_now_redirect_url"
        case payOverTimeAssetURLsDescriptive = "pay_over_time_asset_urls_descriptive"
        case payOverTimeAssetURLsStandard = "pay_over_time_asset_urls_standard"
        case payOverTimeName = "pay_over_time_name"
        case payOverTimeRedirectURL = "pay_over_time_redirect_url"
        case paymentMethodCategories = "payment_method_categories"
        case purchaseCountry = "purchase_country"
        case purchaseType = "purchase_type"
        case redirectURL = "redirect_url"
        case shippingDelay = "shipping_delay"
        case shippingFirstName = "shipping_first_name"
        case shippingLastName = "shipping_last_name"
    }
}

public struct SourceTypeMultibanco: Codable {
    public var entity: String?
    public var reference: String?
    public var refundAccountHolderAddressCity: String?
    public var refundAccountHolderAddressCountry: String?
    public var refundAccountHolderAddressLine1: String?
    public var refundAccountHolderAddressLine2: String?
    public var refundAccountHolderAddressPostalCode: String?
    public var refundAccountHolderAddressState: String?
    public var refundAccountHolderName: String?
    public var refundIban: String?

    public init(entity: String? = nil, reference: String? = nil, refundAccountHolderAddressCity: String? = nil, refundAccountHolderAddressCountry: String? = nil, refundAccountHolderAddressLine1: String? = nil, refundAccountHolderAddressLine2: String? = nil, refundAccountHolderAddressPostalCode: String? = nil, refundAccountHolderAddressState: String? = nil, refundAccountHolderName: String? = nil, refundIban: String? = nil) {
        self.entity = entity
        self.reference = reference
        self.refundAccountHolderAddressCity = refundAccountHolderAddressCity
        self.refundAccountHolderAddressCountry = refundAccountHolderAddressCountry
        self.refundAccountHolderAddressLine1 = refundAccountHolderAddressLine1
        self.refundAccountHolderAddressLine2 = refundAccountHolderAddressLine2
        self.refundAccountHolderAddressPostalCode = refundAccountHolderAddressPostalCode
        self.refundAccountHolderAddressState = refundAccountHolderAddressState
        self.refundAccountHolderName = refundAccountHolderName
        self.refundIban = refundIban
    }

    private enum CodingKeys: String, CodingKey {
        case entity
        case reference
        case refundAccountHolderAddressCity = "refund_account_holder_address_city"
        case refundAccountHolderAddressCountry = "refund_account_holder_address_country"
        case refundAccountHolderAddressLine1 = "refund_account_holder_address_line1"
        case refundAccountHolderAddressLine2 = "refund_account_holder_address_line2"
        case refundAccountHolderAddressPostalCode = "refund_account_holder_address_postal_code"
        case refundAccountHolderAddressState = "refund_account_holder_address_state"
        case refundAccountHolderName = "refund_account_holder_name"
        case refundIban = "refund_iban"
    }
}

public struct SourceTypeP24: Codable {
    public var reference: String?

    public init(reference: String? = nil) {
        self.reference = reference
    }
}

public struct SourceTypeSepaDebit: Codable {
    public var bankCode: String?
    public var branchCode: String?
    public var country: String?
    public var fingerprint: String?
    public var last4: String?
    public var mandateReference: String?
    public var mandateURL: String?

    public init(bankCode: String? = nil, branchCode: String? = nil, country: String? = nil, fingerprint: String? = nil, last4: String? = nil, mandateReference: String? = nil, mandateURL: String? = nil) {
        self.bankCode = bankCode
        self.branchCode = branchCode
        self.country = country
        self.fingerprint = fingerprint
        self.last4 = last4
        self.mandateReference = mandateReference
        self.mandateURL = mandateURL
    }

    private enum CodingKeys: String, CodingKey {
        case bankCode = "bank_code"
        case branchCode = "branch_code"
        case country
        case fingerprint
        case last4
        case mandateReference = "mandate_reference"
        case mandateURL = "mandate_url"
    }
}

public struct SourceTypeSofort: Codable {
    public var bankCode: String?
    public var bankName: String?
    public var bic: String?
    public var country: String?
    public var ibanLast4: String?
    public var preferredLanguage: String?
    public var statementDescriptor: String?

    public init(bankCode: String? = nil, bankName: String? = nil, bic: String? = nil, country: String? = nil, ibanLast4: String? = nil, preferredLanguage: String? = nil, statementDescriptor: String? = nil) {
        self.bankCode = bankCode
        self.bankName = bankName
        self.bic = bic
        self.country = country
        self.ibanLast4 = ibanLast4
        self.preferredLanguage = preferredLanguage
        self.statementDescriptor = statementDescriptor
    }

    private enum CodingKeys: String, CodingKey {
        case bankCode = "bank_code"
        case bankName = "bank_name"
        case bic
        case country
        case ibanLast4 = "iban_last4"
        case preferredLanguage = "preferred_language"
        case statementDescriptor = "statement_descriptor"
    }
}

public struct SourceTypeThreeDSecure: Codable {
    public var addressLine1Check: String?
    public var addressZipCheck: String?
    public var isAuthenticated: Bool?
    public var brand: String?
    public var card: String?
    public var country: String?
    public var customer: String?
    public var cvcCheck: String?
    public var dynamicLast4: String?
    public var expMonth: Int?
    public var expYear: Int?
    public var fingerprint: String?
    public var funding: String?
    public var last4: String?
    public var name: String?
    public var threeDSecure: String?
    public var tokenizationMethod: String?

    public init(addressLine1Check: String? = nil, addressZipCheck: String? = nil, isAuthenticated: Bool? = nil, brand: String? = nil, card: String? = nil, country: String? = nil, customer: String? = nil, cvcCheck: String? = nil, dynamicLast4: String? = nil, expMonth: Int? = nil, expYear: Int? = nil, fingerprint: String? = nil, funding: String? = nil, last4: String? = nil, name: String? = nil, threeDSecure: String? = nil, tokenizationMethod: String? = nil) {
        self.addressLine1Check = addressLine1Check
        self.addressZipCheck = addressZipCheck
        self.isAuthenticated = isAuthenticated
        self.brand = brand
        self.card = card
        self.country = country
        self.customer = customer
        self.cvcCheck = cvcCheck
        self.dynamicLast4 = dynamicLast4
        self.expMonth = expMonth
        self.expYear = expYear
        self.fingerprint = fingerprint
        self.funding = funding
        self.last4 = last4
        self.name = name
        self.threeDSecure = threeDSecure
        self.tokenizationMethod = tokenizationMethod
    }

    private enum CodingKeys: String, CodingKey {
        case addressLine1Check = "address_line1_check"
        case addressZipCheck = "address_zip_check"
        case isAuthenticated = "authenticated"
        case brand
        case card
        case country
        case customer
        case cvcCheck = "cvc_check"
        case dynamicLast4 = "dynamic_last4"
        case expMonth = "exp_month"
        case expYear = "exp_year"
        case fingerprint
        case funding
        case last4
        case name
        case threeDSecure = "three_d_secure"
        case tokenizationMethod = "tokenization_method"
    }
}

public struct SourceTypeWechat: Codable {
    public var prepayID: String?
    public var qrCodeURL: String?
    public var statementDescriptor: String?

    public init(prepayID: String? = nil, qrCodeURL: String? = nil, statementDescriptor: String? = nil) {
        self.prepayID = prepayID
        self.qrCodeURL = qrCodeURL
        self.statementDescriptor = statementDescriptor
    }

    private enum CodingKeys: String, CodingKey {
        case prepayID = "prepay_id"
        case qrCodeURL = "qr_code_url"
        case statementDescriptor = "statement_descriptor"
    }
}

public struct StatusTransitions: Codable {
    /// The time that the order was canceled.
    public var canceled: Int?
    /// The time that the order was fulfilled.
    public var fulfiled: Int?
    /// The time that the order was paid.
    public var paid: Int?
    /// The time that the order was returned.
    public var returned: Int?

    public init(canceled: Int? = nil, fulfiled: Int? = nil, paid: Int? = nil, returned: Int? = nil) {
        self.canceled = canceled
        self.fulfiled = fulfiled
        self.paid = paid
        self.returned = returned
    }
}

/// Subscriptions allow you to charge a customer on a recurring basis.
/// 
/// Related guide: [Creating Subscriptions](https://stripe.com/docs/billing/subscriptions/creating).
public struct Subscription: Codable {
    /// A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account.
    public var applicationFeePercent: Double?
    /// SubscriptionAutomaticTax
    public var automaticTax: SubscriptionAutomaticTax
    /// Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.
    public var billingCycleAnchor: Int
    /// Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
    public var billingThresholds: BillingThresholds?
    /// A date in the future at which the subscription will automatically get canceled
    public var cancelAt: Int?
    /// If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.
    public var isCancelAtPeriodEnd: Bool
    /// If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
    public var canceledAt: Int?
    /// Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
    public var collectionMethod: CollectionMethod
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
    public var currentPeriodEnd: Int
    /// Start of the current period that the subscription has been invoiced for.
    public var currentPeriodStart: Int
    /// ID of the customer who owns the subscription.
    public var customer: Customer
    /// Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`.
    public var daysUntilDue: Int?
    /// ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
    public var defaultPaymentMethod: DefaultPaymentMethod?
    /// ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
    public var defaultSource: DefaultSource?
    /// The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription.
    public var defaultTaxRates: [TaxRate]?
    /// Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis.
    public var discount: Discount?
    /// If the subscription has ended, the date the subscription ended.
    public var endedAt: Int?
    /// Unique identifier for the object.
    public var id: String
    /// SubscriptionItemList
    ///
    /// List of subscription items, each with an attached price.
    public var items: Items
    /// The most recent invoice this subscription has generated.
    public var latestInvoice: LatestInvoice?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`.
    public var nextPendingInvoiceItemInvoice: Int?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// If specified, payment collection for this subscription will be paused.
    public var pauseCollection: PauseCollection?
    /// Payment settings passed on to invoices created by the subscription.
    public var paymentSettings: PaymentSettings?
    /// Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval.
    public var pendingInvoiceItemInterval: PendingInvoiceItemInterval?
    /// You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription's payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2).
    public var pendingSetupIntent: PendingSetupIntent?
    /// If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid.
    public var pendingUpdate: PendingUpdate?
    /// The schedule attached to the subscription
    public var schedule: Schedule?
    /// Date when the subscription was first created. The date might differ from the `created` date due to backdating.
    public var startDate: Int
    /// Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`. 
    /// 
    /// For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated. 
    /// 
    /// A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over. 
    /// 
    /// If subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts. 
    /// 
    /// If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
    public var status: Status
    /// The account (if any) the subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
    public var transferData: TransferData?
    /// If the subscription has a trial, the end of that trial.
    public var trialEnd: Int?
    /// If the subscription has a trial, the beginning of that trial.
    public var trialStart: Int?

    /// Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
    public struct BillingThresholds: Codable {
        public var subscriptionBillingThresholds: SubscriptionBillingThresholds?

        public init(subscriptionBillingThresholds: SubscriptionBillingThresholds? = nil) {
            self.subscriptionBillingThresholds = subscriptionBillingThresholds
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.subscriptionBillingThresholds = try? container.decode(SubscriptionBillingThresholds.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = subscriptionBillingThresholds { try container.encode(value) }
        }
    }

    /// Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
    public enum CollectionMethod: String, Codable, CaseIterable {
        case chargeAutomatically = "charge_automatically"
        case sendInvoice = "send_invoice"
    }

    /// ID of the customer who owns the subscription.
    public final class Customer: Codable {
        public var string: String?
        public var customer: StripeAPI.Customer?
        public var deletedCustomer: DeletedCustomer?

        public init(string: String? = nil, customer: StripeAPI.Customer? = nil, deletedCustomer: DeletedCustomer? = nil) {
            self.string = string
            self.customer = customer
            self.deletedCustomer = deletedCustomer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeAPI.Customer.self)
            self.deletedCustomer = try? container.decode(DeletedCustomer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
            if let value = deletedCustomer { try container.encode(value) }
        }
    }

    /// ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
    public struct DefaultPaymentMethod: Codable {
        public var string: String?
        public var paymentMethod: PaymentMethod?

        public init(string: String? = nil, paymentMethod: PaymentMethod? = nil) {
            self.string = string
            self.paymentMethod = paymentMethod
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentMethod = try? container.decode(PaymentMethod.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentMethod { try container.encode(value) }
        }
    }

    /// ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
    public struct DefaultSource: Codable {
        public var string: String?
        public var alipayAccount: AlipayAccount?
        public var bankAccount: BankAccount?
        public var bitcoinReceiver: BitcoinReceiver?
        public var card: Card?
        /// `Source` objects allow you to accept a variety of payment methods. They
        /// represent a customer's payment instrument, and can be used with the Stripe API
        /// just like a `Card` object: once chargeable, they can be charged, or can be
        /// attached to customers.
        /// 
        /// Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
        public var source: Source?

        public init(string: String? = nil, alipayAccount: AlipayAccount? = nil, bankAccount: BankAccount? = nil, bitcoinReceiver: BitcoinReceiver? = nil, card: Card? = nil, source: Source? = nil) {
            self.string = string
            self.alipayAccount = alipayAccount
            self.bankAccount = bankAccount
            self.bitcoinReceiver = bitcoinReceiver
            self.card = card
            self.source = source
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.alipayAccount = try? container.decode(AlipayAccount.self)
            self.bankAccount = try? container.decode(BankAccount.self)
            self.bitcoinReceiver = try? container.decode(BitcoinReceiver.self)
            self.card = try? container.decode(Card.self)
            self.source = try? container.decode(Source.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = alipayAccount { try container.encode(value) }
            if let value = bankAccount { try container.encode(value) }
            if let value = bitcoinReceiver { try container.encode(value) }
            if let value = card { try container.encode(value) }
            if let value = source { try container.encode(value) }
        }
    }

    /// Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis.
    public final class Discount: Codable {
        public var discount: StripeAPI.Discount?

        public init(discount: StripeAPI.Discount? = nil) {
            self.discount = discount
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.discount = try? container.decode(StripeAPI.Discount.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = discount { try container.encode(value) }
        }
    }

    /// SubscriptionItemList
    ///
    /// List of subscription items, each with an attached price.
    public struct Items: Codable {
        /// Details about each object.
        public var data: [SubscriptionItem]
        /// True if this list has another page of items after this one that can be fetched.
        public var hasMore: Bool
        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public var object: Object
        /// The URL where this list can be accessed.
        public var url: String

        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public enum Object: String, Codable, CaseIterable {
            case list
        }

        public init(data: [SubscriptionItem], hasMore: Bool, object: Object, url: String) {
            self.data = data
            self.hasMore = hasMore
            self.object = object
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case data
            case hasMore = "has_more"
            case object
            case url
        }
    }

    /// The most recent invoice this subscription has generated.
    public struct LatestInvoice: Codable {
        public var string: String?
        public var invoice: Invoice?

        public init(string: String? = nil, invoice: Invoice? = nil) {
            self.string = string
            self.invoice = invoice
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.invoice = try? container.decode(Invoice.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = invoice { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case subscription
    }

    /// If specified, payment collection for this subscription will be paused.
    public struct PauseCollection: Codable {
        /// The Pause Collection settings determine how we will pause collection for this subscription and for how long the subscription
        /// should be paused.
        public var subscriptionsResourcePauseCollection: SubscriptionsResourcePauseCollection?

        public init(subscriptionsResourcePauseCollection: SubscriptionsResourcePauseCollection? = nil) {
            self.subscriptionsResourcePauseCollection = subscriptionsResourcePauseCollection
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.subscriptionsResourcePauseCollection = try? container.decode(SubscriptionsResourcePauseCollection.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = subscriptionsResourcePauseCollection { try container.encode(value) }
        }
    }

    /// Payment settings passed on to invoices created by the subscription.
    public struct PaymentSettings: Codable {
        public var subscriptionsResourcePaymentSettings: SubscriptionsResourcePaymentSettings?

        public init(subscriptionsResourcePaymentSettings: SubscriptionsResourcePaymentSettings? = nil) {
            self.subscriptionsResourcePaymentSettings = subscriptionsResourcePaymentSettings
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.subscriptionsResourcePaymentSettings = try? container.decode(SubscriptionsResourcePaymentSettings.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = subscriptionsResourcePaymentSettings { try container.encode(value) }
        }
    }

    /// Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval.
    public struct PendingInvoiceItemInterval: Codable {
        public var subscriptionPendingInvoiceItemInterval: SubscriptionPendingInvoiceItemInterval?

        public init(subscriptionPendingInvoiceItemInterval: SubscriptionPendingInvoiceItemInterval? = nil) {
            self.subscriptionPendingInvoiceItemInterval = subscriptionPendingInvoiceItemInterval
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.subscriptionPendingInvoiceItemInterval = try? container.decode(SubscriptionPendingInvoiceItemInterval.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = subscriptionPendingInvoiceItemInterval { try container.encode(value) }
        }
    }

    /// You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription's payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2).
    public struct PendingSetupIntent: Codable {
        public var string: String?
        public var setupIntent: SetupIntent?

        public init(string: String? = nil, setupIntent: SetupIntent? = nil) {
            self.string = string
            self.setupIntent = setupIntent
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.setupIntent = try? container.decode(SetupIntent.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = setupIntent { try container.encode(value) }
        }
    }

    /// If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid.
    public struct PendingUpdate: Codable {
        /// Pending Updates store the changes pending from a previous update that will be applied
        /// to the Subscription upon successful payment.
        public var subscriptionsResourcePendingUpdate: SubscriptionsResourcePendingUpdate?

        public init(subscriptionsResourcePendingUpdate: SubscriptionsResourcePendingUpdate? = nil) {
            self.subscriptionsResourcePendingUpdate = subscriptionsResourcePendingUpdate
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.subscriptionsResourcePendingUpdate = try? container.decode(SubscriptionsResourcePendingUpdate.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = subscriptionsResourcePendingUpdate { try container.encode(value) }
        }
    }

    /// The schedule attached to the subscription
    public struct Schedule: Codable {
        public var string: String?
        public var subscriptionSchedule: SubscriptionSchedule?

        public init(string: String? = nil, subscriptionSchedule: SubscriptionSchedule? = nil) {
            self.string = string
            self.subscriptionSchedule = subscriptionSchedule
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.subscriptionSchedule = try? container.decode(SubscriptionSchedule.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = subscriptionSchedule { try container.encode(value) }
        }
    }

    /// Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`. 
    /// 
    /// For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated. 
    /// 
    /// A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over. 
    /// 
    /// If subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts. 
    /// 
    /// If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
    public enum Status: String, Codable, CaseIterable {
        case active
        case canceled
        case incomplete
        case incompleteExpired = "incomplete_expired"
        case pastDue = "past_due"
        case trialing
        case unpaid
    }

    /// The account (if any) the subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
    public struct TransferData: Codable {
        public var subscriptionTransferData: SubscriptionTransferData?

        public init(subscriptionTransferData: SubscriptionTransferData? = nil) {
            self.subscriptionTransferData = subscriptionTransferData
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.subscriptionTransferData = try? container.decode(SubscriptionTransferData.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = subscriptionTransferData { try container.encode(value) }
        }
    }

    public init(applicationFeePercent: Double? = nil, automaticTax: SubscriptionAutomaticTax, billingCycleAnchor: Int, billingThresholds: BillingThresholds? = nil, cancelAt: Int? = nil, isCancelAtPeriodEnd: Bool, canceledAt: Int? = nil, collectionMethod: CollectionMethod, created: Int, currentPeriodEnd: Int, currentPeriodStart: Int, customer: Customer, daysUntilDue: Int? = nil, defaultPaymentMethod: DefaultPaymentMethod? = nil, defaultSource: DefaultSource? = nil, defaultTaxRates: [TaxRate]? = nil, discount: Discount? = nil, endedAt: Int? = nil, id: String, items: Items, latestInvoice: LatestInvoice? = nil, isLivemode: Bool, metadata: [String: String], nextPendingInvoiceItemInvoice: Int? = nil, object: Object, pauseCollection: PauseCollection? = nil, paymentSettings: PaymentSettings? = nil, pendingInvoiceItemInterval: PendingInvoiceItemInterval? = nil, pendingSetupIntent: PendingSetupIntent? = nil, pendingUpdate: PendingUpdate? = nil, schedule: Schedule? = nil, startDate: Int, status: Status, transferData: TransferData? = nil, trialEnd: Int? = nil, trialStart: Int? = nil) {
        self.applicationFeePercent = applicationFeePercent
        self.automaticTax = automaticTax
        self.billingCycleAnchor = billingCycleAnchor
        self.billingThresholds = billingThresholds
        self.cancelAt = cancelAt
        self.isCancelAtPeriodEnd = isCancelAtPeriodEnd
        self.canceledAt = canceledAt
        self.collectionMethod = collectionMethod
        self.created = created
        self.currentPeriodEnd = currentPeriodEnd
        self.currentPeriodStart = currentPeriodStart
        self.customer = customer
        self.daysUntilDue = daysUntilDue
        self.defaultPaymentMethod = defaultPaymentMethod
        self.defaultSource = defaultSource
        self.defaultTaxRates = defaultTaxRates
        self.discount = discount
        self.endedAt = endedAt
        self.id = id
        self.items = items
        self.latestInvoice = latestInvoice
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.nextPendingInvoiceItemInvoice = nextPendingInvoiceItemInvoice
        self.object = object
        self.pauseCollection = pauseCollection
        self.paymentSettings = paymentSettings
        self.pendingInvoiceItemInterval = pendingInvoiceItemInterval
        self.pendingSetupIntent = pendingSetupIntent
        self.pendingUpdate = pendingUpdate
        self.schedule = schedule
        self.startDate = startDate
        self.status = status
        self.transferData = transferData
        self.trialEnd = trialEnd
        self.trialStart = trialStart
    }

    private enum CodingKeys: String, CodingKey {
        case applicationFeePercent = "application_fee_percent"
        case automaticTax = "automatic_tax"
        case billingCycleAnchor = "billing_cycle_anchor"
        case billingThresholds = "billing_thresholds"
        case cancelAt = "cancel_at"
        case isCancelAtPeriodEnd = "cancel_at_period_end"
        case canceledAt = "canceled_at"
        case collectionMethod = "collection_method"
        case created
        case currentPeriodEnd = "current_period_end"
        case currentPeriodStart = "current_period_start"
        case customer
        case daysUntilDue = "days_until_due"
        case defaultPaymentMethod = "default_payment_method"
        case defaultSource = "default_source"
        case defaultTaxRates = "default_tax_rates"
        case discount
        case endedAt = "ended_at"
        case id
        case items
        case latestInvoice = "latest_invoice"
        case isLivemode = "livemode"
        case metadata
        case nextPendingInvoiceItemInvoice = "next_pending_invoice_item_invoice"
        case object
        case pauseCollection = "pause_collection"
        case paymentSettings = "payment_settings"
        case pendingInvoiceItemInterval = "pending_invoice_item_interval"
        case pendingSetupIntent = "pending_setup_intent"
        case pendingUpdate = "pending_update"
        case schedule
        case startDate = "start_date"
        case status
        case transferData = "transfer_data"
        case trialEnd = "trial_end"
        case trialStart = "trial_start"
    }
}

public struct SubscriptionAutomaticTax: Codable {
    /// Whether Stripe automatically computes tax on this subscription.
    public var isEnabled: Bool

    public init(isEnabled: Bool) {
        self.isEnabled = isEnabled
    }

    private enum CodingKeys: String, CodingKey {
        case isEnabled = "enabled"
    }
}

public struct SubscriptionBillingThresholds: Codable {
    /// Monetary threshold that triggers the subscription to create an invoice
    public var amountGte: Int?
    /// Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`.
    public var isResetBillingCycleAnchor: Bool?

    public init(amountGte: Int? = nil, isResetBillingCycleAnchor: Bool? = nil) {
        self.amountGte = amountGte
        self.isResetBillingCycleAnchor = isResetBillingCycleAnchor
    }

    private enum CodingKeys: String, CodingKey {
        case amountGte = "amount_gte"
        case isResetBillingCycleAnchor = "reset_billing_cycle_anchor"
    }
}

/// Subscription items allow you to create customer subscriptions with more than
/// one plan, making it easy to represent complex billing relationships.
public struct SubscriptionItem: Codable {
    /// Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period
    public var billingThresholds: BillingThresholds?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Unique identifier for the object.
    public var id: String
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
    /// [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
    /// 
    /// For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.
    /// 
    /// Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/billing/prices-guide).
    public var price: Price
    /// The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed.
    public var quantity: Int?
    /// The `subscription` this `subscription_item` belongs to.
    public var subscription: String
    /// The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`.
    public var taxRates: [TaxRate]?

    /// Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period
    public struct BillingThresholds: Codable {
        public var subscriptionItemBillingThresholds: SubscriptionItemBillingThresholds?

        public init(subscriptionItemBillingThresholds: SubscriptionItemBillingThresholds? = nil) {
            self.subscriptionItemBillingThresholds = subscriptionItemBillingThresholds
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.subscriptionItemBillingThresholds = try? container.decode(SubscriptionItemBillingThresholds.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = subscriptionItemBillingThresholds { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case subscriptionItem = "subscription_item"
    }

    public init(billingThresholds: BillingThresholds? = nil, created: Int, id: String, metadata: [String: String], object: Object, price: Price, quantity: Int? = nil, subscription: String, taxRates: [TaxRate]? = nil) {
        self.billingThresholds = billingThresholds
        self.created = created
        self.id = id
        self.metadata = metadata
        self.object = object
        self.price = price
        self.quantity = quantity
        self.subscription = subscription
        self.taxRates = taxRates
    }

    private enum CodingKeys: String, CodingKey {
        case billingThresholds = "billing_thresholds"
        case created
        case id
        case metadata
        case object
        case price
        case quantity
        case subscription
        case taxRates = "tax_rates"
    }
}

public struct SubscriptionItemBillingThresholds: Codable {
    /// Usage threshold that triggers the subscription to create an invoice
    public var usageGte: Int?

    public init(usageGte: Int? = nil) {
        self.usageGte = usageGte
    }

    private enum CodingKeys: String, CodingKey {
        case usageGte = "usage_gte"
    }
}

/// Subscription_payment_method_options_card
public struct SubscriptionPaymentMethodOptionsCard: Codable {
    /// We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
    public var requestThreeDSecure: RequestThreeDSecure?

    /// We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
    public enum RequestThreeDSecure: String, Codable, CaseIterable {
        case any
        case automatic
    }

    public init(requestThreeDSecure: RequestThreeDSecure? = nil) {
        self.requestThreeDSecure = requestThreeDSecure
    }

    private enum CodingKeys: String, CodingKey {
        case requestThreeDSecure = "request_three_d_secure"
    }
}

public struct SubscriptionPendingInvoiceItemInterval: Codable {
    /// Specifies invoicing frequency. Either `day`, `week`, `month` or `year`.
    public var interval: Interval
    /// The number of intervals between invoices. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).
    public var intervalCount: Int

    /// Specifies invoicing frequency. Either `day`, `week`, `month` or `year`.
    public enum Interval: String, Codable, CaseIterable {
        case day
        case month
        case week
        case year
    }

    public init(interval: Interval, intervalCount: Int) {
        self.interval = interval
        self.intervalCount = intervalCount
    }

    private enum CodingKeys: String, CodingKey {
        case interval
        case intervalCount = "interval_count"
    }
}

/// A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.
/// 
/// Related guide: [Subscription Schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
public struct SubscriptionSchedule: Codable {
    /// Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.
    public var canceledAt: Int?
    /// Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.
    public var completedAt: Int?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`.
    public var currentPhase: CurrentPhase?
    /// ID of the customer who owns the subscription schedule.
    public var customer: Customer
    public var defaultSettings: SubscriptionSchedulesResourceDefaultSettings
    /// Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` and `cancel`.
    public var endBehavior: EndBehavior
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Configuration for the subscription schedule's phases.
    public var phases: [SubscriptionSchedulePhaseConfiguration]
    /// Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.
    public var releasedAt: Int?
    /// ID of the subscription once managed by the subscription schedule (if it is released).
    public var releasedSubscription: String?
    /// The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
    public var status: Status
    /// ID of the subscription managed by the subscription schedule.
    public var subscription: Subscription?

    /// Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`.
    public struct CurrentPhase: Codable {
        public var subscriptionScheduleCurrentPhase: SubscriptionScheduleCurrentPhase?

        public init(subscriptionScheduleCurrentPhase: SubscriptionScheduleCurrentPhase? = nil) {
            self.subscriptionScheduleCurrentPhase = subscriptionScheduleCurrentPhase
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.subscriptionScheduleCurrentPhase = try? container.decode(SubscriptionScheduleCurrentPhase.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = subscriptionScheduleCurrentPhase { try container.encode(value) }
        }
    }

    /// ID of the customer who owns the subscription schedule.
    public final class Customer: Codable {
        public var string: String?
        public var customer: StripeAPI.Customer?
        public var deletedCustomer: DeletedCustomer?

        public init(string: String? = nil, customer: StripeAPI.Customer? = nil, deletedCustomer: DeletedCustomer? = nil) {
            self.string = string
            self.customer = customer
            self.deletedCustomer = deletedCustomer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeAPI.Customer.self)
            self.deletedCustomer = try? container.decode(DeletedCustomer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
            if let value = deletedCustomer { try container.encode(value) }
        }
    }

    /// Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` and `cancel`.
    public enum EndBehavior: String, Codable, CaseIterable {
        case cancel
        case `none`
        case release
        case renew
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case subscriptionSchedule = "subscription_schedule"
    }

    /// The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
    public enum Status: String, Codable, CaseIterable {
        case active
        case canceled
        case completed
        case notStarted = "not_started"
        case released
    }

    /// ID of the subscription managed by the subscription schedule.
    public final class Subscription: Codable {
        public var string: String?
        public var subscription: StripeAPI.Subscription?

        public init(string: String? = nil, subscription: StripeAPI.Subscription? = nil) {
            self.string = string
            self.subscription = subscription
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.subscription = try? container.decode(StripeAPI.Subscription.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = subscription { try container.encode(value) }
        }
    }

    public init(canceledAt: Int? = nil, completedAt: Int? = nil, created: Int, currentPhase: CurrentPhase? = nil, customer: Customer, defaultSettings: SubscriptionSchedulesResourceDefaultSettings, endBehavior: EndBehavior, id: String, isLivemode: Bool, metadata: [String: String]? = nil, object: Object, phases: [SubscriptionSchedulePhaseConfiguration], releasedAt: Int? = nil, releasedSubscription: String? = nil, status: Status, subscription: Subscription? = nil) {
        self.canceledAt = canceledAt
        self.completedAt = completedAt
        self.created = created
        self.currentPhase = currentPhase
        self.customer = customer
        self.defaultSettings = defaultSettings
        self.endBehavior = endBehavior
        self.id = id
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.phases = phases
        self.releasedAt = releasedAt
        self.releasedSubscription = releasedSubscription
        self.status = status
        self.subscription = subscription
    }

    private enum CodingKeys: String, CodingKey {
        case canceledAt = "canceled_at"
        case completedAt = "completed_at"
        case created
        case currentPhase = "current_phase"
        case customer
        case defaultSettings = "default_settings"
        case endBehavior = "end_behavior"
        case id
        case isLivemode = "livemode"
        case metadata
        case object
        case phases
        case releasedAt = "released_at"
        case releasedSubscription = "released_subscription"
        case status
        case subscription
    }
}

/// An Add Invoice Item describes the prices and quantities that will be added as pending invoice items when entering a phase.
public struct SubscriptionScheduleAddInvoiceItem: Codable {
    /// ID of the price used to generate the invoice item.
    public var price: Price
    /// The quantity of the invoice item.
    public var quantity: Int?
    /// The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item.
    public var taxRates: [TaxRate]?

    /// ID of the price used to generate the invoice item.
    public final class Price: Codable {
        public var string: String?
        /// Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
        /// [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
        /// 
        /// For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.
        /// 
        /// Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/billing/prices-guide).
        public var price: StripeAPI.Price?
        public var deletedPrice: DeletedPrice?

        public init(string: String? = nil, price: StripeAPI.Price? = nil, deletedPrice: DeletedPrice? = nil) {
            self.string = string
            self.price = price
            self.deletedPrice = deletedPrice
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.price = try? container.decode(StripeAPI.Price.self)
            self.deletedPrice = try? container.decode(DeletedPrice.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = price { try container.encode(value) }
            if let value = deletedPrice { try container.encode(value) }
        }
    }

    public init(price: Price, quantity: Int? = nil, taxRates: [TaxRate]? = nil) {
        self.price = price
        self.quantity = quantity
        self.taxRates = taxRates
    }

    private enum CodingKeys: String, CodingKey {
        case price
        case quantity
        case taxRates = "tax_rates"
    }
}

/// A phase item describes the price and quantity of a phase.
public struct SubscriptionScheduleConfigurationItem: Codable {
    /// Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period
    public var billingThresholds: BillingThresholds?
    /// ID of the price to which the customer should be subscribed.
    public var price: Price
    /// Quantity of the plan to which the customer should be subscribed.
    public var quantity: Int?
    /// The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`.
    public var taxRates: [TaxRate]?

    /// Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period
    public struct BillingThresholds: Codable {
        public var subscriptionItemBillingThresholds: SubscriptionItemBillingThresholds?

        public init(subscriptionItemBillingThresholds: SubscriptionItemBillingThresholds? = nil) {
            self.subscriptionItemBillingThresholds = subscriptionItemBillingThresholds
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.subscriptionItemBillingThresholds = try? container.decode(SubscriptionItemBillingThresholds.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = subscriptionItemBillingThresholds { try container.encode(value) }
        }
    }

    /// ID of the price to which the customer should be subscribed.
    public final class Price: Codable {
        public var string: String?
        /// Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
        /// [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
        /// 
        /// For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.
        /// 
        /// Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/billing/prices-guide).
        public var price: StripeAPI.Price?
        public var deletedPrice: DeletedPrice?

        public init(string: String? = nil, price: StripeAPI.Price? = nil, deletedPrice: DeletedPrice? = nil) {
            self.string = string
            self.price = price
            self.deletedPrice = deletedPrice
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.price = try? container.decode(StripeAPI.Price.self)
            self.deletedPrice = try? container.decode(DeletedPrice.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = price { try container.encode(value) }
            if let value = deletedPrice { try container.encode(value) }
        }
    }

    public init(billingThresholds: BillingThresholds? = nil, price: Price, quantity: Int? = nil, taxRates: [TaxRate]? = nil) {
        self.billingThresholds = billingThresholds
        self.price = price
        self.quantity = quantity
        self.taxRates = taxRates
    }

    private enum CodingKeys: String, CodingKey {
        case billingThresholds = "billing_thresholds"
        case price
        case quantity
        case taxRates = "tax_rates"
    }
}

public struct SubscriptionScheduleCurrentPhase: Codable {
    /// The end of this phase of the subscription schedule.
    public var endDate: Int
    /// The start of this phase of the subscription schedule.
    public var startDate: Int

    public init(endDate: Int, startDate: Int) {
        self.endDate = endDate
        self.startDate = startDate
    }

    private enum CodingKeys: String, CodingKey {
        case endDate = "end_date"
        case startDate = "start_date"
    }
}

/// A phase describes the plans, coupon, and trialing status of a subscription for a predefined time period.
public struct SubscriptionSchedulePhaseConfiguration: Codable {
    /// A list of prices and quantities that will generate invoice items appended to the first invoice for this phase.
    public var addInvoiceItems: [SubscriptionScheduleAddInvoiceItem]
    /// A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule.
    public var applicationFeePercent: Double?
    /// SchedulesPhaseAutomaticTax
    public var automaticTax: SchedulesPhaseAutomaticTax?
    /// Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
    public var billingCycleAnchor: BillingCycleAnchor?
    /// Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
    public var billingThresholds: BillingThresholds?
    /// Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
    public var collectionMethod: CollectionMethod?
    /// ID of the coupon to use during this phase of the subscription schedule.
    public var coupon: Coupon?
    /// ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
    public var defaultPaymentMethod: DefaultPaymentMethod?
    /// The default tax rates to apply to the subscription during this phase of the subscription schedule.
    public var defaultTaxRates: [TaxRate]?
    /// The end of this phase of the subscription schedule.
    public var endDate: Int
    /// The invoice settings applicable during this phase.
    public var invoiceSettings: InvoiceSettings?
    /// Subscription items to configure the subscription to during this phase of the subscription schedule.
    public var items: [SubscriptionScheduleConfigurationItem]
    /// If the subscription schedule will prorate when transitioning to this phase. Possible values are `create_prorations` and `none`.
    public var prorationBehavior: ProrationBehavior
    /// The start of this phase of the subscription schedule.
    public var startDate: Int
    /// The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
    public var transferData: TransferData?
    /// When the trial ends within the phase.
    public var trialEnd: Int?

    /// Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
    public enum BillingCycleAnchor: String, Codable, CaseIterable {
        case automatic
        case phaseStart = "phase_start"
    }

    /// Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
    public struct BillingThresholds: Codable {
        public var subscriptionBillingThresholds: SubscriptionBillingThresholds?

        public init(subscriptionBillingThresholds: SubscriptionBillingThresholds? = nil) {
            self.subscriptionBillingThresholds = subscriptionBillingThresholds
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.subscriptionBillingThresholds = try? container.decode(SubscriptionBillingThresholds.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = subscriptionBillingThresholds { try container.encode(value) }
        }
    }

    /// Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
    public enum CollectionMethod: String, Codable, CaseIterable {
        case chargeAutomatically = "charge_automatically"
        case sendInvoice = "send_invoice"
    }

    /// ID of the coupon to use during this phase of the subscription schedule.
    public final class Coupon: Codable {
        public var string: String?
        /// A coupon contains information about a percent-off or amount-off discount you
        /// might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
        /// [orders](https://stripe.com/docs/api#create_order_legacy-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
        public var coupon: StripeAPI.Coupon?
        public var deletedCoupon: DeletedCoupon?

        public init(string: String? = nil, coupon: StripeAPI.Coupon? = nil, deletedCoupon: DeletedCoupon? = nil) {
            self.string = string
            self.coupon = coupon
            self.deletedCoupon = deletedCoupon
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.coupon = try? container.decode(StripeAPI.Coupon.self)
            self.deletedCoupon = try? container.decode(DeletedCoupon.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = coupon { try container.encode(value) }
            if let value = deletedCoupon { try container.encode(value) }
        }
    }

    /// ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
    public struct DefaultPaymentMethod: Codable {
        public var string: String?
        public var paymentMethod: PaymentMethod?

        public init(string: String? = nil, paymentMethod: PaymentMethod? = nil) {
            self.string = string
            self.paymentMethod = paymentMethod
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentMethod = try? container.decode(PaymentMethod.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentMethod { try container.encode(value) }
        }
    }

    /// The invoice settings applicable during this phase.
    public struct InvoiceSettings: Codable {
        public var invoiceSettingSubscriptionScheduleSetting: InvoiceSettingSubscriptionScheduleSetting?

        public init(invoiceSettingSubscriptionScheduleSetting: InvoiceSettingSubscriptionScheduleSetting? = nil) {
            self.invoiceSettingSubscriptionScheduleSetting = invoiceSettingSubscriptionScheduleSetting
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.invoiceSettingSubscriptionScheduleSetting = try? container.decode(InvoiceSettingSubscriptionScheduleSetting.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = invoiceSettingSubscriptionScheduleSetting { try container.encode(value) }
        }
    }

    /// If the subscription schedule will prorate when transitioning to this phase. Possible values are `create_prorations` and `none`.
    public enum ProrationBehavior: String, Codable, CaseIterable {
        case alwaysInvoice = "always_invoice"
        case createProrations = "create_prorations"
        case `none`
    }

    /// The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
    public struct TransferData: Codable {
        public var subscriptionTransferData: SubscriptionTransferData?

        public init(subscriptionTransferData: SubscriptionTransferData? = nil) {
            self.subscriptionTransferData = subscriptionTransferData
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.subscriptionTransferData = try? container.decode(SubscriptionTransferData.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = subscriptionTransferData { try container.encode(value) }
        }
    }

    public init(addInvoiceItems: [SubscriptionScheduleAddInvoiceItem], applicationFeePercent: Double? = nil, automaticTax: SchedulesPhaseAutomaticTax? = nil, billingCycleAnchor: BillingCycleAnchor? = nil, billingThresholds: BillingThresholds? = nil, collectionMethod: CollectionMethod? = nil, coupon: Coupon? = nil, defaultPaymentMethod: DefaultPaymentMethod? = nil, defaultTaxRates: [TaxRate]? = nil, endDate: Int, invoiceSettings: InvoiceSettings? = nil, items: [SubscriptionScheduleConfigurationItem], prorationBehavior: ProrationBehavior, startDate: Int, transferData: TransferData? = nil, trialEnd: Int? = nil) {
        self.addInvoiceItems = addInvoiceItems
        self.applicationFeePercent = applicationFeePercent
        self.automaticTax = automaticTax
        self.billingCycleAnchor = billingCycleAnchor
        self.billingThresholds = billingThresholds
        self.collectionMethod = collectionMethod
        self.coupon = coupon
        self.defaultPaymentMethod = defaultPaymentMethod
        self.defaultTaxRates = defaultTaxRates
        self.endDate = endDate
        self.invoiceSettings = invoiceSettings
        self.items = items
        self.prorationBehavior = prorationBehavior
        self.startDate = startDate
        self.transferData = transferData
        self.trialEnd = trialEnd
    }

    private enum CodingKeys: String, CodingKey {
        case addInvoiceItems = "add_invoice_items"
        case applicationFeePercent = "application_fee_percent"
        case automaticTax = "automatic_tax"
        case billingCycleAnchor = "billing_cycle_anchor"
        case billingThresholds = "billing_thresholds"
        case collectionMethod = "collection_method"
        case coupon
        case defaultPaymentMethod = "default_payment_method"
        case defaultTaxRates = "default_tax_rates"
        case endDate = "end_date"
        case invoiceSettings = "invoice_settings"
        case items
        case prorationBehavior = "proration_behavior"
        case startDate = "start_date"
        case transferData = "transfer_data"
        case trialEnd = "trial_end"
    }
}

public struct SubscriptionSchedulesResourceDefaultSettings: Codable {
    /// A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule.
    public var applicationFeePercent: Double?
    /// SubscriptionSchedulesResourceDefaultSettingsAutomaticTax
    public var automaticTax: SubscriptionSchedulesResourceDefaultSettingsAutomaticTax?
    /// Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
    public var billingCycleAnchor: BillingCycleAnchor
    /// Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
    public var billingThresholds: BillingThresholds?
    /// Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
    public var collectionMethod: CollectionMethod?
    /// ID of the default payment method for the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
    public var defaultPaymentMethod: DefaultPaymentMethod?
    /// The subscription schedule's default invoice settings.
    public var invoiceSettings: InvoiceSettings?
    /// The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
    public var transferData: TransferData?

    /// Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
    public enum BillingCycleAnchor: String, Codable, CaseIterable {
        case automatic
        case phaseStart = "phase_start"
    }

    /// Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
    public struct BillingThresholds: Codable {
        public var subscriptionBillingThresholds: SubscriptionBillingThresholds?

        public init(subscriptionBillingThresholds: SubscriptionBillingThresholds? = nil) {
            self.subscriptionBillingThresholds = subscriptionBillingThresholds
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.subscriptionBillingThresholds = try? container.decode(SubscriptionBillingThresholds.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = subscriptionBillingThresholds { try container.encode(value) }
        }
    }

    /// Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
    public enum CollectionMethod: String, Codable, CaseIterable {
        case chargeAutomatically = "charge_automatically"
        case sendInvoice = "send_invoice"
    }

    /// ID of the default payment method for the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
    public struct DefaultPaymentMethod: Codable {
        public var string: String?
        public var paymentMethod: PaymentMethod?

        public init(string: String? = nil, paymentMethod: PaymentMethod? = nil) {
            self.string = string
            self.paymentMethod = paymentMethod
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.paymentMethod = try? container.decode(PaymentMethod.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = paymentMethod { try container.encode(value) }
        }
    }

    /// The subscription schedule's default invoice settings.
    public struct InvoiceSettings: Codable {
        public var invoiceSettingSubscriptionScheduleSetting: InvoiceSettingSubscriptionScheduleSetting?

        public init(invoiceSettingSubscriptionScheduleSetting: InvoiceSettingSubscriptionScheduleSetting? = nil) {
            self.invoiceSettingSubscriptionScheduleSetting = invoiceSettingSubscriptionScheduleSetting
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.invoiceSettingSubscriptionScheduleSetting = try? container.decode(InvoiceSettingSubscriptionScheduleSetting.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = invoiceSettingSubscriptionScheduleSetting { try container.encode(value) }
        }
    }

    /// The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
    public struct TransferData: Codable {
        public var subscriptionTransferData: SubscriptionTransferData?

        public init(subscriptionTransferData: SubscriptionTransferData? = nil) {
            self.subscriptionTransferData = subscriptionTransferData
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.subscriptionTransferData = try? container.decode(SubscriptionTransferData.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = subscriptionTransferData { try container.encode(value) }
        }
    }

    public init(applicationFeePercent: Double? = nil, automaticTax: SubscriptionSchedulesResourceDefaultSettingsAutomaticTax? = nil, billingCycleAnchor: BillingCycleAnchor, billingThresholds: BillingThresholds? = nil, collectionMethod: CollectionMethod? = nil, defaultPaymentMethod: DefaultPaymentMethod? = nil, invoiceSettings: InvoiceSettings? = nil, transferData: TransferData? = nil) {
        self.applicationFeePercent = applicationFeePercent
        self.automaticTax = automaticTax
        self.billingCycleAnchor = billingCycleAnchor
        self.billingThresholds = billingThresholds
        self.collectionMethod = collectionMethod
        self.defaultPaymentMethod = defaultPaymentMethod
        self.invoiceSettings = invoiceSettings
        self.transferData = transferData
    }

    private enum CodingKeys: String, CodingKey {
        case applicationFeePercent = "application_fee_percent"
        case automaticTax = "automatic_tax"
        case billingCycleAnchor = "billing_cycle_anchor"
        case billingThresholds = "billing_thresholds"
        case collectionMethod = "collection_method"
        case defaultPaymentMethod = "default_payment_method"
        case invoiceSettings = "invoice_settings"
        case transferData = "transfer_data"
    }
}

public struct SubscriptionSchedulesResourceDefaultSettingsAutomaticTax: Codable {
    /// Whether Stripe automatically computes tax on invoices created during this phase.
    public var isEnabled: Bool

    public init(isEnabled: Bool) {
        self.isEnabled = isEnabled
    }

    private enum CodingKeys: String, CodingKey {
        case isEnabled = "enabled"
    }
}

public struct SubscriptionTransferData: Codable {
    /// A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
    public var amountPercent: Double?
    /// The account where funds from the payment will be transferred to upon payment success.
    public var destination: Destination

    /// The account where funds from the payment will be transferred to upon payment success.
    public struct Destination: Codable {
        public var string: String?
        public var account: Account?

        public init(string: String? = nil, account: Account? = nil) {
            self.string = string
            self.account = account
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.account = try? container.decode(Account.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = account { try container.encode(value) }
        }
    }

    public init(amountPercent: Double? = nil, destination: Destination) {
        self.amountPercent = amountPercent
        self.destination = destination
    }

    private enum CodingKeys: String, CodingKey {
        case amountPercent = "amount_percent"
        case destination
    }
}

/// The Pause Collection settings determine how we will pause collection for this subscription and for how long the subscription
/// should be paused.
public struct SubscriptionsResourcePauseCollection: Codable {
    /// The payment collection behavior for this subscription while paused. One of `keep_as_draft`, `mark_uncollectible`, or `void`.
    public var behavior: Behavior
    /// The time after which the subscription will resume collecting payments.
    public var resumesAt: Int?

    /// The payment collection behavior for this subscription while paused. One of `keep_as_draft`, `mark_uncollectible`, or `void`.
    public enum Behavior: String, Codable, CaseIterable {
        case keepAsDraft = "keep_as_draft"
        case markUncollectible = "mark_uncollectible"
        case void
    }

    public init(behavior: Behavior, resumesAt: Int? = nil) {
        self.behavior = behavior
        self.resumesAt = resumesAt
    }

    private enum CodingKeys: String, CodingKey {
        case behavior
        case resumesAt = "resumes_at"
    }
}

public struct SubscriptionsResourcePaymentMethodOptions: Codable {
    /// This sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to invoices created by the subscription.
    public var acssDebit: AcssDebit?
    /// This sub-hash contains details about the Bancontact payment method options to pass to invoices created by the subscription.
    public var bancontact: Bancontact?
    /// This sub-hash contains details about the Card payment method options to pass to invoices created by the subscription.
    public var card: Card?

    /// This sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to invoices created by the subscription.
    public struct AcssDebit: Codable {
        /// Invoice_payment_method_options_acss_debit
        public var invoicePaymentMethodOptionsAcssDebit: InvoicePaymentMethodOptionsAcssDebit?

        public init(invoicePaymentMethodOptionsAcssDebit: InvoicePaymentMethodOptionsAcssDebit? = nil) {
            self.invoicePaymentMethodOptionsAcssDebit = invoicePaymentMethodOptionsAcssDebit
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.invoicePaymentMethodOptionsAcssDebit = try? container.decode(InvoicePaymentMethodOptionsAcssDebit.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = invoicePaymentMethodOptionsAcssDebit { try container.encode(value) }
        }
    }

    /// This sub-hash contains details about the Bancontact payment method options to pass to invoices created by the subscription.
    public struct Bancontact: Codable {
        /// Invoice_payment_method_options_bancontact
        public var invoicePaymentMethodOptionsBancontact: InvoicePaymentMethodOptionsBancontact?

        public init(invoicePaymentMethodOptionsBancontact: InvoicePaymentMethodOptionsBancontact? = nil) {
            self.invoicePaymentMethodOptionsBancontact = invoicePaymentMethodOptionsBancontact
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.invoicePaymentMethodOptionsBancontact = try? container.decode(InvoicePaymentMethodOptionsBancontact.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = invoicePaymentMethodOptionsBancontact { try container.encode(value) }
        }
    }

    /// This sub-hash contains details about the Card payment method options to pass to invoices created by the subscription.
    public struct Card: Codable {
        /// Subscription_payment_method_options_card
        public var subscriptionPaymentMethodOptionsCard: SubscriptionPaymentMethodOptionsCard?

        public init(subscriptionPaymentMethodOptionsCard: SubscriptionPaymentMethodOptionsCard? = nil) {
            self.subscriptionPaymentMethodOptionsCard = subscriptionPaymentMethodOptionsCard
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.subscriptionPaymentMethodOptionsCard = try? container.decode(SubscriptionPaymentMethodOptionsCard.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = subscriptionPaymentMethodOptionsCard { try container.encode(value) }
        }
    }

    public init(acssDebit: AcssDebit? = nil, bancontact: Bancontact? = nil, card: Card? = nil) {
        self.acssDebit = acssDebit
        self.bancontact = bancontact
        self.card = card
    }

    private enum CodingKeys: String, CodingKey {
        case acssDebit = "acss_debit"
        case bancontact
        case card
    }
}

public struct SubscriptionsResourcePaymentSettings: Codable {
    /// Payment-method-specific configuration to provide to invoices created by the subscription.
    public var paymentMethodOptions: PaymentMethodOptions?
    /// The list of payment method types to provide to every invoice created by the subscription. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).
    public var paymentMethodTypes: [PaymentMethodType]?

    /// Payment-method-specific configuration to provide to invoices created by the subscription.
    public struct PaymentMethodOptions: Codable {
        public var subscriptionsResourcePaymentMethodOptions: SubscriptionsResourcePaymentMethodOptions?

        public init(subscriptionsResourcePaymentMethodOptions: SubscriptionsResourcePaymentMethodOptions? = nil) {
            self.subscriptionsResourcePaymentMethodOptions = subscriptionsResourcePaymentMethodOptions
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.subscriptionsResourcePaymentMethodOptions = try? container.decode(SubscriptionsResourcePaymentMethodOptions.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = subscriptionsResourcePaymentMethodOptions { try container.encode(value) }
        }
    }

    public enum PaymentMethodType: String, Codable, CaseIterable {
        case achCreditTransfer = "ach_credit_transfer"
        case achDebit = "ach_debit"
        case acssDebit = "acss_debit"
        case auBecsDebit = "au_becs_debit"
        case bacsDebit = "bacs_debit"
        case bancontact
        case boleto
        case card
        case fpx
        case giropay
        case ideal
        case sepaDebit = "sepa_debit"
        case sofort
        case wechatPay = "wechat_pay"
    }

    public init(paymentMethodOptions: PaymentMethodOptions? = nil, paymentMethodTypes: [PaymentMethodType]? = nil) {
        self.paymentMethodOptions = paymentMethodOptions
        self.paymentMethodTypes = paymentMethodTypes
    }

    private enum CodingKeys: String, CodingKey {
        case paymentMethodOptions = "payment_method_options"
        case paymentMethodTypes = "payment_method_types"
    }
}

/// Pending Updates store the changes pending from a previous update that will be applied
/// to the Subscription upon successful payment.
public struct SubscriptionsResourcePendingUpdate: Codable {
    /// If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.
    public var billingCycleAnchor: Int?
    /// The point after which the changes reflected by this update will be discarded and no longer applied.
    public var expiresAt: Int
    /// List of subscription items, each with an attached plan, that will be set if the update is applied.
    public var subscriptionItems: [SubscriptionItem]?
    /// Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied.
    public var trialEnd: Int?
    /// Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
    public var isTrialFromPlan: Bool?

    public init(billingCycleAnchor: Int? = nil, expiresAt: Int, subscriptionItems: [SubscriptionItem]? = nil, trialEnd: Int? = nil, isTrialFromPlan: Bool? = nil) {
        self.billingCycleAnchor = billingCycleAnchor
        self.expiresAt = expiresAt
        self.subscriptionItems = subscriptionItems
        self.trialEnd = trialEnd
        self.isTrialFromPlan = isTrialFromPlan
    }

    private enum CodingKeys: String, CodingKey {
        case billingCycleAnchor = "billing_cycle_anchor"
        case expiresAt = "expires_at"
        case subscriptionItems = "subscription_items"
        case trialEnd = "trial_end"
        case isTrialFromPlan = "trial_from_plan"
    }
}

/// TaxProductResourceTaxCode
///
/// [Tax codes](https://stripe.com/docs/tax/tax-codes) classify goods and services for tax purposes.
public struct TaxCode: Codable {
    /// A detailed description of which types of products the tax code represents.
    public var description: String
    /// Unique identifier for the object.
    public var id: String
    /// A short name for the tax code.
    public var name: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case taxCode = "tax_code"
    }

    public init(description: String, id: String, name: String, object: Object) {
        self.description = description
        self.id = id
        self.name = name
        self.object = object
    }
}

public struct TaxDeductedAtSource: Codable {
    /// Unique identifier for the object.
    public var id: String
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
    public var periodEnd: Int
    /// The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
    public var periodStart: Int
    /// The TAN that was supplied to Stripe when TDS was assessed
    public var taxDeductionAccountNumber: String

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case taxDeductedAtSource = "tax_deducted_at_source"
    }

    public init(id: String, object: Object, periodEnd: Int, periodStart: Int, taxDeductionAccountNumber: String) {
        self.id = id
        self.object = object
        self.periodEnd = periodEnd
        self.periodStart = periodStart
        self.taxDeductionAccountNumber = taxDeductionAccountNumber
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case object
        case periodEnd = "period_end"
        case periodStart = "period_start"
        case taxDeductionAccountNumber = "tax_deduction_account_number"
    }
}

/// Tax_id
///
/// You can add one or multiple tax IDs to a [customer](https://stripe.com/docs/api/customers).
/// A customer's tax IDs are displayed on invoices and credit notes issued for the customer.
/// 
/// Related guide: [Customer Tax Identification Numbers](https://stripe.com/docs/billing/taxes/tax-ids).
public struct TaxID: Codable {
    /// Two-letter ISO code representing the country of the tax ID.
    public var country: String?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// ID of the customer.
    public var customer: Customer?
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Type of the tax ID, one of `ae_trn`, `au_abn`, `au_arn`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_vat`, `cl_tin`, `es_cif`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `id_npwp`, `il_vat`, `in_gst`, `jp_cn`, `jp_rn`, `kr_brn`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `th_vat`, `tw_vat`, `ua_vat`, `us_ein`, or `za_vat`. Note that some legacy tax IDs have type `unknown`
    public var type: `Type`
    /// Value of the tax ID.
    public var value: String
    /// Tax ID verification information.
    public var verification: Verification?

    /// ID of the customer.
    public final class Customer: Codable {
        public var string: String?
        public var customer: StripeAPI.Customer?

        public init(string: String? = nil, customer: StripeAPI.Customer? = nil) {
            self.string = string
            self.customer = customer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.customer = try? container.decode(StripeAPI.Customer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = customer { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case taxID = "tax_id"
    }

    /// Type of the tax ID, one of `ae_trn`, `au_abn`, `au_arn`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_vat`, `cl_tin`, `es_cif`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `id_npwp`, `il_vat`, `in_gst`, `jp_cn`, `jp_rn`, `kr_brn`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `th_vat`, `tw_vat`, `ua_vat`, `us_ein`, or `za_vat`. Note that some legacy tax IDs have type `unknown`
    public enum `Type`: String, Codable, CaseIterable {
        case aeTrn = "ae_trn"
        case auAbn = "au_abn"
        case auArn = "au_arn"
        case brCnpj = "br_cnpj"
        case brCpf = "br_cpf"
        case caBn = "ca_bn"
        case caGstHst = "ca_gst_hst"
        case caPstBc = "ca_pst_bc"
        case caPstMb = "ca_pst_mb"
        case caPstSk = "ca_pst_sk"
        case caQst = "ca_qst"
        case chVat = "ch_vat"
        case clTin = "cl_tin"
        case esCif = "es_cif"
        case euVat = "eu_vat"
        case gbVat = "gb_vat"
        case geVat = "ge_vat"
        case hkBr = "hk_br"
        case idNpwp = "id_npwp"
        case ilVat = "il_vat"
        case inGst = "in_gst"
        case jpCn = "jp_cn"
        case jpRn = "jp_rn"
        case krBrn = "kr_brn"
        case liUid = "li_uid"
        case mxRfc = "mx_rfc"
        case myFrp = "my_frp"
        case myItn = "my_itn"
        case mySst = "my_sst"
        case noVat = "no_vat"
        case nzGst = "nz_gst"
        case ruInn = "ru_inn"
        case ruKpp = "ru_kpp"
        case saVat = "sa_vat"
        case sgGst = "sg_gst"
        case sgUen = "sg_uen"
        case thVat = "th_vat"
        case twVat = "tw_vat"
        case uaVat = "ua_vat"
        case unknown
        case usEin = "us_ein"
        case zaVat = "za_vat"
    }

    /// Tax ID verification information.
    public struct Verification: Codable {
        /// Tax_id_verification
        public var taxIDVerification: TaxIDVerification?

        public init(taxIDVerification: TaxIDVerification? = nil) {
            self.taxIDVerification = taxIDVerification
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.taxIDVerification = try? container.decode(TaxIDVerification.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = taxIDVerification { try container.encode(value) }
        }
    }

    public init(country: String? = nil, created: Int, customer: Customer? = nil, id: String, isLivemode: Bool, object: Object, type: `Type`, value: String, verification: Verification? = nil) {
        self.country = country
        self.created = created
        self.customer = customer
        self.id = id
        self.isLivemode = isLivemode
        self.object = object
        self.type = type
        self.value = value
        self.verification = verification
    }

    private enum CodingKeys: String, CodingKey {
        case country
        case created
        case customer
        case id
        case isLivemode = "livemode"
        case object
        case type
        case value
        case verification
    }
}

/// Tax_id_verification
public struct TaxIDVerification: Codable {
    /// Verification status, one of `pending`, `verified`, `unverified`, or `unavailable`.
    public var status: Status
    /// Verified address.
    public var verifiedAddress: String?
    /// Verified name.
    public var verifiedName: String?

    /// Verification status, one of `pending`, `verified`, `unverified`, or `unavailable`.
    public enum Status: String, Codable, CaseIterable {
        case pending
        case unavailable
        case unverified
        case verified
    }

    public init(status: Status, verifiedAddress: String? = nil, verifiedName: String? = nil) {
        self.status = status
        self.verifiedAddress = verifiedAddress
        self.verifiedName = verifiedName
    }

    private enum CodingKeys: String, CodingKey {
        case status
        case verifiedAddress = "verified_address"
        case verifiedName = "verified_name"
    }
}

/// Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.
/// 
/// Related guide: [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates).
public struct TaxRate: Codable {
    /// Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
    public var isActive: Bool
    /// Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
    public var country: String?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
    public var description: String?
    /// The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page.
    public var displayName: String
    /// Unique identifier for the object.
    public var id: String
    /// This specifies if the tax rate is inclusive or exclusive.
    public var isInclusive: Bool
    /// The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.
    public var jurisdiction: String?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// This represents the tax rate percent out of 100.
    public var percentage: Double
    /// [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States.
    public var state: String?
    /// The high-level tax type, such as `vat` or `sales_tax`.
    public var taxType: TaxType?

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case taxRate = "tax_rate"
    }

    /// The high-level tax type, such as `vat` or `sales_tax`.
    public enum TaxType: String, Codable, CaseIterable {
        case gst
        case hst
        case jct
        case pst
        case qst
        case rst
        case salesTax = "sales_tax"
        case vat
    }

    public init(isActive: Bool, country: String? = nil, created: Int, description: String? = nil, displayName: String, id: String, isInclusive: Bool, jurisdiction: String? = nil, isLivemode: Bool, metadata: [String: String]? = nil, object: Object, percentage: Double, state: String? = nil, taxType: TaxType? = nil) {
        self.isActive = isActive
        self.country = country
        self.created = created
        self.description = description
        self.displayName = displayName
        self.id = id
        self.isInclusive = isInclusive
        self.jurisdiction = jurisdiction
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.percentage = percentage
        self.state = state
        self.taxType = taxType
    }

    private enum CodingKeys: String, CodingKey {
        case isActive = "active"
        case country
        case created
        case description
        case displayName = "display_name"
        case id
        case isInclusive = "inclusive"
        case jurisdiction
        case isLivemode = "livemode"
        case metadata
        case object
        case percentage
        case state
        case taxType = "tax_type"
    }
}

/// A Connection Token is used by the Stripe Terminal SDK to connect to a reader.
/// 
/// Related guide: [Fleet Management](https://stripe.com/docs/terminal/fleet/locations).
public struct TerminalConnectionToken: Codable {
    /// The id of the location that this connection token is scoped to. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://stripe.com/docs/terminal/fleet/locations#connection-tokens).
    public var location: String?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Your application should pass this token to the Stripe Terminal SDK.
    public var secret: String

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case terminalConnectionToken = "terminal.connection_token"
    }

    public init(location: String? = nil, object: Object, secret: String) {
        self.location = location
        self.object = object
        self.secret = secret
    }
}

/// TerminalLocationLocation
///
/// A Location represents a grouping of readers.
/// 
/// Related guide: [Fleet Management](https://stripe.com/docs/terminal/fleet/locations).
public struct TerminalLocation: Codable {
    public var address: Address
    /// The display name of the location.
    public var displayName: String
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case terminalLocation = "terminal.location"
    }

    public init(address: Address, displayName: String, id: String, isLivemode: Bool, metadata: [String: String], object: Object) {
        self.address = address
        self.displayName = displayName
        self.id = id
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
    }

    private enum CodingKeys: String, CodingKey {
        case address
        case displayName = "display_name"
        case id
        case isLivemode = "livemode"
        case metadata
        case object
    }
}

/// TerminalReaderReader
///
/// A Reader represents a physical device for accepting payment details.
/// 
/// Related guide: [Connecting to a Reader](https://stripe.com/docs/terminal/payments/connect-reader).
public struct TerminalReader: Codable {
    /// The current software version of the reader.
    public var deviceSwVersion: String?
    /// Type of reader, one of `bbpos_chipper2x`, `bbpos_wisepos_e`, or `verifone_P400`.
    public var deviceType: DeviceType
    /// Unique identifier for the object.
    public var id: String
    /// The local IP address of the reader.
    public var ipAddress: String?
    /// Custom label given to the reader for easier identification.
    public var label: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// The location identifier of the reader.
    public var location: Location?
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Serial number of the reader.
    public var serialNumber: String
    /// The networking status of the reader.
    public var status: String?

    /// Type of reader, one of `bbpos_chipper2x`, `bbpos_wisepos_e`, or `verifone_P400`.
    public enum DeviceType: String, Codable, CaseIterable {
        case bbposChipper2x = "bbpos_chipper2x"
        case bbposWiseposE = "bbpos_wisepos_e"
        case verifoneP400 = "verifone_P400"
    }

    /// The location identifier of the reader.
    public struct Location: Codable {
        public var string: String?
        /// TerminalLocationLocation
        ///
        /// A Location represents a grouping of readers.
        /// 
        /// Related guide: [Fleet Management](https://stripe.com/docs/terminal/fleet/locations).
        public var terminalLocation: TerminalLocation?

        public init(string: String? = nil, terminalLocation: TerminalLocation? = nil) {
            self.string = string
            self.terminalLocation = terminalLocation
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.terminalLocation = try? container.decode(TerminalLocation.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = terminalLocation { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case terminalReader = "terminal.reader"
    }

    public init(deviceSwVersion: String? = nil, deviceType: DeviceType, id: String, ipAddress: String? = nil, label: String, isLivemode: Bool, location: Location? = nil, metadata: [String: String], object: Object, serialNumber: String, status: String? = nil) {
        self.deviceSwVersion = deviceSwVersion
        self.deviceType = deviceType
        self.id = id
        self.ipAddress = ipAddress
        self.label = label
        self.isLivemode = isLivemode
        self.location = location
        self.metadata = metadata
        self.object = object
        self.serialNumber = serialNumber
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case deviceSwVersion = "device_sw_version"
        case deviceType = "device_type"
        case id
        case ipAddress = "ip_address"
        case label
        case isLivemode = "livemode"
        case location
        case metadata
        case object
        case serialNumber = "serial_number"
        case status
    }
}

/// Cardholder authentication via 3D Secure is initiated by creating a `3D Secure`
/// object. Once the object has been created, you can use it to authenticate the
/// cardholder and create a charge.
public struct ThreeDSecure: Codable {
    /// Amount of the charge that you will create when authentication completes.
    public var amount: Int
    /// True if the cardholder went through the authentication flow and their bank indicated that authentication succeeded.
    public var isAuthenticated: Bool
    public var card: Card
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// If present, this is the URL that you should send the cardholder to for authentication. If you are going to use Stripe.js to display the authentication page in an iframe, you should use the value "_callback".
    public var redirectURL: String?
    /// Possible values are `redirect_pending`, `succeeded`, or `failed`. When the cardholder can be authenticated, the object starts with status `redirect_pending`. When liability will be shifted to the cardholder's bank (either because the cardholder was successfully authenticated, or because the bank has not implemented 3D Secure, the object wlil be in status `succeeded`. `failed` indicates that authentication was attempted unsuccessfully.
    public var status: String

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case threeDSecure = "three_d_secure"
    }

    public init(amount: Int, isAuthenticated: Bool, card: Card, created: Int, currency: String, id: String, isLivemode: Bool, object: Object, redirectURL: String? = nil, status: String) {
        self.amount = amount
        self.isAuthenticated = isAuthenticated
        self.card = card
        self.created = created
        self.currency = currency
        self.id = id
        self.isLivemode = isLivemode
        self.object = object
        self.redirectURL = redirectURL
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case isAuthenticated = "authenticated"
        case card
        case created
        case currency
        case id
        case isLivemode = "livemode"
        case object
        case redirectURL = "redirect_url"
        case status
    }
}

/// Three_d_secure_details
public struct ThreeDSecureDetails: Codable {
    /// For authenticated transactions: how the customer was authenticated by
    /// the issuing bank.
    public var authenticationFlow: AuthenticationFlow?
    /// Indicates the outcome of 3D Secure authentication.
    public var result: Result?
    /// Additional information about why 3D Secure succeeded or failed based
    /// on the `result`.
    public var resultReason: ResultReason?
    /// The version of 3D Secure that was used.
    public var version: Version?

    /// For authenticated transactions: how the customer was authenticated by
    /// the issuing bank.
    public enum AuthenticationFlow: String, Codable, CaseIterable {
        case challenge
        case frictionless
    }

    /// Indicates the outcome of 3D Secure authentication.
    public enum Result: String, Codable, CaseIterable {
        case attemptAcknowledged = "attempt_acknowledged"
        case authenticated
        case failed
        case notSupported = "not_supported"
        case processingError = "processing_error"
    }

    /// Additional information about why 3D Secure succeeded or failed based
    /// on the `result`.
    public enum ResultReason: String, Codable, CaseIterable {
        case abandoned
        case bypassed
        case canceled
        case cardNotEnrolled = "card_not_enrolled"
        case networkNotSupported = "network_not_supported"
        case protocolError = "protocol_error"
        case rejected
    }

    /// The version of 3D Secure that was used.
    public enum Version: String, Codable, CaseIterable {
        case _102 = "1.0.2"
        case _210 = "2.1.0"
        case _220 = "2.2.0"
    }

    public init(authenticationFlow: AuthenticationFlow? = nil, result: Result? = nil, resultReason: ResultReason? = nil, version: Version? = nil) {
        self.authenticationFlow = authenticationFlow
        self.result = result
        self.resultReason = resultReason
        self.version = version
    }

    private enum CodingKeys: String, CodingKey {
        case authenticationFlow = "authentication_flow"
        case result
        case resultReason = "result_reason"
        case version
    }
}

/// Three_d_secure_usage
public struct ThreeDSecureUsage: Codable {
    /// Whether 3D Secure is supported on this card.
    public var isSupported: Bool

    public init(isSupported: Bool) {
        self.isSupported = isSupported
    }

    private enum CodingKeys: String, CodingKey {
        case isSupported = "supported"
    }
}

/// Tokenization is the process Stripe uses to collect sensitive card or bank
/// account details, or personally identifiable information (PII), directly from
/// your customers in a secure manner. A token representing this information is
/// returned to your server to use. You should use our
/// [recommended payments integrations](https://stripe.com/docs/payments) to perform this process
/// client-side. This ensures that no sensitive card data touches your server,
/// and allows your integration to operate in a PCI-compliant way.
/// 
/// If you cannot use client-side tokenization, you can also create tokens using
/// the API with either your publishable or secret API key. Keep in mind that if
/// your integration uses this method, you are responsible for any PCI compliance
/// that may be required, and you must keep your secret API key safe. Unlike with
/// client-side tokenization, your customer's information is not sent directly to
/// Stripe, so we cannot determine how it is handled or stored.
/// 
/// Tokens cannot be stored or used more than once. To store card or bank account
/// information for later use, you can create [Customer](https://stripe.com/docs/api#customers)
/// objects or [Custom accounts](https://stripe.com/docs/api#external_accounts). Note that
/// [Radar](https://stripe.com/docs/radar), our integrated solution for automatic fraud protection,
/// performs best with integrations that use client-side tokenization.
/// 
/// Related guide: [Accept a payment](https://stripe.com/docs/payments/accept-a-payment-charges#web-create-token)
public struct Token: Codable {
    public var bankAccount: BankAccount?
    public var card: Card?
    /// IP address of the client that generated the token.
    public var clientIp: String?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// Type of the token: `account`, `bank_account`, `card`, or `pii`.
    public var type: String
    /// Whether this token has already been used (tokens can be used only once).
    public var isUsed: Bool

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case token
    }

    public init(bankAccount: BankAccount? = nil, card: Card? = nil, clientIp: String? = nil, created: Int, id: String, isLivemode: Bool, object: Object, type: String, isUsed: Bool) {
        self.bankAccount = bankAccount
        self.card = card
        self.clientIp = clientIp
        self.created = created
        self.id = id
        self.isLivemode = isLivemode
        self.object = object
        self.type = type
        self.isUsed = isUsed
    }

    private enum CodingKeys: String, CodingKey {
        case bankAccount = "bank_account"
        case card
        case clientIp = "client_ip"
        case created
        case id
        case isLivemode = "livemode"
        case object
        case type
        case isUsed = "used"
    }
}

/// To top up your Stripe balance, you create a top-up object. You can retrieve
/// individual top-ups, as well as list all top-ups. Top-ups are identified by a
/// unique, random ID.
/// 
/// Related guide: [Topping Up your Platform Account](https://stripe.com/docs/connect/top-ups).
public struct Topup: Codable {
    /// Amount transferred.
    public var amount: Int
    /// ID of the balance transaction that describes the impact of this top-up on your account balance. May not be specified depending on status of top-up.
    public var balanceTransaction: BalanceTransaction?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// An arbitrary string attached to the object. Often useful for displaying to users.
    public var description: String?
    /// Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up.
    public var expectedAvailabilityDate: Int?
    /// Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes).
    public var failureCode: String?
    /// Message to user further explaining reason for top-up failure if available.
    public var failureMessage: String?
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// `Source` objects allow you to accept a variety of payment methods. They
    /// represent a customer's payment instrument, and can be used with the Stripe API
    /// just like a `Card` object: once chargeable, they can be charged, or can be
    /// attached to customers.
    /// 
    /// Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
    public var source: Source
    /// Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter.
    public var statementDescriptor: String?
    /// The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`.
    public var status: Status
    /// A string that identifies this top-up as part of a group.
    public var transferGroup: String?

    /// ID of the balance transaction that describes the impact of this top-up on your account balance. May not be specified depending on status of top-up.
    public final class BalanceTransaction: Codable {
        public var string: String?
        public var balanceTransaction: StripeAPI.BalanceTransaction?

        public init(string: String? = nil, balanceTransaction: StripeAPI.BalanceTransaction? = nil) {
            self.string = string
            self.balanceTransaction = balanceTransaction
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.balanceTransaction = try? container.decode(StripeAPI.BalanceTransaction.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = balanceTransaction { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case topup
    }

    /// The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`.
    public enum Status: String, Codable, CaseIterable {
        case canceled
        case failed
        case pending
        case reversed
        case succeeded
    }

    public init(amount: Int, balanceTransaction: BalanceTransaction? = nil, created: Int, currency: String, description: String? = nil, expectedAvailabilityDate: Int? = nil, failureCode: String? = nil, failureMessage: String? = nil, id: String, isLivemode: Bool, metadata: [String: String], object: Object, source: Source, statementDescriptor: String? = nil, status: Status, transferGroup: String? = nil) {
        self.amount = amount
        self.balanceTransaction = balanceTransaction
        self.created = created
        self.currency = currency
        self.description = description
        self.expectedAvailabilityDate = expectedAvailabilityDate
        self.failureCode = failureCode
        self.failureMessage = failureMessage
        self.id = id
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.source = source
        self.statementDescriptor = statementDescriptor
        self.status = status
        self.transferGroup = transferGroup
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case balanceTransaction = "balance_transaction"
        case created
        case currency
        case description
        case expectedAvailabilityDate = "expected_availability_date"
        case failureCode = "failure_code"
        case failureMessage = "failure_message"
        case id
        case isLivemode = "livemode"
        case metadata
        case object
        case source
        case statementDescriptor = "statement_descriptor"
        case status
        case transferGroup = "transfer_group"
    }
}

/// A `Transfer` object is created when you move funds between Stripe accounts as
/// part of Connect.
/// 
/// Before April 6, 2017, transfers also represented movement of funds from a
/// Stripe account to a card or bank account. This behavior has since been split
/// out into a [Payout](https://stripe.com/docs/api#payout_object) object, with corresponding payout endpoints. For more
/// information, read about the
/// [transfer/payout split](https://stripe.com/docs/transfer-payout-split).
/// 
/// Related guide: [Creating Separate Charges and Transfers](https://stripe.com/docs/connect/charges-transfers).
public struct Transfer: Codable {
    /// Amount in %s to be transferred.
    public var amount: Int
    /// Amount in %s reversed (can be less than the amount attribute on the transfer if a partial reversal was issued).
    public var amountReversed: Int
    /// Balance transaction that describes the impact of this transfer on your account balance.
    public var balanceTransaction: BalanceTransaction?
    /// Time that this record of the transfer was first created.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// An arbitrary string attached to the object. Often useful for displaying to users.
    public var description: String?
    /// ID of the Stripe account the transfer was sent to.
    public var destination: Destination?
    /// If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer.
    public var destinationPayment: DestinationPayment?
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// TransferReversalList
    ///
    /// A list of reversals that have been applied to the transfer.
    public var reversals: Reversals
    /// Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false.
    public var isReversed: Bool
    /// ID of the charge or payment that was used to fund the transfer. If null, the transfer was funded from the available balance.
    public var sourceTransaction: SourceTransaction?
    /// The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`.
    public var sourceType: String?
    /// A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details.
    public var transferGroup: String?

    /// Balance transaction that describes the impact of this transfer on your account balance.
    public final class BalanceTransaction: Codable {
        public var string: String?
        public var balanceTransaction: StripeAPI.BalanceTransaction?

        public init(string: String? = nil, balanceTransaction: StripeAPI.BalanceTransaction? = nil) {
            self.string = string
            self.balanceTransaction = balanceTransaction
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.balanceTransaction = try? container.decode(StripeAPI.BalanceTransaction.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = balanceTransaction { try container.encode(value) }
        }
    }

    /// ID of the Stripe account the transfer was sent to.
    public struct Destination: Codable {
        public var string: String?
        public var account: Account?

        public init(string: String? = nil, account: Account? = nil) {
            self.string = string
            self.account = account
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.account = try? container.decode(Account.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = account { try container.encode(value) }
        }
    }

    /// If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer.
    public struct DestinationPayment: Codable {
        public var string: String?
        public var charge: Charge?

        public init(string: String? = nil, charge: Charge? = nil) {
            self.string = string
            self.charge = charge
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.charge = try? container.decode(Charge.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = charge { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case transfer
    }

    /// TransferReversalList
    ///
    /// A list of reversals that have been applied to the transfer.
    public struct Reversals: Codable {
        /// Details about each object.
        public var data: [TransferReversal]
        /// True if this list has another page of items after this one that can be fetched.
        public var hasMore: Bool
        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public var object: Object
        /// The URL where this list can be accessed.
        public var url: String

        /// String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
        public enum Object: String, Codable, CaseIterable {
            case list
        }

        public init(data: [TransferReversal], hasMore: Bool, object: Object, url: String) {
            self.data = data
            self.hasMore = hasMore
            self.object = object
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case data
            case hasMore = "has_more"
            case object
            case url
        }
    }

    /// ID of the charge or payment that was used to fund the transfer. If null, the transfer was funded from the available balance.
    public struct SourceTransaction: Codable {
        public var string: String?
        public var charge: Charge?

        public init(string: String? = nil, charge: Charge? = nil) {
            self.string = string
            self.charge = charge
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.charge = try? container.decode(Charge.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = charge { try container.encode(value) }
        }
    }

    public init(amount: Int, amountReversed: Int, balanceTransaction: BalanceTransaction? = nil, created: Int, currency: String, description: String? = nil, destination: Destination? = nil, destinationPayment: DestinationPayment? = nil, id: String, isLivemode: Bool, metadata: [String: String], object: Object, reversals: Reversals, isReversed: Bool, sourceTransaction: SourceTransaction? = nil, sourceType: String? = nil, transferGroup: String? = nil) {
        self.amount = amount
        self.amountReversed = amountReversed
        self.balanceTransaction = balanceTransaction
        self.created = created
        self.currency = currency
        self.description = description
        self.destination = destination
        self.destinationPayment = destinationPayment
        self.id = id
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.reversals = reversals
        self.isReversed = isReversed
        self.sourceTransaction = sourceTransaction
        self.sourceType = sourceType
        self.transferGroup = transferGroup
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case amountReversed = "amount_reversed"
        case balanceTransaction = "balance_transaction"
        case created
        case currency
        case description
        case destination
        case destinationPayment = "destination_payment"
        case id
        case isLivemode = "livemode"
        case metadata
        case object
        case reversals
        case isReversed = "reversed"
        case sourceTransaction = "source_transaction"
        case sourceType = "source_type"
        case transferGroup = "transfer_group"
    }
}

/// Transfer_data
public struct TransferData: Codable {
    /// Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
    public var amount: Int?
    /// The account (if any) the payment will be attributed to for tax
    /// reporting, and where funds from the payment will be transferred to upon
    /// payment success.
    public var destination: Destination

    /// The account (if any) the payment will be attributed to for tax
    /// reporting, and where funds from the payment will be transferred to upon
    /// payment success.
    public struct Destination: Codable {
        public var string: String?
        public var account: Account?

        public init(string: String? = nil, account: Account? = nil) {
            self.string = string
            self.account = account
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.account = try? container.decode(Account.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = account { try container.encode(value) }
        }
    }

    public init(amount: Int? = nil, destination: Destination) {
        self.amount = amount
        self.destination = destination
    }
}

/// [Stripe Connect](https://stripe.com/docs/connect) platforms can reverse transfers made to a
/// connected account, either entirely or partially, and can also specify whether
/// to refund any related application fees. Transfer reversals add to the
/// platform's balance and subtract from the destination account's balance.
/// 
/// Reversing a transfer that was made for a [destination
/// charge](/docs/connect/destination-charges) is allowed only up to the amount of
/// the charge. It is possible to reverse a
/// [transfer_group](https://stripe.com/docs/connect/charges-transfers#transfer-options)
/// transfer only if the destination account has enough balance to cover the
/// reversal.
/// 
/// Related guide: [Reversing Transfers](https://stripe.com/docs/connect/charges-transfers#reversing-transfers).
public struct TransferReversal: Codable {
    /// Amount, in %s.
    public var amount: Int
    /// Balance transaction that describes the impact on your account balance.
    public var balanceTransaction: BalanceTransaction?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
    public var currency: String
    /// Linked payment refund for the transfer reversal.
    public var destinationPaymentRefund: DestinationPaymentRefund?
    /// Unique identifier for the object.
    public var id: String
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]?
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// ID of the refund responsible for the transfer reversal.
    public var sourceRefund: SourceRefund?
    /// ID of the transfer that was reversed.
    public var transfer: Transfer

    /// Balance transaction that describes the impact on your account balance.
    public final class BalanceTransaction: Codable {
        public var string: String?
        public var balanceTransaction: StripeAPI.BalanceTransaction?

        public init(string: String? = nil, balanceTransaction: StripeAPI.BalanceTransaction? = nil) {
            self.string = string
            self.balanceTransaction = balanceTransaction
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.balanceTransaction = try? container.decode(StripeAPI.BalanceTransaction.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = balanceTransaction { try container.encode(value) }
        }
    }

    /// Linked payment refund for the transfer reversal.
    public struct DestinationPaymentRefund: Codable {
        public var string: String?
        public var refund: Refund?

        public init(string: String? = nil, refund: Refund? = nil) {
            self.string = string
            self.refund = refund
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.refund = try? container.decode(Refund.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = refund { try container.encode(value) }
        }
    }

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case transferReversal = "transfer_reversal"
    }

    /// ID of the refund responsible for the transfer reversal.
    public struct SourceRefund: Codable {
        public var string: String?
        public var refund: Refund?

        public init(string: String? = nil, refund: Refund? = nil) {
            self.string = string
            self.refund = refund
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.refund = try? container.decode(Refund.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = refund { try container.encode(value) }
        }
    }

    /// ID of the transfer that was reversed.
    public final class Transfer: Codable {
        public var string: String?
        public var transfer: StripeAPI.Transfer?

        public init(string: String? = nil, transfer: StripeAPI.Transfer? = nil) {
            self.string = string
            self.transfer = transfer
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.transfer = try? container.decode(StripeAPI.Transfer.self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = transfer { try container.encode(value) }
        }
    }

    public init(amount: Int, balanceTransaction: BalanceTransaction? = nil, created: Int, currency: String, destinationPaymentRefund: DestinationPaymentRefund? = nil, id: String, metadata: [String: String]? = nil, object: Object, sourceRefund: SourceRefund? = nil, transfer: Transfer) {
        self.amount = amount
        self.balanceTransaction = balanceTransaction
        self.created = created
        self.currency = currency
        self.destinationPaymentRefund = destinationPaymentRefund
        self.id = id
        self.metadata = metadata
        self.object = object
        self.sourceRefund = sourceRefund
        self.transfer = transfer
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case balanceTransaction = "balance_transaction"
        case created
        case currency
        case destinationPaymentRefund = "destination_payment_refund"
        case id
        case metadata
        case object
        case sourceRefund = "source_refund"
        case transfer
    }
}

public struct TransferSchedule: Codable {
    /// The number of days charges for the account will be held before being paid out.
    public var delayDays: Int
    /// How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`.
    public var interval: String
    /// The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months.
    public var monthlyAnchor: Int?
    /// The day of the week funds will be paid out, of the style 'monday', 'tuesday', etc. Only shown if `interval` is weekly.
    public var weeklyAnchor: String?

    public init(delayDays: Int, interval: String, monthlyAnchor: Int? = nil, weeklyAnchor: String? = nil) {
        self.delayDays = delayDays
        self.interval = interval
        self.monthlyAnchor = monthlyAnchor
        self.weeklyAnchor = weeklyAnchor
    }

    private enum CodingKeys: String, CodingKey {
        case delayDays = "delay_days"
        case interval
        case monthlyAnchor = "monthly_anchor"
        case weeklyAnchor = "weekly_anchor"
    }
}

public struct TransformQuantity: Codable {
    /// Divide usage by this number.
    public var divideBy: Int
    /// After division, either round the result `up` or `down`.
    public var round: Round

    /// After division, either round the result `up` or `down`.
    public enum Round: String, Codable, CaseIterable {
        case down
        case up
    }

    public init(divideBy: Int, round: Round) {
        self.divideBy = divideBy
        self.round = round
    }

    private enum CodingKeys: String, CodingKey {
        case divideBy = "divide_by"
        case round
    }
}

public struct TransformUsage: Codable {
    /// Divide usage by this number.
    public var divideBy: Int
    /// After division, either round the result `up` or `down`.
    public var round: Round

    /// After division, either round the result `up` or `down`.
    public enum Round: String, Codable, CaseIterable {
        case down
        case up
    }

    public init(divideBy: Int, round: Round) {
        self.divideBy = divideBy
        self.round = round
    }

    private enum CodingKeys: String, CodingKey {
        case divideBy = "divide_by"
        case round
    }
}

/// Usage records allow you to report customer usage and metrics to Stripe for
/// metered billing of subscription prices.
/// 
/// Related guide: [Metered Billing](https://stripe.com/docs/billing/subscriptions/metered-billing).
public struct UsageRecord: Codable {
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The usage quantity for the specified date.
    public var quantity: Int
    /// The ID of the subscription item this usage record contains data for.
    public var subscriptionItem: String
    /// The timestamp when this usage occurred.
    public var timestamp: Int

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case usageRecord = "usage_record"
    }

    public init(id: String, isLivemode: Bool, object: Object, quantity: Int, subscriptionItem: String, timestamp: Int) {
        self.id = id
        self.isLivemode = isLivemode
        self.object = object
        self.quantity = quantity
        self.subscriptionItem = subscriptionItem
        self.timestamp = timestamp
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case isLivemode = "livemode"
        case object
        case quantity
        case subscriptionItem = "subscription_item"
        case timestamp
    }
}

public struct UsageRecordSummary: Codable {
    /// Unique identifier for the object.
    public var id: String
    /// The invoice in which this usage period has been billed for.
    public var invoice: String?
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    public var period: Period
    /// The ID of the subscription item this summary is describing.
    public var subscriptionItem: String
    /// The total usage within this usage period.
    public var totalUsage: Int

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case usageRecordSummary = "usage_record_summary"
    }

    public init(id: String, invoice: String? = nil, isLivemode: Bool, object: Object, period: Period, subscriptionItem: String, totalUsage: Int) {
        self.id = id
        self.invoice = invoice
        self.isLivemode = isLivemode
        self.object = object
        self.period = period
        self.subscriptionItem = subscriptionItem
        self.totalUsage = totalUsage
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case invoice
        case isLivemode = "livemode"
        case object
        case period
        case subscriptionItem = "subscription_item"
        case totalUsage = "total_usage"
    }
}

/// Verification_session_redaction
public struct VerificationSessionRedaction: Codable {
    /// Indicates whether this object and its related objects have been redacted or not.
    public var status: Status

    /// Indicates whether this object and its related objects have been redacted or not.
    public enum Status: String, Codable, CaseIterable {
        case processing
        case redacted
    }

    public init(status: Status) {
        self.status = status
    }
}

/// NotificationWebhookEndpoint
///
/// You can configure [webhook endpoints](https://stripe.com/docs/webhooks/) via the API to be
/// notified about events that happen in your Stripe account or connected
/// accounts.
/// 
/// Most users configure webhooks from [the dashboard](https://dashboard.stripe.com/webhooks), which provides a user interface for registering and testing your webhook endpoints.
/// 
/// Related guide: [Setting up Webhooks](https://stripe.com/docs/webhooks/configure).
public struct WebhookEndpoint: Codable {
    /// The API version events are rendered as for this webhook endpoint.
    public var apiVersion: String?
    /// The ID of the associated Connect application.
    public var application: String?
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    public var created: Int
    /// An optional description of what the webhook is used for.
    public var description: String?
    /// The list of events to enable for this endpoint. `['*']` indicates that all events are enabled, except those that require explicit selection.
    public var enabledEvents: [String]
    /// Unique identifier for the object.
    public var id: String
    /// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    public var isLivemode: Bool
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    public var metadata: [String: String]
    /// String representing the object's type. Objects of the same type share the same value.
    public var object: Object
    /// The endpoint's secret, used to generate [webhook signatures](https://stripe.com/docs/webhooks/signatures). Only returned at creation.
    public var secret: String?
    /// The status of the webhook. It can be `enabled` or `disabled`.
    public var status: String
    /// The URL of the webhook endpoint.
    public var url: String

    /// String representing the object's type. Objects of the same type share the same value.
    public enum Object: String, Codable, CaseIterable {
        case webhookEndpoint = "webhook_endpoint"
    }

    public init(apiVersion: String? = nil, application: String? = nil, created: Int, description: String? = nil, enabledEvents: [String], id: String, isLivemode: Bool, metadata: [String: String], object: Object, secret: String? = nil, status: String, url: String) {
        self.apiVersion = apiVersion
        self.application = application
        self.created = created
        self.description = description
        self.enabledEvents = enabledEvents
        self.id = id
        self.isLivemode = isLivemode
        self.metadata = metadata
        self.object = object
        self.secret = secret
        self.status = status
        self.url = url
    }

    private enum CodingKeys: String, CodingKey {
        case apiVersion = "api_version"
        case application
        case created
        case description
        case enabledEvents = "enabled_events"
        case id
        case isLivemode = "livemode"
        case metadata
        case object
        case secret
        case status
        case url
    }
}

public enum AnyJSON: Equatable, Codable {
    case string(String)
    case number(Double)
    case object([String: AnyJSON])
    case array([AnyJSON])
    case bool(Bool)

    var value: Any {
        switch self {
        case .string(let string): return string
        case .number(let double): return double
        case .object(let dictionary): return dictionary
        case .array(let array): return array
        case .bool(let bool): return bool
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .array(array): try container.encode(array)
        case let .object(object): try container.encode(object)
        case let .string(string): try container.encode(string)
        case let .number(number): try container.encode(number)
        case let .bool(bool): try container.encode(bool)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let object = try? container.decode([String: AnyJSON].self) {
            self = .object(object)
        } else if let array = try? container.decode([AnyJSON].self) {
            self = .array(array)
        } else if let string = try? container.decode(String.self) {
            self = .string(string)
        } else if let bool = try? container.decode(Bool.self) {
            self = .bool(bool)
        } else if let number = try? container.decode(Double.self) {
            self = .number(number)
        } else {
            throw DecodingError.dataCorrupted(
                .init(codingPath: decoder.codingPath, debugDescription: "Invalid JSON value.")
            )
        }
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
