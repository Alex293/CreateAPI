// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation

/// The type that defines the fields for an address.
public struct Address: Codable {
    /// The first line of the street address.
    public var addressLine1: String?
    /// The second line of the street address. This field is not always used, but can be used for 'Suite Number' or 'Apt Number'.
    public var addressLine2: String?
    /// The city of the address.
    public var city: String?
    /// The two-letter ISO 3166 standard of the country of the address. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/identity/types/bas:CountryCodeEnum'>eBay API documentation</a>
    public var country: String?
    /// The county of the address.
    public var county: String?
    /// The postal code of the address.
    public var postalCode: String?
    /// The state or province of the address.
    public var stateOrProvince: String?

    public init(addressLine1: String? = nil, addressLine2: String? = nil, city: String? = nil, country: String? = nil, county: String? = nil, postalCode: String? = nil, stateOrProvince: String? = nil) {
        self.addressLine1 = addressLine1
        self.addressLine2 = addressLine2
        self.city = city
        self.country = country
        self.county = county
        self.postalCode = postalCode
        self.stateOrProvince = stateOrProvince
    }
}

/// The type that defines the fields for the business account information.
public struct BusinessAccount: Codable {
    /// The type that defines the fields for an address.
    public var address: Address?
    /// An additional name that is used for their business on eBay. The business name is returned in the name field.
    public var doingBusinessAs: String?
    /// The email address of the business account.
    public var email: String?
    /// The business name associated with the user's eBay account.
    public var name: String?
    /// The type that defines the fields for the information of the contact person for the account.
    public var primaryContact: Contact?
    /// The type that defines the fields for the details of a phone.
    public var primaryPhone: Phone?
    /// The type that defines the fields for the details of a phone.
    public var secondaryPhone: Phone?
    /// The business website address associated with the eBay account.
    public var website: String?

    public init(address: Address? = nil, doingBusinessAs: String? = nil, email: String? = nil, name: String? = nil, primaryContact: Contact? = nil, primaryPhone: Phone? = nil, secondaryPhone: Phone? = nil, website: String? = nil) {
        self.address = address
        self.doingBusinessAs = doingBusinessAs
        self.email = email
        self.name = name
        self.primaryContact = primaryContact
        self.primaryPhone = primaryPhone
        self.secondaryPhone = secondaryPhone
        self.website = website
    }
}

/// The type that defines the fields for the information of the contact person for the account.
public struct Contact: Codable {
    /// The first name of the contact person.
    public var firstName: String?
    /// The last name of the contact person.
    public var lastName: String?

    public init(firstName: String? = nil, lastName: String? = nil) {
        self.firstName = firstName
        self.lastName = lastName
    }
}

/// This type defines the fields that can be returned in an error.
public struct Error: Codable {
    /// Identifies the type of erro.
    public var category: String?
    /// Name for the primary system where the error occurred. This is relevant for application errors.
    public var domain: String?
    /// A unique number to identify the error.
    public var errorID: Int?
    /// An array of request elements most closely associated to the error.
    public var inputRefIDs: [String]?
    /// A more detailed explanation of the error.
    public var longMessage: String?
    /// Information on how to correct the problem, in the end user's terms and language where applicable.
    public var message: String?
    /// An array of request elements most closely associated to the error.
    public var outputRefIDs: [String]?
    /// An array of name/value pairs that describe details the error condition. These are useful when multiple errors are returned.
    public var parameters: [ErrorParameter]?
    /// Further helps indicate which subsystem the error is coming from. System subcategories include: Initialization, Serialization, Security, Monitoring, Rate Limiting, etc.
    public var subdomain: String?

    public init(category: String? = nil, domain: String? = nil, errorID: Int? = nil, inputRefIDs: [String]? = nil, longMessage: String? = nil, message: String? = nil, outputRefIDs: [String]? = nil, parameters: [ErrorParameter]? = nil, subdomain: String? = nil) {
        self.category = category
        self.domain = domain
        self.errorID = errorID
        self.inputRefIDs = inputRefIDs
        self.longMessage = longMessage
        self.message = message
        self.outputRefIDs = outputRefIDs
        self.parameters = parameters
        self.subdomain = subdomain
    }

    private enum CodingKeys: String, CodingKey {
        case category
        case domain
        case errorID = "errorId"
        case inputRefIDs = "inputRefIds"
        case longMessage
        case message
        case outputRefIDs = "outputRefIds"
        case parameters
        case subdomain
    }
}

public struct ErrorParameter: Codable {
    /// The object of the error.
    public var name: String?
    /// The value of the object.
    public var value: String?

    public init(name: String? = nil, value: String? = nil) {
        self.name = name
        self.value = value
    }
}

/// The type that defines the fields for the information of an individual account.
public struct IndividualAccount: Codable {
    /// The eBay user's registration email address.
    public var email: String?
    /// The eBay user's first name.
    public var firstName: String?
    /// The eBay user's last name.
    public var lastName: String?
    /// The type that defines the fields for the details of a phone.
    public var primaryPhone: Phone?
    /// The type that defines the fields for an address.
    public var registrationAddress: Address?
    /// The type that defines the fields for the details of a phone.
    public var secondaryPhone: Phone?

    public init(email: String? = nil, firstName: String? = nil, lastName: String? = nil, primaryPhone: Phone? = nil, registrationAddress: Address? = nil, secondaryPhone: Phone? = nil) {
        self.email = email
        self.firstName = firstName
        self.lastName = lastName
        self.primaryPhone = primaryPhone
        self.registrationAddress = registrationAddress
        self.secondaryPhone = secondaryPhone
    }
}

/// The type that defines the fields for the details of a phone.
public struct Phone: Codable {
    /// The two-letter ISO 3166 standard of the country to which the phone number belongs.
    public var countryCode: String?
    /// The numeric string representing the phone number.
    public var number: String?
    /// The type of phone service. Valid Values: MOBILE or LAND_LINE Code so that your app gracefully handles any future changes to this list.
    public var phoneType: String?

    public init(countryCode: String? = nil, number: String? = nil, phoneType: String? = nil) {
        self.countryCode = countryCode
        self.number = number
        self.phoneType = phoneType
    }
}

/// The type that defines the fields for the getUser method.
public struct UserResponse: Codable {
    /// Indicates the user account type. This is determined when the user registers with eBay. If they register for a business account, this value will be BUSINESS. If they register for a private account, this value will be INDIVIDUAL. This designation is required by the tax laws in the following countries: EBAY_AT, EBAY_BE, EBAY_CH, EBAY_DE, EBAY_ES, EBAY_FR, EBAY_GB, EBAY_IE, EBAY_IT, EBAY_PL Valid Values: BUSINESS or INDIVIDUAL Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/identity/types/api:AccountTypeEnum'>eBay API documentation</a>
    public var accountType: String?
    /// The type that defines the fields for the business account information.
    public var businessAccount: BusinessAccount?
    /// The type that defines the fields for the information of an individual account.
    public var individualAccount: IndividualAccount?
    /// The eBay site on which the account is registered. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/identity/types/bas:MarketplaceIdEnum'>eBay API documentation</a>
    public var registrationMarketplaceID: String?
    /// Indicates the user's account status. Possible values: CONFIRMED, UNCONFIRMED, ACCOUNTONHOLD and UNDETERMINED. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/identity/types/api:UserStatusEnum'>eBay API documentation</a>
    public var status: String?
    /// The eBay immutable user ID of the user's account and can always be used to identify the user.
    public var userID: String?
    /// The user name, which was specific by the user when they created the account. Note: This value can be changed by the user.
    public var username: String?

    public init(accountType: String? = nil, businessAccount: BusinessAccount? = nil, individualAccount: IndividualAccount? = nil, registrationMarketplaceID: String? = nil, status: String? = nil, userID: String? = nil, username: String? = nil) {
        self.accountType = accountType
        self.businessAccount = businessAccount
        self.individualAccount = individualAccount
        self.registrationMarketplaceID = registrationMarketplaceID
        self.status = status
        self.userID = userID
        self.username = username
    }

    private enum CodingKeys: String, CodingKey {
        case accountType
        case businessAccount
        case individualAccount
        case registrationMarketplaceID = "registrationMarketplaceId"
        case status
        case userID = "userId"
        case username
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
