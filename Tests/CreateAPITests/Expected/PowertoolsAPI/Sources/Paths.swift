// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import Get

extension Paths {
    public static var addToCollection: AddToCollection {
        AddToCollection(path: "/AddToCollection")
    }

    public struct AddToCollection {
        /// Path: `/AddToCollection`
        public let path: String

        /// Collections - Add to collection
        ///
        /// Add an item to a collection
        public func post(_ body: PowertoolsAPI.InputCollectionModify? = nil) -> Request<PowertoolsAPI.OutputCollectionResult> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var removeFromCollection: RemoveFromCollection {
        RemoveFromCollection(path: "/RemoveFromCollection")
    }

    public struct RemoveFromCollection {
        /// Path: `/RemoveFromCollection`
        public let path: String

        /// Collections - Remove from collection
        ///
        /// Remove an item from a collection
        public func post(_ body: PowertoolsAPI.InputCollectionModify? = nil) -> Request<PowertoolsAPI.OutputCollectionResult> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var filterCollection: FilterCollection {
        FilterCollection(path: "/FilterCollection")
    }

    public struct FilterCollection {
        /// Path: `/FilterCollection`
        public let path: String

        /// Collections - Filter collection
        ///
        /// Filter a collection of strings by keyword
        public func post(_ body: PowertoolsAPI.InputCollectionFilter? = nil) -> Request<PowertoolsAPI.OutputCollectionResult> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var sortCollection: SortCollection {
        SortCollection(path: "/SortCollection")
    }

    public struct SortCollection {
        /// Path: `/SortCollection`
        public let path: String

        /// Collections - Sort collection
        ///
        /// Sort a collection of strings
        public func post(_ body: PowertoolsAPI.InputCollectionSort? = nil) -> Request<PowertoolsAPI.OutputCollectionResult> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var countCollection: CountCollection {
        CountCollection(path: "/CountCollection")
    }

    public struct CountCollection {
        /// Path: `/CountCollection`
        public let path: String

        /// Collections - Count collection
        ///
        /// Count a collection of items
        public func post(_ body: PowertoolsAPI.InputCollectionCount? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var splitCollection: SplitCollection {
        SplitCollection(path: "/SplitCollection")
    }

    public struct SplitCollection {
        /// Path: `/SplitCollection`
        public let path: String

        /// Collections - Split collection
        ///
        /// Split a collection of items by matching value or index
        public func post(_ body: PowertoolsAPI.InputCollectionSplit? = nil) -> Request<PowertoolsAPI.OutputMultiCollection> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var replaceValuesInCollection: ReplaceValuesInCollection {
        ReplaceValuesInCollection(path: "/ReplaceValuesInCollection")
    }

    public struct ReplaceValuesInCollection {
        /// Path: `/ReplaceValuesInCollection`
        public let path: String

        /// Collections - Replace values in collection
        ///
        /// Replace whole or partial strings in a collection
        public func post(_ body: PowertoolsAPI.InputCollectionReplace? = nil) -> Request<PowertoolsAPI.OutputCollectionResult> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var collectionContainsString: CollectionContainsString {
        CollectionContainsString(path: "/CollectionContainsString")
    }

    public struct CollectionContainsString {
        /// Path: `/CollectionContainsString`
        public let path: String

        /// Collections - Contains string
        ///
        /// Determine if any items in a collection contain a specific string
        public func post(_ body: PowertoolsAPI.InputCollectionSearch? = nil) -> Request<PowertoolsAPI.OutputCollectionString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var collectionStartsWithString: CollectionStartsWithString {
        CollectionStartsWithString(path: "/CollectionStartsWithString")
    }

    public struct CollectionStartsWithString {
        /// Path: `/CollectionStartsWithString`
        public let path: String

        /// Collections - Starts with string
        ///
        /// Determine if any items in a collection start with a specific string
        public func post(_ body: PowertoolsAPI.InputCollectionSearch? = nil) -> Request<PowertoolsAPI.OutputCollectionString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var collectionEndsWithString: CollectionEndsWithString {
        CollectionEndsWithString(path: "/CollectionEndsWithString")
    }

    public struct CollectionEndsWithString {
        /// Path: `/CollectionEndsWithString`
        public let path: String

        /// Collections - Ends with string
        ///
        /// Determine if any items in a collection end with a specific string
        public func post(_ body: PowertoolsAPI.InputCollectionSearch? = nil) -> Request<PowertoolsAPI.OutputCollectionString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var collectionContainsNumber: CollectionContainsNumber {
        CollectionContainsNumber(path: "/CollectionContainsNumber")
    }

    public struct CollectionContainsNumber {
        /// Path: `/CollectionContainsNumber`
        public let path: String

        /// Collections - Contains number
        ///
        /// Determine if a collection contains a specific number
        public func post(_ body: PowertoolsAPI.InputCollectionSearchNumeric? = nil) -> Request<PowertoolsAPI.OutputCollectionNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var collectionToJSON: CollectionToJSON {
        CollectionToJSON(path: "/CollectionToJSON")
    }

    public struct CollectionToJSON {
        /// Path: `/CollectionToJSON`
        public let path: String

        /// Collections - Collection to JSON
        ///
        /// Convert a collection to a named JSON object
        public func post(_ body: PowertoolsAPI.InputCollectionConversion? = nil) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var collectionToXML: CollectionToXML {
        CollectionToXML(path: "/CollectionToXML")
    }

    public struct CollectionToXML {
        /// Path: `/CollectionToXML`
        public let path: String

        /// Collections - Collection to XML
        ///
        /// Convert a collection to an XML string
        public func post(_ body: PowertoolsAPI.InputCollectionConversionXML? = nil) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var convertCurrency: ConvertCurrency {
        ConvertCurrency(path: "/ConvertCurrency")
    }

    public struct ConvertCurrency {
        /// Path: `/ConvertCurrency`
        public let path: String

        /// Currency - Convert currency
        ///
        /// Calculate monetary value in a different currency
        public func post(_ body: PowertoolsAPI.InputCurrencyConversion? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var formatCurrency: FormatCurrency {
        FormatCurrency(path: "/FormatCurrency")
    }

    public struct FormatCurrency {
        /// Path: `/FormatCurrency`
        public let path: String

        /// Currency - Format currency
        ///
        /// Apply currency symbol to a numeric value
        public func post(_ body: PowertoolsAPI.InputCurrencyFormat? = nil) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var stockPrices: StockPrices {
        StockPrices(path: "/StockPrices")
    }

    public struct StockPrices {
        /// Path: `/StockPrices`
        public let path: String

        /// Finance - Stock prices
        ///
        /// Get current and historical stock price information
        public func post(_ body: PowertoolsAPI.InputStockPrices? = nil) -> Request<PowertoolsAPI.OutputStockPrice> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var marketIndex: MarketIndex {
        MarketIndex(path: "/MarketIndex")
    }

    public struct MarketIndex {
        /// Path: `/MarketIndex`
        public let path: String

        /// Finance - Market index
        ///
        /// Get current and historical market index information
        public func post(_ body: PowertoolsAPI.InputMarketIndex? = nil) -> Request<PowertoolsAPI.OutputMarketIndex> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var dateTimeInfo: DateTimeInfo {
        DateTimeInfo(path: "/DateTimeInfo")
    }

    public struct DateTimeInfo {
        /// Path: `/DateTimeInfo`
        public let path: String

        /// DateTime - Get date and time information
        ///
        /// Retrieve useful date and time information, such as day of year, total seconds and ticks
        public func post(_ body: PowertoolsAPI.InputDateTimeInfo? = nil) -> Request<PowertoolsAPI.OutputDateInfo> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var dateTimeDifference: DateTimeDifference {
        DateTimeDifference(path: "/DateTimeDifference")
    }

    public struct DateTimeDifference {
        /// Path: `/DateTimeDifference`
        public let path: String

        /// DateTime - DateTime difference
        ///
        /// Calculate the difference between two dates
        public func post(_ body: PowertoolsAPI.InputDateTimeDifference? = nil) -> Request<PowertoolsAPI.OutputDateDifference> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var formatDateTime: FormatDateTime {
        FormatDateTime(path: "/FormatDateTime")
    }

    public struct FormatDateTime {
        /// Path: `/FormatDateTime`
        public let path: String

        /// DateTime - Format date and time
        ///
        /// Create a date/time string in a specific format
        public func post(_ body: PowertoolsAPI.InputDateTimeFormat? = nil) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var worldTime: WorldTime {
        WorldTime(path: "/WorldTime")
    }

    public struct WorldTime {
        /// Path: `/WorldTime`
        public let path: String

        /// DateTime - Get world time
        ///
        /// Convert date and time from one time zone to another
        public func post(_ body: PowertoolsAPI.InputDateTimeConversion? = nil) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var calculateAverage: CalculateAverage {
        CalculateAverage(path: "/CalculateAverage")
    }

    public struct CalculateAverage {
        /// Path: `/CalculateAverage`
        public let path: String

        /// Math - Calculate average
        ///
        /// Calculate the average of two or more numbers
        public func post(_ body: PowertoolsAPI.InputCalculateSeries? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var calculateMedian: CalculateMedian {
        CalculateMedian(path: "/CalculateMedian")
    }

    public struct CalculateMedian {
        /// Path: `/CalculateMedian`
        public let path: String

        /// Math - Calculate median
        ///
        /// Calculate the median of two or more numbers
        public func post(_ body: PowertoolsAPI.InputCalculateSeries? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var calculateMinMax: CalculateMinMax {
        CalculateMinMax(path: "/CalculateMinMax")
    }

    public struct CalculateMinMax {
        /// Path: `/CalculateMinMax`
        public let path: String

        /// Math - Calculate minimum or maximum
        ///
        /// Calculate the minimum or maximum value in a sequence of numbers
        public func post(_ body: PowertoolsAPI.InputCalculateMinMax? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var calculateSum: CalculateSum {
        CalculateSum(path: "/CalculateSum")
    }

    public struct CalculateSum {
        /// Path: `/CalculateSum`
        public let path: String

        /// Math - Calculate sum
        ///
        /// Calculate the sum of two or more numbers
        public func post(_ body: PowertoolsAPI.InputCalculateSeries? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var calculatePower: CalculatePower {
        CalculatePower(path: "/CalculatePower")
    }

    public struct CalculatePower {
        /// Path: `/CalculatePower`
        public let path: String

        /// Math - Calculate power
        ///
        /// Raise number to a specified power
        public func post(_ body: PowertoolsAPI.InputCalculatePower? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var calculateVariance: CalculateVariance {
        CalculateVariance(path: "/CalculateVariance")
    }

    public struct CalculateVariance {
        /// Path: `/CalculateVariance`
        public let path: String

        /// Math - Calculate variance
        ///
        /// Calculate the statistical variance of two or more numbers
        public func post(_ body: PowertoolsAPI.InputCalculateSeries? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var calculateAddition: CalculateAddition {
        CalculateAddition(path: "/CalculateAddition")
    }

    public struct CalculateAddition {
        /// Path: `/CalculateAddition`
        public let path: String

        /// Math - Calculate Addition
        ///
        /// Calculate the sum of two numbers
        public func post(_ body: PowertoolsAPI.InputCalculateNumbers? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var calculateSubtraction: CalculateSubtraction {
        CalculateSubtraction(path: "/CalculateSubtraction")
    }

    public struct CalculateSubtraction {
        /// Path: `/CalculateSubtraction`
        public let path: String

        /// Math - Calculate Subtraction
        ///
        /// Calculate the difference between two numbers
        public func post(_ body: PowertoolsAPI.InputCalculateNumbers? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var calculateMultiplication: CalculateMultiplication {
        CalculateMultiplication(path: "/CalculateMultiplication")
    }

    public struct CalculateMultiplication {
        /// Path: `/CalculateMultiplication`
        public let path: String

        /// Math - Calculate Multiplication
        ///
        /// Calculate the product of two numbers
        public func post(_ body: PowertoolsAPI.InputCalculateNumbers? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var calculateDivision: CalculateDivision {
        CalculateDivision(path: "/CalculateDivision")
    }

    public struct CalculateDivision {
        /// Path: `/CalculateDivision`
        public let path: String

        /// Math - Calculate Division
        ///
        /// Calculate the quotient of two numbers
        public func post(_ body: PowertoolsAPI.InputCalculateNumbers? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var calculateModulo: CalculateModulo {
        CalculateModulo(path: "/CalculateModulo")
    }

    public struct CalculateModulo {
        /// Path: `/CalculateModulo`
        public let path: String

        /// Math - Calculate Modulo
        ///
        /// Calculate the remainder of dividing two numbers
        public func post(_ body: PowertoolsAPI.InputCalculateNumbers? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var calculateNthRoot: CalculateNthRoot {
        CalculateNthRoot(path: "/CalculateNthRoot")
    }

    public struct CalculateNthRoot {
        /// Path: `/CalculateNthRoot`
        public let path: String

        /// Math - Calculate Nth Root
        ///
        /// Calculate the n-th root of a number
        public func post(_ body: PowertoolsAPI.InputCalculateNumbers? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var calculateSquareRoot: CalculateSquareRoot {
        CalculateSquareRoot(path: "/CalculateSquareRoot")
    }

    public struct CalculateSquareRoot {
        /// Path: `/CalculateSquareRoot`
        public let path: String

        /// Math - Calculate Square Root
        ///
        /// Calculate the square root of a number
        public func post(_ body: PowertoolsAPI.InputCalculateNumber? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var calculateLogarithm: CalculateLogarithm {
        CalculateLogarithm(path: "/CalculateLogarithm")
    }

    public struct CalculateLogarithm {
        /// Path: `/CalculateLogarithm`
        public let path: String

        /// Math - Calculate Logarithm
        ///
        /// Calculate the logarithm of a number
        public func post(_ body: PowertoolsAPI.InputCalculateNumber? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var calculateSine: CalculateSine {
        CalculateSine(path: "/CalculateSine")
    }

    public struct CalculateSine {
        /// Path: `/CalculateSine`
        public let path: String

        /// Math - Calculate Sine
        ///
        /// Calculate the sine value of an angle
        public func post(_ body: PowertoolsAPI.InputCalculateNumber? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var calculateCosine: CalculateCosine {
        CalculateCosine(path: "/CalculateCosine")
    }

    public struct CalculateCosine {
        /// Path: `/CalculateCosine`
        public let path: String

        /// Math - Calculate Cosine
        ///
        /// Calculate the cosine value of an angle
        public func post(_ body: PowertoolsAPI.InputCalculateNumber? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var calculateTangent: CalculateTangent {
        CalculateTangent(path: "/CalculateTangent")
    }

    public struct CalculateTangent {
        /// Path: `/CalculateTangent`
        public let path: String

        /// Math - Calculate Tangent
        ///
        /// Calculate the tangent value of an angle
        public func post(_ body: PowertoolsAPI.InputCalculateNumber? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var calculateAbsolute: CalculateAbsolute {
        CalculateAbsolute(path: "/CalculateAbsolute")
    }

    public struct CalculateAbsolute {
        /// Path: `/CalculateAbsolute`
        public let path: String

        /// Math - Calculate Absolute
        ///
        /// Calculate the absolute value of a number
        public func post(_ body: PowertoolsAPI.InputCalculateNumber? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var convertAngle: ConvertAngle {
        ConvertAngle(path: "/ConvertAngle")
    }

    public struct ConvertAngle {
        /// Path: `/ConvertAngle`
        public let path: String

        /// Math - Convert angle
        ///
        /// Convert value from one angle measurement to another
        public func post(_ body: PowertoolsAPI.InputConvertAngle? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var convertArea: ConvertArea {
        ConvertArea(path: "/ConvertArea")
    }

    public struct ConvertArea {
        /// Path: `/ConvertArea`
        public let path: String

        /// Math - Convert area
        ///
        /// Convert value from one area measurement to another
        public func post(_ body: PowertoolsAPI.InputConvertArea? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var convertDistance: ConvertDistance {
        ConvertDistance(path: "/ConvertDistance")
    }

    public struct ConvertDistance {
        /// Path: `/ConvertDistance`
        public let path: String

        /// Math - Convert distance
        ///
        /// Convert value from one distance measurement to another
        public func post(_ body: PowertoolsAPI.InputConvertDistance? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var convertDuration: ConvertDuration {
        ConvertDuration(path: "/ConvertDuration")
    }

    public struct ConvertDuration {
        /// Path: `/ConvertDuration`
        public let path: String

        /// Math - Convert duration
        ///
        /// Convert value from one duration measurement to another
        public func post(_ body: PowertoolsAPI.InputConvertDuration? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var convertEnergy: ConvertEnergy {
        ConvertEnergy(path: "/ConvertEnergy")
    }

    public struct ConvertEnergy {
        /// Path: `/ConvertEnergy`
        public let path: String

        /// Math - Convert energy
        ///
        /// Convert value from one energy measurement to another
        public func post(_ body: PowertoolsAPI.InputConvertEnergy? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var convertPower: ConvertPower {
        ConvertPower(path: "/ConvertPower")
    }

    public struct ConvertPower {
        /// Path: `/ConvertPower`
        public let path: String

        /// Math - Convert power
        ///
        /// Convert value from one power measurement to another
        public func post(_ body: PowertoolsAPI.InputConvertPower? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var convertSpeed: ConvertSpeed {
        ConvertSpeed(path: "/ConvertSpeed")
    }

    public struct ConvertSpeed {
        /// Path: `/ConvertSpeed`
        public let path: String

        /// Math - Convert speed
        ///
        /// Convert value from one speed measurement to another
        public func post(_ body: PowertoolsAPI.InputConvertSpeed? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var convertTemperature: ConvertTemperature {
        ConvertTemperature(path: "/ConvertTemperature")
    }

    public struct ConvertTemperature {
        /// Path: `/ConvertTemperature`
        public let path: String

        /// Math - Convert temperature
        ///
        /// Convert value from one temperature measurement to another
        public func post(_ body: PowertoolsAPI.InputConvertTemperature? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var convertVolume: ConvertVolume {
        ConvertVolume(path: "/ConvertVolume")
    }

    public struct ConvertVolume {
        /// Path: `/ConvertVolume`
        public let path: String

        /// Math - Convert volume
        ///
        /// Convert value from one volume measurement to another
        public func post(_ body: PowertoolsAPI.InputConvertVolume? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var convertWeight: ConvertWeight {
        ConvertWeight(path: "/ConvertWeight")
    }

    public struct ConvertWeight {
        /// Path: `/ConvertWeight`
        public let path: String

        /// Math - Convert weight
        ///
        /// Convert value from one weight measurement to another
        public func post(_ body: PowertoolsAPI.InputConvertWeight? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var randomNumber: RandomNumber {
        RandomNumber(path: "/RandomNumber")
    }

    public struct RandomNumber {
        /// Path: `/RandomNumber`
        public let path: String

        /// Math - Random number
        ///
        /// Generate a random number within a specified range
        public func post(_ body: PowertoolsAPI.InputNumberRange? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var roundNumber: RoundNumber {
        RoundNumber(path: "/RoundNumber")
    }

    public struct RoundNumber {
        /// Path: `/RoundNumber`
        public let path: String

        /// Math - Round number
        ///
        /// Round a numeric value up or down
        public func post(_ body: PowertoolsAPI.InputCalculateNumber? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var standardDeviation: StandardDeviation {
        StandardDeviation(path: "/StandardDeviation")
    }

    public struct StandardDeviation {
        /// Path: `/StandardDeviation`
        public let path: String

        /// Math - Calculate standard deviation
        ///
        /// Calculate the standard deviation of two or more numbers
        public func post(_ body: PowertoolsAPI.InputCalculateSeries? = nil) -> Request<PowertoolsAPI.OutputNumber> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var compareStrings: CompareStrings {
        CompareStrings(path: "/CompareStrings")
    }

    public struct CompareStrings {
        /// Path: `/CompareStrings`
        public let path: String

        /// Text - Compare strings
        ///
        /// Perform a comparison of two strings
        public func post(_ body: PowertoolsAPI.InputStringComparison? = nil) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var containsString: ContainsString {
        ContainsString(path: "/ContainsString")
    }

    public struct ContainsString {
        /// Path: `/ContainsString`
        public let path: String

        /// Text - Contains string
        ///
        /// Determine if a string contains another string
        public func post(_ body: PowertoolsAPI.InputStringContains? = nil) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var convertCase: ConvertCase {
        ConvertCase(path: "/ConvertCase")
    }

    public struct ConvertCase {
        /// Path: `/ConvertCase`
        public let path: String

        /// Text - Convert case
        ///
        /// Convert string to upper, lower or title case
        public func post(_ body: PowertoolsAPI.InputCaseConversion? = nil) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var decodeString: DecodeString {
        DecodeString(path: "/DecodeString")
    }

    public struct DecodeString {
        /// Path: `/DecodeString`
        public let path: String

        /// Text - Decode string
        ///
        /// Decode a string encoded with Base64 encoding
        public func post(source: String) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: ["source": source])
        }
    }
}

extension Paths {
    public static var encodeString: EncodeString {
        EncodeString(path: "/EncodeString")
    }

    public struct EncodeString {
        /// Path: `/EncodeString`
        public let path: String

        /// Text - Encode string
        ///
        /// Encode a string using Base64 encoding
        public func post(_ body: PowertoolsAPI.InputString? = nil) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var generateGuid: GenerateGuid {
        GenerateGuid(path: "/GenerateGuid")
    }

    public struct GenerateGuid {
        /// Path: `/GenerateGuid`
        public let path: String

        /// Text - Generate GUID
        ///
        /// Generate a globally unique identifier
        public func post(_ body: PowertoolsAPI.InputGenerateUniqueID? = nil) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var generateHash: GenerateHash {
        GenerateHash(path: "/GenerateHash")
    }

    public struct GenerateHash {
        /// Path: `/GenerateHash`
        public let path: String

        /// Text - Generate hash
        ///
        /// Generate a hash value from a string
        public func post(_ body: PowertoolsAPI.InputGenerateHash? = nil) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var verifyHash: VerifyHash {
        VerifyHash(path: "/VerifyHash")
    }

    public struct VerifyHash {
        /// Path: `/VerifyHash`
        public let path: String

        /// Text - Verify hash
        ///
        /// Verify a hashed value against the original source string
        public func post(_ body: PowertoolsAPI.InputVerifyHash? = nil) -> Request<PowertoolsAPI.OutputBoolean> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var joinStrings: JoinStrings {
        JoinStrings(path: "/JoinStrings")
    }

    public struct JoinStrings {
        /// Path: `/JoinStrings`
        public let path: String

        /// Text - Join strings
        ///
        /// Join a collection of strings
        public func post(_ body: PowertoolsAPI.InputJoinStrings? = nil) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var redactString: RedactString {
        RedactString(path: "/RedactString")
    }

    public struct RedactString {
        /// Path: `/RedactString`
        public let path: String

        /// Text - Redact string
        ///
        /// Redact a strng containing sensitive content
        public func post(_ body: PowertoolsAPI.InputRedactString? = nil) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var replaceString: ReplaceString {
        ReplaceString(path: "/ReplaceString")
    }

    public struct ReplaceString {
        /// Path: `/ReplaceString`
        public let path: String

        /// Text - Replace string
        ///
        /// Replace one value with another in a string
        public func post(_ body: PowertoolsAPI.InputReplaceString? = nil) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var shortenLink: ShortenLink {
        ShortenLink(path: "/ShortenLink")
    }

    public struct ShortenLink {
        /// Path: `/ShortenLink`
        public let path: String

        /// Text - Shorten hyperlink
        ///
        /// Generate a simple, short URL from a complex URL
        public func post(source: String) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: ["source": source])
        }
    }
}

extension Paths {
    public static var splitString: SplitString {
        SplitString(path: "/SplitString")
    }

    public struct SplitString {
        /// Path: `/SplitString`
        public let path: String

        /// Text - Split string
        ///
        /// Split a string based upon one or more characters
        public func post(_ body: PowertoolsAPI.InputSplitString? = nil) -> Request<PowertoolsAPI.OutputStringArray> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var speechToText: SpeechToText {
        SpeechToText(path: "/SpeechToText")
    }

    public struct SpeechToText {
        /// Path: `/SpeechToText`
        public let path: String

        /// Text - Speech to Text
        ///
        /// Convert audio file to text (10MB limit)
        public func post(_ body: Data) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var textToSpeech: TextToSpeech {
        TextToSpeech(path: "/TextToSpeech")
    }

    public struct TextToSpeech {
        /// Path: `/TextToSpeech`
        public let path: String

        /// Text - Text to Speech
        ///
        /// Convert text to an audio file using AI-driven speech synthesis.
        public func post(_ body: PowertoolsAPI.InputTextToSpeech? = nil) -> Request<Data> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var translateString: TranslateString {
        TranslateString(path: "/TranslateString")
    }

    public struct TranslateString {
        /// Path: `/TranslateString`
        public let path: String

        /// Text - Translate string
        ///
        /// Translate a string into a different language
        public func post(_ body: PowertoolsAPI.InputTranslateString? = nil) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var trimString: TrimString {
        TrimString(path: "/TrimString")
    }

    public struct TrimString {
        /// Path: `/TrimString`
        public let path: String

        /// Text - Trim string
        ///
        /// Trim leading or trailing whitespace from a string
        public func post(_ body: PowertoolsAPI.InputTrimString? = nil) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var urlDecode: URLDecode {
        URLDecode(path: "/URLDecode")
    }

    public struct URLDecode {
        /// Path: `/URLDecode`
        public let path: String

        /// Text - Decode URL
        ///
        /// Decode an encoded URL
        public func post(source: String) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: ["source": source])
        }
    }
}

extension Paths {
    public static var urlEncode: URLEncode {
        URLEncode(path: "/URLEncode")
    }

    public struct URLEncode {
        /// Path: `/URLEncode`
        public let path: String

        /// Text - Encode URL
        ///
        /// Generate an encoded string from a complex hyperlink
        public func post(_ body: PowertoolsAPI.InputString? = nil) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var validateEmail: ValidateEmail {
        ValidateEmail(path: "/ValidateEmail")
    }

    public struct ValidateEmail {
        /// Path: `/ValidateEmail`
        public let path: String

        /// Text - Validate email
        ///
        /// Determine if an email address is valid
        public func post(source: String) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: ["source": source])
        }
    }
}

extension Paths {
    public static var jsontoHTML: JSONtoHTML {
        JSONtoHTML(path: "/JSONtoHTML")
    }

    public struct JSONtoHTML {
        /// Path: `/JSONtoHTML`
        public let path: String

        /// Data - JSON to HTML Table
        ///
        /// Convert a JSON array to an HTML table
        public func post(_ body: PowertoolsAPI.InputJSONConversionHTML? = nil) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var jsontoCSV: JSONtoCSV {
        JSONtoCSV(path: "/JSONtoCSV")
    }

    public struct JSONtoCSV {
        /// Path: `/JSONtoCSV`
        public let path: String

        /// Data - JSON to CSV
        ///
        /// Convert a JSON array to CSV string
        public func post(_ body: PowertoolsAPI.InputJSONConversionCSV? = nil) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var jsontoXML: JSONtoXML {
        JSONtoXML(path: "/JSONtoXML")
    }

    public struct JSONtoXML {
        /// Path: `/JSONtoXML`
        public let path: String

        /// Data - JSON to XML
        ///
        /// Convert a JSON object to an XML string
        public func post(_ body: PowertoolsAPI.InputJSONConversionXML? = nil) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var cSVtoJSON: CSVtoJSON {
        CSVtoJSON(path: "/CSVtoJSON")
    }

    public struct CSVtoJSON {
        /// Path: `/CSVtoJSON`
        public let path: String

        /// Data - CSV to JSON
        ///
        /// Convert a CSV string to a JSON array
        public func post(_ body: PowertoolsAPI.InputCsvConversionJSON? = nil) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var xMLtoJSON: XMLtoJSON {
        XMLtoJSON(path: "/XMLtoJSON")
    }

    public struct XMLtoJSON {
        /// Path: `/XMLtoJSON`
        public let path: String

        /// Data - XML to JSON
        ///
        /// Convert an XML string to a JSON object
        public func post(_ body: PowertoolsAPI.InputXmlConversionJSON? = nil) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var queryJSON: QueryJSON {
        QueryJSON(path: "/QueryJSON")
    }

    public struct QueryJSON {
        /// Path: `/QueryJSON`
        public let path: String

        /// Data - Query JSON
        ///
        /// Query a JSON object using a JSONPath expression
        public func post(_ body: PowertoolsAPI.InputDataQuery? = nil) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var queryXML: QueryXML {
        QueryXML(path: "/QueryXML")
    }

    public struct QueryXML {
        /// Path: `/QueryXML`
        public let path: String

        /// Data - Query XML
        ///
        /// Query an XML string using an XPath expression
        public func post(_ body: PowertoolsAPI.InputDataQuery? = nil) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var convertImage: ConvertImage {
        ConvertImage(path: "/ConvertImage")
    }

    public struct ConvertImage {
        /// Path: `/ConvertImage`
        public let path: String

        /// Files - Convert Image
        ///
        /// Convert an image from one format to another
        public func post(_ body: Data) -> Request<Data> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var resizeImage: ResizeImage {
        ResizeImage(path: "/ResizeImage")
    }

    public struct ResizeImage {
        /// Path: `/ResizeImage`
        public let path: String

        /// Files - Resize Image
        ///
        /// Resize an image
        public func post(_ body: Data) -> Request<Data> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var rotateImage: RotateImage {
        RotateImage(path: "/RotateImage")
    }

    public struct RotateImage {
        /// Path: `/RotateImage`
        public let path: String

        /// Files - Rotate Image
        ///
        /// Rotate an image by specified number of degrees
        public func post(_ body: Data) -> Request<String> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var flipImage: FlipImage {
        FlipImage(path: "/FlipImage")
    }

    public struct FlipImage {
        /// Path: `/FlipImage`
        public let path: String

        /// Files - Flip Image
        ///
        /// Flip an image (horizontal or vertical)
        public func post(_ body: Data) -> Request<String> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var watermarkImage: WatermarkImage {
        WatermarkImage(path: "/WatermarkImage")
    }

    public struct WatermarkImage {
        /// Path: `/WatermarkImage`
        public let path: String

        /// Files - Watermark Image
        ///
        /// Add watermark text to an image
        public func post(_ body: Data) -> Request<String> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var cropImage: CropImage {
        CropImage(path: "/CropImage")
    }

    public struct CropImage {
        /// Path: `/CropImage`
        public let path: String

        /// Files - Crop Image
        ///
        /// Crop an image
        public func post(_ body: Data) -> Request<Data> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var generateQRCode: GenerateQRCode {
        GenerateQRCode(path: "/GenerateQRCode")
    }

    public struct GenerateQRCode {
        /// Path: `/GenerateQRCode`
        public let path: String

        /// Files - Generate QR code
        ///
        /// Generate a QR code image
        public func post(_ body: PowertoolsAPI.InputQRCode? = nil) -> Request<Data> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var fileToString: FileToString {
        FileToString(path: "/FileToString")
    }

    public struct FileToString {
        /// Path: `/FileToString`
        public let path: String

        /// Files - File to string
        ///
        /// Convert a file to a Base64 string
        public func post(_ body: Data) -> Request<PowertoolsAPI.OutputString> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var stringToFile: StringToFile {
        StringToFile(path: "/StringToFile")
    }

    public struct StringToFile {
        /// Path: `/StringToFile`
        public let path: String

        /// Text - String to File
        ///
        /// Convert text string to file
        public func post(_ body: PowertoolsAPI.InputStringToFile? = nil) -> Request<String> {
            .post(path, body: body)
        }
    }
}

public enum Paths {}
