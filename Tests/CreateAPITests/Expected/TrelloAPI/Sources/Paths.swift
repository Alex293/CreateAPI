// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import Get
import URLQueryEncoder

extension Paths {
    public static var actions: Actions {
        Actions(path: "/actions")
    }

    public struct Actions {
        /// Path: `/actions`
        public let path: String
    }
}

extension Paths.Actions {
    public func idAction(_ idAction: String) -> WithIDAction {
        WithIDAction(path: "\(path)/\(idAction)")
    }

    public struct WithIDAction {
        /// Path: `/actions/{idAction}`
        public let path: String

        /// GetActionsByIdAction()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var display: String?
            public var entities: String?
            public var fields: String?
            public var member: String?
            public var memberFields: String?
            public var memberCreator: String?
            public var memberCreatorFields: String?
            public var key: String
            public var token: String

            public init(display: String? = nil, entities: String? = nil, fields: String? = nil, member: String? = nil, memberFields: String? = nil, memberCreator: String? = nil, memberCreatorFields: String? = nil, key: String, token: String) {
                self.display = display
                self.entities = entities
                self.fields = fields
                self.member = member
                self.memberFields = memberFields
                self.memberCreator = memberCreator
                self.memberCreatorFields = memberCreatorFields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["display": display])
                encoder.encode(["entities": entities])
                encoder.encode(["fields": fields])
                encoder.encode(["member": member])
                encoder.encode(["member_fields": memberFields])
                encoder.encode(["memberCreator": memberCreator])
                encoder.encode(["memberCreator_fields": memberCreatorFields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// UpdateActionsByIdAction()
        public func put(key: String, token: String, _ body: TrelloAPI.Actions) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// DeleteActionsByIdAction()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Actions.WithIDAction {
    public var board: Board {
        Board(path: path + "/board")
    }

    public struct Board {
        /// Path: `/actions/{idAction}/board`
        public let path: String

        /// GetActionsBoardByIdAction()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Actions.WithIDAction.Board {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/actions/{idAction}/board/{field}`
        public let path: String

        /// GetActionsBoardByIdActionByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Actions.WithIDAction {
    public var card: Card {
        Card(path: path + "/card")
    }

    public struct Card {
        /// Path: `/actions/{idAction}/card`
        public let path: String

        /// GetActionsCardByIdAction()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Actions.WithIDAction.Card {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/actions/{idAction}/card/{field}`
        public let path: String

        /// GetActionsCardByIdActionByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Actions.WithIDAction {
    public var display: Display {
        Display(path: path + "/display")
    }

    public struct Display {
        /// Path: `/actions/{idAction}/display`
        public let path: String

        /// GetActionsDisplayByIdAction()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Actions.WithIDAction {
    public var entities: Entities {
        Entities(path: path + "/entities")
    }

    public struct Entities {
        /// Path: `/actions/{idAction}/entities`
        public let path: String

        /// GetActionsEntitiesByIdAction()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Actions.WithIDAction {
    public var list: List {
        List(path: path + "/list")
    }

    public struct List {
        /// Path: `/actions/{idAction}/list`
        public let path: String

        /// GetActionsListByIdAction()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Actions.WithIDAction.List {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/actions/{idAction}/list/{field}`
        public let path: String

        /// GetActionsListByIdActionByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Actions.WithIDAction {
    public var member: Member {
        Member(path: path + "/member")
    }

    public struct Member {
        /// Path: `/actions/{idAction}/member`
        public let path: String

        /// GetActionsMemberByIdAction()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Actions.WithIDAction.Member {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/actions/{idAction}/member/{field}`
        public let path: String

        /// GetActionsMemberByIdActionByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Actions.WithIDAction {
    public var memberCreator: MemberCreator {
        MemberCreator(path: path + "/memberCreator")
    }

    public struct MemberCreator {
        /// Path: `/actions/{idAction}/memberCreator`
        public let path: String

        /// GetActionsMemberCreatorByIdAction()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Actions.WithIDAction.MemberCreator {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/actions/{idAction}/memberCreator/{field}`
        public let path: String

        /// GetActionsMemberCreatorByIdActionByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Actions.WithIDAction {
    public var organization: Organization {
        Organization(path: path + "/organization")
    }

    public struct Organization {
        /// Path: `/actions/{idAction}/organization`
        public let path: String

        /// GetActionsOrganizationByIdAction()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Actions.WithIDAction.Organization {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/actions/{idAction}/organization/{field}`
        public let path: String

        /// GetActionsOrganizationByIdActionByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Actions.WithIDAction {
    public var text: Text {
        Text(path: path + "/text")
    }

    public struct Text {
        /// Path: `/actions/{idAction}/text`
        public let path: String

        /// UpdateActionsTextByIdAction()
        public func put(key: String, token: String, _ body: TrelloAPI.ActionsText) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Actions.WithIDAction {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/actions/{idAction}/{field}`
        public let path: String

        /// GetActionsByIdActionByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths {
    public static var batch: Batch {
        Batch(path: "/batch")
    }

    public struct Batch {
        /// Path: `/batch`
        public let path: String

        /// GetBatch()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var urls: String
            public var key: String
            public var token: String

            public init(urls: String, key: String, token: String) {
                self.urls = urls
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["urls": urls])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths {
    public static var boards: Boards {
        Boards(path: "/boards")
    }

    public struct Boards {
        /// Path: `/boards`
        public let path: String

        /// AddBoards()
        public func post(key: String, token: String, _ body: TrelloAPI.Boards) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards {
    public func idBoard(_ idBoard: String) -> WithIDBoard {
        WithIDBoard(path: "\(path)/\(idBoard)")
    }

    public struct WithIDBoard {
        /// Path: `/boards/{idBoard}`
        public let path: String

        /// GetBoardsByIdBoard()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var actions: String?
            public var actionsEntities: String?
            public var actionsDisplay: String?
            public var actionsFormat: String?
            public var actionsSince: String?
            public var actionsLimit: String?
            public var actionFields: String?
            public var actionMember: String?
            public var actionMemberFields: String?
            public var actionMemberCreator: String?
            public var actionMemberCreatorFields: String?
            public var cards: String?
            public var cardFields: String?
            public var cardAttachments: String?
            public var cardAttachmentFields: String?
            public var cardChecklists: String?
            public var cardStickers: String?
            public var boardStars: String?
            public var labels: String?
            public var labelFields: String?
            public var labelsLimit: String?
            public var lists: String?
            public var listFields: String?
            public var memberships: String?
            public var membershipsMember: String?
            public var membershipsMemberFields: String?
            public var members: String?
            public var memberFields: String?
            public var membersInvited: String?
            public var membersInvitedFields: String?
            public var checklists: String?
            public var checklistFields: String?
            public var organization: String?
            public var organizationFields: String?
            public var organizationMemberships: String?
            public var myPrefs: String?
            public var fields: String?
            public var key: String
            public var token: String

            public init(actions: String? = nil, actionsEntities: String? = nil, actionsDisplay: String? = nil, actionsFormat: String? = nil, actionsSince: String? = nil, actionsLimit: String? = nil, actionFields: String? = nil, actionMember: String? = nil, actionMemberFields: String? = nil, actionMemberCreator: String? = nil, actionMemberCreatorFields: String? = nil, cards: String? = nil, cardFields: String? = nil, cardAttachments: String? = nil, cardAttachmentFields: String? = nil, cardChecklists: String? = nil, cardStickers: String? = nil, boardStars: String? = nil, labels: String? = nil, labelFields: String? = nil, labelsLimit: String? = nil, lists: String? = nil, listFields: String? = nil, memberships: String? = nil, membershipsMember: String? = nil, membershipsMemberFields: String? = nil, members: String? = nil, memberFields: String? = nil, membersInvited: String? = nil, membersInvitedFields: String? = nil, checklists: String? = nil, checklistFields: String? = nil, organization: String? = nil, organizationFields: String? = nil, organizationMemberships: String? = nil, myPrefs: String? = nil, fields: String? = nil, key: String, token: String) {
                self.actions = actions
                self.actionsEntities = actionsEntities
                self.actionsDisplay = actionsDisplay
                self.actionsFormat = actionsFormat
                self.actionsSince = actionsSince
                self.actionsLimit = actionsLimit
                self.actionFields = actionFields
                self.actionMember = actionMember
                self.actionMemberFields = actionMemberFields
                self.actionMemberCreator = actionMemberCreator
                self.actionMemberCreatorFields = actionMemberCreatorFields
                self.cards = cards
                self.cardFields = cardFields
                self.cardAttachments = cardAttachments
                self.cardAttachmentFields = cardAttachmentFields
                self.cardChecklists = cardChecklists
                self.cardStickers = cardStickers
                self.boardStars = boardStars
                self.labels = labels
                self.labelFields = labelFields
                self.labelsLimit = labelsLimit
                self.lists = lists
                self.listFields = listFields
                self.memberships = memberships
                self.membershipsMember = membershipsMember
                self.membershipsMemberFields = membershipsMemberFields
                self.members = members
                self.memberFields = memberFields
                self.membersInvited = membersInvited
                self.membersInvitedFields = membersInvitedFields
                self.checklists = checklists
                self.checklistFields = checklistFields
                self.organization = organization
                self.organizationFields = organizationFields
                self.organizationMemberships = organizationMemberships
                self.myPrefs = myPrefs
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["actions": actions])
                encoder.encode(["actions_entities": actionsEntities])
                encoder.encode(["actions_display": actionsDisplay])
                encoder.encode(["actions_format": actionsFormat])
                encoder.encode(["actions_since": actionsSince])
                encoder.encode(["actions_limit": actionsLimit])
                encoder.encode(["action_fields": actionFields])
                encoder.encode(["action_member": actionMember])
                encoder.encode(["action_member_fields": actionMemberFields])
                encoder.encode(["action_memberCreator": actionMemberCreator])
                encoder.encode(["action_memberCreator_fields": actionMemberCreatorFields])
                encoder.encode(["cards": cards])
                encoder.encode(["card_fields": cardFields])
                encoder.encode(["card_attachments": cardAttachments])
                encoder.encode(["card_attachment_fields": cardAttachmentFields])
                encoder.encode(["card_checklists": cardChecklists])
                encoder.encode(["card_stickers": cardStickers])
                encoder.encode(["boardStars": boardStars])
                encoder.encode(["labels": labels])
                encoder.encode(["label_fields": labelFields])
                encoder.encode(["labels_limit": labelsLimit])
                encoder.encode(["lists": lists])
                encoder.encode(["list_fields": listFields])
                encoder.encode(["memberships": memberships])
                encoder.encode(["memberships_member": membershipsMember])
                encoder.encode(["memberships_member_fields": membershipsMemberFields])
                encoder.encode(["members": members])
                encoder.encode(["member_fields": memberFields])
                encoder.encode(["membersInvited": membersInvited])
                encoder.encode(["membersInvited_fields": membersInvitedFields])
                encoder.encode(["checklists": checklists])
                encoder.encode(["checklist_fields": checklistFields])
                encoder.encode(["organization": organization])
                encoder.encode(["organization_fields": organizationFields])
                encoder.encode(["organization_memberships": organizationMemberships])
                encoder.encode(["myPrefs": myPrefs])
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// UpdateBoardsByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.Boards) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard {
    public var actions: Actions {
        Actions(path: path + "/actions")
    }

    public struct Actions {
        /// Path: `/boards/{idBoard}/actions`
        public let path: String

        /// GetBoardsActionsByIdBoard()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var entities: String?
            public var display: String?
            public var filter: String?
            public var fields: String?
            public var limit: String?
            public var format: String?
            public var since: String?
            public var before: String?
            public var page: String?
            public var idModels: String?
            public var member: String?
            public var memberFields: String?
            public var memberCreator: String?
            public var memberCreatorFields: String?
            public var key: String
            public var token: String

            public init(entities: String? = nil, display: String? = nil, filter: String? = nil, fields: String? = nil, limit: String? = nil, format: String? = nil, since: String? = nil, before: String? = nil, page: String? = nil, idModels: String? = nil, member: String? = nil, memberFields: String? = nil, memberCreator: String? = nil, memberCreatorFields: String? = nil, key: String, token: String) {
                self.entities = entities
                self.display = display
                self.filter = filter
                self.fields = fields
                self.limit = limit
                self.format = format
                self.since = since
                self.before = before
                self.page = page
                self.idModels = idModels
                self.member = member
                self.memberFields = memberFields
                self.memberCreator = memberCreator
                self.memberCreatorFields = memberCreatorFields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["entities": entities])
                encoder.encode(["display": display])
                encoder.encode(["filter": filter])
                encoder.encode(["fields": fields])
                encoder.encode(["limit": limit])
                encoder.encode(["format": format])
                encoder.encode(["since": since])
                encoder.encode(["before": before])
                encoder.encode(["page": page])
                encoder.encode(["idModels": idModels])
                encoder.encode(["member": member])
                encoder.encode(["member_fields": memberFields])
                encoder.encode(["memberCreator": memberCreator])
                encoder.encode(["memberCreator_fields": memberCreatorFields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Boards.WithIDBoard {
    public var boardStars: BoardStars {
        BoardStars(path: path + "/boardStars")
    }

    public struct BoardStars {
        /// Path: `/boards/{idBoard}/boardStars`
        public let path: String

        /// GetBoardsBoardStarsByIdBoard()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var key: String
            public var token: String

            public init(filter: String? = nil, key: String, token: String) {
                self.filter = filter
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["filter": filter])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Boards.WithIDBoard {
    public var calendarKey: CalendarKey {
        CalendarKey(path: path + "/calendarKey")
    }

    public struct CalendarKey {
        /// Path: `/boards/{idBoard}/calendarKey`
        public let path: String
    }
}

extension Paths.Boards.WithIDBoard.CalendarKey {
    public var generate: Generate {
        Generate(path: path + "/generate")
    }

    public struct Generate {
        /// Path: `/boards/{idBoard}/calendarKey/generate`
        public let path: String

        /// AddBoardsCalendarKeyGenerateByIdBoard()
        public func post(key: String, token: String) -> Request<Void> {
            .post(path, query: makePostQuery(key, token))
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard {
    public var cards: Cards {
        Cards(path: path + "/cards")
    }

    public struct Cards {
        /// Path: `/boards/{idBoard}/cards`
        public let path: String

        /// GetBoardsCardsByIdBoard()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var actions: String?
            public var attachments: String?
            public var attachmentFields: String?
            public var stickers: String?
            public var members: String?
            public var memberFields: String?
            public var checkItemStates: String?
            public var checklists: String?
            public var limit: String?
            public var since: String?
            public var before: String?
            public var filter: String?
            public var fields: String?
            public var key: String
            public var token: String

            public init(actions: String? = nil, attachments: String? = nil, attachmentFields: String? = nil, stickers: String? = nil, members: String? = nil, memberFields: String? = nil, checkItemStates: String? = nil, checklists: String? = nil, limit: String? = nil, since: String? = nil, before: String? = nil, filter: String? = nil, fields: String? = nil, key: String, token: String) {
                self.actions = actions
                self.attachments = attachments
                self.attachmentFields = attachmentFields
                self.stickers = stickers
                self.members = members
                self.memberFields = memberFields
                self.checkItemStates = checkItemStates
                self.checklists = checklists
                self.limit = limit
                self.since = since
                self.before = before
                self.filter = filter
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["actions": actions])
                encoder.encode(["attachments": attachments])
                encoder.encode(["attachment_fields": attachmentFields])
                encoder.encode(["stickers": stickers])
                encoder.encode(["members": members])
                encoder.encode(["member_fields": memberFields])
                encoder.encode(["checkItemStates": checkItemStates])
                encoder.encode(["checklists": checklists])
                encoder.encode(["limit": limit])
                encoder.encode(["since": since])
                encoder.encode(["before": before])
                encoder.encode(["filter": filter])
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Boards.WithIDBoard.Cards {
    public func filter(_ filter: String) -> WithFilter {
        WithFilter(path: "\(path)/\(filter)")
    }

    public struct WithFilter {
        /// Path: `/boards/{idBoard}/cards/{filter}`
        public let path: String

        /// GetBoardsCardsByIdBoardByFilter()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.Cards {
    public func idCard(_ idCard: String) -> WithIDCard {
        WithIDCard(path: "\(path)/\(idCard)")
    }

    public struct WithIDCard {
        /// Path: `/boards/{idBoard}/cards/{idCard}`
        public let path: String

        /// GetBoardsCardsByIdBoardByIdCard()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var attachments: String?
            public var attachmentFields: String?
            public var actions: String?
            public var actionsEntities: String?
            public var actionsDisplay: String?
            public var actionsLimit: String?
            public var actionFields: String?
            public var actionMemberCreatorFields: String?
            public var members: String?
            public var memberFields: String?
            public var checkItemStates: String?
            public var checkItemStateFields: String?
            public var labels: String?
            public var checklists: String?
            public var checklistFields: String?
            public var fields: String?
            public var key: String
            public var token: String

            public init(attachments: String? = nil, attachmentFields: String? = nil, actions: String? = nil, actionsEntities: String? = nil, actionsDisplay: String? = nil, actionsLimit: String? = nil, actionFields: String? = nil, actionMemberCreatorFields: String? = nil, members: String? = nil, memberFields: String? = nil, checkItemStates: String? = nil, checkItemStateFields: String? = nil, labels: String? = nil, checklists: String? = nil, checklistFields: String? = nil, fields: String? = nil, key: String, token: String) {
                self.attachments = attachments
                self.attachmentFields = attachmentFields
                self.actions = actions
                self.actionsEntities = actionsEntities
                self.actionsDisplay = actionsDisplay
                self.actionsLimit = actionsLimit
                self.actionFields = actionFields
                self.actionMemberCreatorFields = actionMemberCreatorFields
                self.members = members
                self.memberFields = memberFields
                self.checkItemStates = checkItemStates
                self.checkItemStateFields = checkItemStateFields
                self.labels = labels
                self.checklists = checklists
                self.checklistFields = checklistFields
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["attachments": attachments])
                encoder.encode(["attachment_fields": attachmentFields])
                encoder.encode(["actions": actions])
                encoder.encode(["actions_entities": actionsEntities])
                encoder.encode(["actions_display": actionsDisplay])
                encoder.encode(["actions_limit": actionsLimit])
                encoder.encode(["action_fields": actionFields])
                encoder.encode(["action_memberCreator_fields": actionMemberCreatorFields])
                encoder.encode(["members": members])
                encoder.encode(["member_fields": memberFields])
                encoder.encode(["checkItemStates": checkItemStates])
                encoder.encode(["checkItemState_fields": checkItemStateFields])
                encoder.encode(["labels": labels])
                encoder.encode(["checklists": checklists])
                encoder.encode(["checklist_fields": checklistFields])
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Boards.WithIDBoard {
    public var checklists: Checklists {
        Checklists(path: path + "/checklists")
    }

    public struct Checklists {
        /// Path: `/boards/{idBoard}/checklists`
        public let path: String

        /// GetBoardsChecklistsByIdBoard()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var cards: String?
            public var cardFields: String?
            public var checkItems: String?
            public var checkItemFields: String?
            public var filter: String?
            public var fields: String?
            public var key: String
            public var token: String

            public init(cards: String? = nil, cardFields: String? = nil, checkItems: String? = nil, checkItemFields: String? = nil, filter: String? = nil, fields: String? = nil, key: String, token: String) {
                self.cards = cards
                self.cardFields = cardFields
                self.checkItems = checkItems
                self.checkItemFields = checkItemFields
                self.filter = filter
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["cards": cards])
                encoder.encode(["card_fields": cardFields])
                encoder.encode(["checkItems": checkItems])
                encoder.encode(["checkItem_fields": checkItemFields])
                encoder.encode(["filter": filter])
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// AddBoardsChecklistsByIdBoard()
        public func post(key: String, token: String, _ body: TrelloAPI.BoardsChecklists) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard {
    public var closed: Closed {
        Closed(path: path + "/closed")
    }

    public struct Closed {
        /// Path: `/boards/{idBoard}/closed`
        public let path: String

        /// UpdateBoardsClosedByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.BoardsClosed) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard {
    public var deltas: Deltas {
        Deltas(path: path + "/deltas")
    }

    public struct Deltas {
        /// Path: `/boards/{idBoard}/deltas`
        public let path: String

        /// GetBoardsDeltasByIdBoard()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var tags: String
            public var ixLastUpdate: String
            public var key: String
            public var token: String

            public init(tags: String, ixLastUpdate: String, key: String, token: String) {
                self.tags = tags
                self.ixLastUpdate = ixLastUpdate
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["tags": tags])
                encoder.encode(["ixLastUpdate": ixLastUpdate])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Boards.WithIDBoard {
    public var desc: Desc {
        Desc(path: path + "/desc")
    }

    public struct Desc {
        /// Path: `/boards/{idBoard}/desc`
        public let path: String

        /// UpdateBoardsDescByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.BoardsDesc) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard {
    public var emailKey: EmailKey {
        EmailKey(path: path + "/emailKey")
    }

    public struct EmailKey {
        /// Path: `/boards/{idBoard}/emailKey`
        public let path: String
    }
}

extension Paths.Boards.WithIDBoard.EmailKey {
    public var generate: Generate {
        Generate(path: path + "/generate")
    }

    public struct Generate {
        /// Path: `/boards/{idBoard}/emailKey/generate`
        public let path: String

        /// AddBoardsEmailKeyGenerateByIdBoard()
        public func post(key: String, token: String) -> Request<Void> {
            .post(path, query: makePostQuery(key, token))
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard {
    public var idOrganization: IDOrganization {
        IDOrganization(path: path + "/idOrganization")
    }

    public struct IDOrganization {
        /// Path: `/boards/{idBoard}/idOrganization`
        public let path: String

        /// UpdateBoardsIdOrganizationByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.BoardsIDOrganization) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard {
    public var labelNames: LabelNames {
        LabelNames(path: path + "/labelNames")
    }

    public struct LabelNames {
        /// Path: `/boards/{idBoard}/labelNames`
        public let path: String
    }
}

extension Paths.Boards.WithIDBoard.LabelNames {
    public var blue: Blue {
        Blue(path: path + "/blue")
    }

    public struct Blue {
        /// Path: `/boards/{idBoard}/labelNames/blue`
        public let path: String

        /// UpdateBoardsLabelNamesBlueByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.LabelNamesBlue) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.LabelNames {
    public var green: Green {
        Green(path: path + "/green")
    }

    public struct Green {
        /// Path: `/boards/{idBoard}/labelNames/green`
        public let path: String

        /// UpdateBoardsLabelNamesGreenByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.LabelNamesGreen) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.LabelNames {
    public var orange: Orange {
        Orange(path: path + "/orange")
    }

    public struct Orange {
        /// Path: `/boards/{idBoard}/labelNames/orange`
        public let path: String

        /// UpdateBoardsLabelNamesOrangeByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.LabelNamesOrange) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.LabelNames {
    public var purple: Purple {
        Purple(path: path + "/purple")
    }

    public struct Purple {
        /// Path: `/boards/{idBoard}/labelNames/purple`
        public let path: String

        /// UpdateBoardsLabelNamesPurpleByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.LabelNamesPurple) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.LabelNames {
    public var red: Red {
        Red(path: path + "/red")
    }

    public struct Red {
        /// Path: `/boards/{idBoard}/labelNames/red`
        public let path: String

        /// UpdateBoardsLabelNamesRedByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.LabelNamesRed) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.LabelNames {
    public var yellow: Yellow {
        Yellow(path: path + "/yellow")
    }

    public struct Yellow {
        /// Path: `/boards/{idBoard}/labelNames/yellow`
        public let path: String

        /// UpdateBoardsLabelNamesYellowByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.LabelNamesYellow) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard {
    public var labels: Labels {
        Labels(path: path + "/labels")
    }

    public struct Labels {
        /// Path: `/boards/{idBoard}/labels`
        public let path: String

        /// GetBoardsLabelsByIdBoard()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var limit: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, limit: String? = nil, key: String, token: String) {
                self.fields = fields
                self.limit = limit
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["limit": limit])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// AddBoardsLabelsByIdBoard()
        public func post(key: String, token: String, _ body: TrelloAPI.BoardsLabels) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.Labels {
    public func idLabel(_ idLabel: String) -> WithIDLabel {
        WithIDLabel(path: "\(path)/\(idLabel)")
    }

    public struct WithIDLabel {
        /// Path: `/boards/{idBoard}/labels/{idLabel}`
        public let path: String

        /// GetBoardsLabelsByIdBoardByIdLabel()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Boards.WithIDBoard {
    public var lists: Lists {
        Lists(path: path + "/lists")
    }

    public struct Lists {
        /// Path: `/boards/{idBoard}/lists`
        public let path: String

        /// GetBoardsListsByIdBoard()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var cards: String?
            public var cardFields: String?
            public var filter: String?
            public var fields: String?
            public var key: String
            public var token: String

            public init(cards: String? = nil, cardFields: String? = nil, filter: String? = nil, fields: String? = nil, key: String, token: String) {
                self.cards = cards
                self.cardFields = cardFields
                self.filter = filter
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["cards": cards])
                encoder.encode(["card_fields": cardFields])
                encoder.encode(["filter": filter])
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// AddBoardsListsByIdBoard()
        public func post(key: String, token: String, _ body: TrelloAPI.BoardsLists) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.Lists {
    public func filter(_ filter: String) -> WithFilter {
        WithFilter(path: "\(path)/\(filter)")
    }

    public struct WithFilter {
        /// Path: `/boards/{idBoard}/lists/{filter}`
        public let path: String

        /// GetBoardsListsByIdBoardByFilter()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard {
    public var markAsViewed: MarkAsViewed {
        MarkAsViewed(path: path + "/markAsViewed")
    }

    public struct MarkAsViewed {
        /// Path: `/boards/{idBoard}/markAsViewed`
        public let path: String

        /// AddBoardsMarkAsViewedByIdBoard()
        public func post(key: String, token: String) -> Request<Void> {
            .post(path, query: makePostQuery(key, token))
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard {
    public var members: Members {
        Members(path: path + "/members")
    }

    public struct Members {
        /// Path: `/boards/{idBoard}/members`
        public let path: String

        /// GetBoardsMembersByIdBoard()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var fields: String?
            public var activity: String?
            public var key: String
            public var token: String

            public init(filter: String? = nil, fields: String? = nil, activity: String? = nil, key: String, token: String) {
                self.filter = filter
                self.fields = fields
                self.activity = activity
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["filter": filter])
                encoder.encode(["fields": fields])
                encoder.encode(["activity": activity])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// UpdateBoardsMembersByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.BoardsMembers) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.Members {
    public func filter(_ filter: String) -> WithFilter {
        WithFilter(path: "\(path)/\(filter)")
    }

    public struct WithFilter {
        /// Path: `/boards/{idBoard}/members/{filter}`
        public let path: String

        /// GetBoardsMembersByIdBoardByFilter()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.Members {
    public func idMember(_ idMember: String) -> WithIDMember {
        WithIDMember(path: "\(path)/\(idMember)")
    }

    public struct WithIDMember {
        /// Path: `/boards/{idBoard}/members/{idMember}`
        public let path: String

        /// UpdateBoardsMembersByIdBoardByIdMember()
        public func put(key: String, token: String, _ body: TrelloAPI.BoardsMembers) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// DeleteBoardsMembersByIdBoardByIdMember()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.Members.WithIDMember {
    public var cards: Cards {
        Cards(path: path + "/cards")
    }

    public struct Cards {
        /// Path: `/boards/{idBoard}/members/{idMember}/cards`
        public let path: String

        /// GetBoardsMembersCardsByIdBoardByIdMember()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var actions: String?
            public var attachments: String?
            public var attachmentFields: String?
            public var members: String?
            public var memberFields: String?
            public var checkItemStates: String?
            public var checklists: String?
            public var board: String?
            public var boardFields: String?
            public var list: String?
            public var listFields: String?
            public var filter: String?
            public var fields: String?
            public var key: String
            public var token: String

            public init(actions: String? = nil, attachments: String? = nil, attachmentFields: String? = nil, members: String? = nil, memberFields: String? = nil, checkItemStates: String? = nil, checklists: String? = nil, board: String? = nil, boardFields: String? = nil, list: String? = nil, listFields: String? = nil, filter: String? = nil, fields: String? = nil, key: String, token: String) {
                self.actions = actions
                self.attachments = attachments
                self.attachmentFields = attachmentFields
                self.members = members
                self.memberFields = memberFields
                self.checkItemStates = checkItemStates
                self.checklists = checklists
                self.board = board
                self.boardFields = boardFields
                self.list = list
                self.listFields = listFields
                self.filter = filter
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["actions": actions])
                encoder.encode(["attachments": attachments])
                encoder.encode(["attachment_fields": attachmentFields])
                encoder.encode(["members": members])
                encoder.encode(["member_fields": memberFields])
                encoder.encode(["checkItemStates": checkItemStates])
                encoder.encode(["checklists": checklists])
                encoder.encode(["board": board])
                encoder.encode(["board_fields": boardFields])
                encoder.encode(["list": list])
                encoder.encode(["list_fields": listFields])
                encoder.encode(["filter": filter])
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Boards.WithIDBoard {
    public var membersInvited: MembersInvited {
        MembersInvited(path: path + "/membersInvited")
    }

    public struct MembersInvited {
        /// Path: `/boards/{idBoard}/membersInvited`
        public let path: String

        /// GetBoardsMembersInvitedByIdBoard()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Boards.WithIDBoard.MembersInvited {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/boards/{idBoard}/membersInvited/{field}`
        public let path: String

        /// GetBoardsMembersInvitedByIdBoardByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard {
    public var memberships: Memberships {
        Memberships(path: path + "/memberships")
    }

    public struct Memberships {
        /// Path: `/boards/{idBoard}/memberships`
        public let path: String

        /// GetBoardsMembershipsByIdBoard()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var member: String?
            public var memberFields: String?
            public var key: String
            public var token: String

            public init(filter: String? = nil, member: String? = nil, memberFields: String? = nil, key: String, token: String) {
                self.filter = filter
                self.member = member
                self.memberFields = memberFields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["filter": filter])
                encoder.encode(["member": member])
                encoder.encode(["member_fields": memberFields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Boards.WithIDBoard.Memberships {
    public func idMembership(_ idMembership: String) -> WithIDMembership {
        WithIDMembership(path: "\(path)/\(idMembership)")
    }

    public struct WithIDMembership {
        /// Path: `/boards/{idBoard}/memberships/{idMembership}`
        public let path: String

        /// GetBoardsMembershipsByIdBoardByIdMembership()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var member: String?
            public var memberFields: String?
            public var key: String
            public var token: String

            public init(member: String? = nil, memberFields: String? = nil, key: String, token: String) {
                self.member = member
                self.memberFields = memberFields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["member": member])
                encoder.encode(["member_fields": memberFields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// UpdateBoardsMembershipsByIdBoardByIdMembership()
        public func put(key: String, token: String, _ body: TrelloAPI.BoardsMemberships) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard {
    public var myPrefs: MyPrefs {
        MyPrefs(path: path + "/myPrefs")
    }

    public struct MyPrefs {
        /// Path: `/boards/{idBoard}/myPrefs`
        public let path: String

        /// GetBoardsMyPrefsByIdBoard()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.MyPrefs {
    public var emailPosition: EmailPosition {
        EmailPosition(path: path + "/emailPosition")
    }

    public struct EmailPosition {
        /// Path: `/boards/{idBoard}/myPrefs/emailPosition`
        public let path: String

        /// UpdateBoardsMyPrefsEmailPositionByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.MyPrefsEmailPosition) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.MyPrefs {
    public var idEmailList: IDEmailList {
        IDEmailList(path: path + "/idEmailList")
    }

    public struct IDEmailList {
        /// Path: `/boards/{idBoard}/myPrefs/idEmailList`
        public let path: String

        /// UpdateBoardsMyPrefsIdEmailListByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.MyPrefsIDEmailList) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.MyPrefs {
    public var showListGuide: ShowListGuide {
        ShowListGuide(path: path + "/showListGuide")
    }

    public struct ShowListGuide {
        /// Path: `/boards/{idBoard}/myPrefs/showListGuide`
        public let path: String

        /// UpdateBoardsMyPrefsShowListGuideByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.MyPrefsShowListGuide) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.MyPrefs {
    public var showSidebar: ShowSidebar {
        ShowSidebar(path: path + "/showSidebar")
    }

    public struct ShowSidebar {
        /// Path: `/boards/{idBoard}/myPrefs/showSidebar`
        public let path: String

        /// UpdateBoardsMyPrefsShowSidebarByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.MyPrefsShowSidebar) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.MyPrefs {
    public var showSidebarActivity: ShowSidebarActivity {
        ShowSidebarActivity(path: path + "/showSidebarActivity")
    }

    public struct ShowSidebarActivity {
        /// Path: `/boards/{idBoard}/myPrefs/showSidebarActivity`
        public let path: String

        /// UpdateBoardsMyPrefsShowSidebarActivityByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.MyPrefsShowSidebarActivity) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.MyPrefs {
    public var showSidebarBoardActions: ShowSidebarBoardActions {
        ShowSidebarBoardActions(path: path + "/showSidebarBoardActions")
    }

    public struct ShowSidebarBoardActions {
        /// Path: `/boards/{idBoard}/myPrefs/showSidebarBoardActions`
        public let path: String

        /// UpdateBoardsMyPrefsShowSidebarBoardActionsByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.MyPrefsShowSidebarBoardActions) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.MyPrefs {
    public var showSidebarMembers: ShowSidebarMembers {
        ShowSidebarMembers(path: path + "/showSidebarMembers")
    }

    public struct ShowSidebarMembers {
        /// Path: `/boards/{idBoard}/myPrefs/showSidebarMembers`
        public let path: String

        /// UpdateBoardsMyPrefsShowSidebarMembersByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.MyPrefsShowSidebarMembers) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard {
    public var name: Name {
        Name(path: path + "/name")
    }

    public struct Name {
        /// Path: `/boards/{idBoard}/name`
        public let path: String

        /// UpdateBoardsNameByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.BoardsName) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard {
    public var organization: Organization {
        Organization(path: path + "/organization")
    }

    public struct Organization {
        /// Path: `/boards/{idBoard}/organization`
        public let path: String

        /// GetBoardsOrganizationByIdBoard()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Boards.WithIDBoard.Organization {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/boards/{idBoard}/organization/{field}`
        public let path: String

        /// GetBoardsOrganizationByIdBoardByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard {
    public var powerUps: PowerUps {
        PowerUps(path: path + "/powerUps")
    }

    public struct PowerUps {
        /// Path: `/boards/{idBoard}/powerUps`
        public let path: String

        /// AddBoardsPowerUpsByIdBoard()
        public func post(key: String, token: String, _ body: TrelloAPI.BoardsPowerUps) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.PowerUps {
    public func powerUp(_ powerUp: String) -> WithPowerUp {
        WithPowerUp(path: "\(path)/\(powerUp)")
    }

    public struct WithPowerUp {
        /// Path: `/boards/{idBoard}/powerUps/{powerUp}`
        public let path: String

        /// DeleteBoardsPowerUpsByIdBoardByPowerUp()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard {
    public var prefs: Prefs {
        Prefs(path: path + "/prefs")
    }

    public struct Prefs {
        /// Path: `/boards/{idBoard}/prefs`
        public let path: String
    }
}

extension Paths.Boards.WithIDBoard.Prefs {
    public var background: Background {
        Background(path: path + "/background")
    }

    public struct Background {
        /// Path: `/boards/{idBoard}/prefs/background`
        public let path: String

        /// UpdateBoardsPrefsBackgroundByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.PrefsBackground) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.Prefs {
    public var calendarFeedEnabled: CalendarFeedEnabled {
        CalendarFeedEnabled(path: path + "/calendarFeedEnabled")
    }

    public struct CalendarFeedEnabled {
        /// Path: `/boards/{idBoard}/prefs/calendarFeedEnabled`
        public let path: String

        /// UpdateBoardsPrefsCalendarFeedEnabledByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.PrefsCalendarFeedEnabled) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.Prefs {
    public var cardAging: CardAging {
        CardAging(path: path + "/cardAging")
    }

    public struct CardAging {
        /// Path: `/boards/{idBoard}/prefs/cardAging`
        public let path: String

        /// UpdateBoardsPrefsCardAgingByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.PrefsCardAging) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.Prefs {
    public var cardCovers: CardCovers {
        CardCovers(path: path + "/cardCovers")
    }

    public struct CardCovers {
        /// Path: `/boards/{idBoard}/prefs/cardCovers`
        public let path: String

        /// UpdateBoardsPrefsCardCoversByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.PrefsCardCovers) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.Prefs {
    public var comments: Comments {
        Comments(path: path + "/comments")
    }

    public struct Comments {
        /// Path: `/boards/{idBoard}/prefs/comments`
        public let path: String

        /// UpdateBoardsPrefsCommentsByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.PrefsComments) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.Prefs {
    public var invitations: Invitations {
        Invitations(path: path + "/invitations")
    }

    public struct Invitations {
        /// Path: `/boards/{idBoard}/prefs/invitations`
        public let path: String

        /// UpdateBoardsPrefsInvitationsByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.PrefsInvitations) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.Prefs {
    public var permissionLevel: PermissionLevel {
        PermissionLevel(path: path + "/permissionLevel")
    }

    public struct PermissionLevel {
        /// Path: `/boards/{idBoard}/prefs/permissionLevel`
        public let path: String

        /// UpdateBoardsPrefsPermissionLevelByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.PrefsPermissionLevel) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.Prefs {
    public var selfJoin: SelfJoin {
        SelfJoin(path: path + "/selfJoin")
    }

    public struct SelfJoin {
        /// Path: `/boards/{idBoard}/prefs/selfJoin`
        public let path: String

        /// UpdateBoardsPrefsSelfJoinByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.PrefsSelfJoin) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard.Prefs {
    public var voting: Voting {
        Voting(path: path + "/voting")
    }

    public struct Voting {
        /// Path: `/boards/{idBoard}/prefs/voting`
        public let path: String

        /// UpdateBoardsPrefsVotingByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.PrefsVoting) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard {
    public var subscribed: Subscribed {
        Subscribed(path: path + "/subscribed")
    }

    public struct Subscribed {
        /// Path: `/boards/{idBoard}/subscribed`
        public let path: String

        /// UpdateBoardsSubscribedByIdBoard()
        public func put(key: String, token: String, _ body: TrelloAPI.BoardsSubscribed) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Boards.WithIDBoard {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/boards/{idBoard}/{field}`
        public let path: String

        /// GetBoardsByIdBoardByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths {
    public static var cards: Cards {
        Cards(path: "/cards")
    }

    public struct Cards {
        /// Path: `/cards`
        public let path: String

        /// AddCards()
        public func post(key: String, token: String, _ body: TrelloAPI.Cards) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards {
    public func idCard(_ idCard: String) -> WithIDCard {
        WithIDCard(path: "\(path)/\(idCard)")
    }

    public struct WithIDCard {
        /// Path: `/cards/{idCard}`
        public let path: String

        /// GetCardsByIdCard()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var actions: String?
            public var actionsEntities: String?
            public var actionsDisplay: String?
            public var actionsLimit: String?
            public var actionFields: String?
            public var actionMemberCreatorFields: String?
            public var attachments: String?
            public var attachmentFields: String?
            public var members: String?
            public var memberFields: String?
            public var membersVoted: String?
            public var memberVotedFields: String?
            public var checkItemStates: String?
            public var checkItemStateFields: String?
            public var checklists: String?
            public var checklistFields: String?
            public var board: String?
            public var boardFields: String?
            public var list: String?
            public var listFields: String?
            public var stickers: String?
            public var stickerFields: String?
            public var fields: String?
            public var key: String
            public var token: String

            public init(actions: String? = nil, actionsEntities: String? = nil, actionsDisplay: String? = nil, actionsLimit: String? = nil, actionFields: String? = nil, actionMemberCreatorFields: String? = nil, attachments: String? = nil, attachmentFields: String? = nil, members: String? = nil, memberFields: String? = nil, membersVoted: String? = nil, memberVotedFields: String? = nil, checkItemStates: String? = nil, checkItemStateFields: String? = nil, checklists: String? = nil, checklistFields: String? = nil, board: String? = nil, boardFields: String? = nil, list: String? = nil, listFields: String? = nil, stickers: String? = nil, stickerFields: String? = nil, fields: String? = nil, key: String, token: String) {
                self.actions = actions
                self.actionsEntities = actionsEntities
                self.actionsDisplay = actionsDisplay
                self.actionsLimit = actionsLimit
                self.actionFields = actionFields
                self.actionMemberCreatorFields = actionMemberCreatorFields
                self.attachments = attachments
                self.attachmentFields = attachmentFields
                self.members = members
                self.memberFields = memberFields
                self.membersVoted = membersVoted
                self.memberVotedFields = memberVotedFields
                self.checkItemStates = checkItemStates
                self.checkItemStateFields = checkItemStateFields
                self.checklists = checklists
                self.checklistFields = checklistFields
                self.board = board
                self.boardFields = boardFields
                self.list = list
                self.listFields = listFields
                self.stickers = stickers
                self.stickerFields = stickerFields
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["actions": actions])
                encoder.encode(["actions_entities": actionsEntities])
                encoder.encode(["actions_display": actionsDisplay])
                encoder.encode(["actions_limit": actionsLimit])
                encoder.encode(["action_fields": actionFields])
                encoder.encode(["action_memberCreator_fields": actionMemberCreatorFields])
                encoder.encode(["attachments": attachments])
                encoder.encode(["attachment_fields": attachmentFields])
                encoder.encode(["members": members])
                encoder.encode(["member_fields": memberFields])
                encoder.encode(["membersVoted": membersVoted])
                encoder.encode(["memberVoted_fields": memberVotedFields])
                encoder.encode(["checkItemStates": checkItemStates])
                encoder.encode(["checkItemState_fields": checkItemStateFields])
                encoder.encode(["checklists": checklists])
                encoder.encode(["checklist_fields": checklistFields])
                encoder.encode(["board": board])
                encoder.encode(["board_fields": boardFields])
                encoder.encode(["list": list])
                encoder.encode(["list_fields": listFields])
                encoder.encode(["stickers": stickers])
                encoder.encode(["sticker_fields": stickerFields])
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// UpdateCardsByIdCard()
        public func put(key: String, token: String, _ body: TrelloAPI.Cards) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// DeleteCardsByIdCard()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard {
    public var actions: Actions {
        Actions(path: path + "/actions")
    }

    public struct Actions {
        /// Path: `/cards/{idCard}/actions`
        public let path: String

        /// GetCardsActionsByIdCard()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var entities: String?
            public var display: String?
            public var filter: String?
            public var fields: String?
            public var limit: String?
            public var format: String?
            public var since: String?
            public var before: String?
            public var page: String?
            public var idModels: String?
            public var member: String?
            public var memberFields: String?
            public var memberCreator: String?
            public var memberCreatorFields: String?
            public var key: String
            public var token: String

            public init(entities: String? = nil, display: String? = nil, filter: String? = nil, fields: String? = nil, limit: String? = nil, format: String? = nil, since: String? = nil, before: String? = nil, page: String? = nil, idModels: String? = nil, member: String? = nil, memberFields: String? = nil, memberCreator: String? = nil, memberCreatorFields: String? = nil, key: String, token: String) {
                self.entities = entities
                self.display = display
                self.filter = filter
                self.fields = fields
                self.limit = limit
                self.format = format
                self.since = since
                self.before = before
                self.page = page
                self.idModels = idModels
                self.member = member
                self.memberFields = memberFields
                self.memberCreator = memberCreator
                self.memberCreatorFields = memberCreatorFields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["entities": entities])
                encoder.encode(["display": display])
                encoder.encode(["filter": filter])
                encoder.encode(["fields": fields])
                encoder.encode(["limit": limit])
                encoder.encode(["format": format])
                encoder.encode(["since": since])
                encoder.encode(["before": before])
                encoder.encode(["page": page])
                encoder.encode(["idModels": idModels])
                encoder.encode(["member": member])
                encoder.encode(["member_fields": memberFields])
                encoder.encode(["memberCreator": memberCreator])
                encoder.encode(["memberCreator_fields": memberCreatorFields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Cards.WithIDCard.Actions {
    public var comments: Comments {
        Comments(path: path + "/comments")
    }

    public struct Comments {
        /// Path: `/cards/{idCard}/actions/comments`
        public let path: String

        /// AddCardsActionsCommentsByIdCard()
        public func post(key: String, token: String, _ body: TrelloAPI.ActionsComments) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard.Actions {
    public func idAction(_ idAction: String) -> WithIDAction {
        WithIDAction(path: "\(path)/\(idAction)")
    }

    public struct WithIDAction {
        /// Path: `/cards/{idCard}/actions/{idAction}`
        public let path: String
    }
}

extension Paths.Cards.WithIDCard.Actions.WithIDAction {
    public var comments: Comments {
        Comments(path: path + "/comments")
    }

    public struct Comments {
        /// Path: `/cards/{idCard}/actions/{idAction}/comments`
        public let path: String

        /// UpdateCardsActionsCommentsByIdCardByIdAction()
        ///
        /// This can only be done by the original author of the comment.
        public func put(key: String, token: String, _ body: TrelloAPI.CardsActionsComments) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// DeleteCardsActionsCommentsByIdCardByIdAction()
        ///
        /// This can only be done by the original author of the comment, or someone with higher permissions than the original author.
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard {
    public var attachments: Attachments {
        Attachments(path: path + "/attachments")
    }

    public struct Attachments {
        /// Path: `/cards/{idCard}/attachments`
        public let path: String

        /// GetCardsAttachmentsByIdCard()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var filter: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, filter: String? = nil, key: String, token: String) {
                self.fields = fields
                self.filter = filter
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["filter": filter])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// AddCardsAttachmentsByIdCard()
        public func post(key: String, token: String, _ body: TrelloAPI.CardsAttachments) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard.Attachments {
    public func idAttachment(_ idAttachment: String) -> WithIDAttachment {
        WithIDAttachment(path: "\(path)/\(idAttachment)")
    }

    public struct WithIDAttachment {
        /// Path: `/cards/{idCard}/attachments/{idAttachment}`
        public let path: String

        /// GetCardsAttachmentsByIdCardByIdAttachment()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// DeleteCardsAttachmentsByIdCardByIdAttachment()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard {
    public var board: Board {
        Board(path: path + "/board")
    }

    public struct Board {
        /// Path: `/cards/{idCard}/board`
        public let path: String

        /// GetCardsBoardByIdCard()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Cards.WithIDCard.Board {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/cards/{idCard}/board/{field}`
        public let path: String

        /// GetCardsBoardByIdCardByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard {
    public var checkItemStates: CheckItemStates {
        CheckItemStates(path: path + "/checkItemStates")
    }

    public struct CheckItemStates {
        /// Path: `/cards/{idCard}/checkItemStates`
        public let path: String

        /// GetCardsCheckItemStatesByIdCard()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Cards.WithIDCard {
    public var checklist: Checklist {
        Checklist(path: path + "/checklist")
    }

    public struct Checklist {
        /// Path: `/cards/{idCard}/checklist`
        public let path: String
    }
}

extension Paths.Cards.WithIDCard.Checklist {
    public func idChecklistCurrent(_ idChecklistCurrent: String) -> WithIDChecklistCurrent {
        WithIDChecklistCurrent(path: "\(path)/\(idChecklistCurrent)")
    }

    public struct WithIDChecklistCurrent {
        /// Path: `/cards/{idCard}/checklist/{idChecklistCurrent}`
        public let path: String
    }
}

extension Paths.Cards.WithIDCard.Checklist.WithIDChecklistCurrent {
    public var checkItem: CheckItem {
        CheckItem(path: path + "/checkItem")
    }

    public struct CheckItem {
        /// Path: `/cards/{idCard}/checklist/{idChecklistCurrent}/checkItem`
        public let path: String
    }
}

extension Paths.Cards.WithIDCard.Checklist.WithIDChecklistCurrent.CheckItem {
    public func idCheckItem(_ idCheckItem: String) -> WithIDCheckItem {
        WithIDCheckItem(path: "\(path)/\(idCheckItem)")
    }

    public struct WithIDCheckItem {
        /// Path: `/cards/{idCard}/checklist/{idChecklistCurrent}/checkItem/{idCheckItem}`
        public let path: String

        /// UpdateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem()
        public func put(key: String, token: String, _ body: TrelloAPI.CardsChecklistIDChecklistCurrentCheckItem) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard.Checklist {
    public func idChecklist(_ idChecklist: String) -> WithIDChecklist {
        WithIDChecklist(path: "\(path)/\(idChecklist)")
    }

    public struct WithIDChecklist {
        /// Path: `/cards/{idCard}/checklist/{idChecklist}`
        public let path: String
    }
}

extension Paths.Cards.WithIDCard.Checklist.WithIDChecklist {
    public var checkItem: CheckItem {
        CheckItem(path: path + "/checkItem")
    }

    public struct CheckItem {
        /// Path: `/cards/{idCard}/checklist/{idChecklist}/checkItem`
        public let path: String

        /// AddCardsChecklistCheckItemByIdCardByIdChecklist()
        public func post(key: String, token: String, _ body: TrelloAPI.CardsChecklistCheckItem) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard.Checklist.WithIDChecklist.CheckItem {
    public func idCheckItem(_ idCheckItem: String) -> WithIDCheckItem {
        WithIDCheckItem(path: "\(path)/\(idCheckItem)")
    }

    public struct WithIDCheckItem {
        /// Path: `/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}`
        public let path: String

        /// DeleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard.Checklist.WithIDChecklist.CheckItem.WithIDCheckItem {
    public var convertToCard: ConvertToCard {
        ConvertToCard(path: path + "/convertToCard")
    }

    public struct ConvertToCard {
        /// Path: `/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/convertToCard`
        public let path: String

        /// AddCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem()
        public func post(key: String, token: String) -> Request<Void> {
            .post(path, query: makePostQuery(key, token))
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard.Checklist.WithIDChecklist.CheckItem.WithIDCheckItem {
    public var name: Name {
        Name(path: path + "/name")
    }

    public struct Name {
        /// Path: `/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/name`
        public let path: String

        /// UpdateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem()
        public func put(key: String, token: String, _ body: TrelloAPI.CardsChecklistCheckItemName) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard.Checklist.WithIDChecklist.CheckItem.WithIDCheckItem {
    public var pos: Pos {
        Pos(path: path + "/pos")
    }

    public struct Pos {
        /// Path: `/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/pos`
        public let path: String

        /// UpdateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem()
        public func put(key: String, token: String, _ body: TrelloAPI.CardsChecklistCheckItemPos) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard.Checklist.WithIDChecklist.CheckItem.WithIDCheckItem {
    public var state: State {
        State(path: path + "/state")
    }

    public struct State {
        /// Path: `/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/state`
        public let path: String

        /// UpdateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem()
        public func put(key: String, token: String, _ body: TrelloAPI.CardsChecklistCheckItemState) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard {
    public var checklists: Checklists {
        Checklists(path: path + "/checklists")
    }

    public struct Checklists {
        /// Path: `/cards/{idCard}/checklists`
        public let path: String

        /// GetCardsChecklistsByIdCard()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var cards: String?
            public var cardFields: String?
            public var checkItems: String?
            public var checkItemFields: String?
            public var filter: String?
            public var fields: String?
            public var key: String
            public var token: String

            public init(cards: String? = nil, cardFields: String? = nil, checkItems: String? = nil, checkItemFields: String? = nil, filter: String? = nil, fields: String? = nil, key: String, token: String) {
                self.cards = cards
                self.cardFields = cardFields
                self.checkItems = checkItems
                self.checkItemFields = checkItemFields
                self.filter = filter
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["cards": cards])
                encoder.encode(["card_fields": cardFields])
                encoder.encode(["checkItems": checkItems])
                encoder.encode(["checkItem_fields": checkItemFields])
                encoder.encode(["filter": filter])
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// AddCardsChecklistsByIdCard()
        public func post(key: String, token: String, _ body: TrelloAPI.CardsChecklists) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard.Checklists {
    public func idChecklist(_ idChecklist: String) -> WithIDChecklist {
        WithIDChecklist(path: "\(path)/\(idChecklist)")
    }

    public struct WithIDChecklist {
        /// Path: `/cards/{idCard}/checklists/{idChecklist}`
        public let path: String

        /// DeleteCardsChecklistsByIdCardByIdChecklist()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard {
    public var closed: Closed {
        Closed(path: path + "/closed")
    }

    public struct Closed {
        /// Path: `/cards/{idCard}/closed`
        public let path: String

        /// UpdateCardsClosedByIdCard()
        public func put(key: String, token: String, _ body: TrelloAPI.CardsClosed) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard {
    public var desc: Desc {
        Desc(path: path + "/desc")
    }

    public struct Desc {
        /// Path: `/cards/{idCard}/desc`
        public let path: String

        /// UpdateCardsDescByIdCard()
        public func put(key: String, token: String, _ body: TrelloAPI.CardsDesc) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard {
    public var due: Due {
        Due(path: path + "/due")
    }

    public struct Due {
        /// Path: `/cards/{idCard}/due`
        public let path: String

        /// UpdateCardsDueByIdCard()
        public func put(key: String, token: String, _ body: TrelloAPI.CardsDue) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard {
    public var idAttachmentCover: IDAttachmentCover {
        IDAttachmentCover(path: path + "/idAttachmentCover")
    }

    public struct IDAttachmentCover {
        /// Path: `/cards/{idCard}/idAttachmentCover`
        public let path: String

        /// UpdateCardsIdAttachmentCoverByIdCard()
        public func put(key: String, token: String, _ body: TrelloAPI.CardsIDAttachmentCover) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard {
    public var idBoard: IDBoard {
        IDBoard(path: path + "/idBoard")
    }

    public struct IDBoard {
        /// Path: `/cards/{idCard}/idBoard`
        public let path: String

        /// UpdateCardsIdBoardByIdCard()
        public func put(key: String, token: String, _ body: TrelloAPI.CardsIDBoard) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard {
    public var idLabels: IDLabels {
        IDLabels(path: path + "/idLabels")
    }

    public struct IDLabels {
        /// Path: `/cards/{idCard}/idLabels`
        public let path: String

        /// AddCardsIdLabelsByIdCard()
        public func post(key: String, token: String, _ body: TrelloAPI.CardsIDLabels) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard.IDLabels {
    public func idLabel(_ idLabel: String) -> WithIDLabel {
        WithIDLabel(path: "\(path)/\(idLabel)")
    }

    public struct WithIDLabel {
        /// Path: `/cards/{idCard}/idLabels/{idLabel}`
        public let path: String

        /// DeleteCardsIdLabelsByIdCardByIdLabel()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard {
    public var idList: IDList {
        IDList(path: path + "/idList")
    }

    public struct IDList {
        /// Path: `/cards/{idCard}/idList`
        public let path: String

        /// UpdateCardsIdListByIdCard()
        public func put(key: String, token: String, _ body: TrelloAPI.CardsIDList) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard {
    public var idMembers: IDMembers {
        IDMembers(path: path + "/idMembers")
    }

    public struct IDMembers {
        /// Path: `/cards/{idCard}/idMembers`
        public let path: String

        /// AddCardsIdMembersByIdCard()
        public func post(key: String, token: String, _ body: TrelloAPI.CardsIDMembers) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// UpdateCardsIdMembersByIdCard()
        public func put(key: String, token: String, _ body: TrelloAPI.CardsIDMembers) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard.IDMembers {
    public func idMember(_ idMember: String) -> WithIDMember {
        WithIDMember(path: "\(path)/\(idMember)")
    }

    public struct WithIDMember {
        /// Path: `/cards/{idCard}/idMembers/{idMember}`
        public let path: String

        /// DeleteCardsIdMembersByIdCardByIdMember()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard {
    public var labels: Labels {
        Labels(path: path + "/labels")
    }

    public struct Labels {
        /// Path: `/cards/{idCard}/labels`
        public let path: String

        /// AddCardsLabelsByIdCard()
        public func post(key: String, token: String, _ body: TrelloAPI.CardsLabels) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// UpdateCardsLabelsByIdCard()
        public func put(key: String, token: String, _ body: TrelloAPI.CardsLabels) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard.Labels {
    public func color(_ color: String) -> WithColor {
        WithColor(path: "\(path)/\(color)")
    }

    public struct WithColor {
        /// Path: `/cards/{idCard}/labels/{color}`
        public let path: String

        /// DeleteCardsLabelsByIdCardByColor()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard {
    public var list: List {
        List(path: path + "/list")
    }

    public struct List {
        /// Path: `/cards/{idCard}/list`
        public let path: String

        /// GetCardsListByIdCard()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Cards.WithIDCard.List {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/cards/{idCard}/list/{field}`
        public let path: String

        /// GetCardsListByIdCardByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard {
    public var markAssociatedNotificationsRead: MarkAssociatedNotificationsRead {
        MarkAssociatedNotificationsRead(path: path + "/markAssociatedNotificationsRead")
    }

    public struct MarkAssociatedNotificationsRead {
        /// Path: `/cards/{idCard}/markAssociatedNotificationsRead`
        public let path: String

        /// AddCardsMarkAssociatedNotificationsReadByIdCard()
        public func post(key: String, token: String) -> Request<Void> {
            .post(path, query: makePostQuery(key, token))
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard {
    public var members: Members {
        Members(path: path + "/members")
    }

    public struct Members {
        /// Path: `/cards/{idCard}/members`
        public let path: String

        /// GetCardsMembersByIdCard()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Cards.WithIDCard {
    public var membersVoted: MembersVoted {
        MembersVoted(path: path + "/membersVoted")
    }

    public struct MembersVoted {
        /// Path: `/cards/{idCard}/membersVoted`
        public let path: String

        /// GetCardsMembersVotedByIdCard()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// AddCardsMembersVotedByIdCard()
        public func post(key: String, token: String, _ body: TrelloAPI.CardsMembersVoted) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard.MembersVoted {
    public func idMember(_ idMember: String) -> WithIDMember {
        WithIDMember(path: "\(path)/\(idMember)")
    }

    public struct WithIDMember {
        /// Path: `/cards/{idCard}/membersVoted/{idMember}`
        public let path: String

        /// DeleteCardsMembersVotedByIdCardByIdMember()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard {
    public var name: Name {
        Name(path: path + "/name")
    }

    public struct Name {
        /// Path: `/cards/{idCard}/name`
        public let path: String

        /// UpdateCardsNameByIdCard()
        public func put(key: String, token: String, _ body: TrelloAPI.CardsName) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard {
    public var pos: Pos {
        Pos(path: path + "/pos")
    }

    public struct Pos {
        /// Path: `/cards/{idCard}/pos`
        public let path: String

        /// UpdateCardsPosByIdCard()
        public func put(key: String, token: String, _ body: TrelloAPI.CardsPos) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard {
    public var stickers: Stickers {
        Stickers(path: path + "/stickers")
    }

    public struct Stickers {
        /// Path: `/cards/{idCard}/stickers`
        public let path: String

        /// GetCardsStickersByIdCard()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// AddCardsStickersByIdCard()
        public func post(key: String, token: String, _ body: TrelloAPI.CardsStickers) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard.Stickers {
    public func idSticker(_ idSticker: String) -> WithIDSticker {
        WithIDSticker(path: "\(path)/\(idSticker)")
    }

    public struct WithIDSticker {
        /// Path: `/cards/{idCard}/stickers/{idSticker}`
        public let path: String

        /// GetCardsStickersByIdCardByIdSticker()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// UpdateCardsStickersByIdCardByIdSticker()
        public func put(key: String, token: String, _ body: TrelloAPI.CardsStickers) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// DeleteCardsStickersByIdCardByIdSticker()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard {
    public var subscribed: Subscribed {
        Subscribed(path: path + "/subscribed")
    }

    public struct Subscribed {
        /// Path: `/cards/{idCard}/subscribed`
        public let path: String

        /// UpdateCardsSubscribedByIdCard()
        public func put(key: String, token: String, _ body: TrelloAPI.CardsSubscribed) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Cards.WithIDCard {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/cards/{idCard}/{field}`
        public let path: String

        /// GetCardsByIdCardByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths {
    public static var checklists: Checklists {
        Checklists(path: "/checklists")
    }

    public struct Checklists {
        /// Path: `/checklists`
        public let path: String

        /// AddChecklists()
        public func post(key: String, token: String, _ body: TrelloAPI.Checklists) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Checklists {
    public func idChecklist(_ idChecklist: String) -> WithIDChecklist {
        WithIDChecklist(path: "\(path)/\(idChecklist)")
    }

    public struct WithIDChecklist {
        /// Path: `/checklists/{idChecklist}`
        public let path: String

        /// GetChecklistsByIdChecklist()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var cards: String?
            public var cardFields: String?
            public var checkItems: String?
            public var checkItemFields: String?
            public var fields: String?
            public var key: String
            public var token: String

            public init(cards: String? = nil, cardFields: String? = nil, checkItems: String? = nil, checkItemFields: String? = nil, fields: String? = nil, key: String, token: String) {
                self.cards = cards
                self.cardFields = cardFields
                self.checkItems = checkItems
                self.checkItemFields = checkItemFields
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["cards": cards])
                encoder.encode(["card_fields": cardFields])
                encoder.encode(["checkItems": checkItems])
                encoder.encode(["checkItem_fields": checkItemFields])
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// UpdateChecklistsByIdChecklist()
        public func put(key: String, token: String, _ body: TrelloAPI.Checklists) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// DeleteChecklistsByIdChecklist()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Checklists.WithIDChecklist {
    public var board: Board {
        Board(path: path + "/board")
    }

    public struct Board {
        /// Path: `/checklists/{idChecklist}/board`
        public let path: String

        /// GetChecklistsBoardByIdChecklist()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Checklists.WithIDChecklist.Board {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/checklists/{idChecklist}/board/{field}`
        public let path: String

        /// GetChecklistsBoardByIdChecklistByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Checklists.WithIDChecklist {
    public var cards: Cards {
        Cards(path: path + "/cards")
    }

    public struct Cards {
        /// Path: `/checklists/{idChecklist}/cards`
        public let path: String

        /// GetChecklistsCardsByIdChecklist()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var actions: String?
            public var attachments: String?
            public var attachmentFields: String?
            public var stickers: String?
            public var members: String?
            public var memberFields: String?
            public var checkItemStates: String?
            public var checklists: String?
            public var limit: String?
            public var since: String?
            public var before: String?
            public var filter: String?
            public var fields: String?
            public var key: String
            public var token: String

            public init(actions: String? = nil, attachments: String? = nil, attachmentFields: String? = nil, stickers: String? = nil, members: String? = nil, memberFields: String? = nil, checkItemStates: String? = nil, checklists: String? = nil, limit: String? = nil, since: String? = nil, before: String? = nil, filter: String? = nil, fields: String? = nil, key: String, token: String) {
                self.actions = actions
                self.attachments = attachments
                self.attachmentFields = attachmentFields
                self.stickers = stickers
                self.members = members
                self.memberFields = memberFields
                self.checkItemStates = checkItemStates
                self.checklists = checklists
                self.limit = limit
                self.since = since
                self.before = before
                self.filter = filter
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["actions": actions])
                encoder.encode(["attachments": attachments])
                encoder.encode(["attachment_fields": attachmentFields])
                encoder.encode(["stickers": stickers])
                encoder.encode(["members": members])
                encoder.encode(["member_fields": memberFields])
                encoder.encode(["checkItemStates": checkItemStates])
                encoder.encode(["checklists": checklists])
                encoder.encode(["limit": limit])
                encoder.encode(["since": since])
                encoder.encode(["before": before])
                encoder.encode(["filter": filter])
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Checklists.WithIDChecklist.Cards {
    public func filter(_ filter: String) -> WithFilter {
        WithFilter(path: "\(path)/\(filter)")
    }

    public struct WithFilter {
        /// Path: `/checklists/{idChecklist}/cards/{filter}`
        public let path: String

        /// GetChecklistsCardsByIdChecklistByFilter()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Checklists.WithIDChecklist {
    public var checkItems: CheckItems {
        CheckItems(path: path + "/checkItems")
    }

    public struct CheckItems {
        /// Path: `/checklists/{idChecklist}/checkItems`
        public let path: String

        /// GetChecklistsCheckItemsByIdChecklist()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var fields: String?
            public var key: String
            public var token: String

            public init(filter: String? = nil, fields: String? = nil, key: String, token: String) {
                self.filter = filter
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["filter": filter])
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// AddChecklistsCheckItemsByIdChecklist()
        public func post(key: String, token: String, _ body: TrelloAPI.ChecklistsCheckItems) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Checklists.WithIDChecklist.CheckItems {
    public func idCheckItem(_ idCheckItem: String) -> WithIDCheckItem {
        WithIDCheckItem(path: "\(path)/\(idCheckItem)")
    }

    public struct WithIDCheckItem {
        /// Path: `/checklists/{idChecklist}/checkItems/{idCheckItem}`
        public let path: String

        /// GetChecklistsCheckItemsByIdChecklistByIdCheckItem()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// DeleteChecklistsCheckItemsByIdChecklistByIdCheckItem()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Checklists.WithIDChecklist {
    public var idCard: IDCard {
        IDCard(path: path + "/idCard")
    }

    public struct IDCard {
        /// Path: `/checklists/{idChecklist}/idCard`
        public let path: String

        /// UpdateChecklistsIdCardByIdChecklist()
        public func put(key: String, token: String, _ body: TrelloAPI.ChecklistsIDCard) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Checklists.WithIDChecklist {
    public var name: Name {
        Name(path: path + "/name")
    }

    public struct Name {
        /// Path: `/checklists/{idChecklist}/name`
        public let path: String

        /// UpdateChecklistsNameByIdChecklist()
        public func put(key: String, token: String, _ body: TrelloAPI.ChecklistsName) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Checklists.WithIDChecklist {
    public var pos: Pos {
        Pos(path: path + "/pos")
    }

    public struct Pos {
        /// Path: `/checklists/{idChecklist}/pos`
        public let path: String

        /// UpdateChecklistsPosByIdChecklist()
        public func put(key: String, token: String, _ body: TrelloAPI.ChecklistsPos) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Checklists.WithIDChecklist {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/checklists/{idChecklist}/{field}`
        public let path: String

        /// GetChecklistsByIdChecklistByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths {
    public static var labels: Labels {
        Labels(path: "/labels")
    }

    public struct Labels {
        /// Path: `/labels`
        public let path: String

        /// AddLabels()
        public func post(key: String, token: String, _ body: TrelloAPI.Labels) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Labels {
    public func idLabel(_ idLabel: String) -> WithIDLabel {
        WithIDLabel(path: "\(path)/\(idLabel)")
    }

    public struct WithIDLabel {
        /// Path: `/labels/{idLabel}`
        public let path: String

        /// GetLabelsByIdLabel()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// UpdateLabelsByIdLabel()
        public func put(key: String, token: String, _ body: TrelloAPI.Labels) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// DeleteLabelsByIdLabel()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Labels.WithIDLabel {
    public var board: Board {
        Board(path: path + "/board")
    }

    public struct Board {
        /// Path: `/labels/{idLabel}/board`
        public let path: String

        /// GetLabelsBoardByIdLabel()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Labels.WithIDLabel.Board {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/labels/{idLabel}/board/{field}`
        public let path: String

        /// GetLabelsBoardByIdLabelByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Labels.WithIDLabel {
    public var color: Color {
        Color(path: path + "/color")
    }

    public struct Color {
        /// Path: `/labels/{idLabel}/color`
        public let path: String

        /// UpdateLabelsColorByIdLabel()
        public func put(key: String, token: String, _ body: TrelloAPI.LabelsColor) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Labels.WithIDLabel {
    public var name: Name {
        Name(path: path + "/name")
    }

    public struct Name {
        /// Path: `/labels/{idLabel}/name`
        public let path: String

        /// UpdateLabelsNameByIdLabel()
        public func put(key: String, token: String, _ body: TrelloAPI.LabelsName) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths {
    public static var lists: Lists {
        Lists(path: "/lists")
    }

    public struct Lists {
        /// Path: `/lists`
        public let path: String

        /// AddLists()
        public func post(key: String, token: String, _ body: TrelloAPI.Lists) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Lists {
    public func idList(_ idList: String) -> WithIDList {
        WithIDList(path: "\(path)/\(idList)")
    }

    public struct WithIDList {
        /// Path: `/lists/{idList}`
        public let path: String

        /// GetListsByIdList()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var cards: String?
            public var cardFields: String?
            public var board: String?
            public var boardFields: String?
            public var fields: String?
            public var key: String
            public var token: String

            public init(cards: String? = nil, cardFields: String? = nil, board: String? = nil, boardFields: String? = nil, fields: String? = nil, key: String, token: String) {
                self.cards = cards
                self.cardFields = cardFields
                self.board = board
                self.boardFields = boardFields
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["cards": cards])
                encoder.encode(["card_fields": cardFields])
                encoder.encode(["board": board])
                encoder.encode(["board_fields": boardFields])
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// UpdateListsByIdList()
        public func put(key: String, token: String, _ body: TrelloAPI.Lists) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Lists.WithIDList {
    public var actions: Actions {
        Actions(path: path + "/actions")
    }

    public struct Actions {
        /// Path: `/lists/{idList}/actions`
        public let path: String

        /// GetListsActionsByIdList()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var entities: String?
            public var display: String?
            public var filter: String?
            public var fields: String?
            public var limit: String?
            public var format: String?
            public var since: String?
            public var before: String?
            public var page: String?
            public var idModels: String?
            public var member: String?
            public var memberFields: String?
            public var memberCreator: String?
            public var memberCreatorFields: String?
            public var key: String
            public var token: String

            public init(entities: String? = nil, display: String? = nil, filter: String? = nil, fields: String? = nil, limit: String? = nil, format: String? = nil, since: String? = nil, before: String? = nil, page: String? = nil, idModels: String? = nil, member: String? = nil, memberFields: String? = nil, memberCreator: String? = nil, memberCreatorFields: String? = nil, key: String, token: String) {
                self.entities = entities
                self.display = display
                self.filter = filter
                self.fields = fields
                self.limit = limit
                self.format = format
                self.since = since
                self.before = before
                self.page = page
                self.idModels = idModels
                self.member = member
                self.memberFields = memberFields
                self.memberCreator = memberCreator
                self.memberCreatorFields = memberCreatorFields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["entities": entities])
                encoder.encode(["display": display])
                encoder.encode(["filter": filter])
                encoder.encode(["fields": fields])
                encoder.encode(["limit": limit])
                encoder.encode(["format": format])
                encoder.encode(["since": since])
                encoder.encode(["before": before])
                encoder.encode(["page": page])
                encoder.encode(["idModels": idModels])
                encoder.encode(["member": member])
                encoder.encode(["member_fields": memberFields])
                encoder.encode(["memberCreator": memberCreator])
                encoder.encode(["memberCreator_fields": memberCreatorFields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Lists.WithIDList {
    public var archiveAllCards: ArchiveAllCards {
        ArchiveAllCards(path: path + "/archiveAllCards")
    }

    public struct ArchiveAllCards {
        /// Path: `/lists/{idList}/archiveAllCards`
        public let path: String

        /// AddListsArchiveAllCardsByIdList()
        public func post(key: String, token: String) -> Request<Void> {
            .post(path, query: makePostQuery(key, token))
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Lists.WithIDList {
    public var board: Board {
        Board(path: path + "/board")
    }

    public struct Board {
        /// Path: `/lists/{idList}/board`
        public let path: String

        /// GetListsBoardByIdList()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Lists.WithIDList.Board {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/lists/{idList}/board/{field}`
        public let path: String

        /// GetListsBoardByIdListByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Lists.WithIDList {
    public var cards: Cards {
        Cards(path: path + "/cards")
    }

    public struct Cards {
        /// Path: `/lists/{idList}/cards`
        public let path: String

        /// GetListsCardsByIdList()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var actions: String?
            public var attachments: String?
            public var attachmentFields: String?
            public var stickers: String?
            public var members: String?
            public var memberFields: String?
            public var checkItemStates: String?
            public var checklists: String?
            public var limit: String?
            public var since: String?
            public var before: String?
            public var filter: String?
            public var fields: String?
            public var key: String
            public var token: String

            public init(actions: String? = nil, attachments: String? = nil, attachmentFields: String? = nil, stickers: String? = nil, members: String? = nil, memberFields: String? = nil, checkItemStates: String? = nil, checklists: String? = nil, limit: String? = nil, since: String? = nil, before: String? = nil, filter: String? = nil, fields: String? = nil, key: String, token: String) {
                self.actions = actions
                self.attachments = attachments
                self.attachmentFields = attachmentFields
                self.stickers = stickers
                self.members = members
                self.memberFields = memberFields
                self.checkItemStates = checkItemStates
                self.checklists = checklists
                self.limit = limit
                self.since = since
                self.before = before
                self.filter = filter
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["actions": actions])
                encoder.encode(["attachments": attachments])
                encoder.encode(["attachment_fields": attachmentFields])
                encoder.encode(["stickers": stickers])
                encoder.encode(["members": members])
                encoder.encode(["member_fields": memberFields])
                encoder.encode(["checkItemStates": checkItemStates])
                encoder.encode(["checklists": checklists])
                encoder.encode(["limit": limit])
                encoder.encode(["since": since])
                encoder.encode(["before": before])
                encoder.encode(["filter": filter])
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// AddListsCardsByIdList()
        public func post(key: String, token: String, _ body: TrelloAPI.ListsCards) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Lists.WithIDList.Cards {
    public func filter(_ filter: String) -> WithFilter {
        WithFilter(path: "\(path)/\(filter)")
    }

    public struct WithFilter {
        /// Path: `/lists/{idList}/cards/{filter}`
        public let path: String

        /// GetListsCardsByIdListByFilter()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Lists.WithIDList {
    public var closed: Closed {
        Closed(path: path + "/closed")
    }

    public struct Closed {
        /// Path: `/lists/{idList}/closed`
        public let path: String

        /// UpdateListsClosedByIdList()
        public func put(key: String, token: String, _ body: TrelloAPI.ListsClosed) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Lists.WithIDList {
    public var idBoard: IDBoard {
        IDBoard(path: path + "/idBoard")
    }

    public struct IDBoard {
        /// Path: `/lists/{idList}/idBoard`
        public let path: String

        /// UpdateListsIdBoardByIdList()
        public func put(key: String, token: String, _ body: TrelloAPI.ListsIDBoard) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Lists.WithIDList {
    public var moveAllCards: MoveAllCards {
        MoveAllCards(path: path + "/moveAllCards")
    }

    public struct MoveAllCards {
        /// Path: `/lists/{idList}/moveAllCards`
        public let path: String

        /// AddListsMoveAllCardsByIdList()
        public func post(key: String, token: String, _ body: TrelloAPI.ListsMoveAllCards) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Lists.WithIDList {
    public var name: Name {
        Name(path: path + "/name")
    }

    public struct Name {
        /// Path: `/lists/{idList}/name`
        public let path: String

        /// UpdateListsNameByIdList()
        public func put(key: String, token: String, _ body: TrelloAPI.ListsName) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Lists.WithIDList {
    public var pos: Pos {
        Pos(path: path + "/pos")
    }

    public struct Pos {
        /// Path: `/lists/{idList}/pos`
        public let path: String

        /// UpdateListsPosByIdList()
        public func put(key: String, token: String, _ body: TrelloAPI.ListsPos) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Lists.WithIDList {
    public var subscribed: Subscribed {
        Subscribed(path: path + "/subscribed")
    }

    public struct Subscribed {
        /// Path: `/lists/{idList}/subscribed`
        public let path: String

        /// UpdateListsSubscribedByIdList()
        public func put(key: String, token: String, _ body: TrelloAPI.ListsSubscribed) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Lists.WithIDList {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/lists/{idList}/{field}`
        public let path: String

        /// GetListsByIdListByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths {
    public static var members: Members {
        Members(path: "/members")
    }

    public struct Members {
        /// Path: `/members`
        public let path: String
    }
}

extension Paths.Members {
    public func idMember(_ idMember: String) -> WithIDMember {
        WithIDMember(path: "\(path)/\(idMember)")
    }

    public struct WithIDMember {
        /// Path: `/members/{idMember}`
        public let path: String

        /// GetMembersByIdMember()
        ///
        /// If you specify 'me' as the username, this call will respond as if you had supplied the username associated with the supplied token
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var actions: String?
            public var actionsEntities: String?
            public var actionsDisplay: String?
            public var actionsLimit: String?
            public var actionFields: String?
            public var actionSince: String?
            public var actionBefore: String?
            public var cards: String?
            public var cardFields: String?
            public var cardMembers: String?
            public var cardMemberFields: String?
            public var cardAttachments: String?
            public var cardAttachmentFields: String?
            public var cardStickers: String?
            public var boards: String?
            public var boardFields: String?
            public var boardActions: String?
            public var boardActionsEntities: String?
            public var boardActionsDisplay: String?
            public var boardActionsFormat: String?
            public var boardActionsSince: String?
            public var boardActionsLimit: String?
            public var boardActionFields: String?
            public var boardLists: String?
            public var boardMemberships: String?
            public var boardOrganization: String?
            public var boardOrganizationFields: String?
            public var boardsInvited: String?
            public var boardsInvitedFields: String?
            public var boardStars: String?
            public var savedSearches: String?
            public var organizations: String?
            public var organizationFields: String?
            public var organizationPaidAccount: String?
            public var organizationsInvited: String?
            public var organizationsInvitedFields: String?
            public var notifications: String?
            public var notificationsEntities: String?
            public var notificationsDisplay: String?
            public var notificationsLimit: String?
            public var notificationFields: String?
            public var notificationMemberCreator: String?
            public var notificationMemberCreatorFields: String?
            public var notificationBefore: String?
            public var notificationSince: String?
            public var tokens: String?
            public var paidAccount: String?
            public var boardBackgrounds: String?
            public var customBoardBackgrounds: String?
            public var customStickers: String?
            public var customEmoji: String?
            public var fields: String?
            public var key: String
            public var token: String

            public init(actions: String? = nil, actionsEntities: String? = nil, actionsDisplay: String? = nil, actionsLimit: String? = nil, actionFields: String? = nil, actionSince: String? = nil, actionBefore: String? = nil, cards: String? = nil, cardFields: String? = nil, cardMembers: String? = nil, cardMemberFields: String? = nil, cardAttachments: String? = nil, cardAttachmentFields: String? = nil, cardStickers: String? = nil, boards: String? = nil, boardFields: String? = nil, boardActions: String? = nil, boardActionsEntities: String? = nil, boardActionsDisplay: String? = nil, boardActionsFormat: String? = nil, boardActionsSince: String? = nil, boardActionsLimit: String? = nil, boardActionFields: String? = nil, boardLists: String? = nil, boardMemberships: String? = nil, boardOrganization: String? = nil, boardOrganizationFields: String? = nil, boardsInvited: String? = nil, boardsInvitedFields: String? = nil, boardStars: String? = nil, savedSearches: String? = nil, organizations: String? = nil, organizationFields: String? = nil, organizationPaidAccount: String? = nil, organizationsInvited: String? = nil, organizationsInvitedFields: String? = nil, notifications: String? = nil, notificationsEntities: String? = nil, notificationsDisplay: String? = nil, notificationsLimit: String? = nil, notificationFields: String? = nil, notificationMemberCreator: String? = nil, notificationMemberCreatorFields: String? = nil, notificationBefore: String? = nil, notificationSince: String? = nil, tokens: String? = nil, paidAccount: String? = nil, boardBackgrounds: String? = nil, customBoardBackgrounds: String? = nil, customStickers: String? = nil, customEmoji: String? = nil, fields: String? = nil, key: String, token: String) {
                self.actions = actions
                self.actionsEntities = actionsEntities
                self.actionsDisplay = actionsDisplay
                self.actionsLimit = actionsLimit
                self.actionFields = actionFields
                self.actionSince = actionSince
                self.actionBefore = actionBefore
                self.cards = cards
                self.cardFields = cardFields
                self.cardMembers = cardMembers
                self.cardMemberFields = cardMemberFields
                self.cardAttachments = cardAttachments
                self.cardAttachmentFields = cardAttachmentFields
                self.cardStickers = cardStickers
                self.boards = boards
                self.boardFields = boardFields
                self.boardActions = boardActions
                self.boardActionsEntities = boardActionsEntities
                self.boardActionsDisplay = boardActionsDisplay
                self.boardActionsFormat = boardActionsFormat
                self.boardActionsSince = boardActionsSince
                self.boardActionsLimit = boardActionsLimit
                self.boardActionFields = boardActionFields
                self.boardLists = boardLists
                self.boardMemberships = boardMemberships
                self.boardOrganization = boardOrganization
                self.boardOrganizationFields = boardOrganizationFields
                self.boardsInvited = boardsInvited
                self.boardsInvitedFields = boardsInvitedFields
                self.boardStars = boardStars
                self.savedSearches = savedSearches
                self.organizations = organizations
                self.organizationFields = organizationFields
                self.organizationPaidAccount = organizationPaidAccount
                self.organizationsInvited = organizationsInvited
                self.organizationsInvitedFields = organizationsInvitedFields
                self.notifications = notifications
                self.notificationsEntities = notificationsEntities
                self.notificationsDisplay = notificationsDisplay
                self.notificationsLimit = notificationsLimit
                self.notificationFields = notificationFields
                self.notificationMemberCreator = notificationMemberCreator
                self.notificationMemberCreatorFields = notificationMemberCreatorFields
                self.notificationBefore = notificationBefore
                self.notificationSince = notificationSince
                self.tokens = tokens
                self.paidAccount = paidAccount
                self.boardBackgrounds = boardBackgrounds
                self.customBoardBackgrounds = customBoardBackgrounds
                self.customStickers = customStickers
                self.customEmoji = customEmoji
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["actions": actions])
                encoder.encode(["actions_entities": actionsEntities])
                encoder.encode(["actions_display": actionsDisplay])
                encoder.encode(["actions_limit": actionsLimit])
                encoder.encode(["action_fields": actionFields])
                encoder.encode(["action_since": actionSince])
                encoder.encode(["action_before": actionBefore])
                encoder.encode(["cards": cards])
                encoder.encode(["card_fields": cardFields])
                encoder.encode(["card_members": cardMembers])
                encoder.encode(["card_member_fields": cardMemberFields])
                encoder.encode(["card_attachments": cardAttachments])
                encoder.encode(["card_attachment_fields": cardAttachmentFields])
                encoder.encode(["card_stickers": cardStickers])
                encoder.encode(["boards": boards])
                encoder.encode(["board_fields": boardFields])
                encoder.encode(["board_actions": boardActions])
                encoder.encode(["board_actions_entities": boardActionsEntities])
                encoder.encode(["board_actions_display": boardActionsDisplay])
                encoder.encode(["board_actions_format": boardActionsFormat])
                encoder.encode(["board_actions_since": boardActionsSince])
                encoder.encode(["board_actions_limit": boardActionsLimit])
                encoder.encode(["board_action_fields": boardActionFields])
                encoder.encode(["board_lists": boardLists])
                encoder.encode(["board_memberships": boardMemberships])
                encoder.encode(["board_organization": boardOrganization])
                encoder.encode(["board_organization_fields": boardOrganizationFields])
                encoder.encode(["boardsInvited": boardsInvited])
                encoder.encode(["boardsInvited_fields": boardsInvitedFields])
                encoder.encode(["boardStars": boardStars])
                encoder.encode(["savedSearches": savedSearches])
                encoder.encode(["organizations": organizations])
                encoder.encode(["organization_fields": organizationFields])
                encoder.encode(["organization_paid_account": organizationPaidAccount])
                encoder.encode(["organizationsInvited": organizationsInvited])
                encoder.encode(["organizationsInvited_fields": organizationsInvitedFields])
                encoder.encode(["notifications": notifications])
                encoder.encode(["notifications_entities": notificationsEntities])
                encoder.encode(["notifications_display": notificationsDisplay])
                encoder.encode(["notifications_limit": notificationsLimit])
                encoder.encode(["notification_fields": notificationFields])
                encoder.encode(["notification_memberCreator": notificationMemberCreator])
                encoder.encode(["notification_memberCreator_fields": notificationMemberCreatorFields])
                encoder.encode(["notification_before": notificationBefore])
                encoder.encode(["notification_since": notificationSince])
                encoder.encode(["tokens": tokens])
                encoder.encode(["paid_account": paidAccount])
                encoder.encode(["boardBackgrounds": boardBackgrounds])
                encoder.encode(["customBoardBackgrounds": customBoardBackgrounds])
                encoder.encode(["customStickers": customStickers])
                encoder.encode(["customEmoji": customEmoji])
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// UpdateMembersByIdMember()
        public func put(key: String, token: String, _ body: TrelloAPI.Members) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember {
    public var actions: Actions {
        Actions(path: path + "/actions")
    }

    public struct Actions {
        /// Path: `/members/{idMember}/actions`
        public let path: String

        /// GetMembersActionsByIdMember()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var entities: String?
            public var display: String?
            public var filter: String?
            public var fields: String?
            public var limit: String?
            public var format: String?
            public var since: String?
            public var before: String?
            public var page: String?
            public var idModels: String?
            public var member: String?
            public var memberFields: String?
            public var memberCreator: String?
            public var memberCreatorFields: String?
            public var key: String
            public var token: String

            public init(entities: String? = nil, display: String? = nil, filter: String? = nil, fields: String? = nil, limit: String? = nil, format: String? = nil, since: String? = nil, before: String? = nil, page: String? = nil, idModels: String? = nil, member: String? = nil, memberFields: String? = nil, memberCreator: String? = nil, memberCreatorFields: String? = nil, key: String, token: String) {
                self.entities = entities
                self.display = display
                self.filter = filter
                self.fields = fields
                self.limit = limit
                self.format = format
                self.since = since
                self.before = before
                self.page = page
                self.idModels = idModels
                self.member = member
                self.memberFields = memberFields
                self.memberCreator = memberCreator
                self.memberCreatorFields = memberCreatorFields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["entities": entities])
                encoder.encode(["display": display])
                encoder.encode(["filter": filter])
                encoder.encode(["fields": fields])
                encoder.encode(["limit": limit])
                encoder.encode(["format": format])
                encoder.encode(["since": since])
                encoder.encode(["before": before])
                encoder.encode(["page": page])
                encoder.encode(["idModels": idModels])
                encoder.encode(["member": member])
                encoder.encode(["member_fields": memberFields])
                encoder.encode(["memberCreator": memberCreator])
                encoder.encode(["memberCreator_fields": memberCreatorFields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Members.WithIDMember {
    public var avatar: Avatar {
        Avatar(path: path + "/avatar")
    }

    public struct Avatar {
        /// Path: `/members/{idMember}/avatar`
        public let path: String

        /// AddMembersAvatarByIdMember()
        public func post(key: String, token: String, _ body: TrelloAPI.MembersAvatar) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember {
    public var avatarSource: AvatarSource {
        AvatarSource(path: path + "/avatarSource")
    }

    public struct AvatarSource {
        /// Path: `/members/{idMember}/avatarSource`
        public let path: String

        /// UpdateMembersAvatarSourceByIdMember()
        public func put(key: String, token: String, _ body: TrelloAPI.MembersAvatarSource) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember {
    public var bio: Bio {
        Bio(path: path + "/bio")
    }

    public struct Bio {
        /// Path: `/members/{idMember}/bio`
        public let path: String

        /// UpdateMembersBioByIdMember()
        public func put(key: String, token: String, _ body: TrelloAPI.MembersBio) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember {
    public var boardBackgrounds: BoardBackgrounds {
        BoardBackgrounds(path: path + "/boardBackgrounds")
    }

    public struct BoardBackgrounds {
        /// Path: `/members/{idMember}/boardBackgrounds`
        public let path: String

        /// GetMembersBoardBackgroundsByIdMember()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var key: String
            public var token: String

            public init(filter: String? = nil, key: String, token: String) {
                self.filter = filter
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["filter": filter])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// AddMembersBoardBackgroundsByIdMember()
        public func post(key: String, token: String, _ body: TrelloAPI.MembersBoardBackgrounds) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember.BoardBackgrounds {
    public func idBoardBackground(_ idBoardBackground: String) -> WithIDBoardBackground {
        WithIDBoardBackground(path: "\(path)/\(idBoardBackground)")
    }

    public struct WithIDBoardBackground {
        /// Path: `/members/{idMember}/boardBackgrounds/{idBoardBackground}`
        public let path: String

        /// GetMembersBoardBackgroundsByIdMemberByIdBoardBackground()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// UpdateMembersBoardBackgroundsByIdMemberByIdBoardBackground()
        public func put(key: String, token: String, _ body: TrelloAPI.MembersBoardBackgrounds) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// DeleteMembersBoardBackgroundsByIdMemberByIdBoardBackground()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember {
    public var boardStars: BoardStars {
        BoardStars(path: path + "/boardStars")
    }

    public struct BoardStars {
        /// Path: `/members/{idMember}/boardStars`
        public let path: String

        /// GetMembersBoardStarsByIdMember()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// AddMembersBoardStarsByIdMember()
        public func post(key: String, token: String, _ body: TrelloAPI.MembersBoardStars) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember.BoardStars {
    public func idBoardStar(_ idBoardStar: String) -> WithIDBoardStar {
        WithIDBoardStar(path: "\(path)/\(idBoardStar)")
    }

    public struct WithIDBoardStar {
        /// Path: `/members/{idMember}/boardStars/{idBoardStar}`
        public let path: String

        /// GetMembersBoardStarsByIdMemberByIdBoardStar()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// UpdateMembersBoardStarsByIdMemberByIdBoardStar()
        public func put(key: String, token: String, _ body: TrelloAPI.MembersBoardStars) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// DeleteMembersBoardStarsByIdMemberByIdBoardStar()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember.BoardStars.WithIDBoardStar {
    public var idBoard: IDBoard {
        IDBoard(path: path + "/idBoard")
    }

    public struct IDBoard {
        /// Path: `/members/{idMember}/boardStars/{idBoardStar}/idBoard`
        public let path: String

        /// UpdateMembersBoardStarsIdBoardByIdMemberByIdBoardStar()
        public func put(key: String, token: String, _ body: TrelloAPI.MembersBoardStarsIDBoard) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember.BoardStars.WithIDBoardStar {
    public var pos: Pos {
        Pos(path: path + "/pos")
    }

    public struct Pos {
        /// Path: `/members/{idMember}/boardStars/{idBoardStar}/pos`
        public let path: String

        /// UpdateMembersBoardStarsPosByIdMemberByIdBoardStar()
        public func put(key: String, token: String, _ body: TrelloAPI.MembersBoardStarsPos) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember {
    public var boards: Boards {
        Boards(path: path + "/boards")
    }

    public struct Boards {
        /// Path: `/members/{idMember}/boards`
        public let path: String

        /// GetMembersBoardsByIdMember()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var fields: String?
            public var actions: String?
            public var actionsEntities: String?
            public var actionsLimit: String?
            public var actionsFormat: String?
            public var actionsSince: String?
            public var actionFields: String?
            public var memberships: String?
            public var organization: String?
            public var organizationFields: String?
            public var lists: String?
            public var key: String
            public var token: String

            public init(filter: String? = nil, fields: String? = nil, actions: String? = nil, actionsEntities: String? = nil, actionsLimit: String? = nil, actionsFormat: String? = nil, actionsSince: String? = nil, actionFields: String? = nil, memberships: String? = nil, organization: String? = nil, organizationFields: String? = nil, lists: String? = nil, key: String, token: String) {
                self.filter = filter
                self.fields = fields
                self.actions = actions
                self.actionsEntities = actionsEntities
                self.actionsLimit = actionsLimit
                self.actionsFormat = actionsFormat
                self.actionsSince = actionsSince
                self.actionFields = actionFields
                self.memberships = memberships
                self.organization = organization
                self.organizationFields = organizationFields
                self.lists = lists
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["filter": filter])
                encoder.encode(["fields": fields])
                encoder.encode(["actions": actions])
                encoder.encode(["actions_entities": actionsEntities])
                encoder.encode(["actions_limit": actionsLimit])
                encoder.encode(["actions_format": actionsFormat])
                encoder.encode(["actions_since": actionsSince])
                encoder.encode(["action_fields": actionFields])
                encoder.encode(["memberships": memberships])
                encoder.encode(["organization": organization])
                encoder.encode(["organization_fields": organizationFields])
                encoder.encode(["lists": lists])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Members.WithIDMember.Boards {
    public func filter(_ filter: String) -> WithFilter {
        WithFilter(path: "\(path)/\(filter)")
    }

    public struct WithFilter {
        /// Path: `/members/{idMember}/boards/{filter}`
        public let path: String

        /// GetMembersBoardsByIdMemberByFilter()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember {
    public var boardsInvited: BoardsInvited {
        BoardsInvited(path: path + "/boardsInvited")
    }

    public struct BoardsInvited {
        /// Path: `/members/{idMember}/boardsInvited`
        public let path: String

        /// GetMembersBoardsInvitedByIdMember()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Members.WithIDMember.BoardsInvited {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/members/{idMember}/boardsInvited/{field}`
        public let path: String

        /// GetMembersBoardsInvitedByIdMemberByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember {
    public var cards: Cards {
        Cards(path: path + "/cards")
    }

    public struct Cards {
        /// Path: `/members/{idMember}/cards`
        public let path: String

        /// GetMembersCardsByIdMember()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var actions: String?
            public var attachments: String?
            public var attachmentFields: String?
            public var stickers: String?
            public var members: String?
            public var memberFields: String?
            public var checkItemStates: String?
            public var checklists: String?
            public var limit: String?
            public var since: String?
            public var before: String?
            public var filter: String?
            public var fields: String?
            public var key: String
            public var token: String

            public init(actions: String? = nil, attachments: String? = nil, attachmentFields: String? = nil, stickers: String? = nil, members: String? = nil, memberFields: String? = nil, checkItemStates: String? = nil, checklists: String? = nil, limit: String? = nil, since: String? = nil, before: String? = nil, filter: String? = nil, fields: String? = nil, key: String, token: String) {
                self.actions = actions
                self.attachments = attachments
                self.attachmentFields = attachmentFields
                self.stickers = stickers
                self.members = members
                self.memberFields = memberFields
                self.checkItemStates = checkItemStates
                self.checklists = checklists
                self.limit = limit
                self.since = since
                self.before = before
                self.filter = filter
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["actions": actions])
                encoder.encode(["attachments": attachments])
                encoder.encode(["attachment_fields": attachmentFields])
                encoder.encode(["stickers": stickers])
                encoder.encode(["members": members])
                encoder.encode(["member_fields": memberFields])
                encoder.encode(["checkItemStates": checkItemStates])
                encoder.encode(["checklists": checklists])
                encoder.encode(["limit": limit])
                encoder.encode(["since": since])
                encoder.encode(["before": before])
                encoder.encode(["filter": filter])
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Members.WithIDMember.Cards {
    public func filter(_ filter: String) -> WithFilter {
        WithFilter(path: "\(path)/\(filter)")
    }

    public struct WithFilter {
        /// Path: `/members/{idMember}/cards/{filter}`
        public let path: String

        /// GetMembersCardsByIdMemberByFilter()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember {
    public var customBoardBackgrounds: CustomBoardBackgrounds {
        CustomBoardBackgrounds(path: path + "/customBoardBackgrounds")
    }

    public struct CustomBoardBackgrounds {
        /// Path: `/members/{idMember}/customBoardBackgrounds`
        public let path: String

        /// GetMembersCustomBoardBackgroundsByIdMember()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var key: String
            public var token: String

            public init(filter: String? = nil, key: String, token: String) {
                self.filter = filter
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["filter": filter])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// AddMembersCustomBoardBackgroundsByIdMember()
        public func post(key: String, token: String, _ body: TrelloAPI.MembersCustomBoardBackgrounds) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember.CustomBoardBackgrounds {
    public func idBoardBackground(_ idBoardBackground: String) -> WithIDBoardBackground {
        WithIDBoardBackground(path: "\(path)/\(idBoardBackground)")
    }

    public struct WithIDBoardBackground {
        /// Path: `/members/{idMember}/customBoardBackgrounds/{idBoardBackground}`
        public let path: String

        /// GetMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// UpdateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
        public func put(key: String, token: String, _ body: TrelloAPI.MembersCustomBoardBackgrounds) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// DeleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember {
    public var customEmoji: CustomEmoji {
        CustomEmoji(path: path + "/customEmoji")
    }

    public struct CustomEmoji {
        /// Path: `/members/{idMember}/customEmoji`
        public let path: String

        /// GetMembersCustomEmojiByIdMember()
        ///
        /// This gets the list of all of the userâ€™s uploaded emoji
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var key: String
            public var token: String

            public init(filter: String? = nil, key: String, token: String) {
                self.filter = filter
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["filter": filter])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// AddMembersCustomEmojiByIdMember()
        public func post(key: String, token: String, _ body: TrelloAPI.MembersCustomEmoji) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember.CustomEmoji {
    public func idCustomEmoji(_ idCustomEmoji: String) -> WithIDCustomEmoji {
        WithIDCustomEmoji(path: "\(path)/\(idCustomEmoji)")
    }

    public struct WithIDCustomEmoji {
        /// Path: `/members/{idMember}/customEmoji/{idCustomEmoji}`
        public let path: String

        /// GetMembersCustomEmojiByIdMemberByIdCustomEmoji()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Members.WithIDMember {
    public var customStickers: CustomStickers {
        CustomStickers(path: path + "/customStickers")
    }

    public struct CustomStickers {
        /// Path: `/members/{idMember}/customStickers`
        public let path: String

        /// GetMembersCustomStickersByIdMember()
        ///
        /// This gets a list of all of the userâ€™s uploaded stickers
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var key: String
            public var token: String

            public init(filter: String? = nil, key: String, token: String) {
                self.filter = filter
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["filter": filter])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// AddMembersCustomStickersByIdMember()
        public func post(key: String, token: String, _ body: TrelloAPI.MembersCustomStickers) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember.CustomStickers {
    public func idCustomSticker(_ idCustomSticker: String) -> WithIDCustomSticker {
        WithIDCustomSticker(path: "\(path)/\(idCustomSticker)")
    }

    public struct WithIDCustomSticker {
        /// Path: `/members/{idMember}/customStickers/{idCustomSticker}`
        public let path: String

        /// GetMembersCustomStickersByIdMemberByIdCustomSticker()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// DeleteMembersCustomStickersByIdMemberByIdCustomSticker()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember {
    public var deltas: Deltas {
        Deltas(path: path + "/deltas")
    }

    public struct Deltas {
        /// Path: `/members/{idMember}/deltas`
        public let path: String

        /// GetMembersDeltasByIdMember()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var tags: String
            public var ixLastUpdate: String
            public var key: String
            public var token: String

            public init(tags: String, ixLastUpdate: String, key: String, token: String) {
                self.tags = tags
                self.ixLastUpdate = ixLastUpdate
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["tags": tags])
                encoder.encode(["ixLastUpdate": ixLastUpdate])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Members.WithIDMember {
    public var fullName: FullName {
        FullName(path: path + "/fullName")
    }

    public struct FullName {
        /// Path: `/members/{idMember}/fullName`
        public let path: String

        /// UpdateMembersFullNameByIdMember()
        public func put(key: String, token: String, _ body: TrelloAPI.MembersFullName) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember {
    public var initials: Initials {
        Initials(path: path + "/initials")
    }

    public struct Initials {
        /// Path: `/members/{idMember}/initials`
        public let path: String

        /// UpdateMembersInitialsByIdMember()
        public func put(key: String, token: String, _ body: TrelloAPI.MembersInitials) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember {
    public var notifications: Notifications {
        Notifications(path: path + "/notifications")
    }

    public struct Notifications {
        /// Path: `/members/{idMember}/notifications`
        public let path: String

        /// GetMembersNotificationsByIdMember()
        ///
        /// You can only read the notifications for the member associated with the supplied token
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var entities: String?
            public var display: String?
            public var filter: String?
            public var readFilter: String?
            public var fields: String?
            public var limit: String?
            public var page: String?
            public var before: String?
            public var since: String?
            public var memberCreator: String?
            public var memberCreatorFields: String?
            public var key: String
            public var token: String

            public init(entities: String? = nil, display: String? = nil, filter: String? = nil, readFilter: String? = nil, fields: String? = nil, limit: String? = nil, page: String? = nil, before: String? = nil, since: String? = nil, memberCreator: String? = nil, memberCreatorFields: String? = nil, key: String, token: String) {
                self.entities = entities
                self.display = display
                self.filter = filter
                self.readFilter = readFilter
                self.fields = fields
                self.limit = limit
                self.page = page
                self.before = before
                self.since = since
                self.memberCreator = memberCreator
                self.memberCreatorFields = memberCreatorFields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["entities": entities])
                encoder.encode(["display": display])
                encoder.encode(["filter": filter])
                encoder.encode(["read_filter": readFilter])
                encoder.encode(["fields": fields])
                encoder.encode(["limit": limit])
                encoder.encode(["page": page])
                encoder.encode(["before": before])
                encoder.encode(["since": since])
                encoder.encode(["memberCreator": memberCreator])
                encoder.encode(["memberCreator_fields": memberCreatorFields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Members.WithIDMember.Notifications {
    public func filter(_ filter: String) -> WithFilter {
        WithFilter(path: "\(path)/\(filter)")
    }

    public struct WithFilter {
        /// Path: `/members/{idMember}/notifications/{filter}`
        public let path: String

        /// GetMembersNotificationsByIdMemberByFilter()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember {
    public var oneTimeMessagesDismissed: OneTimeMessagesDismissed {
        OneTimeMessagesDismissed(path: path + "/oneTimeMessagesDismissed")
    }

    public struct OneTimeMessagesDismissed {
        /// Path: `/members/{idMember}/oneTimeMessagesDismissed`
        public let path: String

        /// AddMembersOneTimeMessagesDismissedByIdMember()
        public func post(key: String, token: String, _ body: TrelloAPI.MembersOneTimeMessagesDismissed) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember {
    public var organizations: Organizations {
        Organizations(path: path + "/organizations")
    }

    public struct Organizations {
        /// Path: `/members/{idMember}/organizations`
        public let path: String

        /// GetMembersOrganizationsByIdMember()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var fields: String?
            public var paidAccount: String?
            public var key: String
            public var token: String

            public init(filter: String? = nil, fields: String? = nil, paidAccount: String? = nil, key: String, token: String) {
                self.filter = filter
                self.fields = fields
                self.paidAccount = paidAccount
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["filter": filter])
                encoder.encode(["fields": fields])
                encoder.encode(["paid_account": paidAccount])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Members.WithIDMember.Organizations {
    public func filter(_ filter: String) -> WithFilter {
        WithFilter(path: "\(path)/\(filter)")
    }

    public struct WithFilter {
        /// Path: `/members/{idMember}/organizations/{filter}`
        public let path: String

        /// GetMembersOrganizationsByIdMemberByFilter()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember {
    public var organizationsInvited: OrganizationsInvited {
        OrganizationsInvited(path: path + "/organizationsInvited")
    }

    public struct OrganizationsInvited {
        /// Path: `/members/{idMember}/organizationsInvited`
        public let path: String

        /// GetMembersOrganizationsInvitedByIdMember()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Members.WithIDMember.OrganizationsInvited {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/members/{idMember}/organizationsInvited/{field}`
        public let path: String

        /// GetMembersOrganizationsInvitedByIdMemberByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember {
    public var prefs: Prefs {
        Prefs(path: path + "/prefs")
    }

    public struct Prefs {
        /// Path: `/members/{idMember}/prefs`
        public let path: String
    }
}

extension Paths.Members.WithIDMember.Prefs {
    public var colorBlind: ColorBlind {
        ColorBlind(path: path + "/colorBlind")
    }

    public struct ColorBlind {
        /// Path: `/members/{idMember}/prefs/colorBlind`
        public let path: String

        /// UpdateMembersPrefsColorBlindByIdMember()
        public func put(key: String, token: String, _ body: TrelloAPI.PrefsColorBlind) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember.Prefs {
    public var locale: Locale {
        Locale(path: path + "/locale")
    }

    public struct Locale {
        /// Path: `/members/{idMember}/prefs/locale`
        public let path: String

        /// UpdateMembersPrefsLocaleByIdMember()
        public func put(key: String, token: String, _ body: TrelloAPI.PrefsLocale) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember.Prefs {
    public var minutesBetweenSummaries: MinutesBetweenSummaries {
        MinutesBetweenSummaries(path: path + "/minutesBetweenSummaries")
    }

    public struct MinutesBetweenSummaries {
        /// Path: `/members/{idMember}/prefs/minutesBetweenSummaries`
        public let path: String

        /// UpdateMembersPrefsMinutesBetweenSummariesByIdMember()
        public func put(key: String, token: String, _ body: TrelloAPI.PrefsMinutesBetweenSummaries) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember {
    public var savedSearches: SavedSearches {
        SavedSearches(path: path + "/savedSearches")
    }

    public struct SavedSearches {
        /// Path: `/members/{idMember}/savedSearches`
        public let path: String

        /// GetMembersSavedSearchesByIdMember()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// AddMembersSavedSearchesByIdMember()
        public func post(key: String, token: String, _ body: TrelloAPI.MembersSavedSearches) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember.SavedSearches {
    public func idSavedSearch(_ idSavedSearch: String) -> WithIDSavedSearch {
        WithIDSavedSearch(path: "\(path)/\(idSavedSearch)")
    }

    public struct WithIDSavedSearch {
        /// Path: `/members/{idMember}/savedSearches/{idSavedSearch}`
        public let path: String

        /// GetMembersSavedSearchesByIdMemberByIdSavedSearch()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// UpdateMembersSavedSearchesByIdMemberByIdSavedSearch()
        public func put(key: String, token: String, _ body: TrelloAPI.MembersSavedSearches) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// DeleteMembersSavedSearchesByIdMemberByIdSavedSearch()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember.SavedSearches.WithIDSavedSearch {
    public var name: Name {
        Name(path: path + "/name")
    }

    public struct Name {
        /// Path: `/members/{idMember}/savedSearches/{idSavedSearch}/name`
        public let path: String

        /// UpdateMembersSavedSearchesNameByIdMemberByIdSavedSearch()
        public func put(key: String, token: String, _ body: TrelloAPI.MembersSavedSearchesName) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember.SavedSearches.WithIDSavedSearch {
    public var pos: Pos {
        Pos(path: path + "/pos")
    }

    public struct Pos {
        /// Path: `/members/{idMember}/savedSearches/{idSavedSearch}/pos`
        public let path: String

        /// UpdateMembersSavedSearchesPosByIdMemberByIdSavedSearch()
        public func put(key: String, token: String, _ body: TrelloAPI.MembersSavedSearchesPos) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember.SavedSearches.WithIDSavedSearch {
    public var query: Query {
        Query(path: path + "/query")
    }

    public struct Query {
        /// Path: `/members/{idMember}/savedSearches/{idSavedSearch}/query`
        public let path: String

        /// UpdateMembersSavedSearchesQueryByIdMemberByIdSavedSearch()
        public func put(key: String, token: String, _ body: TrelloAPI.MembersSavedSearchesQuery) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember {
    public var tokens: Tokens {
        Tokens(path: path + "/tokens")
    }

    public struct Tokens {
        /// Path: `/members/{idMember}/tokens`
        public let path: String

        /// GetMembersTokensByIdMember()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var key: String
            public var token: String

            public init(filter: String? = nil, key: String, token: String) {
                self.filter = filter
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["filter": filter])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Members.WithIDMember {
    public var username: Username {
        Username(path: path + "/username")
    }

    public struct Username {
        /// Path: `/members/{idMember}/username`
        public let path: String

        /// UpdateMembersUsernameByIdMember()
        public func put(key: String, token: String, _ body: TrelloAPI.MembersUsername) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Members.WithIDMember {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/members/{idMember}/{field}`
        public let path: String

        /// GetMembersByIdMemberByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths {
    public static var notifications: Notifications {
        Notifications(path: "/notifications")
    }

    public struct Notifications {
        /// Path: `/notifications`
        public let path: String
    }
}

extension Paths.Notifications {
    public var all: All {
        All(path: path + "/all")
    }

    public struct All {
        /// Path: `/notifications/all`
        public let path: String
    }
}

extension Paths.Notifications.All {
    public var read: Read {
        Read(path: path + "/read")
    }

    public struct Read {
        /// Path: `/notifications/all/read`
        public let path: String

        /// AddNotificationsAllRead()
        public func post(key: String, token: String) -> Request<Void> {
            .post(path, query: makePostQuery(key, token))
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Notifications {
    public func idNotification(_ idNotification: String) -> WithIDNotification {
        WithIDNotification(path: "\(path)/\(idNotification)")
    }

    public struct WithIDNotification {
        /// Path: `/notifications/{idNotification}`
        public let path: String

        /// GetNotificationsByIdNotification()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var display: String?
            public var entities: String?
            public var fields: String?
            public var memberCreator: String?
            public var memberCreatorFields: String?
            public var board: String?
            public var boardFields: String?
            public var list: String?
            public var card: String?
            public var cardFields: String?
            public var organization: String?
            public var organizationFields: String?
            public var member: String?
            public var memberFields: String?
            public var key: String
            public var token: String

            public init(display: String? = nil, entities: String? = nil, fields: String? = nil, memberCreator: String? = nil, memberCreatorFields: String? = nil, board: String? = nil, boardFields: String? = nil, list: String? = nil, card: String? = nil, cardFields: String? = nil, organization: String? = nil, organizationFields: String? = nil, member: String? = nil, memberFields: String? = nil, key: String, token: String) {
                self.display = display
                self.entities = entities
                self.fields = fields
                self.memberCreator = memberCreator
                self.memberCreatorFields = memberCreatorFields
                self.board = board
                self.boardFields = boardFields
                self.list = list
                self.card = card
                self.cardFields = cardFields
                self.organization = organization
                self.organizationFields = organizationFields
                self.member = member
                self.memberFields = memberFields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["display": display])
                encoder.encode(["entities": entities])
                encoder.encode(["fields": fields])
                encoder.encode(["memberCreator": memberCreator])
                encoder.encode(["memberCreator_fields": memberCreatorFields])
                encoder.encode(["board": board])
                encoder.encode(["board_fields": boardFields])
                encoder.encode(["list": list])
                encoder.encode(["card": card])
                encoder.encode(["card_fields": cardFields])
                encoder.encode(["organization": organization])
                encoder.encode(["organization_fields": organizationFields])
                encoder.encode(["member": member])
                encoder.encode(["member_fields": memberFields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// UpdateNotificationsByIdNotification()
        public func put(key: String, token: String, _ body: TrelloAPI.Notifications) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Notifications.WithIDNotification {
    public var board: Board {
        Board(path: path + "/board")
    }

    public struct Board {
        /// Path: `/notifications/{idNotification}/board`
        public let path: String

        /// GetNotificationsBoardByIdNotification()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Notifications.WithIDNotification.Board {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/notifications/{idNotification}/board/{field}`
        public let path: String

        /// GetNotificationsBoardByIdNotificationByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Notifications.WithIDNotification {
    public var card: Card {
        Card(path: path + "/card")
    }

    public struct Card {
        /// Path: `/notifications/{idNotification}/card`
        public let path: String

        /// GetNotificationsCardByIdNotification()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Notifications.WithIDNotification.Card {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/notifications/{idNotification}/card/{field}`
        public let path: String

        /// GetNotificationsCardByIdNotificationByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Notifications.WithIDNotification {
    public var display: Display {
        Display(path: path + "/display")
    }

    public struct Display {
        /// Path: `/notifications/{idNotification}/display`
        public let path: String

        /// GetNotificationsDisplayByIdNotification()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Notifications.WithIDNotification {
    public var entities: Entities {
        Entities(path: path + "/entities")
    }

    public struct Entities {
        /// Path: `/notifications/{idNotification}/entities`
        public let path: String

        /// GetNotificationsEntitiesByIdNotification()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Notifications.WithIDNotification {
    public var list: List {
        List(path: path + "/list")
    }

    public struct List {
        /// Path: `/notifications/{idNotification}/list`
        public let path: String

        /// GetNotificationsListByIdNotification()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Notifications.WithIDNotification.List {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/notifications/{idNotification}/list/{field}`
        public let path: String

        /// GetNotificationsListByIdNotificationByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Notifications.WithIDNotification {
    public var member: Member {
        Member(path: path + "/member")
    }

    public struct Member {
        /// Path: `/notifications/{idNotification}/member`
        public let path: String

        /// GetNotificationsMemberByIdNotification()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Notifications.WithIDNotification.Member {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/notifications/{idNotification}/member/{field}`
        public let path: String

        /// GetNotificationsMemberByIdNotificationByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Notifications.WithIDNotification {
    public var memberCreator: MemberCreator {
        MemberCreator(path: path + "/memberCreator")
    }

    public struct MemberCreator {
        /// Path: `/notifications/{idNotification}/memberCreator`
        public let path: String

        /// GetNotificationsMemberCreatorByIdNotification()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Notifications.WithIDNotification.MemberCreator {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/notifications/{idNotification}/memberCreator/{field}`
        public let path: String

        /// GetNotificationsMemberCreatorByIdNotificationByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Notifications.WithIDNotification {
    public var organization: Organization {
        Organization(path: path + "/organization")
    }

    public struct Organization {
        /// Path: `/notifications/{idNotification}/organization`
        public let path: String

        /// GetNotificationsOrganizationByIdNotification()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Notifications.WithIDNotification.Organization {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/notifications/{idNotification}/organization/{field}`
        public let path: String

        /// GetNotificationsOrganizationByIdNotificationByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Notifications.WithIDNotification {
    public var unread: Unread {
        Unread(path: path + "/unread")
    }

    public struct Unread {
        /// Path: `/notifications/{idNotification}/unread`
        public let path: String

        /// UpdateNotificationsUnreadByIdNotification()
        public func put(key: String, token: String, _ body: TrelloAPI.NotificationsUnread) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Notifications.WithIDNotification {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/notifications/{idNotification}/{field}`
        public let path: String

        /// GetNotificationsByIdNotificationByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths {
    public static var organizations: Organizations {
        Organizations(path: "/organizations")
    }

    public struct Organizations {
        /// Path: `/organizations`
        public let path: String

        /// AddOrganizations()
        public func post(key: String, token: String, _ body: TrelloAPI.Organizations) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Organizations {
    public func idOrg(_ idOrg: String) -> WithIDOrg {
        WithIDOrg(path: "\(path)/\(idOrg)")
    }

    public struct WithIDOrg {
        /// Path: `/organizations/{idOrg}`
        public let path: String

        /// GetOrganizationsByIdOrg()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var actions: String?
            public var actionsEntities: String?
            public var actionsDisplay: String?
            public var actionsLimit: String?
            public var actionFields: String?
            public var memberships: String?
            public var membershipsMember: String?
            public var membershipsMemberFields: String?
            public var members: String?
            public var memberFields: String?
            public var memberActivity: String?
            public var membersInvited: String?
            public var membersInvitedFields: String?
            public var boards: String?
            public var boardFields: String?
            public var boardActions: String?
            public var boardActionsEntities: String?
            public var boardActionsDisplay: String?
            public var boardActionsFormat: String?
            public var boardActionsSince: String?
            public var boardActionsLimit: String?
            public var boardActionFields: String?
            public var boardLists: String?
            public var paidAccount: String?
            public var fields: String?
            public var key: String
            public var token: String

            public init(actions: String? = nil, actionsEntities: String? = nil, actionsDisplay: String? = nil, actionsLimit: String? = nil, actionFields: String? = nil, memberships: String? = nil, membershipsMember: String? = nil, membershipsMemberFields: String? = nil, members: String? = nil, memberFields: String? = nil, memberActivity: String? = nil, membersInvited: String? = nil, membersInvitedFields: String? = nil, boards: String? = nil, boardFields: String? = nil, boardActions: String? = nil, boardActionsEntities: String? = nil, boardActionsDisplay: String? = nil, boardActionsFormat: String? = nil, boardActionsSince: String? = nil, boardActionsLimit: String? = nil, boardActionFields: String? = nil, boardLists: String? = nil, paidAccount: String? = nil, fields: String? = nil, key: String, token: String) {
                self.actions = actions
                self.actionsEntities = actionsEntities
                self.actionsDisplay = actionsDisplay
                self.actionsLimit = actionsLimit
                self.actionFields = actionFields
                self.memberships = memberships
                self.membershipsMember = membershipsMember
                self.membershipsMemberFields = membershipsMemberFields
                self.members = members
                self.memberFields = memberFields
                self.memberActivity = memberActivity
                self.membersInvited = membersInvited
                self.membersInvitedFields = membersInvitedFields
                self.boards = boards
                self.boardFields = boardFields
                self.boardActions = boardActions
                self.boardActionsEntities = boardActionsEntities
                self.boardActionsDisplay = boardActionsDisplay
                self.boardActionsFormat = boardActionsFormat
                self.boardActionsSince = boardActionsSince
                self.boardActionsLimit = boardActionsLimit
                self.boardActionFields = boardActionFields
                self.boardLists = boardLists
                self.paidAccount = paidAccount
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["actions": actions])
                encoder.encode(["actions_entities": actionsEntities])
                encoder.encode(["actions_display": actionsDisplay])
                encoder.encode(["actions_limit": actionsLimit])
                encoder.encode(["action_fields": actionFields])
                encoder.encode(["memberships": memberships])
                encoder.encode(["memberships_member": membershipsMember])
                encoder.encode(["memberships_member_fields": membershipsMemberFields])
                encoder.encode(["members": members])
                encoder.encode(["member_fields": memberFields])
                encoder.encode(["member_activity": memberActivity])
                encoder.encode(["membersInvited": membersInvited])
                encoder.encode(["membersInvited_fields": membersInvitedFields])
                encoder.encode(["boards": boards])
                encoder.encode(["board_fields": boardFields])
                encoder.encode(["board_actions": boardActions])
                encoder.encode(["board_actions_entities": boardActionsEntities])
                encoder.encode(["board_actions_display": boardActionsDisplay])
                encoder.encode(["board_actions_format": boardActionsFormat])
                encoder.encode(["board_actions_since": boardActionsSince])
                encoder.encode(["board_actions_limit": boardActionsLimit])
                encoder.encode(["board_action_fields": boardActionFields])
                encoder.encode(["board_lists": boardLists])
                encoder.encode(["paid_account": paidAccount])
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// UpdateOrganizationsByIdOrg()
        public func put(key: String, token: String, _ body: TrelloAPI.Organizations) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// DeleteOrganizationsByIdOrg()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Organizations.WithIDOrg {
    public var actions: Actions {
        Actions(path: path + "/actions")
    }

    public struct Actions {
        /// Path: `/organizations/{idOrg}/actions`
        public let path: String

        /// GetOrganizationsActionsByIdOrg()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var entities: String?
            public var display: String?
            public var filter: String?
            public var fields: String?
            public var limit: String?
            public var format: String?
            public var since: String?
            public var before: String?
            public var page: String?
            public var idModels: String?
            public var member: String?
            public var memberFields: String?
            public var memberCreator: String?
            public var memberCreatorFields: String?
            public var key: String
            public var token: String

            public init(entities: String? = nil, display: String? = nil, filter: String? = nil, fields: String? = nil, limit: String? = nil, format: String? = nil, since: String? = nil, before: String? = nil, page: String? = nil, idModels: String? = nil, member: String? = nil, memberFields: String? = nil, memberCreator: String? = nil, memberCreatorFields: String? = nil, key: String, token: String) {
                self.entities = entities
                self.display = display
                self.filter = filter
                self.fields = fields
                self.limit = limit
                self.format = format
                self.since = since
                self.before = before
                self.page = page
                self.idModels = idModels
                self.member = member
                self.memberFields = memberFields
                self.memberCreator = memberCreator
                self.memberCreatorFields = memberCreatorFields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["entities": entities])
                encoder.encode(["display": display])
                encoder.encode(["filter": filter])
                encoder.encode(["fields": fields])
                encoder.encode(["limit": limit])
                encoder.encode(["format": format])
                encoder.encode(["since": since])
                encoder.encode(["before": before])
                encoder.encode(["page": page])
                encoder.encode(["idModels": idModels])
                encoder.encode(["member": member])
                encoder.encode(["member_fields": memberFields])
                encoder.encode(["memberCreator": memberCreator])
                encoder.encode(["memberCreator_fields": memberCreatorFields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Organizations.WithIDOrg {
    public var boards: Boards {
        Boards(path: path + "/boards")
    }

    public struct Boards {
        /// Path: `/organizations/{idOrg}/boards`
        public let path: String

        /// GetOrganizationsBoardsByIdOrg()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var fields: String?
            public var actions: String?
            public var actionsEntities: String?
            public var actionsLimit: String?
            public var actionsFormat: String?
            public var actionsSince: String?
            public var actionFields: String?
            public var memberships: String?
            public var organization: String?
            public var organizationFields: String?
            public var lists: String?
            public var key: String
            public var token: String

            public init(filter: String? = nil, fields: String? = nil, actions: String? = nil, actionsEntities: String? = nil, actionsLimit: String? = nil, actionsFormat: String? = nil, actionsSince: String? = nil, actionFields: String? = nil, memberships: String? = nil, organization: String? = nil, organizationFields: String? = nil, lists: String? = nil, key: String, token: String) {
                self.filter = filter
                self.fields = fields
                self.actions = actions
                self.actionsEntities = actionsEntities
                self.actionsLimit = actionsLimit
                self.actionsFormat = actionsFormat
                self.actionsSince = actionsSince
                self.actionFields = actionFields
                self.memberships = memberships
                self.organization = organization
                self.organizationFields = organizationFields
                self.lists = lists
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["filter": filter])
                encoder.encode(["fields": fields])
                encoder.encode(["actions": actions])
                encoder.encode(["actions_entities": actionsEntities])
                encoder.encode(["actions_limit": actionsLimit])
                encoder.encode(["actions_format": actionsFormat])
                encoder.encode(["actions_since": actionsSince])
                encoder.encode(["action_fields": actionFields])
                encoder.encode(["memberships": memberships])
                encoder.encode(["organization": organization])
                encoder.encode(["organization_fields": organizationFields])
                encoder.encode(["lists": lists])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Organizations.WithIDOrg.Boards {
    public func filter(_ filter: String) -> WithFilter {
        WithFilter(path: "\(path)/\(filter)")
    }

    public struct WithFilter {
        /// Path: `/organizations/{idOrg}/boards/{filter}`
        public let path: String

        /// GetOrganizationsBoardsByIdOrgByFilter()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Organizations.WithIDOrg {
    public var deltas: Deltas {
        Deltas(path: path + "/deltas")
    }

    public struct Deltas {
        /// Path: `/organizations/{idOrg}/deltas`
        public let path: String

        /// GetOrganizationsDeltasByIdOrg()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var tags: String
            public var ixLastUpdate: String
            public var key: String
            public var token: String

            public init(tags: String, ixLastUpdate: String, key: String, token: String) {
                self.tags = tags
                self.ixLastUpdate = ixLastUpdate
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["tags": tags])
                encoder.encode(["ixLastUpdate": ixLastUpdate])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Organizations.WithIDOrg {
    public var desc: Desc {
        Desc(path: path + "/desc")
    }

    public struct Desc {
        /// Path: `/organizations/{idOrg}/desc`
        public let path: String

        /// UpdateOrganizationsDescByIdOrg()
        public func put(key: String, token: String, _ body: TrelloAPI.OrganizationsDesc) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Organizations.WithIDOrg {
    public var displayName: DisplayName {
        DisplayName(path: path + "/displayName")
    }

    public struct DisplayName {
        /// Path: `/organizations/{idOrg}/displayName`
        public let path: String

        /// UpdateOrganizationsDisplayNameByIdOrg()
        public func put(key: String, token: String, _ body: TrelloAPI.OrganizationsDisplayName) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Organizations.WithIDOrg {
    public var logo: Logo {
        Logo(path: path + "/logo")
    }

    public struct Logo {
        /// Path: `/organizations/{idOrg}/logo`
        public let path: String

        /// AddOrganizationsLogoByIdOrg()
        public func post(key: String, token: String, _ body: TrelloAPI.OrganizationsLogo) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// DeleteOrganizationsLogoByIdOrg()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Organizations.WithIDOrg {
    public var members: Members {
        Members(path: path + "/members")
    }

    public struct Members {
        /// Path: `/organizations/{idOrg}/members`
        public let path: String

        /// GetOrganizationsMembersByIdOrg()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var fields: String?
            public var activity: String?
            public var key: String
            public var token: String

            public init(filter: String? = nil, fields: String? = nil, activity: String? = nil, key: String, token: String) {
                self.filter = filter
                self.fields = fields
                self.activity = activity
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["filter": filter])
                encoder.encode(["fields": fields])
                encoder.encode(["activity": activity])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// UpdateOrganizationsMembersByIdOrg()
        public func put(key: String, token: String, _ body: TrelloAPI.OrganizationsMembers) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Organizations.WithIDOrg.Members {
    public func filter(_ filter: String) -> WithFilter {
        WithFilter(path: "\(path)/\(filter)")
    }

    public struct WithFilter {
        /// Path: `/organizations/{idOrg}/members/{filter}`
        public let path: String

        /// GetOrganizationsMembersByIdOrgByFilter()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Organizations.WithIDOrg.Members {
    public func idMember(_ idMember: String) -> WithIDMember {
        WithIDMember(path: "\(path)/\(idMember)")
    }

    public struct WithIDMember {
        /// Path: `/organizations/{idOrg}/members/{idMember}`
        public let path: String

        /// UpdateOrganizationsMembersByIdOrgByIdMember()
        public func put(key: String, token: String, _ body: TrelloAPI.OrganizationsMembers) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// DeleteOrganizationsMembersByIdOrgByIdMember()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Organizations.WithIDOrg.Members.WithIDMember {
    public var all: All {
        All(path: path + "/all")
    }

    public struct All {
        /// Path: `/organizations/{idOrg}/members/{idMember}/all`
        public let path: String

        /// DeleteOrganizationsMembersAllByIdOrgByIdMember()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Organizations.WithIDOrg.Members.WithIDMember {
    public var cards: Cards {
        Cards(path: path + "/cards")
    }

    public struct Cards {
        /// Path: `/organizations/{idOrg}/members/{idMember}/cards`
        public let path: String

        /// GetOrganizationsMembersCardsByIdOrgByIdMember()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var actions: String?
            public var attachments: String?
            public var attachmentFields: String?
            public var members: String?
            public var memberFields: String?
            public var checkItemStates: String?
            public var checklists: String?
            public var board: String?
            public var boardFields: String?
            public var list: String?
            public var listFields: String?
            public var filter: String?
            public var fields: String?
            public var key: String
            public var token: String

            public init(actions: String? = nil, attachments: String? = nil, attachmentFields: String? = nil, members: String? = nil, memberFields: String? = nil, checkItemStates: String? = nil, checklists: String? = nil, board: String? = nil, boardFields: String? = nil, list: String? = nil, listFields: String? = nil, filter: String? = nil, fields: String? = nil, key: String, token: String) {
                self.actions = actions
                self.attachments = attachments
                self.attachmentFields = attachmentFields
                self.members = members
                self.memberFields = memberFields
                self.checkItemStates = checkItemStates
                self.checklists = checklists
                self.board = board
                self.boardFields = boardFields
                self.list = list
                self.listFields = listFields
                self.filter = filter
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["actions": actions])
                encoder.encode(["attachments": attachments])
                encoder.encode(["attachment_fields": attachmentFields])
                encoder.encode(["members": members])
                encoder.encode(["member_fields": memberFields])
                encoder.encode(["checkItemStates": checkItemStates])
                encoder.encode(["checklists": checklists])
                encoder.encode(["board": board])
                encoder.encode(["board_fields": boardFields])
                encoder.encode(["list": list])
                encoder.encode(["list_fields": listFields])
                encoder.encode(["filter": filter])
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Organizations.WithIDOrg.Members.WithIDMember {
    public var deactivated: Deactivated {
        Deactivated(path: path + "/deactivated")
    }

    public struct Deactivated {
        /// Path: `/organizations/{idOrg}/members/{idMember}/deactivated`
        public let path: String

        /// UpdateOrganizationsMembersDeactivatedByIdOrgByIdMember()
        public func put(key: String, token: String, _ body: TrelloAPI.OrganizationsMembersDeactivated) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Organizations.WithIDOrg {
    public var membersInvited: MembersInvited {
        MembersInvited(path: path + "/membersInvited")
    }

    public struct MembersInvited {
        /// Path: `/organizations/{idOrg}/membersInvited`
        public let path: String

        /// GetOrganizationsMembersInvitedByIdOrg()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Organizations.WithIDOrg.MembersInvited {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/organizations/{idOrg}/membersInvited/{field}`
        public let path: String

        /// GetOrganizationsMembersInvitedByIdOrgByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Organizations.WithIDOrg {
    public var memberships: Memberships {
        Memberships(path: path + "/memberships")
    }

    public struct Memberships {
        /// Path: `/organizations/{idOrg}/memberships`
        public let path: String

        /// GetOrganizationsMembershipsByIdOrg()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var filter: String?
            public var member: String?
            public var memberFields: String?
            public var key: String
            public var token: String

            public init(filter: String? = nil, member: String? = nil, memberFields: String? = nil, key: String, token: String) {
                self.filter = filter
                self.member = member
                self.memberFields = memberFields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["filter": filter])
                encoder.encode(["member": member])
                encoder.encode(["member_fields": memberFields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Organizations.WithIDOrg.Memberships {
    public func idMembership(_ idMembership: String) -> WithIDMembership {
        WithIDMembership(path: "\(path)/\(idMembership)")
    }

    public struct WithIDMembership {
        /// Path: `/organizations/{idOrg}/memberships/{idMembership}`
        public let path: String

        /// GetOrganizationsMembershipsByIdOrgByIdMembership()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var member: String?
            public var memberFields: String?
            public var key: String
            public var token: String

            public init(member: String? = nil, memberFields: String? = nil, key: String, token: String) {
                self.member = member
                self.memberFields = memberFields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["member": member])
                encoder.encode(["member_fields": memberFields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// UpdateOrganizationsMembershipsByIdOrgByIdMembership()
        public func put(key: String, token: String, _ body: TrelloAPI.OrganizationsMemberships) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Organizations.WithIDOrg {
    public var name: Name {
        Name(path: path + "/name")
    }

    public struct Name {
        /// Path: `/organizations/{idOrg}/name`
        public let path: String

        /// UpdateOrganizationsNameByIdOrg()
        public func put(key: String, token: String, _ body: TrelloAPI.OrganizationsName) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Organizations.WithIDOrg {
    public var prefs: Prefs {
        Prefs(path: path + "/prefs")
    }

    public struct Prefs {
        /// Path: `/organizations/{idOrg}/prefs`
        public let path: String
    }
}

extension Paths.Organizations.WithIDOrg.Prefs {
    public var associatedDomain: AssociatedDomain {
        AssociatedDomain(path: path + "/associatedDomain")
    }

    public struct AssociatedDomain {
        /// Path: `/organizations/{idOrg}/prefs/associatedDomain`
        public let path: String

        /// UpdateOrganizationsPrefsAssociatedDomainByIdOrg()
        public func put(key: String, token: String, _ body: TrelloAPI.PrefsAssociatedDomain) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// DeleteOrganizationsPrefsAssociatedDomainByIdOrg()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Organizations.WithIDOrg.Prefs {
    public var boardVisibilityRestrict: BoardVisibilityRestrict {
        BoardVisibilityRestrict(path: path + "/boardVisibilityRestrict")
    }

    public struct BoardVisibilityRestrict {
        /// Path: `/organizations/{idOrg}/prefs/boardVisibilityRestrict`
        public let path: String
    }
}

extension Paths.Organizations.WithIDOrg.Prefs.BoardVisibilityRestrict {
    public var org: Org {
        Org(path: path + "/org")
    }

    public struct Org {
        /// Path: `/organizations/{idOrg}/prefs/boardVisibilityRestrict/org`
        public let path: String

        /// UpdateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg()
        public func put(key: String, token: String, _ body: TrelloAPI.PrefsBoardVisibilityRestrict) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Organizations.WithIDOrg.Prefs.BoardVisibilityRestrict {
    public var `private`: Private {
        Private(path: path + "/private")
    }

    public struct Private {
        /// Path: `/organizations/{idOrg}/prefs/boardVisibilityRestrict/private`
        public let path: String

        /// UpdateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg()
        public func put(key: String, token: String, _ body: TrelloAPI.PrefsBoardVisibilityRestrict) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Organizations.WithIDOrg.Prefs.BoardVisibilityRestrict {
    public var `public`: Public {
        Public(path: path + "/public")
    }

    public struct Public {
        /// Path: `/organizations/{idOrg}/prefs/boardVisibilityRestrict/public`
        public let path: String

        /// UpdateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg()
        public func put(key: String, token: String, _ body: TrelloAPI.PrefsBoardVisibilityRestrict) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Organizations.WithIDOrg.Prefs {
    public var externalMembersDisabled: ExternalMembersDisabled {
        ExternalMembersDisabled(path: path + "/externalMembersDisabled")
    }

    public struct ExternalMembersDisabled {
        /// Path: `/organizations/{idOrg}/prefs/externalMembersDisabled`
        public let path: String

        /// UpdateOrganizationsPrefsExternalMembersDisabledByIdOrg()
        public func put(key: String, token: String, _ body: TrelloAPI.PrefsExternalMembersDisabled) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Organizations.WithIDOrg.Prefs {
    public var googleAppsVersion: GoogleAppsVersion {
        GoogleAppsVersion(path: path + "/googleAppsVersion")
    }

    public struct GoogleAppsVersion {
        /// Path: `/organizations/{idOrg}/prefs/googleAppsVersion`
        public let path: String

        /// UpdateOrganizationsPrefsGoogleAppsVersionByIdOrg()
        public func put(key: String, token: String, _ body: TrelloAPI.PrefsGoogleAppsVersion) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Organizations.WithIDOrg.Prefs {
    public var orgInviteRestrict: OrgInviteRestrict {
        OrgInviteRestrict(path: path + "/orgInviteRestrict")
    }

    public struct OrgInviteRestrict {
        /// Path: `/organizations/{idOrg}/prefs/orgInviteRestrict`
        public let path: String

        /// UpdateOrganizationsPrefsOrgInviteRestrictByIdOrg()
        public func put(key: String, token: String, _ body: TrelloAPI.PrefsOrgInviteRestrict) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// DeleteOrganizationsPrefsOrgInviteRestrictByIdOrg()
        public func delete(parameters: DeleteParameters) -> Request<Void> {
            .delete(path, query: parameters.asQuery)
        }

        public struct DeleteParameters {
            public var value: String
            public var key: String
            public var token: String

            public init(value: String, key: String, token: String) {
                self.value = value
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["value": value])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Organizations.WithIDOrg.Prefs {
    public var permissionLevel: PermissionLevel {
        PermissionLevel(path: path + "/permissionLevel")
    }

    public struct PermissionLevel {
        /// Path: `/organizations/{idOrg}/prefs/permissionLevel`
        public let path: String

        /// UpdateOrganizationsPrefsPermissionLevelByIdOrg()
        public func put(key: String, token: String, _ body: TrelloAPI.PrefsPermissionLevel) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Organizations.WithIDOrg {
    public var website: Website {
        Website(path: path + "/website")
    }

    public struct Website {
        /// Path: `/organizations/{idOrg}/website`
        public let path: String

        /// UpdateOrganizationsWebsiteByIdOrg()
        public func put(key: String, token: String, _ body: TrelloAPI.OrganizationsWebsite) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Organizations.WithIDOrg {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/organizations/{idOrg}/{field}`
        public let path: String

        /// GetOrganizationsByIdOrgByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths {
    public static var search: Search {
        Search(path: "/search")
    }

    public struct Search {
        /// Path: `/search`
        public let path: String

        /// GetSearch()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var query: String
            public var idBoards: String?
            public var idOrganizations: String
            public var idCards: String?
            public var modelTypes: String?
            public var boardFields: String?
            public var boardsLimit: String?
            public var cardFields: String?
            public var cardsLimit: String?
            public var cardsPage: String?
            public var cardBoard: String?
            public var cardList: String?
            public var cardMembers: String?
            public var cardStickers: String?
            public var cardAttachments: String?
            public var organizationFields: String?
            public var organizationsLimit: String?
            public var memberFields: String?
            public var membersLimit: String?
            public var partial: String?
            public var key: String
            public var token: String

            public init(query: String, idBoards: String? = nil, idOrganizations: String, idCards: String? = nil, modelTypes: String? = nil, boardFields: String? = nil, boardsLimit: String? = nil, cardFields: String? = nil, cardsLimit: String? = nil, cardsPage: String? = nil, cardBoard: String? = nil, cardList: String? = nil, cardMembers: String? = nil, cardStickers: String? = nil, cardAttachments: String? = nil, organizationFields: String? = nil, organizationsLimit: String? = nil, memberFields: String? = nil, membersLimit: String? = nil, partial: String? = nil, key: String, token: String) {
                self.query = query
                self.idBoards = idBoards
                self.idOrganizations = idOrganizations
                self.idCards = idCards
                self.modelTypes = modelTypes
                self.boardFields = boardFields
                self.boardsLimit = boardsLimit
                self.cardFields = cardFields
                self.cardsLimit = cardsLimit
                self.cardsPage = cardsPage
                self.cardBoard = cardBoard
                self.cardList = cardList
                self.cardMembers = cardMembers
                self.cardStickers = cardStickers
                self.cardAttachments = cardAttachments
                self.organizationFields = organizationFields
                self.organizationsLimit = organizationsLimit
                self.memberFields = memberFields
                self.membersLimit = membersLimit
                self.partial = partial
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["query": self.query])
                encoder.encode(["idBoards": idBoards])
                encoder.encode(["idOrganizations": idOrganizations])
                encoder.encode(["idCards": idCards])
                encoder.encode(["modelTypes": modelTypes])
                encoder.encode(["board_fields": boardFields])
                encoder.encode(["boards_limit": boardsLimit])
                encoder.encode(["card_fields": cardFields])
                encoder.encode(["cards_limit": cardsLimit])
                encoder.encode(["cards_page": cardsPage])
                encoder.encode(["card_board": cardBoard])
                encoder.encode(["card_list": cardList])
                encoder.encode(["card_members": cardMembers])
                encoder.encode(["card_stickers": cardStickers])
                encoder.encode(["card_attachments": cardAttachments])
                encoder.encode(["organization_fields": organizationFields])
                encoder.encode(["organizations_limit": organizationsLimit])
                encoder.encode(["member_fields": memberFields])
                encoder.encode(["members_limit": membersLimit])
                encoder.encode(["partial": partial])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Search {
    public var members: Members {
        Members(path: path + "/members")
    }

    public struct Members {
        /// Path: `/search/members`
        public let path: String

        /// GetSearchMembers()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var query: String
            public var limit: String?
            public var idBoard: String?
            public var idOrganization: String?
            public var onlyOrgMembers: String?
            public var key: String
            public var token: String

            public init(query: String, limit: String? = nil, idBoard: String? = nil, idOrganization: String? = nil, onlyOrgMembers: String? = nil, key: String, token: String) {
                self.query = query
                self.limit = limit
                self.idBoard = idBoard
                self.idOrganization = idOrganization
                self.onlyOrgMembers = onlyOrgMembers
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["query": self.query])
                encoder.encode(["limit": limit])
                encoder.encode(["idBoard": idBoard])
                encoder.encode(["idOrganization": idOrganization])
                encoder.encode(["onlyOrgMembers": onlyOrgMembers])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths {
    public static var sessions: Sessions {
        Sessions(path: "/sessions")
    }

    public struct Sessions {
        /// Path: `/sessions`
        public let path: String

        /// AddSessions()
        public func post(key: String, token: String, _ body: TrelloAPI.Sessions) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Sessions {
    public var socket: Socket {
        Socket(path: path + "/socket")
    }

    public struct Socket {
        /// Path: `/sessions/socket`
        public let path: String

        /// GetSessionsSocket()
        ///
        /// This is the route for WebSocket requests.  See the socket API reference for a description of WebSocket usage.
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Sessions {
    public func idSession(_ idSession: String) -> WithIDSession {
        WithIDSession(path: "\(path)/\(idSession)")
    }

    public struct WithIDSession {
        /// Path: `/sessions/{idSession}`
        public let path: String

        /// UpdateSessionsByIdSession()
        public func put(key: String, token: String, _ body: TrelloAPI.Sessions) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Sessions.WithIDSession {
    public var status: Status {
        Status(path: path + "/status")
    }

    public struct Status {
        /// Path: `/sessions/{idSession}/status`
        public let path: String

        /// UpdateSessionsStatusByIdSession()
        public func put(key: String, token: String, _ body: TrelloAPI.SessionsStatus) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths {
    public static var tokens: Tokens {
        Tokens(path: "/tokens")
    }

    public struct Tokens {
        /// Path: `/tokens`
        public let path: String
    }
}

extension Paths.Tokens {
    public func token(_ token: String) -> WithToken {
        WithToken(path: "\(path)/\(token)")
    }

    public struct WithToken {
        /// Path: `/tokens/{token}`
        public let path: String

        /// GetTokensByToken()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var webhooks: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, webhooks: String? = nil, key: String, token: String) {
                self.fields = fields
                self.webhooks = webhooks
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["webhooks": webhooks])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }

        /// DeleteTokensByToken()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Tokens.WithToken {
    public var member: Member {
        Member(path: path + "/member")
    }

    public struct Member {
        /// Path: `/tokens/{token}/member`
        public let path: String

        /// GetTokensMemberByToken()
        public func get(parameters: GetParameters) -> Request<Void> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var fields: String?
            public var key: String
            public var token: String

            public init(fields: String? = nil, key: String, token: String) {
                self.fields = fields
                self.key = key
                self.token = token
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["fields": fields])
                encoder.encode(["key": key])
                encoder.encode(["token": token])
                return encoder.items
            }
        }
    }
}

extension Paths.Tokens.WithToken.Member {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/tokens/{token}/member/{field}`
        public let path: String

        /// GetTokensMemberByTokenByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Tokens.WithToken {
    public var webhooks: Webhooks {
        Webhooks(path: path + "/webhooks")
    }

    public struct Webhooks {
        /// Path: `/tokens/{token}/webhooks`
        public let path: String

        /// GetTokensWebhooksByToken()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// AddTokensWebhooksByToken()
        public func post(key: String, token: String, _ body: TrelloAPI.TokensWebhooks) -> Request<Void> {
            .post(path, query: makePostQuery(key, token), body: body)
        }

        private func makePostQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// UpdateTokensWebhooksByToken()
        public func put(key: String, token: String, _ body: TrelloAPI.TokensWebhooks) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Tokens.WithToken.Webhooks {
    public func idWebhook(_ idWebhook: String) -> WithIDWebhook {
        WithIDWebhook(path: "\(path)/\(idWebhook)")
    }

    public struct WithIDWebhook {
        /// Path: `/tokens/{token}/webhooks/{idWebhook}`
        public let path: String

        /// GetTokensWebhooksByTokenByIdWebhook()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// DeleteTokensWebhooksByTokenByIdWebhook()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Tokens.WithToken {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/tokens/{token}/{field}`
        public let path: String

        /// GetTokensByTokenByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths {
    public static var types: Types {
        Types(path: "/types")
    }

    public struct Types {
        /// Path: `/types`
        public let path: String
    }
}

extension Paths.Types {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/types/{id}`
        public let path: String

        /// GetTypesById()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths {
    public static var webhooks: Webhooks {
        Webhooks(path: "/webhooks")
    }

    public struct Webhooks {
        /// Path: `/webhooks`
        public let path: String

        /// UpdateWebhooks()
        public func put(key: String, token: String, _ body: TrelloAPI.Webhooks) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Webhooks {
    public func idWebhook(_ idWebhook: String) -> WithIDWebhook {
        WithIDWebhook(path: "\(path)/\(idWebhook)")
    }

    public struct WithIDWebhook {
        /// Path: `/webhooks/{idWebhook}`
        public let path: String

        /// GetWebhooksByIdWebhook()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// UpdateWebhooksByIdWebhook()
        public func put(key: String, token: String, _ body: TrelloAPI.Webhooks) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }

        /// DeleteWebhooksByIdWebhook()
        public func delete(key: String, token: String) -> Request<Void> {
            .delete(path, query: makeDeleteQuery(key, token))
        }

        private func makeDeleteQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Webhooks.WithIDWebhook {
    public var active: Active {
        Active(path: path + "/active")
    }

    public struct Active {
        /// Path: `/webhooks/{idWebhook}/active`
        public let path: String

        /// UpdateWebhooksActiveByIdWebhook()
        public func put(key: String, token: String, _ body: TrelloAPI.WebhooksActive) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Webhooks.WithIDWebhook {
    public var callbackURL: CallbackURL {
        CallbackURL(path: path + "/callbackURL")
    }

    public struct CallbackURL {
        /// Path: `/webhooks/{idWebhook}/callbackURL`
        public let path: String

        /// UpdateWebhooksCallbackURLByIdWebhook()
        public func put(key: String, token: String, _ body: TrelloAPI.WebhooksCallbackURL) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Webhooks.WithIDWebhook {
    public var description: Description {
        Description(path: path + "/description")
    }

    public struct Description {
        /// Path: `/webhooks/{idWebhook}/description`
        public let path: String

        /// UpdateWebhooksDescriptionByIdWebhook()
        public func put(key: String, token: String, _ body: TrelloAPI.WebhooksDescription) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Webhooks.WithIDWebhook {
    public var idModel: IDModel {
        IDModel(path: path + "/idModel")
    }

    public struct IDModel {
        /// Path: `/webhooks/{idWebhook}/idModel`
        public let path: String

        /// UpdateWebhooksIdModelByIdWebhook()
        public func put(key: String, token: String, _ body: TrelloAPI.WebhooksIDModel) -> Request<Void> {
            .put(path, query: makePutQuery(key, token), body: body)
        }

        private func makePutQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

extension Paths.Webhooks.WithIDWebhook {
    public func field(_ field: String) -> WithField {
        WithField(path: "\(path)/\(field)")
    }

    public struct WithField {
        /// Path: `/webhooks/{idWebhook}/{field}`
        public let path: String

        /// GetWebhooksByIdWebhookByField()
        public func get(key: String, token: String) -> Request<Void> {
            .get(path, query: makeGetQuery(key, token))
        }

        private func makeGetQuery(_ key: String, _ token: String) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(["key": key])
            encoder.encode(["token": token])
            return encoder.items
        }
    }
}

public enum Paths {}
