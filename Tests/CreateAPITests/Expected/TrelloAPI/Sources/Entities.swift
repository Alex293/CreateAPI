// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation

public struct Actions: Codable {
    /// A string with a length from 1 to 16384
    public var text: String?

    public init(text: String? = nil) {
        self.text = text
    }
}

public struct ActionsComments: Codable {
    /// A string with a length from 1 to 16384
    public var text: String?

    public init(text: String? = nil) {
        self.text = text
    }
}

public struct ActionsText: Codable {
    /// A string with a length from 1 to 16384
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct Boards: Codable {
    /// true or false
    public var closed: String?
    /// A string with a length from 0 to 16384
    public var desc: String?
    /// The id of the board to copy into the new board
    public var idBoardSource: String?
    /// The id or name of the organization to add the board to.
    public var idOrganization: String?
    /// Components of the source board to copy.
    public var keepFromSource: String?
    /// A string with a length from 0 to 16384
    public var labelNamesBlue: String?
    /// A string with a length from 0 to 16384
    public var labelNamesGreen: String?
    /// A string with a length from 0 to 16384
    public var labelNamesOrange: String?
    /// A string with a length from 0 to 16384
    public var labelNamesPurple: String?
    /// A string with a length from 0 to 16384
    public var labelNamesRed: String?
    /// A string with a length from 0 to 16384
    public var labelNamesYellow: String?
    /// A string with a length from 1 to 16384
    public var name: String?
    /// All or a comma-separated list of: calendar, cardAging, recap or voting
    public var powerUps: String?
    /// A standard background name, or the id of a custom background
    public var prefsBackground: String?
    /// true or false
    public var prefsCalendarFeedEnabled: String?
    /// One of: pirate or regular
    public var prefsCardAging: String?
    /// true or false
    public var prefsCardCovers: String?
    /// One of: disabled, members, observers, org or public
    public var prefsComments: String?
    /// One of: admins or members
    public var prefsInvitations: String?
    /// One of: org, private or public
    public var prefsPermissionLevel: String?
    /// true or false
    public var prefsSelfJoin: String?
    /// One of: disabled, members, observers, org or public
    public var prefsVoting: String?
    /// true or false
    public var subscribed: String?

    public init(closed: String? = nil, desc: String? = nil, idBoardSource: String? = nil, idOrganization: String? = nil, keepFromSource: String? = nil, labelNamesBlue: String? = nil, labelNamesGreen: String? = nil, labelNamesOrange: String? = nil, labelNamesPurple: String? = nil, labelNamesRed: String? = nil, labelNamesYellow: String? = nil, name: String? = nil, powerUps: String? = nil, prefsBackground: String? = nil, prefsCalendarFeedEnabled: String? = nil, prefsCardAging: String? = nil, prefsCardCovers: String? = nil, prefsComments: String? = nil, prefsInvitations: String? = nil, prefsPermissionLevel: String? = nil, prefsSelfJoin: String? = nil, prefsVoting: String? = nil, subscribed: String? = nil) {
        self.closed = closed
        self.desc = desc
        self.idBoardSource = idBoardSource
        self.idOrganization = idOrganization
        self.keepFromSource = keepFromSource
        self.labelNamesBlue = labelNamesBlue
        self.labelNamesGreen = labelNamesGreen
        self.labelNamesOrange = labelNamesOrange
        self.labelNamesPurple = labelNamesPurple
        self.labelNamesRed = labelNamesRed
        self.labelNamesYellow = labelNamesYellow
        self.name = name
        self.powerUps = powerUps
        self.prefsBackground = prefsBackground
        self.prefsCalendarFeedEnabled = prefsCalendarFeedEnabled
        self.prefsCardAging = prefsCardAging
        self.prefsCardCovers = prefsCardCovers
        self.prefsComments = prefsComments
        self.prefsInvitations = prefsInvitations
        self.prefsPermissionLevel = prefsPermissionLevel
        self.prefsSelfJoin = prefsSelfJoin
        self.prefsVoting = prefsVoting
        self.subscribed = subscribed
    }

    private enum CodingKeys: String, CodingKey {
        case closed
        case desc
        case idBoardSource
        case idOrganization
        case keepFromSource
        case labelNamesBlue = "labelNames/blue"
        case labelNamesGreen = "labelNames/green"
        case labelNamesOrange = "labelNames/orange"
        case labelNamesPurple = "labelNames/purple"
        case labelNamesRed = "labelNames/red"
        case labelNamesYellow = "labelNames/yellow"
        case name
        case powerUps
        case prefsBackground = "prefs/background"
        case prefsCalendarFeedEnabled = "prefs/calendarFeedEnabled"
        case prefsCardAging = "prefs/cardAging"
        case prefsCardCovers = "prefs/cardCovers"
        case prefsComments = "prefs/comments"
        case prefsInvitations = "prefs/invitations"
        case prefsPermissionLevel = "prefs/permissionLevel"
        case prefsSelfJoin = "prefs/selfJoin"
        case prefsVoting = "prefs/voting"
        case subscribed
    }
}

public struct BoardsChecklists: Codable {
    /// A string with a length from 1 to 16384
    public var name: String?

    public init(name: String? = nil) {
        self.name = name
    }
}

public struct BoardsClosed: Codable {
    /// true or false
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct BoardsDesc: Codable {
    /// A string with a length from 0 to 16384
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct BoardsIDOrganization: Codable {
    /// A string with a length from 0 to 16384
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct BoardsLabels: Codable {
    /// A valid label color or null
    public var color: String?
    /// A string with a length from 0 to 16384
    public var name: String?

    public init(color: String? = nil, name: String? = nil) {
        self.color = color
        self.name = name
    }
}

public struct BoardsLists: Codable {
    /// A string with a length from 1 to 16384
    public var name: String?
    /// A position. top , bottom , or a positive number.
    public var pos: String?

    public init(name: String? = nil, pos: String? = nil) {
        self.name = name
        self.pos = pos
    }
}

public struct BoardsMembers: Codable {
    /// An email address
    public var email: String?
    /// A string with a length of at least 1.  Cannot begin or end with a space.
    public var fullName: String?
    /// One of: admin, normal or observer
    public var type: String?

    public init(email: String? = nil, fullName: String? = nil, type: String? = nil) {
        self.email = email
        self.fullName = fullName
        self.type = type
    }
}

public struct BoardsMemberships: Codable {
    /// All or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    public var memberFields: String?
    /// One of: admin, normal or observer
    public var type: String?

    public init(memberFields: String? = nil, type: String? = nil) {
        self.memberFields = memberFields
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case memberFields = "member_fields"
        case type
    }
}

public struct BoardsName: Codable {
    /// A string with a length from 1 to 16384
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct BoardsPowerUps: Codable {
    /// One of: calendar, cardAging, recap or voting
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct BoardsSubscribed: Codable {
    /// true or false
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct Cards: Codable {
    /// true or false
    public var closed: String?
    /// A string with a length from 0 to 16384
    public var desc: String?
    /// A date, or null
    public var due: String?
    /// A file
    public var fileSource: String?
    /// Id of the image attachment of this card to use as its cover, or null for no cover
    public var idAttachmentCover: String?
    /// Id of the board the card should be moved to
    public var idBoard: String?
    /// The id of the card to copy into a new card.
    public var idCardSource: String?
    /// A comma-separated list of objectIds, 24-character hex strings
    public var idLabels: String?
    /// Id of the list that the card should be added to
    public var idList: String?
    /// A comma-separated list of objectIds, 24-character hex strings
    public var idMembers: String?
    /// Properties of the card to copy over from the source.
    public var keepFromSource: String?
    /// All or a comma-separated list of: blue, green, orange, purple, red or yellow
    public var labels: String?
    /// The name of the new card.  It isn&#39;t required if the name is being copied from provided by a URL, file or card that is being copied.
    public var name: String?
    /// A position. top , bottom , or a positive number.
    public var pos: String?
    /// true or false
    public var subscribed: String?
    /// A URL starting with http:// or https:// or null
    public var urlSource: String?

    public init(closed: String? = nil, desc: String? = nil, due: String? = nil, fileSource: String? = nil, idAttachmentCover: String? = nil, idBoard: String? = nil, idCardSource: String? = nil, idLabels: String? = nil, idList: String? = nil, idMembers: String? = nil, keepFromSource: String? = nil, labels: String? = nil, name: String? = nil, pos: String? = nil, subscribed: String? = nil, urlSource: String? = nil) {
        self.closed = closed
        self.desc = desc
        self.due = due
        self.fileSource = fileSource
        self.idAttachmentCover = idAttachmentCover
        self.idBoard = idBoard
        self.idCardSource = idCardSource
        self.idLabels = idLabels
        self.idList = idList
        self.idMembers = idMembers
        self.keepFromSource = keepFromSource
        self.labels = labels
        self.name = name
        self.pos = pos
        self.subscribed = subscribed
        self.urlSource = urlSource
    }
}

public struct CardsActionsComments: Codable {
    /// A string with a length from 1 to 16384
    public var text: String?

    public init(text: String? = nil) {
        self.text = text
    }
}

public struct CardsAttachments: Codable {
    /// A file
    public var file: String?
    /// A string with a length from 0 to 256
    public var mimeType: String?
    /// A string with a length from 0 to 256
    public var name: String?
    /// A URL starting with http:// or https:// or null
    public var url: String?

    public init(file: String? = nil, mimeType: String? = nil, name: String? = nil, url: String? = nil) {
        self.file = file
        self.mimeType = mimeType
        self.name = name
        self.url = url
    }
}

public struct CardsChecklistCheckItem: Codable {
    /// A string with a length from 1 to 16384
    public var name: String?
    /// A position. top , bottom , or a positive number.
    public var pos: String?

    public init(name: String? = nil, pos: String? = nil) {
        self.name = name
        self.pos = pos
    }
}

public struct CardsChecklistCheckItemName: Codable {
    /// A string with a length from 1 to 16384
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct CardsChecklistCheckItemPos: Codable {
    /// A position. top , bottom , or a positive number.
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct CardsChecklistCheckItemState: Codable {
    /// One of: complete, false, incomplete or true
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct CardsChecklistIDChecklistCurrentCheckItem: Codable {
    /// An id, or null
    public var idChecklist: String?
    /// A string with a length from 1 to 16384
    public var name: String?
    /// A position. top , bottom , or a positive number.
    public var pos: String?
    /// One of: complete, false, incomplete or true
    public var state: String?

    public init(idChecklist: String? = nil, name: String? = nil, pos: String? = nil, state: String? = nil) {
        self.idChecklist = idChecklist
        self.name = name
        self.pos = pos
        self.state = state
    }
}

public struct CardsChecklists: Codable {
    /// The id of the source checklist to copy into a new checklist.
    public var idChecklistSource: String?
    /// A string with a length from 0 to 16384
    public var name: String?
    /// The id of the checklist to add to the card, or null to create a new one.
    public var value: String?

    public init(idChecklistSource: String? = nil, name: String? = nil, value: String? = nil) {
        self.idChecklistSource = idChecklistSource
        self.name = name
        self.value = value
    }
}

public struct CardsClosed: Codable {
    /// true or false
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct CardsDesc: Codable {
    /// A string with a length from 0 to 16384
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct CardsDue: Codable {
    /// A date, or null
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct CardsIDAttachmentCover: Codable {
    /// Id of the image attachment of this card to use as its cover, or null for no cover
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct CardsIDBoard: Codable {
    /// Id of the list that the card should be moved to on the new board
    public var idList: String?
    /// Id of the board the card should be moved to
    public var value: String?

    public init(idList: String? = nil, value: String? = nil) {
        self.idList = idList
        self.value = value
    }
}

public struct CardsIDLabels: Codable {
    /// The id of the label to add
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct CardsIDList: Codable {
    /// Id of the list the card should be moved to
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct CardsIDMembers: Codable {
    /// The id of the member to add to the card
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct CardsLabels: Codable {
    /// A valid label color or null
    public var color: String?
    /// A string with a length from 0 to 16384
    public var name: String?
    /// All or a comma-separated list of: blue, green, orange, purple, red or yellow
    public var value: String?

    public init(color: String? = nil, name: String? = nil, value: String? = nil) {
        self.color = color
        self.name = name
        self.value = value
    }
}

public struct CardsMembersVoted: Codable {
    /// The id of the member to vote &#39;yes&#39; on the card
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct CardsName: Codable {
    /// A string with a length from 1 to 16384
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct CardsPos: Codable {
    /// A position. top , bottom , or a positive number.
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct CardsStickers: Codable {
    /// A string with a length from 0 to 16384
    public var image: String?
    /// Undefined
    public var left: String?
    /// Undefined
    public var rotate: String?
    /// Undefined
    public var top: String?
    /// Valid Z values for stickers, must be an integer
    public var zIndex: String?

    public init(image: String? = nil, left: String? = nil, rotate: String? = nil, top: String? = nil, zIndex: String? = nil) {
        self.image = image
        self.left = left
        self.rotate = rotate
        self.top = top
        self.zIndex = zIndex
    }
}

public struct CardsSubscribed: Codable {
    /// true or false
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct Checklists: Codable {
    /// Id of the board that the checklist should be added to
    public var idBoard: String?
    /// Id of the card that the checklist should be added to
    public var idCard: String?
    /// The id of the source checklist to copy into a new checklist.
    public var idChecklistSource: String?
    /// A string with a length from 0 to 16384
    public var name: String?
    /// A position. top , bottom , or a positive number.
    public var pos: String?

    public init(idBoard: String? = nil, idCard: String? = nil, idChecklistSource: String? = nil, name: String? = nil, pos: String? = nil) {
        self.idBoard = idBoard
        self.idCard = idCard
        self.idChecklistSource = idChecklistSource
        self.name = name
        self.pos = pos
    }
}

public struct ChecklistsCheckItems: Codable {
    /// true or false
    public var checked: String?
    /// A string with a length from 1 to 16384
    public var name: String?
    /// A position. top , bottom , or a positive number.
    public var pos: String?

    public init(checked: String? = nil, name: String? = nil, pos: String? = nil) {
        self.checked = checked
        self.name = name
        self.pos = pos
    }
}

public struct ChecklistsIDCard: Codable {
    /// The id of the card that the checklist is on
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct ChecklistsName: Codable {
    /// A string with a length from 1 to 16384
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct ChecklistsPos: Codable {
    /// A position. top , bottom , or a positive number.
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct LabelNamesBlue: Codable {
    /// A string with a length from 0 to 16384
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct LabelNamesGreen: Codable {
    /// A string with a length from 0 to 16384
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct LabelNamesOrange: Codable {
    /// A string with a length from 0 to 16384
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct LabelNamesPurple: Codable {
    /// A string with a length from 0 to 16384
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct LabelNamesRed: Codable {
    /// A string with a length from 0 to 16384
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct LabelNamesYellow: Codable {
    /// A string with a length from 0 to 16384
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct Labels: Codable {
    /// A valid label color or null
    public var color: String?
    /// An id
    public var idBoard: String?
    /// A string with a length from 0 to 16384
    public var name: String?

    public init(color: String? = nil, idBoard: String? = nil, name: String? = nil) {
        self.color = color
        self.idBoard = idBoard
        self.name = name
    }
}

public struct LabelsColor: Codable {
    /// A valid label color or null
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct LabelsName: Codable {
    /// A string with a length from 0 to 16384
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct Lists: Codable {
    /// true or false
    public var closed: String?
    /// Id of the board that the list should be added to
    public var idBoard: String?
    /// The id of the list to copy into a new list.
    public var idListSource: String?
    /// A string with a length from 1 to 16384
    public var name: String?
    /// A position. top , bottom , or a positive number.
    public var pos: String?
    /// true or false
    public var subscribed: String?

    public init(closed: String? = nil, idBoard: String? = nil, idListSource: String? = nil, name: String? = nil, pos: String? = nil, subscribed: String? = nil) {
        self.closed = closed
        self.idBoard = idBoard
        self.idListSource = idListSource
        self.name = name
        self.pos = pos
        self.subscribed = subscribed
    }
}

public struct ListsCards: Codable {
    /// A string with a length from 0 to 16384
    public var desc: String?
    /// A date, or null
    public var due: String?
    /// A comma-separated list of objectIds, 24-character hex strings
    public var idMembers: String?
    /// All or a comma-separated list of: blue, green, orange, purple, red or yellow
    public var labels: String?
    /// A string with a length from 1 to 16384
    public var name: String?

    public init(desc: String? = nil, due: String? = nil, idMembers: String? = nil, labels: String? = nil, name: String? = nil) {
        self.desc = desc
        self.due = due
        self.idMembers = idMembers
        self.labels = labels
        self.name = name
    }
}

public struct ListsClosed: Codable {
    /// true or false
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct ListsIDBoard: Codable {
    /// Position of the list on the new board
    public var pos: String?
    /// Id of the board the list should be moved to
    public var value: String?

    public init(pos: String? = nil, value: String? = nil) {
        self.pos = pos
        self.value = value
    }
}

public struct ListsMoveAllCards: Codable {
    /// Id of the board that the cards should be moved to
    public var idBoard: String?

    public init(idBoard: String? = nil) {
        self.idBoard = idBoard
    }
}

public struct ListsName: Codable {
    /// A string with a length from 1 to 16384
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct ListsPos: Codable {
    /// A position. top , bottom , or a positive number.
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct ListsSubscribed: Codable {
    /// true or false
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct Members: Codable {
    /// One of: gravatar, none or upload
    public var avatarSource: String?
    /// A string with a length from 0 to 16384
    public var bio: String?
    /// A string with a length of at least 1.  Cannot begin or end with a space.
    public var fullName: String?
    /// A string with a length from 1 to 4.  Cannot begin or end with a space
    public var initials: String?
    /// true or false
    public var prefsColorBlind: String?
    /// A string with a length from 0 to 255
    public var prefsLocale: String?
    /// -1 (disabled), 1 or 60
    public var prefsMinutesBetweenSummaries: String?
    /// A string with a length of at least 3.  Only lowercase letters, underscores, and numbers are allowed.  Must be unique.
    public var username: String?

    public init(avatarSource: String? = nil, bio: String? = nil, fullName: String? = nil, initials: String? = nil, prefsColorBlind: String? = nil, prefsLocale: String? = nil, prefsMinutesBetweenSummaries: String? = nil, username: String? = nil) {
        self.avatarSource = avatarSource
        self.bio = bio
        self.fullName = fullName
        self.initials = initials
        self.prefsColorBlind = prefsColorBlind
        self.prefsLocale = prefsLocale
        self.prefsMinutesBetweenSummaries = prefsMinutesBetweenSummaries
        self.username = username
    }

    private enum CodingKeys: String, CodingKey {
        case avatarSource
        case bio
        case fullName
        case initials
        case prefsColorBlind = "prefs/colorBlind"
        case prefsLocale = "prefs/locale"
        case prefsMinutesBetweenSummaries = "prefs/minutesBetweenSummaries"
        case username
    }
}

public struct MembersAvatar: Codable {
    /// A file
    public var file: String?

    public init(file: String? = nil) {
        self.file = file
    }
}

public struct MembersAvatarSource: Codable {
    /// One of: gravatar, none or upload
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct MembersBio: Codable {
    /// A string with a length from 0 to 16384
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct MembersBoardBackgrounds: Codable {
    /// One of: dark, light or unknown
    public var brightness: String?
    /// A file
    public var file: String?
    /// true or false
    public var tile: String?

    public init(brightness: String? = nil, file: String? = nil, tile: String? = nil) {
        self.brightness = brightness
        self.file = file
        self.tile = tile
    }
}

public struct MembersBoardStars: Codable {
    /// The id of the board to star
    public var idBoard: String?
    /// A position. top , bottom , or a positive number.
    public var pos: String?

    public init(idBoard: String? = nil, pos: String? = nil) {
        self.idBoard = idBoard
        self.pos = pos
    }
}

public struct MembersBoardStarsIDBoard: Codable {
    /// An id
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct MembersBoardStarsPos: Codable {
    /// A position. top , bottom , or a positive number.
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct MembersCustomBoardBackgrounds: Codable {
    /// One of: dark, light or unknown
    public var brightness: String?
    /// A file
    public var file: String?
    /// true or false
    public var tile: String?

    public init(brightness: String? = nil, file: String? = nil, tile: String? = nil) {
        self.brightness = brightness
        self.file = file
        self.tile = tile
    }
}

public struct MembersCustomEmoji: Codable {
    /// A file
    public var file: String?
    /// A string with a length from 2 to 64
    public var name: String?

    public init(file: String? = nil, name: String? = nil) {
        self.file = file
        self.name = name
    }
}

public struct MembersCustomStickers: Codable {
    /// A file
    public var file: String?

    public init(file: String? = nil) {
        self.file = file
    }
}

public struct MembersFullName: Codable {
    /// A string with a length of at least 1.  Cannot begin or end with a space.
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct MembersInitials: Codable {
    /// A string with a length from 1 to 4.  Cannot begin or end with a space
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct MembersOneTimeMessagesDismissed: Codable {
    /// Type of message dismissed
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct MembersSavedSearches: Codable {
    /// A non-empty string with at least one non-space character
    public var name: String?
    /// A position. top , bottom , or a positive number.
    public var pos: String?
    /// A string with a length from 1 to 16384
    public var query: String?

    public init(name: String? = nil, pos: String? = nil, query: String? = nil) {
        self.name = name
        self.pos = pos
        self.query = query
    }
}

public struct MembersSavedSearchesName: Codable {
    /// A non-empty string with at least one non-space character
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct MembersSavedSearchesPos: Codable {
    /// A position. top , bottom , or a positive number.
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct MembersSavedSearchesQuery: Codable {
    /// A string with a length from 1 to 16384
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct MembersUsername: Codable {
    /// A string with a length of at least 3.  Only lowercase letters, underscores, and numbers are allowed.  Must be unique.
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct MyPrefsEmailPosition: Codable {
    /// One of: bottom or top
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct MyPrefsIDEmailList: Codable {
    /// An id
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct MyPrefsShowListGuide: Codable {
    /// true or false
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct MyPrefsShowSidebar: Codable {
    /// true or false
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct MyPrefsShowSidebarActivity: Codable {
    /// true or false
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct MyPrefsShowSidebarBoardActions: Codable {
    /// true or false
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct MyPrefsShowSidebarMembers: Codable {
    /// true or false
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct Notifications: Codable {
    /// true or false
    public var unread: String?

    public init(unread: String? = nil) {
        self.unread = unread
    }
}

public struct NotificationsUnread: Codable {
    /// true or false
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct Organizations: Codable {
    /// A string with a length from 0 to 16384
    public var desc: String?
    /// A string with a length of at least 1.  Cannot begin or end with a space.
    public var displayName: String?
    /// A string with a length from 0 to 16384
    public var name: String?
    /// The google apps domain to link this org to.
    public var prefsAssociatedDomain: String?
    /// One of: admin, none or org
    public var prefsBoardVisibilityRestrictOrg: String?
    /// One of: admin, none or org
    public var prefsBoardVisibilityRestrictPrivate: String?
    /// One of: admin, none or org
    public var prefsBoardVisibilityRestrictPublic: String?
    /// true or false
    public var prefsExternalMembersDisabled: String?
    /// A number from 1 to 2
    public var prefsGoogleAppsVersion: String?
    /// An email address with optional expansion tokens
    public var prefsOrgInviteRestrict: String?
    /// One of: private or public
    public var prefsPermissionLevel: String?
    /// A URL starting with http:// or https:// or null
    public var website: String?

    public init(desc: String? = nil, displayName: String? = nil, name: String? = nil, prefsAssociatedDomain: String? = nil, prefsBoardVisibilityRestrictOrg: String? = nil, prefsBoardVisibilityRestrictPrivate: String? = nil, prefsBoardVisibilityRestrictPublic: String? = nil, prefsExternalMembersDisabled: String? = nil, prefsGoogleAppsVersion: String? = nil, prefsOrgInviteRestrict: String? = nil, prefsPermissionLevel: String? = nil, website: String? = nil) {
        self.desc = desc
        self.displayName = displayName
        self.name = name
        self.prefsAssociatedDomain = prefsAssociatedDomain
        self.prefsBoardVisibilityRestrictOrg = prefsBoardVisibilityRestrictOrg
        self.prefsBoardVisibilityRestrictPrivate = prefsBoardVisibilityRestrictPrivate
        self.prefsBoardVisibilityRestrictPublic = prefsBoardVisibilityRestrictPublic
        self.prefsExternalMembersDisabled = prefsExternalMembersDisabled
        self.prefsGoogleAppsVersion = prefsGoogleAppsVersion
        self.prefsOrgInviteRestrict = prefsOrgInviteRestrict
        self.prefsPermissionLevel = prefsPermissionLevel
        self.website = website
    }

    private enum CodingKeys: String, CodingKey {
        case desc
        case displayName
        case name
        case prefsAssociatedDomain = "prefs/associatedDomain"
        case prefsBoardVisibilityRestrictOrg = "prefs/boardVisibilityRestrict/org"
        case prefsBoardVisibilityRestrictPrivate = "prefs/boardVisibilityRestrict/private"
        case prefsBoardVisibilityRestrictPublic = "prefs/boardVisibilityRestrict/public"
        case prefsExternalMembersDisabled = "prefs/externalMembersDisabled"
        case prefsGoogleAppsVersion = "prefs/googleAppsVersion"
        case prefsOrgInviteRestrict = "prefs/orgInviteRestrict"
        case prefsPermissionLevel = "prefs/permissionLevel"
        case website
    }
}

public struct OrganizationsDesc: Codable {
    /// A string with a length from 0 to 16384
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct OrganizationsDisplayName: Codable {
    /// A string with a length of at least 1.  Cannot begin or end with a space.
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct OrganizationsLogo: Codable {
    /// A file
    public var file: String?

    public init(file: String? = nil) {
        self.file = file
    }
}

public struct OrganizationsMembers: Codable {
    /// An email address
    public var email: String?
    /// A string with a length of at least 1.  Cannot begin or end with a space.
    public var fullName: String?
    /// One of: admin, normal or observer
    public var type: String?

    public init(email: String? = nil, fullName: String? = nil, type: String? = nil) {
        self.email = email
        self.fullName = fullName
        self.type = type
    }
}

public struct OrganizationsMembersDeactivated: Codable {
    /// true or false
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct OrganizationsMemberships: Codable {
    /// All or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username
    public var memberFields: String?
    /// One of: admin, normal or observer
    public var type: String?

    public init(memberFields: String? = nil, type: String? = nil) {
        self.memberFields = memberFields
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case memberFields = "member_fields"
        case type
    }
}

public struct OrganizationsName: Codable {
    /// A string with a length of at least 3.  Only lowercase letters, underscores, and numbers are allowed.  Must be unique.
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct OrganizationsWebsite: Codable {
    /// A URL starting with http:// or https:// or null
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct PrefsAssociatedDomain: Codable {
    /// The google apps domain to link this org to.
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct PrefsBackground: Codable {
    /// A standard background name, or the id of a custom background
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct PrefsBoardVisibilityRestrict: Codable {
    /// One of: admin, none or org
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct PrefsCalendarFeedEnabled: Codable {
    /// true or false
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct PrefsCardAging: Codable {
    /// One of: pirate or regular
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct PrefsCardCovers: Codable {
    /// true or false
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct PrefsColorBlind: Codable {
    /// true or false
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct PrefsComments: Codable {
    /// One of: disabled, members, observers, org or public
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct PrefsExternalMembersDisabled: Codable {
    /// true or false
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct PrefsGoogleAppsVersion: Codable {
    /// A number from 1 to 2
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct PrefsInvitations: Codable {
    /// One of: admins or members
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct PrefsLocale: Codable {
    /// A string with a length from 0 to 255
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct PrefsMinutesBetweenSummaries: Codable {
    /// -1 (disabled), 1 or 60
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct PrefsOrgInviteRestrict: Codable {
    /// An email address with optional expansion tokens
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct PrefsPermissionLevel: Codable {
    /// One of: private or public
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct PrefsSelfJoin: Codable {
    /// true or false
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct PrefsVoting: Codable {
    /// One of: disabled, members, observers, org or public
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct Sessions: Codable {
    /// The id of the board you&#39;re viewing.  Boards with no viewers will not get updates about members&#39; statuses.
    public var idBoard: String?
    /// One of: active, disconnected or idle
    public var status: String?

    public init(idBoard: String? = nil, status: String? = nil) {
        self.idBoard = idBoard
        self.status = status
    }
}

public struct SessionsStatus: Codable {
    /// One of: active, disconnected or idle
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct TokensWebhooks: Codable {
    /// A valid URL that is reachable with a HEAD request
    public var callbackURL: String?
    /// A string with a length from 0 to 16384
    public var description: String?
    /// Id of the model to be monitored
    public var idModel: String?

    public init(callbackURL: String? = nil, description: String? = nil, idModel: String? = nil) {
        self.callbackURL = callbackURL
        self.description = description
        self.idModel = idModel
    }
}

public struct Webhooks: Codable {
    /// true or false
    public var active: String?
    /// A valid URL that is reachable with a HEAD request
    public var callbackURL: String?
    /// A string with a length from 0 to 16384
    public var description: String?
    /// Id of the model that should be hooked
    public var idModel: String?

    public init(active: String? = nil, callbackURL: String? = nil, description: String? = nil, idModel: String? = nil) {
        self.active = active
        self.callbackURL = callbackURL
        self.description = description
        self.idModel = idModel
    }
}

public struct WebhooksActive: Codable {
    /// true or false
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct WebhooksCallbackURL: Codable {
    /// A valid URL that is reachable with a HEAD request
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct WebhooksDescription: Codable {
    /// A string with a length from 0 to 16384
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

public struct WebhooksIDModel: Codable {
    /// Id of the model to be monitored
    public var value: String?

    public init(value: String? = nil) {
        self.value = value
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
