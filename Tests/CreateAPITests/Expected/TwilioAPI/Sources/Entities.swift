// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import NaiveDate

public struct APIV2010Account: Codable {
    /// The authorization token for this account
    public var authToken: String?
    /// The date this account was created
    public var dateCreated: String?
    /// The date this account was last updated
    public var dateUpdated: String?
    /// A human readable description of this account
    public var friendlyName: String?
    /// The unique 34 character id representing the parent of this account
    public var ownerAccountSid: String?
    /// A 34 character string that uniquely identifies this resource.
    public var sid: String?
    /// The status of this account
    public var status: Status?
    /// Account Instance Subresources
    public var subresourceUris: [String: AnyJSON]?
    /// The type of this account
    public var type: `Type`?
    /// The URI for this resource, relative to `https://api.twilio.com`
    public var uri: URL?

    /// The status of this account
    public enum Status: String, Codable, CaseIterable {
        case active
        case suspended
        case closed
    }

    /// The type of this account
    public enum `Type`: String, Codable, CaseIterable {
        case trial = "Trial"
        case full = "Full"
    }

    public init(authToken: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, friendlyName: String? = nil, ownerAccountSid: String? = nil, sid: String? = nil, status: Status? = nil, subresourceUris: [String: AnyJSON]? = nil, type: `Type`? = nil, uri: URL? = nil) {
        self.authToken = authToken
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.friendlyName = friendlyName
        self.ownerAccountSid = ownerAccountSid
        self.sid = sid
        self.status = status
        self.subresourceUris = subresourceUris
        self.type = type
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case authToken = "auth_token"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case friendlyName = "friendly_name"
        case ownerAccountSid = "owner_account_sid"
        case sid
        case status
        case subresourceUris = "subresource_uris"
        case type
        case uri
    }
}

public struct APIV2010AccountAddress: Codable {
    /// The SID of the Account that is responsible for the resource
    public var accountSid: String?
    /// The city in which the address is located
    public var city: String?
    /// The name associated with the address
    public var customerName: String?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// Whether emergency calling has been enabled on this number
    public var isEmergencyEnabled: Bool?
    /// The string that you assigned to describe the resource
    public var friendlyName: String?
    /// The ISO country code of the address
    public var isoCountry: String?
    /// The postal code of the address
    public var postalCode: String?
    /// The state or region of the address
    public var region: String?
    /// The unique string that identifies the resource
    public var sid: String?
    /// The number and street address of the address
    public var street: String?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?
    /// Whether the address has been validated to comply with local regulation
    public var isValidated: Bool?
    /// Whether the address has been verified to comply with regulation
    public var isVerified: Bool?

    public init(accountSid: String? = nil, city: String? = nil, customerName: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, isEmergencyEnabled: Bool? = nil, friendlyName: String? = nil, isoCountry: String? = nil, postalCode: String? = nil, region: String? = nil, sid: String? = nil, street: String? = nil, uri: URL? = nil, isValidated: Bool? = nil, isVerified: Bool? = nil) {
        self.accountSid = accountSid
        self.city = city
        self.customerName = customerName
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.isEmergencyEnabled = isEmergencyEnabled
        self.friendlyName = friendlyName
        self.isoCountry = isoCountry
        self.postalCode = postalCode
        self.region = region
        self.sid = sid
        self.street = street
        self.uri = uri
        self.isValidated = isValidated
        self.isVerified = isVerified
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case city
        case customerName = "customer_name"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case isEmergencyEnabled = "emergency_enabled"
        case friendlyName = "friendly_name"
        case isoCountry = "iso_country"
        case postalCode = "postal_code"
        case region
        case sid
        case street
        case uri
        case isValidated = "validated"
        case isVerified = "verified"
    }
}

public struct APIV2010AccountAddressDependentPhoneNumber: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// Whether the phone number requires an Address registered with Twilio
    public var addressRequirements: AddressRequirements?
    /// The API version used to start a new TwiML session
    public var apiVersion: String?
    /// Indicate if a phone can receive calls or messages
    public var capabilities: [String: AnyJSON]?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// The emergency address configuration to use for emergency calling
    public var emergencyAddressSid: String?
    /// Whether the phone number is enabled for emergency calling
    public var emergencyStatus: EmergencyStatus?
    /// The string that you assigned to describe the resource
    public var friendlyName: String?
    /// The phone number in E.164 format
    public var phoneNumber: String?
    /// The unique string that identifies the resource
    public var sid: String?
    /// The SID of the application that handles SMS messages sent to the phone number
    public var smsApplicationSid: String?
    /// The HTTP method used with sms_fallback_url
    public var smsFallbackMethod: SmsFallbackMethod?
    /// The URL that we call when an error occurs while retrieving or executing the TwiML
    public var smsFallbackURL: URL?
    /// The HTTP method to use with sms_url
    public var smsMethod: SmsMethod?
    /// The URL we call when the phone number receives an incoming SMS message
    public var smsURL: URL?
    /// The URL to send status information to your application
    public var statusCallback: URL?
    /// The HTTP method we use to call status_callback
    public var statusCallbackMethod: StatusCallbackMethod?
    /// The SID of the Trunk that handles calls to the phone number
    public var trunkSid: String?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?
    /// The SID of the application that handles calls to the phone number
    public var voiceApplicationSid: String?
    /// Whether to lookup the caller's name
    public var isVoiceCallerIDLookup: Bool?
    /// The HTTP method used with voice_fallback_url
    public var voiceFallbackMethod: VoiceFallbackMethod?
    /// The URL we call when an error occurs in TwiML
    public var voiceFallbackURL: URL?
    /// The HTTP method used with the voice_url
    public var voiceMethod: VoiceMethod?
    /// The URL we call when the phone number receives a call
    public var voiceURL: URL?

    /// Whether the phone number requires an Address registered with Twilio
    public enum AddressRequirements: String, Codable, CaseIterable {
        case `none`
        case any
        case local
        case foreign
    }

    /// Whether the phone number is enabled for emergency calling
    public enum EmergencyStatus: String, Codable, CaseIterable {
        case active = "Active"
        case inactive = "Inactive"
    }

    /// The HTTP method used with sms_fallback_url
    public enum SmsFallbackMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method to use with sms_url
    public enum SmsMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method we use to call status_callback
    public enum StatusCallbackMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method used with voice_fallback_url
    public enum VoiceFallbackMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method used with the voice_url
    public enum VoiceMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    public init(accountSid: String? = nil, addressRequirements: AddressRequirements? = nil, apiVersion: String? = nil, capabilities: [String: AnyJSON]? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, emergencyAddressSid: String? = nil, emergencyStatus: EmergencyStatus? = nil, friendlyName: String? = nil, phoneNumber: String? = nil, sid: String? = nil, smsApplicationSid: String? = nil, smsFallbackMethod: SmsFallbackMethod? = nil, smsFallbackURL: URL? = nil, smsMethod: SmsMethod? = nil, smsURL: URL? = nil, statusCallback: URL? = nil, statusCallbackMethod: StatusCallbackMethod? = nil, trunkSid: String? = nil, uri: URL? = nil, voiceApplicationSid: String? = nil, isVoiceCallerIDLookup: Bool? = nil, voiceFallbackMethod: VoiceFallbackMethod? = nil, voiceFallbackURL: URL? = nil, voiceMethod: VoiceMethod? = nil, voiceURL: URL? = nil) {
        self.accountSid = accountSid
        self.addressRequirements = addressRequirements
        self.apiVersion = apiVersion
        self.capabilities = capabilities
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.emergencyAddressSid = emergencyAddressSid
        self.emergencyStatus = emergencyStatus
        self.friendlyName = friendlyName
        self.phoneNumber = phoneNumber
        self.sid = sid
        self.smsApplicationSid = smsApplicationSid
        self.smsFallbackMethod = smsFallbackMethod
        self.smsFallbackURL = smsFallbackURL
        self.smsMethod = smsMethod
        self.smsURL = smsURL
        self.statusCallback = statusCallback
        self.statusCallbackMethod = statusCallbackMethod
        self.trunkSid = trunkSid
        self.uri = uri
        self.voiceApplicationSid = voiceApplicationSid
        self.isVoiceCallerIDLookup = isVoiceCallerIDLookup
        self.voiceFallbackMethod = voiceFallbackMethod
        self.voiceFallbackURL = voiceFallbackURL
        self.voiceMethod = voiceMethod
        self.voiceURL = voiceURL
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case addressRequirements = "address_requirements"
        case apiVersion = "api_version"
        case capabilities
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case emergencyAddressSid = "emergency_address_sid"
        case emergencyStatus = "emergency_status"
        case friendlyName = "friendly_name"
        case phoneNumber = "phone_number"
        case sid
        case smsApplicationSid = "sms_application_sid"
        case smsFallbackMethod = "sms_fallback_method"
        case smsFallbackURL = "sms_fallback_url"
        case smsMethod = "sms_method"
        case smsURL = "sms_url"
        case statusCallback = "status_callback"
        case statusCallbackMethod = "status_callback_method"
        case trunkSid = "trunk_sid"
        case uri
        case voiceApplicationSid = "voice_application_sid"
        case isVoiceCallerIDLookup = "voice_caller_id_lookup"
        case voiceFallbackMethod = "voice_fallback_method"
        case voiceFallbackURL = "voice_fallback_url"
        case voiceMethod = "voice_method"
        case voiceURL = "voice_url"
    }
}

public struct APIV2010AccountApplication: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// The API version used to start a new TwiML session
    public var apiVersion: String?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// The string that you assigned to describe the resource
    public var friendlyName: String?
    /// The URL to send message status information to your application
    public var messageStatusCallback: URL?
    /// The unique string that identifies the resource
    public var sid: String?
    /// The HTTP method used with sms_fallback_url
    public var smsFallbackMethod: SmsFallbackMethod?
    /// The URL that we call when an error occurs while retrieving or executing the TwiML
    public var smsFallbackURL: URL?
    /// The HTTP method to use with sms_url
    public var smsMethod: SmsMethod?
    /// The URL to send status information to your application
    public var smsStatusCallback: URL?
    /// The URL we call when the phone number receives an incoming SMS message
    public var smsURL: URL?
    /// The URL to send status information to your application
    public var statusCallback: URL?
    /// The HTTP method we use to call status_callback
    public var statusCallbackMethod: StatusCallbackMethod?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?
    /// Whether to lookup the caller's name
    public var isVoiceCallerIDLookup: Bool?
    /// The HTTP method used with voice_fallback_url
    public var voiceFallbackMethod: VoiceFallbackMethod?
    /// The URL we call when a TwiML error occurs
    public var voiceFallbackURL: URL?
    /// The HTTP method used with the voice_url
    public var voiceMethod: VoiceMethod?
    /// The URL we call when the phone number receives a call
    public var voiceURL: URL?

    /// The HTTP method used with sms_fallback_url
    public enum SmsFallbackMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method to use with sms_url
    public enum SmsMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method we use to call status_callback
    public enum StatusCallbackMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method used with voice_fallback_url
    public enum VoiceFallbackMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method used with the voice_url
    public enum VoiceMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    public init(accountSid: String? = nil, apiVersion: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, friendlyName: String? = nil, messageStatusCallback: URL? = nil, sid: String? = nil, smsFallbackMethod: SmsFallbackMethod? = nil, smsFallbackURL: URL? = nil, smsMethod: SmsMethod? = nil, smsStatusCallback: URL? = nil, smsURL: URL? = nil, statusCallback: URL? = nil, statusCallbackMethod: StatusCallbackMethod? = nil, uri: URL? = nil, isVoiceCallerIDLookup: Bool? = nil, voiceFallbackMethod: VoiceFallbackMethod? = nil, voiceFallbackURL: URL? = nil, voiceMethod: VoiceMethod? = nil, voiceURL: URL? = nil) {
        self.accountSid = accountSid
        self.apiVersion = apiVersion
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.friendlyName = friendlyName
        self.messageStatusCallback = messageStatusCallback
        self.sid = sid
        self.smsFallbackMethod = smsFallbackMethod
        self.smsFallbackURL = smsFallbackURL
        self.smsMethod = smsMethod
        self.smsStatusCallback = smsStatusCallback
        self.smsURL = smsURL
        self.statusCallback = statusCallback
        self.statusCallbackMethod = statusCallbackMethod
        self.uri = uri
        self.isVoiceCallerIDLookup = isVoiceCallerIDLookup
        self.voiceFallbackMethod = voiceFallbackMethod
        self.voiceFallbackURL = voiceFallbackURL
        self.voiceMethod = voiceMethod
        self.voiceURL = voiceURL
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case apiVersion = "api_version"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case friendlyName = "friendly_name"
        case messageStatusCallback = "message_status_callback"
        case sid
        case smsFallbackMethod = "sms_fallback_method"
        case smsFallbackURL = "sms_fallback_url"
        case smsMethod = "sms_method"
        case smsStatusCallback = "sms_status_callback"
        case smsURL = "sms_url"
        case statusCallback = "status_callback"
        case statusCallbackMethod = "status_callback_method"
        case uri
        case isVoiceCallerIDLookup = "voice_caller_id_lookup"
        case voiceFallbackMethod = "voice_fallback_method"
        case voiceFallbackURL = "voice_fallback_url"
        case voiceMethod = "voice_method"
        case voiceURL = "voice_url"
    }
}

public struct APIV2010AccountAuthorizedConnectApp: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// The company name set for the Connect App
    public var connectAppCompanyName: String?
    /// A detailed description of the app
    public var connectAppDescription: String?
    /// The name of the Connect App
    public var connectAppFriendlyName: String?
    /// The public URL for the Connect App
    public var connectAppHomepageURL: URL?
    /// The SID that we assigned to the Connect App
    public var connectAppSid: String?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// Permissions authorized to the app
    public var permissions: [Permission]?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?

    public enum Permission: String, Codable, CaseIterable {
        case getAll = "get-all"
        case postAll = "post-all"
    }

    public init(accountSid: String? = nil, connectAppCompanyName: String? = nil, connectAppDescription: String? = nil, connectAppFriendlyName: String? = nil, connectAppHomepageURL: URL? = nil, connectAppSid: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, permissions: [Permission]? = nil, uri: URL? = nil) {
        self.accountSid = accountSid
        self.connectAppCompanyName = connectAppCompanyName
        self.connectAppDescription = connectAppDescription
        self.connectAppFriendlyName = connectAppFriendlyName
        self.connectAppHomepageURL = connectAppHomepageURL
        self.connectAppSid = connectAppSid
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.permissions = permissions
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case connectAppCompanyName = "connect_app_company_name"
        case connectAppDescription = "connect_app_description"
        case connectAppFriendlyName = "connect_app_friendly_name"
        case connectAppHomepageURL = "connect_app_homepage_url"
        case connectAppSid = "connect_app_sid"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case permissions
        case uri
    }
}

public struct APIV2010AccountAvailablePhoneNumberCountry: Codable {
    /// Whether all phone numbers available in the country are new to the Twilio platform.
    public var isBeta: Bool?
    /// The name of the country
    public var country: String?
    /// The ISO-3166-1 country code of the country.
    public var countryCode: String?
    /// A list of related resources identified by their relative URIs
    public var subresourceUris: [String: AnyJSON]?
    /// The URI of the Country resource, relative to `https://api.twilio.com`
    public var uri: URL?

    public init(isBeta: Bool? = nil, country: String? = nil, countryCode: String? = nil, subresourceUris: [String: AnyJSON]? = nil, uri: URL? = nil) {
        self.isBeta = isBeta
        self.country = country
        self.countryCode = countryCode
        self.subresourceUris = subresourceUris
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case isBeta = "beta"
        case country
        case countryCode = "country_code"
        case subresourceUris = "subresource_uris"
        case uri
    }
}

public struct APIV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberLocal: Codable {
    /// The type of Address resource the phone number requires
    public var addressRequirements: String?
    /// Whether the phone number is new to the Twilio platform
    public var isBeta: Bool?
    /// Whether a phone number can receive calls or messages
    public var capabilities: Capabilities?
    /// A formatted version of the phone number
    public var friendlyName: String?
    /// The ISO country code of this phone number
    public var isoCountry: String?
    /// The LATA of this phone number
    public var lata: String?
    /// The latitude of this phone number's location
    public var latitude: Double?
    /// The locality or city of this phone number's location
    public var locality: String?
    /// The longitude of this phone number's location
    public var longitude: Double?
    /// The phone number in E.164 format
    public var phoneNumber: String?
    /// The postal or ZIP code of this phone number's location
    public var postalCode: String?
    /// The rate center of this phone number
    public var rateCenter: String?
    /// The two-letter state or province abbreviation of this phone number's location
    public var region: String?

    /// Whether a phone number can receive calls or messages
    public struct Capabilities: Codable {
        public var isFax: Bool?
        public var isMms: Bool?
        public var isSms: Bool?
        public var isVoice: Bool?

        public init(isFax: Bool? = nil, isMms: Bool? = nil, isSms: Bool? = nil, isVoice: Bool? = nil) {
            self.isFax = isFax
            self.isMms = isMms
            self.isSms = isSms
            self.isVoice = isVoice
        }

        private enum CodingKeys: String, CodingKey {
            case isFax = "fax"
            case isMms = "mms"
            case isSms = "sms"
            case isVoice = "voice"
        }
    }

    public init(addressRequirements: String? = nil, isBeta: Bool? = nil, capabilities: Capabilities? = nil, friendlyName: String? = nil, isoCountry: String? = nil, lata: String? = nil, latitude: Double? = nil, locality: String? = nil, longitude: Double? = nil, phoneNumber: String? = nil, postalCode: String? = nil, rateCenter: String? = nil, region: String? = nil) {
        self.addressRequirements = addressRequirements
        self.isBeta = isBeta
        self.capabilities = capabilities
        self.friendlyName = friendlyName
        self.isoCountry = isoCountry
        self.lata = lata
        self.latitude = latitude
        self.locality = locality
        self.longitude = longitude
        self.phoneNumber = phoneNumber
        self.postalCode = postalCode
        self.rateCenter = rateCenter
        self.region = region
    }

    private enum CodingKeys: String, CodingKey {
        case addressRequirements = "address_requirements"
        case isBeta = "beta"
        case capabilities
        case friendlyName = "friendly_name"
        case isoCountry = "iso_country"
        case lata
        case latitude
        case locality
        case longitude
        case phoneNumber = "phone_number"
        case postalCode = "postal_code"
        case rateCenter = "rate_center"
        case region
    }
}

public struct APIV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberMachineToMachine: Codable {
    /// The type of Address resource the phone number requires
    public var addressRequirements: String?
    /// Whether the phone number is new to the Twilio platform
    public var isBeta: Bool?
    /// Whether a phone number can receive calls or messages
    public var capabilities: Capabilities?
    /// A formatted version of the phone number
    public var friendlyName: String?
    /// The ISO country code of this phone number
    public var isoCountry: String?
    /// The LATA of this phone number
    public var lata: String?
    /// The latitude of this phone number's location
    public var latitude: Double?
    /// The locality or city of this phone number's location
    public var locality: String?
    /// The longitude of this phone number's location
    public var longitude: Double?
    /// The phone number in E.164 format
    public var phoneNumber: String?
    /// The postal or ZIP code of this phone number's location
    public var postalCode: String?
    /// The rate center of this phone number
    public var rateCenter: String?
    /// The two-letter state or province abbreviation of this phone number's location
    public var region: String?

    /// Whether a phone number can receive calls or messages
    public struct Capabilities: Codable {
        public var isFax: Bool?
        public var isMms: Bool?
        public var isSms: Bool?
        public var isVoice: Bool?

        public init(isFax: Bool? = nil, isMms: Bool? = nil, isSms: Bool? = nil, isVoice: Bool? = nil) {
            self.isFax = isFax
            self.isMms = isMms
            self.isSms = isSms
            self.isVoice = isVoice
        }

        private enum CodingKeys: String, CodingKey {
            case isFax = "fax"
            case isMms = "mms"
            case isSms = "sms"
            case isVoice = "voice"
        }
    }

    public init(addressRequirements: String? = nil, isBeta: Bool? = nil, capabilities: Capabilities? = nil, friendlyName: String? = nil, isoCountry: String? = nil, lata: String? = nil, latitude: Double? = nil, locality: String? = nil, longitude: Double? = nil, phoneNumber: String? = nil, postalCode: String? = nil, rateCenter: String? = nil, region: String? = nil) {
        self.addressRequirements = addressRequirements
        self.isBeta = isBeta
        self.capabilities = capabilities
        self.friendlyName = friendlyName
        self.isoCountry = isoCountry
        self.lata = lata
        self.latitude = latitude
        self.locality = locality
        self.longitude = longitude
        self.phoneNumber = phoneNumber
        self.postalCode = postalCode
        self.rateCenter = rateCenter
        self.region = region
    }

    private enum CodingKeys: String, CodingKey {
        case addressRequirements = "address_requirements"
        case isBeta = "beta"
        case capabilities
        case friendlyName = "friendly_name"
        case isoCountry = "iso_country"
        case lata
        case latitude
        case locality
        case longitude
        case phoneNumber = "phone_number"
        case postalCode = "postal_code"
        case rateCenter = "rate_center"
        case region
    }
}

public struct APIV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberMobile: Codable {
    /// The type of Address resource the phone number requires
    public var addressRequirements: String?
    /// Whether the phone number is new to the Twilio platform
    public var isBeta: Bool?
    /// Whether a phone number can receive calls or messages
    public var capabilities: Capabilities?
    /// A formatted version of the phone number
    public var friendlyName: String?
    /// The ISO country code of this phone number
    public var isoCountry: String?
    /// The LATA of this phone number
    public var lata: String?
    /// The latitude of this phone number's location
    public var latitude: Double?
    /// The locality or city of this phone number's location
    public var locality: String?
    /// The longitude of this phone number's location
    public var longitude: Double?
    /// The phone number in E.164 format
    public var phoneNumber: String?
    /// The postal or ZIP code of this phone number's location
    public var postalCode: String?
    /// The rate center of this phone number
    public var rateCenter: String?
    /// The two-letter state or province abbreviation of this phone number's location
    public var region: String?

    /// Whether a phone number can receive calls or messages
    public struct Capabilities: Codable {
        public var isFax: Bool?
        public var isMms: Bool?
        public var isSms: Bool?
        public var isVoice: Bool?

        public init(isFax: Bool? = nil, isMms: Bool? = nil, isSms: Bool? = nil, isVoice: Bool? = nil) {
            self.isFax = isFax
            self.isMms = isMms
            self.isSms = isSms
            self.isVoice = isVoice
        }

        private enum CodingKeys: String, CodingKey {
            case isFax = "fax"
            case isMms = "mms"
            case isSms = "sms"
            case isVoice = "voice"
        }
    }

    public init(addressRequirements: String? = nil, isBeta: Bool? = nil, capabilities: Capabilities? = nil, friendlyName: String? = nil, isoCountry: String? = nil, lata: String? = nil, latitude: Double? = nil, locality: String? = nil, longitude: Double? = nil, phoneNumber: String? = nil, postalCode: String? = nil, rateCenter: String? = nil, region: String? = nil) {
        self.addressRequirements = addressRequirements
        self.isBeta = isBeta
        self.capabilities = capabilities
        self.friendlyName = friendlyName
        self.isoCountry = isoCountry
        self.lata = lata
        self.latitude = latitude
        self.locality = locality
        self.longitude = longitude
        self.phoneNumber = phoneNumber
        self.postalCode = postalCode
        self.rateCenter = rateCenter
        self.region = region
    }

    private enum CodingKeys: String, CodingKey {
        case addressRequirements = "address_requirements"
        case isBeta = "beta"
        case capabilities
        case friendlyName = "friendly_name"
        case isoCountry = "iso_country"
        case lata
        case latitude
        case locality
        case longitude
        case phoneNumber = "phone_number"
        case postalCode = "postal_code"
        case rateCenter = "rate_center"
        case region
    }
}

public struct APIV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberNational: Codable {
    /// The type of Address resource the phone number requires
    public var addressRequirements: String?
    /// Whether the phone number is new to the Twilio platform
    public var isBeta: Bool?
    /// Whether a phone number can receive calls or messages
    public var capabilities: Capabilities?
    /// A formatted version of the phone number
    public var friendlyName: String?
    /// The ISO country code of this phone number
    public var isoCountry: String?
    /// The LATA of this phone number
    public var lata: String?
    /// The latitude of this phone number's location
    public var latitude: Double?
    /// The locality or city of this phone number's location
    public var locality: String?
    /// The longitude of this phone number's location
    public var longitude: Double?
    /// The phone number in E.164 format
    public var phoneNumber: String?
    /// The postal or ZIP code of this phone number's location
    public var postalCode: String?
    /// The rate center of this phone number
    public var rateCenter: String?
    /// The two-letter state or province abbreviation of this phone number's location
    public var region: String?

    /// Whether a phone number can receive calls or messages
    public struct Capabilities: Codable {
        public var isFax: Bool?
        public var isMms: Bool?
        public var isSms: Bool?
        public var isVoice: Bool?

        public init(isFax: Bool? = nil, isMms: Bool? = nil, isSms: Bool? = nil, isVoice: Bool? = nil) {
            self.isFax = isFax
            self.isMms = isMms
            self.isSms = isSms
            self.isVoice = isVoice
        }

        private enum CodingKeys: String, CodingKey {
            case isFax = "fax"
            case isMms = "mms"
            case isSms = "sms"
            case isVoice = "voice"
        }
    }

    public init(addressRequirements: String? = nil, isBeta: Bool? = nil, capabilities: Capabilities? = nil, friendlyName: String? = nil, isoCountry: String? = nil, lata: String? = nil, latitude: Double? = nil, locality: String? = nil, longitude: Double? = nil, phoneNumber: String? = nil, postalCode: String? = nil, rateCenter: String? = nil, region: String? = nil) {
        self.addressRequirements = addressRequirements
        self.isBeta = isBeta
        self.capabilities = capabilities
        self.friendlyName = friendlyName
        self.isoCountry = isoCountry
        self.lata = lata
        self.latitude = latitude
        self.locality = locality
        self.longitude = longitude
        self.phoneNumber = phoneNumber
        self.postalCode = postalCode
        self.rateCenter = rateCenter
        self.region = region
    }

    private enum CodingKeys: String, CodingKey {
        case addressRequirements = "address_requirements"
        case isBeta = "beta"
        case capabilities
        case friendlyName = "friendly_name"
        case isoCountry = "iso_country"
        case lata
        case latitude
        case locality
        case longitude
        case phoneNumber = "phone_number"
        case postalCode = "postal_code"
        case rateCenter = "rate_center"
        case region
    }
}

public struct APIV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost: Codable {
    /// The type of Address resource the phone number requires
    public var addressRequirements: String?
    /// Whether the phone number is new to the Twilio platform
    public var isBeta: Bool?
    /// Whether a phone number can receive calls or messages
    public var capabilities: Capabilities?
    /// A formatted version of the phone number
    public var friendlyName: String?
    /// The ISO country code of this phone number
    public var isoCountry: String?
    /// The LATA of this phone number
    public var lata: String?
    /// The latitude of this phone number's location
    public var latitude: Double?
    /// The locality or city of this phone number's location
    public var locality: String?
    /// The longitude of this phone number's location
    public var longitude: Double?
    /// The phone number in E.164 format
    public var phoneNumber: String?
    /// The postal or ZIP code of this phone number's location
    public var postalCode: String?
    /// The rate center of this phone number
    public var rateCenter: String?
    /// The two-letter state or province abbreviation of this phone number's location
    public var region: String?

    /// Whether a phone number can receive calls or messages
    public struct Capabilities: Codable {
        public var isFax: Bool?
        public var isMms: Bool?
        public var isSms: Bool?
        public var isVoice: Bool?

        public init(isFax: Bool? = nil, isMms: Bool? = nil, isSms: Bool? = nil, isVoice: Bool? = nil) {
            self.isFax = isFax
            self.isMms = isMms
            self.isSms = isSms
            self.isVoice = isVoice
        }

        private enum CodingKeys: String, CodingKey {
            case isFax = "fax"
            case isMms = "mms"
            case isSms = "sms"
            case isVoice = "voice"
        }
    }

    public init(addressRequirements: String? = nil, isBeta: Bool? = nil, capabilities: Capabilities? = nil, friendlyName: String? = nil, isoCountry: String? = nil, lata: String? = nil, latitude: Double? = nil, locality: String? = nil, longitude: Double? = nil, phoneNumber: String? = nil, postalCode: String? = nil, rateCenter: String? = nil, region: String? = nil) {
        self.addressRequirements = addressRequirements
        self.isBeta = isBeta
        self.capabilities = capabilities
        self.friendlyName = friendlyName
        self.isoCountry = isoCountry
        self.lata = lata
        self.latitude = latitude
        self.locality = locality
        self.longitude = longitude
        self.phoneNumber = phoneNumber
        self.postalCode = postalCode
        self.rateCenter = rateCenter
        self.region = region
    }

    private enum CodingKeys: String, CodingKey {
        case addressRequirements = "address_requirements"
        case isBeta = "beta"
        case capabilities
        case friendlyName = "friendly_name"
        case isoCountry = "iso_country"
        case lata
        case latitude
        case locality
        case longitude
        case phoneNumber = "phone_number"
        case postalCode = "postal_code"
        case rateCenter = "rate_center"
        case region
    }
}

public struct APIV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberTollFree: Codable {
    /// The type of Address resource the phone number requires
    public var addressRequirements: String?
    /// Whether the phone number is new to the Twilio platform
    public var isBeta: Bool?
    /// Whether a phone number can receive calls or messages
    public var capabilities: Capabilities?
    /// A formatted version of the phone number
    public var friendlyName: String?
    /// The ISO country code of this phone number
    public var isoCountry: String?
    /// The LATA of this phone number
    public var lata: String?
    /// The latitude of this phone number's location
    public var latitude: Double?
    /// The locality or city of this phone number's location
    public var locality: String?
    /// The longitude of this phone number's location
    public var longitude: Double?
    /// The phone number in E.164 format
    public var phoneNumber: String?
    /// The postal or ZIP code of this phone number's location
    public var postalCode: String?
    /// The rate center of this phone number
    public var rateCenter: String?
    /// The two-letter state or province abbreviation of this phone number's location
    public var region: String?

    /// Whether a phone number can receive calls or messages
    public struct Capabilities: Codable {
        public var isFax: Bool?
        public var isMms: Bool?
        public var isSms: Bool?
        public var isVoice: Bool?

        public init(isFax: Bool? = nil, isMms: Bool? = nil, isSms: Bool? = nil, isVoice: Bool? = nil) {
            self.isFax = isFax
            self.isMms = isMms
            self.isSms = isSms
            self.isVoice = isVoice
        }

        private enum CodingKeys: String, CodingKey {
            case isFax = "fax"
            case isMms = "mms"
            case isSms = "sms"
            case isVoice = "voice"
        }
    }

    public init(addressRequirements: String? = nil, isBeta: Bool? = nil, capabilities: Capabilities? = nil, friendlyName: String? = nil, isoCountry: String? = nil, lata: String? = nil, latitude: Double? = nil, locality: String? = nil, longitude: Double? = nil, phoneNumber: String? = nil, postalCode: String? = nil, rateCenter: String? = nil, region: String? = nil) {
        self.addressRequirements = addressRequirements
        self.isBeta = isBeta
        self.capabilities = capabilities
        self.friendlyName = friendlyName
        self.isoCountry = isoCountry
        self.lata = lata
        self.latitude = latitude
        self.locality = locality
        self.longitude = longitude
        self.phoneNumber = phoneNumber
        self.postalCode = postalCode
        self.rateCenter = rateCenter
        self.region = region
    }

    private enum CodingKeys: String, CodingKey {
        case addressRequirements = "address_requirements"
        case isBeta = "beta"
        case capabilities
        case friendlyName = "friendly_name"
        case isoCountry = "iso_country"
        case lata
        case latitude
        case locality
        case longitude
        case phoneNumber = "phone_number"
        case postalCode = "postal_code"
        case rateCenter = "rate_center"
        case region
    }
}

public struct APIV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberVoip: Codable {
    /// The type of Address resource the phone number requires
    public var addressRequirements: String?
    /// Whether the phone number is new to the Twilio platform
    public var isBeta: Bool?
    /// Whether a phone number can receive calls or messages
    public var capabilities: Capabilities?
    /// A formatted version of the phone number
    public var friendlyName: String?
    /// The ISO country code of this phone number
    public var isoCountry: String?
    /// The LATA of this phone number
    public var lata: String?
    /// The latitude of this phone number's location
    public var latitude: Double?
    /// The locality or city of this phone number's location
    public var locality: String?
    /// The longitude of this phone number's location
    public var longitude: Double?
    /// The phone number in E.164 format
    public var phoneNumber: String?
    /// The postal or ZIP code of this phone number's location
    public var postalCode: String?
    /// The rate center of this phone number
    public var rateCenter: String?
    /// The two-letter state or province abbreviation of this phone number's location
    public var region: String?

    /// Whether a phone number can receive calls or messages
    public struct Capabilities: Codable {
        public var isFax: Bool?
        public var isMms: Bool?
        public var isSms: Bool?
        public var isVoice: Bool?

        public init(isFax: Bool? = nil, isMms: Bool? = nil, isSms: Bool? = nil, isVoice: Bool? = nil) {
            self.isFax = isFax
            self.isMms = isMms
            self.isSms = isSms
            self.isVoice = isVoice
        }

        private enum CodingKeys: String, CodingKey {
            case isFax = "fax"
            case isMms = "mms"
            case isSms = "sms"
            case isVoice = "voice"
        }
    }

    public init(addressRequirements: String? = nil, isBeta: Bool? = nil, capabilities: Capabilities? = nil, friendlyName: String? = nil, isoCountry: String? = nil, lata: String? = nil, latitude: Double? = nil, locality: String? = nil, longitude: Double? = nil, phoneNumber: String? = nil, postalCode: String? = nil, rateCenter: String? = nil, region: String? = nil) {
        self.addressRequirements = addressRequirements
        self.isBeta = isBeta
        self.capabilities = capabilities
        self.friendlyName = friendlyName
        self.isoCountry = isoCountry
        self.lata = lata
        self.latitude = latitude
        self.locality = locality
        self.longitude = longitude
        self.phoneNumber = phoneNumber
        self.postalCode = postalCode
        self.rateCenter = rateCenter
        self.region = region
    }

    private enum CodingKeys: String, CodingKey {
        case addressRequirements = "address_requirements"
        case isBeta = "beta"
        case capabilities
        case friendlyName = "friendly_name"
        case isoCountry = "iso_country"
        case lata
        case latitude
        case locality
        case longitude
        case phoneNumber = "phone_number"
        case postalCode = "postal_code"
        case rateCenter = "rate_center"
        case region
    }
}

public struct APIV2010AccountBalance: Codable {
    /// Account Sid.
    public var accountSid: String?
    /// Account balance
    public var balance: String?
    /// Currency units
    public var currency: String?

    public init(accountSid: String? = nil, balance: String? = nil, currency: String? = nil) {
        self.accountSid = accountSid
        self.balance = balance
        self.currency = currency
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case balance
        case currency
    }
}

public struct APIV2010AccountCall: Codable {
    /// The SID of the Account that created this resource
    public var accountSid: String?
    /// The annotation provided for the call
    public var annotation: String?
    /// Either `human` or `machine` if this call was initiated with answering machine detection. Empty otherwise.
    public var answeredBy: String?
    /// The API Version used to create the call
    public var apiVersion: String?
    /// The caller's name if this call was an incoming call to a phone number with caller ID Lookup enabled. Otherwise, empty.
    public var callerName: String?
    /// The RFC 2822 date and time in GMT that this resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that this resource was last updated
    public var dateUpdated: String?
    /// A string describing the direction of the call. `inbound` for inbound calls, `outbound-api` for calls initiated via the REST API or `outbound-dial` for calls initiated by a `Dial` verb.
    public var direction: String?
    /// The length of the call in seconds.
    public var duration: String?
    /// The end time of the call. Null if the call did not complete successfully.
    public var endTime: String?
    /// The forwarding phone number if this call was an incoming call forwarded from another number (depends on carrier supporting forwarding). Otherwise, empty.
    public var forwardedFrom: String?
    /// The phone number, SIP address or Client identifier that made this call. Phone numbers are in E.164 format (e.g., +16175551212). SIP addresses are formatted as `name@company.com`. Client identifiers are formatted `client:name`.
    public var from: String?
    /// The calling phone number, SIP address, or Client identifier formatted for display.
    public var fromFormatted: String?
    /// The Group SID associated with this call. If no Group is associated with the call, the field is empty.
    public var groupSid: String?
    /// The SID that identifies the call that created this leg.
    public var parentCallSid: String?
    /// If the call was inbound, this is the SID of the IncomingPhoneNumber resource that received the call. If the call was outbound, it is the SID of the OutgoingCallerId resource from which the call was placed.
    public var phoneNumberSid: String?
    /// The charge for this call, in the currency associated with the account. Populated after the call is completed. May not be immediately available.
    public var price: String?
    /// The currency in which `Price` is measured.
    public var priceUnit: String?
    /// The wait time in milliseconds before the call is placed.
    public var queueTime: String?
    /// The unique string that identifies this resource
    public var sid: String?
    /// The start time of the call. Null if the call has not yet been dialed.
    public var startTime: String?
    /// The status of this call.
    public var status: Status?
    /// A list of related subresources identified by their relative URIs
    public var subresourceUris: [String: AnyJSON]?
    /// The phone number, SIP address or Client identifier that received this call. Phone numbers are in E.164 format (e.g., +16175551212). SIP addresses are formatted as `name@company.com`. Client identifiers are formatted `client:name`.
    public var to: String?
    /// The phone number, SIP address or Client identifier that received this call. Formatted for display.
    public var toFormatted: String?
    /// The (optional) unique identifier of the trunk resource that was used for this call.
    public var trunkSid: String?
    /// The URI of this resource, relative to `https://api.twilio.com`
    public var uri: URL?

    /// The status of this call.
    public enum Status: String, Codable, CaseIterable {
        case queued
        case ringing
        case inProgress = "in-progress"
        case completed
        case busy
        case failed
        case noAnswer = "no-answer"
        case canceled
    }

    public init(accountSid: String? = nil, annotation: String? = nil, answeredBy: String? = nil, apiVersion: String? = nil, callerName: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, direction: String? = nil, duration: String? = nil, endTime: String? = nil, forwardedFrom: String? = nil, from: String? = nil, fromFormatted: String? = nil, groupSid: String? = nil, parentCallSid: String? = nil, phoneNumberSid: String? = nil, price: String? = nil, priceUnit: String? = nil, queueTime: String? = nil, sid: String? = nil, startTime: String? = nil, status: Status? = nil, subresourceUris: [String: AnyJSON]? = nil, to: String? = nil, toFormatted: String? = nil, trunkSid: String? = nil, uri: URL? = nil) {
        self.accountSid = accountSid
        self.annotation = annotation
        self.answeredBy = answeredBy
        self.apiVersion = apiVersion
        self.callerName = callerName
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.direction = direction
        self.duration = duration
        self.endTime = endTime
        self.forwardedFrom = forwardedFrom
        self.from = from
        self.fromFormatted = fromFormatted
        self.groupSid = groupSid
        self.parentCallSid = parentCallSid
        self.phoneNumberSid = phoneNumberSid
        self.price = price
        self.priceUnit = priceUnit
        self.queueTime = queueTime
        self.sid = sid
        self.startTime = startTime
        self.status = status
        self.subresourceUris = subresourceUris
        self.to = to
        self.toFormatted = toFormatted
        self.trunkSid = trunkSid
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case annotation
        case answeredBy = "answered_by"
        case apiVersion = "api_version"
        case callerName = "caller_name"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case direction
        case duration
        case endTime = "end_time"
        case forwardedFrom = "forwarded_from"
        case from
        case fromFormatted = "from_formatted"
        case groupSid = "group_sid"
        case parentCallSid = "parent_call_sid"
        case phoneNumberSid = "phone_number_sid"
        case price
        case priceUnit = "price_unit"
        case queueTime = "queue_time"
        case sid
        case startTime = "start_time"
        case status
        case subresourceUris = "subresource_uris"
        case to
        case toFormatted = "to_formatted"
        case trunkSid = "trunk_sid"
        case uri
    }
}

public struct APIV2010AccountCallCallEvent: Codable {
    /// Call Request.
    public var request: [String: AnyJSON]?
    /// Call Response with Events.
    public var response: [String: AnyJSON]?

    public init(request: [String: AnyJSON]? = nil, response: [String: AnyJSON]? = nil) {
        self.request = request
        self.response = response
    }
}

public struct APIV2010AccountCallCallFeedback: Codable {
    /// The unique sid that identifies this account
    public var accountSid: String?
    /// The date this resource was created
    public var dateCreated: String?
    /// The date this resource was last updated
    public var dateUpdated: String?
    /// Issues experienced during the call
    public var issues: [Issue]?
    /// 1 to 5 quality score
    public var qualityScore: Int?
    /// A string that uniquely identifies this feedback resource
    public var sid: String?

    public enum Issue: String, Codable, CaseIterable {
        case audioLatency = "audio-latency"
        case digitsNotCaptured = "digits-not-captured"
        case droppedCall = "dropped-call"
        case imperfectAudio = "imperfect-audio"
        case incorrectCallerID = "incorrect-caller-id"
        case oneWayAudio = "one-way-audio"
        case postDialDelay = "post-dial-delay"
        case unsolicitedCall = "unsolicited-call"
    }

    public init(accountSid: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, issues: [Issue]? = nil, qualityScore: Int? = nil, sid: String? = nil) {
        self.accountSid = accountSid
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.issues = issues
        self.qualityScore = qualityScore
        self.sid = sid
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case issues
        case qualityScore = "quality_score"
        case sid
    }
}

public struct APIV2010AccountCallCallFeedbackSummary: Codable {
    /// The unique sid that identifies this account
    public var accountSid: String?
    /// The total number of calls
    public var callCount: Int?
    /// The total number of calls with a feedback entry
    public var callFeedbackCount: Int?
    /// The date this resource was created
    public var dateCreated: String?
    /// The date this resource was last updated
    public var dateUpdated: String?
    /// The latest feedback entry date in the summary
    public var endDate: NaiveDate?
    /// Whether the feedback summary includes subaccounts
    public var isIncludeSubaccounts: Bool?
    /// Issues experienced during the call
    public var issues: [[String: AnyJSON]]?
    /// The average QualityScore of the feedback entries
    public var qualityScoreAverage: Double?
    /// The median QualityScore of the feedback entries
    public var qualityScoreMedian: Double?
    /// The standard deviation of the quality scores
    public var qualityScoreStandardDeviation: Double?
    /// A string that uniquely identifies this feedback entry
    public var sid: String?
    /// The earliest feedback entry date in the summary
    public var startDate: NaiveDate?
    /// The status of the feedback summary
    public var status: Status?

    /// The status of the feedback summary
    public enum Status: String, Codable, CaseIterable {
        case queued
        case inProgress = "in-progress"
        case completed
        case failed
    }

    public init(accountSid: String? = nil, callCount: Int? = nil, callFeedbackCount: Int? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, endDate: NaiveDate? = nil, isIncludeSubaccounts: Bool? = nil, issues: [[String: AnyJSON]]? = nil, qualityScoreAverage: Double? = nil, qualityScoreMedian: Double? = nil, qualityScoreStandardDeviation: Double? = nil, sid: String? = nil, startDate: NaiveDate? = nil, status: Status? = nil) {
        self.accountSid = accountSid
        self.callCount = callCount
        self.callFeedbackCount = callFeedbackCount
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.endDate = endDate
        self.isIncludeSubaccounts = isIncludeSubaccounts
        self.issues = issues
        self.qualityScoreAverage = qualityScoreAverage
        self.qualityScoreMedian = qualityScoreMedian
        self.qualityScoreStandardDeviation = qualityScoreStandardDeviation
        self.sid = sid
        self.startDate = startDate
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case callCount = "call_count"
        case callFeedbackCount = "call_feedback_count"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case endDate = "end_date"
        case isIncludeSubaccounts = "include_subaccounts"
        case issues
        case qualityScoreAverage = "quality_score_average"
        case qualityScoreMedian = "quality_score_median"
        case qualityScoreStandardDeviation = "quality_score_standard_deviation"
        case sid
        case startDate = "start_date"
        case status
    }
}

public struct APIV2010AccountCallCallNotification: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// The API version used to create the Call Notification resource
    public var apiVersion: String?
    /// The SID of the Call the resource is associated with
    public var callSid: String?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// A unique error code corresponding to the notification
    public var errorCode: String?
    /// An integer log level
    public var log: String?
    /// The date the notification was generated
    public var messageDate: String?
    /// The text of the notification
    public var messageText: String?
    /// A URL for more information about the error code
    public var moreInfo: URL?
    /// HTTP method used with the request url
    public var requestMethod: RequestMethod?
    /// URL of the resource that generated the notification
    public var requestURL: URL?
    /// The unique string that identifies the resource
    public var sid: String?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?

    /// HTTP method used with the request url
    public enum RequestMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    public init(accountSid: String? = nil, apiVersion: String? = nil, callSid: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, errorCode: String? = nil, log: String? = nil, messageDate: String? = nil, messageText: String? = nil, moreInfo: URL? = nil, requestMethod: RequestMethod? = nil, requestURL: URL? = nil, sid: String? = nil, uri: URL? = nil) {
        self.accountSid = accountSid
        self.apiVersion = apiVersion
        self.callSid = callSid
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.errorCode = errorCode
        self.log = log
        self.messageDate = messageDate
        self.messageText = messageText
        self.moreInfo = moreInfo
        self.requestMethod = requestMethod
        self.requestURL = requestURL
        self.sid = sid
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case apiVersion = "api_version"
        case callSid = "call_sid"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case errorCode = "error_code"
        case log
        case messageDate = "message_date"
        case messageText = "message_text"
        case moreInfo = "more_info"
        case requestMethod = "request_method"
        case requestURL = "request_url"
        case sid
        case uri
    }
}

public struct APIV2010AccountCallCallNotificationInstance: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// The API version used to create the Call Notification resource
    public var apiVersion: String?
    /// The SID of the Call the resource is associated with
    public var callSid: String?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// A unique error code corresponding to the notification
    public var errorCode: String?
    /// An integer log level
    public var log: String?
    /// The date the notification was generated
    public var messageDate: String?
    /// The text of the notification
    public var messageText: String?
    /// A URL for more information about the error code
    public var moreInfo: URL?
    /// HTTP method used with the request url
    public var requestMethod: RequestMethod?
    /// URL of the resource that generated the notification
    public var requestURL: URL?
    /// Twilio-generated HTTP variables sent to the server
    public var requestVariables: String?
    /// The HTTP body returned by your server
    public var responseBody: String?
    /// The HTTP headers returned by your server
    public var responseHeaders: String?
    /// The unique string that identifies the resource
    public var sid: String?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?

    /// HTTP method used with the request url
    public enum RequestMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    public init(accountSid: String? = nil, apiVersion: String? = nil, callSid: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, errorCode: String? = nil, log: String? = nil, messageDate: String? = nil, messageText: String? = nil, moreInfo: URL? = nil, requestMethod: RequestMethod? = nil, requestURL: URL? = nil, requestVariables: String? = nil, responseBody: String? = nil, responseHeaders: String? = nil, sid: String? = nil, uri: URL? = nil) {
        self.accountSid = accountSid
        self.apiVersion = apiVersion
        self.callSid = callSid
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.errorCode = errorCode
        self.log = log
        self.messageDate = messageDate
        self.messageText = messageText
        self.moreInfo = moreInfo
        self.requestMethod = requestMethod
        self.requestURL = requestURL
        self.requestVariables = requestVariables
        self.responseBody = responseBody
        self.responseHeaders = responseHeaders
        self.sid = sid
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case apiVersion = "api_version"
        case callSid = "call_sid"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case errorCode = "error_code"
        case log
        case messageDate = "message_date"
        case messageText = "message_text"
        case moreInfo = "more_info"
        case requestMethod = "request_method"
        case requestURL = "request_url"
        case requestVariables = "request_variables"
        case responseBody = "response_body"
        case responseHeaders = "response_headers"
        case sid
        case uri
    }
}

public struct APIV2010AccountCallCallRecording: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// The API version used to make the recording
    public var apiVersion: String?
    /// The SID of the Call the resource is associated with
    public var callSid: String?
    /// The number of channels in the final recording file
    public var channels: Int?
    /// The Conference SID that identifies the conference associated with the recording
    public var conferenceSid: String?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// The length of the recording in seconds
    public var duration: String?
    /// How to decrypt the recording.
    public var encryptionDetails: [String: AnyJSON]?
    /// More information about why the recording is missing, if status is `absent`.
    public var errorCode: Int?
    /// The one-time cost of creating the recording.
    public var price: Double?
    /// The currency used in the price property.
    public var priceUnit: String?
    /// The unique string that identifies the resource
    public var sid: String?
    /// How the recording was created
    public var source: Source?
    /// The start time of the recording, given in RFC 2822 format
    public var startTime: String?
    /// The status of the recording
    public var status: Status?
    /// The recorded track. Can be: `inbound`, `outbound`, or `both`.
    public var track: String?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?

    /// How the recording was created
    public enum Source: String, Codable, CaseIterable {
        case dialVerb = "DialVerb"
        case conference = "Conference"
        case outboundAPI = "OutboundAPI"
        case trunking = "Trunking"
        case recordVerb = "RecordVerb"
        case startCallRecordingAPI = "StartCallRecordingAPI"
        case startConferenceRecordingAPI = "StartConferenceRecordingAPI"
    }

    /// The status of the recording
    public enum Status: String, Codable, CaseIterable {
        case inProgress = "in-progress"
        case paused
        case stopped
        case processing
        case completed
        case absent
    }

    public init(accountSid: String? = nil, apiVersion: String? = nil, callSid: String? = nil, channels: Int? = nil, conferenceSid: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, duration: String? = nil, encryptionDetails: [String: AnyJSON]? = nil, errorCode: Int? = nil, price: Double? = nil, priceUnit: String? = nil, sid: String? = nil, source: Source? = nil, startTime: String? = nil, status: Status? = nil, track: String? = nil, uri: URL? = nil) {
        self.accountSid = accountSid
        self.apiVersion = apiVersion
        self.callSid = callSid
        self.channels = channels
        self.conferenceSid = conferenceSid
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.duration = duration
        self.encryptionDetails = encryptionDetails
        self.errorCode = errorCode
        self.price = price
        self.priceUnit = priceUnit
        self.sid = sid
        self.source = source
        self.startTime = startTime
        self.status = status
        self.track = track
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case apiVersion = "api_version"
        case callSid = "call_sid"
        case channels
        case conferenceSid = "conference_sid"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case duration
        case encryptionDetails = "encryption_details"
        case errorCode = "error_code"
        case price
        case priceUnit = "price_unit"
        case sid
        case source
        case startTime = "start_time"
        case status
        case track
        case uri
    }
}

public struct APIV2010AccountCallPayments: Codable {
    /// The SID of the Account that created the Payments resource.
    public var accountSid: String?
    /// The SID of the Call the resource is associated with.
    public var callSid: String?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// The SID of the Payments resource.
    public var sid: String?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?

    public init(accountSid: String? = nil, callSid: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, sid: String? = nil, uri: URL? = nil) {
        self.accountSid = accountSid
        self.callSid = callSid
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.sid = sid
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case callSid = "call_sid"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case sid
        case uri
    }
}

public struct APIV2010AccountCallSiprec: Codable {
    /// The SID of the Account that created this resource
    public var accountSid: String?
    /// The SID of the Call the resource is associated with
    public var callSid: String?
    /// The RFC 2822 date and time in GMT that this resource was last updated
    public var dateUpdated: String?
    /// The name of this resource
    public var name: String?
    /// The SID of the Siprec resource.
    public var sid: String?
    /// The status - one of `stopped`, `in-progress`
    public var status: Status?

    /// The status - one of `stopped`, `in-progress`
    public enum Status: String, Codable, CaseIterable {
        case inProgress = "in-progress"
        case stopped
    }

    public init(accountSid: String? = nil, callSid: String? = nil, dateUpdated: String? = nil, name: String? = nil, sid: String? = nil, status: Status? = nil) {
        self.accountSid = accountSid
        self.callSid = callSid
        self.dateUpdated = dateUpdated
        self.name = name
        self.sid = sid
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case callSid = "call_sid"
        case dateUpdated = "date_updated"
        case name
        case sid
        case status
    }
}

public struct APIV2010AccountConference: Codable {
    /// The SID of the Account that created this resource
    public var accountSid: String?
    /// The API version used to create this conference
    public var apiVersion: String?
    /// The call SID that caused the conference to end
    public var callSidEndingConference: String?
    /// The RFC 2822 date and time in GMT that this resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that this resource was last updated
    public var dateUpdated: String?
    /// A string that you assigned to describe this conference room
    public var friendlyName: String?
    /// The reason why a conference ended.
    public var reasonConferenceEnded: ReasonConferenceEnded?
    /// A string that represents the Twilio Region where the conference was mixed
    public var region: String?
    /// The unique string that identifies this resource
    public var sid: String?
    /// The status of this conference
    public var status: Status?
    /// A list of related resources identified by their relative URIs
    public var subresourceUris: [String: AnyJSON]?
    /// The URI of this resource, relative to `https://api.twilio.com`
    public var uri: String?

    /// The reason why a conference ended.
    public enum ReasonConferenceEnded: String, Codable, CaseIterable {
        case conferenceEndedViaAPI = "conference-ended-via-api"
        case participantWithEndConferenceOnExitLeft = "participant-with-end-conference-on-exit-left"
        case participantWithEndConferenceOnExitKicked = "participant-with-end-conference-on-exit-kicked"
        case lastParticipantKicked = "last-participant-kicked"
        case lastParticipantLeft = "last-participant-left"
    }

    /// The status of this conference
    public enum Status: String, Codable, CaseIterable {
        case `init`
        case inProgress = "in-progress"
        case completed
    }

    public init(accountSid: String? = nil, apiVersion: String? = nil, callSidEndingConference: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, friendlyName: String? = nil, reasonConferenceEnded: ReasonConferenceEnded? = nil, region: String? = nil, sid: String? = nil, status: Status? = nil, subresourceUris: [String: AnyJSON]? = nil, uri: String? = nil) {
        self.accountSid = accountSid
        self.apiVersion = apiVersion
        self.callSidEndingConference = callSidEndingConference
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.friendlyName = friendlyName
        self.reasonConferenceEnded = reasonConferenceEnded
        self.region = region
        self.sid = sid
        self.status = status
        self.subresourceUris = subresourceUris
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case apiVersion = "api_version"
        case callSidEndingConference = "call_sid_ending_conference"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case friendlyName = "friendly_name"
        case reasonConferenceEnded = "reason_conference_ended"
        case region
        case sid
        case status
        case subresourceUris = "subresource_uris"
        case uri
    }
}

public struct APIV2010AccountConferenceConferenceRecording: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// The API version used to create the recording
    public var apiVersion: String?
    /// The SID of the Call the resource is associated with
    public var callSid: String?
    /// The number of channels in the final recording file as an integer
    public var channels: Int?
    /// The Conference SID that identifies the conference associated with the recording
    public var conferenceSid: String?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// The length of the recording in seconds
    public var duration: String?
    /// How to decrypt the recording.
    public var encryptionDetails: [String: AnyJSON]?
    /// More information about why the recording is missing, if status is `absent`.
    public var errorCode: Int?
    /// The one-time cost of creating the recording.
    public var price: String?
    /// The currency used in the price property.
    public var priceUnit: String?
    /// The unique string that identifies the resource
    public var sid: String?
    /// How the recording was created
    public var source: Source?
    /// The start time of the recording, given in RFC 2822 format
    public var startTime: String?
    /// The status of the recording
    public var status: Status?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: String?

    /// How the recording was created
    public enum Source: String, Codable, CaseIterable {
        case dialVerb = "DialVerb"
        case conference = "Conference"
        case outboundAPI = "OutboundAPI"
        case trunking = "Trunking"
        case recordVerb = "RecordVerb"
        case startCallRecordingAPI = "StartCallRecordingAPI"
        case startConferenceRecordingAPI = "StartConferenceRecordingAPI"
    }

    /// The status of the recording
    public enum Status: String, Codable, CaseIterable {
        case inProgress = "in-progress"
        case paused
        case stopped
        case processing
        case completed
        case absent
    }

    public init(accountSid: String? = nil, apiVersion: String? = nil, callSid: String? = nil, channels: Int? = nil, conferenceSid: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, duration: String? = nil, encryptionDetails: [String: AnyJSON]? = nil, errorCode: Int? = nil, price: String? = nil, priceUnit: String? = nil, sid: String? = nil, source: Source? = nil, startTime: String? = nil, status: Status? = nil, uri: String? = nil) {
        self.accountSid = accountSid
        self.apiVersion = apiVersion
        self.callSid = callSid
        self.channels = channels
        self.conferenceSid = conferenceSid
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.duration = duration
        self.encryptionDetails = encryptionDetails
        self.errorCode = errorCode
        self.price = price
        self.priceUnit = priceUnit
        self.sid = sid
        self.source = source
        self.startTime = startTime
        self.status = status
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case apiVersion = "api_version"
        case callSid = "call_sid"
        case channels
        case conferenceSid = "conference_sid"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case duration
        case encryptionDetails = "encryption_details"
        case errorCode = "error_code"
        case price
        case priceUnit = "price_unit"
        case sid
        case source
        case startTime = "start_time"
        case status
        case uri
    }
}

public struct APIV2010AccountConferenceParticipant: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// The SID of the Call the resource is associated with
    public var callSid: String?
    /// The SID of the participant who is being `coached`
    public var callSidToCoach: String?
    /// Indicates if the participant changed to coach
    public var isCoaching: Bool?
    /// The SID of the conference the participant is in
    public var conferenceSid: String?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// Whether the conference ends when the participant leaves
    public var isEndConferenceOnExit: Bool?
    /// Whether the participant is on hold
    public var isHold: Bool?
    /// The label of this participant
    public var label: String?
    /// Whether the participant is muted
    public var isMuted: Bool?
    /// Whether the conference starts when the participant joins the conference
    public var isStartConferenceOnEnter: Bool?
    /// The status of the participant's call in a session
    public var status: Status?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: String?

    /// The status of the participant's call in a session
    public enum Status: String, Codable, CaseIterable {
        case queued
        case connecting
        case ringing
        case connected
        case complete
        case failed
    }

    public init(accountSid: String? = nil, callSid: String? = nil, callSidToCoach: String? = nil, isCoaching: Bool? = nil, conferenceSid: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, isEndConferenceOnExit: Bool? = nil, isHold: Bool? = nil, label: String? = nil, isMuted: Bool? = nil, isStartConferenceOnEnter: Bool? = nil, status: Status? = nil, uri: String? = nil) {
        self.accountSid = accountSid
        self.callSid = callSid
        self.callSidToCoach = callSidToCoach
        self.isCoaching = isCoaching
        self.conferenceSid = conferenceSid
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.isEndConferenceOnExit = isEndConferenceOnExit
        self.isHold = isHold
        self.label = label
        self.isMuted = isMuted
        self.isStartConferenceOnEnter = isStartConferenceOnEnter
        self.status = status
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case callSid = "call_sid"
        case callSidToCoach = "call_sid_to_coach"
        case isCoaching = "coaching"
        case conferenceSid = "conference_sid"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case isEndConferenceOnExit = "end_conference_on_exit"
        case isHold = "hold"
        case label
        case isMuted = "muted"
        case isStartConferenceOnEnter = "start_conference_on_enter"
        case status
        case uri
    }
}

public struct APIV2010AccountConnectApp: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// The URL to redirect the user to after authorization
    public var authorizeRedirectURL: URL?
    /// The company name set for the Connect App
    public var companyName: String?
    /// The HTTP method we use to call deauthorize_callback_url
    public var deauthorizeCallbackMethod: DeauthorizeCallbackMethod?
    /// The URL we call to de-authorize the Connect App
    public var deauthorizeCallbackURL: URL?
    /// The description of the Connect App
    public var description: String?
    /// The string that you assigned to describe the resource
    public var friendlyName: String?
    /// The URL users can obtain more information
    public var homepageURL: URL?
    /// The set of permissions that your ConnectApp requests
    public var permissions: [Permission]?
    /// The unique string that identifies the resource
    public var sid: String?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?

    /// The HTTP method we use to call deauthorize_callback_url
    public enum DeauthorizeCallbackMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    public enum Permission: String, Codable, CaseIterable {
        case getAll = "get-all"
        case postAll = "post-all"
    }

    public init(accountSid: String? = nil, authorizeRedirectURL: URL? = nil, companyName: String? = nil, deauthorizeCallbackMethod: DeauthorizeCallbackMethod? = nil, deauthorizeCallbackURL: URL? = nil, description: String? = nil, friendlyName: String? = nil, homepageURL: URL? = nil, permissions: [Permission]? = nil, sid: String? = nil, uri: URL? = nil) {
        self.accountSid = accountSid
        self.authorizeRedirectURL = authorizeRedirectURL
        self.companyName = companyName
        self.deauthorizeCallbackMethod = deauthorizeCallbackMethod
        self.deauthorizeCallbackURL = deauthorizeCallbackURL
        self.description = description
        self.friendlyName = friendlyName
        self.homepageURL = homepageURL
        self.permissions = permissions
        self.sid = sid
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case authorizeRedirectURL = "authorize_redirect_url"
        case companyName = "company_name"
        case deauthorizeCallbackMethod = "deauthorize_callback_method"
        case deauthorizeCallbackURL = "deauthorize_callback_url"
        case description
        case friendlyName = "friendly_name"
        case homepageURL = "homepage_url"
        case permissions
        case sid
        case uri
    }
}

public struct APIV2010AccountIncomingPhoneNumber: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// Whether the phone number requires an Address registered with Twilio.
    public var addressRequirements: AddressRequirements?
    /// The SID of the Address resource associated with the phone number
    public var addressSid: String?
    /// The API version used to start a new TwiML session
    public var apiVersion: String?
    /// Whether the phone number is new to the Twilio platform
    public var isBeta: Bool?
    /// The SID of the Bundle resource associated with number
    public var bundleSid: String?
    /// Indicate if a phone can receive calls or messages
    public var capabilities: Capabilities?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// The emergency address configuration to use for emergency calling
    public var emergencyAddressSid: String?
    /// State of the emergency address configuration for the phone number
    public var emergencyAddressStatus: EmergencyAddressStatus?
    /// Displays if emergency calling is enabled for this number.
    public var emergencyStatus: EmergencyStatus?
    /// The string that you assigned to describe the resource
    public var friendlyName: String?
    /// The SID of the Identity resource associated with number
    public var identitySid: String?
    /// The phone number's origin. Can be twilio or hosted.
    public var origin: String?
    /// The phone number in E.164 format
    public var phoneNumber: String?
    /// The unique string that identifies the resource
    public var sid: String?
    /// The SID of the application that handles SMS messages sent to the phone number
    public var smsApplicationSid: String?
    /// The HTTP method used with sms_fallback_url
    public var smsFallbackMethod: SmsFallbackMethod?
    /// The URL that we call when an error occurs while retrieving or executing the TwiML
    public var smsFallbackURL: URL?
    /// The HTTP method to use with sms_url
    public var smsMethod: SmsMethod?
    /// The URL we call when the phone number receives an incoming SMS message
    public var smsURL: URL?
    public var status: String?
    /// The URL to send status information to your application
    public var statusCallback: URL?
    /// The HTTP method we use to call status_callback
    public var statusCallbackMethod: StatusCallbackMethod?
    /// The SID of the Trunk that handles calls to the phone number
    public var trunkSid: String?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?
    /// The SID of the application that handles calls to the phone number
    public var voiceApplicationSid: String?
    /// Whether to lookup the caller's name
    public var isVoiceCallerIDLookup: Bool?
    /// The HTTP method used with voice_fallback_url
    public var voiceFallbackMethod: VoiceFallbackMethod?
    /// The URL we call when an error occurs in TwiML
    public var voiceFallbackURL: URL?
    /// The HTTP method used with the voice_url
    public var voiceMethod: VoiceMethod?
    public var voiceReceiveMode: VoiceReceiveMode?
    /// The URL we call when the phone number receives a call
    public var voiceURL: URL?

    /// Whether the phone number requires an Address registered with Twilio.
    public enum AddressRequirements: String, Codable, CaseIterable {
        case `none`
        case any
        case local
        case foreign
    }

    /// Indicate if a phone can receive calls or messages
    public struct Capabilities: Codable {
        public var isFax: Bool?
        public var isMms: Bool?
        public var isSms: Bool?
        public var isVoice: Bool?

        public init(isFax: Bool? = nil, isMms: Bool? = nil, isSms: Bool? = nil, isVoice: Bool? = nil) {
            self.isFax = isFax
            self.isMms = isMms
            self.isSms = isSms
            self.isVoice = isVoice
        }

        private enum CodingKeys: String, CodingKey {
            case isFax = "fax"
            case isMms = "mms"
            case isSms = "sms"
            case isVoice = "voice"
        }
    }

    /// State of the emergency address configuration for the phone number
    public enum EmergencyAddressStatus: String, Codable, CaseIterable {
        case registered
        case unregistered
        case pendingRegistration = "pending-registration"
        case registrationFailure = "registration-failure"
        case pendingUnregistration = "pending-unregistration"
        case unregistrationFailure = "unregistration-failure"
    }

    /// Displays if emergency calling is enabled for this number.
    public enum EmergencyStatus: String, Codable, CaseIterable {
        case active = "Active"
        case inactive = "Inactive"
    }

    /// The HTTP method used with sms_fallback_url
    public enum SmsFallbackMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method to use with sms_url
    public enum SmsMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method we use to call status_callback
    public enum StatusCallbackMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method used with voice_fallback_url
    public enum VoiceFallbackMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method used with the voice_url
    public enum VoiceMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    public enum VoiceReceiveMode: String, Codable, CaseIterable {
        case voice
        case fax
    }

    public init(accountSid: String? = nil, addressRequirements: AddressRequirements? = nil, addressSid: String? = nil, apiVersion: String? = nil, isBeta: Bool? = nil, bundleSid: String? = nil, capabilities: Capabilities? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, emergencyAddressSid: String? = nil, emergencyAddressStatus: EmergencyAddressStatus? = nil, emergencyStatus: EmergencyStatus? = nil, friendlyName: String? = nil, identitySid: String? = nil, origin: String? = nil, phoneNumber: String? = nil, sid: String? = nil, smsApplicationSid: String? = nil, smsFallbackMethod: SmsFallbackMethod? = nil, smsFallbackURL: URL? = nil, smsMethod: SmsMethod? = nil, smsURL: URL? = nil, status: String? = nil, statusCallback: URL? = nil, statusCallbackMethod: StatusCallbackMethod? = nil, trunkSid: String? = nil, uri: URL? = nil, voiceApplicationSid: String? = nil, isVoiceCallerIDLookup: Bool? = nil, voiceFallbackMethod: VoiceFallbackMethod? = nil, voiceFallbackURL: URL? = nil, voiceMethod: VoiceMethod? = nil, voiceReceiveMode: VoiceReceiveMode? = nil, voiceURL: URL? = nil) {
        self.accountSid = accountSid
        self.addressRequirements = addressRequirements
        self.addressSid = addressSid
        self.apiVersion = apiVersion
        self.isBeta = isBeta
        self.bundleSid = bundleSid
        self.capabilities = capabilities
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.emergencyAddressSid = emergencyAddressSid
        self.emergencyAddressStatus = emergencyAddressStatus
        self.emergencyStatus = emergencyStatus
        self.friendlyName = friendlyName
        self.identitySid = identitySid
        self.origin = origin
        self.phoneNumber = phoneNumber
        self.sid = sid
        self.smsApplicationSid = smsApplicationSid
        self.smsFallbackMethod = smsFallbackMethod
        self.smsFallbackURL = smsFallbackURL
        self.smsMethod = smsMethod
        self.smsURL = smsURL
        self.status = status
        self.statusCallback = statusCallback
        self.statusCallbackMethod = statusCallbackMethod
        self.trunkSid = trunkSid
        self.uri = uri
        self.voiceApplicationSid = voiceApplicationSid
        self.isVoiceCallerIDLookup = isVoiceCallerIDLookup
        self.voiceFallbackMethod = voiceFallbackMethod
        self.voiceFallbackURL = voiceFallbackURL
        self.voiceMethod = voiceMethod
        self.voiceReceiveMode = voiceReceiveMode
        self.voiceURL = voiceURL
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case addressRequirements = "address_requirements"
        case addressSid = "address_sid"
        case apiVersion = "api_version"
        case isBeta = "beta"
        case bundleSid = "bundle_sid"
        case capabilities
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case emergencyAddressSid = "emergency_address_sid"
        case emergencyAddressStatus = "emergency_address_status"
        case emergencyStatus = "emergency_status"
        case friendlyName = "friendly_name"
        case identitySid = "identity_sid"
        case origin
        case phoneNumber = "phone_number"
        case sid
        case smsApplicationSid = "sms_application_sid"
        case smsFallbackMethod = "sms_fallback_method"
        case smsFallbackURL = "sms_fallback_url"
        case smsMethod = "sms_method"
        case smsURL = "sms_url"
        case status
        case statusCallback = "status_callback"
        case statusCallbackMethod = "status_callback_method"
        case trunkSid = "trunk_sid"
        case uri
        case voiceApplicationSid = "voice_application_sid"
        case isVoiceCallerIDLookup = "voice_caller_id_lookup"
        case voiceFallbackMethod = "voice_fallback_method"
        case voiceFallbackURL = "voice_fallback_url"
        case voiceMethod = "voice_method"
        case voiceReceiveMode = "voice_receive_mode"
        case voiceURL = "voice_url"
    }
}

public struct APIV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// A JSON string that represents the current configuration
    public var configuration: [String: AnyJSON]?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// A short description of the Add-on functionality
    public var description: String?
    /// The string that you assigned to describe the resource
    public var friendlyName: String?
    /// The SID of the Phone Number that installed this Add-on
    public var resourceSid: String?
    /// The unique string that identifies the resource
    public var sid: String?
    /// A list of related resources identified by their relative URIs
    public var subresourceUris: [String: AnyJSON]?
    /// An application-defined string that uniquely identifies the resource
    public var uniqueName: String?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?

    public init(accountSid: String? = nil, configuration: [String: AnyJSON]? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, description: String? = nil, friendlyName: String? = nil, resourceSid: String? = nil, sid: String? = nil, subresourceUris: [String: AnyJSON]? = nil, uniqueName: String? = nil, uri: URL? = nil) {
        self.accountSid = accountSid
        self.configuration = configuration
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.description = description
        self.friendlyName = friendlyName
        self.resourceSid = resourceSid
        self.sid = sid
        self.subresourceUris = subresourceUris
        self.uniqueName = uniqueName
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case configuration
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case description
        case friendlyName = "friendly_name"
        case resourceSid = "resource_sid"
        case sid
        case subresourceUris = "subresource_uris"
        case uniqueName = "unique_name"
        case uri
    }
}

public struct APIV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOnIncomingPhoneNumberAssignedAddOnExtension: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// The SID that uniquely identifies the assigned Add-on installation
    public var assignedAddOnSid: String?
    /// Whether the Extension will be invoked
    public var isEnabled: Bool?
    /// The string that you assigned to describe the resource
    public var friendlyName: String?
    /// A string that you assigned to describe the Product this Extension is used within
    public var productName: String?
    /// The SID of the Phone Number to which the Add-on is assigned
    public var resourceSid: String?
    /// The unique string that identifies the resource
    public var sid: String?
    /// An application-defined string that uniquely identifies the resource
    public var uniqueName: String?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?

    public init(accountSid: String? = nil, assignedAddOnSid: String? = nil, isEnabled: Bool? = nil, friendlyName: String? = nil, productName: String? = nil, resourceSid: String? = nil, sid: String? = nil, uniqueName: String? = nil, uri: URL? = nil) {
        self.accountSid = accountSid
        self.assignedAddOnSid = assignedAddOnSid
        self.isEnabled = isEnabled
        self.friendlyName = friendlyName
        self.productName = productName
        self.resourceSid = resourceSid
        self.sid = sid
        self.uniqueName = uniqueName
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case assignedAddOnSid = "assigned_add_on_sid"
        case isEnabled = "enabled"
        case friendlyName = "friendly_name"
        case productName = "product_name"
        case resourceSid = "resource_sid"
        case sid
        case uniqueName = "unique_name"
        case uri
    }
}

public struct APIV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// Whether the phone number requires an Address registered with Twilio.
    public var addressRequirements: AddressRequirements?
    /// The SID of the Address resource associated with the phone number
    public var addressSid: String?
    /// The API version used to start a new TwiML session
    public var apiVersion: String?
    /// Whether the phone number is new to the Twilio platform
    public var isBeta: Bool?
    /// The SID of the Bundle resource associated with number
    public var bundleSid: String?
    /// Indicate if a phone can receive calls or messages
    public var capabilities: Capabilities?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// The emergency address configuration to use for emergency calling
    public var emergencyAddressSid: String?
    /// State of the emergency address configuration for the phone number
    public var emergencyAddressStatus: EmergencyAddressStatus?
    /// Displays if emergency calling is enabled for this number.
    public var emergencyStatus: EmergencyStatus?
    /// The string that you assigned to describe the resource
    public var friendlyName: String?
    /// The SID of the Identity resource associated with number
    public var identitySid: String?
    /// The phone number's origin. Can be twilio or hosted.
    public var origin: String?
    /// The phone number in E.164 format
    public var phoneNumber: String?
    /// The unique string that identifies the resource
    public var sid: String?
    /// The SID of the Application resource to handle SMS messages
    public var smsApplicationSid: String?
    /// The HTTP method used with sms_fallback_url
    public var smsFallbackMethod: SmsFallbackMethod?
    /// The URL that we call when an error occurs while retrieving or executing the TwiML
    public var smsFallbackURL: URL?
    /// The HTTP method to use with sms_url
    public var smsMethod: SmsMethod?
    /// The URL we call when the phone number receives an incoming SMS message
    public var smsURL: URL?
    public var status: String?
    /// The URL to send status information to your application
    public var statusCallback: URL?
    /// The HTTP method we use to call status_callback
    public var statusCallbackMethod: StatusCallbackMethod?
    /// The SID of the Trunk that handles calls to the phone number
    public var trunkSid: String?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?
    /// The SID of the application that handles calls to the phone number
    public var voiceApplicationSid: String?
    /// Whether to lookup the caller's name
    public var isVoiceCallerIDLookup: Bool?
    /// The HTTP method used with voice_fallback_url
    public var voiceFallbackMethod: VoiceFallbackMethod?
    /// The URL we call when an error occurs in TwiML
    public var voiceFallbackURL: URL?
    /// The HTTP method used with the voice_url
    public var voiceMethod: VoiceMethod?
    public var voiceReceiveMode: VoiceReceiveMode?
    /// The URL we call when this phone number receives a call
    public var voiceURL: URL?

    /// Whether the phone number requires an Address registered with Twilio.
    public enum AddressRequirements: String, Codable, CaseIterable {
        case `none`
        case any
        case local
        case foreign
    }

    /// Indicate if a phone can receive calls or messages
    public struct Capabilities: Codable {
        public var isFax: Bool?
        public var isMms: Bool?
        public var isSms: Bool?
        public var isVoice: Bool?

        public init(isFax: Bool? = nil, isMms: Bool? = nil, isSms: Bool? = nil, isVoice: Bool? = nil) {
            self.isFax = isFax
            self.isMms = isMms
            self.isSms = isSms
            self.isVoice = isVoice
        }

        private enum CodingKeys: String, CodingKey {
            case isFax = "fax"
            case isMms = "mms"
            case isSms = "sms"
            case isVoice = "voice"
        }
    }

    /// State of the emergency address configuration for the phone number
    public enum EmergencyAddressStatus: String, Codable, CaseIterable {
        case registered
        case unregistered
        case pendingRegistration = "pending-registration"
        case registrationFailure = "registration-failure"
        case pendingUnregistration = "pending-unregistration"
        case unregistrationFailure = "unregistration-failure"
    }

    /// Displays if emergency calling is enabled for this number.
    public enum EmergencyStatus: String, Codable, CaseIterable {
        case active = "Active"
        case inactive = "Inactive"
    }

    /// The HTTP method used with sms_fallback_url
    public enum SmsFallbackMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method to use with sms_url
    public enum SmsMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method we use to call status_callback
    public enum StatusCallbackMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method used with voice_fallback_url
    public enum VoiceFallbackMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method used with the voice_url
    public enum VoiceMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    public enum VoiceReceiveMode: String, Codable, CaseIterable {
        case voice
        case fax
    }

    public init(accountSid: String? = nil, addressRequirements: AddressRequirements? = nil, addressSid: String? = nil, apiVersion: String? = nil, isBeta: Bool? = nil, bundleSid: String? = nil, capabilities: Capabilities? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, emergencyAddressSid: String? = nil, emergencyAddressStatus: EmergencyAddressStatus? = nil, emergencyStatus: EmergencyStatus? = nil, friendlyName: String? = nil, identitySid: String? = nil, origin: String? = nil, phoneNumber: String? = nil, sid: String? = nil, smsApplicationSid: String? = nil, smsFallbackMethod: SmsFallbackMethod? = nil, smsFallbackURL: URL? = nil, smsMethod: SmsMethod? = nil, smsURL: URL? = nil, status: String? = nil, statusCallback: URL? = nil, statusCallbackMethod: StatusCallbackMethod? = nil, trunkSid: String? = nil, uri: URL? = nil, voiceApplicationSid: String? = nil, isVoiceCallerIDLookup: Bool? = nil, voiceFallbackMethod: VoiceFallbackMethod? = nil, voiceFallbackURL: URL? = nil, voiceMethod: VoiceMethod? = nil, voiceReceiveMode: VoiceReceiveMode? = nil, voiceURL: URL? = nil) {
        self.accountSid = accountSid
        self.addressRequirements = addressRequirements
        self.addressSid = addressSid
        self.apiVersion = apiVersion
        self.isBeta = isBeta
        self.bundleSid = bundleSid
        self.capabilities = capabilities
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.emergencyAddressSid = emergencyAddressSid
        self.emergencyAddressStatus = emergencyAddressStatus
        self.emergencyStatus = emergencyStatus
        self.friendlyName = friendlyName
        self.identitySid = identitySid
        self.origin = origin
        self.phoneNumber = phoneNumber
        self.sid = sid
        self.smsApplicationSid = smsApplicationSid
        self.smsFallbackMethod = smsFallbackMethod
        self.smsFallbackURL = smsFallbackURL
        self.smsMethod = smsMethod
        self.smsURL = smsURL
        self.status = status
        self.statusCallback = statusCallback
        self.statusCallbackMethod = statusCallbackMethod
        self.trunkSid = trunkSid
        self.uri = uri
        self.voiceApplicationSid = voiceApplicationSid
        self.isVoiceCallerIDLookup = isVoiceCallerIDLookup
        self.voiceFallbackMethod = voiceFallbackMethod
        self.voiceFallbackURL = voiceFallbackURL
        self.voiceMethod = voiceMethod
        self.voiceReceiveMode = voiceReceiveMode
        self.voiceURL = voiceURL
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case addressRequirements = "address_requirements"
        case addressSid = "address_sid"
        case apiVersion = "api_version"
        case isBeta = "beta"
        case bundleSid = "bundle_sid"
        case capabilities
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case emergencyAddressSid = "emergency_address_sid"
        case emergencyAddressStatus = "emergency_address_status"
        case emergencyStatus = "emergency_status"
        case friendlyName = "friendly_name"
        case identitySid = "identity_sid"
        case origin
        case phoneNumber = "phone_number"
        case sid
        case smsApplicationSid = "sms_application_sid"
        case smsFallbackMethod = "sms_fallback_method"
        case smsFallbackURL = "sms_fallback_url"
        case smsMethod = "sms_method"
        case smsURL = "sms_url"
        case status
        case statusCallback = "status_callback"
        case statusCallbackMethod = "status_callback_method"
        case trunkSid = "trunk_sid"
        case uri
        case voiceApplicationSid = "voice_application_sid"
        case isVoiceCallerIDLookup = "voice_caller_id_lookup"
        case voiceFallbackMethod = "voice_fallback_method"
        case voiceFallbackURL = "voice_fallback_url"
        case voiceMethod = "voice_method"
        case voiceReceiveMode = "voice_receive_mode"
        case voiceURL = "voice_url"
    }
}

public struct APIV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobile: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// Whether the phone number requires an Address registered with Twilio.
    public var addressRequirements: AddressRequirements?
    /// The SID of the Address resource associated with the phone number
    public var addressSid: String?
    /// The API version used to start a new TwiML session
    public var apiVersion: String?
    /// Whether the phone number is new to the Twilio platform
    public var isBeta: Bool?
    /// The SID of the Bundle resource associated with number
    public var bundleSid: String?
    /// Indicate if a phone can receive calls or messages
    public var capabilities: Capabilities?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// The emergency address configuration to use for emergency calling
    public var emergencyAddressSid: String?
    /// State of the emergency address configuration for the phone number
    public var emergencyAddressStatus: EmergencyAddressStatus?
    /// Displays if emergency calling is enabled for this number.
    public var emergencyStatus: EmergencyStatus?
    /// The string that you assigned to describe the resource
    public var friendlyName: String?
    /// The SID of the Identity resource associated with number
    public var identitySid: String?
    /// The phone number's origin. Can be twilio or hosted.
    public var origin: String?
    /// The phone number in E.164 format
    public var phoneNumber: String?
    /// The unique string that identifies the resource
    public var sid: String?
    /// The SID of the application that handles SMS messages sent to the phone number
    public var smsApplicationSid: String?
    /// The HTTP method used with sms_fallback_url
    public var smsFallbackMethod: SmsFallbackMethod?
    /// The URL that we call when an error occurs while retrieving or executing the TwiML
    public var smsFallbackURL: URL?
    /// The HTTP method to use with sms_url
    public var smsMethod: SmsMethod?
    /// The URL we call when the phone number receives an incoming SMS message
    public var smsURL: URL?
    public var status: String?
    /// The URL to send status information to your application
    public var statusCallback: URL?
    /// The HTTP method we use to call status_callback
    public var statusCallbackMethod: StatusCallbackMethod?
    /// The SID of the Trunk that handles calls to the phone number
    public var trunkSid: String?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?
    /// The SID of the application that handles calls to the phone number
    public var voiceApplicationSid: String?
    /// Whether to lookup the caller's name
    public var isVoiceCallerIDLookup: Bool?
    /// The HTTP method used with voice_fallback_url
    public var voiceFallbackMethod: VoiceFallbackMethod?
    /// The URL we call when an error occurs in TwiML
    public var voiceFallbackURL: URL?
    /// The HTTP method used with the voice_url
    public var voiceMethod: VoiceMethod?
    public var voiceReceiveMode: VoiceReceiveMode?
    /// The URL we call when the phone number receives a call
    public var voiceURL: URL?

    /// Whether the phone number requires an Address registered with Twilio.
    public enum AddressRequirements: String, Codable, CaseIterable {
        case `none`
        case any
        case local
        case foreign
    }

    /// Indicate if a phone can receive calls or messages
    public struct Capabilities: Codable {
        public var isFax: Bool?
        public var isMms: Bool?
        public var isSms: Bool?
        public var isVoice: Bool?

        public init(isFax: Bool? = nil, isMms: Bool? = nil, isSms: Bool? = nil, isVoice: Bool? = nil) {
            self.isFax = isFax
            self.isMms = isMms
            self.isSms = isSms
            self.isVoice = isVoice
        }

        private enum CodingKeys: String, CodingKey {
            case isFax = "fax"
            case isMms = "mms"
            case isSms = "sms"
            case isVoice = "voice"
        }
    }

    /// State of the emergency address configuration for the phone number
    public enum EmergencyAddressStatus: String, Codable, CaseIterable {
        case registered
        case unregistered
        case pendingRegistration = "pending-registration"
        case registrationFailure = "registration-failure"
        case pendingUnregistration = "pending-unregistration"
        case unregistrationFailure = "unregistration-failure"
    }

    /// Displays if emergency calling is enabled for this number.
    public enum EmergencyStatus: String, Codable, CaseIterable {
        case active = "Active"
        case inactive = "Inactive"
    }

    /// The HTTP method used with sms_fallback_url
    public enum SmsFallbackMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method to use with sms_url
    public enum SmsMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method we use to call status_callback
    public enum StatusCallbackMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method used with voice_fallback_url
    public enum VoiceFallbackMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method used with the voice_url
    public enum VoiceMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    public enum VoiceReceiveMode: String, Codable, CaseIterable {
        case voice
        case fax
    }

    public init(accountSid: String? = nil, addressRequirements: AddressRequirements? = nil, addressSid: String? = nil, apiVersion: String? = nil, isBeta: Bool? = nil, bundleSid: String? = nil, capabilities: Capabilities? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, emergencyAddressSid: String? = nil, emergencyAddressStatus: EmergencyAddressStatus? = nil, emergencyStatus: EmergencyStatus? = nil, friendlyName: String? = nil, identitySid: String? = nil, origin: String? = nil, phoneNumber: String? = nil, sid: String? = nil, smsApplicationSid: String? = nil, smsFallbackMethod: SmsFallbackMethod? = nil, smsFallbackURL: URL? = nil, smsMethod: SmsMethod? = nil, smsURL: URL? = nil, status: String? = nil, statusCallback: URL? = nil, statusCallbackMethod: StatusCallbackMethod? = nil, trunkSid: String? = nil, uri: URL? = nil, voiceApplicationSid: String? = nil, isVoiceCallerIDLookup: Bool? = nil, voiceFallbackMethod: VoiceFallbackMethod? = nil, voiceFallbackURL: URL? = nil, voiceMethod: VoiceMethod? = nil, voiceReceiveMode: VoiceReceiveMode? = nil, voiceURL: URL? = nil) {
        self.accountSid = accountSid
        self.addressRequirements = addressRequirements
        self.addressSid = addressSid
        self.apiVersion = apiVersion
        self.isBeta = isBeta
        self.bundleSid = bundleSid
        self.capabilities = capabilities
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.emergencyAddressSid = emergencyAddressSid
        self.emergencyAddressStatus = emergencyAddressStatus
        self.emergencyStatus = emergencyStatus
        self.friendlyName = friendlyName
        self.identitySid = identitySid
        self.origin = origin
        self.phoneNumber = phoneNumber
        self.sid = sid
        self.smsApplicationSid = smsApplicationSid
        self.smsFallbackMethod = smsFallbackMethod
        self.smsFallbackURL = smsFallbackURL
        self.smsMethod = smsMethod
        self.smsURL = smsURL
        self.status = status
        self.statusCallback = statusCallback
        self.statusCallbackMethod = statusCallbackMethod
        self.trunkSid = trunkSid
        self.uri = uri
        self.voiceApplicationSid = voiceApplicationSid
        self.isVoiceCallerIDLookup = isVoiceCallerIDLookup
        self.voiceFallbackMethod = voiceFallbackMethod
        self.voiceFallbackURL = voiceFallbackURL
        self.voiceMethod = voiceMethod
        self.voiceReceiveMode = voiceReceiveMode
        self.voiceURL = voiceURL
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case addressRequirements = "address_requirements"
        case addressSid = "address_sid"
        case apiVersion = "api_version"
        case isBeta = "beta"
        case bundleSid = "bundle_sid"
        case capabilities
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case emergencyAddressSid = "emergency_address_sid"
        case emergencyAddressStatus = "emergency_address_status"
        case emergencyStatus = "emergency_status"
        case friendlyName = "friendly_name"
        case identitySid = "identity_sid"
        case origin
        case phoneNumber = "phone_number"
        case sid
        case smsApplicationSid = "sms_application_sid"
        case smsFallbackMethod = "sms_fallback_method"
        case smsFallbackURL = "sms_fallback_url"
        case smsMethod = "sms_method"
        case smsURL = "sms_url"
        case status
        case statusCallback = "status_callback"
        case statusCallbackMethod = "status_callback_method"
        case trunkSid = "trunk_sid"
        case uri
        case voiceApplicationSid = "voice_application_sid"
        case isVoiceCallerIDLookup = "voice_caller_id_lookup"
        case voiceFallbackMethod = "voice_fallback_method"
        case voiceFallbackURL = "voice_fallback_url"
        case voiceMethod = "voice_method"
        case voiceReceiveMode = "voice_receive_mode"
        case voiceURL = "voice_url"
    }
}

public struct APIV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFree: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// Whether the phone number requires an Address registered with Twilio.
    public var addressRequirements: AddressRequirements?
    /// The SID of the Address resource associated with the phone number
    public var addressSid: String?
    /// The API version used to start a new TwiML session
    public var apiVersion: String?
    /// Whether the phone number is new to the Twilio platform
    public var isBeta: Bool?
    /// The SID of the Bundle resource associated with number
    public var bundleSid: String?
    /// Indicate if a phone can receive calls or messages
    public var capabilities: Capabilities?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// The emergency address configuration to use for emergency calling
    public var emergencyAddressSid: String?
    /// State of the emergency address configuration for the phone number
    public var emergencyAddressStatus: EmergencyAddressStatus?
    /// Displays if emergency calling is enabled for this number.
    public var emergencyStatus: EmergencyStatus?
    /// The string that you assigned to describe the resource
    public var friendlyName: String?
    /// The SID of the Identity resource associated with number
    public var identitySid: String?
    /// The phone number's origin. Can be twilio or hosted.
    public var origin: String?
    /// The phone number in E.164 format
    public var phoneNumber: String?
    /// The unique string that identifies the resource
    public var sid: String?
    /// The SID of the application that handles SMS messages sent to the phone number
    public var smsApplicationSid: String?
    /// The HTTP method used with sms_fallback_url
    public var smsFallbackMethod: SmsFallbackMethod?
    /// The URL that we call when an error occurs while retrieving or executing the TwiML
    public var smsFallbackURL: URL?
    /// The HTTP method to use with sms_url
    public var smsMethod: SmsMethod?
    /// The URL we call when the phone number receives an incoming SMS message
    public var smsURL: URL?
    public var status: String?
    /// The URL to send status information to your application
    public var statusCallback: URL?
    /// The HTTP method we use to call status_callback
    public var statusCallbackMethod: StatusCallbackMethod?
    /// The SID of the Trunk that handles calls to the phone number
    public var trunkSid: String?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?
    /// The SID of the application that handles calls to the phone number
    public var voiceApplicationSid: String?
    /// Whether to lookup the caller's name
    public var isVoiceCallerIDLookup: Bool?
    /// The HTTP method used with voice_fallback_url
    public var voiceFallbackMethod: VoiceFallbackMethod?
    /// The URL we call when an error occurs in TwiML
    public var voiceFallbackURL: URL?
    /// The HTTP method used with the voice_url
    public var voiceMethod: VoiceMethod?
    public var voiceReceiveMode: VoiceReceiveMode?
    /// The URL we call when the phone number receives a call
    public var voiceURL: URL?

    /// Whether the phone number requires an Address registered with Twilio.
    public enum AddressRequirements: String, Codable, CaseIterable {
        case `none`
        case any
        case local
        case foreign
    }

    /// Indicate if a phone can receive calls or messages
    public struct Capabilities: Codable {
        public var isFax: Bool?
        public var isMms: Bool?
        public var isSms: Bool?
        public var isVoice: Bool?

        public init(isFax: Bool? = nil, isMms: Bool? = nil, isSms: Bool? = nil, isVoice: Bool? = nil) {
            self.isFax = isFax
            self.isMms = isMms
            self.isSms = isSms
            self.isVoice = isVoice
        }

        private enum CodingKeys: String, CodingKey {
            case isFax = "fax"
            case isMms = "mms"
            case isSms = "sms"
            case isVoice = "voice"
        }
    }

    /// State of the emergency address configuration for the phone number
    public enum EmergencyAddressStatus: String, Codable, CaseIterable {
        case registered
        case unregistered
        case pendingRegistration = "pending-registration"
        case registrationFailure = "registration-failure"
        case pendingUnregistration = "pending-unregistration"
        case unregistrationFailure = "unregistration-failure"
    }

    /// Displays if emergency calling is enabled for this number.
    public enum EmergencyStatus: String, Codable, CaseIterable {
        case active = "Active"
        case inactive = "Inactive"
    }

    /// The HTTP method used with sms_fallback_url
    public enum SmsFallbackMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method to use with sms_url
    public enum SmsMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method we use to call status_callback
    public enum StatusCallbackMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method used with voice_fallback_url
    public enum VoiceFallbackMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method used with the voice_url
    public enum VoiceMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    public enum VoiceReceiveMode: String, Codable, CaseIterable {
        case voice
        case fax
    }

    public init(accountSid: String? = nil, addressRequirements: AddressRequirements? = nil, addressSid: String? = nil, apiVersion: String? = nil, isBeta: Bool? = nil, bundleSid: String? = nil, capabilities: Capabilities? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, emergencyAddressSid: String? = nil, emergencyAddressStatus: EmergencyAddressStatus? = nil, emergencyStatus: EmergencyStatus? = nil, friendlyName: String? = nil, identitySid: String? = nil, origin: String? = nil, phoneNumber: String? = nil, sid: String? = nil, smsApplicationSid: String? = nil, smsFallbackMethod: SmsFallbackMethod? = nil, smsFallbackURL: URL? = nil, smsMethod: SmsMethod? = nil, smsURL: URL? = nil, status: String? = nil, statusCallback: URL? = nil, statusCallbackMethod: StatusCallbackMethod? = nil, trunkSid: String? = nil, uri: URL? = nil, voiceApplicationSid: String? = nil, isVoiceCallerIDLookup: Bool? = nil, voiceFallbackMethod: VoiceFallbackMethod? = nil, voiceFallbackURL: URL? = nil, voiceMethod: VoiceMethod? = nil, voiceReceiveMode: VoiceReceiveMode? = nil, voiceURL: URL? = nil) {
        self.accountSid = accountSid
        self.addressRequirements = addressRequirements
        self.addressSid = addressSid
        self.apiVersion = apiVersion
        self.isBeta = isBeta
        self.bundleSid = bundleSid
        self.capabilities = capabilities
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.emergencyAddressSid = emergencyAddressSid
        self.emergencyAddressStatus = emergencyAddressStatus
        self.emergencyStatus = emergencyStatus
        self.friendlyName = friendlyName
        self.identitySid = identitySid
        self.origin = origin
        self.phoneNumber = phoneNumber
        self.sid = sid
        self.smsApplicationSid = smsApplicationSid
        self.smsFallbackMethod = smsFallbackMethod
        self.smsFallbackURL = smsFallbackURL
        self.smsMethod = smsMethod
        self.smsURL = smsURL
        self.status = status
        self.statusCallback = statusCallback
        self.statusCallbackMethod = statusCallbackMethod
        self.trunkSid = trunkSid
        self.uri = uri
        self.voiceApplicationSid = voiceApplicationSid
        self.isVoiceCallerIDLookup = isVoiceCallerIDLookup
        self.voiceFallbackMethod = voiceFallbackMethod
        self.voiceFallbackURL = voiceFallbackURL
        self.voiceMethod = voiceMethod
        self.voiceReceiveMode = voiceReceiveMode
        self.voiceURL = voiceURL
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case addressRequirements = "address_requirements"
        case addressSid = "address_sid"
        case apiVersion = "api_version"
        case isBeta = "beta"
        case bundleSid = "bundle_sid"
        case capabilities
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case emergencyAddressSid = "emergency_address_sid"
        case emergencyAddressStatus = "emergency_address_status"
        case emergencyStatus = "emergency_status"
        case friendlyName = "friendly_name"
        case identitySid = "identity_sid"
        case origin
        case phoneNumber = "phone_number"
        case sid
        case smsApplicationSid = "sms_application_sid"
        case smsFallbackMethod = "sms_fallback_method"
        case smsFallbackURL = "sms_fallback_url"
        case smsMethod = "sms_method"
        case smsURL = "sms_url"
        case status
        case statusCallback = "status_callback"
        case statusCallbackMethod = "status_callback_method"
        case trunkSid = "trunk_sid"
        case uri
        case voiceApplicationSid = "voice_application_sid"
        case isVoiceCallerIDLookup = "voice_caller_id_lookup"
        case voiceFallbackMethod = "voice_fallback_method"
        case voiceFallbackURL = "voice_fallback_url"
        case voiceMethod = "voice_method"
        case voiceReceiveMode = "voice_receive_mode"
        case voiceURL = "voice_url"
    }
}

public struct APIV2010AccountKey: Codable {
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// The string that you assigned to describe the resource
    public var friendlyName: String?
    /// The unique string that identifies the resource
    public var sid: String?

    public init(dateCreated: String? = nil, dateUpdated: String? = nil, friendlyName: String? = nil, sid: String? = nil) {
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.friendlyName = friendlyName
        self.sid = sid
    }

    private enum CodingKeys: String, CodingKey {
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case friendlyName = "friendly_name"
        case sid
    }
}

public struct APIV2010AccountMessage: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// The API version used to process the message
    public var apiVersion: String?
    /// The message text
    public var body: String?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT when the message was sent
    public var dateSent: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// The direction of the message
    public var direction: Direction?
    /// The error code associated with the message
    public var errorCode: Int?
    /// The description of the error_code
    public var errorMessage: String?
    /// The phone number that initiated the message
    public var from: String?
    /// The SID of the Messaging Service used with the message.
    public var messagingServiceSid: String?
    /// The number of media files associated with the message
    public var numMedia: String?
    /// The number of messages used to deliver the message body
    public var numSegments: String?
    /// The amount billed for the message
    public var price: String?
    /// The currency in which price is measured
    public var priceUnit: String?
    /// The unique string that identifies the resource
    public var sid: String?
    /// The status of the message
    public var status: Status?
    /// A list of related resources identified by their relative URIs
    public var subresourceUris: [String: AnyJSON]?
    /// The phone number that received the message
    public var to: String?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: String?

    /// The direction of the message
    public enum Direction: String, Codable, CaseIterable {
        case inbound
        case outboundAPI = "outbound-api"
        case outboundCall = "outbound-call"
        case outboundReply = "outbound-reply"
    }

    /// The status of the message
    public enum Status: String, Codable, CaseIterable {
        case queued
        case sending
        case sent
        case failed
        case delivered
        case undelivered
        case receiving
        case received
        case accepted
        case scheduled
        case read
        case partiallyDelivered = "partially_delivered"
        case canceled
    }

    public init(accountSid: String? = nil, apiVersion: String? = nil, body: String? = nil, dateCreated: String? = nil, dateSent: String? = nil, dateUpdated: String? = nil, direction: Direction? = nil, errorCode: Int? = nil, errorMessage: String? = nil, from: String? = nil, messagingServiceSid: String? = nil, numMedia: String? = nil, numSegments: String? = nil, price: String? = nil, priceUnit: String? = nil, sid: String? = nil, status: Status? = nil, subresourceUris: [String: AnyJSON]? = nil, to: String? = nil, uri: String? = nil) {
        self.accountSid = accountSid
        self.apiVersion = apiVersion
        self.body = body
        self.dateCreated = dateCreated
        self.dateSent = dateSent
        self.dateUpdated = dateUpdated
        self.direction = direction
        self.errorCode = errorCode
        self.errorMessage = errorMessage
        self.from = from
        self.messagingServiceSid = messagingServiceSid
        self.numMedia = numMedia
        self.numSegments = numSegments
        self.price = price
        self.priceUnit = priceUnit
        self.sid = sid
        self.status = status
        self.subresourceUris = subresourceUris
        self.to = to
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case apiVersion = "api_version"
        case body
        case dateCreated = "date_created"
        case dateSent = "date_sent"
        case dateUpdated = "date_updated"
        case direction
        case errorCode = "error_code"
        case errorMessage = "error_message"
        case from
        case messagingServiceSid = "messaging_service_sid"
        case numMedia = "num_media"
        case numSegments = "num_segments"
        case price
        case priceUnit = "price_unit"
        case sid
        case status
        case subresourceUris = "subresource_uris"
        case to
        case uri
    }
}

public struct APIV2010AccountMessageMedia: Codable {
    /// The SID of the Account that created this resource
    public var accountSid: String?
    /// The default mime-type of the media
    public var contentType: String?
    /// The RFC 2822 date and time in GMT that this resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that this resource was last updated
    public var dateUpdated: String?
    /// The SID of the resource that created the media
    public var parentSid: String?
    /// The unique string that identifies this resource
    public var sid: String?
    /// The URI of this resource, relative to `https://api.twilio.com`
    public var uri: URL?

    public init(accountSid: String? = nil, contentType: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, parentSid: String? = nil, sid: String? = nil, uri: URL? = nil) {
        self.accountSid = accountSid
        self.contentType = contentType
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.parentSid = parentSid
        self.sid = sid
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case contentType = "content_type"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case parentSid = "parent_sid"
        case sid
        case uri
    }
}

public struct APIV2010AccountMessageMessageFeedback: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// The SID of the Message resource for which the feedback was provided
    public var messageSid: String?
    /// Whether the feedback has arrived
    public var outcome: Outcome?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: String?

    /// Whether the feedback has arrived
    public enum Outcome: String, Codable, CaseIterable {
        case confirmed
        case unconfirmed
    }

    public init(accountSid: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, messageSid: String? = nil, outcome: Outcome? = nil, uri: String? = nil) {
        self.accountSid = accountSid
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.messageSid = messageSid
        self.outcome = outcome
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case messageSid = "message_sid"
        case outcome
        case uri
    }
}

public struct APIV2010AccountNewKey: Codable {
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// The string that you assigned to describe the resource
    public var friendlyName: String?
    /// The secret your application uses to sign Access Tokens and to authenticate to the REST API.
    public var secret: String?
    /// The unique string that identifies the resource
    public var sid: String?

    public init(dateCreated: String? = nil, dateUpdated: String? = nil, friendlyName: String? = nil, secret: String? = nil, sid: String? = nil) {
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.friendlyName = friendlyName
        self.secret = secret
        self.sid = sid
    }

    private enum CodingKeys: String, CodingKey {
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case friendlyName = "friendly_name"
        case secret
        case sid
    }
}

public struct APIV2010AccountNewSigningKey: Codable {
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// The string that you assigned to describe the resource
    public var friendlyName: String?
    /// The secret your application uses to sign Access Tokens and to authenticate to the REST API.
    public var secret: String?
    /// The unique string that identifies the resource
    public var sid: String?

    public init(dateCreated: String? = nil, dateUpdated: String? = nil, friendlyName: String? = nil, secret: String? = nil, sid: String? = nil) {
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.friendlyName = friendlyName
        self.secret = secret
        self.sid = sid
    }

    private enum CodingKeys: String, CodingKey {
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case friendlyName = "friendly_name"
        case secret
        case sid
    }
}

public struct APIV2010AccountNotification: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// The API version used to generate the notification
    public var apiVersion: String?
    /// The SID of the Call the resource is associated with
    public var callSid: String?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// A unique error code corresponding to the notification
    public var errorCode: String?
    /// An integer log level
    public var log: String?
    /// The date the notification was generated
    public var messageDate: String?
    /// The text of the notification
    public var messageText: String?
    /// A URL for more information about the error code
    public var moreInfo: URL?
    /// HTTP method used with the request url
    public var requestMethod: RequestMethod?
    /// URL of the resource that generated the notification
    public var requestURL: URL?
    /// The unique string that identifies the resource
    public var sid: String?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?

    /// HTTP method used with the request url
    public enum RequestMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    public init(accountSid: String? = nil, apiVersion: String? = nil, callSid: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, errorCode: String? = nil, log: String? = nil, messageDate: String? = nil, messageText: String? = nil, moreInfo: URL? = nil, requestMethod: RequestMethod? = nil, requestURL: URL? = nil, sid: String? = nil, uri: URL? = nil) {
        self.accountSid = accountSid
        self.apiVersion = apiVersion
        self.callSid = callSid
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.errorCode = errorCode
        self.log = log
        self.messageDate = messageDate
        self.messageText = messageText
        self.moreInfo = moreInfo
        self.requestMethod = requestMethod
        self.requestURL = requestURL
        self.sid = sid
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case apiVersion = "api_version"
        case callSid = "call_sid"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case errorCode = "error_code"
        case log
        case messageDate = "message_date"
        case messageText = "message_text"
        case moreInfo = "more_info"
        case requestMethod = "request_method"
        case requestURL = "request_url"
        case sid
        case uri
    }
}

public struct APIV2010AccountNotificationInstance: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// The API version used to generate the notification
    public var apiVersion: String?
    /// The SID of the Call the resource is associated with
    public var callSid: String?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// A unique error code corresponding to the notification
    public var errorCode: String?
    /// An integer log level
    public var log: String?
    /// The date the notification was generated
    public var messageDate: String?
    /// The text of the notification
    public var messageText: String?
    /// A URL for more information about the error code
    public var moreInfo: URL?
    /// HTTP method used with the request url
    public var requestMethod: RequestMethod?
    /// URL of the resource that generated the notification
    public var requestURL: URL?
    /// Twilio-generated HTTP variables sent to the server
    public var requestVariables: String?
    /// The HTTP body returned by your server
    public var responseBody: String?
    /// The HTTP headers returned by your server
    public var responseHeaders: String?
    /// The unique string that identifies the resource
    public var sid: String?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?

    /// HTTP method used with the request url
    public enum RequestMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    public init(accountSid: String? = nil, apiVersion: String? = nil, callSid: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, errorCode: String? = nil, log: String? = nil, messageDate: String? = nil, messageText: String? = nil, moreInfo: URL? = nil, requestMethod: RequestMethod? = nil, requestURL: URL? = nil, requestVariables: String? = nil, responseBody: String? = nil, responseHeaders: String? = nil, sid: String? = nil, uri: URL? = nil) {
        self.accountSid = accountSid
        self.apiVersion = apiVersion
        self.callSid = callSid
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.errorCode = errorCode
        self.log = log
        self.messageDate = messageDate
        self.messageText = messageText
        self.moreInfo = moreInfo
        self.requestMethod = requestMethod
        self.requestURL = requestURL
        self.requestVariables = requestVariables
        self.responseBody = responseBody
        self.responseHeaders = responseHeaders
        self.sid = sid
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case apiVersion = "api_version"
        case callSid = "call_sid"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case errorCode = "error_code"
        case log
        case messageDate = "message_date"
        case messageText = "message_text"
        case moreInfo = "more_info"
        case requestMethod = "request_method"
        case requestURL = "request_url"
        case requestVariables = "request_variables"
        case responseBody = "response_body"
        case responseHeaders = "response_headers"
        case sid
        case uri
    }
}

public struct APIV2010AccountOutgoingCallerID: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// The string that you assigned to describe the resource
    public var friendlyName: String?
    /// The phone number in E.164 format
    public var phoneNumber: String?
    /// The unique string that identifies the resource
    public var sid: String?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?

    public init(accountSid: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, friendlyName: String? = nil, phoneNumber: String? = nil, sid: String? = nil, uri: URL? = nil) {
        self.accountSid = accountSid
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.friendlyName = friendlyName
        self.phoneNumber = phoneNumber
        self.sid = sid
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case friendlyName = "friendly_name"
        case phoneNumber = "phone_number"
        case sid
        case uri
    }
}

public struct APIV2010AccountQueue: Codable {
    /// The SID of the Account that created this resource
    public var accountSid: String?
    /// Average wait time of members in the queue
    public var averageWaitTime: Int?
    /// The number of calls currently in the queue.
    public var currentSize: Int?
    /// The RFC 2822 date and time in GMT that this resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that this resource was last updated
    public var dateUpdated: String?
    /// A string that you assigned to describe this resource
    public var friendlyName: String?
    /// The max number of calls allowed in the queue
    public var maxSize: Int?
    /// The unique string that identifies this resource
    public var sid: String?
    /// The URI of this resource, relative to `https://api.twilio.com`
    public var uri: URL?

    public init(accountSid: String? = nil, averageWaitTime: Int? = nil, currentSize: Int? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, friendlyName: String? = nil, maxSize: Int? = nil, sid: String? = nil, uri: URL? = nil) {
        self.accountSid = accountSid
        self.averageWaitTime = averageWaitTime
        self.currentSize = currentSize
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.friendlyName = friendlyName
        self.maxSize = maxSize
        self.sid = sid
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case averageWaitTime = "average_wait_time"
        case currentSize = "current_size"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case friendlyName = "friendly_name"
        case maxSize = "max_size"
        case sid
        case uri
    }
}

public struct APIV2010AccountQueueMember: Codable {
    /// The SID of the Call the resource is associated with
    public var callSid: String?
    /// The date the member was enqueued
    public var dateEnqueued: String?
    /// This member's current position in the queue.
    public var position: Int?
    /// The SID of the Queue the member is in
    public var queueSid: String?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?
    /// The number of seconds the member has been in the queue.
    public var waitTime: Int?

    public init(callSid: String? = nil, dateEnqueued: String? = nil, position: Int? = nil, queueSid: String? = nil, uri: URL? = nil, waitTime: Int? = nil) {
        self.callSid = callSid
        self.dateEnqueued = dateEnqueued
        self.position = position
        self.queueSid = queueSid
        self.uri = uri
        self.waitTime = waitTime
    }

    private enum CodingKeys: String, CodingKey {
        case callSid = "call_sid"
        case dateEnqueued = "date_enqueued"
        case position
        case queueSid = "queue_sid"
        case uri
        case waitTime = "wait_time"
    }
}

public struct APIV2010AccountRecording: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// The API version used during the recording.
    public var apiVersion: String?
    /// The SID of the Call the resource is associated with
    public var callSid: String?
    /// The number of channels in the final recording file as an integer.
    public var channels: Int?
    /// The unique ID for the conference associated with the recording.
    public var conferenceSid: String?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// The length of the recording in seconds.
    public var duration: String?
    /// How to decrypt the recording.
    public var encryptionDetails: [String: AnyJSON]?
    /// More information about why the recording is missing, if status is `absent`.
    public var errorCode: Int?
    /// The one-time cost of creating the recording.
    public var price: String?
    /// The currency used in the price property.
    public var priceUnit: String?
    /// The unique string that identifies the resource
    public var sid: String?
    /// How the recording was created
    public var source: Source?
    /// The start time of the recording, given in RFC 2822 format
    public var startTime: String?
    /// The status of the recording.
    public var status: Status?
    /// A list of related resources identified by their relative URIs
    public var subresourceUris: [String: AnyJSON]?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?

    /// How the recording was created
    public enum Source: String, Codable, CaseIterable {
        case dialVerb = "DialVerb"
        case conference = "Conference"
        case outboundAPI = "OutboundAPI"
        case trunking = "Trunking"
        case recordVerb = "RecordVerb"
        case startCallRecordingAPI = "StartCallRecordingAPI"
        case startConferenceRecordingAPI = "StartConferenceRecordingAPI"
    }

    /// The status of the recording.
    public enum Status: String, Codable, CaseIterable {
        case inProgress = "in-progress"
        case paused
        case stopped
        case processing
        case completed
        case absent
    }

    public init(accountSid: String? = nil, apiVersion: String? = nil, callSid: String? = nil, channels: Int? = nil, conferenceSid: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, duration: String? = nil, encryptionDetails: [String: AnyJSON]? = nil, errorCode: Int? = nil, price: String? = nil, priceUnit: String? = nil, sid: String? = nil, source: Source? = nil, startTime: String? = nil, status: Status? = nil, subresourceUris: [String: AnyJSON]? = nil, uri: URL? = nil) {
        self.accountSid = accountSid
        self.apiVersion = apiVersion
        self.callSid = callSid
        self.channels = channels
        self.conferenceSid = conferenceSid
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.duration = duration
        self.encryptionDetails = encryptionDetails
        self.errorCode = errorCode
        self.price = price
        self.priceUnit = priceUnit
        self.sid = sid
        self.source = source
        self.startTime = startTime
        self.status = status
        self.subresourceUris = subresourceUris
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case apiVersion = "api_version"
        case callSid = "call_sid"
        case channels
        case conferenceSid = "conference_sid"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case duration
        case encryptionDetails = "encryption_details"
        case errorCode = "error_code"
        case price
        case priceUnit = "price_unit"
        case sid
        case source
        case startTime = "start_time"
        case status
        case subresourceUris = "subresource_uris"
        case uri
    }
}

public struct APIV2010AccountRecordingRecordingAddOnResult: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// The SID of the Add-on configuration
    public var addOnConfigurationSid: String?
    /// The SID of the Add-on to which the result belongs
    public var addOnSid: String?
    /// The date and time in GMT that the result was completed
    public var dateCompleted: String?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// The SID of the recording to which the AddOnResult resource belongs
    public var referenceSid: String?
    /// The unique string that identifies the resource
    public var sid: String?
    /// The status of the result
    public var status: Status?
    /// A list of related resources identified by their relative URIs
    public var subresourceUris: [String: AnyJSON]?

    /// The status of the result
    public enum Status: String, Codable, CaseIterable {
        case canceled
        case completed
        case deleted
        case failed
        case inProgress = "in-progress"
        case `init`
        case processing
        case queued
    }

    public init(accountSid: String? = nil, addOnConfigurationSid: String? = nil, addOnSid: String? = nil, dateCompleted: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, referenceSid: String? = nil, sid: String? = nil, status: Status? = nil, subresourceUris: [String: AnyJSON]? = nil) {
        self.accountSid = accountSid
        self.addOnConfigurationSid = addOnConfigurationSid
        self.addOnSid = addOnSid
        self.dateCompleted = dateCompleted
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.referenceSid = referenceSid
        self.sid = sid
        self.status = status
        self.subresourceUris = subresourceUris
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case addOnConfigurationSid = "add_on_configuration_sid"
        case addOnSid = "add_on_sid"
        case dateCompleted = "date_completed"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case referenceSid = "reference_sid"
        case sid
        case status
        case subresourceUris = "subresource_uris"
    }
}

public struct APIV2010AccountRecordingRecordingAddOnResultRecordingAddOnResultPayload: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// The SID of the Add-on configuration
    public var addOnConfigurationSid: String?
    /// The SID of the AddOnResult to which the payload belongs
    public var addOnResultSid: String?
    /// The SID of the Add-on to which the result belongs
    public var addOnSid: String?
    /// The MIME type of the payload
    public var contentType: String?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// The string that describes the payload
    public var label: String?
    /// The SID of the recording to which the AddOnResult resource that contains the payload belongs
    public var referenceSid: String?
    /// The unique string that identifies the resource
    public var sid: String?
    /// A list of related resources identified by their relative URIs
    public var subresourceUris: [String: AnyJSON]?

    public init(accountSid: String? = nil, addOnConfigurationSid: String? = nil, addOnResultSid: String? = nil, addOnSid: String? = nil, contentType: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, label: String? = nil, referenceSid: String? = nil, sid: String? = nil, subresourceUris: [String: AnyJSON]? = nil) {
        self.accountSid = accountSid
        self.addOnConfigurationSid = addOnConfigurationSid
        self.addOnResultSid = addOnResultSid
        self.addOnSid = addOnSid
        self.contentType = contentType
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.label = label
        self.referenceSid = referenceSid
        self.sid = sid
        self.subresourceUris = subresourceUris
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case addOnConfigurationSid = "add_on_configuration_sid"
        case addOnResultSid = "add_on_result_sid"
        case addOnSid = "add_on_sid"
        case contentType = "content_type"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case label
        case referenceSid = "reference_sid"
        case sid
        case subresourceUris = "subresource_uris"
    }
}

public struct APIV2010AccountRecordingRecordingTranscription: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// The API version used to create the transcription
    public var apiVersion: String?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// The duration of the transcribed audio in seconds.
    public var duration: String?
    /// The charge for the transcription
    public var price: Double?
    /// The currency in which price is measured
    public var priceUnit: String?
    /// The SID that identifies the transcription's recording
    public var recordingSid: String?
    /// The unique string that identifies the resource
    public var sid: String?
    /// The status of the transcription
    public var status: Status?
    /// The text content of the transcription.
    public var transcriptionText: String?
    /// The transcription type
    public var type: String?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?

    /// The status of the transcription
    public enum Status: String, Codable, CaseIterable {
        case inProgress = "in-progress"
        case completed
        case failed
    }

    public init(accountSid: String? = nil, apiVersion: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, duration: String? = nil, price: Double? = nil, priceUnit: String? = nil, recordingSid: String? = nil, sid: String? = nil, status: Status? = nil, transcriptionText: String? = nil, type: String? = nil, uri: URL? = nil) {
        self.accountSid = accountSid
        self.apiVersion = apiVersion
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.duration = duration
        self.price = price
        self.priceUnit = priceUnit
        self.recordingSid = recordingSid
        self.sid = sid
        self.status = status
        self.transcriptionText = transcriptionText
        self.type = type
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case apiVersion = "api_version"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case duration
        case price
        case priceUnit = "price_unit"
        case recordingSid = "recording_sid"
        case sid
        case status
        case transcriptionText = "transcription_text"
        case type
        case uri
    }
}

public struct APIV2010AccountShortCode: Codable {
    /// The SID of the Account that created this resource
    public var accountSid: String?
    /// The API version used to start a new TwiML session
    public var apiVersion: String?
    /// The RFC 2822 date and time in GMT that this resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that this resource was last updated
    public var dateUpdated: String?
    /// A string that you assigned to describe this resource
    public var friendlyName: String?
    /// The short code. e.g., 894546.
    public var shortCode: String?
    /// The unique string that identifies this resource
    public var sid: String?
    /// HTTP method we use to call the sms_fallback_url
    public var smsFallbackMethod: SmsFallbackMethod?
    /// URL Twilio will request if an error occurs in executing TwiML
    public var smsFallbackURL: URL?
    /// HTTP method to use when requesting the sms url
    public var smsMethod: SmsMethod?
    /// URL we call when receiving an incoming SMS message to this short code
    public var smsURL: URL?
    /// The URI of this resource, relative to `https://api.twilio.com`
    public var uri: URL?

    /// HTTP method we use to call the sms_fallback_url
    public enum SmsFallbackMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// HTTP method to use when requesting the sms url
    public enum SmsMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    public init(accountSid: String? = nil, apiVersion: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, friendlyName: String? = nil, shortCode: String? = nil, sid: String? = nil, smsFallbackMethod: SmsFallbackMethod? = nil, smsFallbackURL: URL? = nil, smsMethod: SmsMethod? = nil, smsURL: URL? = nil, uri: URL? = nil) {
        self.accountSid = accountSid
        self.apiVersion = apiVersion
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.friendlyName = friendlyName
        self.shortCode = shortCode
        self.sid = sid
        self.smsFallbackMethod = smsFallbackMethod
        self.smsFallbackURL = smsFallbackURL
        self.smsMethod = smsMethod
        self.smsURL = smsURL
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case apiVersion = "api_version"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case friendlyName = "friendly_name"
        case shortCode = "short_code"
        case sid
        case smsFallbackMethod = "sms_fallback_method"
        case smsFallbackURL = "sms_fallback_url"
        case smsMethod = "sms_method"
        case smsURL = "sms_url"
        case uri
    }
}

public struct APIV2010AccountSigningKey: Codable {
    public var dateCreated: String?
    public var dateUpdated: String?
    public var friendlyName: String?
    public var sid: String?

    public init(dateCreated: String? = nil, dateUpdated: String? = nil, friendlyName: String? = nil, sid: String? = nil) {
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.friendlyName = friendlyName
        self.sid = sid
    }

    private enum CodingKeys: String, CodingKey {
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case friendlyName = "friendly_name"
        case sid
    }
}

public struct APIV2010AccountSipSipCredentialList: Codable {
    /// The unique sid that identifies this account
    public var accountSid: String?
    /// The date this resource was created
    public var dateCreated: String?
    /// The date this resource was last updated
    public var dateUpdated: String?
    /// Human readable descriptive text
    public var friendlyName: String?
    /// A string that uniquely identifies this credential
    public var sid: String?
    /// The list of credentials associated with this credential list.
    public var subresourceUris: [String: AnyJSON]?
    /// The URI for this resource
    public var uri: URL?

    public init(accountSid: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, friendlyName: String? = nil, sid: String? = nil, subresourceUris: [String: AnyJSON]? = nil, uri: URL? = nil) {
        self.accountSid = accountSid
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.friendlyName = friendlyName
        self.sid = sid
        self.subresourceUris = subresourceUris
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case friendlyName = "friendly_name"
        case sid
        case subresourceUris = "subresource_uris"
        case uri
    }
}

public struct APIV2010AccountSipSipCredentialListSipCredential: Codable {
    /// The unique id of the Account that is responsible for this resource.
    public var accountSid: String?
    /// The unique id that identifies the credential list that includes this credential
    public var credentialListSid: String?
    /// The date that this resource was created, given as GMT in RFC 2822 format.
    public var dateCreated: String?
    /// The date that this resource was last updated, given as GMT in RFC 2822 format.
    public var dateUpdated: String?
    /// A 34 character string that uniquely identifies this resource.
    public var sid: String?
    /// The URI for this resource, relative to https://api.twilio.com
    public var uri: URL?
    /// The username for this credential.
    public var username: String?

    public init(accountSid: String? = nil, credentialListSid: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, sid: String? = nil, uri: URL? = nil, username: String? = nil) {
        self.accountSid = accountSid
        self.credentialListSid = credentialListSid
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.sid = sid
        self.uri = uri
        self.username = username
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case credentialListSid = "credential_list_sid"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case sid
        case uri
        case username
    }
}

public struct APIV2010AccountSipSipDomain: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// The API version used to process the call
    public var apiVersion: String?
    /// The types of authentication mapped to the domain
    public var authType: String?
    /// The SID of the BYOC Trunk resource.
    public var byocTrunkSid: String?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// The unique address on Twilio to route SIP traffic
    public var domainName: String?
    /// Whether an emergency caller sid is configured for the domain.
    public var emergencyCallerSid: String?
    /// Whether emergency calling is enabled for the domain.
    public var isEmergencyCallingEnabled: Bool?
    /// The string that you assigned to describe the resource
    public var friendlyName: String?
    /// Whether secure SIP is enabled for the domain
    public var isSecure: Bool?
    /// The unique string that identifies the resource
    public var sid: String?
    /// Whether SIP registration is allowed
    public var isSipRegistration: Bool?
    /// A list mapping resources associated with the SIP Domain resource
    public var subresourceUris: [String: AnyJSON]?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?
    /// The HTTP method used with voice_fallback_url
    public var voiceFallbackMethod: VoiceFallbackMethod?
    /// The URL we call when an error occurs while executing TwiML
    public var voiceFallbackURL: URL?
    /// The HTTP method to use with voice_url
    public var voiceMethod: VoiceMethod?
    /// The HTTP method we use to call voice_status_callback_url
    public var voiceStatusCallbackMethod: VoiceStatusCallbackMethod?
    /// The URL that we call with status updates
    public var voiceStatusCallbackURL: URL?
    /// The URL we call when receiving a call
    public var voiceURL: URL?

    /// The HTTP method used with voice_fallback_url
    public enum VoiceFallbackMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method to use with voice_url
    public enum VoiceMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The HTTP method we use to call voice_status_callback_url
    public enum VoiceStatusCallbackMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    public init(accountSid: String? = nil, apiVersion: String? = nil, authType: String? = nil, byocTrunkSid: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, domainName: String? = nil, emergencyCallerSid: String? = nil, isEmergencyCallingEnabled: Bool? = nil, friendlyName: String? = nil, isSecure: Bool? = nil, sid: String? = nil, isSipRegistration: Bool? = nil, subresourceUris: [String: AnyJSON]? = nil, uri: URL? = nil, voiceFallbackMethod: VoiceFallbackMethod? = nil, voiceFallbackURL: URL? = nil, voiceMethod: VoiceMethod? = nil, voiceStatusCallbackMethod: VoiceStatusCallbackMethod? = nil, voiceStatusCallbackURL: URL? = nil, voiceURL: URL? = nil) {
        self.accountSid = accountSid
        self.apiVersion = apiVersion
        self.authType = authType
        self.byocTrunkSid = byocTrunkSid
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.domainName = domainName
        self.emergencyCallerSid = emergencyCallerSid
        self.isEmergencyCallingEnabled = isEmergencyCallingEnabled
        self.friendlyName = friendlyName
        self.isSecure = isSecure
        self.sid = sid
        self.isSipRegistration = isSipRegistration
        self.subresourceUris = subresourceUris
        self.uri = uri
        self.voiceFallbackMethod = voiceFallbackMethod
        self.voiceFallbackURL = voiceFallbackURL
        self.voiceMethod = voiceMethod
        self.voiceStatusCallbackMethod = voiceStatusCallbackMethod
        self.voiceStatusCallbackURL = voiceStatusCallbackURL
        self.voiceURL = voiceURL
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case apiVersion = "api_version"
        case authType = "auth_type"
        case byocTrunkSid = "byoc_trunk_sid"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case domainName = "domain_name"
        case emergencyCallerSid = "emergency_caller_sid"
        case isEmergencyCallingEnabled = "emergency_calling_enabled"
        case friendlyName = "friendly_name"
        case isSecure = "secure"
        case sid
        case isSipRegistration = "sip_registration"
        case subresourceUris = "subresource_uris"
        case uri
        case voiceFallbackMethod = "voice_fallback_method"
        case voiceFallbackURL = "voice_fallback_url"
        case voiceMethod = "voice_method"
        case voiceStatusCallbackMethod = "voice_status_callback_method"
        case voiceStatusCallbackURL = "voice_status_callback_url"
        case voiceURL = "voice_url"
    }
}

public struct APIV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// The string that you assigned to describe the resource
    public var friendlyName: String?
    /// The unique string that identifies the resource
    public var sid: String?

    public init(accountSid: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, friendlyName: String? = nil, sid: String? = nil) {
        self.accountSid = accountSid
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.friendlyName = friendlyName
        self.sid = sid
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case friendlyName = "friendly_name"
        case sid
    }
}

public struct APIV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// The string that you assigned to describe the resource
    public var friendlyName: String?
    /// The unique string that identifies the resource
    public var sid: String?

    public init(accountSid: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, friendlyName: String? = nil, sid: String? = nil) {
        self.accountSid = accountSid
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.friendlyName = friendlyName
        self.sid = sid
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case friendlyName = "friendly_name"
        case sid
    }
}

public struct APIV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// The string that you assigned to describe the resource
    public var friendlyName: String?
    /// The unique string that identifies the resource
    public var sid: String?

    public init(accountSid: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, friendlyName: String? = nil, sid: String? = nil) {
        self.accountSid = accountSid
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.friendlyName = friendlyName
        self.sid = sid
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case friendlyName = "friendly_name"
        case sid
    }
}

public struct APIV2010AccountSipSipDomainSipCredentialListMapping: Codable {
    /// The unique id of the Account that is responsible for this resource.
    public var accountSid: String?
    /// The date that this resource was created, given as GMT in RFC 2822 format.
    public var dateCreated: String?
    /// The date that this resource was last updated, given as GMT in RFC 2822 format.
    public var dateUpdated: String?
    /// The unique string that identifies the SipDomain resource.
    public var domainSid: String?
    /// A human readable descriptive text for this resource, up to 64 characters long.
    public var friendlyName: String?
    /// A 34 character string that uniquely identifies this resource.
    public var sid: String?
    /// The URI for this resource, relative to https://api.twilio.com
    public var uri: URL?

    public init(accountSid: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, domainSid: String? = nil, friendlyName: String? = nil, sid: String? = nil, uri: URL? = nil) {
        self.accountSid = accountSid
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.domainSid = domainSid
        self.friendlyName = friendlyName
        self.sid = sid
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case domainSid = "domain_sid"
        case friendlyName = "friendly_name"
        case sid
        case uri
    }
}

public struct APIV2010AccountSipSipDomainSipIpAccessControlListMapping: Codable {
    /// The unique id of the Account that is responsible for this resource.
    public var accountSid: String?
    /// The date that this resource was created, given as GMT in RFC 2822 format.
    public var dateCreated: String?
    /// The date that this resource was last updated, given as GMT in RFC 2822 format.
    public var dateUpdated: String?
    /// The unique string that identifies the SipDomain resource.
    public var domainSid: String?
    /// A human readable descriptive text for this resource, up to 64 characters long.
    public var friendlyName: String?
    /// A 34 character string that uniquely identifies this resource.
    public var sid: String?
    /// The URI for this resource, relative to https://api.twilio.com
    public var uri: URL?

    public init(accountSid: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, domainSid: String? = nil, friendlyName: String? = nil, sid: String? = nil, uri: URL? = nil) {
        self.accountSid = accountSid
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.domainSid = domainSid
        self.friendlyName = friendlyName
        self.sid = sid
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case domainSid = "domain_sid"
        case friendlyName = "friendly_name"
        case sid
        case uri
    }
}

public struct APIV2010AccountSipSipIpAccessControlList: Codable {
    /// The unique sid that identifies this account
    public var accountSid: String?
    /// The date this resource was created
    public var dateCreated: String?
    /// The date this resource was last updated
    public var dateUpdated: String?
    /// A human readable description of this resource
    public var friendlyName: String?
    /// A string that uniquely identifies this resource
    public var sid: String?
    /// The IP addresses associated with this resource.
    public var subresourceUris: [String: AnyJSON]?
    /// The URI for this resource
    public var uri: URL?

    public init(accountSid: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, friendlyName: String? = nil, sid: String? = nil, subresourceUris: [String: AnyJSON]? = nil, uri: URL? = nil) {
        self.accountSid = accountSid
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.friendlyName = friendlyName
        self.sid = sid
        self.subresourceUris = subresourceUris
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case friendlyName = "friendly_name"
        case sid
        case subresourceUris = "subresource_uris"
        case uri
    }
}

public struct APIV2010AccountSipSipIpAccessControlListSipIpAddress: Codable {
    /// The unique id of the Account that is responsible for this resource.
    public var accountSid: String?
    /// An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.
    public var cidrPrefixLength: Int?
    /// The date that this resource was created, given as GMT in RFC 2822 format.
    public var dateCreated: String?
    /// The date that this resource was last updated, given as GMT in RFC 2822 format.
    public var dateUpdated: String?
    /// A human readable descriptive text for this resource, up to 64 characters long.
    public var friendlyName: String?
    /// The unique id of the IpAccessControlList resource that includes this resource.
    public var ipAccessControlListSid: String?
    /// An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.
    public var ipAddress: String?
    /// A 34 character string that uniquely identifies this resource.
    public var sid: String?
    /// The URI for this resource, relative to https://api.twilio.com
    public var uri: URL?

    public init(accountSid: String? = nil, cidrPrefixLength: Int? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, friendlyName: String? = nil, ipAccessControlListSid: String? = nil, ipAddress: String? = nil, sid: String? = nil, uri: URL? = nil) {
        self.accountSid = accountSid
        self.cidrPrefixLength = cidrPrefixLength
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.friendlyName = friendlyName
        self.ipAccessControlListSid = ipAccessControlListSid
        self.ipAddress = ipAddress
        self.sid = sid
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case cidrPrefixLength = "cidr_prefix_length"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case friendlyName = "friendly_name"
        case ipAccessControlListSid = "ip_access_control_list_sid"
        case ipAddress = "ip_address"
        case sid
        case uri
    }
}

public struct APIV2010AccountToken: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// An array representing the ephemeral credentials
    public var iceServers: [IceServer]?
    /// The temporary password used for authenticating
    public var password: String?
    /// The duration in seconds the credentials are valid
    public var ttl: String?
    /// The temporary username that uniquely identifies a Token
    public var username: String?

    public struct IceServer: Codable {
        public var credential: String?
        public var url: String?
        public var urls: String?
        public var username: String?

        public init(credential: String? = nil, url: String? = nil, urls: String? = nil, username: String? = nil) {
            self.credential = credential
            self.url = url
            self.urls = urls
            self.username = username
        }
    }

    public init(accountSid: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, iceServers: [IceServer]? = nil, password: String? = nil, ttl: String? = nil, username: String? = nil) {
        self.accountSid = accountSid
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.iceServers = iceServers
        self.password = password
        self.ttl = ttl
        self.username = username
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case iceServers = "ice_servers"
        case password
        case ttl
        case username
    }
}

public struct APIV2010AccountTranscription: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// The API version used to create the transcription
    public var apiVersion: String?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// The duration of the transcribed audio in seconds.
    public var duration: String?
    /// The charge for the transcription
    public var price: Double?
    /// The currency in which price is measured
    public var priceUnit: String?
    /// The SID that identifies the transcription's recording
    public var recordingSid: String?
    /// The unique string that identifies the resource
    public var sid: String?
    /// The status of the transcription
    public var status: Status?
    /// The text content of the transcription.
    public var transcriptionText: String?
    /// The transcription type
    public var type: String?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?

    /// The status of the transcription
    public enum Status: String, Codable, CaseIterable {
        case inProgress = "in-progress"
        case completed
        case failed
    }

    public init(accountSid: String? = nil, apiVersion: String? = nil, dateCreated: String? = nil, dateUpdated: String? = nil, duration: String? = nil, price: Double? = nil, priceUnit: String? = nil, recordingSid: String? = nil, sid: String? = nil, status: Status? = nil, transcriptionText: String? = nil, type: String? = nil, uri: URL? = nil) {
        self.accountSid = accountSid
        self.apiVersion = apiVersion
        self.dateCreated = dateCreated
        self.dateUpdated = dateUpdated
        self.duration = duration
        self.price = price
        self.priceUnit = priceUnit
        self.recordingSid = recordingSid
        self.sid = sid
        self.status = status
        self.transcriptionText = transcriptionText
        self.type = type
        self.uri = uri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case apiVersion = "api_version"
        case dateCreated = "date_created"
        case dateUpdated = "date_updated"
        case duration
        case price
        case priceUnit = "price_unit"
        case recordingSid = "recording_sid"
        case sid
        case status
        case transcriptionText = "transcription_text"
        case type
        case uri
    }
}

public struct APIV2010AccountUsageUsageRecord: Codable {
    /// The SID of the Account accrued the usage
    public var accountSid: String?
    /// The API version used to create the resource
    public var apiVersion: String?
    /// Usage records up to date as of this timestamp
    public var asOf: String?
    /// The category of usage
    public var category: Category?
    /// The number of usage events
    public var count: String?
    /// The units in which count is measured
    public var countUnit: String?
    /// A plain-language description of the usage category
    public var description: String?
    /// The last date for which usage is included in the UsageRecord
    public var endDate: NaiveDate?
    /// The total price of the usage
    public var price: Double?
    /// The currency in which `price` is measured
    public var priceUnit: String?
    /// The first date for which usage is included in this UsageRecord
    public var startDate: NaiveDate?
    /// A list of related resources identified by their relative URIs
    public var subresourceUris: [String: AnyJSON]?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?
    /// The amount of usage
    public var usage: String?
    /// The units in which usage is measured
    public var usageUnit: String?

    /// The category of usage
    public enum Category: String, Codable, CaseIterable {
        case agentConference = "agent-conference"
        case answeringMachineDetection = "answering-machine-detection"
        case authyAuthentications = "authy-authentications"
        case authyCallsOutbound = "authy-calls-outbound"
        case authyMonthlyFees = "authy-monthly-fees"
        case authyPhoneIntelligence = "authy-phone-intelligence"
        case authyPhoneVerifications = "authy-phone-verifications"
        case authySmsOutbound = "authy-sms-outbound"
        case callProgessEvents = "call-progess-events"
        case calleridlookups
        case calls
        case callsClient = "calls-client"
        case callsGlobalconference = "calls-globalconference"
        case callsInbound = "calls-inbound"
        case callsInboundLocal = "calls-inbound-local"
        case callsInboundMobile = "calls-inbound-mobile"
        case callsInboundTollfree = "calls-inbound-tollfree"
        case callsOutbound = "calls-outbound"
        case callsPayVerbTransactions = "calls-pay-verb-transactions"
        case callsRecordings = "calls-recordings"
        case callsSip = "calls-sip"
        case callsSipInbound = "calls-sip-inbound"
        case callsSipOutbound = "calls-sip-outbound"
        case callsTransfers = "calls-transfers"
        case carrierLookups = "carrier-lookups"
        case conversations
        case conversationsAPIRequests = "conversations-api-requests"
        case conversationsConversationEvents = "conversations-conversation-events"
        case conversationsEndpointConnectivity = "conversations-endpoint-connectivity"
        case conversationsEvents = "conversations-events"
        case conversationsParticipantEvents = "conversations-participant-events"
        case conversationsParticipants = "conversations-participants"
        case cps
        case flexUsage = "flex-usage"
        case fraudLookups = "fraud-lookups"
        case groupRooms = "group-rooms"
        case groupRoomsDataTrack = "group-rooms-data-track"
        case groupRoomsEncryptedMediaRecorded = "group-rooms-encrypted-media-recorded"
        case groupRoomsMediaDownloaded = "group-rooms-media-downloaded"
        case groupRoomsMediaRecorded = "group-rooms-media-recorded"
        case groupRoomsMediaRouted = "group-rooms-media-routed"
        case groupRoomsMediaStored = "group-rooms-media-stored"
        case groupRoomsParticipantMinutes = "group-rooms-participant-minutes"
        case groupRoomsRecordedMinutes = "group-rooms-recorded-minutes"
        case impV1Usage = "imp-v1-usage"
        case lookups
        case marketplace
        case marketplaceAlgorithmiaNamedEntityRecognition = "marketplace-algorithmia-named-entity-recognition"
        case marketplaceCadenceTranscription = "marketplace-cadence-transcription"
        case marketplaceCadenceTranslation = "marketplace-cadence-translation"
        case marketplaceCapioSpeechToText = "marketplace-capio-speech-to-text"
        case marketplaceConvrizaAbaba = "marketplace-convriza-ababa"
        case marketplaceDeepgramPhraseDetector = "marketplace-deepgram-phrase-detector"
        case marketplaceDigitalSegmentBusinessInfo = "marketplace-digital-segment-business-info"
        case marketplaceFacebookOfflineConversions = "marketplace-facebook-offline-conversions"
        case marketplaceGoogleSpeechToText = "marketplace-google-speech-to-text"
        case marketplaceIbmWatsonMessageInsights = "marketplace-ibm-watson-message-insights"
        case marketplaceIbmWatsonMessageSentiment = "marketplace-ibm-watson-message-sentiment"
        case marketplaceIbmWatsonRecordingAnalysis = "marketplace-ibm-watson-recording-analysis"
        case marketplaceIbmWatsonToneAnalyzer = "marketplace-ibm-watson-tone-analyzer"
        case marketplaceIcehookSystemsScout = "marketplace-icehook-systems-scout"
        case marketplaceInfogroupDataaxleBizinfo = "marketplace-infogroup-dataaxle-bizinfo"
        case marketplaceKeenIoContactCenterAnalytics = "marketplace-keen-io-contact-center-analytics"
        case marketplaceMarchexCleancall = "marketplace-marchex-cleancall"
        case marketplaceMarchexSentimentAnalysisForSms = "marketplace-marchex-sentiment-analysis-for-sms"
        case marketplaceMarketplaceNextcallerSocialID = "marketplace-marketplace-nextcaller-social-id"
        case marketplaceMobileCommonsOptOutClassifier = "marketplace-mobile-commons-opt-out-classifier"
        case marketplaceNexiwaveVoicemailToText = "marketplace-nexiwave-voicemail-to-text"
        case marketplaceNextcallerAdvancedCallerIdentification = "marketplace-nextcaller-advanced-caller-identification"
        case marketplaceNomoroboSpamScore = "marketplace-nomorobo-spam-score"
        case marketplacePayfoneTcpaCompliance = "marketplace-payfone-tcpa-compliance"
        case marketplaceRemeetingAutomaticSpeechRecognition = "marketplace-remeeting-automatic-speech-recognition"
        case marketplaceTcpaDefenseSolutionsBlacklistFeed = "marketplace-tcpa-defense-solutions-blacklist-feed"
        case marketplaceTeloOpencnam = "marketplace-telo-opencnam"
        case marketplaceTruecnamTrueSpam = "marketplace-truecnam-true-spam"
        case marketplaceTwilioCallerNameLookupUs = "marketplace-twilio-caller-name-lookup-us"
        case marketplaceTwilioCarrierInformationLookup = "marketplace-twilio-carrier-information-lookup"
        case marketplaceVoicebasePci = "marketplace-voicebase-pci"
        case marketplaceVoicebaseTranscription = "marketplace-voicebase-transcription"
        case marketplaceVoicebaseTranscriptionCustomVocabulary = "marketplace-voicebase-transcription-custom-vocabulary"
        case marketplaceWhitepagesProCallerIdentification = "marketplace-whitepages-pro-caller-identification"
        case marketplaceWhitepagesProPhoneIntelligence = "marketplace-whitepages-pro-phone-intelligence"
        case marketplaceWhitepagesProPhoneReputation = "marketplace-whitepages-pro-phone-reputation"
        case marketplaceWolfarmSpokenResults = "marketplace-wolfarm-spoken-results"
        case marketplaceWolframShortAnswer = "marketplace-wolfram-short-answer"
        case marketplaceYticaContactCenterReportingAnalytics = "marketplace-ytica-contact-center-reporting-analytics"
        case mediastorage
        case mms
        case mmsInbound = "mms-inbound"
        case mmsInboundLongcode = "mms-inbound-longcode"
        case mmsInboundShortcode = "mms-inbound-shortcode"
        case mmsMessagesCarrierfees = "mms-messages-carrierfees"
        case mmsOutbound = "mms-outbound"
        case mmsOutboundLongcode = "mms-outbound-longcode"
        case mmsOutboundShortcode = "mms-outbound-shortcode"
        case monitorReads = "monitor-reads"
        case monitorStorage = "monitor-storage"
        case monitorWrites = "monitor-writes"
        case notify
        case notifyActionsAttempts = "notify-actions-attempts"
        case notifyChannels = "notify-channels"
        case numberFormatLookups = "number-format-lookups"
        case pchat
        case pchatUsers = "pchat-users"
        case peerToPeerRoomsParticipantMinutes = "peer-to-peer-rooms-participant-minutes"
        case pfax
        case pfaxMinutes = "pfax-minutes"
        case pfaxMinutesInbound = "pfax-minutes-inbound"
        case pfaxMinutesOutbound = "pfax-minutes-outbound"
        case pfaxPages = "pfax-pages"
        case phonenumbers
        case phonenumbersCps = "phonenumbers-cps"
        case phonenumbersEmergency = "phonenumbers-emergency"
        case phonenumbersLocal = "phonenumbers-local"
        case phonenumbersMobile = "phonenumbers-mobile"
        case phonenumbersSetups = "phonenumbers-setups"
        case phonenumbersTollfree = "phonenumbers-tollfree"
        case premiumsupport
        case proxy
        case proxyActiveSessions = "proxy-active-sessions"
        case pstnconnectivity
        case pv
        case pvCompositionMediaDownloaded = "pv-composition-media-downloaded"
        case pvCompositionMediaEncrypted = "pv-composition-media-encrypted"
        case pvCompositionMediaStored = "pv-composition-media-stored"
        case pvCompositionMinutes = "pv-composition-minutes"
        case pvRecordingCompositions = "pv-recording-compositions"
        case pvRoomParticipants = "pv-room-participants"
        case pvRoomParticipantsAu1 = "pv-room-participants-au1"
        case pvRoomParticipantsBr1 = "pv-room-participants-br1"
        case pvRoomParticipantsIe1 = "pv-room-participants-ie1"
        case pvRoomParticipantsJp1 = "pv-room-participants-jp1"
        case pvRoomParticipantsSg1 = "pv-room-participants-sg1"
        case pvRoomParticipantsUs1 = "pv-room-participants-us1"
        case pvRoomParticipantsUs2 = "pv-room-participants-us2"
        case pvRooms = "pv-rooms"
        case pvSipEndpointRegistrations = "pv-sip-endpoint-registrations"
        case recordings
        case recordingstorage
        case roomsGroupBandwidth = "rooms-group-bandwidth"
        case roomsGroupMinutes = "rooms-group-minutes"
        case roomsPeerToPeerMinutes = "rooms-peer-to-peer-minutes"
        case shortcodes
        case shortcodesCustomerowned = "shortcodes-customerowned"
        case shortcodesMmsEnablement = "shortcodes-mms-enablement"
        case shortcodesMps = "shortcodes-mps"
        case shortcodesRandom = "shortcodes-random"
        case shortcodesUk = "shortcodes-uk"
        case shortcodesVanity = "shortcodes-vanity"
        case smallGroupRooms = "small-group-rooms"
        case smallGroupRoomsDataTrack = "small-group-rooms-data-track"
        case smallGroupRoomsParticipantMinutes = "small-group-rooms-participant-minutes"
        case sms
        case smsInbound = "sms-inbound"
        case smsInboundLongcode = "sms-inbound-longcode"
        case smsInboundShortcode = "sms-inbound-shortcode"
        case smsMessagesCarrierfees = "sms-messages-carrierfees"
        case smsMessagesFeatures = "sms-messages-features"
        case smsMessagesFeaturesSenderid = "sms-messages-features-senderid"
        case smsOutbound = "sms-outbound"
        case smsOutboundContentInspection = "sms-outbound-content-inspection"
        case smsOutboundLongcode = "sms-outbound-longcode"
        case smsOutboundShortcode = "sms-outbound-shortcode"
        case speechRecognition = "speech-recognition"
        case studioEngagements = "studio-engagements"
        case sync
        case syncActions = "sync-actions"
        case syncEndpointHours = "sync-endpoint-hours"
        case syncEndpointHoursAboveDailyCap = "sync-endpoint-hours-above-daily-cap"
        case taskrouterTasks = "taskrouter-tasks"
        case totalprice
        case transcriptions
        case trunkingCps = "trunking-cps"
        case trunkingEmergencyCalls = "trunking-emergency-calls"
        case trunkingOrigination = "trunking-origination"
        case trunkingOriginationLocal = "trunking-origination-local"
        case trunkingOriginationMobile = "trunking-origination-mobile"
        case trunkingOriginationTollfree = "trunking-origination-tollfree"
        case trunkingRecordings = "trunking-recordings"
        case trunkingSecure = "trunking-secure"
        case trunkingTermination = "trunking-termination"
        case turnmegabytes
        case turnmegabytesAustralia = "turnmegabytes-australia"
        case turnmegabytesBrasil = "turnmegabytes-brasil"
        case turnmegabytesGermany = "turnmegabytes-germany"
        case turnmegabytesIndia = "turnmegabytes-india"
        case turnmegabytesIreland = "turnmegabytes-ireland"
        case turnmegabytesJapan = "turnmegabytes-japan"
        case turnmegabytesSingapore = "turnmegabytes-singapore"
        case turnmegabytesUseast = "turnmegabytes-useast"
        case turnmegabytesUswest = "turnmegabytes-uswest"
        case twilioInterconnect = "twilio-interconnect"
        case verifyPush = "verify-push"
        case videoRecordings = "video-recordings"
        case voiceInsights = "voice-insights"
        case voiceInsightsClientInsightsOnDemandMinute = "voice-insights-client-insights-on-demand-minute"
        case voiceInsightsPtsnInsightsOnDemandMinute = "voice-insights-ptsn-insights-on-demand-minute"
        case voiceInsightsSipInterfaceInsightsOnDemandMinute = "voice-insights-sip-interface-insights-on-demand-minute"
        case voiceInsightsSipTrunkingInsightsOnDemandMinute = "voice-insights-sip-trunking-insights-on-demand-minute"
        case wireless
        case wirelessOrders = "wireless-orders"
        case wirelessOrdersArtwork = "wireless-orders-artwork"
        case wirelessOrdersBulk = "wireless-orders-bulk"
        case wirelessOrdersEsim = "wireless-orders-esim"
        case wirelessOrdersStarter = "wireless-orders-starter"
        case wirelessUsage = "wireless-usage"
        case wirelessUsageCommands = "wireless-usage-commands"
        case wirelessUsageCommandsAfrica = "wireless-usage-commands-africa"
        case wirelessUsageCommandsAsia = "wireless-usage-commands-asia"
        case wirelessUsageCommandsCentralandsouthamerica = "wireless-usage-commands-centralandsouthamerica"
        case wirelessUsageCommandsEurope = "wireless-usage-commands-europe"
        case wirelessUsageCommandsHome = "wireless-usage-commands-home"
        case wirelessUsageCommandsNorthamerica = "wireless-usage-commands-northamerica"
        case wirelessUsageCommandsOceania = "wireless-usage-commands-oceania"
        case wirelessUsageCommandsRoaming = "wireless-usage-commands-roaming"
        case wirelessUsageData = "wireless-usage-data"
        case wirelessUsageDataAfrica = "wireless-usage-data-africa"
        case wirelessUsageDataAsia = "wireless-usage-data-asia"
        case wirelessUsageDataCentralandsouthamerica = "wireless-usage-data-centralandsouthamerica"
        case wirelessUsageDataCustomAdditionalmb = "wireless-usage-data-custom-additionalmb"
        case wirelessUsageDataCustomFirst5mb = "wireless-usage-data-custom-first5mb"
        case wirelessUsageDataDomesticRoaming = "wireless-usage-data-domestic-roaming"
        case wirelessUsageDataEurope = "wireless-usage-data-europe"
        case wirelessUsageDataIndividualAdditionalgb = "wireless-usage-data-individual-additionalgb"
        case wirelessUsageDataIndividualFirstgb = "wireless-usage-data-individual-firstgb"
        case wirelessUsageDataInternationalRoamingCanada = "wireless-usage-data-international-roaming-canada"
        case wirelessUsageDataInternationalRoamingIndia = "wireless-usage-data-international-roaming-india"
        case wirelessUsageDataInternationalRoamingMexico = "wireless-usage-data-international-roaming-mexico"
        case wirelessUsageDataNorthamerica = "wireless-usage-data-northamerica"
        case wirelessUsageDataOceania = "wireless-usage-data-oceania"
        case wirelessUsageDataPooled = "wireless-usage-data-pooled"
        case wirelessUsageDataPooledDownlink = "wireless-usage-data-pooled-downlink"
        case wirelessUsageDataPooledUplink = "wireless-usage-data-pooled-uplink"
        case wirelessUsageMrc = "wireless-usage-mrc"
        case wirelessUsageMrcCustom = "wireless-usage-mrc-custom"
        case wirelessUsageMrcIndividual = "wireless-usage-mrc-individual"
        case wirelessUsageMrcPooled = "wireless-usage-mrc-pooled"
        case wirelessUsageMrcSuspended = "wireless-usage-mrc-suspended"
        case wirelessUsageSms = "wireless-usage-sms"
        case wirelessUsageVoice = "wireless-usage-voice"
    }

    public init(accountSid: String? = nil, apiVersion: String? = nil, asOf: String? = nil, category: Category? = nil, count: String? = nil, countUnit: String? = nil, description: String? = nil, endDate: NaiveDate? = nil, price: Double? = nil, priceUnit: String? = nil, startDate: NaiveDate? = nil, subresourceUris: [String: AnyJSON]? = nil, uri: URL? = nil, usage: String? = nil, usageUnit: String? = nil) {
        self.accountSid = accountSid
        self.apiVersion = apiVersion
        self.asOf = asOf
        self.category = category
        self.count = count
        self.countUnit = countUnit
        self.description = description
        self.endDate = endDate
        self.price = price
        self.priceUnit = priceUnit
        self.startDate = startDate
        self.subresourceUris = subresourceUris
        self.uri = uri
        self.usage = usage
        self.usageUnit = usageUnit
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case apiVersion = "api_version"
        case asOf = "as_of"
        case category
        case count
        case countUnit = "count_unit"
        case description
        case endDate = "end_date"
        case price
        case priceUnit = "price_unit"
        case startDate = "start_date"
        case subresourceUris = "subresource_uris"
        case uri
        case usage
        case usageUnit = "usage_unit"
    }
}

public struct APIV2010AccountUsageUsageRecordUsageRecordAllTime: Codable {
    /// The SID of the Account accrued the usage
    public var accountSid: String?
    /// The API version used to create the resource
    public var apiVersion: String?
    /// Usage records up to date as of this timestamp
    public var asOf: String?
    /// The category of usage
    public var category: Category?
    /// The number of usage events
    public var count: String?
    /// The units in which count is measured
    public var countUnit: String?
    /// A plain-language description of the usage category
    public var description: String?
    /// The last date for which usage is included in the UsageRecord
    public var endDate: NaiveDate?
    /// The total price of the usage
    public var price: Double?
    /// The currency in which `price` is measured
    public var priceUnit: String?
    /// The first date for which usage is included in this UsageRecord
    public var startDate: NaiveDate?
    /// A list of related resources identified by their relative URIs
    public var subresourceUris: [String: AnyJSON]?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?
    /// The amount of usage
    public var usage: String?
    /// The units in which usage is measured
    public var usageUnit: String?

    /// The category of usage
    public enum Category: String, Codable, CaseIterable {
        case agentConference = "agent-conference"
        case answeringMachineDetection = "answering-machine-detection"
        case authyAuthentications = "authy-authentications"
        case authyCallsOutbound = "authy-calls-outbound"
        case authyMonthlyFees = "authy-monthly-fees"
        case authyPhoneIntelligence = "authy-phone-intelligence"
        case authyPhoneVerifications = "authy-phone-verifications"
        case authySmsOutbound = "authy-sms-outbound"
        case callProgessEvents = "call-progess-events"
        case calleridlookups
        case calls
        case callsClient = "calls-client"
        case callsGlobalconference = "calls-globalconference"
        case callsInbound = "calls-inbound"
        case callsInboundLocal = "calls-inbound-local"
        case callsInboundMobile = "calls-inbound-mobile"
        case callsInboundTollfree = "calls-inbound-tollfree"
        case callsOutbound = "calls-outbound"
        case callsPayVerbTransactions = "calls-pay-verb-transactions"
        case callsRecordings = "calls-recordings"
        case callsSip = "calls-sip"
        case callsSipInbound = "calls-sip-inbound"
        case callsSipOutbound = "calls-sip-outbound"
        case callsTransfers = "calls-transfers"
        case carrierLookups = "carrier-lookups"
        case conversations
        case conversationsAPIRequests = "conversations-api-requests"
        case conversationsConversationEvents = "conversations-conversation-events"
        case conversationsEndpointConnectivity = "conversations-endpoint-connectivity"
        case conversationsEvents = "conversations-events"
        case conversationsParticipantEvents = "conversations-participant-events"
        case conversationsParticipants = "conversations-participants"
        case cps
        case flexUsage = "flex-usage"
        case fraudLookups = "fraud-lookups"
        case groupRooms = "group-rooms"
        case groupRoomsDataTrack = "group-rooms-data-track"
        case groupRoomsEncryptedMediaRecorded = "group-rooms-encrypted-media-recorded"
        case groupRoomsMediaDownloaded = "group-rooms-media-downloaded"
        case groupRoomsMediaRecorded = "group-rooms-media-recorded"
        case groupRoomsMediaRouted = "group-rooms-media-routed"
        case groupRoomsMediaStored = "group-rooms-media-stored"
        case groupRoomsParticipantMinutes = "group-rooms-participant-minutes"
        case groupRoomsRecordedMinutes = "group-rooms-recorded-minutes"
        case impV1Usage = "imp-v1-usage"
        case lookups
        case marketplace
        case marketplaceAlgorithmiaNamedEntityRecognition = "marketplace-algorithmia-named-entity-recognition"
        case marketplaceCadenceTranscription = "marketplace-cadence-transcription"
        case marketplaceCadenceTranslation = "marketplace-cadence-translation"
        case marketplaceCapioSpeechToText = "marketplace-capio-speech-to-text"
        case marketplaceConvrizaAbaba = "marketplace-convriza-ababa"
        case marketplaceDeepgramPhraseDetector = "marketplace-deepgram-phrase-detector"
        case marketplaceDigitalSegmentBusinessInfo = "marketplace-digital-segment-business-info"
        case marketplaceFacebookOfflineConversions = "marketplace-facebook-offline-conversions"
        case marketplaceGoogleSpeechToText = "marketplace-google-speech-to-text"
        case marketplaceIbmWatsonMessageInsights = "marketplace-ibm-watson-message-insights"
        case marketplaceIbmWatsonMessageSentiment = "marketplace-ibm-watson-message-sentiment"
        case marketplaceIbmWatsonRecordingAnalysis = "marketplace-ibm-watson-recording-analysis"
        case marketplaceIbmWatsonToneAnalyzer = "marketplace-ibm-watson-tone-analyzer"
        case marketplaceIcehookSystemsScout = "marketplace-icehook-systems-scout"
        case marketplaceInfogroupDataaxleBizinfo = "marketplace-infogroup-dataaxle-bizinfo"
        case marketplaceKeenIoContactCenterAnalytics = "marketplace-keen-io-contact-center-analytics"
        case marketplaceMarchexCleancall = "marketplace-marchex-cleancall"
        case marketplaceMarchexSentimentAnalysisForSms = "marketplace-marchex-sentiment-analysis-for-sms"
        case marketplaceMarketplaceNextcallerSocialID = "marketplace-marketplace-nextcaller-social-id"
        case marketplaceMobileCommonsOptOutClassifier = "marketplace-mobile-commons-opt-out-classifier"
        case marketplaceNexiwaveVoicemailToText = "marketplace-nexiwave-voicemail-to-text"
        case marketplaceNextcallerAdvancedCallerIdentification = "marketplace-nextcaller-advanced-caller-identification"
        case marketplaceNomoroboSpamScore = "marketplace-nomorobo-spam-score"
        case marketplacePayfoneTcpaCompliance = "marketplace-payfone-tcpa-compliance"
        case marketplaceRemeetingAutomaticSpeechRecognition = "marketplace-remeeting-automatic-speech-recognition"
        case marketplaceTcpaDefenseSolutionsBlacklistFeed = "marketplace-tcpa-defense-solutions-blacklist-feed"
        case marketplaceTeloOpencnam = "marketplace-telo-opencnam"
        case marketplaceTruecnamTrueSpam = "marketplace-truecnam-true-spam"
        case marketplaceTwilioCallerNameLookupUs = "marketplace-twilio-caller-name-lookup-us"
        case marketplaceTwilioCarrierInformationLookup = "marketplace-twilio-carrier-information-lookup"
        case marketplaceVoicebasePci = "marketplace-voicebase-pci"
        case marketplaceVoicebaseTranscription = "marketplace-voicebase-transcription"
        case marketplaceVoicebaseTranscriptionCustomVocabulary = "marketplace-voicebase-transcription-custom-vocabulary"
        case marketplaceWhitepagesProCallerIdentification = "marketplace-whitepages-pro-caller-identification"
        case marketplaceWhitepagesProPhoneIntelligence = "marketplace-whitepages-pro-phone-intelligence"
        case marketplaceWhitepagesProPhoneReputation = "marketplace-whitepages-pro-phone-reputation"
        case marketplaceWolfarmSpokenResults = "marketplace-wolfarm-spoken-results"
        case marketplaceWolframShortAnswer = "marketplace-wolfram-short-answer"
        case marketplaceYticaContactCenterReportingAnalytics = "marketplace-ytica-contact-center-reporting-analytics"
        case mediastorage
        case mms
        case mmsInbound = "mms-inbound"
        case mmsInboundLongcode = "mms-inbound-longcode"
        case mmsInboundShortcode = "mms-inbound-shortcode"
        case mmsMessagesCarrierfees = "mms-messages-carrierfees"
        case mmsOutbound = "mms-outbound"
        case mmsOutboundLongcode = "mms-outbound-longcode"
        case mmsOutboundShortcode = "mms-outbound-shortcode"
        case monitorReads = "monitor-reads"
        case monitorStorage = "monitor-storage"
        case monitorWrites = "monitor-writes"
        case notify
        case notifyActionsAttempts = "notify-actions-attempts"
        case notifyChannels = "notify-channels"
        case numberFormatLookups = "number-format-lookups"
        case pchat
        case pchatUsers = "pchat-users"
        case peerToPeerRoomsParticipantMinutes = "peer-to-peer-rooms-participant-minutes"
        case pfax
        case pfaxMinutes = "pfax-minutes"
        case pfaxMinutesInbound = "pfax-minutes-inbound"
        case pfaxMinutesOutbound = "pfax-minutes-outbound"
        case pfaxPages = "pfax-pages"
        case phonenumbers
        case phonenumbersCps = "phonenumbers-cps"
        case phonenumbersEmergency = "phonenumbers-emergency"
        case phonenumbersLocal = "phonenumbers-local"
        case phonenumbersMobile = "phonenumbers-mobile"
        case phonenumbersSetups = "phonenumbers-setups"
        case phonenumbersTollfree = "phonenumbers-tollfree"
        case premiumsupport
        case proxy
        case proxyActiveSessions = "proxy-active-sessions"
        case pstnconnectivity
        case pv
        case pvCompositionMediaDownloaded = "pv-composition-media-downloaded"
        case pvCompositionMediaEncrypted = "pv-composition-media-encrypted"
        case pvCompositionMediaStored = "pv-composition-media-stored"
        case pvCompositionMinutes = "pv-composition-minutes"
        case pvRecordingCompositions = "pv-recording-compositions"
        case pvRoomParticipants = "pv-room-participants"
        case pvRoomParticipantsAu1 = "pv-room-participants-au1"
        case pvRoomParticipantsBr1 = "pv-room-participants-br1"
        case pvRoomParticipantsIe1 = "pv-room-participants-ie1"
        case pvRoomParticipantsJp1 = "pv-room-participants-jp1"
        case pvRoomParticipantsSg1 = "pv-room-participants-sg1"
        case pvRoomParticipantsUs1 = "pv-room-participants-us1"
        case pvRoomParticipantsUs2 = "pv-room-participants-us2"
        case pvRooms = "pv-rooms"
        case pvSipEndpointRegistrations = "pv-sip-endpoint-registrations"
        case recordings
        case recordingstorage
        case roomsGroupBandwidth = "rooms-group-bandwidth"
        case roomsGroupMinutes = "rooms-group-minutes"
        case roomsPeerToPeerMinutes = "rooms-peer-to-peer-minutes"
        case shortcodes
        case shortcodesCustomerowned = "shortcodes-customerowned"
        case shortcodesMmsEnablement = "shortcodes-mms-enablement"
        case shortcodesMps = "shortcodes-mps"
        case shortcodesRandom = "shortcodes-random"
        case shortcodesUk = "shortcodes-uk"
        case shortcodesVanity = "shortcodes-vanity"
        case smallGroupRooms = "small-group-rooms"
        case smallGroupRoomsDataTrack = "small-group-rooms-data-track"
        case smallGroupRoomsParticipantMinutes = "small-group-rooms-participant-minutes"
        case sms
        case smsInbound = "sms-inbound"
        case smsInboundLongcode = "sms-inbound-longcode"
        case smsInboundShortcode = "sms-inbound-shortcode"
        case smsMessagesCarrierfees = "sms-messages-carrierfees"
        case smsMessagesFeatures = "sms-messages-features"
        case smsMessagesFeaturesSenderid = "sms-messages-features-senderid"
        case smsOutbound = "sms-outbound"
        case smsOutboundContentInspection = "sms-outbound-content-inspection"
        case smsOutboundLongcode = "sms-outbound-longcode"
        case smsOutboundShortcode = "sms-outbound-shortcode"
        case speechRecognition = "speech-recognition"
        case studioEngagements = "studio-engagements"
        case sync
        case syncActions = "sync-actions"
        case syncEndpointHours = "sync-endpoint-hours"
        case syncEndpointHoursAboveDailyCap = "sync-endpoint-hours-above-daily-cap"
        case taskrouterTasks = "taskrouter-tasks"
        case totalprice
        case transcriptions
        case trunkingCps = "trunking-cps"
        case trunkingEmergencyCalls = "trunking-emergency-calls"
        case trunkingOrigination = "trunking-origination"
        case trunkingOriginationLocal = "trunking-origination-local"
        case trunkingOriginationMobile = "trunking-origination-mobile"
        case trunkingOriginationTollfree = "trunking-origination-tollfree"
        case trunkingRecordings = "trunking-recordings"
        case trunkingSecure = "trunking-secure"
        case trunkingTermination = "trunking-termination"
        case turnmegabytes
        case turnmegabytesAustralia = "turnmegabytes-australia"
        case turnmegabytesBrasil = "turnmegabytes-brasil"
        case turnmegabytesGermany = "turnmegabytes-germany"
        case turnmegabytesIndia = "turnmegabytes-india"
        case turnmegabytesIreland = "turnmegabytes-ireland"
        case turnmegabytesJapan = "turnmegabytes-japan"
        case turnmegabytesSingapore = "turnmegabytes-singapore"
        case turnmegabytesUseast = "turnmegabytes-useast"
        case turnmegabytesUswest = "turnmegabytes-uswest"
        case twilioInterconnect = "twilio-interconnect"
        case verifyPush = "verify-push"
        case videoRecordings = "video-recordings"
        case voiceInsights = "voice-insights"
        case voiceInsightsClientInsightsOnDemandMinute = "voice-insights-client-insights-on-demand-minute"
        case voiceInsightsPtsnInsightsOnDemandMinute = "voice-insights-ptsn-insights-on-demand-minute"
        case voiceInsightsSipInterfaceInsightsOnDemandMinute = "voice-insights-sip-interface-insights-on-demand-minute"
        case voiceInsightsSipTrunkingInsightsOnDemandMinute = "voice-insights-sip-trunking-insights-on-demand-minute"
        case wireless
        case wirelessOrders = "wireless-orders"
        case wirelessOrdersArtwork = "wireless-orders-artwork"
        case wirelessOrdersBulk = "wireless-orders-bulk"
        case wirelessOrdersEsim = "wireless-orders-esim"
        case wirelessOrdersStarter = "wireless-orders-starter"
        case wirelessUsage = "wireless-usage"
        case wirelessUsageCommands = "wireless-usage-commands"
        case wirelessUsageCommandsAfrica = "wireless-usage-commands-africa"
        case wirelessUsageCommandsAsia = "wireless-usage-commands-asia"
        case wirelessUsageCommandsCentralandsouthamerica = "wireless-usage-commands-centralandsouthamerica"
        case wirelessUsageCommandsEurope = "wireless-usage-commands-europe"
        case wirelessUsageCommandsHome = "wireless-usage-commands-home"
        case wirelessUsageCommandsNorthamerica = "wireless-usage-commands-northamerica"
        case wirelessUsageCommandsOceania = "wireless-usage-commands-oceania"
        case wirelessUsageCommandsRoaming = "wireless-usage-commands-roaming"
        case wirelessUsageData = "wireless-usage-data"
        case wirelessUsageDataAfrica = "wireless-usage-data-africa"
        case wirelessUsageDataAsia = "wireless-usage-data-asia"
        case wirelessUsageDataCentralandsouthamerica = "wireless-usage-data-centralandsouthamerica"
        case wirelessUsageDataCustomAdditionalmb = "wireless-usage-data-custom-additionalmb"
        case wirelessUsageDataCustomFirst5mb = "wireless-usage-data-custom-first5mb"
        case wirelessUsageDataDomesticRoaming = "wireless-usage-data-domestic-roaming"
        case wirelessUsageDataEurope = "wireless-usage-data-europe"
        case wirelessUsageDataIndividualAdditionalgb = "wireless-usage-data-individual-additionalgb"
        case wirelessUsageDataIndividualFirstgb = "wireless-usage-data-individual-firstgb"
        case wirelessUsageDataInternationalRoamingCanada = "wireless-usage-data-international-roaming-canada"
        case wirelessUsageDataInternationalRoamingIndia = "wireless-usage-data-international-roaming-india"
        case wirelessUsageDataInternationalRoamingMexico = "wireless-usage-data-international-roaming-mexico"
        case wirelessUsageDataNorthamerica = "wireless-usage-data-northamerica"
        case wirelessUsageDataOceania = "wireless-usage-data-oceania"
        case wirelessUsageDataPooled = "wireless-usage-data-pooled"
        case wirelessUsageDataPooledDownlink = "wireless-usage-data-pooled-downlink"
        case wirelessUsageDataPooledUplink = "wireless-usage-data-pooled-uplink"
        case wirelessUsageMrc = "wireless-usage-mrc"
        case wirelessUsageMrcCustom = "wireless-usage-mrc-custom"
        case wirelessUsageMrcIndividual = "wireless-usage-mrc-individual"
        case wirelessUsageMrcPooled = "wireless-usage-mrc-pooled"
        case wirelessUsageMrcSuspended = "wireless-usage-mrc-suspended"
        case wirelessUsageSms = "wireless-usage-sms"
        case wirelessUsageVoice = "wireless-usage-voice"
    }

    public init(accountSid: String? = nil, apiVersion: String? = nil, asOf: String? = nil, category: Category? = nil, count: String? = nil, countUnit: String? = nil, description: String? = nil, endDate: NaiveDate? = nil, price: Double? = nil, priceUnit: String? = nil, startDate: NaiveDate? = nil, subresourceUris: [String: AnyJSON]? = nil, uri: URL? = nil, usage: String? = nil, usageUnit: String? = nil) {
        self.accountSid = accountSid
        self.apiVersion = apiVersion
        self.asOf = asOf
        self.category = category
        self.count = count
        self.countUnit = countUnit
        self.description = description
        self.endDate = endDate
        self.price = price
        self.priceUnit = priceUnit
        self.startDate = startDate
        self.subresourceUris = subresourceUris
        self.uri = uri
        self.usage = usage
        self.usageUnit = usageUnit
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case apiVersion = "api_version"
        case asOf = "as_of"
        case category
        case count
        case countUnit = "count_unit"
        case description
        case endDate = "end_date"
        case price
        case priceUnit = "price_unit"
        case startDate = "start_date"
        case subresourceUris = "subresource_uris"
        case uri
        case usage
        case usageUnit = "usage_unit"
    }
}

public struct APIV2010AccountUsageUsageRecordUsageRecordDaily: Codable {
    /// The SID of the Account accrued the usage
    public var accountSid: String?
    /// The API version used to create the resource
    public var apiVersion: String?
    /// Usage records up to date as of this timestamp
    public var asOf: String?
    /// The category of usage
    public var category: Category?
    /// The number of usage events
    public var count: String?
    /// The units in which count is measured
    public var countUnit: String?
    /// A plain-language description of the usage category
    public var description: String?
    /// The last date for which usage is included in the UsageRecord
    public var endDate: NaiveDate?
    /// The total price of the usage
    public var price: Double?
    /// The currency in which `price` is measured
    public var priceUnit: String?
    /// The first date for which usage is included in this UsageRecord
    public var startDate: NaiveDate?
    /// A list of related resources identified by their relative URIs
    public var subresourceUris: [String: AnyJSON]?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?
    /// The amount of usage
    public var usage: String?
    /// The units in which usage is measured
    public var usageUnit: String?

    /// The category of usage
    public enum Category: String, Codable, CaseIterable {
        case agentConference = "agent-conference"
        case answeringMachineDetection = "answering-machine-detection"
        case authyAuthentications = "authy-authentications"
        case authyCallsOutbound = "authy-calls-outbound"
        case authyMonthlyFees = "authy-monthly-fees"
        case authyPhoneIntelligence = "authy-phone-intelligence"
        case authyPhoneVerifications = "authy-phone-verifications"
        case authySmsOutbound = "authy-sms-outbound"
        case callProgessEvents = "call-progess-events"
        case calleridlookups
        case calls
        case callsClient = "calls-client"
        case callsGlobalconference = "calls-globalconference"
        case callsInbound = "calls-inbound"
        case callsInboundLocal = "calls-inbound-local"
        case callsInboundMobile = "calls-inbound-mobile"
        case callsInboundTollfree = "calls-inbound-tollfree"
        case callsOutbound = "calls-outbound"
        case callsPayVerbTransactions = "calls-pay-verb-transactions"
        case callsRecordings = "calls-recordings"
        case callsSip = "calls-sip"
        case callsSipInbound = "calls-sip-inbound"
        case callsSipOutbound = "calls-sip-outbound"
        case callsTransfers = "calls-transfers"
        case carrierLookups = "carrier-lookups"
        case conversations
        case conversationsAPIRequests = "conversations-api-requests"
        case conversationsConversationEvents = "conversations-conversation-events"
        case conversationsEndpointConnectivity = "conversations-endpoint-connectivity"
        case conversationsEvents = "conversations-events"
        case conversationsParticipantEvents = "conversations-participant-events"
        case conversationsParticipants = "conversations-participants"
        case cps
        case flexUsage = "flex-usage"
        case fraudLookups = "fraud-lookups"
        case groupRooms = "group-rooms"
        case groupRoomsDataTrack = "group-rooms-data-track"
        case groupRoomsEncryptedMediaRecorded = "group-rooms-encrypted-media-recorded"
        case groupRoomsMediaDownloaded = "group-rooms-media-downloaded"
        case groupRoomsMediaRecorded = "group-rooms-media-recorded"
        case groupRoomsMediaRouted = "group-rooms-media-routed"
        case groupRoomsMediaStored = "group-rooms-media-stored"
        case groupRoomsParticipantMinutes = "group-rooms-participant-minutes"
        case groupRoomsRecordedMinutes = "group-rooms-recorded-minutes"
        case impV1Usage = "imp-v1-usage"
        case lookups
        case marketplace
        case marketplaceAlgorithmiaNamedEntityRecognition = "marketplace-algorithmia-named-entity-recognition"
        case marketplaceCadenceTranscription = "marketplace-cadence-transcription"
        case marketplaceCadenceTranslation = "marketplace-cadence-translation"
        case marketplaceCapioSpeechToText = "marketplace-capio-speech-to-text"
        case marketplaceConvrizaAbaba = "marketplace-convriza-ababa"
        case marketplaceDeepgramPhraseDetector = "marketplace-deepgram-phrase-detector"
        case marketplaceDigitalSegmentBusinessInfo = "marketplace-digital-segment-business-info"
        case marketplaceFacebookOfflineConversions = "marketplace-facebook-offline-conversions"
        case marketplaceGoogleSpeechToText = "marketplace-google-speech-to-text"
        case marketplaceIbmWatsonMessageInsights = "marketplace-ibm-watson-message-insights"
        case marketplaceIbmWatsonMessageSentiment = "marketplace-ibm-watson-message-sentiment"
        case marketplaceIbmWatsonRecordingAnalysis = "marketplace-ibm-watson-recording-analysis"
        case marketplaceIbmWatsonToneAnalyzer = "marketplace-ibm-watson-tone-analyzer"
        case marketplaceIcehookSystemsScout = "marketplace-icehook-systems-scout"
        case marketplaceInfogroupDataaxleBizinfo = "marketplace-infogroup-dataaxle-bizinfo"
        case marketplaceKeenIoContactCenterAnalytics = "marketplace-keen-io-contact-center-analytics"
        case marketplaceMarchexCleancall = "marketplace-marchex-cleancall"
        case marketplaceMarchexSentimentAnalysisForSms = "marketplace-marchex-sentiment-analysis-for-sms"
        case marketplaceMarketplaceNextcallerSocialID = "marketplace-marketplace-nextcaller-social-id"
        case marketplaceMobileCommonsOptOutClassifier = "marketplace-mobile-commons-opt-out-classifier"
        case marketplaceNexiwaveVoicemailToText = "marketplace-nexiwave-voicemail-to-text"
        case marketplaceNextcallerAdvancedCallerIdentification = "marketplace-nextcaller-advanced-caller-identification"
        case marketplaceNomoroboSpamScore = "marketplace-nomorobo-spam-score"
        case marketplacePayfoneTcpaCompliance = "marketplace-payfone-tcpa-compliance"
        case marketplaceRemeetingAutomaticSpeechRecognition = "marketplace-remeeting-automatic-speech-recognition"
        case marketplaceTcpaDefenseSolutionsBlacklistFeed = "marketplace-tcpa-defense-solutions-blacklist-feed"
        case marketplaceTeloOpencnam = "marketplace-telo-opencnam"
        case marketplaceTruecnamTrueSpam = "marketplace-truecnam-true-spam"
        case marketplaceTwilioCallerNameLookupUs = "marketplace-twilio-caller-name-lookup-us"
        case marketplaceTwilioCarrierInformationLookup = "marketplace-twilio-carrier-information-lookup"
        case marketplaceVoicebasePci = "marketplace-voicebase-pci"
        case marketplaceVoicebaseTranscription = "marketplace-voicebase-transcription"
        case marketplaceVoicebaseTranscriptionCustomVocabulary = "marketplace-voicebase-transcription-custom-vocabulary"
        case marketplaceWhitepagesProCallerIdentification = "marketplace-whitepages-pro-caller-identification"
        case marketplaceWhitepagesProPhoneIntelligence = "marketplace-whitepages-pro-phone-intelligence"
        case marketplaceWhitepagesProPhoneReputation = "marketplace-whitepages-pro-phone-reputation"
        case marketplaceWolfarmSpokenResults = "marketplace-wolfarm-spoken-results"
        case marketplaceWolframShortAnswer = "marketplace-wolfram-short-answer"
        case marketplaceYticaContactCenterReportingAnalytics = "marketplace-ytica-contact-center-reporting-analytics"
        case mediastorage
        case mms
        case mmsInbound = "mms-inbound"
        case mmsInboundLongcode = "mms-inbound-longcode"
        case mmsInboundShortcode = "mms-inbound-shortcode"
        case mmsMessagesCarrierfees = "mms-messages-carrierfees"
        case mmsOutbound = "mms-outbound"
        case mmsOutboundLongcode = "mms-outbound-longcode"
        case mmsOutboundShortcode = "mms-outbound-shortcode"
        case monitorReads = "monitor-reads"
        case monitorStorage = "monitor-storage"
        case monitorWrites = "monitor-writes"
        case notify
        case notifyActionsAttempts = "notify-actions-attempts"
        case notifyChannels = "notify-channels"
        case numberFormatLookups = "number-format-lookups"
        case pchat
        case pchatUsers = "pchat-users"
        case peerToPeerRoomsParticipantMinutes = "peer-to-peer-rooms-participant-minutes"
        case pfax
        case pfaxMinutes = "pfax-minutes"
        case pfaxMinutesInbound = "pfax-minutes-inbound"
        case pfaxMinutesOutbound = "pfax-minutes-outbound"
        case pfaxPages = "pfax-pages"
        case phonenumbers
        case phonenumbersCps = "phonenumbers-cps"
        case phonenumbersEmergency = "phonenumbers-emergency"
        case phonenumbersLocal = "phonenumbers-local"
        case phonenumbersMobile = "phonenumbers-mobile"
        case phonenumbersSetups = "phonenumbers-setups"
        case phonenumbersTollfree = "phonenumbers-tollfree"
        case premiumsupport
        case proxy
        case proxyActiveSessions = "proxy-active-sessions"
        case pstnconnectivity
        case pv
        case pvCompositionMediaDownloaded = "pv-composition-media-downloaded"
        case pvCompositionMediaEncrypted = "pv-composition-media-encrypted"
        case pvCompositionMediaStored = "pv-composition-media-stored"
        case pvCompositionMinutes = "pv-composition-minutes"
        case pvRecordingCompositions = "pv-recording-compositions"
        case pvRoomParticipants = "pv-room-participants"
        case pvRoomParticipantsAu1 = "pv-room-participants-au1"
        case pvRoomParticipantsBr1 = "pv-room-participants-br1"
        case pvRoomParticipantsIe1 = "pv-room-participants-ie1"
        case pvRoomParticipantsJp1 = "pv-room-participants-jp1"
        case pvRoomParticipantsSg1 = "pv-room-participants-sg1"
        case pvRoomParticipantsUs1 = "pv-room-participants-us1"
        case pvRoomParticipantsUs2 = "pv-room-participants-us2"
        case pvRooms = "pv-rooms"
        case pvSipEndpointRegistrations = "pv-sip-endpoint-registrations"
        case recordings
        case recordingstorage
        case roomsGroupBandwidth = "rooms-group-bandwidth"
        case roomsGroupMinutes = "rooms-group-minutes"
        case roomsPeerToPeerMinutes = "rooms-peer-to-peer-minutes"
        case shortcodes
        case shortcodesCustomerowned = "shortcodes-customerowned"
        case shortcodesMmsEnablement = "shortcodes-mms-enablement"
        case shortcodesMps = "shortcodes-mps"
        case shortcodesRandom = "shortcodes-random"
        case shortcodesUk = "shortcodes-uk"
        case shortcodesVanity = "shortcodes-vanity"
        case smallGroupRooms = "small-group-rooms"
        case smallGroupRoomsDataTrack = "small-group-rooms-data-track"
        case smallGroupRoomsParticipantMinutes = "small-group-rooms-participant-minutes"
        case sms
        case smsInbound = "sms-inbound"
        case smsInboundLongcode = "sms-inbound-longcode"
        case smsInboundShortcode = "sms-inbound-shortcode"
        case smsMessagesCarrierfees = "sms-messages-carrierfees"
        case smsMessagesFeatures = "sms-messages-features"
        case smsMessagesFeaturesSenderid = "sms-messages-features-senderid"
        case smsOutbound = "sms-outbound"
        case smsOutboundContentInspection = "sms-outbound-content-inspection"
        case smsOutboundLongcode = "sms-outbound-longcode"
        case smsOutboundShortcode = "sms-outbound-shortcode"
        case speechRecognition = "speech-recognition"
        case studioEngagements = "studio-engagements"
        case sync
        case syncActions = "sync-actions"
        case syncEndpointHours = "sync-endpoint-hours"
        case syncEndpointHoursAboveDailyCap = "sync-endpoint-hours-above-daily-cap"
        case taskrouterTasks = "taskrouter-tasks"
        case totalprice
        case transcriptions
        case trunkingCps = "trunking-cps"
        case trunkingEmergencyCalls = "trunking-emergency-calls"
        case trunkingOrigination = "trunking-origination"
        case trunkingOriginationLocal = "trunking-origination-local"
        case trunkingOriginationMobile = "trunking-origination-mobile"
        case trunkingOriginationTollfree = "trunking-origination-tollfree"
        case trunkingRecordings = "trunking-recordings"
        case trunkingSecure = "trunking-secure"
        case trunkingTermination = "trunking-termination"
        case turnmegabytes
        case turnmegabytesAustralia = "turnmegabytes-australia"
        case turnmegabytesBrasil = "turnmegabytes-brasil"
        case turnmegabytesGermany = "turnmegabytes-germany"
        case turnmegabytesIndia = "turnmegabytes-india"
        case turnmegabytesIreland = "turnmegabytes-ireland"
        case turnmegabytesJapan = "turnmegabytes-japan"
        case turnmegabytesSingapore = "turnmegabytes-singapore"
        case turnmegabytesUseast = "turnmegabytes-useast"
        case turnmegabytesUswest = "turnmegabytes-uswest"
        case twilioInterconnect = "twilio-interconnect"
        case verifyPush = "verify-push"
        case videoRecordings = "video-recordings"
        case voiceInsights = "voice-insights"
        case voiceInsightsClientInsightsOnDemandMinute = "voice-insights-client-insights-on-demand-minute"
        case voiceInsightsPtsnInsightsOnDemandMinute = "voice-insights-ptsn-insights-on-demand-minute"
        case voiceInsightsSipInterfaceInsightsOnDemandMinute = "voice-insights-sip-interface-insights-on-demand-minute"
        case voiceInsightsSipTrunkingInsightsOnDemandMinute = "voice-insights-sip-trunking-insights-on-demand-minute"
        case wireless
        case wirelessOrders = "wireless-orders"
        case wirelessOrdersArtwork = "wireless-orders-artwork"
        case wirelessOrdersBulk = "wireless-orders-bulk"
        case wirelessOrdersEsim = "wireless-orders-esim"
        case wirelessOrdersStarter = "wireless-orders-starter"
        case wirelessUsage = "wireless-usage"
        case wirelessUsageCommands = "wireless-usage-commands"
        case wirelessUsageCommandsAfrica = "wireless-usage-commands-africa"
        case wirelessUsageCommandsAsia = "wireless-usage-commands-asia"
        case wirelessUsageCommandsCentralandsouthamerica = "wireless-usage-commands-centralandsouthamerica"
        case wirelessUsageCommandsEurope = "wireless-usage-commands-europe"
        case wirelessUsageCommandsHome = "wireless-usage-commands-home"
        case wirelessUsageCommandsNorthamerica = "wireless-usage-commands-northamerica"
        case wirelessUsageCommandsOceania = "wireless-usage-commands-oceania"
        case wirelessUsageCommandsRoaming = "wireless-usage-commands-roaming"
        case wirelessUsageData = "wireless-usage-data"
        case wirelessUsageDataAfrica = "wireless-usage-data-africa"
        case wirelessUsageDataAsia = "wireless-usage-data-asia"
        case wirelessUsageDataCentralandsouthamerica = "wireless-usage-data-centralandsouthamerica"
        case wirelessUsageDataCustomAdditionalmb = "wireless-usage-data-custom-additionalmb"
        case wirelessUsageDataCustomFirst5mb = "wireless-usage-data-custom-first5mb"
        case wirelessUsageDataDomesticRoaming = "wireless-usage-data-domestic-roaming"
        case wirelessUsageDataEurope = "wireless-usage-data-europe"
        case wirelessUsageDataIndividualAdditionalgb = "wireless-usage-data-individual-additionalgb"
        case wirelessUsageDataIndividualFirstgb = "wireless-usage-data-individual-firstgb"
        case wirelessUsageDataInternationalRoamingCanada = "wireless-usage-data-international-roaming-canada"
        case wirelessUsageDataInternationalRoamingIndia = "wireless-usage-data-international-roaming-india"
        case wirelessUsageDataInternationalRoamingMexico = "wireless-usage-data-international-roaming-mexico"
        case wirelessUsageDataNorthamerica = "wireless-usage-data-northamerica"
        case wirelessUsageDataOceania = "wireless-usage-data-oceania"
        case wirelessUsageDataPooled = "wireless-usage-data-pooled"
        case wirelessUsageDataPooledDownlink = "wireless-usage-data-pooled-downlink"
        case wirelessUsageDataPooledUplink = "wireless-usage-data-pooled-uplink"
        case wirelessUsageMrc = "wireless-usage-mrc"
        case wirelessUsageMrcCustom = "wireless-usage-mrc-custom"
        case wirelessUsageMrcIndividual = "wireless-usage-mrc-individual"
        case wirelessUsageMrcPooled = "wireless-usage-mrc-pooled"
        case wirelessUsageMrcSuspended = "wireless-usage-mrc-suspended"
        case wirelessUsageSms = "wireless-usage-sms"
        case wirelessUsageVoice = "wireless-usage-voice"
    }

    public init(accountSid: String? = nil, apiVersion: String? = nil, asOf: String? = nil, category: Category? = nil, count: String? = nil, countUnit: String? = nil, description: String? = nil, endDate: NaiveDate? = nil, price: Double? = nil, priceUnit: String? = nil, startDate: NaiveDate? = nil, subresourceUris: [String: AnyJSON]? = nil, uri: URL? = nil, usage: String? = nil, usageUnit: String? = nil) {
        self.accountSid = accountSid
        self.apiVersion = apiVersion
        self.asOf = asOf
        self.category = category
        self.count = count
        self.countUnit = countUnit
        self.description = description
        self.endDate = endDate
        self.price = price
        self.priceUnit = priceUnit
        self.startDate = startDate
        self.subresourceUris = subresourceUris
        self.uri = uri
        self.usage = usage
        self.usageUnit = usageUnit
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case apiVersion = "api_version"
        case asOf = "as_of"
        case category
        case count
        case countUnit = "count_unit"
        case description
        case endDate = "end_date"
        case price
        case priceUnit = "price_unit"
        case startDate = "start_date"
        case subresourceUris = "subresource_uris"
        case uri
        case usage
        case usageUnit = "usage_unit"
    }
}

public struct APIV2010AccountUsageUsageRecordUsageRecordLastMonth: Codable {
    /// The SID of the Account accrued the usage
    public var accountSid: String?
    /// The API version used to create the resource
    public var apiVersion: String?
    /// Usage records up to date as of this timestamp
    public var asOf: String?
    /// The category of usage
    public var category: Category?
    /// The number of usage events
    public var count: String?
    /// The units in which count is measured
    public var countUnit: String?
    /// A plain-language description of the usage category
    public var description: String?
    /// The last date for which usage is included in the UsageRecord
    public var endDate: NaiveDate?
    /// The total price of the usage
    public var price: Double?
    /// The currency in which `price` is measured
    public var priceUnit: String?
    /// The first date for which usage is included in this UsageRecord
    public var startDate: NaiveDate?
    /// A list of related resources identified by their relative URIs
    public var subresourceUris: [String: AnyJSON]?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?
    /// The amount of usage
    public var usage: String?
    /// The units in which usage is measured
    public var usageUnit: String?

    /// The category of usage
    public enum Category: String, Codable, CaseIterable {
        case agentConference = "agent-conference"
        case answeringMachineDetection = "answering-machine-detection"
        case authyAuthentications = "authy-authentications"
        case authyCallsOutbound = "authy-calls-outbound"
        case authyMonthlyFees = "authy-monthly-fees"
        case authyPhoneIntelligence = "authy-phone-intelligence"
        case authyPhoneVerifications = "authy-phone-verifications"
        case authySmsOutbound = "authy-sms-outbound"
        case callProgessEvents = "call-progess-events"
        case calleridlookups
        case calls
        case callsClient = "calls-client"
        case callsGlobalconference = "calls-globalconference"
        case callsInbound = "calls-inbound"
        case callsInboundLocal = "calls-inbound-local"
        case callsInboundMobile = "calls-inbound-mobile"
        case callsInboundTollfree = "calls-inbound-tollfree"
        case callsOutbound = "calls-outbound"
        case callsPayVerbTransactions = "calls-pay-verb-transactions"
        case callsRecordings = "calls-recordings"
        case callsSip = "calls-sip"
        case callsSipInbound = "calls-sip-inbound"
        case callsSipOutbound = "calls-sip-outbound"
        case callsTransfers = "calls-transfers"
        case carrierLookups = "carrier-lookups"
        case conversations
        case conversationsAPIRequests = "conversations-api-requests"
        case conversationsConversationEvents = "conversations-conversation-events"
        case conversationsEndpointConnectivity = "conversations-endpoint-connectivity"
        case conversationsEvents = "conversations-events"
        case conversationsParticipantEvents = "conversations-participant-events"
        case conversationsParticipants = "conversations-participants"
        case cps
        case flexUsage = "flex-usage"
        case fraudLookups = "fraud-lookups"
        case groupRooms = "group-rooms"
        case groupRoomsDataTrack = "group-rooms-data-track"
        case groupRoomsEncryptedMediaRecorded = "group-rooms-encrypted-media-recorded"
        case groupRoomsMediaDownloaded = "group-rooms-media-downloaded"
        case groupRoomsMediaRecorded = "group-rooms-media-recorded"
        case groupRoomsMediaRouted = "group-rooms-media-routed"
        case groupRoomsMediaStored = "group-rooms-media-stored"
        case groupRoomsParticipantMinutes = "group-rooms-participant-minutes"
        case groupRoomsRecordedMinutes = "group-rooms-recorded-minutes"
        case impV1Usage = "imp-v1-usage"
        case lookups
        case marketplace
        case marketplaceAlgorithmiaNamedEntityRecognition = "marketplace-algorithmia-named-entity-recognition"
        case marketplaceCadenceTranscription = "marketplace-cadence-transcription"
        case marketplaceCadenceTranslation = "marketplace-cadence-translation"
        case marketplaceCapioSpeechToText = "marketplace-capio-speech-to-text"
        case marketplaceConvrizaAbaba = "marketplace-convriza-ababa"
        case marketplaceDeepgramPhraseDetector = "marketplace-deepgram-phrase-detector"
        case marketplaceDigitalSegmentBusinessInfo = "marketplace-digital-segment-business-info"
        case marketplaceFacebookOfflineConversions = "marketplace-facebook-offline-conversions"
        case marketplaceGoogleSpeechToText = "marketplace-google-speech-to-text"
        case marketplaceIbmWatsonMessageInsights = "marketplace-ibm-watson-message-insights"
        case marketplaceIbmWatsonMessageSentiment = "marketplace-ibm-watson-message-sentiment"
        case marketplaceIbmWatsonRecordingAnalysis = "marketplace-ibm-watson-recording-analysis"
        case marketplaceIbmWatsonToneAnalyzer = "marketplace-ibm-watson-tone-analyzer"
        case marketplaceIcehookSystemsScout = "marketplace-icehook-systems-scout"
        case marketplaceInfogroupDataaxleBizinfo = "marketplace-infogroup-dataaxle-bizinfo"
        case marketplaceKeenIoContactCenterAnalytics = "marketplace-keen-io-contact-center-analytics"
        case marketplaceMarchexCleancall = "marketplace-marchex-cleancall"
        case marketplaceMarchexSentimentAnalysisForSms = "marketplace-marchex-sentiment-analysis-for-sms"
        case marketplaceMarketplaceNextcallerSocialID = "marketplace-marketplace-nextcaller-social-id"
        case marketplaceMobileCommonsOptOutClassifier = "marketplace-mobile-commons-opt-out-classifier"
        case marketplaceNexiwaveVoicemailToText = "marketplace-nexiwave-voicemail-to-text"
        case marketplaceNextcallerAdvancedCallerIdentification = "marketplace-nextcaller-advanced-caller-identification"
        case marketplaceNomoroboSpamScore = "marketplace-nomorobo-spam-score"
        case marketplacePayfoneTcpaCompliance = "marketplace-payfone-tcpa-compliance"
        case marketplaceRemeetingAutomaticSpeechRecognition = "marketplace-remeeting-automatic-speech-recognition"
        case marketplaceTcpaDefenseSolutionsBlacklistFeed = "marketplace-tcpa-defense-solutions-blacklist-feed"
        case marketplaceTeloOpencnam = "marketplace-telo-opencnam"
        case marketplaceTruecnamTrueSpam = "marketplace-truecnam-true-spam"
        case marketplaceTwilioCallerNameLookupUs = "marketplace-twilio-caller-name-lookup-us"
        case marketplaceTwilioCarrierInformationLookup = "marketplace-twilio-carrier-information-lookup"
        case marketplaceVoicebasePci = "marketplace-voicebase-pci"
        case marketplaceVoicebaseTranscription = "marketplace-voicebase-transcription"
        case marketplaceVoicebaseTranscriptionCustomVocabulary = "marketplace-voicebase-transcription-custom-vocabulary"
        case marketplaceWhitepagesProCallerIdentification = "marketplace-whitepages-pro-caller-identification"
        case marketplaceWhitepagesProPhoneIntelligence = "marketplace-whitepages-pro-phone-intelligence"
        case marketplaceWhitepagesProPhoneReputation = "marketplace-whitepages-pro-phone-reputation"
        case marketplaceWolfarmSpokenResults = "marketplace-wolfarm-spoken-results"
        case marketplaceWolframShortAnswer = "marketplace-wolfram-short-answer"
        case marketplaceYticaContactCenterReportingAnalytics = "marketplace-ytica-contact-center-reporting-analytics"
        case mediastorage
        case mms
        case mmsInbound = "mms-inbound"
        case mmsInboundLongcode = "mms-inbound-longcode"
        case mmsInboundShortcode = "mms-inbound-shortcode"
        case mmsMessagesCarrierfees = "mms-messages-carrierfees"
        case mmsOutbound = "mms-outbound"
        case mmsOutboundLongcode = "mms-outbound-longcode"
        case mmsOutboundShortcode = "mms-outbound-shortcode"
        case monitorReads = "monitor-reads"
        case monitorStorage = "monitor-storage"
        case monitorWrites = "monitor-writes"
        case notify
        case notifyActionsAttempts = "notify-actions-attempts"
        case notifyChannels = "notify-channels"
        case numberFormatLookups = "number-format-lookups"
        case pchat
        case pchatUsers = "pchat-users"
        case peerToPeerRoomsParticipantMinutes = "peer-to-peer-rooms-participant-minutes"
        case pfax
        case pfaxMinutes = "pfax-minutes"
        case pfaxMinutesInbound = "pfax-minutes-inbound"
        case pfaxMinutesOutbound = "pfax-minutes-outbound"
        case pfaxPages = "pfax-pages"
        case phonenumbers
        case phonenumbersCps = "phonenumbers-cps"
        case phonenumbersEmergency = "phonenumbers-emergency"
        case phonenumbersLocal = "phonenumbers-local"
        case phonenumbersMobile = "phonenumbers-mobile"
        case phonenumbersSetups = "phonenumbers-setups"
        case phonenumbersTollfree = "phonenumbers-tollfree"
        case premiumsupport
        case proxy
        case proxyActiveSessions = "proxy-active-sessions"
        case pstnconnectivity
        case pv
        case pvCompositionMediaDownloaded = "pv-composition-media-downloaded"
        case pvCompositionMediaEncrypted = "pv-composition-media-encrypted"
        case pvCompositionMediaStored = "pv-composition-media-stored"
        case pvCompositionMinutes = "pv-composition-minutes"
        case pvRecordingCompositions = "pv-recording-compositions"
        case pvRoomParticipants = "pv-room-participants"
        case pvRoomParticipantsAu1 = "pv-room-participants-au1"
        case pvRoomParticipantsBr1 = "pv-room-participants-br1"
        case pvRoomParticipantsIe1 = "pv-room-participants-ie1"
        case pvRoomParticipantsJp1 = "pv-room-participants-jp1"
        case pvRoomParticipantsSg1 = "pv-room-participants-sg1"
        case pvRoomParticipantsUs1 = "pv-room-participants-us1"
        case pvRoomParticipantsUs2 = "pv-room-participants-us2"
        case pvRooms = "pv-rooms"
        case pvSipEndpointRegistrations = "pv-sip-endpoint-registrations"
        case recordings
        case recordingstorage
        case roomsGroupBandwidth = "rooms-group-bandwidth"
        case roomsGroupMinutes = "rooms-group-minutes"
        case roomsPeerToPeerMinutes = "rooms-peer-to-peer-minutes"
        case shortcodes
        case shortcodesCustomerowned = "shortcodes-customerowned"
        case shortcodesMmsEnablement = "shortcodes-mms-enablement"
        case shortcodesMps = "shortcodes-mps"
        case shortcodesRandom = "shortcodes-random"
        case shortcodesUk = "shortcodes-uk"
        case shortcodesVanity = "shortcodes-vanity"
        case smallGroupRooms = "small-group-rooms"
        case smallGroupRoomsDataTrack = "small-group-rooms-data-track"
        case smallGroupRoomsParticipantMinutes = "small-group-rooms-participant-minutes"
        case sms
        case smsInbound = "sms-inbound"
        case smsInboundLongcode = "sms-inbound-longcode"
        case smsInboundShortcode = "sms-inbound-shortcode"
        case smsMessagesCarrierfees = "sms-messages-carrierfees"
        case smsMessagesFeatures = "sms-messages-features"
        case smsMessagesFeaturesSenderid = "sms-messages-features-senderid"
        case smsOutbound = "sms-outbound"
        case smsOutboundContentInspection = "sms-outbound-content-inspection"
        case smsOutboundLongcode = "sms-outbound-longcode"
        case smsOutboundShortcode = "sms-outbound-shortcode"
        case speechRecognition = "speech-recognition"
        case studioEngagements = "studio-engagements"
        case sync
        case syncActions = "sync-actions"
        case syncEndpointHours = "sync-endpoint-hours"
        case syncEndpointHoursAboveDailyCap = "sync-endpoint-hours-above-daily-cap"
        case taskrouterTasks = "taskrouter-tasks"
        case totalprice
        case transcriptions
        case trunkingCps = "trunking-cps"
        case trunkingEmergencyCalls = "trunking-emergency-calls"
        case trunkingOrigination = "trunking-origination"
        case trunkingOriginationLocal = "trunking-origination-local"
        case trunkingOriginationMobile = "trunking-origination-mobile"
        case trunkingOriginationTollfree = "trunking-origination-tollfree"
        case trunkingRecordings = "trunking-recordings"
        case trunkingSecure = "trunking-secure"
        case trunkingTermination = "trunking-termination"
        case turnmegabytes
        case turnmegabytesAustralia = "turnmegabytes-australia"
        case turnmegabytesBrasil = "turnmegabytes-brasil"
        case turnmegabytesGermany = "turnmegabytes-germany"
        case turnmegabytesIndia = "turnmegabytes-india"
        case turnmegabytesIreland = "turnmegabytes-ireland"
        case turnmegabytesJapan = "turnmegabytes-japan"
        case turnmegabytesSingapore = "turnmegabytes-singapore"
        case turnmegabytesUseast = "turnmegabytes-useast"
        case turnmegabytesUswest = "turnmegabytes-uswest"
        case twilioInterconnect = "twilio-interconnect"
        case verifyPush = "verify-push"
        case videoRecordings = "video-recordings"
        case voiceInsights = "voice-insights"
        case voiceInsightsClientInsightsOnDemandMinute = "voice-insights-client-insights-on-demand-minute"
        case voiceInsightsPtsnInsightsOnDemandMinute = "voice-insights-ptsn-insights-on-demand-minute"
        case voiceInsightsSipInterfaceInsightsOnDemandMinute = "voice-insights-sip-interface-insights-on-demand-minute"
        case voiceInsightsSipTrunkingInsightsOnDemandMinute = "voice-insights-sip-trunking-insights-on-demand-minute"
        case wireless
        case wirelessOrders = "wireless-orders"
        case wirelessOrdersArtwork = "wireless-orders-artwork"
        case wirelessOrdersBulk = "wireless-orders-bulk"
        case wirelessOrdersEsim = "wireless-orders-esim"
        case wirelessOrdersStarter = "wireless-orders-starter"
        case wirelessUsage = "wireless-usage"
        case wirelessUsageCommands = "wireless-usage-commands"
        case wirelessUsageCommandsAfrica = "wireless-usage-commands-africa"
        case wirelessUsageCommandsAsia = "wireless-usage-commands-asia"
        case wirelessUsageCommandsCentralandsouthamerica = "wireless-usage-commands-centralandsouthamerica"
        case wirelessUsageCommandsEurope = "wireless-usage-commands-europe"
        case wirelessUsageCommandsHome = "wireless-usage-commands-home"
        case wirelessUsageCommandsNorthamerica = "wireless-usage-commands-northamerica"
        case wirelessUsageCommandsOceania = "wireless-usage-commands-oceania"
        case wirelessUsageCommandsRoaming = "wireless-usage-commands-roaming"
        case wirelessUsageData = "wireless-usage-data"
        case wirelessUsageDataAfrica = "wireless-usage-data-africa"
        case wirelessUsageDataAsia = "wireless-usage-data-asia"
        case wirelessUsageDataCentralandsouthamerica = "wireless-usage-data-centralandsouthamerica"
        case wirelessUsageDataCustomAdditionalmb = "wireless-usage-data-custom-additionalmb"
        case wirelessUsageDataCustomFirst5mb = "wireless-usage-data-custom-first5mb"
        case wirelessUsageDataDomesticRoaming = "wireless-usage-data-domestic-roaming"
        case wirelessUsageDataEurope = "wireless-usage-data-europe"
        case wirelessUsageDataIndividualAdditionalgb = "wireless-usage-data-individual-additionalgb"
        case wirelessUsageDataIndividualFirstgb = "wireless-usage-data-individual-firstgb"
        case wirelessUsageDataInternationalRoamingCanada = "wireless-usage-data-international-roaming-canada"
        case wirelessUsageDataInternationalRoamingIndia = "wireless-usage-data-international-roaming-india"
        case wirelessUsageDataInternationalRoamingMexico = "wireless-usage-data-international-roaming-mexico"
        case wirelessUsageDataNorthamerica = "wireless-usage-data-northamerica"
        case wirelessUsageDataOceania = "wireless-usage-data-oceania"
        case wirelessUsageDataPooled = "wireless-usage-data-pooled"
        case wirelessUsageDataPooledDownlink = "wireless-usage-data-pooled-downlink"
        case wirelessUsageDataPooledUplink = "wireless-usage-data-pooled-uplink"
        case wirelessUsageMrc = "wireless-usage-mrc"
        case wirelessUsageMrcCustom = "wireless-usage-mrc-custom"
        case wirelessUsageMrcIndividual = "wireless-usage-mrc-individual"
        case wirelessUsageMrcPooled = "wireless-usage-mrc-pooled"
        case wirelessUsageMrcSuspended = "wireless-usage-mrc-suspended"
        case wirelessUsageSms = "wireless-usage-sms"
        case wirelessUsageVoice = "wireless-usage-voice"
    }

    public init(accountSid: String? = nil, apiVersion: String? = nil, asOf: String? = nil, category: Category? = nil, count: String? = nil, countUnit: String? = nil, description: String? = nil, endDate: NaiveDate? = nil, price: Double? = nil, priceUnit: String? = nil, startDate: NaiveDate? = nil, subresourceUris: [String: AnyJSON]? = nil, uri: URL? = nil, usage: String? = nil, usageUnit: String? = nil) {
        self.accountSid = accountSid
        self.apiVersion = apiVersion
        self.asOf = asOf
        self.category = category
        self.count = count
        self.countUnit = countUnit
        self.description = description
        self.endDate = endDate
        self.price = price
        self.priceUnit = priceUnit
        self.startDate = startDate
        self.subresourceUris = subresourceUris
        self.uri = uri
        self.usage = usage
        self.usageUnit = usageUnit
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case apiVersion = "api_version"
        case asOf = "as_of"
        case category
        case count
        case countUnit = "count_unit"
        case description
        case endDate = "end_date"
        case price
        case priceUnit = "price_unit"
        case startDate = "start_date"
        case subresourceUris = "subresource_uris"
        case uri
        case usage
        case usageUnit = "usage_unit"
    }
}

public struct APIV2010AccountUsageUsageRecordUsageRecordMonthly: Codable {
    /// The SID of the Account accrued the usage
    public var accountSid: String?
    /// The API version used to create the resource
    public var apiVersion: String?
    /// Usage records up to date as of this timestamp
    public var asOf: String?
    /// The category of usage
    public var category: Category?
    /// The number of usage events
    public var count: String?
    /// The units in which count is measured
    public var countUnit: String?
    /// A plain-language description of the usage category
    public var description: String?
    /// The last date for which usage is included in the UsageRecord
    public var endDate: NaiveDate?
    /// The total price of the usage
    public var price: Double?
    /// The currency in which `price` is measured
    public var priceUnit: String?
    /// The first date for which usage is included in this UsageRecord
    public var startDate: NaiveDate?
    /// A list of related resources identified by their relative URIs
    public var subresourceUris: [String: AnyJSON]?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?
    /// The amount of usage
    public var usage: String?
    /// The units in which usage is measured
    public var usageUnit: String?

    /// The category of usage
    public enum Category: String, Codable, CaseIterable {
        case agentConference = "agent-conference"
        case answeringMachineDetection = "answering-machine-detection"
        case authyAuthentications = "authy-authentications"
        case authyCallsOutbound = "authy-calls-outbound"
        case authyMonthlyFees = "authy-monthly-fees"
        case authyPhoneIntelligence = "authy-phone-intelligence"
        case authyPhoneVerifications = "authy-phone-verifications"
        case authySmsOutbound = "authy-sms-outbound"
        case callProgessEvents = "call-progess-events"
        case calleridlookups
        case calls
        case callsClient = "calls-client"
        case callsGlobalconference = "calls-globalconference"
        case callsInbound = "calls-inbound"
        case callsInboundLocal = "calls-inbound-local"
        case callsInboundMobile = "calls-inbound-mobile"
        case callsInboundTollfree = "calls-inbound-tollfree"
        case callsOutbound = "calls-outbound"
        case callsPayVerbTransactions = "calls-pay-verb-transactions"
        case callsRecordings = "calls-recordings"
        case callsSip = "calls-sip"
        case callsSipInbound = "calls-sip-inbound"
        case callsSipOutbound = "calls-sip-outbound"
        case callsTransfers = "calls-transfers"
        case carrierLookups = "carrier-lookups"
        case conversations
        case conversationsAPIRequests = "conversations-api-requests"
        case conversationsConversationEvents = "conversations-conversation-events"
        case conversationsEndpointConnectivity = "conversations-endpoint-connectivity"
        case conversationsEvents = "conversations-events"
        case conversationsParticipantEvents = "conversations-participant-events"
        case conversationsParticipants = "conversations-participants"
        case cps
        case flexUsage = "flex-usage"
        case fraudLookups = "fraud-lookups"
        case groupRooms = "group-rooms"
        case groupRoomsDataTrack = "group-rooms-data-track"
        case groupRoomsEncryptedMediaRecorded = "group-rooms-encrypted-media-recorded"
        case groupRoomsMediaDownloaded = "group-rooms-media-downloaded"
        case groupRoomsMediaRecorded = "group-rooms-media-recorded"
        case groupRoomsMediaRouted = "group-rooms-media-routed"
        case groupRoomsMediaStored = "group-rooms-media-stored"
        case groupRoomsParticipantMinutes = "group-rooms-participant-minutes"
        case groupRoomsRecordedMinutes = "group-rooms-recorded-minutes"
        case impV1Usage = "imp-v1-usage"
        case lookups
        case marketplace
        case marketplaceAlgorithmiaNamedEntityRecognition = "marketplace-algorithmia-named-entity-recognition"
        case marketplaceCadenceTranscription = "marketplace-cadence-transcription"
        case marketplaceCadenceTranslation = "marketplace-cadence-translation"
        case marketplaceCapioSpeechToText = "marketplace-capio-speech-to-text"
        case marketplaceConvrizaAbaba = "marketplace-convriza-ababa"
        case marketplaceDeepgramPhraseDetector = "marketplace-deepgram-phrase-detector"
        case marketplaceDigitalSegmentBusinessInfo = "marketplace-digital-segment-business-info"
        case marketplaceFacebookOfflineConversions = "marketplace-facebook-offline-conversions"
        case marketplaceGoogleSpeechToText = "marketplace-google-speech-to-text"
        case marketplaceIbmWatsonMessageInsights = "marketplace-ibm-watson-message-insights"
        case marketplaceIbmWatsonMessageSentiment = "marketplace-ibm-watson-message-sentiment"
        case marketplaceIbmWatsonRecordingAnalysis = "marketplace-ibm-watson-recording-analysis"
        case marketplaceIbmWatsonToneAnalyzer = "marketplace-ibm-watson-tone-analyzer"
        case marketplaceIcehookSystemsScout = "marketplace-icehook-systems-scout"
        case marketplaceInfogroupDataaxleBizinfo = "marketplace-infogroup-dataaxle-bizinfo"
        case marketplaceKeenIoContactCenterAnalytics = "marketplace-keen-io-contact-center-analytics"
        case marketplaceMarchexCleancall = "marketplace-marchex-cleancall"
        case marketplaceMarchexSentimentAnalysisForSms = "marketplace-marchex-sentiment-analysis-for-sms"
        case marketplaceMarketplaceNextcallerSocialID = "marketplace-marketplace-nextcaller-social-id"
        case marketplaceMobileCommonsOptOutClassifier = "marketplace-mobile-commons-opt-out-classifier"
        case marketplaceNexiwaveVoicemailToText = "marketplace-nexiwave-voicemail-to-text"
        case marketplaceNextcallerAdvancedCallerIdentification = "marketplace-nextcaller-advanced-caller-identification"
        case marketplaceNomoroboSpamScore = "marketplace-nomorobo-spam-score"
        case marketplacePayfoneTcpaCompliance = "marketplace-payfone-tcpa-compliance"
        case marketplaceRemeetingAutomaticSpeechRecognition = "marketplace-remeeting-automatic-speech-recognition"
        case marketplaceTcpaDefenseSolutionsBlacklistFeed = "marketplace-tcpa-defense-solutions-blacklist-feed"
        case marketplaceTeloOpencnam = "marketplace-telo-opencnam"
        case marketplaceTruecnamTrueSpam = "marketplace-truecnam-true-spam"
        case marketplaceTwilioCallerNameLookupUs = "marketplace-twilio-caller-name-lookup-us"
        case marketplaceTwilioCarrierInformationLookup = "marketplace-twilio-carrier-information-lookup"
        case marketplaceVoicebasePci = "marketplace-voicebase-pci"
        case marketplaceVoicebaseTranscription = "marketplace-voicebase-transcription"
        case marketplaceVoicebaseTranscriptionCustomVocabulary = "marketplace-voicebase-transcription-custom-vocabulary"
        case marketplaceWhitepagesProCallerIdentification = "marketplace-whitepages-pro-caller-identification"
        case marketplaceWhitepagesProPhoneIntelligence = "marketplace-whitepages-pro-phone-intelligence"
        case marketplaceWhitepagesProPhoneReputation = "marketplace-whitepages-pro-phone-reputation"
        case marketplaceWolfarmSpokenResults = "marketplace-wolfarm-spoken-results"
        case marketplaceWolframShortAnswer = "marketplace-wolfram-short-answer"
        case marketplaceYticaContactCenterReportingAnalytics = "marketplace-ytica-contact-center-reporting-analytics"
        case mediastorage
        case mms
        case mmsInbound = "mms-inbound"
        case mmsInboundLongcode = "mms-inbound-longcode"
        case mmsInboundShortcode = "mms-inbound-shortcode"
        case mmsMessagesCarrierfees = "mms-messages-carrierfees"
        case mmsOutbound = "mms-outbound"
        case mmsOutboundLongcode = "mms-outbound-longcode"
        case mmsOutboundShortcode = "mms-outbound-shortcode"
        case monitorReads = "monitor-reads"
        case monitorStorage = "monitor-storage"
        case monitorWrites = "monitor-writes"
        case notify
        case notifyActionsAttempts = "notify-actions-attempts"
        case notifyChannels = "notify-channels"
        case numberFormatLookups = "number-format-lookups"
        case pchat
        case pchatUsers = "pchat-users"
        case peerToPeerRoomsParticipantMinutes = "peer-to-peer-rooms-participant-minutes"
        case pfax
        case pfaxMinutes = "pfax-minutes"
        case pfaxMinutesInbound = "pfax-minutes-inbound"
        case pfaxMinutesOutbound = "pfax-minutes-outbound"
        case pfaxPages = "pfax-pages"
        case phonenumbers
        case phonenumbersCps = "phonenumbers-cps"
        case phonenumbersEmergency = "phonenumbers-emergency"
        case phonenumbersLocal = "phonenumbers-local"
        case phonenumbersMobile = "phonenumbers-mobile"
        case phonenumbersSetups = "phonenumbers-setups"
        case phonenumbersTollfree = "phonenumbers-tollfree"
        case premiumsupport
        case proxy
        case proxyActiveSessions = "proxy-active-sessions"
        case pstnconnectivity
        case pv
        case pvCompositionMediaDownloaded = "pv-composition-media-downloaded"
        case pvCompositionMediaEncrypted = "pv-composition-media-encrypted"
        case pvCompositionMediaStored = "pv-composition-media-stored"
        case pvCompositionMinutes = "pv-composition-minutes"
        case pvRecordingCompositions = "pv-recording-compositions"
        case pvRoomParticipants = "pv-room-participants"
        case pvRoomParticipantsAu1 = "pv-room-participants-au1"
        case pvRoomParticipantsBr1 = "pv-room-participants-br1"
        case pvRoomParticipantsIe1 = "pv-room-participants-ie1"
        case pvRoomParticipantsJp1 = "pv-room-participants-jp1"
        case pvRoomParticipantsSg1 = "pv-room-participants-sg1"
        case pvRoomParticipantsUs1 = "pv-room-participants-us1"
        case pvRoomParticipantsUs2 = "pv-room-participants-us2"
        case pvRooms = "pv-rooms"
        case pvSipEndpointRegistrations = "pv-sip-endpoint-registrations"
        case recordings
        case recordingstorage
        case roomsGroupBandwidth = "rooms-group-bandwidth"
        case roomsGroupMinutes = "rooms-group-minutes"
        case roomsPeerToPeerMinutes = "rooms-peer-to-peer-minutes"
        case shortcodes
        case shortcodesCustomerowned = "shortcodes-customerowned"
        case shortcodesMmsEnablement = "shortcodes-mms-enablement"
        case shortcodesMps = "shortcodes-mps"
        case shortcodesRandom = "shortcodes-random"
        case shortcodesUk = "shortcodes-uk"
        case shortcodesVanity = "shortcodes-vanity"
        case smallGroupRooms = "small-group-rooms"
        case smallGroupRoomsDataTrack = "small-group-rooms-data-track"
        case smallGroupRoomsParticipantMinutes = "small-group-rooms-participant-minutes"
        case sms
        case smsInbound = "sms-inbound"
        case smsInboundLongcode = "sms-inbound-longcode"
        case smsInboundShortcode = "sms-inbound-shortcode"
        case smsMessagesCarrierfees = "sms-messages-carrierfees"
        case smsMessagesFeatures = "sms-messages-features"
        case smsMessagesFeaturesSenderid = "sms-messages-features-senderid"
        case smsOutbound = "sms-outbound"
        case smsOutboundContentInspection = "sms-outbound-content-inspection"
        case smsOutboundLongcode = "sms-outbound-longcode"
        case smsOutboundShortcode = "sms-outbound-shortcode"
        case speechRecognition = "speech-recognition"
        case studioEngagements = "studio-engagements"
        case sync
        case syncActions = "sync-actions"
        case syncEndpointHours = "sync-endpoint-hours"
        case syncEndpointHoursAboveDailyCap = "sync-endpoint-hours-above-daily-cap"
        case taskrouterTasks = "taskrouter-tasks"
        case totalprice
        case transcriptions
        case trunkingCps = "trunking-cps"
        case trunkingEmergencyCalls = "trunking-emergency-calls"
        case trunkingOrigination = "trunking-origination"
        case trunkingOriginationLocal = "trunking-origination-local"
        case trunkingOriginationMobile = "trunking-origination-mobile"
        case trunkingOriginationTollfree = "trunking-origination-tollfree"
        case trunkingRecordings = "trunking-recordings"
        case trunkingSecure = "trunking-secure"
        case trunkingTermination = "trunking-termination"
        case turnmegabytes
        case turnmegabytesAustralia = "turnmegabytes-australia"
        case turnmegabytesBrasil = "turnmegabytes-brasil"
        case turnmegabytesGermany = "turnmegabytes-germany"
        case turnmegabytesIndia = "turnmegabytes-india"
        case turnmegabytesIreland = "turnmegabytes-ireland"
        case turnmegabytesJapan = "turnmegabytes-japan"
        case turnmegabytesSingapore = "turnmegabytes-singapore"
        case turnmegabytesUseast = "turnmegabytes-useast"
        case turnmegabytesUswest = "turnmegabytes-uswest"
        case twilioInterconnect = "twilio-interconnect"
        case verifyPush = "verify-push"
        case videoRecordings = "video-recordings"
        case voiceInsights = "voice-insights"
        case voiceInsightsClientInsightsOnDemandMinute = "voice-insights-client-insights-on-demand-minute"
        case voiceInsightsPtsnInsightsOnDemandMinute = "voice-insights-ptsn-insights-on-demand-minute"
        case voiceInsightsSipInterfaceInsightsOnDemandMinute = "voice-insights-sip-interface-insights-on-demand-minute"
        case voiceInsightsSipTrunkingInsightsOnDemandMinute = "voice-insights-sip-trunking-insights-on-demand-minute"
        case wireless
        case wirelessOrders = "wireless-orders"
        case wirelessOrdersArtwork = "wireless-orders-artwork"
        case wirelessOrdersBulk = "wireless-orders-bulk"
        case wirelessOrdersEsim = "wireless-orders-esim"
        case wirelessOrdersStarter = "wireless-orders-starter"
        case wirelessUsage = "wireless-usage"
        case wirelessUsageCommands = "wireless-usage-commands"
        case wirelessUsageCommandsAfrica = "wireless-usage-commands-africa"
        case wirelessUsageCommandsAsia = "wireless-usage-commands-asia"
        case wirelessUsageCommandsCentralandsouthamerica = "wireless-usage-commands-centralandsouthamerica"
        case wirelessUsageCommandsEurope = "wireless-usage-commands-europe"
        case wirelessUsageCommandsHome = "wireless-usage-commands-home"
        case wirelessUsageCommandsNorthamerica = "wireless-usage-commands-northamerica"
        case wirelessUsageCommandsOceania = "wireless-usage-commands-oceania"
        case wirelessUsageCommandsRoaming = "wireless-usage-commands-roaming"
        case wirelessUsageData = "wireless-usage-data"
        case wirelessUsageDataAfrica = "wireless-usage-data-africa"
        case wirelessUsageDataAsia = "wireless-usage-data-asia"
        case wirelessUsageDataCentralandsouthamerica = "wireless-usage-data-centralandsouthamerica"
        case wirelessUsageDataCustomAdditionalmb = "wireless-usage-data-custom-additionalmb"
        case wirelessUsageDataCustomFirst5mb = "wireless-usage-data-custom-first5mb"
        case wirelessUsageDataDomesticRoaming = "wireless-usage-data-domestic-roaming"
        case wirelessUsageDataEurope = "wireless-usage-data-europe"
        case wirelessUsageDataIndividualAdditionalgb = "wireless-usage-data-individual-additionalgb"
        case wirelessUsageDataIndividualFirstgb = "wireless-usage-data-individual-firstgb"
        case wirelessUsageDataInternationalRoamingCanada = "wireless-usage-data-international-roaming-canada"
        case wirelessUsageDataInternationalRoamingIndia = "wireless-usage-data-international-roaming-india"
        case wirelessUsageDataInternationalRoamingMexico = "wireless-usage-data-international-roaming-mexico"
        case wirelessUsageDataNorthamerica = "wireless-usage-data-northamerica"
        case wirelessUsageDataOceania = "wireless-usage-data-oceania"
        case wirelessUsageDataPooled = "wireless-usage-data-pooled"
        case wirelessUsageDataPooledDownlink = "wireless-usage-data-pooled-downlink"
        case wirelessUsageDataPooledUplink = "wireless-usage-data-pooled-uplink"
        case wirelessUsageMrc = "wireless-usage-mrc"
        case wirelessUsageMrcCustom = "wireless-usage-mrc-custom"
        case wirelessUsageMrcIndividual = "wireless-usage-mrc-individual"
        case wirelessUsageMrcPooled = "wireless-usage-mrc-pooled"
        case wirelessUsageMrcSuspended = "wireless-usage-mrc-suspended"
        case wirelessUsageSms = "wireless-usage-sms"
        case wirelessUsageVoice = "wireless-usage-voice"
    }

    public init(accountSid: String? = nil, apiVersion: String? = nil, asOf: String? = nil, category: Category? = nil, count: String? = nil, countUnit: String? = nil, description: String? = nil, endDate: NaiveDate? = nil, price: Double? = nil, priceUnit: String? = nil, startDate: NaiveDate? = nil, subresourceUris: [String: AnyJSON]? = nil, uri: URL? = nil, usage: String? = nil, usageUnit: String? = nil) {
        self.accountSid = accountSid
        self.apiVersion = apiVersion
        self.asOf = asOf
        self.category = category
        self.count = count
        self.countUnit = countUnit
        self.description = description
        self.endDate = endDate
        self.price = price
        self.priceUnit = priceUnit
        self.startDate = startDate
        self.subresourceUris = subresourceUris
        self.uri = uri
        self.usage = usage
        self.usageUnit = usageUnit
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case apiVersion = "api_version"
        case asOf = "as_of"
        case category
        case count
        case countUnit = "count_unit"
        case description
        case endDate = "end_date"
        case price
        case priceUnit = "price_unit"
        case startDate = "start_date"
        case subresourceUris = "subresource_uris"
        case uri
        case usage
        case usageUnit = "usage_unit"
    }
}

public struct APIV2010AccountUsageUsageRecordUsageRecordThisMonth: Codable {
    /// The SID of the Account accrued the usage
    public var accountSid: String?
    /// The API version used to create the resource
    public var apiVersion: String?
    /// Usage records up to date as of this timestamp
    public var asOf: String?
    /// The category of usage
    public var category: Category?
    /// The number of usage events
    public var count: String?
    /// The units in which count is measured
    public var countUnit: String?
    /// A plain-language description of the usage category
    public var description: String?
    /// The last date for which usage is included in the UsageRecord
    public var endDate: NaiveDate?
    /// The total price of the usage
    public var price: Double?
    /// The currency in which `price` is measured
    public var priceUnit: String?
    /// The first date for which usage is included in this UsageRecord
    public var startDate: NaiveDate?
    /// A list of related resources identified by their relative URIs
    public var subresourceUris: [String: AnyJSON]?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?
    /// The amount of usage
    public var usage: String?
    /// The units in which usage is measured
    public var usageUnit: String?

    /// The category of usage
    public enum Category: String, Codable, CaseIterable {
        case agentConference = "agent-conference"
        case answeringMachineDetection = "answering-machine-detection"
        case authyAuthentications = "authy-authentications"
        case authyCallsOutbound = "authy-calls-outbound"
        case authyMonthlyFees = "authy-monthly-fees"
        case authyPhoneIntelligence = "authy-phone-intelligence"
        case authyPhoneVerifications = "authy-phone-verifications"
        case authySmsOutbound = "authy-sms-outbound"
        case callProgessEvents = "call-progess-events"
        case calleridlookups
        case calls
        case callsClient = "calls-client"
        case callsGlobalconference = "calls-globalconference"
        case callsInbound = "calls-inbound"
        case callsInboundLocal = "calls-inbound-local"
        case callsInboundMobile = "calls-inbound-mobile"
        case callsInboundTollfree = "calls-inbound-tollfree"
        case callsOutbound = "calls-outbound"
        case callsPayVerbTransactions = "calls-pay-verb-transactions"
        case callsRecordings = "calls-recordings"
        case callsSip = "calls-sip"
        case callsSipInbound = "calls-sip-inbound"
        case callsSipOutbound = "calls-sip-outbound"
        case callsTransfers = "calls-transfers"
        case carrierLookups = "carrier-lookups"
        case conversations
        case conversationsAPIRequests = "conversations-api-requests"
        case conversationsConversationEvents = "conversations-conversation-events"
        case conversationsEndpointConnectivity = "conversations-endpoint-connectivity"
        case conversationsEvents = "conversations-events"
        case conversationsParticipantEvents = "conversations-participant-events"
        case conversationsParticipants = "conversations-participants"
        case cps
        case flexUsage = "flex-usage"
        case fraudLookups = "fraud-lookups"
        case groupRooms = "group-rooms"
        case groupRoomsDataTrack = "group-rooms-data-track"
        case groupRoomsEncryptedMediaRecorded = "group-rooms-encrypted-media-recorded"
        case groupRoomsMediaDownloaded = "group-rooms-media-downloaded"
        case groupRoomsMediaRecorded = "group-rooms-media-recorded"
        case groupRoomsMediaRouted = "group-rooms-media-routed"
        case groupRoomsMediaStored = "group-rooms-media-stored"
        case groupRoomsParticipantMinutes = "group-rooms-participant-minutes"
        case groupRoomsRecordedMinutes = "group-rooms-recorded-minutes"
        case impV1Usage = "imp-v1-usage"
        case lookups
        case marketplace
        case marketplaceAlgorithmiaNamedEntityRecognition = "marketplace-algorithmia-named-entity-recognition"
        case marketplaceCadenceTranscription = "marketplace-cadence-transcription"
        case marketplaceCadenceTranslation = "marketplace-cadence-translation"
        case marketplaceCapioSpeechToText = "marketplace-capio-speech-to-text"
        case marketplaceConvrizaAbaba = "marketplace-convriza-ababa"
        case marketplaceDeepgramPhraseDetector = "marketplace-deepgram-phrase-detector"
        case marketplaceDigitalSegmentBusinessInfo = "marketplace-digital-segment-business-info"
        case marketplaceFacebookOfflineConversions = "marketplace-facebook-offline-conversions"
        case marketplaceGoogleSpeechToText = "marketplace-google-speech-to-text"
        case marketplaceIbmWatsonMessageInsights = "marketplace-ibm-watson-message-insights"
        case marketplaceIbmWatsonMessageSentiment = "marketplace-ibm-watson-message-sentiment"
        case marketplaceIbmWatsonRecordingAnalysis = "marketplace-ibm-watson-recording-analysis"
        case marketplaceIbmWatsonToneAnalyzer = "marketplace-ibm-watson-tone-analyzer"
        case marketplaceIcehookSystemsScout = "marketplace-icehook-systems-scout"
        case marketplaceInfogroupDataaxleBizinfo = "marketplace-infogroup-dataaxle-bizinfo"
        case marketplaceKeenIoContactCenterAnalytics = "marketplace-keen-io-contact-center-analytics"
        case marketplaceMarchexCleancall = "marketplace-marchex-cleancall"
        case marketplaceMarchexSentimentAnalysisForSms = "marketplace-marchex-sentiment-analysis-for-sms"
        case marketplaceMarketplaceNextcallerSocialID = "marketplace-marketplace-nextcaller-social-id"
        case marketplaceMobileCommonsOptOutClassifier = "marketplace-mobile-commons-opt-out-classifier"
        case marketplaceNexiwaveVoicemailToText = "marketplace-nexiwave-voicemail-to-text"
        case marketplaceNextcallerAdvancedCallerIdentification = "marketplace-nextcaller-advanced-caller-identification"
        case marketplaceNomoroboSpamScore = "marketplace-nomorobo-spam-score"
        case marketplacePayfoneTcpaCompliance = "marketplace-payfone-tcpa-compliance"
        case marketplaceRemeetingAutomaticSpeechRecognition = "marketplace-remeeting-automatic-speech-recognition"
        case marketplaceTcpaDefenseSolutionsBlacklistFeed = "marketplace-tcpa-defense-solutions-blacklist-feed"
        case marketplaceTeloOpencnam = "marketplace-telo-opencnam"
        case marketplaceTruecnamTrueSpam = "marketplace-truecnam-true-spam"
        case marketplaceTwilioCallerNameLookupUs = "marketplace-twilio-caller-name-lookup-us"
        case marketplaceTwilioCarrierInformationLookup = "marketplace-twilio-carrier-information-lookup"
        case marketplaceVoicebasePci = "marketplace-voicebase-pci"
        case marketplaceVoicebaseTranscription = "marketplace-voicebase-transcription"
        case marketplaceVoicebaseTranscriptionCustomVocabulary = "marketplace-voicebase-transcription-custom-vocabulary"
        case marketplaceWhitepagesProCallerIdentification = "marketplace-whitepages-pro-caller-identification"
        case marketplaceWhitepagesProPhoneIntelligence = "marketplace-whitepages-pro-phone-intelligence"
        case marketplaceWhitepagesProPhoneReputation = "marketplace-whitepages-pro-phone-reputation"
        case marketplaceWolfarmSpokenResults = "marketplace-wolfarm-spoken-results"
        case marketplaceWolframShortAnswer = "marketplace-wolfram-short-answer"
        case marketplaceYticaContactCenterReportingAnalytics = "marketplace-ytica-contact-center-reporting-analytics"
        case mediastorage
        case mms
        case mmsInbound = "mms-inbound"
        case mmsInboundLongcode = "mms-inbound-longcode"
        case mmsInboundShortcode = "mms-inbound-shortcode"
        case mmsMessagesCarrierfees = "mms-messages-carrierfees"
        case mmsOutbound = "mms-outbound"
        case mmsOutboundLongcode = "mms-outbound-longcode"
        case mmsOutboundShortcode = "mms-outbound-shortcode"
        case monitorReads = "monitor-reads"
        case monitorStorage = "monitor-storage"
        case monitorWrites = "monitor-writes"
        case notify
        case notifyActionsAttempts = "notify-actions-attempts"
        case notifyChannels = "notify-channels"
        case numberFormatLookups = "number-format-lookups"
        case pchat
        case pchatUsers = "pchat-users"
        case peerToPeerRoomsParticipantMinutes = "peer-to-peer-rooms-participant-minutes"
        case pfax
        case pfaxMinutes = "pfax-minutes"
        case pfaxMinutesInbound = "pfax-minutes-inbound"
        case pfaxMinutesOutbound = "pfax-minutes-outbound"
        case pfaxPages = "pfax-pages"
        case phonenumbers
        case phonenumbersCps = "phonenumbers-cps"
        case phonenumbersEmergency = "phonenumbers-emergency"
        case phonenumbersLocal = "phonenumbers-local"
        case phonenumbersMobile = "phonenumbers-mobile"
        case phonenumbersSetups = "phonenumbers-setups"
        case phonenumbersTollfree = "phonenumbers-tollfree"
        case premiumsupport
        case proxy
        case proxyActiveSessions = "proxy-active-sessions"
        case pstnconnectivity
        case pv
        case pvCompositionMediaDownloaded = "pv-composition-media-downloaded"
        case pvCompositionMediaEncrypted = "pv-composition-media-encrypted"
        case pvCompositionMediaStored = "pv-composition-media-stored"
        case pvCompositionMinutes = "pv-composition-minutes"
        case pvRecordingCompositions = "pv-recording-compositions"
        case pvRoomParticipants = "pv-room-participants"
        case pvRoomParticipantsAu1 = "pv-room-participants-au1"
        case pvRoomParticipantsBr1 = "pv-room-participants-br1"
        case pvRoomParticipantsIe1 = "pv-room-participants-ie1"
        case pvRoomParticipantsJp1 = "pv-room-participants-jp1"
        case pvRoomParticipantsSg1 = "pv-room-participants-sg1"
        case pvRoomParticipantsUs1 = "pv-room-participants-us1"
        case pvRoomParticipantsUs2 = "pv-room-participants-us2"
        case pvRooms = "pv-rooms"
        case pvSipEndpointRegistrations = "pv-sip-endpoint-registrations"
        case recordings
        case recordingstorage
        case roomsGroupBandwidth = "rooms-group-bandwidth"
        case roomsGroupMinutes = "rooms-group-minutes"
        case roomsPeerToPeerMinutes = "rooms-peer-to-peer-minutes"
        case shortcodes
        case shortcodesCustomerowned = "shortcodes-customerowned"
        case shortcodesMmsEnablement = "shortcodes-mms-enablement"
        case shortcodesMps = "shortcodes-mps"
        case shortcodesRandom = "shortcodes-random"
        case shortcodesUk = "shortcodes-uk"
        case shortcodesVanity = "shortcodes-vanity"
        case smallGroupRooms = "small-group-rooms"
        case smallGroupRoomsDataTrack = "small-group-rooms-data-track"
        case smallGroupRoomsParticipantMinutes = "small-group-rooms-participant-minutes"
        case sms
        case smsInbound = "sms-inbound"
        case smsInboundLongcode = "sms-inbound-longcode"
        case smsInboundShortcode = "sms-inbound-shortcode"
        case smsMessagesCarrierfees = "sms-messages-carrierfees"
        case smsMessagesFeatures = "sms-messages-features"
        case smsMessagesFeaturesSenderid = "sms-messages-features-senderid"
        case smsOutbound = "sms-outbound"
        case smsOutboundContentInspection = "sms-outbound-content-inspection"
        case smsOutboundLongcode = "sms-outbound-longcode"
        case smsOutboundShortcode = "sms-outbound-shortcode"
        case speechRecognition = "speech-recognition"
        case studioEngagements = "studio-engagements"
        case sync
        case syncActions = "sync-actions"
        case syncEndpointHours = "sync-endpoint-hours"
        case syncEndpointHoursAboveDailyCap = "sync-endpoint-hours-above-daily-cap"
        case taskrouterTasks = "taskrouter-tasks"
        case totalprice
        case transcriptions
        case trunkingCps = "trunking-cps"
        case trunkingEmergencyCalls = "trunking-emergency-calls"
        case trunkingOrigination = "trunking-origination"
        case trunkingOriginationLocal = "trunking-origination-local"
        case trunkingOriginationMobile = "trunking-origination-mobile"
        case trunkingOriginationTollfree = "trunking-origination-tollfree"
        case trunkingRecordings = "trunking-recordings"
        case trunkingSecure = "trunking-secure"
        case trunkingTermination = "trunking-termination"
        case turnmegabytes
        case turnmegabytesAustralia = "turnmegabytes-australia"
        case turnmegabytesBrasil = "turnmegabytes-brasil"
        case turnmegabytesGermany = "turnmegabytes-germany"
        case turnmegabytesIndia = "turnmegabytes-india"
        case turnmegabytesIreland = "turnmegabytes-ireland"
        case turnmegabytesJapan = "turnmegabytes-japan"
        case turnmegabytesSingapore = "turnmegabytes-singapore"
        case turnmegabytesUseast = "turnmegabytes-useast"
        case turnmegabytesUswest = "turnmegabytes-uswest"
        case twilioInterconnect = "twilio-interconnect"
        case verifyPush = "verify-push"
        case videoRecordings = "video-recordings"
        case voiceInsights = "voice-insights"
        case voiceInsightsClientInsightsOnDemandMinute = "voice-insights-client-insights-on-demand-minute"
        case voiceInsightsPtsnInsightsOnDemandMinute = "voice-insights-ptsn-insights-on-demand-minute"
        case voiceInsightsSipInterfaceInsightsOnDemandMinute = "voice-insights-sip-interface-insights-on-demand-minute"
        case voiceInsightsSipTrunkingInsightsOnDemandMinute = "voice-insights-sip-trunking-insights-on-demand-minute"
        case wireless
        case wirelessOrders = "wireless-orders"
        case wirelessOrdersArtwork = "wireless-orders-artwork"
        case wirelessOrdersBulk = "wireless-orders-bulk"
        case wirelessOrdersEsim = "wireless-orders-esim"
        case wirelessOrdersStarter = "wireless-orders-starter"
        case wirelessUsage = "wireless-usage"
        case wirelessUsageCommands = "wireless-usage-commands"
        case wirelessUsageCommandsAfrica = "wireless-usage-commands-africa"
        case wirelessUsageCommandsAsia = "wireless-usage-commands-asia"
        case wirelessUsageCommandsCentralandsouthamerica = "wireless-usage-commands-centralandsouthamerica"
        case wirelessUsageCommandsEurope = "wireless-usage-commands-europe"
        case wirelessUsageCommandsHome = "wireless-usage-commands-home"
        case wirelessUsageCommandsNorthamerica = "wireless-usage-commands-northamerica"
        case wirelessUsageCommandsOceania = "wireless-usage-commands-oceania"
        case wirelessUsageCommandsRoaming = "wireless-usage-commands-roaming"
        case wirelessUsageData = "wireless-usage-data"
        case wirelessUsageDataAfrica = "wireless-usage-data-africa"
        case wirelessUsageDataAsia = "wireless-usage-data-asia"
        case wirelessUsageDataCentralandsouthamerica = "wireless-usage-data-centralandsouthamerica"
        case wirelessUsageDataCustomAdditionalmb = "wireless-usage-data-custom-additionalmb"
        case wirelessUsageDataCustomFirst5mb = "wireless-usage-data-custom-first5mb"
        case wirelessUsageDataDomesticRoaming = "wireless-usage-data-domestic-roaming"
        case wirelessUsageDataEurope = "wireless-usage-data-europe"
        case wirelessUsageDataIndividualAdditionalgb = "wireless-usage-data-individual-additionalgb"
        case wirelessUsageDataIndividualFirstgb = "wireless-usage-data-individual-firstgb"
        case wirelessUsageDataInternationalRoamingCanada = "wireless-usage-data-international-roaming-canada"
        case wirelessUsageDataInternationalRoamingIndia = "wireless-usage-data-international-roaming-india"
        case wirelessUsageDataInternationalRoamingMexico = "wireless-usage-data-international-roaming-mexico"
        case wirelessUsageDataNorthamerica = "wireless-usage-data-northamerica"
        case wirelessUsageDataOceania = "wireless-usage-data-oceania"
        case wirelessUsageDataPooled = "wireless-usage-data-pooled"
        case wirelessUsageDataPooledDownlink = "wireless-usage-data-pooled-downlink"
        case wirelessUsageDataPooledUplink = "wireless-usage-data-pooled-uplink"
        case wirelessUsageMrc = "wireless-usage-mrc"
        case wirelessUsageMrcCustom = "wireless-usage-mrc-custom"
        case wirelessUsageMrcIndividual = "wireless-usage-mrc-individual"
        case wirelessUsageMrcPooled = "wireless-usage-mrc-pooled"
        case wirelessUsageMrcSuspended = "wireless-usage-mrc-suspended"
        case wirelessUsageSms = "wireless-usage-sms"
        case wirelessUsageVoice = "wireless-usage-voice"
    }

    public init(accountSid: String? = nil, apiVersion: String? = nil, asOf: String? = nil, category: Category? = nil, count: String? = nil, countUnit: String? = nil, description: String? = nil, endDate: NaiveDate? = nil, price: Double? = nil, priceUnit: String? = nil, startDate: NaiveDate? = nil, subresourceUris: [String: AnyJSON]? = nil, uri: URL? = nil, usage: String? = nil, usageUnit: String? = nil) {
        self.accountSid = accountSid
        self.apiVersion = apiVersion
        self.asOf = asOf
        self.category = category
        self.count = count
        self.countUnit = countUnit
        self.description = description
        self.endDate = endDate
        self.price = price
        self.priceUnit = priceUnit
        self.startDate = startDate
        self.subresourceUris = subresourceUris
        self.uri = uri
        self.usage = usage
        self.usageUnit = usageUnit
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case apiVersion = "api_version"
        case asOf = "as_of"
        case category
        case count
        case countUnit = "count_unit"
        case description
        case endDate = "end_date"
        case price
        case priceUnit = "price_unit"
        case startDate = "start_date"
        case subresourceUris = "subresource_uris"
        case uri
        case usage
        case usageUnit = "usage_unit"
    }
}

public struct APIV2010AccountUsageUsageRecordUsageRecordToday: Codable {
    /// The SID of the Account accrued the usage
    public var accountSid: String?
    /// The API version used to create the resource
    public var apiVersion: String?
    /// Usage records up to date as of this timestamp
    public var asOf: String?
    /// The category of usage
    public var category: Category?
    /// The number of usage events
    public var count: String?
    /// The units in which count is measured
    public var countUnit: String?
    /// A plain-language description of the usage category
    public var description: String?
    /// The last date for which usage is included in the UsageRecord
    public var endDate: NaiveDate?
    /// The total price of the usage
    public var price: Double?
    /// The currency in which `price` is measured
    public var priceUnit: String?
    /// The first date for which usage is included in this UsageRecord
    public var startDate: NaiveDate?
    /// A list of related resources identified by their relative URIs
    public var subresourceUris: [String: AnyJSON]?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?
    /// The amount of usage
    public var usage: String?
    /// The units in which usage is measured
    public var usageUnit: String?

    /// The category of usage
    public enum Category: String, Codable, CaseIterable {
        case agentConference = "agent-conference"
        case answeringMachineDetection = "answering-machine-detection"
        case authyAuthentications = "authy-authentications"
        case authyCallsOutbound = "authy-calls-outbound"
        case authyMonthlyFees = "authy-monthly-fees"
        case authyPhoneIntelligence = "authy-phone-intelligence"
        case authyPhoneVerifications = "authy-phone-verifications"
        case authySmsOutbound = "authy-sms-outbound"
        case callProgessEvents = "call-progess-events"
        case calleridlookups
        case calls
        case callsClient = "calls-client"
        case callsGlobalconference = "calls-globalconference"
        case callsInbound = "calls-inbound"
        case callsInboundLocal = "calls-inbound-local"
        case callsInboundMobile = "calls-inbound-mobile"
        case callsInboundTollfree = "calls-inbound-tollfree"
        case callsOutbound = "calls-outbound"
        case callsPayVerbTransactions = "calls-pay-verb-transactions"
        case callsRecordings = "calls-recordings"
        case callsSip = "calls-sip"
        case callsSipInbound = "calls-sip-inbound"
        case callsSipOutbound = "calls-sip-outbound"
        case callsTransfers = "calls-transfers"
        case carrierLookups = "carrier-lookups"
        case conversations
        case conversationsAPIRequests = "conversations-api-requests"
        case conversationsConversationEvents = "conversations-conversation-events"
        case conversationsEndpointConnectivity = "conversations-endpoint-connectivity"
        case conversationsEvents = "conversations-events"
        case conversationsParticipantEvents = "conversations-participant-events"
        case conversationsParticipants = "conversations-participants"
        case cps
        case flexUsage = "flex-usage"
        case fraudLookups = "fraud-lookups"
        case groupRooms = "group-rooms"
        case groupRoomsDataTrack = "group-rooms-data-track"
        case groupRoomsEncryptedMediaRecorded = "group-rooms-encrypted-media-recorded"
        case groupRoomsMediaDownloaded = "group-rooms-media-downloaded"
        case groupRoomsMediaRecorded = "group-rooms-media-recorded"
        case groupRoomsMediaRouted = "group-rooms-media-routed"
        case groupRoomsMediaStored = "group-rooms-media-stored"
        case groupRoomsParticipantMinutes = "group-rooms-participant-minutes"
        case groupRoomsRecordedMinutes = "group-rooms-recorded-minutes"
        case impV1Usage = "imp-v1-usage"
        case lookups
        case marketplace
        case marketplaceAlgorithmiaNamedEntityRecognition = "marketplace-algorithmia-named-entity-recognition"
        case marketplaceCadenceTranscription = "marketplace-cadence-transcription"
        case marketplaceCadenceTranslation = "marketplace-cadence-translation"
        case marketplaceCapioSpeechToText = "marketplace-capio-speech-to-text"
        case marketplaceConvrizaAbaba = "marketplace-convriza-ababa"
        case marketplaceDeepgramPhraseDetector = "marketplace-deepgram-phrase-detector"
        case marketplaceDigitalSegmentBusinessInfo = "marketplace-digital-segment-business-info"
        case marketplaceFacebookOfflineConversions = "marketplace-facebook-offline-conversions"
        case marketplaceGoogleSpeechToText = "marketplace-google-speech-to-text"
        case marketplaceIbmWatsonMessageInsights = "marketplace-ibm-watson-message-insights"
        case marketplaceIbmWatsonMessageSentiment = "marketplace-ibm-watson-message-sentiment"
        case marketplaceIbmWatsonRecordingAnalysis = "marketplace-ibm-watson-recording-analysis"
        case marketplaceIbmWatsonToneAnalyzer = "marketplace-ibm-watson-tone-analyzer"
        case marketplaceIcehookSystemsScout = "marketplace-icehook-systems-scout"
        case marketplaceInfogroupDataaxleBizinfo = "marketplace-infogroup-dataaxle-bizinfo"
        case marketplaceKeenIoContactCenterAnalytics = "marketplace-keen-io-contact-center-analytics"
        case marketplaceMarchexCleancall = "marketplace-marchex-cleancall"
        case marketplaceMarchexSentimentAnalysisForSms = "marketplace-marchex-sentiment-analysis-for-sms"
        case marketplaceMarketplaceNextcallerSocialID = "marketplace-marketplace-nextcaller-social-id"
        case marketplaceMobileCommonsOptOutClassifier = "marketplace-mobile-commons-opt-out-classifier"
        case marketplaceNexiwaveVoicemailToText = "marketplace-nexiwave-voicemail-to-text"
        case marketplaceNextcallerAdvancedCallerIdentification = "marketplace-nextcaller-advanced-caller-identification"
        case marketplaceNomoroboSpamScore = "marketplace-nomorobo-spam-score"
        case marketplacePayfoneTcpaCompliance = "marketplace-payfone-tcpa-compliance"
        case marketplaceRemeetingAutomaticSpeechRecognition = "marketplace-remeeting-automatic-speech-recognition"
        case marketplaceTcpaDefenseSolutionsBlacklistFeed = "marketplace-tcpa-defense-solutions-blacklist-feed"
        case marketplaceTeloOpencnam = "marketplace-telo-opencnam"
        case marketplaceTruecnamTrueSpam = "marketplace-truecnam-true-spam"
        case marketplaceTwilioCallerNameLookupUs = "marketplace-twilio-caller-name-lookup-us"
        case marketplaceTwilioCarrierInformationLookup = "marketplace-twilio-carrier-information-lookup"
        case marketplaceVoicebasePci = "marketplace-voicebase-pci"
        case marketplaceVoicebaseTranscription = "marketplace-voicebase-transcription"
        case marketplaceVoicebaseTranscriptionCustomVocabulary = "marketplace-voicebase-transcription-custom-vocabulary"
        case marketplaceWhitepagesProCallerIdentification = "marketplace-whitepages-pro-caller-identification"
        case marketplaceWhitepagesProPhoneIntelligence = "marketplace-whitepages-pro-phone-intelligence"
        case marketplaceWhitepagesProPhoneReputation = "marketplace-whitepages-pro-phone-reputation"
        case marketplaceWolfarmSpokenResults = "marketplace-wolfarm-spoken-results"
        case marketplaceWolframShortAnswer = "marketplace-wolfram-short-answer"
        case marketplaceYticaContactCenterReportingAnalytics = "marketplace-ytica-contact-center-reporting-analytics"
        case mediastorage
        case mms
        case mmsInbound = "mms-inbound"
        case mmsInboundLongcode = "mms-inbound-longcode"
        case mmsInboundShortcode = "mms-inbound-shortcode"
        case mmsMessagesCarrierfees = "mms-messages-carrierfees"
        case mmsOutbound = "mms-outbound"
        case mmsOutboundLongcode = "mms-outbound-longcode"
        case mmsOutboundShortcode = "mms-outbound-shortcode"
        case monitorReads = "monitor-reads"
        case monitorStorage = "monitor-storage"
        case monitorWrites = "monitor-writes"
        case notify
        case notifyActionsAttempts = "notify-actions-attempts"
        case notifyChannels = "notify-channels"
        case numberFormatLookups = "number-format-lookups"
        case pchat
        case pchatUsers = "pchat-users"
        case peerToPeerRoomsParticipantMinutes = "peer-to-peer-rooms-participant-minutes"
        case pfax
        case pfaxMinutes = "pfax-minutes"
        case pfaxMinutesInbound = "pfax-minutes-inbound"
        case pfaxMinutesOutbound = "pfax-minutes-outbound"
        case pfaxPages = "pfax-pages"
        case phonenumbers
        case phonenumbersCps = "phonenumbers-cps"
        case phonenumbersEmergency = "phonenumbers-emergency"
        case phonenumbersLocal = "phonenumbers-local"
        case phonenumbersMobile = "phonenumbers-mobile"
        case phonenumbersSetups = "phonenumbers-setups"
        case phonenumbersTollfree = "phonenumbers-tollfree"
        case premiumsupport
        case proxy
        case proxyActiveSessions = "proxy-active-sessions"
        case pstnconnectivity
        case pv
        case pvCompositionMediaDownloaded = "pv-composition-media-downloaded"
        case pvCompositionMediaEncrypted = "pv-composition-media-encrypted"
        case pvCompositionMediaStored = "pv-composition-media-stored"
        case pvCompositionMinutes = "pv-composition-minutes"
        case pvRecordingCompositions = "pv-recording-compositions"
        case pvRoomParticipants = "pv-room-participants"
        case pvRoomParticipantsAu1 = "pv-room-participants-au1"
        case pvRoomParticipantsBr1 = "pv-room-participants-br1"
        case pvRoomParticipantsIe1 = "pv-room-participants-ie1"
        case pvRoomParticipantsJp1 = "pv-room-participants-jp1"
        case pvRoomParticipantsSg1 = "pv-room-participants-sg1"
        case pvRoomParticipantsUs1 = "pv-room-participants-us1"
        case pvRoomParticipantsUs2 = "pv-room-participants-us2"
        case pvRooms = "pv-rooms"
        case pvSipEndpointRegistrations = "pv-sip-endpoint-registrations"
        case recordings
        case recordingstorage
        case roomsGroupBandwidth = "rooms-group-bandwidth"
        case roomsGroupMinutes = "rooms-group-minutes"
        case roomsPeerToPeerMinutes = "rooms-peer-to-peer-minutes"
        case shortcodes
        case shortcodesCustomerowned = "shortcodes-customerowned"
        case shortcodesMmsEnablement = "shortcodes-mms-enablement"
        case shortcodesMps = "shortcodes-mps"
        case shortcodesRandom = "shortcodes-random"
        case shortcodesUk = "shortcodes-uk"
        case shortcodesVanity = "shortcodes-vanity"
        case smallGroupRooms = "small-group-rooms"
        case smallGroupRoomsDataTrack = "small-group-rooms-data-track"
        case smallGroupRoomsParticipantMinutes = "small-group-rooms-participant-minutes"
        case sms
        case smsInbound = "sms-inbound"
        case smsInboundLongcode = "sms-inbound-longcode"
        case smsInboundShortcode = "sms-inbound-shortcode"
        case smsMessagesCarrierfees = "sms-messages-carrierfees"
        case smsMessagesFeatures = "sms-messages-features"
        case smsMessagesFeaturesSenderid = "sms-messages-features-senderid"
        case smsOutbound = "sms-outbound"
        case smsOutboundContentInspection = "sms-outbound-content-inspection"
        case smsOutboundLongcode = "sms-outbound-longcode"
        case smsOutboundShortcode = "sms-outbound-shortcode"
        case speechRecognition = "speech-recognition"
        case studioEngagements = "studio-engagements"
        case sync
        case syncActions = "sync-actions"
        case syncEndpointHours = "sync-endpoint-hours"
        case syncEndpointHoursAboveDailyCap = "sync-endpoint-hours-above-daily-cap"
        case taskrouterTasks = "taskrouter-tasks"
        case totalprice
        case transcriptions
        case trunkingCps = "trunking-cps"
        case trunkingEmergencyCalls = "trunking-emergency-calls"
        case trunkingOrigination = "trunking-origination"
        case trunkingOriginationLocal = "trunking-origination-local"
        case trunkingOriginationMobile = "trunking-origination-mobile"
        case trunkingOriginationTollfree = "trunking-origination-tollfree"
        case trunkingRecordings = "trunking-recordings"
        case trunkingSecure = "trunking-secure"
        case trunkingTermination = "trunking-termination"
        case turnmegabytes
        case turnmegabytesAustralia = "turnmegabytes-australia"
        case turnmegabytesBrasil = "turnmegabytes-brasil"
        case turnmegabytesGermany = "turnmegabytes-germany"
        case turnmegabytesIndia = "turnmegabytes-india"
        case turnmegabytesIreland = "turnmegabytes-ireland"
        case turnmegabytesJapan = "turnmegabytes-japan"
        case turnmegabytesSingapore = "turnmegabytes-singapore"
        case turnmegabytesUseast = "turnmegabytes-useast"
        case turnmegabytesUswest = "turnmegabytes-uswest"
        case twilioInterconnect = "twilio-interconnect"
        case verifyPush = "verify-push"
        case videoRecordings = "video-recordings"
        case voiceInsights = "voice-insights"
        case voiceInsightsClientInsightsOnDemandMinute = "voice-insights-client-insights-on-demand-minute"
        case voiceInsightsPtsnInsightsOnDemandMinute = "voice-insights-ptsn-insights-on-demand-minute"
        case voiceInsightsSipInterfaceInsightsOnDemandMinute = "voice-insights-sip-interface-insights-on-demand-minute"
        case voiceInsightsSipTrunkingInsightsOnDemandMinute = "voice-insights-sip-trunking-insights-on-demand-minute"
        case wireless
        case wirelessOrders = "wireless-orders"
        case wirelessOrdersArtwork = "wireless-orders-artwork"
        case wirelessOrdersBulk = "wireless-orders-bulk"
        case wirelessOrdersEsim = "wireless-orders-esim"
        case wirelessOrdersStarter = "wireless-orders-starter"
        case wirelessUsage = "wireless-usage"
        case wirelessUsageCommands = "wireless-usage-commands"
        case wirelessUsageCommandsAfrica = "wireless-usage-commands-africa"
        case wirelessUsageCommandsAsia = "wireless-usage-commands-asia"
        case wirelessUsageCommandsCentralandsouthamerica = "wireless-usage-commands-centralandsouthamerica"
        case wirelessUsageCommandsEurope = "wireless-usage-commands-europe"
        case wirelessUsageCommandsHome = "wireless-usage-commands-home"
        case wirelessUsageCommandsNorthamerica = "wireless-usage-commands-northamerica"
        case wirelessUsageCommandsOceania = "wireless-usage-commands-oceania"
        case wirelessUsageCommandsRoaming = "wireless-usage-commands-roaming"
        case wirelessUsageData = "wireless-usage-data"
        case wirelessUsageDataAfrica = "wireless-usage-data-africa"
        case wirelessUsageDataAsia = "wireless-usage-data-asia"
        case wirelessUsageDataCentralandsouthamerica = "wireless-usage-data-centralandsouthamerica"
        case wirelessUsageDataCustomAdditionalmb = "wireless-usage-data-custom-additionalmb"
        case wirelessUsageDataCustomFirst5mb = "wireless-usage-data-custom-first5mb"
        case wirelessUsageDataDomesticRoaming = "wireless-usage-data-domestic-roaming"
        case wirelessUsageDataEurope = "wireless-usage-data-europe"
        case wirelessUsageDataIndividualAdditionalgb = "wireless-usage-data-individual-additionalgb"
        case wirelessUsageDataIndividualFirstgb = "wireless-usage-data-individual-firstgb"
        case wirelessUsageDataInternationalRoamingCanada = "wireless-usage-data-international-roaming-canada"
        case wirelessUsageDataInternationalRoamingIndia = "wireless-usage-data-international-roaming-india"
        case wirelessUsageDataInternationalRoamingMexico = "wireless-usage-data-international-roaming-mexico"
        case wirelessUsageDataNorthamerica = "wireless-usage-data-northamerica"
        case wirelessUsageDataOceania = "wireless-usage-data-oceania"
        case wirelessUsageDataPooled = "wireless-usage-data-pooled"
        case wirelessUsageDataPooledDownlink = "wireless-usage-data-pooled-downlink"
        case wirelessUsageDataPooledUplink = "wireless-usage-data-pooled-uplink"
        case wirelessUsageMrc = "wireless-usage-mrc"
        case wirelessUsageMrcCustom = "wireless-usage-mrc-custom"
        case wirelessUsageMrcIndividual = "wireless-usage-mrc-individual"
        case wirelessUsageMrcPooled = "wireless-usage-mrc-pooled"
        case wirelessUsageMrcSuspended = "wireless-usage-mrc-suspended"
        case wirelessUsageSms = "wireless-usage-sms"
        case wirelessUsageVoice = "wireless-usage-voice"
    }

    public init(accountSid: String? = nil, apiVersion: String? = nil, asOf: String? = nil, category: Category? = nil, count: String? = nil, countUnit: String? = nil, description: String? = nil, endDate: NaiveDate? = nil, price: Double? = nil, priceUnit: String? = nil, startDate: NaiveDate? = nil, subresourceUris: [String: AnyJSON]? = nil, uri: URL? = nil, usage: String? = nil, usageUnit: String? = nil) {
        self.accountSid = accountSid
        self.apiVersion = apiVersion
        self.asOf = asOf
        self.category = category
        self.count = count
        self.countUnit = countUnit
        self.description = description
        self.endDate = endDate
        self.price = price
        self.priceUnit = priceUnit
        self.startDate = startDate
        self.subresourceUris = subresourceUris
        self.uri = uri
        self.usage = usage
        self.usageUnit = usageUnit
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case apiVersion = "api_version"
        case asOf = "as_of"
        case category
        case count
        case countUnit = "count_unit"
        case description
        case endDate = "end_date"
        case price
        case priceUnit = "price_unit"
        case startDate = "start_date"
        case subresourceUris = "subresource_uris"
        case uri
        case usage
        case usageUnit = "usage_unit"
    }
}

public struct APIV2010AccountUsageUsageRecordUsageRecordYearly: Codable {
    /// The SID of the Account accrued the usage
    public var accountSid: String?
    /// The API version used to create the resource
    public var apiVersion: String?
    /// Usage records up to date as of this timestamp
    public var asOf: String?
    /// The category of usage
    public var category: Category?
    /// The number of usage events
    public var count: String?
    /// The units in which count is measured
    public var countUnit: String?
    /// A plain-language description of the usage category
    public var description: String?
    /// The last date for which usage is included in the UsageRecord
    public var endDate: NaiveDate?
    /// The total price of the usage
    public var price: Double?
    /// The currency in which `price` is measured
    public var priceUnit: String?
    /// The first date for which usage is included in this UsageRecord
    public var startDate: NaiveDate?
    /// A list of related resources identified by their relative URIs
    public var subresourceUris: [String: AnyJSON]?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?
    /// The amount of usage
    public var usage: String?
    /// The units in which usage is measured
    public var usageUnit: String?

    /// The category of usage
    public enum Category: String, Codable, CaseIterable {
        case agentConference = "agent-conference"
        case answeringMachineDetection = "answering-machine-detection"
        case authyAuthentications = "authy-authentications"
        case authyCallsOutbound = "authy-calls-outbound"
        case authyMonthlyFees = "authy-monthly-fees"
        case authyPhoneIntelligence = "authy-phone-intelligence"
        case authyPhoneVerifications = "authy-phone-verifications"
        case authySmsOutbound = "authy-sms-outbound"
        case callProgessEvents = "call-progess-events"
        case calleridlookups
        case calls
        case callsClient = "calls-client"
        case callsGlobalconference = "calls-globalconference"
        case callsInbound = "calls-inbound"
        case callsInboundLocal = "calls-inbound-local"
        case callsInboundMobile = "calls-inbound-mobile"
        case callsInboundTollfree = "calls-inbound-tollfree"
        case callsOutbound = "calls-outbound"
        case callsPayVerbTransactions = "calls-pay-verb-transactions"
        case callsRecordings = "calls-recordings"
        case callsSip = "calls-sip"
        case callsSipInbound = "calls-sip-inbound"
        case callsSipOutbound = "calls-sip-outbound"
        case callsTransfers = "calls-transfers"
        case carrierLookups = "carrier-lookups"
        case conversations
        case conversationsAPIRequests = "conversations-api-requests"
        case conversationsConversationEvents = "conversations-conversation-events"
        case conversationsEndpointConnectivity = "conversations-endpoint-connectivity"
        case conversationsEvents = "conversations-events"
        case conversationsParticipantEvents = "conversations-participant-events"
        case conversationsParticipants = "conversations-participants"
        case cps
        case flexUsage = "flex-usage"
        case fraudLookups = "fraud-lookups"
        case groupRooms = "group-rooms"
        case groupRoomsDataTrack = "group-rooms-data-track"
        case groupRoomsEncryptedMediaRecorded = "group-rooms-encrypted-media-recorded"
        case groupRoomsMediaDownloaded = "group-rooms-media-downloaded"
        case groupRoomsMediaRecorded = "group-rooms-media-recorded"
        case groupRoomsMediaRouted = "group-rooms-media-routed"
        case groupRoomsMediaStored = "group-rooms-media-stored"
        case groupRoomsParticipantMinutes = "group-rooms-participant-minutes"
        case groupRoomsRecordedMinutes = "group-rooms-recorded-minutes"
        case impV1Usage = "imp-v1-usage"
        case lookups
        case marketplace
        case marketplaceAlgorithmiaNamedEntityRecognition = "marketplace-algorithmia-named-entity-recognition"
        case marketplaceCadenceTranscription = "marketplace-cadence-transcription"
        case marketplaceCadenceTranslation = "marketplace-cadence-translation"
        case marketplaceCapioSpeechToText = "marketplace-capio-speech-to-text"
        case marketplaceConvrizaAbaba = "marketplace-convriza-ababa"
        case marketplaceDeepgramPhraseDetector = "marketplace-deepgram-phrase-detector"
        case marketplaceDigitalSegmentBusinessInfo = "marketplace-digital-segment-business-info"
        case marketplaceFacebookOfflineConversions = "marketplace-facebook-offline-conversions"
        case marketplaceGoogleSpeechToText = "marketplace-google-speech-to-text"
        case marketplaceIbmWatsonMessageInsights = "marketplace-ibm-watson-message-insights"
        case marketplaceIbmWatsonMessageSentiment = "marketplace-ibm-watson-message-sentiment"
        case marketplaceIbmWatsonRecordingAnalysis = "marketplace-ibm-watson-recording-analysis"
        case marketplaceIbmWatsonToneAnalyzer = "marketplace-ibm-watson-tone-analyzer"
        case marketplaceIcehookSystemsScout = "marketplace-icehook-systems-scout"
        case marketplaceInfogroupDataaxleBizinfo = "marketplace-infogroup-dataaxle-bizinfo"
        case marketplaceKeenIoContactCenterAnalytics = "marketplace-keen-io-contact-center-analytics"
        case marketplaceMarchexCleancall = "marketplace-marchex-cleancall"
        case marketplaceMarchexSentimentAnalysisForSms = "marketplace-marchex-sentiment-analysis-for-sms"
        case marketplaceMarketplaceNextcallerSocialID = "marketplace-marketplace-nextcaller-social-id"
        case marketplaceMobileCommonsOptOutClassifier = "marketplace-mobile-commons-opt-out-classifier"
        case marketplaceNexiwaveVoicemailToText = "marketplace-nexiwave-voicemail-to-text"
        case marketplaceNextcallerAdvancedCallerIdentification = "marketplace-nextcaller-advanced-caller-identification"
        case marketplaceNomoroboSpamScore = "marketplace-nomorobo-spam-score"
        case marketplacePayfoneTcpaCompliance = "marketplace-payfone-tcpa-compliance"
        case marketplaceRemeetingAutomaticSpeechRecognition = "marketplace-remeeting-automatic-speech-recognition"
        case marketplaceTcpaDefenseSolutionsBlacklistFeed = "marketplace-tcpa-defense-solutions-blacklist-feed"
        case marketplaceTeloOpencnam = "marketplace-telo-opencnam"
        case marketplaceTruecnamTrueSpam = "marketplace-truecnam-true-spam"
        case marketplaceTwilioCallerNameLookupUs = "marketplace-twilio-caller-name-lookup-us"
        case marketplaceTwilioCarrierInformationLookup = "marketplace-twilio-carrier-information-lookup"
        case marketplaceVoicebasePci = "marketplace-voicebase-pci"
        case marketplaceVoicebaseTranscription = "marketplace-voicebase-transcription"
        case marketplaceVoicebaseTranscriptionCustomVocabulary = "marketplace-voicebase-transcription-custom-vocabulary"
        case marketplaceWhitepagesProCallerIdentification = "marketplace-whitepages-pro-caller-identification"
        case marketplaceWhitepagesProPhoneIntelligence = "marketplace-whitepages-pro-phone-intelligence"
        case marketplaceWhitepagesProPhoneReputation = "marketplace-whitepages-pro-phone-reputation"
        case marketplaceWolfarmSpokenResults = "marketplace-wolfarm-spoken-results"
        case marketplaceWolframShortAnswer = "marketplace-wolfram-short-answer"
        case marketplaceYticaContactCenterReportingAnalytics = "marketplace-ytica-contact-center-reporting-analytics"
        case mediastorage
        case mms
        case mmsInbound = "mms-inbound"
        case mmsInboundLongcode = "mms-inbound-longcode"
        case mmsInboundShortcode = "mms-inbound-shortcode"
        case mmsMessagesCarrierfees = "mms-messages-carrierfees"
        case mmsOutbound = "mms-outbound"
        case mmsOutboundLongcode = "mms-outbound-longcode"
        case mmsOutboundShortcode = "mms-outbound-shortcode"
        case monitorReads = "monitor-reads"
        case monitorStorage = "monitor-storage"
        case monitorWrites = "monitor-writes"
        case notify
        case notifyActionsAttempts = "notify-actions-attempts"
        case notifyChannels = "notify-channels"
        case numberFormatLookups = "number-format-lookups"
        case pchat
        case pchatUsers = "pchat-users"
        case peerToPeerRoomsParticipantMinutes = "peer-to-peer-rooms-participant-minutes"
        case pfax
        case pfaxMinutes = "pfax-minutes"
        case pfaxMinutesInbound = "pfax-minutes-inbound"
        case pfaxMinutesOutbound = "pfax-minutes-outbound"
        case pfaxPages = "pfax-pages"
        case phonenumbers
        case phonenumbersCps = "phonenumbers-cps"
        case phonenumbersEmergency = "phonenumbers-emergency"
        case phonenumbersLocal = "phonenumbers-local"
        case phonenumbersMobile = "phonenumbers-mobile"
        case phonenumbersSetups = "phonenumbers-setups"
        case phonenumbersTollfree = "phonenumbers-tollfree"
        case premiumsupport
        case proxy
        case proxyActiveSessions = "proxy-active-sessions"
        case pstnconnectivity
        case pv
        case pvCompositionMediaDownloaded = "pv-composition-media-downloaded"
        case pvCompositionMediaEncrypted = "pv-composition-media-encrypted"
        case pvCompositionMediaStored = "pv-composition-media-stored"
        case pvCompositionMinutes = "pv-composition-minutes"
        case pvRecordingCompositions = "pv-recording-compositions"
        case pvRoomParticipants = "pv-room-participants"
        case pvRoomParticipantsAu1 = "pv-room-participants-au1"
        case pvRoomParticipantsBr1 = "pv-room-participants-br1"
        case pvRoomParticipantsIe1 = "pv-room-participants-ie1"
        case pvRoomParticipantsJp1 = "pv-room-participants-jp1"
        case pvRoomParticipantsSg1 = "pv-room-participants-sg1"
        case pvRoomParticipantsUs1 = "pv-room-participants-us1"
        case pvRoomParticipantsUs2 = "pv-room-participants-us2"
        case pvRooms = "pv-rooms"
        case pvSipEndpointRegistrations = "pv-sip-endpoint-registrations"
        case recordings
        case recordingstorage
        case roomsGroupBandwidth = "rooms-group-bandwidth"
        case roomsGroupMinutes = "rooms-group-minutes"
        case roomsPeerToPeerMinutes = "rooms-peer-to-peer-minutes"
        case shortcodes
        case shortcodesCustomerowned = "shortcodes-customerowned"
        case shortcodesMmsEnablement = "shortcodes-mms-enablement"
        case shortcodesMps = "shortcodes-mps"
        case shortcodesRandom = "shortcodes-random"
        case shortcodesUk = "shortcodes-uk"
        case shortcodesVanity = "shortcodes-vanity"
        case smallGroupRooms = "small-group-rooms"
        case smallGroupRoomsDataTrack = "small-group-rooms-data-track"
        case smallGroupRoomsParticipantMinutes = "small-group-rooms-participant-minutes"
        case sms
        case smsInbound = "sms-inbound"
        case smsInboundLongcode = "sms-inbound-longcode"
        case smsInboundShortcode = "sms-inbound-shortcode"
        case smsMessagesCarrierfees = "sms-messages-carrierfees"
        case smsMessagesFeatures = "sms-messages-features"
        case smsMessagesFeaturesSenderid = "sms-messages-features-senderid"
        case smsOutbound = "sms-outbound"
        case smsOutboundContentInspection = "sms-outbound-content-inspection"
        case smsOutboundLongcode = "sms-outbound-longcode"
        case smsOutboundShortcode = "sms-outbound-shortcode"
        case speechRecognition = "speech-recognition"
        case studioEngagements = "studio-engagements"
        case sync
        case syncActions = "sync-actions"
        case syncEndpointHours = "sync-endpoint-hours"
        case syncEndpointHoursAboveDailyCap = "sync-endpoint-hours-above-daily-cap"
        case taskrouterTasks = "taskrouter-tasks"
        case totalprice
        case transcriptions
        case trunkingCps = "trunking-cps"
        case trunkingEmergencyCalls = "trunking-emergency-calls"
        case trunkingOrigination = "trunking-origination"
        case trunkingOriginationLocal = "trunking-origination-local"
        case trunkingOriginationMobile = "trunking-origination-mobile"
        case trunkingOriginationTollfree = "trunking-origination-tollfree"
        case trunkingRecordings = "trunking-recordings"
        case trunkingSecure = "trunking-secure"
        case trunkingTermination = "trunking-termination"
        case turnmegabytes
        case turnmegabytesAustralia = "turnmegabytes-australia"
        case turnmegabytesBrasil = "turnmegabytes-brasil"
        case turnmegabytesGermany = "turnmegabytes-germany"
        case turnmegabytesIndia = "turnmegabytes-india"
        case turnmegabytesIreland = "turnmegabytes-ireland"
        case turnmegabytesJapan = "turnmegabytes-japan"
        case turnmegabytesSingapore = "turnmegabytes-singapore"
        case turnmegabytesUseast = "turnmegabytes-useast"
        case turnmegabytesUswest = "turnmegabytes-uswest"
        case twilioInterconnect = "twilio-interconnect"
        case verifyPush = "verify-push"
        case videoRecordings = "video-recordings"
        case voiceInsights = "voice-insights"
        case voiceInsightsClientInsightsOnDemandMinute = "voice-insights-client-insights-on-demand-minute"
        case voiceInsightsPtsnInsightsOnDemandMinute = "voice-insights-ptsn-insights-on-demand-minute"
        case voiceInsightsSipInterfaceInsightsOnDemandMinute = "voice-insights-sip-interface-insights-on-demand-minute"
        case voiceInsightsSipTrunkingInsightsOnDemandMinute = "voice-insights-sip-trunking-insights-on-demand-minute"
        case wireless
        case wirelessOrders = "wireless-orders"
        case wirelessOrdersArtwork = "wireless-orders-artwork"
        case wirelessOrdersBulk = "wireless-orders-bulk"
        case wirelessOrdersEsim = "wireless-orders-esim"
        case wirelessOrdersStarter = "wireless-orders-starter"
        case wirelessUsage = "wireless-usage"
        case wirelessUsageCommands = "wireless-usage-commands"
        case wirelessUsageCommandsAfrica = "wireless-usage-commands-africa"
        case wirelessUsageCommandsAsia = "wireless-usage-commands-asia"
        case wirelessUsageCommandsCentralandsouthamerica = "wireless-usage-commands-centralandsouthamerica"
        case wirelessUsageCommandsEurope = "wireless-usage-commands-europe"
        case wirelessUsageCommandsHome = "wireless-usage-commands-home"
        case wirelessUsageCommandsNorthamerica = "wireless-usage-commands-northamerica"
        case wirelessUsageCommandsOceania = "wireless-usage-commands-oceania"
        case wirelessUsageCommandsRoaming = "wireless-usage-commands-roaming"
        case wirelessUsageData = "wireless-usage-data"
        case wirelessUsageDataAfrica = "wireless-usage-data-africa"
        case wirelessUsageDataAsia = "wireless-usage-data-asia"
        case wirelessUsageDataCentralandsouthamerica = "wireless-usage-data-centralandsouthamerica"
        case wirelessUsageDataCustomAdditionalmb = "wireless-usage-data-custom-additionalmb"
        case wirelessUsageDataCustomFirst5mb = "wireless-usage-data-custom-first5mb"
        case wirelessUsageDataDomesticRoaming = "wireless-usage-data-domestic-roaming"
        case wirelessUsageDataEurope = "wireless-usage-data-europe"
        case wirelessUsageDataIndividualAdditionalgb = "wireless-usage-data-individual-additionalgb"
        case wirelessUsageDataIndividualFirstgb = "wireless-usage-data-individual-firstgb"
        case wirelessUsageDataInternationalRoamingCanada = "wireless-usage-data-international-roaming-canada"
        case wirelessUsageDataInternationalRoamingIndia = "wireless-usage-data-international-roaming-india"
        case wirelessUsageDataInternationalRoamingMexico = "wireless-usage-data-international-roaming-mexico"
        case wirelessUsageDataNorthamerica = "wireless-usage-data-northamerica"
        case wirelessUsageDataOceania = "wireless-usage-data-oceania"
        case wirelessUsageDataPooled = "wireless-usage-data-pooled"
        case wirelessUsageDataPooledDownlink = "wireless-usage-data-pooled-downlink"
        case wirelessUsageDataPooledUplink = "wireless-usage-data-pooled-uplink"
        case wirelessUsageMrc = "wireless-usage-mrc"
        case wirelessUsageMrcCustom = "wireless-usage-mrc-custom"
        case wirelessUsageMrcIndividual = "wireless-usage-mrc-individual"
        case wirelessUsageMrcPooled = "wireless-usage-mrc-pooled"
        case wirelessUsageMrcSuspended = "wireless-usage-mrc-suspended"
        case wirelessUsageSms = "wireless-usage-sms"
        case wirelessUsageVoice = "wireless-usage-voice"
    }

    public init(accountSid: String? = nil, apiVersion: String? = nil, asOf: String? = nil, category: Category? = nil, count: String? = nil, countUnit: String? = nil, description: String? = nil, endDate: NaiveDate? = nil, price: Double? = nil, priceUnit: String? = nil, startDate: NaiveDate? = nil, subresourceUris: [String: AnyJSON]? = nil, uri: URL? = nil, usage: String? = nil, usageUnit: String? = nil) {
        self.accountSid = accountSid
        self.apiVersion = apiVersion
        self.asOf = asOf
        self.category = category
        self.count = count
        self.countUnit = countUnit
        self.description = description
        self.endDate = endDate
        self.price = price
        self.priceUnit = priceUnit
        self.startDate = startDate
        self.subresourceUris = subresourceUris
        self.uri = uri
        self.usage = usage
        self.usageUnit = usageUnit
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case apiVersion = "api_version"
        case asOf = "as_of"
        case category
        case count
        case countUnit = "count_unit"
        case description
        case endDate = "end_date"
        case price
        case priceUnit = "price_unit"
        case startDate = "start_date"
        case subresourceUris = "subresource_uris"
        case uri
        case usage
        case usageUnit = "usage_unit"
    }
}

public struct APIV2010AccountUsageUsageRecordUsageRecordYesterday: Codable {
    /// The SID of the Account accrued the usage
    public var accountSid: String?
    /// The API version used to create the resource
    public var apiVersion: String?
    /// Usage records up to date as of this timestamp
    public var asOf: String?
    /// The category of usage
    public var category: Category?
    /// The number of usage events
    public var count: String?
    /// The units in which count is measured
    public var countUnit: String?
    /// A plain-language description of the usage category
    public var description: String?
    /// The last date for which usage is included in the UsageRecord
    public var endDate: NaiveDate?
    /// The total price of the usage
    public var price: Double?
    /// The currency in which `price` is measured
    public var priceUnit: String?
    /// The first date for which usage is included in this UsageRecord
    public var startDate: NaiveDate?
    /// A list of related resources identified by their relative URIs
    public var subresourceUris: [String: AnyJSON]?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?
    /// The amount of usage
    public var usage: String?
    /// The units in which usage is measured
    public var usageUnit: String?

    /// The category of usage
    public enum Category: String, Codable, CaseIterable {
        case agentConference = "agent-conference"
        case answeringMachineDetection = "answering-machine-detection"
        case authyAuthentications = "authy-authentications"
        case authyCallsOutbound = "authy-calls-outbound"
        case authyMonthlyFees = "authy-monthly-fees"
        case authyPhoneIntelligence = "authy-phone-intelligence"
        case authyPhoneVerifications = "authy-phone-verifications"
        case authySmsOutbound = "authy-sms-outbound"
        case callProgessEvents = "call-progess-events"
        case calleridlookups
        case calls
        case callsClient = "calls-client"
        case callsGlobalconference = "calls-globalconference"
        case callsInbound = "calls-inbound"
        case callsInboundLocal = "calls-inbound-local"
        case callsInboundMobile = "calls-inbound-mobile"
        case callsInboundTollfree = "calls-inbound-tollfree"
        case callsOutbound = "calls-outbound"
        case callsPayVerbTransactions = "calls-pay-verb-transactions"
        case callsRecordings = "calls-recordings"
        case callsSip = "calls-sip"
        case callsSipInbound = "calls-sip-inbound"
        case callsSipOutbound = "calls-sip-outbound"
        case callsTransfers = "calls-transfers"
        case carrierLookups = "carrier-lookups"
        case conversations
        case conversationsAPIRequests = "conversations-api-requests"
        case conversationsConversationEvents = "conversations-conversation-events"
        case conversationsEndpointConnectivity = "conversations-endpoint-connectivity"
        case conversationsEvents = "conversations-events"
        case conversationsParticipantEvents = "conversations-participant-events"
        case conversationsParticipants = "conversations-participants"
        case cps
        case flexUsage = "flex-usage"
        case fraudLookups = "fraud-lookups"
        case groupRooms = "group-rooms"
        case groupRoomsDataTrack = "group-rooms-data-track"
        case groupRoomsEncryptedMediaRecorded = "group-rooms-encrypted-media-recorded"
        case groupRoomsMediaDownloaded = "group-rooms-media-downloaded"
        case groupRoomsMediaRecorded = "group-rooms-media-recorded"
        case groupRoomsMediaRouted = "group-rooms-media-routed"
        case groupRoomsMediaStored = "group-rooms-media-stored"
        case groupRoomsParticipantMinutes = "group-rooms-participant-minutes"
        case groupRoomsRecordedMinutes = "group-rooms-recorded-minutes"
        case impV1Usage = "imp-v1-usage"
        case lookups
        case marketplace
        case marketplaceAlgorithmiaNamedEntityRecognition = "marketplace-algorithmia-named-entity-recognition"
        case marketplaceCadenceTranscription = "marketplace-cadence-transcription"
        case marketplaceCadenceTranslation = "marketplace-cadence-translation"
        case marketplaceCapioSpeechToText = "marketplace-capio-speech-to-text"
        case marketplaceConvrizaAbaba = "marketplace-convriza-ababa"
        case marketplaceDeepgramPhraseDetector = "marketplace-deepgram-phrase-detector"
        case marketplaceDigitalSegmentBusinessInfo = "marketplace-digital-segment-business-info"
        case marketplaceFacebookOfflineConversions = "marketplace-facebook-offline-conversions"
        case marketplaceGoogleSpeechToText = "marketplace-google-speech-to-text"
        case marketplaceIbmWatsonMessageInsights = "marketplace-ibm-watson-message-insights"
        case marketplaceIbmWatsonMessageSentiment = "marketplace-ibm-watson-message-sentiment"
        case marketplaceIbmWatsonRecordingAnalysis = "marketplace-ibm-watson-recording-analysis"
        case marketplaceIbmWatsonToneAnalyzer = "marketplace-ibm-watson-tone-analyzer"
        case marketplaceIcehookSystemsScout = "marketplace-icehook-systems-scout"
        case marketplaceInfogroupDataaxleBizinfo = "marketplace-infogroup-dataaxle-bizinfo"
        case marketplaceKeenIoContactCenterAnalytics = "marketplace-keen-io-contact-center-analytics"
        case marketplaceMarchexCleancall = "marketplace-marchex-cleancall"
        case marketplaceMarchexSentimentAnalysisForSms = "marketplace-marchex-sentiment-analysis-for-sms"
        case marketplaceMarketplaceNextcallerSocialID = "marketplace-marketplace-nextcaller-social-id"
        case marketplaceMobileCommonsOptOutClassifier = "marketplace-mobile-commons-opt-out-classifier"
        case marketplaceNexiwaveVoicemailToText = "marketplace-nexiwave-voicemail-to-text"
        case marketplaceNextcallerAdvancedCallerIdentification = "marketplace-nextcaller-advanced-caller-identification"
        case marketplaceNomoroboSpamScore = "marketplace-nomorobo-spam-score"
        case marketplacePayfoneTcpaCompliance = "marketplace-payfone-tcpa-compliance"
        case marketplaceRemeetingAutomaticSpeechRecognition = "marketplace-remeeting-automatic-speech-recognition"
        case marketplaceTcpaDefenseSolutionsBlacklistFeed = "marketplace-tcpa-defense-solutions-blacklist-feed"
        case marketplaceTeloOpencnam = "marketplace-telo-opencnam"
        case marketplaceTruecnamTrueSpam = "marketplace-truecnam-true-spam"
        case marketplaceTwilioCallerNameLookupUs = "marketplace-twilio-caller-name-lookup-us"
        case marketplaceTwilioCarrierInformationLookup = "marketplace-twilio-carrier-information-lookup"
        case marketplaceVoicebasePci = "marketplace-voicebase-pci"
        case marketplaceVoicebaseTranscription = "marketplace-voicebase-transcription"
        case marketplaceVoicebaseTranscriptionCustomVocabulary = "marketplace-voicebase-transcription-custom-vocabulary"
        case marketplaceWhitepagesProCallerIdentification = "marketplace-whitepages-pro-caller-identification"
        case marketplaceWhitepagesProPhoneIntelligence = "marketplace-whitepages-pro-phone-intelligence"
        case marketplaceWhitepagesProPhoneReputation = "marketplace-whitepages-pro-phone-reputation"
        case marketplaceWolfarmSpokenResults = "marketplace-wolfarm-spoken-results"
        case marketplaceWolframShortAnswer = "marketplace-wolfram-short-answer"
        case marketplaceYticaContactCenterReportingAnalytics = "marketplace-ytica-contact-center-reporting-analytics"
        case mediastorage
        case mms
        case mmsInbound = "mms-inbound"
        case mmsInboundLongcode = "mms-inbound-longcode"
        case mmsInboundShortcode = "mms-inbound-shortcode"
        case mmsMessagesCarrierfees = "mms-messages-carrierfees"
        case mmsOutbound = "mms-outbound"
        case mmsOutboundLongcode = "mms-outbound-longcode"
        case mmsOutboundShortcode = "mms-outbound-shortcode"
        case monitorReads = "monitor-reads"
        case monitorStorage = "monitor-storage"
        case monitorWrites = "monitor-writes"
        case notify
        case notifyActionsAttempts = "notify-actions-attempts"
        case notifyChannels = "notify-channels"
        case numberFormatLookups = "number-format-lookups"
        case pchat
        case pchatUsers = "pchat-users"
        case peerToPeerRoomsParticipantMinutes = "peer-to-peer-rooms-participant-minutes"
        case pfax
        case pfaxMinutes = "pfax-minutes"
        case pfaxMinutesInbound = "pfax-minutes-inbound"
        case pfaxMinutesOutbound = "pfax-minutes-outbound"
        case pfaxPages = "pfax-pages"
        case phonenumbers
        case phonenumbersCps = "phonenumbers-cps"
        case phonenumbersEmergency = "phonenumbers-emergency"
        case phonenumbersLocal = "phonenumbers-local"
        case phonenumbersMobile = "phonenumbers-mobile"
        case phonenumbersSetups = "phonenumbers-setups"
        case phonenumbersTollfree = "phonenumbers-tollfree"
        case premiumsupport
        case proxy
        case proxyActiveSessions = "proxy-active-sessions"
        case pstnconnectivity
        case pv
        case pvCompositionMediaDownloaded = "pv-composition-media-downloaded"
        case pvCompositionMediaEncrypted = "pv-composition-media-encrypted"
        case pvCompositionMediaStored = "pv-composition-media-stored"
        case pvCompositionMinutes = "pv-composition-minutes"
        case pvRecordingCompositions = "pv-recording-compositions"
        case pvRoomParticipants = "pv-room-participants"
        case pvRoomParticipantsAu1 = "pv-room-participants-au1"
        case pvRoomParticipantsBr1 = "pv-room-participants-br1"
        case pvRoomParticipantsIe1 = "pv-room-participants-ie1"
        case pvRoomParticipantsJp1 = "pv-room-participants-jp1"
        case pvRoomParticipantsSg1 = "pv-room-participants-sg1"
        case pvRoomParticipantsUs1 = "pv-room-participants-us1"
        case pvRoomParticipantsUs2 = "pv-room-participants-us2"
        case pvRooms = "pv-rooms"
        case pvSipEndpointRegistrations = "pv-sip-endpoint-registrations"
        case recordings
        case recordingstorage
        case roomsGroupBandwidth = "rooms-group-bandwidth"
        case roomsGroupMinutes = "rooms-group-minutes"
        case roomsPeerToPeerMinutes = "rooms-peer-to-peer-minutes"
        case shortcodes
        case shortcodesCustomerowned = "shortcodes-customerowned"
        case shortcodesMmsEnablement = "shortcodes-mms-enablement"
        case shortcodesMps = "shortcodes-mps"
        case shortcodesRandom = "shortcodes-random"
        case shortcodesUk = "shortcodes-uk"
        case shortcodesVanity = "shortcodes-vanity"
        case smallGroupRooms = "small-group-rooms"
        case smallGroupRoomsDataTrack = "small-group-rooms-data-track"
        case smallGroupRoomsParticipantMinutes = "small-group-rooms-participant-minutes"
        case sms
        case smsInbound = "sms-inbound"
        case smsInboundLongcode = "sms-inbound-longcode"
        case smsInboundShortcode = "sms-inbound-shortcode"
        case smsMessagesCarrierfees = "sms-messages-carrierfees"
        case smsMessagesFeatures = "sms-messages-features"
        case smsMessagesFeaturesSenderid = "sms-messages-features-senderid"
        case smsOutbound = "sms-outbound"
        case smsOutboundContentInspection = "sms-outbound-content-inspection"
        case smsOutboundLongcode = "sms-outbound-longcode"
        case smsOutboundShortcode = "sms-outbound-shortcode"
        case speechRecognition = "speech-recognition"
        case studioEngagements = "studio-engagements"
        case sync
        case syncActions = "sync-actions"
        case syncEndpointHours = "sync-endpoint-hours"
        case syncEndpointHoursAboveDailyCap = "sync-endpoint-hours-above-daily-cap"
        case taskrouterTasks = "taskrouter-tasks"
        case totalprice
        case transcriptions
        case trunkingCps = "trunking-cps"
        case trunkingEmergencyCalls = "trunking-emergency-calls"
        case trunkingOrigination = "trunking-origination"
        case trunkingOriginationLocal = "trunking-origination-local"
        case trunkingOriginationMobile = "trunking-origination-mobile"
        case trunkingOriginationTollfree = "trunking-origination-tollfree"
        case trunkingRecordings = "trunking-recordings"
        case trunkingSecure = "trunking-secure"
        case trunkingTermination = "trunking-termination"
        case turnmegabytes
        case turnmegabytesAustralia = "turnmegabytes-australia"
        case turnmegabytesBrasil = "turnmegabytes-brasil"
        case turnmegabytesGermany = "turnmegabytes-germany"
        case turnmegabytesIndia = "turnmegabytes-india"
        case turnmegabytesIreland = "turnmegabytes-ireland"
        case turnmegabytesJapan = "turnmegabytes-japan"
        case turnmegabytesSingapore = "turnmegabytes-singapore"
        case turnmegabytesUseast = "turnmegabytes-useast"
        case turnmegabytesUswest = "turnmegabytes-uswest"
        case twilioInterconnect = "twilio-interconnect"
        case verifyPush = "verify-push"
        case videoRecordings = "video-recordings"
        case voiceInsights = "voice-insights"
        case voiceInsightsClientInsightsOnDemandMinute = "voice-insights-client-insights-on-demand-minute"
        case voiceInsightsPtsnInsightsOnDemandMinute = "voice-insights-ptsn-insights-on-demand-minute"
        case voiceInsightsSipInterfaceInsightsOnDemandMinute = "voice-insights-sip-interface-insights-on-demand-minute"
        case voiceInsightsSipTrunkingInsightsOnDemandMinute = "voice-insights-sip-trunking-insights-on-demand-minute"
        case wireless
        case wirelessOrders = "wireless-orders"
        case wirelessOrdersArtwork = "wireless-orders-artwork"
        case wirelessOrdersBulk = "wireless-orders-bulk"
        case wirelessOrdersEsim = "wireless-orders-esim"
        case wirelessOrdersStarter = "wireless-orders-starter"
        case wirelessUsage = "wireless-usage"
        case wirelessUsageCommands = "wireless-usage-commands"
        case wirelessUsageCommandsAfrica = "wireless-usage-commands-africa"
        case wirelessUsageCommandsAsia = "wireless-usage-commands-asia"
        case wirelessUsageCommandsCentralandsouthamerica = "wireless-usage-commands-centralandsouthamerica"
        case wirelessUsageCommandsEurope = "wireless-usage-commands-europe"
        case wirelessUsageCommandsHome = "wireless-usage-commands-home"
        case wirelessUsageCommandsNorthamerica = "wireless-usage-commands-northamerica"
        case wirelessUsageCommandsOceania = "wireless-usage-commands-oceania"
        case wirelessUsageCommandsRoaming = "wireless-usage-commands-roaming"
        case wirelessUsageData = "wireless-usage-data"
        case wirelessUsageDataAfrica = "wireless-usage-data-africa"
        case wirelessUsageDataAsia = "wireless-usage-data-asia"
        case wirelessUsageDataCentralandsouthamerica = "wireless-usage-data-centralandsouthamerica"
        case wirelessUsageDataCustomAdditionalmb = "wireless-usage-data-custom-additionalmb"
        case wirelessUsageDataCustomFirst5mb = "wireless-usage-data-custom-first5mb"
        case wirelessUsageDataDomesticRoaming = "wireless-usage-data-domestic-roaming"
        case wirelessUsageDataEurope = "wireless-usage-data-europe"
        case wirelessUsageDataIndividualAdditionalgb = "wireless-usage-data-individual-additionalgb"
        case wirelessUsageDataIndividualFirstgb = "wireless-usage-data-individual-firstgb"
        case wirelessUsageDataInternationalRoamingCanada = "wireless-usage-data-international-roaming-canada"
        case wirelessUsageDataInternationalRoamingIndia = "wireless-usage-data-international-roaming-india"
        case wirelessUsageDataInternationalRoamingMexico = "wireless-usage-data-international-roaming-mexico"
        case wirelessUsageDataNorthamerica = "wireless-usage-data-northamerica"
        case wirelessUsageDataOceania = "wireless-usage-data-oceania"
        case wirelessUsageDataPooled = "wireless-usage-data-pooled"
        case wirelessUsageDataPooledDownlink = "wireless-usage-data-pooled-downlink"
        case wirelessUsageDataPooledUplink = "wireless-usage-data-pooled-uplink"
        case wirelessUsageMrc = "wireless-usage-mrc"
        case wirelessUsageMrcCustom = "wireless-usage-mrc-custom"
        case wirelessUsageMrcIndividual = "wireless-usage-mrc-individual"
        case wirelessUsageMrcPooled = "wireless-usage-mrc-pooled"
        case wirelessUsageMrcSuspended = "wireless-usage-mrc-suspended"
        case wirelessUsageSms = "wireless-usage-sms"
        case wirelessUsageVoice = "wireless-usage-voice"
    }

    public init(accountSid: String? = nil, apiVersion: String? = nil, asOf: String? = nil, category: Category? = nil, count: String? = nil, countUnit: String? = nil, description: String? = nil, endDate: NaiveDate? = nil, price: Double? = nil, priceUnit: String? = nil, startDate: NaiveDate? = nil, subresourceUris: [String: AnyJSON]? = nil, uri: URL? = nil, usage: String? = nil, usageUnit: String? = nil) {
        self.accountSid = accountSid
        self.apiVersion = apiVersion
        self.asOf = asOf
        self.category = category
        self.count = count
        self.countUnit = countUnit
        self.description = description
        self.endDate = endDate
        self.price = price
        self.priceUnit = priceUnit
        self.startDate = startDate
        self.subresourceUris = subresourceUris
        self.uri = uri
        self.usage = usage
        self.usageUnit = usageUnit
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case apiVersion = "api_version"
        case asOf = "as_of"
        case category
        case count
        case countUnit = "count_unit"
        case description
        case endDate = "end_date"
        case price
        case priceUnit = "price_unit"
        case startDate = "start_date"
        case subresourceUris = "subresource_uris"
        case uri
        case usage
        case usageUnit = "usage_unit"
    }
}

public struct APIV2010AccountUsageUsageTrigger: Codable {
    /// The SID of the Account that this trigger monitors
    public var accountSid: String?
    /// The API version used to create the resource
    public var apiVersion: String?
    /// The HTTP method we use to call callback_url
    public var callbackMethod: CallbackMethod?
    /// He URL we call when the trigger fires
    public var callbackURL: URL?
    /// The current value of the field the trigger is watching
    public var currentValue: String?
    /// The RFC 2822 date and time in GMT that the resource was created
    public var dateCreated: String?
    /// The RFC 2822 date and time in GMT that the trigger was last fired
    public var dateFired: String?
    /// The RFC 2822 date and time in GMT that the resource was last updated
    public var dateUpdated: String?
    /// The string that you assigned to describe the trigger
    public var friendlyName: String?
    /// The frequency of a recurring UsageTrigger
    public var recurring: Recurring?
    /// The unique string that identifies the resource
    public var sid: String?
    /// The field in the UsageRecord resource that fires the trigger
    public var triggerBy: TriggerBy?
    /// The value at which the trigger will fire
    public var triggerValue: String?
    /// The URI of the resource, relative to `https://api.twilio.com`
    public var uri: URL?
    /// The usage category the trigger watches
    public var usageCategory: UsageCategory?
    /// The URI of the UsageRecord resource this trigger watches
    public var usageRecordUri: String?

    /// The HTTP method we use to call callback_url
    public enum CallbackMethod: String, Codable, CaseIterable {
        case head = "HEAD"
        case get = "GET"
        case post = "POST"
        case patch = "PATCH"
        case put = "PUT"
        case delete = "DELETE"
    }

    /// The frequency of a recurring UsageTrigger
    public enum Recurring: String, Codable, CaseIterable {
        case daily
        case monthly
        case yearly
        case alltime
    }

    /// The field in the UsageRecord resource that fires the trigger
    public enum TriggerBy: String, Codable, CaseIterable {
        case count
        case usage
        case price
    }

    /// The usage category the trigger watches
    public enum UsageCategory: String, Codable, CaseIterable {
        case agentConference = "agent-conference"
        case answeringMachineDetection = "answering-machine-detection"
        case authyAuthentications = "authy-authentications"
        case authyCallsOutbound = "authy-calls-outbound"
        case authyMonthlyFees = "authy-monthly-fees"
        case authyPhoneIntelligence = "authy-phone-intelligence"
        case authyPhoneVerifications = "authy-phone-verifications"
        case authySmsOutbound = "authy-sms-outbound"
        case callProgessEvents = "call-progess-events"
        case calleridlookups
        case calls
        case callsClient = "calls-client"
        case callsGlobalconference = "calls-globalconference"
        case callsInbound = "calls-inbound"
        case callsInboundLocal = "calls-inbound-local"
        case callsInboundMobile = "calls-inbound-mobile"
        case callsInboundTollfree = "calls-inbound-tollfree"
        case callsOutbound = "calls-outbound"
        case callsPayVerbTransactions = "calls-pay-verb-transactions"
        case callsRecordings = "calls-recordings"
        case callsSip = "calls-sip"
        case callsSipInbound = "calls-sip-inbound"
        case callsSipOutbound = "calls-sip-outbound"
        case callsTransfers = "calls-transfers"
        case carrierLookups = "carrier-lookups"
        case conversations
        case conversationsAPIRequests = "conversations-api-requests"
        case conversationsConversationEvents = "conversations-conversation-events"
        case conversationsEndpointConnectivity = "conversations-endpoint-connectivity"
        case conversationsEvents = "conversations-events"
        case conversationsParticipantEvents = "conversations-participant-events"
        case conversationsParticipants = "conversations-participants"
        case cps
        case flexUsage = "flex-usage"
        case fraudLookups = "fraud-lookups"
        case groupRooms = "group-rooms"
        case groupRoomsDataTrack = "group-rooms-data-track"
        case groupRoomsEncryptedMediaRecorded = "group-rooms-encrypted-media-recorded"
        case groupRoomsMediaDownloaded = "group-rooms-media-downloaded"
        case groupRoomsMediaRecorded = "group-rooms-media-recorded"
        case groupRoomsMediaRouted = "group-rooms-media-routed"
        case groupRoomsMediaStored = "group-rooms-media-stored"
        case groupRoomsParticipantMinutes = "group-rooms-participant-minutes"
        case groupRoomsRecordedMinutes = "group-rooms-recorded-minutes"
        case impV1Usage = "imp-v1-usage"
        case lookups
        case marketplace
        case marketplaceAlgorithmiaNamedEntityRecognition = "marketplace-algorithmia-named-entity-recognition"
        case marketplaceCadenceTranscription = "marketplace-cadence-transcription"
        case marketplaceCadenceTranslation = "marketplace-cadence-translation"
        case marketplaceCapioSpeechToText = "marketplace-capio-speech-to-text"
        case marketplaceConvrizaAbaba = "marketplace-convriza-ababa"
        case marketplaceDeepgramPhraseDetector = "marketplace-deepgram-phrase-detector"
        case marketplaceDigitalSegmentBusinessInfo = "marketplace-digital-segment-business-info"
        case marketplaceFacebookOfflineConversions = "marketplace-facebook-offline-conversions"
        case marketplaceGoogleSpeechToText = "marketplace-google-speech-to-text"
        case marketplaceIbmWatsonMessageInsights = "marketplace-ibm-watson-message-insights"
        case marketplaceIbmWatsonMessageSentiment = "marketplace-ibm-watson-message-sentiment"
        case marketplaceIbmWatsonRecordingAnalysis = "marketplace-ibm-watson-recording-analysis"
        case marketplaceIbmWatsonToneAnalyzer = "marketplace-ibm-watson-tone-analyzer"
        case marketplaceIcehookSystemsScout = "marketplace-icehook-systems-scout"
        case marketplaceInfogroupDataaxleBizinfo = "marketplace-infogroup-dataaxle-bizinfo"
        case marketplaceKeenIoContactCenterAnalytics = "marketplace-keen-io-contact-center-analytics"
        case marketplaceMarchexCleancall = "marketplace-marchex-cleancall"
        case marketplaceMarchexSentimentAnalysisForSms = "marketplace-marchex-sentiment-analysis-for-sms"
        case marketplaceMarketplaceNextcallerSocialID = "marketplace-marketplace-nextcaller-social-id"
        case marketplaceMobileCommonsOptOutClassifier = "marketplace-mobile-commons-opt-out-classifier"
        case marketplaceNexiwaveVoicemailToText = "marketplace-nexiwave-voicemail-to-text"
        case marketplaceNextcallerAdvancedCallerIdentification = "marketplace-nextcaller-advanced-caller-identification"
        case marketplaceNomoroboSpamScore = "marketplace-nomorobo-spam-score"
        case marketplacePayfoneTcpaCompliance = "marketplace-payfone-tcpa-compliance"
        case marketplaceRemeetingAutomaticSpeechRecognition = "marketplace-remeeting-automatic-speech-recognition"
        case marketplaceTcpaDefenseSolutionsBlacklistFeed = "marketplace-tcpa-defense-solutions-blacklist-feed"
        case marketplaceTeloOpencnam = "marketplace-telo-opencnam"
        case marketplaceTruecnamTrueSpam = "marketplace-truecnam-true-spam"
        case marketplaceTwilioCallerNameLookupUs = "marketplace-twilio-caller-name-lookup-us"
        case marketplaceTwilioCarrierInformationLookup = "marketplace-twilio-carrier-information-lookup"
        case marketplaceVoicebasePci = "marketplace-voicebase-pci"
        case marketplaceVoicebaseTranscription = "marketplace-voicebase-transcription"
        case marketplaceVoicebaseTranscriptionCustomVocabulary = "marketplace-voicebase-transcription-custom-vocabulary"
        case marketplaceWhitepagesProCallerIdentification = "marketplace-whitepages-pro-caller-identification"
        case marketplaceWhitepagesProPhoneIntelligence = "marketplace-whitepages-pro-phone-intelligence"
        case marketplaceWhitepagesProPhoneReputation = "marketplace-whitepages-pro-phone-reputation"
        case marketplaceWolfarmSpokenResults = "marketplace-wolfarm-spoken-results"
        case marketplaceWolframShortAnswer = "marketplace-wolfram-short-answer"
        case marketplaceYticaContactCenterReportingAnalytics = "marketplace-ytica-contact-center-reporting-analytics"
        case mediastorage
        case mms
        case mmsInbound = "mms-inbound"
        case mmsInboundLongcode = "mms-inbound-longcode"
        case mmsInboundShortcode = "mms-inbound-shortcode"
        case mmsMessagesCarrierfees = "mms-messages-carrierfees"
        case mmsOutbound = "mms-outbound"
        case mmsOutboundLongcode = "mms-outbound-longcode"
        case mmsOutboundShortcode = "mms-outbound-shortcode"
        case monitorReads = "monitor-reads"
        case monitorStorage = "monitor-storage"
        case monitorWrites = "monitor-writes"
        case notify
        case notifyActionsAttempts = "notify-actions-attempts"
        case notifyChannels = "notify-channels"
        case numberFormatLookups = "number-format-lookups"
        case pchat
        case pchatUsers = "pchat-users"
        case peerToPeerRoomsParticipantMinutes = "peer-to-peer-rooms-participant-minutes"
        case pfax
        case pfaxMinutes = "pfax-minutes"
        case pfaxMinutesInbound = "pfax-minutes-inbound"
        case pfaxMinutesOutbound = "pfax-minutes-outbound"
        case pfaxPages = "pfax-pages"
        case phonenumbers
        case phonenumbersCps = "phonenumbers-cps"
        case phonenumbersEmergency = "phonenumbers-emergency"
        case phonenumbersLocal = "phonenumbers-local"
        case phonenumbersMobile = "phonenumbers-mobile"
        case phonenumbersSetups = "phonenumbers-setups"
        case phonenumbersTollfree = "phonenumbers-tollfree"
        case premiumsupport
        case proxy
        case proxyActiveSessions = "proxy-active-sessions"
        case pstnconnectivity
        case pv
        case pvCompositionMediaDownloaded = "pv-composition-media-downloaded"
        case pvCompositionMediaEncrypted = "pv-composition-media-encrypted"
        case pvCompositionMediaStored = "pv-composition-media-stored"
        case pvCompositionMinutes = "pv-composition-minutes"
        case pvRecordingCompositions = "pv-recording-compositions"
        case pvRoomParticipants = "pv-room-participants"
        case pvRoomParticipantsAu1 = "pv-room-participants-au1"
        case pvRoomParticipantsBr1 = "pv-room-participants-br1"
        case pvRoomParticipantsIe1 = "pv-room-participants-ie1"
        case pvRoomParticipantsJp1 = "pv-room-participants-jp1"
        case pvRoomParticipantsSg1 = "pv-room-participants-sg1"
        case pvRoomParticipantsUs1 = "pv-room-participants-us1"
        case pvRoomParticipantsUs2 = "pv-room-participants-us2"
        case pvRooms = "pv-rooms"
        case pvSipEndpointRegistrations = "pv-sip-endpoint-registrations"
        case recordings
        case recordingstorage
        case roomsGroupBandwidth = "rooms-group-bandwidth"
        case roomsGroupMinutes = "rooms-group-minutes"
        case roomsPeerToPeerMinutes = "rooms-peer-to-peer-minutes"
        case shortcodes
        case shortcodesCustomerowned = "shortcodes-customerowned"
        case shortcodesMmsEnablement = "shortcodes-mms-enablement"
        case shortcodesMps = "shortcodes-mps"
        case shortcodesRandom = "shortcodes-random"
        case shortcodesUk = "shortcodes-uk"
        case shortcodesVanity = "shortcodes-vanity"
        case smallGroupRooms = "small-group-rooms"
        case smallGroupRoomsDataTrack = "small-group-rooms-data-track"
        case smallGroupRoomsParticipantMinutes = "small-group-rooms-participant-minutes"
        case sms
        case smsInbound = "sms-inbound"
        case smsInboundLongcode = "sms-inbound-longcode"
        case smsInboundShortcode = "sms-inbound-shortcode"
        case smsMessagesCarrierfees = "sms-messages-carrierfees"
        case smsMessagesFeatures = "sms-messages-features"
        case smsMessagesFeaturesSenderid = "sms-messages-features-senderid"
        case smsOutbound = "sms-outbound"
        case smsOutboundContentInspection = "sms-outbound-content-inspection"
        case smsOutboundLongcode = "sms-outbound-longcode"
        case smsOutboundShortcode = "sms-outbound-shortcode"
        case speechRecognition = "speech-recognition"
        case studioEngagements = "studio-engagements"
        case sync
        case syncActions = "sync-actions"
        case syncEndpointHours = "sync-endpoint-hours"
        case syncEndpointHoursAboveDailyCap = "sync-endpoint-hours-above-daily-cap"
        case taskrouterTasks = "taskrouter-tasks"
        case totalprice
        case transcriptions
        case trunkingCps = "trunking-cps"
        case trunkingEmergencyCalls = "trunking-emergency-calls"
        case trunkingOrigination = "trunking-origination"
        case trunkingOriginationLocal = "trunking-origination-local"
        case trunkingOriginationMobile = "trunking-origination-mobile"
        case trunkingOriginationTollfree = "trunking-origination-tollfree"
        case trunkingRecordings = "trunking-recordings"
        case trunkingSecure = "trunking-secure"
        case trunkingTermination = "trunking-termination"
        case turnmegabytes
        case turnmegabytesAustralia = "turnmegabytes-australia"
        case turnmegabytesBrasil = "turnmegabytes-brasil"
        case turnmegabytesGermany = "turnmegabytes-germany"
        case turnmegabytesIndia = "turnmegabytes-india"
        case turnmegabytesIreland = "turnmegabytes-ireland"
        case turnmegabytesJapan = "turnmegabytes-japan"
        case turnmegabytesSingapore = "turnmegabytes-singapore"
        case turnmegabytesUseast = "turnmegabytes-useast"
        case turnmegabytesUswest = "turnmegabytes-uswest"
        case twilioInterconnect = "twilio-interconnect"
        case verifyPush = "verify-push"
        case videoRecordings = "video-recordings"
        case voiceInsights = "voice-insights"
        case voiceInsightsClientInsightsOnDemandMinute = "voice-insights-client-insights-on-demand-minute"
        case voiceInsightsPtsnInsightsOnDemandMinute = "voice-insights-ptsn-insights-on-demand-minute"
        case voiceInsightsSipInterfaceInsightsOnDemandMinute = "voice-insights-sip-interface-insights-on-demand-minute"
        case voiceInsightsSipTrunkingInsightsOnDemandMinute = "voice-insights-sip-trunking-insights-on-demand-minute"
        case wireless
        case wirelessOrders = "wireless-orders"
        case wirelessOrdersArtwork = "wireless-orders-artwork"
        case wirelessOrdersBulk = "wireless-orders-bulk"
        case wirelessOrdersEsim = "wireless-orders-esim"
        case wirelessOrdersStarter = "wireless-orders-starter"
        case wirelessUsage = "wireless-usage"
        case wirelessUsageCommands = "wireless-usage-commands"
        case wirelessUsageCommandsAfrica = "wireless-usage-commands-africa"
        case wirelessUsageCommandsAsia = "wireless-usage-commands-asia"
        case wirelessUsageCommandsCentralandsouthamerica = "wireless-usage-commands-centralandsouthamerica"
        case wirelessUsageCommandsEurope = "wireless-usage-commands-europe"
        case wirelessUsageCommandsHome = "wireless-usage-commands-home"
        case wirelessUsageCommandsNorthamerica = "wireless-usage-commands-northamerica"
        case wirelessUsageCommandsOceania = "wireless-usage-commands-oceania"
        case wirelessUsageCommandsRoaming = "wireless-usage-commands-roaming"
        case wirelessUsageData = "wireless-usage-data"
        case wirelessUsageDataAfrica = "wireless-usage-data-africa"
        case wirelessUsageDataAsia = "wireless-usage-data-asia"
        case wirelessUsageDataCentralandsouthamerica = "wireless-usage-data-centralandsouthamerica"
        case wirelessUsageDataCustomAdditionalmb = "wireless-usage-data-custom-additionalmb"
        case wirelessUsageDataCustomFirst5mb = "wireless-usage-data-custom-first5mb"
        case wirelessUsageDataDomesticRoaming = "wireless-usage-data-domestic-roaming"
        case wirelessUsageDataEurope = "wireless-usage-data-europe"
        case wirelessUsageDataIndividualAdditionalgb = "wireless-usage-data-individual-additionalgb"
        case wirelessUsageDataIndividualFirstgb = "wireless-usage-data-individual-firstgb"
        case wirelessUsageDataInternationalRoamingCanada = "wireless-usage-data-international-roaming-canada"
        case wirelessUsageDataInternationalRoamingIndia = "wireless-usage-data-international-roaming-india"
        case wirelessUsageDataInternationalRoamingMexico = "wireless-usage-data-international-roaming-mexico"
        case wirelessUsageDataNorthamerica = "wireless-usage-data-northamerica"
        case wirelessUsageDataOceania = "wireless-usage-data-oceania"
        case wirelessUsageDataPooled = "wireless-usage-data-pooled"
        case wirelessUsageDataPooledDownlink = "wireless-usage-data-pooled-downlink"
        case wirelessUsageDataPooledUplink = "wireless-usage-data-pooled-uplink"
        case wirelessUsageMrc = "wireless-usage-mrc"
        case wirelessUsageMrcCustom = "wireless-usage-mrc-custom"
        case wirelessUsageMrcIndividual = "wireless-usage-mrc-individual"
        case wirelessUsageMrcPooled = "wireless-usage-mrc-pooled"
        case wirelessUsageMrcSuspended = "wireless-usage-mrc-suspended"
        case wirelessUsageSms = "wireless-usage-sms"
        case wirelessUsageVoice = "wireless-usage-voice"
    }

    public init(accountSid: String? = nil, apiVersion: String? = nil, callbackMethod: CallbackMethod? = nil, callbackURL: URL? = nil, currentValue: String? = nil, dateCreated: String? = nil, dateFired: String? = nil, dateUpdated: String? = nil, friendlyName: String? = nil, recurring: Recurring? = nil, sid: String? = nil, triggerBy: TriggerBy? = nil, triggerValue: String? = nil, uri: URL? = nil, usageCategory: UsageCategory? = nil, usageRecordUri: String? = nil) {
        self.accountSid = accountSid
        self.apiVersion = apiVersion
        self.callbackMethod = callbackMethod
        self.callbackURL = callbackURL
        self.currentValue = currentValue
        self.dateCreated = dateCreated
        self.dateFired = dateFired
        self.dateUpdated = dateUpdated
        self.friendlyName = friendlyName
        self.recurring = recurring
        self.sid = sid
        self.triggerBy = triggerBy
        self.triggerValue = triggerValue
        self.uri = uri
        self.usageCategory = usageCategory
        self.usageRecordUri = usageRecordUri
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case apiVersion = "api_version"
        case callbackMethod = "callback_method"
        case callbackURL = "callback_url"
        case currentValue = "current_value"
        case dateCreated = "date_created"
        case dateFired = "date_fired"
        case dateUpdated = "date_updated"
        case friendlyName = "friendly_name"
        case recurring
        case sid
        case triggerBy = "trigger_by"
        case triggerValue = "trigger_value"
        case uri
        case usageCategory = "usage_category"
        case usageRecordUri = "usage_record_uri"
    }
}

public struct APIV2010AccountValidationRequest: Codable {
    /// The SID of the Account that created the resource
    public var accountSid: String?
    /// The SID of the Call the resource is associated with
    public var callSid: String?
    /// The string that you assigned to describe the resource
    public var friendlyName: String?
    /// The phone number to verify in E.164 format
    public var phoneNumber: String?
    /// The 6 digit validation code that someone must enter to validate the Caller ID  when `phone_number` is called
    public var validationCode: String?

    public init(accountSid: String? = nil, callSid: String? = nil, friendlyName: String? = nil, phoneNumber: String? = nil, validationCode: String? = nil) {
        self.accountSid = accountSid
        self.callSid = callSid
        self.friendlyName = friendlyName
        self.phoneNumber = phoneNumber
        self.validationCode = validationCode
    }

    private enum CodingKeys: String, CodingKey {
        case accountSid = "account_sid"
        case callSid = "call_sid"
        case friendlyName = "friendly_name"
        case phoneNumber = "phone_number"
        case validationCode = "validation_code"
    }
}

public enum AnyJSON: Equatable, Codable {
    case string(String)
    case number(Double)
    case object([String: AnyJSON])
    case array([AnyJSON])
    case bool(Bool)

    var value: Any {
        switch self {
        case .string(let string): return string
        case .number(let double): return double
        case .object(let dictionary): return dictionary
        case .array(let array): return array
        case .bool(let bool): return bool
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .array(array): try container.encode(array)
        case let .object(object): try container.encode(object)
        case let .string(string): try container.encode(string)
        case let .number(number): try container.encode(number)
        case let .bool(bool): try container.encode(bool)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let object = try? container.decode([String: AnyJSON].self) {
            self = .object(object)
        } else if let array = try? container.decode([AnyJSON].self) {
            self = .array(array)
        } else if let string = try? container.decode(String.self) {
            self = .string(string)
        } else if let bool = try? container.decode(Bool.self) {
            self = .bool(bool)
        } else if let number = try? container.decode(Double.self) {
            self = .number(number)
        } else {
            throw DecodingError.dataCorrupted(
                .init(codingPath: decoder.codingPath, debugDescription: "Invalid JSON value.")
            )
        }
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
