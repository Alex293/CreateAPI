// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation

/// Example:
///
/// {
///   "accountDetails" : {
///     "accountNumber" : "12345678",
///     "sortcode" : "123456"
///   },
///   "address" : {
///     "addressLine1" : "10 Downing St",
///     "addressLine2" : "Westminster",
///     "city" : "London",
///     "country" : "United Kingdom",
///     "postcode" : "SW1A2AA"
///   },
///   "person" : {
///     "forename" : "Angela",
///     "surname" : "UK Specimen"
///   },
///   "regEntryId" : "141dbb24-c4ff-4658-9556-15ea25428d48"
/// }
public struct CredasAPIModelsBankAccountsAccountVerificationRequest: Codable {
    public var address: CredasAPIModelsDataCheckAddress
    public var person: CredasAPIModelsBankAccountsPerson
    public var accountDetails: CredasAPIModelsBankAccountsAccountDetails
    public var regEntryID: String

    public init(address: CredasAPIModelsDataCheckAddress, person: CredasAPIModelsBankAccountsPerson, accountDetails: CredasAPIModelsBankAccountsAccountDetails, regEntryID: String) {
        self.address = address
        self.person = person
        self.accountDetails = accountDetails
        self.regEntryID = regEntryID
    }

    private enum CodingKeys: String, CodingKey {
        case address
        case person
        case accountDetails
        case regEntryID = "regEntryId"
    }
}

public struct CredasAPIModelsDataCheckAddress: Codable {
    public var addressLine1: String
    public var addressLine2: String?
    public var addressLine3: String?
    public var city: String
    public var postcode: String
    public var county: String?
    public var country: String

    public init(addressLine1: String, addressLine2: String? = nil, addressLine3: String? = nil, city: String, postcode: String, county: String? = nil, country: String) {
        self.addressLine1 = addressLine1
        self.addressLine2 = addressLine2
        self.addressLine3 = addressLine3
        self.city = city
        self.postcode = postcode
        self.county = county
        self.country = country
    }
}

public struct CredasAPIModelsBankAccountsPerson: Codable {
    public var forename: String
    public var middleName: String?
    public var surname: String

    public init(forename: String, middleName: String? = nil, surname: String) {
        self.forename = forename
        self.middleName = middleName
        self.surname = surname
    }
}

public struct CredasAPIModelsBankAccountsAccountDetails: Codable {
    public var sortcode: String
    public var accountNumber: String

    public init(sortcode: String, accountNumber: String) {
        self.sortcode = sortcode
        self.accountNumber = accountNumber
    }
}

public struct CredasAPIModelsBankAccountsAccountVerificationResponse: Codable {
    public var checkID: String?
    public var checkDate: Date?
    public var sortcode: String?
    public var accountNumber: String?
    public var referenceID: String?
    public var isError: Bool?
    public var isAccountValid: Bool?
    /// Unknown = 0, NoMatch = 1, Valid = 2, Invalid = 3, FiveDigitsMatched = 4
    public var sortcodeValidation: Int?
    public var sortcodeValidationText: String?
    /// Unknown = 0, NoMatch = 1, Valid = 2, Invalid = 3, SevenDigitsMatched = 4, SixDigitsMatched = 5
    public var accountNumberValidation: Int?
    public var accountNumberValidationText: String?
    /// Unknown = 0, NoMatch = 1, Valid = 2
    public var nameValidation: Int?
    public var nameValidationText: String?
    /// Unknown = 0, NoMatch = 1, CurrentAddress = 2, PreviousAddress = 3, ForwardingAddress = 4
    public var addressValidation: Int?
    public var addressValidationText: String?
    /// Unknown = 0, NoMatch = 1, Live = 2, ClosedOrSettled = 3
    public var accountStatus: Int?
    public var accountStatusText: String?
    /// Unknown = 0, Pass = 1, Refer = 2, Fail = 3
    public var checkStatus: Int?
    public var hasBeenOverridden: Bool?

    public init(checkID: String? = nil, checkDate: Date? = nil, sortcode: String? = nil, accountNumber: String? = nil, referenceID: String? = nil, isError: Bool? = nil, isAccountValid: Bool? = nil, sortcodeValidation: Int? = nil, sortcodeValidationText: String? = nil, accountNumberValidation: Int? = nil, accountNumberValidationText: String? = nil, nameValidation: Int? = nil, nameValidationText: String? = nil, addressValidation: Int? = nil, addressValidationText: String? = nil, accountStatus: Int? = nil, accountStatusText: String? = nil, checkStatus: Int? = nil, hasBeenOverridden: Bool? = nil) {
        self.checkID = checkID
        self.checkDate = checkDate
        self.sortcode = sortcode
        self.accountNumber = accountNumber
        self.referenceID = referenceID
        self.isError = isError
        self.isAccountValid = isAccountValid
        self.sortcodeValidation = sortcodeValidation
        self.sortcodeValidationText = sortcodeValidationText
        self.accountNumberValidation = accountNumberValidation
        self.accountNumberValidationText = accountNumberValidationText
        self.nameValidation = nameValidation
        self.nameValidationText = nameValidationText
        self.addressValidation = addressValidation
        self.addressValidationText = addressValidationText
        self.accountStatus = accountStatus
        self.accountStatusText = accountStatusText
        self.checkStatus = checkStatus
        self.hasBeenOverridden = hasBeenOverridden
    }

    private enum CodingKeys: String, CodingKey {
        case checkID = "checkId"
        case checkDate
        case sortcode
        case accountNumber
        case referenceID = "referenceId"
        case isError = "error"
        case isAccountValid = "accountValid"
        case sortcodeValidation
        case sortcodeValidationText
        case accountNumberValidation
        case accountNumberValidationText
        case nameValidation
        case nameValidationText
        case addressValidation
        case addressValidationText
        case accountStatus
        case accountStatusText
        case checkStatus
        case hasBeenOverridden
    }
}

public struct CredasAPIModelsErrorsErrorResponse: Codable {
    public var message: String?
    public var details: [String: AnyJSON]?

    public init(message: String? = nil, details: [String: AnyJSON]? = nil) {
        self.message = message
        self.details = details
    }
}

public struct CredasAPIModelsCompaniesCompanyDetail: Codable {
    public var id: String?
    public var companyName: String?
    public var companyNumber: String?
    public var addressLine1: String?
    public var locality: String?
    public var region: String?
    public var postCode: String?
    public var dateOfRegistration: Date?
    public var isDuplicate: Bool?
    public var significantParentCompanies: [CredasAPIModelsCompaniesCompanyDetail]?
    public var significantPeople: [CredasAPIModelsCompaniesSignificantPerson]?

    public init(id: String? = nil, companyName: String? = nil, companyNumber: String? = nil, addressLine1: String? = nil, locality: String? = nil, region: String? = nil, postCode: String? = nil, dateOfRegistration: Date? = nil, isDuplicate: Bool? = nil, significantParentCompanies: [CredasAPIModelsCompaniesCompanyDetail]? = nil, significantPeople: [CredasAPIModelsCompaniesSignificantPerson]? = nil) {
        self.id = id
        self.companyName = companyName
        self.companyNumber = companyNumber
        self.addressLine1 = addressLine1
        self.locality = locality
        self.region = region
        self.postCode = postCode
        self.dateOfRegistration = dateOfRegistration
        self.isDuplicate = isDuplicate
        self.significantParentCompanies = significantParentCompanies
        self.significantPeople = significantPeople
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case companyName
        case companyNumber
        case addressLine1
        case locality
        case region
        case postCode
        case dateOfRegistration
        case isDuplicate = "duplicate"
        case significantParentCompanies
        case significantPeople
    }
}

public struct CredasAPIModelsCompaniesSignificantPerson: Codable {
    public var id: String?
    public var forename: String?
    public var surname: String?
    public var regEntryID: String?

    public init(id: String? = nil, forename: String? = nil, surname: String? = nil, regEntryID: String? = nil) {
        self.id = id
        self.forename = forename
        self.surname = surname
        self.regEntryID = regEntryID
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case forename
        case surname
        case regEntryID = "regEntryId"
    }
}

public struct CredasAPIModelsStatusChecksStatusCheckRequest: Codable {
    public var regEntryID: String
    public var person: CredasAPIModelsDataCheckPerson
    public var address: CredasAPIModelsDataCheckAddress

    public init(regEntryID: String, person: CredasAPIModelsDataCheckPerson, address: CredasAPIModelsDataCheckAddress) {
        self.regEntryID = regEntryID
        self.person = person
        self.address = address
    }

    private enum CodingKeys: String, CodingKey {
        case regEntryID = "regEntryId"
        case person
        case address
    }
}

public struct CredasAPIModelsDataCheckPerson: Codable {
    public var forename: String
    public var middleName: String?
    public var surname: String
    public var dateOfBirth: Date

    public init(forename: String, middleName: String? = nil, surname: String, dateOfBirth: Date) {
        self.forename = forename
        self.middleName = middleName
        self.surname = surname
        self.dateOfBirth = dateOfBirth
    }
}

public struct CredasAPIModelsStatusChecksStatusCheck: Codable {
    /// Unknown = 0, Pass = 1, Refer = 2, Fail = 3
    public var status: Int?
    public var hasBeenOverridden: Bool?
    public var checkDate: Date?
    public var insolvency: [CredasAPIModelsStatusChecksInsolvencyInsolvencyResult]?
    public var ccj: [CredasAPIModelsStatusChecksCCJCcjResult]?
    public var companyDirector: [CredasAPIModelsStatusChecksCompanyDirectorCompanyDirectorResult]?

    public init(status: Int? = nil, hasBeenOverridden: Bool? = nil, checkDate: Date? = nil, insolvency: [CredasAPIModelsStatusChecksInsolvencyInsolvencyResult]? = nil, ccj: [CredasAPIModelsStatusChecksCCJCcjResult]? = nil, companyDirector: [CredasAPIModelsStatusChecksCompanyDirectorCompanyDirectorResult]? = nil) {
        self.status = status
        self.hasBeenOverridden = hasBeenOverridden
        self.checkDate = checkDate
        self.insolvency = insolvency
        self.ccj = ccj
        self.companyDirector = companyDirector
    }
}

public struct CredasAPIModelsStatusChecksInsolvencyInsolvencyResult: Codable {
    /// Unknown = 0, NorthernIrelandBankruptcy = 1, ScottishSequestrationBankruptcy = 2, EnglandAndWalesIVA = 3, EnglandAndWalesDRO = 4, EnglandAndWalesBankruptcy = 5
    public var type: Int?
    public var typeText: String?
    public var name: String?
    public var caseNo: String?
    public var address: CredasAPIModelsStatusChecksInsolvencyAddress?
    public var dob: Date?
    public var court: String?
    public var startDate: Date?
    public var status: String?
    public var occupation: String?
    public var aliases: String?
    public var description: String?
    public var serviceOffice: String?
    public var telephoneNumber: String?
    public var caseType: String?
    public var tradingNames: String?
    public var debtTotal: String?
    public var assetTotal: String?
    public var previousAddress: CredasAPIModelsStatusChecksInsolvencyAddress?
    public var presentationDate: Date?

    public init(type: Int? = nil, typeText: String? = nil, name: String? = nil, caseNo: String? = nil, address: CredasAPIModelsStatusChecksInsolvencyAddress? = nil, dob: Date? = nil, court: String? = nil, startDate: Date? = nil, status: String? = nil, occupation: String? = nil, aliases: String? = nil, description: String? = nil, serviceOffice: String? = nil, telephoneNumber: String? = nil, caseType: String? = nil, tradingNames: String? = nil, debtTotal: String? = nil, assetTotal: String? = nil, previousAddress: CredasAPIModelsStatusChecksInsolvencyAddress? = nil, presentationDate: Date? = nil) {
        self.type = type
        self.typeText = typeText
        self.name = name
        self.caseNo = caseNo
        self.address = address
        self.dob = dob
        self.court = court
        self.startDate = startDate
        self.status = status
        self.occupation = occupation
        self.aliases = aliases
        self.description = description
        self.serviceOffice = serviceOffice
        self.telephoneNumber = telephoneNumber
        self.caseType = caseType
        self.tradingNames = tradingNames
        self.debtTotal = debtTotal
        self.assetTotal = assetTotal
        self.previousAddress = previousAddress
        self.presentationDate = presentationDate
    }
}

public struct CredasAPIModelsStatusChecksCCJCcjResult: Codable {
    public var name: String?
    public var dob: Date?
    public var address1: String?
    public var address2: String?
    public var address3: String?
    public var address4: String?
    public var address5: String?
    public var postcode: String?
    public var judgementDate: Date?
    /// Unknown = 0, Judgement = 1, Satisfaction = 2, Revocation = 3, SetAside = 4, AdministrationOrder = 5
    public var judgementType: Int?
    public var judgementTypeText: String?
    public var amount: String?
    public var caseNumber: String?
    public var courtName: String?
    public var dateEnd: Date?

    public init(name: String? = nil, dob: Date? = nil, address1: String? = nil, address2: String? = nil, address3: String? = nil, address4: String? = nil, address5: String? = nil, postcode: String? = nil, judgementDate: Date? = nil, judgementType: Int? = nil, judgementTypeText: String? = nil, amount: String? = nil, caseNumber: String? = nil, courtName: String? = nil, dateEnd: Date? = nil) {
        self.name = name
        self.dob = dob
        self.address1 = address1
        self.address2 = address2
        self.address3 = address3
        self.address4 = address4
        self.address5 = address5
        self.postcode = postcode
        self.judgementDate = judgementDate
        self.judgementType = judgementType
        self.judgementTypeText = judgementTypeText
        self.amount = amount
        self.caseNumber = caseNumber
        self.courtName = courtName
        self.dateEnd = dateEnd
    }
}

public struct CredasAPIModelsStatusChecksCompanyDirectorCompanyDirectorResult: Codable {
    /// Unknown = 0, NameAndDateOfBirth = 1, NameAndAddress = 2, NameAndAddressAndDateOfBirth = 3
    public var matchType: Int?
    public var matchTypeText: String?
    public var dateAppointed: Date?
    public var companyRegNo: String?
    public var companyName: String?
    public var registeredOffice: String?
    public var companyAppointments: [CredasAPIModelsStatusChecksCompanyDirectorCompanyAppointment]?

    public init(matchType: Int? = nil, matchTypeText: String? = nil, dateAppointed: Date? = nil, companyRegNo: String? = nil, companyName: String? = nil, registeredOffice: String? = nil, companyAppointments: [CredasAPIModelsStatusChecksCompanyDirectorCompanyAppointment]? = nil) {
        self.matchType = matchType
        self.matchTypeText = matchTypeText
        self.dateAppointed = dateAppointed
        self.companyRegNo = companyRegNo
        self.companyName = companyName
        self.registeredOffice = registeredOffice
        self.companyAppointments = companyAppointments
    }
}

public struct CredasAPIModelsStatusChecksInsolvencyAddress: Codable {
    public var address1: String?
    public var address2: String?
    public var address3: String?
    public var address4: String?
    public var address5: String?
    public var postcode: String?
    public var dps: String?
    public var isEmpty: Bool?

    public init(address1: String? = nil, address2: String? = nil, address3: String? = nil, address4: String? = nil, address5: String? = nil, postcode: String? = nil, dps: String? = nil, isEmpty: Bool? = nil) {
        self.address1 = address1
        self.address2 = address2
        self.address3 = address3
        self.address4 = address4
        self.address5 = address5
        self.postcode = postcode
        self.dps = dps
        self.isEmpty = isEmpty
    }
}

public struct CredasAPIModelsStatusChecksCompanyDirectorCompanyAppointment: Codable {
    public var title: String?
    public var name: String?
    public var address: String?
    public var dob: Date?
    public var occupation: String?
    public var nationality: String?
    public var appointmentDate: Date?
    public var appointmentType: String?

    public init(title: String? = nil, name: String? = nil, address: String? = nil, dob: Date? = nil, occupation: String? = nil, nationality: String? = nil, appointmentDate: Date? = nil, appointmentType: String? = nil) {
        self.title = title
        self.name = name
        self.address = address
        self.dob = dob
        self.occupation = occupation
        self.nationality = nationality
        self.appointmentDate = appointmentDate
        self.appointmentType = appointmentType
    }
}

/// Example:
///
/// {
///   "checkType" : 2,
///   "currentAddress" : {
///     "addressLine1" : "25 Westgate Street",
///     "addressLine2" : null,
///     "addressLine3" : null,
///     "city" : "Cardiff",
///     "country" : "United Kingdom",
///     "county" : "Cardiff",
///     "postcode" : "CF101NS"
///   },
///   "person" : {
///     "dateOfBirth" : "1988-12-04T00:00:00",
///     "forename" : "Angela",
///     "surname" : "UK Specimen"
///   },
///   "regEntryId" : "141dbb24-c4ff-4658-9556-15ea25428d48"
/// }
public struct CredasAPIModelsDataCheckAddDataCheckRequest: Codable {
    public var regEntryID: String
    /// The value of checkType dictates what checks are performed. <br/>The StandardAml check (value = 1) will check DOB & Mortality. <br/>The InternationalPepSanctions check (value = 3) will check just International PEP & Sanctions. <br/>The EnhancedAml check (value = 2) will perform both these checks and is equivalent to making two calls with values of 1 then 3 and will be charged accordingly. <br />  values=> None = 0, StandardAml = 1, EnhancedAml = 2, InternationalPepSanctions = 3
    public var checkType: Int
    public var person: CredasAPIModelsDataCheckPerson
    public var currentAddress: CredasAPIModelsDataCheckAddress

    public init(regEntryID: String, checkType: Int, person: CredasAPIModelsDataCheckPerson, currentAddress: CredasAPIModelsDataCheckAddress) {
        self.regEntryID = regEntryID
        self.checkType = checkType
        self.person = person
        self.currentAddress = currentAddress
    }

    private enum CodingKeys: String, CodingKey {
        case regEntryID = "regEntryId"
        case checkType
        case person
        case currentAddress
    }
}

public struct CredasAPIModelsDataCheckAddDataCheckResponse: Codable {
    public var id: String
    public var regCode: String

    public init(id: String, regCode: String) {
        self.id = id
        self.regCode = regCode
    }
}

public struct CredasAPIModelsImagesGetSelfieImageResponse: Codable {
    public var url: String?

    public init(url: String? = nil) {
        self.url = url
    }
}

/// Example:
///
/// {
///   "imageData" : "Base64EncodedJpegImage",
///   "registrationId" : "141dbb24-c4ff-4658-9556-15ea25428d48"
/// }
public struct CredasAPIModelsImagesAddSelfieImageRequest: Codable {
    public var registrationID: String
    public var imageData: String

    public init(registrationID: String, imageData: String) {
        self.registrationID = registrationID
        self.imageData = imageData
    }

    private enum CodingKeys: String, CodingKey {
        case registrationID = "registrationId"
        case imageData
    }
}

public struct CredasAPIModelsImagesAddSelfieImageResponse: Codable {
    public var isLivenessConfirmed: Bool

    public init(isLivenessConfirmed: Bool) {
        self.isLivenessConfirmed = isLivenessConfirmed
    }

    private enum CodingKeys: String, CodingKey {
        case isLivenessConfirmed = "livenessConfirmed"
    }
}

public struct CredasAPIModelsImagesGetLivenessImageResponse: Codable {
    public var id: String?
    public var description: String?
    public var url: String?

    public init(id: String? = nil, description: String? = nil, url: String? = nil) {
        self.id = id
        self.description = description
        self.url = url
    }
}

/// Example:
///
/// {
///   "imageData" : "Base64EncodedJpegImage",
///   "registrationId" : "141dbb24-c4ff-4658-9556-15ea25428d48"
/// }
public struct CredasAPIModelsImagesAddLivenessImageRequest: Codable {
    public var registrationID: String
    public var imageData: String

    public init(registrationID: String, imageData: String) {
        self.registrationID = registrationID
        self.imageData = imageData
    }

    private enum CodingKeys: String, CodingKey {
        case registrationID = "registrationId"
        case imageData
    }
}

public struct CredasAPIModelsImagesGetLivenessPerformedImageResponse: Codable {
    public var url: String?

    public init(url: String? = nil) {
        self.url = url
    }
}

public struct CredasAPIModelsImagesGetIDDocumentImageResponse: Codable {
    public var url: String
    public var hiResURL: String
    public var nfcFacialURL: String?
    public var id: String
    public var dateCreated: Date
    public var description: String
    /// Indicates the verification status of the document itself by combining visual analysis and NFC verification results. </br>Note that this may be a pass even if facial or name matches have failed.<br />  values=> Unknown = 0, Pass = 1, Refer = 2, Fail = 3
    public var status: Int
    public var isFacialMatch: Bool
    public var isNameCheck: Bool
    /// Unknown = 0, Automatic = 1, Manual = 2
    public var nameCheckMethod: Int
    public var isNfcCheck: Bool
    /// Unknown = 0, Passed = 1, Failed = 2, NotAttempted = 3, Skipped = 4, Unavailable = 5, NotAllowed = 6, NotTrusted = 7, NotApplicable = 8, Expired = 9
    public var nfcReadStatus: Int
    public var forename: String?
    public var middleName: String?
    public var surname: String?
    public var fullName: String?
    public var dateOfBirth: Date?
    public var countryCode: String?
    public var country: String?
    public var documentNumber: String?
    public var expiryDate: Date?
    public var addressFull: String?
    public var addressPostcode: String?
    public var addressCity: String?
    public var isUnderReview: Bool?
    /// Unknown = 0, Passed = 1, Refer = 2, Expired = 3, NotSupported = 4, Undefined = 5, Fail = 10, NotPerformed = 11
    public var documentAnalysisResult: Int?
    public var mrz1: String?
    public var mrz2: String?
    public var mrz3: String?
    public var isManuallyVerified: Bool?
    /// Front = 1, Back = 2
    public var documentSide: Int?
    public var primaryScanID: String?

    public init(url: String, hiResURL: String, nfcFacialURL: String? = nil, id: String, dateCreated: Date, description: String, status: Int, isFacialMatch: Bool, isNameCheck: Bool, nameCheckMethod: Int, isNfcCheck: Bool, nfcReadStatus: Int, forename: String? = nil, middleName: String? = nil, surname: String? = nil, fullName: String? = nil, dateOfBirth: Date? = nil, countryCode: String? = nil, country: String? = nil, documentNumber: String? = nil, expiryDate: Date? = nil, addressFull: String? = nil, addressPostcode: String? = nil, addressCity: String? = nil, isUnderReview: Bool? = nil, documentAnalysisResult: Int? = nil, mrz1: String? = nil, mrz2: String? = nil, mrz3: String? = nil, isManuallyVerified: Bool? = nil, documentSide: Int? = nil, primaryScanID: String? = nil) {
        self.url = url
        self.hiResURL = hiResURL
        self.nfcFacialURL = nfcFacialURL
        self.id = id
        self.dateCreated = dateCreated
        self.description = description
        self.status = status
        self.isFacialMatch = isFacialMatch
        self.isNameCheck = isNameCheck
        self.nameCheckMethod = nameCheckMethod
        self.isNfcCheck = isNfcCheck
        self.nfcReadStatus = nfcReadStatus
        self.forename = forename
        self.middleName = middleName
        self.surname = surname
        self.fullName = fullName
        self.dateOfBirth = dateOfBirth
        self.countryCode = countryCode
        self.country = country
        self.documentNumber = documentNumber
        self.expiryDate = expiryDate
        self.addressFull = addressFull
        self.addressPostcode = addressPostcode
        self.addressCity = addressCity
        self.isUnderReview = isUnderReview
        self.documentAnalysisResult = documentAnalysisResult
        self.mrz1 = mrz1
        self.mrz2 = mrz2
        self.mrz3 = mrz3
        self.isManuallyVerified = isManuallyVerified
        self.documentSide = documentSide
        self.primaryScanID = primaryScanID
    }

    private enum CodingKeys: String, CodingKey {
        case url
        case hiResURL = "hiResUrl"
        case nfcFacialURL = "nfcFacialUrl"
        case id
        case dateCreated
        case description
        case status
        case isFacialMatch = "facialMatch"
        case isNameCheck = "nameCheck"
        case nameCheckMethod
        case isNfcCheck = "nfcCheck"
        case nfcReadStatus
        case forename
        case middleName
        case surname
        case fullName
        case dateOfBirth
        case countryCode
        case country
        case documentNumber
        case expiryDate
        case addressFull
        case addressPostcode
        case addressCity
        case isUnderReview
        case documentAnalysisResult
        case mrz1
        case mrz2
        case mrz3
        case isManuallyVerified = "manuallyVerified"
        case documentSide
        case primaryScanID = "primaryScanId"
    }
}

/// Example:
///
/// {
///   "documentType" : 1,
///   "imageData" : "Base64EncodedJpegImage",
///   "registrationId" : "141dbb24-c4ff-4658-9556-15ea25428d48"
/// }
public struct CredasAPIModelsImagesAddIDDocumentImageRequest: Codable {
    /// Other = 0, Passport = 1, DrivingLicence = 2, Visa = 3, CscsCard = 4, HomeOfficeLetter = 5, BirthCertificate = 6, NationalIdCard = 7, ResidencePermit = 9, UtilityBill = 11
    public var documentType: Int
    public var documentParameters: [CredasAPIModelsRegistrationsKeyValueItem]?
    public var registrationID: String
    public var imageData: String

    public init(documentType: Int, documentParameters: [CredasAPIModelsRegistrationsKeyValueItem]? = nil, registrationID: String, imageData: String) {
        self.documentType = documentType
        self.documentParameters = documentParameters
        self.registrationID = registrationID
        self.imageData = imageData
    }

    private enum CodingKeys: String, CodingKey {
        case documentType
        case documentParameters
        case registrationID = "registrationId"
        case imageData
    }
}

public struct CredasAPIModelsRegistrationsKeyValueItem: Codable {
    public var key: String?
    public var value: String?

    public init(key: String? = nil, value: String? = nil) {
        self.key = key
        self.value = value
    }
}

public struct CredasAPIModelsImagesAddIDDocumentImageResponse: Codable {
    /// Unknown = 0, Passport = 1, DrivingLicense = 2, IdentificationCard = 3, TaxLetter = 4, NIC_Letter = 5, TV_Licence = 6, UtilityBill = 7, HighRiskWorkLicence = 8, TravelPermit = 9, BankLetter = 10, BenefitLetter = 11, BankStatement = 12, NINO_Letter = 13, CouncilTax = 14, ResidentPermit = 15, PhotoCard = 16, RepaymentLetter = 17, Invoice = 18, Visa = 19, AgeIdentificationCard = 20, MedicareCard = 21, MilitaryIdentificationCard = 22, UtilityLetter = 23, CouncilDocument = 24, JobLicence = 25, MembershipIDCard = 26, MilitaryIDCard = 27, ProofOfAgeCard = 28, TravelPermitNew = 29, WeaponsLicence = 30, AccountStatement = 41, TenancyAgreement = 42, BankDocument = 43, BankLetterNew = 44, BankStatementNew = 45, BenefitLetterNew = 46, CouncilDocumentNew = 48, CouncilLetter = 49, CouncilTaxNew = 50, DWPDocument = 51, HMRCDocument = 52, InformationSheet = 53, InsuranceDocument = 54, InsuranceLetter = 55, InvoiceNew = 56, NICLetter = 57, NINOLetter = 58, OfficialDocument = 59, OfficialLetter = 60, RepaymentLetterNew = 61, TaxLetterNew = 62, TaxStatement = 63, TelBill = 64, TelLetter = 65, TelecommunicationDocument = 66, TVLicence = 67, UniversityLetter = 68, UtilityBillNew = 69, UtilityDocument = 70, UtilityLetterNew = 71, WaterBill = 72, WaterDocument = 73, HighRiskWorkLicenceNew = 74, PhotoCardNew = 75, MedicareCardNew = 76, Certificate = 77
    public var documentType: Int
    /// Active = 1, Deleted = 2, UnderReview = 3
    public var documentStatus: Int
    public var isFacialMatch: Bool
    public var id: String
    public var regCode: String

    public init(documentType: Int, documentStatus: Int, isFacialMatch: Bool, id: String, regCode: String) {
        self.documentType = documentType
        self.documentStatus = documentStatus
        self.isFacialMatch = isFacialMatch
        self.id = id
        self.regCode = regCode
    }

    private enum CodingKeys: String, CodingKey {
        case documentType
        case documentStatus
        case isFacialMatch = "facialMatch"
        case id
        case regCode
    }
}

/// Example:
///
/// {
///   "address" : {
///     "addressLine1" : "25 Westgate Street",
///     "city" : "Cardiff",
///     "country" : "United Kingdom",
///     "county" : "Cardiff",
///     "postcode" : "CF101NS"
///   },
///   "person" : {
///     "forename" : "Angela",
///     "surname" : "UK Specimen"
///   },
///   "regEntryId" : "12345678-1234-1234-1234-1234567890ab"
/// }
public struct CredasAPIModelsPropertyRegisterPropertyRegisterCheckRequest: Codable {
    public var person: CredasAPIModelsPropertyRegisterPerson
    public var address: CredasAPIModelsPropertyRegisterAddress
    public var regEntryID: String

    public init(person: CredasAPIModelsPropertyRegisterPerson, address: CredasAPIModelsPropertyRegisterAddress, regEntryID: String) {
        self.person = person
        self.address = address
        self.regEntryID = regEntryID
    }

    private enum CodingKeys: String, CodingKey {
        case person
        case address
        case regEntryID = "regEntryId"
    }
}

public struct CredasAPIModelsPropertyRegisterPerson: Codable {
    public var forename: String
    public var middleName: String?
    public var surname: String

    public init(forename: String, middleName: String? = nil, surname: String) {
        self.forename = forename
        self.middleName = middleName
        self.surname = surname
    }
}

public struct CredasAPIModelsPropertyRegisterAddress: Codable {
    public var addressLine1: String
    public var addressLine2: String?
    public var addressLine3: String?
    public var city: String
    public var postcode: String
    public var county: String?
    public var country: String

    public init(addressLine1: String, addressLine2: String? = nil, addressLine3: String? = nil, city: String, postcode: String, county: String? = nil, country: String) {
        self.addressLine1 = addressLine1
        self.addressLine2 = addressLine2
        self.addressLine3 = addressLine3
        self.city = city
        self.postcode = postcode
        self.county = county
        self.country = country
    }
}

public struct CredasAPIModelsPropertyRegisterPropertyRegisterCheckResponse: Codable {
    /// Unknown = 0, FullNameMatch = 1, SurnameMatch = 2, NoNameMatch = 3, NoAddressMatch = 4, TitleNotRegistered = 5, Unavailable = 6, OutOfHours = 7
    public var matchResult: Int?
    public var matchResultText: String?
    /// Unknown = 0, SoleOwnership = 1, JointOwnership = 2
    public var propertyOwnership: Int?
    public var propertyOwnershipText: String?
    public var titleNumber: String?
    /// Unknown = 0, Pass = 1, Refer = 2, Fail = 3
    public var checkStatus: Int?
    public var hasBeenOverridden: Bool?

    public init(matchResult: Int? = nil, matchResultText: String? = nil, propertyOwnership: Int? = nil, propertyOwnershipText: String? = nil, titleNumber: String? = nil, checkStatus: Int? = nil, hasBeenOverridden: Bool? = nil) {
        self.matchResult = matchResult
        self.matchResultText = matchResultText
        self.propertyOwnership = propertyOwnership
        self.propertyOwnershipText = propertyOwnershipText
        self.titleNumber = titleNumber
        self.checkStatus = checkStatus
        self.hasBeenOverridden = hasBeenOverridden
    }
}

/// Example:
///
/// {
///   "document" : "Base64EncodedJpegImage",
///   "documentType" : 1,
///   "forename" : "Alan",
///   "parameters" : [
///     {
///       "key" : "Param1",
///       "value" : "Value 1"
///     },
///     {
///       "key" : "Param2",
///       "value" : "123456"
///     },
///     {
///       "key" : "Param3",
///       "value" : true
///     }
///   ],
///   "referenceId" : "MyRef123",
///   "regTypeId" : "12345678-1234-1234-1234-1234567890ab",
///   "selfie" : "Base64EncodedJpegImage",
///   "surname" : "Harper"
/// }
public struct CredasAPIModelsRegistrationsAddInstantRegistrationRequest: Codable {
    public var regTypeID: String
    public var document: String
    /// Other = 0, Passport = 1, DrivingLicence = 2, Visa = 3, CscsCard = 4, HomeOfficeLetter = 5, BirthCertificate = 6, NationalIdCard = 7, ResidencePermit = 9, UtilityBill = 11
    public var documentType: Int
    public var documentParameters: [CredasAPIModelsRegistrationsKeyValueItem]?
    public var selfie: String?
    public var forename: String
    public var surname: String
    public var referenceID: String?
    public var parameters: [CredasAPIModelsRegistrationsKeyValueItem]?
    public var significantPersonID: String?

    public init(regTypeID: String, document: String, documentType: Int, documentParameters: [CredasAPIModelsRegistrationsKeyValueItem]? = nil, selfie: String? = nil, forename: String, surname: String, referenceID: String? = nil, parameters: [CredasAPIModelsRegistrationsKeyValueItem]? = nil, significantPersonID: String? = nil) {
        self.regTypeID = regTypeID
        self.document = document
        self.documentType = documentType
        self.documentParameters = documentParameters
        self.selfie = selfie
        self.forename = forename
        self.surname = surname
        self.referenceID = referenceID
        self.parameters = parameters
        self.significantPersonID = significantPersonID
    }

    private enum CodingKeys: String, CodingKey {
        case regTypeID = "regTypeId"
        case document
        case documentType
        case documentParameters
        case selfie
        case forename
        case surname
        case referenceID = "referenceId"
        case parameters
        case significantPersonID = "significantPersonId"
    }
}

public struct CredasAPIModelsRegistrationsAddInstantRegistrationResponse: Codable {
    /// Unknown = 0, Passport = 1, DrivingLicense = 2, IdentificationCard = 3, TaxLetter = 4, NIC_Letter = 5, TV_Licence = 6, UtilityBill = 7, HighRiskWorkLicence = 8, TravelPermit = 9, BankLetter = 10, BenefitLetter = 11, BankStatement = 12, NINO_Letter = 13, CouncilTax = 14, ResidentPermit = 15, PhotoCard = 16, RepaymentLetter = 17, Invoice = 18, Visa = 19, AgeIdentificationCard = 20, MedicareCard = 21, MilitaryIdentificationCard = 22, UtilityLetter = 23, CouncilDocument = 24, JobLicence = 25, MembershipIDCard = 26, MilitaryIDCard = 27, ProofOfAgeCard = 28, TravelPermitNew = 29, WeaponsLicence = 30, AccountStatement = 41, TenancyAgreement = 42, BankDocument = 43, BankLetterNew = 44, BankStatementNew = 45, BenefitLetterNew = 46, CouncilDocumentNew = 48, CouncilLetter = 49, CouncilTaxNew = 50, DWPDocument = 51, HMRCDocument = 52, InformationSheet = 53, InsuranceDocument = 54, InsuranceLetter = 55, InvoiceNew = 56, NICLetter = 57, NINOLetter = 58, OfficialDocument = 59, OfficialLetter = 60, RepaymentLetterNew = 61, TaxLetterNew = 62, TaxStatement = 63, TelBill = 64, TelLetter = 65, TelecommunicationDocument = 66, TVLicence = 67, UniversityLetter = 68, UtilityBillNew = 69, UtilityDocument = 70, UtilityLetterNew = 71, WaterBill = 72, WaterDocument = 73, HighRiskWorkLicenceNew = 74, PhotoCardNew = 75, MedicareCardNew = 76, Certificate = 77
    public var documentType: Int
    /// Active = 1, Deleted = 2, UnderReview = 3
    public var documentStatus: Int
    public var isFacialMatch: Bool
    public var id: String
    public var regCode: String

    public init(documentType: Int, documentStatus: Int, isFacialMatch: Bool, id: String, regCode: String) {
        self.documentType = documentType
        self.documentStatus = documentStatus
        self.isFacialMatch = isFacialMatch
        self.id = id
        self.regCode = regCode
    }

    private enum CodingKeys: String, CodingKey {
        case documentType
        case documentStatus
        case isFacialMatch = "facialMatch"
        case id
        case regCode
    }
}

/// Example:
///
/// {
///   "diallingCode" : 44,
///   "duplicateAcknowledgement" : false,
///   "emailAddress" : "user@email.com",
///   "forename" : "Alan",
///   "parameters" : [
///     {
///       "key" : "Param1",
///       "value" : "Value 1"
///     },
///     {
///       "key" : "Param2",
///       "value" : "123456"
///     },
///     {
///       "key" : "Param3",
///       "value" : true
///     }
///   ],
///   "phoneNumber" : "7123456789",
///   "provideWebJourneyLink" : true,
///   "referenceId" : "HID-12345-336-10",
///   "regTypeId" : "12345678-1234-1234-1234-1234567890ab",
///   "returnUrls" : {
///     "returnUrl" : "https:\/\/www.example.com\/registration-complete\/123456"
///   },
///   "sendEmail" : true,
///   "sendSms" : false,
///   "settings" : {
///     "capturePersonalDetails" : true,
///     "checkProfile" : 2,
///     "legislation" : 3,
///     "skipEmailStep" : true
///   },
///   "surname" : "Harper"
/// }
public struct CredasAPIModelsRegistrationsAddRegistrationRequest: Codable {
    public var forename: String
    public var surname: String
    public var regTypeID: String
    public var referenceID: String?
    public var isSendSms: Bool
    public var isSendEmail: Bool?
    public var phoneNumber: String?
    public var diallingCode: String?
    public var emailAddress: String?
    public var isDuplicateAcknowledgement: Bool?
    public var parameters: [CredasAPIModelsRegistrationsKeyValueItem]?
    public var settings: CredasAPIModelsRegistrationsRegistrationSettings?
    public var returnURLs: CredasAPIModelsRegistrationsReturnURLs?
    public var isProvideWebJourneyLink: Bool?
    public var significantPersonID: String?

    public init(forename: String, surname: String, regTypeID: String, referenceID: String? = nil, isSendSms: Bool, isSendEmail: Bool? = nil, phoneNumber: String? = nil, diallingCode: String? = nil, emailAddress: String? = nil, isDuplicateAcknowledgement: Bool? = nil, parameters: [CredasAPIModelsRegistrationsKeyValueItem]? = nil, settings: CredasAPIModelsRegistrationsRegistrationSettings? = nil, returnURLs: CredasAPIModelsRegistrationsReturnURLs? = nil, isProvideWebJourneyLink: Bool? = nil, significantPersonID: String? = nil) {
        self.forename = forename
        self.surname = surname
        self.regTypeID = regTypeID
        self.referenceID = referenceID
        self.isSendSms = isSendSms
        self.isSendEmail = isSendEmail
        self.phoneNumber = phoneNumber
        self.diallingCode = diallingCode
        self.emailAddress = emailAddress
        self.isDuplicateAcknowledgement = isDuplicateAcknowledgement
        self.parameters = parameters
        self.settings = settings
        self.returnURLs = returnURLs
        self.isProvideWebJourneyLink = isProvideWebJourneyLink
        self.significantPersonID = significantPersonID
    }

    private enum CodingKeys: String, CodingKey {
        case forename
        case surname
        case regTypeID = "regTypeId"
        case referenceID = "referenceId"
        case isSendSms = "sendSms"
        case isSendEmail = "sendEmail"
        case phoneNumber
        case diallingCode
        case emailAddress
        case isDuplicateAcknowledgement = "duplicateAcknowledgement"
        case parameters
        case settings
        case returnURLs = "returnUrls"
        case isProvideWebJourneyLink = "provideWebJourneyLink"
        case significantPersonID = "significantPersonId"
    }
}

public struct CredasAPIModelsRegistrationsRegistrationSettings: Codable {
    public var isCapturePersonalDetails: Bool?
    public var isSkipEmailStep: Bool?
    /// The value of required checks determines what checks are performed. <br/>Unknown = 0,Id Documents = 1, Standard Checks = 2, International Sanctions and Pep = 3, Credit Status Check = 4, Bank Account Check = 5, Proof of Ownership = 6, Right to Work = 7, Right to Rent = 8<br />
    public var requiredChecks: [Int]?
    /// Fuzzy = 1, Strict = 2
    public var nameMatchRoutine: Int?

    public init(isCapturePersonalDetails: Bool? = nil, isSkipEmailStep: Bool? = nil, requiredChecks: [Int]? = nil, nameMatchRoutine: Int? = nil) {
        self.isCapturePersonalDetails = isCapturePersonalDetails
        self.isSkipEmailStep = isSkipEmailStep
        self.requiredChecks = requiredChecks
        self.nameMatchRoutine = nameMatchRoutine
    }

    private enum CodingKeys: String, CodingKey {
        case isCapturePersonalDetails = "capturePersonalDetails"
        case isSkipEmailStep = "skipEmailStep"
        case requiredChecks
        case nameMatchRoutine
    }
}

public struct CredasAPIModelsRegistrationsReturnURLs: Codable {
    public var returnURL: String?

    public init(returnURL: String? = nil) {
        self.returnURL = returnURL
    }

    private enum CodingKeys: String, CodingKey {
        case returnURL = "returnUrl"
    }
}

public struct CredasAPIModelsRegistrationsAddRegistrationResponse: Codable {
    public var webJourneyURL: CredasAPIModelsRegistrationsJourneyURL?
    public var id: String
    public var regCode: String

    public init(webJourneyURL: CredasAPIModelsRegistrationsJourneyURL? = nil, id: String, regCode: String) {
        self.webJourneyURL = webJourneyURL
        self.id = id
        self.regCode = regCode
    }

    private enum CodingKeys: String, CodingKey {
        case webJourneyURL = "webJourneyUrl"
        case id
        case regCode
    }
}

public struct CredasAPIModelsRegistrationsJourneyURL: Codable {
    public var url: String?
    public var validUntil: Date?

    public init(url: String? = nil, validUntil: Date? = nil) {
        self.url = url
        self.validUntil = validUntil
    }
}

public struct CredasAPIModelsRegistrationsCheckSubmittedIDDocumentsResponse: Codable {
    /// Ok = 1, MayContinue = 2, CannotContinue = 3
    public var checkCode: Int?
    public var message: String?

    public init(checkCode: Int? = nil, message: String? = nil) {
        self.checkCode = checkCode
        self.message = message
    }
}

public struct CredasAPIModelsRegistrationsRegistrationSummary: Codable {
    public var referenceID: String?
    public var dateCreated: Date
    /// Unknown = 0, Submitted = 1, Approved = 2, Rejected = 3, Exported = 4, Invited = 6
    public var status: Int
    public var isLivenessVerified: Bool
    /// NotSubmitted = 0, Verified = 1, Unverified = 2, Unknown = 3, RetakeRequested = 4
    public var livenessStatus: Int
    /// Indicates whether sufficient right to work documents have been provided and validated. <br />This relies on the registration being submitted and the subject's liveness being confirmed. To check whether documents have been submitted, regardless of validation, please use the /api/registrations/{id}/check-submitted-id-documents endpoint.<br />  values=> Pending = 0, Pass = 1, Fail = 2
    public var rightToWorkDocumentsProvided: Int
    public var isDataChecksPerformed: Bool
    /// Unknown = 0, Pass = 1, Refer = 2, Fail = 3
    public var dataCheckResult: Int
    public var dataCheckSources: [CredasAPIModelsRegistrationsDataCheckSourceSummary]?
    public var idVerification: CredasAPIModelsRegistrationsIDVerification?
    public var idDocuments: [CredasAPIModelsRegistrationsIDDocumentSummary]?
    public var email: String?
    public var phoneNumber: String?
    public var forename: String
    public var surname: String
    public var regTypeID: String
    public var personalDetails: CredasAPIModelsRegistrationsPersonalDetails?
    public var bankAccountChecks: [CredasAPIModelsBankAccountsAccountVerificationResponse]?
    public var creditStatusCheck: CredasAPIModelsStatusChecksStatusCheck?
    public var proofOfOwnershipCheck: CredasAPIModelsPropertyRegisterPropertyRegisterCheckResponse?
    public var rightToWorkCheck: CredasAPIModelsRegistrationsSettlementStatus?
    public var rightToRentCheck: CredasAPIModelsRegistrationsSettlementStatus?
    public var isAgentLed: Bool?
    /// NotApplicable = 0, UniqueActionProcess = 1, Passive = 2
    public var livenessMethod: Int?
    public var isCustomTermsAccepted: Bool?
    public var customTermsAcceptedDateTime: Date?
    public var customTermsAcceptedVersion: Int?
    public var id: String
    public var regCode: String

    public init(referenceID: String? = nil, dateCreated: Date, status: Int, isLivenessVerified: Bool, livenessStatus: Int, rightToWorkDocumentsProvided: Int, isDataChecksPerformed: Bool, dataCheckResult: Int, dataCheckSources: [CredasAPIModelsRegistrationsDataCheckSourceSummary]? = nil, idVerification: CredasAPIModelsRegistrationsIDVerification? = nil, idDocuments: [CredasAPIModelsRegistrationsIDDocumentSummary]? = nil, email: String? = nil, phoneNumber: String? = nil, forename: String, surname: String, regTypeID: String, personalDetails: CredasAPIModelsRegistrationsPersonalDetails? = nil, bankAccountChecks: [CredasAPIModelsBankAccountsAccountVerificationResponse]? = nil, creditStatusCheck: CredasAPIModelsStatusChecksStatusCheck? = nil, proofOfOwnershipCheck: CredasAPIModelsPropertyRegisterPropertyRegisterCheckResponse? = nil, rightToWorkCheck: CredasAPIModelsRegistrationsSettlementStatus? = nil, rightToRentCheck: CredasAPIModelsRegistrationsSettlementStatus? = nil, isAgentLed: Bool? = nil, livenessMethod: Int? = nil, isCustomTermsAccepted: Bool? = nil, customTermsAcceptedDateTime: Date? = nil, customTermsAcceptedVersion: Int? = nil, id: String, regCode: String) {
        self.referenceID = referenceID
        self.dateCreated = dateCreated
        self.status = status
        self.isLivenessVerified = isLivenessVerified
        self.livenessStatus = livenessStatus
        self.rightToWorkDocumentsProvided = rightToWorkDocumentsProvided
        self.isDataChecksPerformed = isDataChecksPerformed
        self.dataCheckResult = dataCheckResult
        self.dataCheckSources = dataCheckSources
        self.idVerification = idVerification
        self.idDocuments = idDocuments
        self.email = email
        self.phoneNumber = phoneNumber
        self.forename = forename
        self.surname = surname
        self.regTypeID = regTypeID
        self.personalDetails = personalDetails
        self.bankAccountChecks = bankAccountChecks
        self.creditStatusCheck = creditStatusCheck
        self.proofOfOwnershipCheck = proofOfOwnershipCheck
        self.rightToWorkCheck = rightToWorkCheck
        self.rightToRentCheck = rightToRentCheck
        self.isAgentLed = isAgentLed
        self.livenessMethod = livenessMethod
        self.isCustomTermsAccepted = isCustomTermsAccepted
        self.customTermsAcceptedDateTime = customTermsAcceptedDateTime
        self.customTermsAcceptedVersion = customTermsAcceptedVersion
        self.id = id
        self.regCode = regCode
    }

    private enum CodingKeys: String, CodingKey {
        case referenceID = "referenceId"
        case dateCreated
        case status
        case isLivenessVerified = "livenessVerified"
        case livenessStatus
        case rightToWorkDocumentsProvided
        case isDataChecksPerformed = "dataChecksPerformed"
        case dataCheckResult
        case dataCheckSources
        case idVerification
        case idDocuments
        case email
        case phoneNumber
        case forename
        case surname
        case regTypeID = "regTypeId"
        case personalDetails
        case bankAccountChecks
        case creditStatusCheck
        case proofOfOwnershipCheck
        case rightToWorkCheck
        case rightToRentCheck
        case isAgentLed
        case livenessMethod
        case isCustomTermsAccepted = "customTermsAccepted"
        case customTermsAcceptedDateTime
        case customTermsAcceptedVersion
        case id
        case regCode
    }
}

public struct CredasAPIModelsRegistrationsDataCheckSourceSummary: Codable {
    /// Unknown = 0, EditedElectoralRollUk = 1, LandlineAppendUk = 2, MortalityUk = 3, CreaditHeaderAmlUk = 4, NcoaAlertFlagUk = 5, NcoaAlertFullUk = 6, SanctionsEnhancedInternational = 7, PepEnhancedInternational = 8, NationalIdentityRegisterUk = 9, LandRegistry = 10
    public var sourceType: Int?
    public var label: String?
    public var dateCreated: Date?
    /// Unknown = 0, Pass = 1, Refer = 2, Fail = 3
    public var status: Int?
    public var remarks: [CredasAPIModelsDataCheckCheckRemark]?
    public var hasPepSanctionsData: Bool?
    public var pepSanctionsData: [CredasAPIModelsDataCheckPepSanctionsPepSanctionItem]?
    public var hasBeenOverridden: Bool?

    public init(sourceType: Int? = nil, label: String? = nil, dateCreated: Date? = nil, status: Int? = nil, remarks: [CredasAPIModelsDataCheckCheckRemark]? = nil, hasPepSanctionsData: Bool? = nil, pepSanctionsData: [CredasAPIModelsDataCheckPepSanctionsPepSanctionItem]? = nil, hasBeenOverridden: Bool? = nil) {
        self.sourceType = sourceType
        self.label = label
        self.dateCreated = dateCreated
        self.status = status
        self.remarks = remarks
        self.hasPepSanctionsData = hasPepSanctionsData
        self.pepSanctionsData = pepSanctionsData
        self.hasBeenOverridden = hasBeenOverridden
    }
}

public struct CredasAPIModelsRegistrationsIDVerification: Codable {
    /// Unknown = 0, Pass = 1, Refer = 2, Fail = 3
    public var checkStatus: Int?
    public var hasBeenOverridden: Bool?

    public init(checkStatus: Int? = nil, hasBeenOverridden: Bool? = nil) {
        self.checkStatus = checkStatus
        self.hasBeenOverridden = hasBeenOverridden
    }
}

public struct CredasAPIModelsRegistrationsIDDocumentSummary: Codable {
    public var id: String
    public var dateCreated: Date
    public var description: String
    /// Indicates the verification status of the document itself by combining visual analysis and NFC verification results. </br>Note that this may be a pass even if facial or name matches have failed.<br />  values=> Unknown = 0, Pass = 1, Refer = 2, Fail = 3
    public var status: Int
    public var isFacialMatch: Bool
    public var isNameCheck: Bool
    /// Unknown = 0, Automatic = 1, Manual = 2
    public var nameCheckMethod: Int
    public var isNfcCheck: Bool
    /// Unknown = 0, Passed = 1, Failed = 2, NotAttempted = 3, Skipped = 4, Unavailable = 5, NotAllowed = 6, NotTrusted = 7, NotApplicable = 8, Expired = 9
    public var nfcReadStatus: Int
    public var forename: String?
    public var middleName: String?
    public var surname: String?
    public var fullName: String?
    public var dateOfBirth: Date?
    public var countryCode: String?
    public var country: String?
    public var documentNumber: String?
    public var expiryDate: Date?
    public var addressFull: String?
    public var addressPostcode: String?
    public var addressCity: String?
    public var isUnderReview: Bool?
    /// Unknown = 0, Passed = 1, Refer = 2, Expired = 3, NotSupported = 4, Undefined = 5, Fail = 10, NotPerformed = 11
    public var documentAnalysisResult: Int?
    public var mrz1: String?
    public var mrz2: String?
    public var mrz3: String?
    public var isManuallyVerified: Bool?
    /// Front = 1, Back = 2
    public var documentSide: Int?
    public var primaryScanID: String?

    public init(id: String, dateCreated: Date, description: String, status: Int, isFacialMatch: Bool, isNameCheck: Bool, nameCheckMethod: Int, isNfcCheck: Bool, nfcReadStatus: Int, forename: String? = nil, middleName: String? = nil, surname: String? = nil, fullName: String? = nil, dateOfBirth: Date? = nil, countryCode: String? = nil, country: String? = nil, documentNumber: String? = nil, expiryDate: Date? = nil, addressFull: String? = nil, addressPostcode: String? = nil, addressCity: String? = nil, isUnderReview: Bool? = nil, documentAnalysisResult: Int? = nil, mrz1: String? = nil, mrz2: String? = nil, mrz3: String? = nil, isManuallyVerified: Bool? = nil, documentSide: Int? = nil, primaryScanID: String? = nil) {
        self.id = id
        self.dateCreated = dateCreated
        self.description = description
        self.status = status
        self.isFacialMatch = isFacialMatch
        self.isNameCheck = isNameCheck
        self.nameCheckMethod = nameCheckMethod
        self.isNfcCheck = isNfcCheck
        self.nfcReadStatus = nfcReadStatus
        self.forename = forename
        self.middleName = middleName
        self.surname = surname
        self.fullName = fullName
        self.dateOfBirth = dateOfBirth
        self.countryCode = countryCode
        self.country = country
        self.documentNumber = documentNumber
        self.expiryDate = expiryDate
        self.addressFull = addressFull
        self.addressPostcode = addressPostcode
        self.addressCity = addressCity
        self.isUnderReview = isUnderReview
        self.documentAnalysisResult = documentAnalysisResult
        self.mrz1 = mrz1
        self.mrz2 = mrz2
        self.mrz3 = mrz3
        self.isManuallyVerified = isManuallyVerified
        self.documentSide = documentSide
        self.primaryScanID = primaryScanID
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case dateCreated
        case description
        case status
        case isFacialMatch = "facialMatch"
        case isNameCheck = "nameCheck"
        case nameCheckMethod
        case isNfcCheck = "nfcCheck"
        case nfcReadStatus
        case forename
        case middleName
        case surname
        case fullName
        case dateOfBirth
        case countryCode
        case country
        case documentNumber
        case expiryDate
        case addressFull
        case addressPostcode
        case addressCity
        case isUnderReview
        case documentAnalysisResult
        case mrz1
        case mrz2
        case mrz3
        case isManuallyVerified = "manuallyVerified"
        case documentSide
        case primaryScanID = "primaryScanId"
    }
}

public struct CredasAPIModelsRegistrationsPersonalDetails: Codable {
    public var forename: String?
    public var surname: String?
    public var dateOfBirth: Date?
    public var address: CredasAPIModelsDataCheckAddress?

    public init(forename: String? = nil, surname: String? = nil, dateOfBirth: Date? = nil, address: CredasAPIModelsDataCheckAddress? = nil) {
        self.forename = forename
        self.surname = surname
        self.dateOfBirth = dateOfBirth
        self.address = address
    }
}

public struct CredasAPIModelsRegistrationsSettlementStatus: Codable {
    /// Unknown = 0, Pass = 1, Refer = 2, Fail = 3
    public var checkStatus: Int?
    public var hasBeenOverridden: Bool?

    public init(checkStatus: Int? = nil, hasBeenOverridden: Bool? = nil) {
        self.checkStatus = checkStatus
        self.hasBeenOverridden = hasBeenOverridden
    }
}

public struct CredasAPIModelsDataCheckCheckRemark: Codable {
    /// Match = 1, Mismatch = 2, Warning = 3, Comment = 4
    public var category: Int?
    public var description: String?

    public init(category: Int? = nil, description: String? = nil) {
        self.category = category
        self.description = description
    }
}

public struct CredasAPIModelsDataCheckPepSanctionsPepSanctionItem: Codable {
    public var id: String?
    public var fullName: String?
    public var aliases: [String]?
    public var sanctionBodies: [String]?
    public var sanctionDates: [CredasAPIModelsDataCheckPepSanctionsSanctionDate]?
    public var addresses: [CredasAPIModelsDataCheckPepSanctionsSanctionAddress]?
    public var positions: [CredasAPIModelsDataCheckPepSanctionsSanctionPosition]?

    public init(id: String? = nil, fullName: String? = nil, aliases: [String]? = nil, sanctionBodies: [String]? = nil, sanctionDates: [CredasAPIModelsDataCheckPepSanctionsSanctionDate]? = nil, addresses: [CredasAPIModelsDataCheckPepSanctionsSanctionAddress]? = nil, positions: [CredasAPIModelsDataCheckPepSanctionsSanctionPosition]? = nil) {
        self.id = id
        self.fullName = fullName
        self.aliases = aliases
        self.sanctionBodies = sanctionBodies
        self.sanctionDates = sanctionDates
        self.addresses = addresses
        self.positions = positions
    }
}

public struct CredasAPIModelsDataCheckPepSanctionsSanctionDate: Codable {
    public var year: Int?
    public var month: Int?
    public var day: Int?
    public var date: Date?
    /// Unknown = 0, Birth = 1, Death = 2
    public var type: Int?

    public init(year: Int? = nil, month: Int? = nil, day: Int? = nil, date: Date? = nil, type: Int? = nil) {
        self.year = year
        self.month = month
        self.day = day
        self.date = date
        self.type = type
    }
}

public struct CredasAPIModelsDataCheckPepSanctionsSanctionAddress: Codable {
    public var lines: [String]?

    public init(lines: [String]? = nil) {
        self.lines = lines
    }
}

public struct CredasAPIModelsDataCheckPepSanctionsSanctionPosition: Codable {
    public var position: String?
    public var country: String?

    public init(position: String? = nil, country: String? = nil) {
        self.position = position
        self.country = country
    }
}

public struct CredasAPIModelsRegistrationsSupportedIDDocument: Codable {
    public var name: String?
    /// Passport = 1, DrivingLicence = 2, NationalIdCard = 3, CscsCard = 4, ResidencePermit = 5, Visa = 6, BirthCertificate = 7, HomeOfficeLetter = 8, Other = 9
    public var type: Int?

    public init(name: String? = nil, type: Int? = nil) {
        self.name = name
        self.type = type
    }
}

/// Example:
///
/// {
///   "status" : 2
/// }
public struct CredasAPIModelsRegistrationsUpdateRegistrationStatusRequest: Codable {
    /// Unknown = 0, Submitted = 1, Approved = 2, Rejected = 3, Exported = 4, Invited = 6
    public var status: Int

    public init(status: Int) {
        self.status = status
    }
}

/// Example:
///
/// {
///   "checkType" : 1,
///   "comment" : "Documents look genuine.",
///   "status" : 1
/// }
public struct CredasAPIModelsStatusOverridesOverrideCheckStatusRequest: Codable {
    /// IdDocuments = 1, StandardChecks = 2, InternationalSanctionsAndPep = 3, CreditStatusCheck = 4, BankAccountCheck = 5, ProofOfOwnership = 6, RightToWork = 7, RightToRent = 8
    public var checkType: Int
    /// Unknown = 0, Pass = 1, Refer = 2, Fail = 3
    public var status: Int
    public var comment: String

    public init(checkType: Int, status: Int, comment: String) {
        self.checkType = checkType
        self.status = status
        self.comment = comment
    }
}

/// Example:
///
/// {
///   "deliveryMethod" : 1,
///   "diallingCode" : 44,
///   "email" : "alan.harper@example.com",
///   "forename" : "Alun",
///   "phoneNumber" : "07123456780",
///   "surname" : "Harpers"
/// }
public struct CredasAPIModelsRegistrationsUpdateContactDetailsRequest: Codable {
    public var forename: String
    public var surname: String
    /// None = 0, Email = 1, Sms = 2
    public var deliveryMethod: Int?
    public var phoneNumber: String?
    public var diallingCode: String?
    public var email: String?

    public init(forename: String, surname: String, deliveryMethod: Int? = nil, phoneNumber: String? = nil, diallingCode: String? = nil, email: String? = nil) {
        self.forename = forename
        self.surname = surname
        self.deliveryMethod = deliveryMethod
        self.phoneNumber = phoneNumber
        self.diallingCode = diallingCode
        self.email = email
    }
}

public struct CredasAPIModelsRegistrationsPagedRegistrationSummary: Codable {
    public var registrationSummaries: [CredasAPIModelsRegistrationsRegistrationSummary]?
    public var totalCount: Int?

    public init(registrationSummaries: [CredasAPIModelsRegistrationsRegistrationSummary]? = nil, totalCount: Int? = nil) {
        self.registrationSummaries = registrationSummaries
        self.totalCount = totalCount
    }
}

public struct CredasAPIModelsRegTypesRegType: Codable {
    public var id: String?
    public var name: String?

    public init(id: String? = nil, name: String? = nil) {
        self.id = id
        self.name = name
    }
}

/// Example:
///
/// {
///   "canChangeStatus" : false,
///   "canVerify" : true,
///   "referenceId" : "JD0387152001",
///   "user" : "Emily Jones"
/// }
public struct CredasAPIModelsReportViewGetReportViewByReferenceIDRequest: Codable {
    public var referenceID: String
    public var user: String?
    public var canVerify: Bool?
    public var canChangeStatus: Bool?

    public init(referenceID: String, user: String? = nil, canVerify: Bool? = nil, canChangeStatus: Bool? = nil) {
        self.referenceID = referenceID
        self.user = user
        self.canVerify = canVerify
        self.canChangeStatus = canChangeStatus
    }

    private enum CodingKeys: String, CodingKey {
        case referenceID = "referenceId"
        case user
        case canVerify
        case canChangeStatus
    }
}

public struct CredasAPIModelsReportViewGetReportViewResponse: Codable {
    public var results: [CredasAPIModelsReportViewReportViewItem]?

    public init(results: [CredasAPIModelsReportViewReportViewItem]? = nil) {
        self.results = results
    }
}

public struct CredasAPIModelsReportViewReportViewItem: Codable {
    public var url: String?
    public var validUntil: Date?
    public var forename: String?
    public var surname: String?

    public init(url: String? = nil, validUntil: Date? = nil, forename: String? = nil, surname: String? = nil) {
        self.url = url
        self.validUntil = validUntil
        self.forename = forename
        self.surname = surname
    }
}

/// Example:
///
/// {
///   "canChangeStatus" : true,
///   "canVerify" : true,
///   "registrationId" : "4bf4db0a-1c0c-4acd-8e92-701f55163891",
///   "user" : "Rob Starr"
/// }
public struct CredasAPIModelsReportViewGetReportViewByRegistrationIDRequest: Codable {
    public var registrationID: String
    public var user: String?
    public var canVerify: Bool?
    public var canChangeStatus: Bool?

    public init(registrationID: String, user: String? = nil, canVerify: Bool? = nil, canChangeStatus: Bool? = nil) {
        self.registrationID = registrationID
        self.user = user
        self.canVerify = canVerify
        self.canChangeStatus = canChangeStatus
    }

    private enum CodingKeys: String, CodingKey {
        case registrationID = "registrationId"
        case user
        case canVerify
        case canChangeStatus
    }
}

/// Example:
///
/// {
///   "referenceId" : "JD0387152001",
///   "returnUrls" : {
///     "returnUrl" : "https:\/\/www.company.co.uk\/registration-completed"
///   }
/// }
public struct CredasAPIModelsWebVerificationsGetWebVerificationsByReferenceIDRequest: Codable {
    public var referenceID: String
    public var returnURLs: CredasAPIModelsRegistrationsReturnURLs?

    public init(referenceID: String, returnURLs: CredasAPIModelsRegistrationsReturnURLs? = nil) {
        self.referenceID = referenceID
        self.returnURLs = returnURLs
    }

    private enum CodingKeys: String, CodingKey {
        case referenceID = "referenceId"
        case returnURLs = "returnUrls"
    }
}

public struct CredasAPIModelsWebVerificationsGetWebVerificationsResponse: Codable {
    public var results: [CredasAPIModelsWebVerificationsWebVerificationsItem]?

    public init(results: [CredasAPIModelsWebVerificationsWebVerificationsItem]? = nil) {
        self.results = results
    }
}

public struct CredasAPIModelsWebVerificationsWebVerificationsItem: Codable {
    public var journeyURL: CredasAPIModelsRegistrationsJourneyURL?

    public init(journeyURL: CredasAPIModelsRegistrationsJourneyURL? = nil) {
        self.journeyURL = journeyURL
    }

    private enum CodingKeys: String, CodingKey {
        case journeyURL = "journeyUrl"
    }
}

/// Example:
///
/// {
///   "registrationId" : "4bf4db0a-1c0c-4acd-8e92-701f55163891",
///   "returnUrls" : {
///     "returnUrl" : "https:\/\/www.company.co.uk\/registration-completed"
///   }
/// }
public struct CredasAPIModelsWebVerificationsGetWebVerificationsByRegistrationIDRequest: Codable {
    public var registrationID: String
    public var returnURLs: CredasAPIModelsRegistrationsReturnURLs?

    public init(registrationID: String, returnURLs: CredasAPIModelsRegistrationsReturnURLs? = nil) {
        self.registrationID = registrationID
        self.returnURLs = returnURLs
    }

    private enum CodingKeys: String, CodingKey {
        case registrationID = "registrationId"
        case returnURLs = "returnUrls"
    }
}

public enum AnyJSON: Equatable, Codable {
    case string(String)
    case number(Double)
    case object([String: AnyJSON])
    case array([AnyJSON])
    case bool(Bool)

    var value: Any {
        switch self {
        case .string(let string): return string
        case .number(let double): return double
        case .object(let dictionary): return dictionary
        case .array(let array): return array
        case .bool(let bool): return bool
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .array(array): try container.encode(array)
        case let .object(object): try container.encode(object)
        case let .string(string): try container.encode(string)
        case let .number(number): try container.encode(number)
        case let .bool(bool): try container.encode(bool)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let object = try? container.decode([String: AnyJSON].self) {
            self = .object(object)
        } else if let array = try? container.decode([AnyJSON].self) {
            self = .array(array)
        } else if let string = try? container.decode(String.self) {
            self = .string(string)
        } else if let bool = try? container.decode(Bool.self) {
            self = .bool(bool)
        } else if let number = try? container.decode(Double.self) {
            self = .number(number)
        } else {
            throw DecodingError.dataCorrupted(
                .init(codingPath: decoder.codingPath, debugDescription: "Invalid JSON value.")
            )
        }
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
