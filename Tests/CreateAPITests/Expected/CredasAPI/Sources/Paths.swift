// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import Get
import URLQueryEncoder

extension Paths {
    public static var bankAccounts: BankAccounts {
        BankAccounts(path: "/api/bank-accounts")
    }

    public struct BankAccounts {
        /// Path: `/api/bank-accounts`
        public let path: String
    }
}

extension Paths.BankAccounts {
    public var verify: Verify {
        Verify(path: path + "/verify")
    }

    public struct Verify {
        /// Path: `/api/bank-accounts/verify`
        public let path: String

        /// Verifies bank account details.
        public func post(_ body: CredasAPI.CredasAPIModelsBankAccountsAccountVerificationRequest? = nil) -> Request<CredasAPI.CredasAPIModelsBankAccountsAccountVerificationResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var companies: Companies {
        Companies(path: "/api/companies")
    }

    public struct Companies {
        /// Path: `/api/companies`
        public let path: String

        /// Searches for a company based on its Company Number and returns its details.
        ///
        /// If a company appears multiple times within the structure, it will only be detailed in full (i.e. with significant ownership details) in its first instance. Subsequent instances will be 
        ///             marked as duplicates.
        ///             Whilst duplicate instances of companies can and will be identified, it is not possible to categorically identify duplicated people.
        public func post(companyNumber: String? = nil) -> Request<CredasAPI.CredasAPIModelsCompaniesCompanyDetail> {
            .post(path, query: makePostQuery(companyNumber))
        }

        private func makePostQuery(_ companyNumber: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(companyNumber, forKey: "companyNumber")
            return encoder.items
        }
    }
}

extension Paths.Companies {
    public func companyID(_ companyID: String) -> WithCompanyID {
        WithCompanyID(path: "\(path)/\(companyID)")
    }

    public struct WithCompanyID {
        /// Path: `/api/companies/{companyId}`
        public let path: String

        public var get: Request<CredasAPI.CredasAPIModelsCompaniesCompanyDetail> {
            .get(path)
        }
    }
}

extension Paths {
    public static var creditStatus: CreditStatus {
        CreditStatus(path: "/api/credit-status")
    }

    public struct CreditStatus {
        /// Path: `/api/credit-status`
        public let path: String
    }
}

extension Paths.CreditStatus {
    public var perform: Perform {
        Perform(path: path + "/perform")
    }

    public struct Perform {
        /// Path: `/api/credit-status/perform`
        public let path: String

        /// Check includes identifying bankruptcy, insolvency, CCJ's or Company Directorship.
        public func post(_ body: CredasAPI.CredasAPIModelsStatusChecksStatusCheckRequest? = nil) -> Request<CredasAPI.CredasAPIModelsStatusChecksStatusCheck> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var datachecks: Datachecks {
        Datachecks(path: "/api/datachecks")
    }

    public struct Datachecks {
        /// Path: `/api/datachecks`
        public let path: String

        /// Creates new data check against a specified registration.
        public func post(_ body: CredasAPI.CredasAPIModelsDataCheckAddDataCheckRequest? = nil) -> Request<CredasAPI.CredasAPIModelsDataCheckAddDataCheckResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var images: Images {
        Images(path: "/api/images")
    }

    public struct Images {
        /// Path: `/api/images`
        public let path: String
    }
}

extension Paths.Images.Selfie {
    public func registrationID(_ registrationID: String) -> WithRegistrationID {
        WithRegistrationID(path: "\(path)/\(registrationID)")
    }

    public struct WithRegistrationID {
        /// Path: `/api/images/selfie/{registrationId}`
        public let path: String

        /// Retrieve the selfie image associated with a registration.
        public var get: Request<CredasAPI.CredasAPIModelsImagesGetSelfieImageResponse> {
            .get(path)
        }
    }
}

extension Paths.Images {
    public var selfie: Selfie {
        Selfie(path: path + "/selfie")
    }

    public struct Selfie {
        /// Path: `/api/images/selfie`
        public let path: String

        /// Add a selfie image to the registration.
        public func post(_ body: CredasAPI.CredasAPIModelsImagesAddSelfieImageRequest? = nil) -> Request<CredasAPI.CredasAPIModelsImagesAddSelfieImageResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths.Images.Liveness {
    public func registrationID(_ registrationID: String) -> WithRegistrationID {
        WithRegistrationID(path: "\(path)/\(registrationID)")
    }

    public struct WithRegistrationID {
        /// Path: `/api/images/liveness/{registrationId}`
        public let path: String

        /// Retrieve the liveness action image (UAP) associated with a registration.
        public var get: Request<CredasAPI.CredasAPIModelsImagesGetLivenessImageResponse> {
            .get(path)
        }
    }
}

extension Paths.Images {
    public var liveness: Liveness {
        Liveness(path: path + "/liveness")
    }

    public struct Liveness {
        /// Path: `/api/images/liveness`
        public let path: String

        /// Add a liveness image (UAP) to the specified registration.
        public func post(_ body: CredasAPI.CredasAPIModelsImagesAddLivenessImageRequest? = nil) -> Request<Void> {
            .post(path, body: body)
        }
    }
}

extension Paths.Images {
    public var livenessPerformed: LivenessPerformed {
        LivenessPerformed(path: path + "/liveness-performed")
    }

    public struct LivenessPerformed {
        /// Path: `/api/images/liveness-performed`
        public let path: String
    }
}

extension Paths.Images.LivenessPerformed {
    public func registrationID(_ registrationID: String) -> WithRegistrationID {
        WithRegistrationID(path: "\(path)/\(registrationID)")
    }

    public struct WithRegistrationID {
        /// Path: `/api/images/liveness-performed/{registrationId}`
        public let path: String

        /// Retrieve the liveness performed image associated with a registration.
        public var get: Request<CredasAPI.CredasAPIModelsImagesGetLivenessPerformedImageResponse> {
            .get(path)
        }
    }
}

extension Paths.Images.IDDocument {
    public func registrationID(_ registrationID: String) -> WithRegistrationID {
        WithRegistrationID(path: "\(path)/\(registrationID)")
    }

    public struct WithRegistrationID {
        /// Path: `/api/images/id-document/{registrationId}`
        public let path: String

        /// Get all id document images associated with a registration.
        public var get: Request<[CredasAPI.CredasAPIModelsImagesGetIDDocumentImageResponse]> {
            .get(path)
        }
    }
}

extension Paths.Images {
    public var idDocument: IDDocument {
        IDDocument(path: path + "/id-document")
    }

    public struct IDDocument {
        /// Path: `/api/images/id-document`
        public let path: String

        /// Add an id document image to the specified registration.
        public func post(_ body: CredasAPI.CredasAPIModelsImagesAddIDDocumentImageRequest? = nil) -> Request<CredasAPI.CredasAPIModelsImagesAddIDDocumentImageResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths.Images {
    public var scanReportPdf: ScanReportPdf {
        ScanReportPdf(path: path + "/scan-report-pdf")
    }

    public struct ScanReportPdf {
        /// Path: `/api/images/scan-report-pdf`
        public let path: String
    }
}

extension Paths.Images.ScanReportPdf {
    public func scanID(_ scanID: String) -> WithScanID {
        WithScanID(path: "\(path)/\(scanID)")
    }

    public struct WithScanID {
        /// Path: `/api/images/scan-report-pdf/{scanId}`
        public let path: String

        /// Returns a detailed report on the analysis that has taken place of a scanned document
        public var get: Request<String> {
            .get(path)
        }
    }
}

extension Paths {
    public static var propertyRegister: PropertyRegister {
        PropertyRegister(path: "/api/property-register")
    }

    public struct PropertyRegister {
        /// Path: `/api/property-register`
        public let path: String

        /// Creates new property registry check against the registration.
        public func post(_ body: CredasAPI.CredasAPIModelsPropertyRegisterPropertyRegisterCheckRequest? = nil) -> Request<CredasAPI.CredasAPIModelsPropertyRegisterPropertyRegisterCheckResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths.PropertyRegister {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/api/property-register/{id}`
        public let path: String

        /// Retrieves property registry check associated with the registration.
        public var get: Request<CredasAPI.CredasAPIModelsPropertyRegisterPropertyRegisterCheckResponse> {
            .get(path)
        }
    }
}

extension Paths.Registrations {
    public var instant: Instant {
        Instant(path: path + "/instant")
    }

    public struct Instant {
        /// Path: `/api/registrations/instant`
        public let path: String

        /// Creates new registration record, adds an ID document and optional selfie image in one go.
        ///
        /// It's designed to provide a quick integration path for external systems which capture these details.
        public func post(_ body: CredasAPI.CredasAPIModelsRegistrationsAddInstantRegistrationRequest? = nil) -> Request<CredasAPI.CredasAPIModelsRegistrationsAddInstantRegistrationResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var registrations: Registrations {
        Registrations(path: "/api/registrations")
    }

    public struct Registrations {
        /// Path: `/api/registrations`
        public let path: String

        /// Creates new registration.
        public func post(_ body: CredasAPI.CredasAPIModelsRegistrationsAddRegistrationRequest? = nil) -> Request<CredasAPI.CredasAPIModelsRegistrationsAddRegistrationResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths.Registrations {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/api/registrations/{id}`
        public let path: String
    }
}

extension Paths.Registrations.WithID {
    public var checkSubmittedIDDocuments: CheckSubmittedIDDocuments {
        CheckSubmittedIDDocuments(path: path + "/check-submitted-id-documents")
    }

    public struct CheckSubmittedIDDocuments {
        /// Path: `/api/registrations/{id}/check-submitted-id-documents`
        public let path: String

        /// Checks if submitted documents are sufficient to complete registration.
        public var get: Request<CredasAPI.CredasAPIModelsRegistrationsCheckSubmittedIDDocumentsResponse> {
            .get(path)
        }
    }
}

extension Paths.Registrations {
    public var referenceid: Referenceid {
        Referenceid(path: path + "/referenceid")
    }

    public struct Referenceid {
        /// Path: `/api/registrations/referenceid`
        public let path: String
    }
}

extension Paths.Registrations.Referenceid {
    public func referenceID(_ referenceID: String) -> WithReferenceID {
        WithReferenceID(path: "\(path)/\(referenceID)")
    }

    public struct WithReferenceID {
        /// Path: `/api/registrations/referenceid/{referenceId}`
        public let path: String
    }
}

extension Paths.Registrations.Referenceid.WithReferenceID {
    public var summary: Summary {
        Summary(path: path + "/summary")
    }

    public struct Summary {
        /// Path: `/api/registrations/referenceid/{referenceId}/summary`
        public let path: String

        /// Finds registrations by the ReferenceId.
        public var get: Request<[CredasAPI.CredasAPIModelsRegistrationsRegistrationSummary]> {
            .get(path)
        }
    }
}

extension Paths.Registrations.WithID {
    public var summary: Summary {
        Summary(path: path + "/summary")
    }

    public struct Summary {
        /// Path: `/api/registrations/{id}/summary`
        public let path: String

        /// Finds a registration by the Id.
        public var get: Request<CredasAPI.CredasAPIModelsRegistrationsRegistrationSummary> {
            .get(path)
        }
    }
}

extension Paths.Registrations {
    public var regcode: Regcode {
        Regcode(path: path + "/regcode")
    }

    public struct Regcode {
        /// Path: `/api/registrations/regcode`
        public let path: String
    }
}

extension Paths.Registrations.Regcode {
    public func regCode(_ regCode: String) -> WithRegCode {
        WithRegCode(path: "\(path)/\(regCode)")
    }

    public struct WithRegCode {
        /// Path: `/api/registrations/regcode/{regCode}`
        public let path: String
    }
}

extension Paths.Registrations.Regcode.WithRegCode {
    public var summary: Summary {
        Summary(path: path + "/summary")
    }

    public struct Summary {
        /// Path: `/api/registrations/regcode/{regCode}/summary`
        public let path: String

        /// Finds a registration by the RegCode.
        public var get: Request<CredasAPI.CredasAPIModelsRegistrationsRegistrationSummary> {
            .get(path)
        }
    }
}

extension Paths.Registrations.WithID {
    public var supportedIDDocuments: SupportedIDDocuments {
        SupportedIDDocuments(path: path + "/supported-id-documents")
    }

    public struct SupportedIDDocuments {
        /// Path: `/api/registrations/{id}/supported-id-documents`
        public let path: String

        /// Get a list of supported id document for the specified registration id.
        public var get: Request<CredasAPI.CredasAPIModelsRegistrationsSupportedIDDocument> {
            .get(path)
        }
    }
}

extension Paths.Registrations.WithID {
    public var status: Status {
        Status(path: path + "/status")
    }

    public struct Status {
        /// Path: `/api/registrations/{id}/status`
        public let path: String

        /// Updates the status of the registration to one specified in the request.
        public func put(_ body: CredasAPI.CredasAPIModelsRegistrationsUpdateRegistrationStatusRequest? = nil) -> Request<Void> {
            .put(path, body: body)
        }
    }
}

extension Paths.Registrations.WithID {
    public var pdfExport: PdfExport {
        PdfExport(path: path + "/pdf-export")
    }

    public struct PdfExport {
        /// Path: `/api/registrations/{id}/pdf-export`
        public let path: String

        /// Returns PDF export for a given registration.
        public var get: Request<String> {
            .get(path)
        }
    }
}

extension Paths.Registrations.WithID {
    public var pdfExportSections: PdfExportSections {
        PdfExportSections(path: path + "/pdf-export-sections")
    }

    public struct PdfExportSections {
        /// Path: `/api/registrations/{id}/pdf-export-sections`
        public let path: String

        /// Returns PDF export for a given registration with the requested sections: Comments, ContactDetails, StandardChecks, PepSanctionChecks, ProofOfOwnership, BankAccountCheck, CreditStatusCheck, Liveness
        public func get(parameters: GetParameters? = nil) -> Request<String> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var isComments: Bool?
            public var isContactDetails: Bool?
            public var isStandardChecks: Bool?
            public var isPepSanctionChecks: Bool?
            public var isProofOfOwnership: Bool?
            public var isBankAccountCheck: Bool?
            public var isCreditStatusCheck: Bool?
            public var isLiveness: Bool?

            public init(isComments: Bool? = nil, isContactDetails: Bool? = nil, isStandardChecks: Bool? = nil, isPepSanctionChecks: Bool? = nil, isProofOfOwnership: Bool? = nil, isBankAccountCheck: Bool? = nil, isCreditStatusCheck: Bool? = nil, isLiveness: Bool? = nil) {
                self.isComments = isComments
                self.isContactDetails = isContactDetails
                self.isStandardChecks = isStandardChecks
                self.isPepSanctionChecks = isPepSanctionChecks
                self.isProofOfOwnership = isProofOfOwnership
                self.isBankAccountCheck = isBankAccountCheck
                self.isCreditStatusCheck = isCreditStatusCheck
                self.isLiveness = isLiveness
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isComments, forKey: "Comments")
                encoder.encode(isContactDetails, forKey: "ContactDetails")
                encoder.encode(isStandardChecks, forKey: "StandardChecks")
                encoder.encode(isPepSanctionChecks, forKey: "PepSanctionChecks")
                encoder.encode(isProofOfOwnership, forKey: "ProofOfOwnership")
                encoder.encode(isBankAccountCheck, forKey: "BankAccountCheck")
                encoder.encode(isCreditStatusCheck, forKey: "CreditStatusCheck")
                encoder.encode(isLiveness, forKey: "Liveness")
                return encoder.items
            }
        }
    }
}

extension Paths.Registrations.WithID {
    public var overrideCheckStatus: OverrideCheckStatus {
        OverrideCheckStatus(path: path + "/override-check-status")
    }

    public struct OverrideCheckStatus {
        /// Path: `/api/registrations/{id}/override-check-status`
        public let path: String

        /// Sets an override for a specific check on the registration.
        public func put(_ body: CredasAPI.CredasAPIModelsStatusOverridesOverrideCheckStatusRequest? = nil) -> Request<Void> {
            .put(path, body: body)
        }
    }
}

extension Paths.Registrations.WithID {
    public var resendInvitation: ResendInvitation {
        ResendInvitation(path: path + "/resend-invitation")
    }

    public struct ResendInvitation {
        /// Path: `/api/registrations/{id}/resend-invitation`
        public let path: String

        /// Resends any invitation for the specified registration.
        public var post: Request<Void> {
            .post(path)
        }
    }
}

extension Paths.Registrations.WithID {
    public var settings: Settings {
        Settings(path: path + "/settings")
    }

    public struct Settings {
        /// Path: `/api/registrations/{id}/settings`
        public let path: String

        /// Gets registration settings or nothing if there are no settings associated with the registration.
        public var get: Request<Void> {
            .get(path)
        }

        /// Updates registration settings.
        public func put(_ body: CredasAPI.CredasAPIModelsRegistrationsRegistrationSettings? = nil) -> Request<Void> {
            .put(path, body: body)
        }
    }
}

extension Paths.Registrations.WithID {
    public var contactDetails: ContactDetails {
        ContactDetails(path: path + "/contact-details")
    }

    public struct ContactDetails {
        /// Path: `/api/registrations/{id}/contact-details`
        public let path: String

        /// Updates a registration's contact details.
        public func put(_ body: CredasAPI.CredasAPIModelsRegistrationsUpdateContactDetailsRequest? = nil) -> Request<Void> {
            .put(path, body: body)
        }
    }
}

extension Paths.Registrations {
    public var search: Search {
        Search(path: path + "/search")
    }

    public struct Search {
        /// Path: `/api/registrations/search`
        public let path: String

        /// Gets paged registration list by search criteria or nothing if there are no matching fields.
        /// Optional parameters may be appended to the query string.
        /// Maximum page size is 50.
        public func get(parameters: GetParameters? = nil) -> Request<CredasAPI.CredasAPIModelsRegistrationsPagedRegistrationSummary> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var pageNum: Int?
            public var pageSize: Int?
            public var forename: String?
            public var surname: String?
            public var email: String?
            public var dob: String?

            public init(pageNum: Int? = nil, pageSize: Int? = nil, forename: String? = nil, surname: String? = nil, email: String? = nil, dob: String? = nil) {
                self.pageNum = pageNum
                self.pageSize = pageSize
                self.forename = forename
                self.surname = surname
                self.email = email
                self.dob = dob
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(pageNum, forKey: "pageNum")
                encoder.encode(pageSize, forKey: "pageSize")
                encoder.encode(forename, forKey: "forename")
                encoder.encode(surname, forKey: "surname")
                encoder.encode(email, forKey: "email")
                encoder.encode(dob, forKey: "dob")
                return encoder.items
            }
        }
    }
}

extension Paths.Registrations.WithID {
    public var pdfSettlementStatus: PdfSettlementStatus {
        PdfSettlementStatus(path: path + "/pdf-settlement-status")
    }

    public struct PdfSettlementStatus {
        /// Path: `/api/registrations/{id}/pdf-settlement-status`
        public let path: String

        /// Returns settlement status PDF (Share Code) for a given registration.
        public var get: Request<String> {
            .get(path)
        }
    }
}

extension Paths {
    public static var regTypes: RegTypes {
        RegTypes(path: "/api/reg-types")
    }

    public struct RegTypes {
        /// Path: `/api/reg-types`
        public let path: String

        /// Gets all available RegTypes.
        public var get: Request<[CredasAPI.CredasAPIModelsRegTypesRegType]> {
            .get(path)
        }
    }
}

extension Paths {
    public static var reportView: ReportView {
        ReportView(path: "/api/report-view")
    }

    public struct ReportView {
        /// Path: `/api/report-view`
        public let path: String
    }
}

extension Paths.ReportView {
    public var byReferenceid: ByReferenceid {
        ByReferenceid(path: path + "/by-referenceid")
    }

    public struct ByReferenceid {
        /// Path: `/api/report-view/by-referenceid`
        public let path: String

        /// Retrieves secure links to registration details pages searching by the Reference Id.
        ///
        /// It may return none, one or many (up to 20) matching results.
        /// Each result contains a secure url; UTC date/time of when the link expires; name details of a person associated with the registration.
        public func post(_ body: CredasAPI.CredasAPIModelsReportViewGetReportViewByReferenceIDRequest? = nil) -> Request<CredasAPI.CredasAPIModelsReportViewGetReportViewResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths.ReportView {
    public var byRegistrationid: ByRegistrationid {
        ByRegistrationid(path: path + "/by-registrationid")
    }

    public struct ByRegistrationid {
        /// Path: `/api/report-view/by-registrationid`
        public let path: String

        /// Retrieves secure link to registration details page searching by the Registration Id.
        ///
        /// It may return none or one matching result.
        /// Each result contains a secure url; UTC date/time of when the link expires; name details of a person associated with the registration.
        public func post(_ body: CredasAPI.CredasAPIModelsReportViewGetReportViewByRegistrationIDRequest? = nil) -> Request<CredasAPI.CredasAPIModelsReportViewGetReportViewResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var webVerifications: WebVerifications {
        WebVerifications(path: "/api/web-verifications")
    }

    public struct WebVerifications {
        /// Path: `/api/web-verifications`
        public let path: String
    }
}

extension Paths.WebVerifications {
    public var byReferenceid: ByReferenceid {
        ByReferenceid(path: path + "/by-referenceid")
    }

    public struct ByReferenceid {
        /// Path: `/api/web-verifications/by-referenceid`
        public let path: String

        /// Retrieves secure links to web verification pages searching by the Reference Id.
        ///
        /// It may return none, one or many (up to 20) matching results.
        /// Each result contains a secure url; UTC date/time of when the link expires; name details of a person associated with the registration.
        public func post(_ body: CredasAPI.CredasAPIModelsWebVerificationsGetWebVerificationsByReferenceIDRequest? = nil) -> Request<CredasAPI.CredasAPIModelsWebVerificationsGetWebVerificationsResponse> {
            .post(path, body: body)
        }
    }
}

extension Paths.WebVerifications {
    public var byRegistrationid: ByRegistrationid {
        ByRegistrationid(path: path + "/by-registrationid")
    }

    public struct ByRegistrationid {
        /// Path: `/api/web-verifications/by-registrationid`
        public let path: String

        /// Retrieves secure link to web verification page searching by the Registration Id.
        ///
        /// It may return none or one matching result.
        /// Each result contains a secure url; UTC date/time of when the link expires; name details of a person associated with the registration.
        public func post(_ body: CredasAPI.CredasAPIModelsWebVerificationsGetWebVerificationsByRegistrationIDRequest? = nil) -> Request<CredasAPI.CredasAPIModelsWebVerificationsGetWebVerificationsResponse> {
            .post(path, body: body)
        }
    }
}

public enum Paths {}
