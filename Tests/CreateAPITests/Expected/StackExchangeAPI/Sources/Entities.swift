// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation

public struct AccessToken: Codable {
    public var accessToken: String?
    public var accountID: Int?
    public var expiresOnDate: Int?
    public var scope: [AnyJSON]?

    public init(accessToken: String? = nil, accountID: Int? = nil, expiresOnDate: Int? = nil, scope: [AnyJSON]? = nil) {
        self.accessToken = accessToken
        self.accountID = accountID
        self.expiresOnDate = expiresOnDate
        self.scope = scope
    }

    private enum CodingKeys: String, CodingKey {
        case accessToken = "access_token"
        case accountID = "account_id"
        case expiresOnDate = "expires_on_date"
        case scope
    }
}

public struct AccountMergeItem: Codable {
    public var mergeDate: Int?
    public var newAccountID: Int?
    public var oldAccountID: Int?

    public init(mergeDate: Int? = nil, newAccountID: Int? = nil, oldAccountID: Int? = nil) {
        self.mergeDate = mergeDate
        self.newAccountID = newAccountID
        self.oldAccountID = oldAccountID
    }

    private enum CodingKeys: String, CodingKey {
        case mergeDate = "merge_date"
        case newAccountID = "new_account_id"
        case oldAccountID = "old_account_id"
    }
}

public struct Answer: Codable {
    public var isAccepted: Bool?
    public var answerID: Int?
    public var awardedBountyAmount: Int?
    public var awardedBountyUsers: [AnyJSON]?
    public var body: String?
    public var bodyMarkdown: String?
    public var canFlag: Bool?
    public var commentCount: Int?
    public var comments: [AnyJSON]?
    public var communityOwnedDate: Int?
    public var creationDate: Int?
    public var downVoteCount: Int?
    public var isDownvoted: Bool?
    public var lastActivityDate: Int?
    public var lastEditDate: Int?
    public var lastEditor: LastEditor?
    public var link: String?
    public var lockedDate: Int?
    public var owner: Owner?
    public var questionID: Int?
    public var score: Int?
    public var shareLink: String?
    public var tags: [AnyJSON]?
    public var title: String?
    public var upVoteCount: Int?
    public var isUpvoted: Bool?

    public struct LastEditor: Codable {
        public var acceptRate: Int?
        public var badgeCounts: BadgeCounts?
        public var displayName: String?
        public var link: String?
        public var profileImage: String?
        public var reputation: Int?
        public var userID: Int?
        public var userType: String?

        public struct BadgeCounts: Codable {
            public var bronze: Int?
            public var gold: Int?
            public var silver: Int?

            public init(bronze: Int? = nil, gold: Int? = nil, silver: Int? = nil) {
                self.bronze = bronze
                self.gold = gold
                self.silver = silver
            }
        }

        public init(acceptRate: Int? = nil, badgeCounts: BadgeCounts? = nil, displayName: String? = nil, link: String? = nil, profileImage: String? = nil, reputation: Int? = nil, userID: Int? = nil, userType: String? = nil) {
            self.acceptRate = acceptRate
            self.badgeCounts = badgeCounts
            self.displayName = displayName
            self.link = link
            self.profileImage = profileImage
            self.reputation = reputation
            self.userID = userID
            self.userType = userType
        }

        private enum CodingKeys: String, CodingKey {
            case acceptRate = "accept_rate"
            case badgeCounts = "badge_counts"
            case displayName = "display_name"
            case link
            case profileImage = "profile_image"
            case reputation
            case userID = "user_id"
            case userType = "user_type"
        }
    }

    public struct Owner: Codable {
        public var acceptRate: Int?
        public var badgeCounts: BadgeCounts?
        public var displayName: String?
        public var link: String?
        public var profileImage: String?
        public var reputation: Int?
        public var userID: Int?
        public var userType: String?

        public struct BadgeCounts: Codable {
            public var bronze: Int?
            public var gold: Int?
            public var silver: Int?

            public init(bronze: Int? = nil, gold: Int? = nil, silver: Int? = nil) {
                self.bronze = bronze
                self.gold = gold
                self.silver = silver
            }
        }

        public init(acceptRate: Int? = nil, badgeCounts: BadgeCounts? = nil, displayName: String? = nil, link: String? = nil, profileImage: String? = nil, reputation: Int? = nil, userID: Int? = nil, userType: String? = nil) {
            self.acceptRate = acceptRate
            self.badgeCounts = badgeCounts
            self.displayName = displayName
            self.link = link
            self.profileImage = profileImage
            self.reputation = reputation
            self.userID = userID
            self.userType = userType
        }

        private enum CodingKeys: String, CodingKey {
            case acceptRate = "accept_rate"
            case badgeCounts = "badge_counts"
            case displayName = "display_name"
            case link
            case profileImage = "profile_image"
            case reputation
            case userID = "user_id"
            case userType = "user_type"
        }
    }

    public init(isAccepted: Bool? = nil, answerID: Int? = nil, awardedBountyAmount: Int? = nil, awardedBountyUsers: [AnyJSON]? = nil, body: String? = nil, bodyMarkdown: String? = nil, canFlag: Bool? = nil, commentCount: Int? = nil, comments: [AnyJSON]? = nil, communityOwnedDate: Int? = nil, creationDate: Int? = nil, downVoteCount: Int? = nil, isDownvoted: Bool? = nil, lastActivityDate: Int? = nil, lastEditDate: Int? = nil, lastEditor: LastEditor? = nil, link: String? = nil, lockedDate: Int? = nil, owner: Owner? = nil, questionID: Int? = nil, score: Int? = nil, shareLink: String? = nil, tags: [AnyJSON]? = nil, title: String? = nil, upVoteCount: Int? = nil, isUpvoted: Bool? = nil) {
        self.isAccepted = isAccepted
        self.answerID = answerID
        self.awardedBountyAmount = awardedBountyAmount
        self.awardedBountyUsers = awardedBountyUsers
        self.body = body
        self.bodyMarkdown = bodyMarkdown
        self.canFlag = canFlag
        self.commentCount = commentCount
        self.comments = comments
        self.communityOwnedDate = communityOwnedDate
        self.creationDate = creationDate
        self.downVoteCount = downVoteCount
        self.isDownvoted = isDownvoted
        self.lastActivityDate = lastActivityDate
        self.lastEditDate = lastEditDate
        self.lastEditor = lastEditor
        self.link = link
        self.lockedDate = lockedDate
        self.owner = owner
        self.questionID = questionID
        self.score = score
        self.shareLink = shareLink
        self.tags = tags
        self.title = title
        self.upVoteCount = upVoteCount
        self.isUpvoted = isUpvoted
    }

    private enum CodingKeys: String, CodingKey {
        case isAccepted = "accepted"
        case answerID = "answer_id"
        case awardedBountyAmount = "awarded_bounty_amount"
        case awardedBountyUsers = "awarded_bounty_users"
        case body
        case bodyMarkdown = "body_markdown"
        case canFlag = "can_flag"
        case commentCount = "comment_count"
        case comments
        case communityOwnedDate = "community_owned_date"
        case creationDate = "creation_date"
        case downVoteCount = "down_vote_count"
        case isDownvoted = "downvoted"
        case lastActivityDate = "last_activity_date"
        case lastEditDate = "last_edit_date"
        case lastEditor = "last_editor"
        case link
        case lockedDate = "locked_date"
        case owner
        case questionID = "question_id"
        case score
        case shareLink = "share_link"
        case tags
        case title
        case upVoteCount = "up_vote_count"
        case isUpvoted = "upvoted"
    }
}

public struct Badge: Codable {
    public var awardCount: Int?
    public var badgeID: Int?
    public var badgeType: String?
    public var description: String?
    public var link: String?
    public var name: String?
    public var rank: String?
    public var user: User?

    public struct User: Codable {
        public var acceptRate: Int?
        public var badgeCounts: BadgeCounts?
        public var displayName: String?
        public var link: String?
        public var profileImage: String?
        public var reputation: Int?
        public var userID: Int?
        public var userType: String?

        public struct BadgeCounts: Codable {
            public var bronze: Int?
            public var gold: Int?
            public var silver: Int?

            public init(bronze: Int? = nil, gold: Int? = nil, silver: Int? = nil) {
                self.bronze = bronze
                self.gold = gold
                self.silver = silver
            }
        }

        public init(acceptRate: Int? = nil, badgeCounts: BadgeCounts? = nil, displayName: String? = nil, link: String? = nil, profileImage: String? = nil, reputation: Int? = nil, userID: Int? = nil, userType: String? = nil) {
            self.acceptRate = acceptRate
            self.badgeCounts = badgeCounts
            self.displayName = displayName
            self.link = link
            self.profileImage = profileImage
            self.reputation = reputation
            self.userID = userID
            self.userType = userType
        }

        private enum CodingKeys: String, CodingKey {
            case acceptRate = "accept_rate"
            case badgeCounts = "badge_counts"
            case displayName = "display_name"
            case link
            case profileImage = "profile_image"
            case reputation
            case userID = "user_id"
            case userType = "user_type"
        }
    }

    public init(awardCount: Int? = nil, badgeID: Int? = nil, badgeType: String? = nil, description: String? = nil, link: String? = nil, name: String? = nil, rank: String? = nil, user: User? = nil) {
        self.awardCount = awardCount
        self.badgeID = badgeID
        self.badgeType = badgeType
        self.description = description
        self.link = link
        self.name = name
        self.rank = rank
        self.user = user
    }

    private enum CodingKeys: String, CodingKey {
        case awardCount = "award_count"
        case badgeID = "badge_id"
        case badgeType = "badge_type"
        case description
        case link
        case name
        case rank
        case user
    }
}

public struct Commants: Codable {
    public var body: String?
    public var bodyMarkdown: String?
    public var canFlag: Bool?
    public var commentID: Int?
    public var creationDate: Int?
    public var isEdited: Bool?
    public var link: String?
    public var owner: Owner?
    public var postID: Int?
    public var postType: String?
    public var replyToUser: ReplyToUser?
    public var score: Int?
    public var isUpvoted: Bool?

    public struct Owner: Codable {
        public var acceptRate: Int?
        public var badgeCounts: BadgeCounts?
        public var displayName: String?
        public var link: String?
        public var profileImage: String?
        public var reputation: Int?
        public var userID: Int?
        public var userType: String?

        public struct BadgeCounts: Codable {
            public var bronze: Int?
            public var gold: Int?
            public var silver: Int?

            public init(bronze: Int? = nil, gold: Int? = nil, silver: Int? = nil) {
                self.bronze = bronze
                self.gold = gold
                self.silver = silver
            }
        }

        public init(acceptRate: Int? = nil, badgeCounts: BadgeCounts? = nil, displayName: String? = nil, link: String? = nil, profileImage: String? = nil, reputation: Int? = nil, userID: Int? = nil, userType: String? = nil) {
            self.acceptRate = acceptRate
            self.badgeCounts = badgeCounts
            self.displayName = displayName
            self.link = link
            self.profileImage = profileImage
            self.reputation = reputation
            self.userID = userID
            self.userType = userType
        }

        private enum CodingKeys: String, CodingKey {
            case acceptRate = "accept_rate"
            case badgeCounts = "badge_counts"
            case displayName = "display_name"
            case link
            case profileImage = "profile_image"
            case reputation
            case userID = "user_id"
            case userType = "user_type"
        }
    }

    public struct ReplyToUser: Codable {
        public var acceptRate: Int?
        public var badgeCounts: BadgeCounts?
        public var displayName: String?
        public var link: String?
        public var profileImage: String?
        public var reputation: Int?
        public var userID: Int?
        public var userType: String?

        public struct BadgeCounts: Codable {
            public var bronze: Int?
            public var gold: Int?
            public var silver: Int?

            public init(bronze: Int? = nil, gold: Int? = nil, silver: Int? = nil) {
                self.bronze = bronze
                self.gold = gold
                self.silver = silver
            }
        }

        public init(acceptRate: Int? = nil, badgeCounts: BadgeCounts? = nil, displayName: String? = nil, link: String? = nil, profileImage: String? = nil, reputation: Int? = nil, userID: Int? = nil, userType: String? = nil) {
            self.acceptRate = acceptRate
            self.badgeCounts = badgeCounts
            self.displayName = displayName
            self.link = link
            self.profileImage = profileImage
            self.reputation = reputation
            self.userID = userID
            self.userType = userType
        }

        private enum CodingKeys: String, CodingKey {
            case acceptRate = "accept_rate"
            case badgeCounts = "badge_counts"
            case displayName = "display_name"
            case link
            case profileImage = "profile_image"
            case reputation
            case userID = "user_id"
            case userType = "user_type"
        }
    }

    public init(body: String? = nil, bodyMarkdown: String? = nil, canFlag: Bool? = nil, commentID: Int? = nil, creationDate: Int? = nil, isEdited: Bool? = nil, link: String? = nil, owner: Owner? = nil, postID: Int? = nil, postType: String? = nil, replyToUser: ReplyToUser? = nil, score: Int? = nil, isUpvoted: Bool? = nil) {
        self.body = body
        self.bodyMarkdown = bodyMarkdown
        self.canFlag = canFlag
        self.commentID = commentID
        self.creationDate = creationDate
        self.isEdited = isEdited
        self.link = link
        self.owner = owner
        self.postID = postID
        self.postType = postType
        self.replyToUser = replyToUser
        self.score = score
        self.isUpvoted = isUpvoted
    }

    private enum CodingKeys: String, CodingKey {
        case body
        case bodyMarkdown = "body_markdown"
        case canFlag = "can_flag"
        case commentID = "comment_id"
        case creationDate = "creation_date"
        case isEdited = "edited"
        case link
        case owner
        case postID = "post_id"
        case postType = "post_type"
        case replyToUser = "reply_to_user"
        case score
        case isUpvoted = "upvoted"
    }
}

public struct CreatedComment: Codable {
    public var body: String?
    public var bodyMarkdown: String?
    public var canFlag: Bool?
    public var commentID: Int?
    public var creationDate: Int?
    public var isEdited: Bool?
    public var link: String?
    public var owner: Owner?
    public var postID: Int?
    public var postType: String?
    public var replyToUser: ReplyToUser?
    public var score: Int?
    public var isUpvoted: Bool?

    public struct Owner: Codable {
        public var acceptRate: Int?
        public var badgeCounts: BadgeCounts?
        public var displayName: String?
        public var link: String?
        public var profileImage: String?
        public var reputation: Int?
        public var userID: Int?
        public var userType: String?

        public struct BadgeCounts: Codable {
            public var bronze: Int?
            public var gold: Int?
            public var silver: Int?

            public init(bronze: Int? = nil, gold: Int? = nil, silver: Int? = nil) {
                self.bronze = bronze
                self.gold = gold
                self.silver = silver
            }
        }

        public init(acceptRate: Int? = nil, badgeCounts: BadgeCounts? = nil, displayName: String? = nil, link: String? = nil, profileImage: String? = nil, reputation: Int? = nil, userID: Int? = nil, userType: String? = nil) {
            self.acceptRate = acceptRate
            self.badgeCounts = badgeCounts
            self.displayName = displayName
            self.link = link
            self.profileImage = profileImage
            self.reputation = reputation
            self.userID = userID
            self.userType = userType
        }

        private enum CodingKeys: String, CodingKey {
            case acceptRate = "accept_rate"
            case badgeCounts = "badge_counts"
            case displayName = "display_name"
            case link
            case profileImage = "profile_image"
            case reputation
            case userID = "user_id"
            case userType = "user_type"
        }
    }

    public struct ReplyToUser: Codable {
        public var acceptRate: Int?
        public var badgeCounts: BadgeCounts?
        public var displayName: String?
        public var link: String?
        public var profileImage: String?
        public var reputation: Int?
        public var userID: Int?
        public var userType: String?

        public struct BadgeCounts: Codable {
            public var bronze: Int?
            public var gold: Int?
            public var silver: Int?

            public init(bronze: Int? = nil, gold: Int? = nil, silver: Int? = nil) {
                self.bronze = bronze
                self.gold = gold
                self.silver = silver
            }
        }

        public init(acceptRate: Int? = nil, badgeCounts: BadgeCounts? = nil, displayName: String? = nil, link: String? = nil, profileImage: String? = nil, reputation: Int? = nil, userID: Int? = nil, userType: String? = nil) {
            self.acceptRate = acceptRate
            self.badgeCounts = badgeCounts
            self.displayName = displayName
            self.link = link
            self.profileImage = profileImage
            self.reputation = reputation
            self.userID = userID
            self.userType = userType
        }

        private enum CodingKeys: String, CodingKey {
            case acceptRate = "accept_rate"
            case badgeCounts = "badge_counts"
            case displayName = "display_name"
            case link
            case profileImage = "profile_image"
            case reputation
            case userID = "user_id"
            case userType = "user_type"
        }
    }

    public init(body: String? = nil, bodyMarkdown: String? = nil, canFlag: Bool? = nil, commentID: Int? = nil, creationDate: Int? = nil, isEdited: Bool? = nil, link: String? = nil, owner: Owner? = nil, postID: Int? = nil, postType: String? = nil, replyToUser: ReplyToUser? = nil, score: Int? = nil, isUpvoted: Bool? = nil) {
        self.body = body
        self.bodyMarkdown = bodyMarkdown
        self.canFlag = canFlag
        self.commentID = commentID
        self.creationDate = creationDate
        self.isEdited = isEdited
        self.link = link
        self.owner = owner
        self.postID = postID
        self.postType = postType
        self.replyToUser = replyToUser
        self.score = score
        self.isUpvoted = isUpvoted
    }

    private enum CodingKeys: String, CodingKey {
        case body
        case bodyMarkdown = "body_markdown"
        case canFlag = "can_flag"
        case commentID = "comment_id"
        case creationDate = "creation_date"
        case isEdited = "edited"
        case link
        case owner
        case postID = "post_id"
        case postType = "post_type"
        case replyToUser = "reply_to_user"
        case score
        case isUpvoted = "upvoted"
    }
}

public struct Error: Codable {
    public var errorID: Double?
    public var errorMessage: String?
    public var errorName: String?

    public init(errorID: Double? = nil, errorMessage: String? = nil, errorName: String? = nil) {
        self.errorID = errorID
        self.errorMessage = errorMessage
        self.errorName = errorName
    }

    private enum CodingKeys: String, CodingKey {
        case errorID = "error_id"
        case errorMessage = "error_message"
        case errorName = "error_name"
    }
}

public struct ErrorsItem: Codable {
    public var description: String?
    public var errorID: Int?
    public var errorName: String?

    public init(description: String? = nil, errorID: Int? = nil, errorName: String? = nil) {
        self.description = description
        self.errorID = errorID
        self.errorName = errorName
    }

    private enum CodingKeys: String, CodingKey {
        case description
        case errorID = "error_id"
        case errorName = "error_name"
    }
}

public struct Event: Codable {
    public var creationDate: Int?
    public var eventType: String?
    public var excerpt: String?
    public var link: String?
    public var theIDOfTheObjectAnswerCommentQuestionOrUserTheEventDescribes: Int?

    public init(creationDate: Int? = nil, eventType: String? = nil, excerpt: String? = nil, link: String? = nil, theIDOfTheObjectAnswerCommentQuestionOrUserTheEventDescribes: Int? = nil) {
        self.creationDate = creationDate
        self.eventType = eventType
        self.excerpt = excerpt
        self.link = link
        self.theIDOfTheObjectAnswerCommentQuestionOrUserTheEventDescribes = theIDOfTheObjectAnswerCommentQuestionOrUserTheEventDescribes
    }

    private enum CodingKeys: String, CodingKey {
        case creationDate = "creation_date"
        case eventType = "event_type"
        case excerpt
        case link
        case theIDOfTheObjectAnswerCommentQuestionOrUserTheEventDescribes = "the id of the object (answer, comment, question, or user) the event describes"
    }
}

public struct Filter: Codable {
    public var filter: String?
    public var filterType: String?
    public var includedFields: [AnyJSON]?

    public init(filter: String? = nil, filterType: String? = nil, includedFields: [AnyJSON]? = nil) {
        self.filter = filter
        self.filterType = filterType
        self.includedFields = includedFields
    }

    private enum CodingKeys: String, CodingKey {
        case filter
        case filterType = "filter_type"
        case includedFields = "included_fields"
    }
}

public struct InboxItem: Codable {
    public var answerID: Int?
    public var body: String?
    public var commentID: Int?
    public var creationDate: Int?
    public var isUnread: Bool?
    public var itemType: String?
    public var link: String?
    public var questionID: Int?
    public var site: Site?
    public var title: String?

    public struct Site: Codable {
        public var aliases: [AnyJSON]?
        public var apiSiteParameter: String?
        public var audience: String?
        public var closedBetaDate: Int?
        public var faviconURL: String?
        public var highResolutionIconURL: String?
        public var iconURL: String?
        public var launchDate: Int?
        public var logoURL: String?
        public var markdownExtensions: [AnyJSON]?
        public var name: String?
        public var openBetaDate: Int?
        public var relatedSites: [AnyJSON]?
        public var siteState: String?
        public var siteType: String?
        public var siteURL: String?
        public var styling: Styling?
        public var twitterAccount: String?

        public struct Styling: Codable {
            public var linkColor: String?
            public var tagBackgroundColor: String?
            public var tagForegroundColor: String?

            public init(linkColor: String? = nil, tagBackgroundColor: String? = nil, tagForegroundColor: String? = nil) {
                self.linkColor = linkColor
                self.tagBackgroundColor = tagBackgroundColor
                self.tagForegroundColor = tagForegroundColor
            }

            private enum CodingKeys: String, CodingKey {
                case linkColor = "link_color"
                case tagBackgroundColor = "tag_background_color"
                case tagForegroundColor = "tag_foreground_color"
            }
        }

        public init(aliases: [AnyJSON]? = nil, apiSiteParameter: String? = nil, audience: String? = nil, closedBetaDate: Int? = nil, faviconURL: String? = nil, highResolutionIconURL: String? = nil, iconURL: String? = nil, launchDate: Int? = nil, logoURL: String? = nil, markdownExtensions: [AnyJSON]? = nil, name: String? = nil, openBetaDate: Int? = nil, relatedSites: [AnyJSON]? = nil, siteState: String? = nil, siteType: String? = nil, siteURL: String? = nil, styling: Styling? = nil, twitterAccount: String? = nil) {
            self.aliases = aliases
            self.apiSiteParameter = apiSiteParameter
            self.audience = audience
            self.closedBetaDate = closedBetaDate
            self.faviconURL = faviconURL
            self.highResolutionIconURL = highResolutionIconURL
            self.iconURL = iconURL
            self.launchDate = launchDate
            self.logoURL = logoURL
            self.markdownExtensions = markdownExtensions
            self.name = name
            self.openBetaDate = openBetaDate
            self.relatedSites = relatedSites
            self.siteState = siteState
            self.siteType = siteType
            self.siteURL = siteURL
            self.styling = styling
            self.twitterAccount = twitterAccount
        }

        private enum CodingKeys: String, CodingKey {
            case aliases
            case apiSiteParameter = "api_site_parameter"
            case audience
            case closedBetaDate = "closed_beta_date"
            case faviconURL = "favicon_url"
            case highResolutionIconURL = "high_resolution_icon_url"
            case iconURL = "icon_url"
            case launchDate = "launch_date"
            case logoURL = "logo_url"
            case markdownExtensions = "markdown_extensions"
            case name
            case openBetaDate = "open_beta_date"
            case relatedSites = "related_sites"
            case siteState = "site_state"
            case siteType = "site_type"
            case siteURL = "site_url"
            case styling
            case twitterAccount = "twitter_account"
        }
    }

    public init(answerID: Int? = nil, body: String? = nil, commentID: Int? = nil, creationDate: Int? = nil, isUnread: Bool? = nil, itemType: String? = nil, link: String? = nil, questionID: Int? = nil, site: Site? = nil, title: String? = nil) {
        self.answerID = answerID
        self.body = body
        self.commentID = commentID
        self.creationDate = creationDate
        self.isUnread = isUnread
        self.itemType = itemType
        self.link = link
        self.questionID = questionID
        self.site = site
        self.title = title
    }

    private enum CodingKeys: String, CodingKey {
        case answerID = "answer_id"
        case body
        case commentID = "comment_id"
        case creationDate = "creation_date"
        case isUnread = "is_unread"
        case itemType = "item_type"
        case link
        case questionID = "question_id"
        case site
        case title
    }
}

public struct InfoObject: Codable {
    public var answersPerMinute: Double?
    public var apiRevision: String?
    public var badgesPerMinute: Double?
    public var newActiveUsers: Int?
    public var questionsPerMinute: Double?
    public var site: Site?
    public var totalAccepted: Int?
    public var totalAnswers: Int?
    public var totalBadges: Int?
    public var totalComments: Int?
    public var totalQuestions: Int?
    public var totalUnanswered: Int?
    public var totalUsers: Int?
    public var totalVotes: Int?

    public struct Site: Codable {
        public var aliases: [AnyJSON]?
        public var apiSiteParameter: String?
        public var audience: String?
        public var closedBetaDate: Int?
        public var faviconURL: String?
        public var highResolutionIconURL: String?
        public var iconURL: String?
        public var launchDate: Int?
        public var logoURL: String?
        public var markdownExtensions: [AnyJSON]?
        public var name: String?
        public var openBetaDate: Int?
        public var relatedSites: [AnyJSON]?
        public var siteState: String?
        public var siteType: String?
        public var siteURL: String?
        public var styling: Styling?
        public var twitterAccount: String?

        public struct Styling: Codable {
            public var linkColor: String?
            public var tagBackgroundColor: String?
            public var tagForegroundColor: String?

            public init(linkColor: String? = nil, tagBackgroundColor: String? = nil, tagForegroundColor: String? = nil) {
                self.linkColor = linkColor
                self.tagBackgroundColor = tagBackgroundColor
                self.tagForegroundColor = tagForegroundColor
            }

            private enum CodingKeys: String, CodingKey {
                case linkColor = "link_color"
                case tagBackgroundColor = "tag_background_color"
                case tagForegroundColor = "tag_foreground_color"
            }
        }

        public init(aliases: [AnyJSON]? = nil, apiSiteParameter: String? = nil, audience: String? = nil, closedBetaDate: Int? = nil, faviconURL: String? = nil, highResolutionIconURL: String? = nil, iconURL: String? = nil, launchDate: Int? = nil, logoURL: String? = nil, markdownExtensions: [AnyJSON]? = nil, name: String? = nil, openBetaDate: Int? = nil, relatedSites: [AnyJSON]? = nil, siteState: String? = nil, siteType: String? = nil, siteURL: String? = nil, styling: Styling? = nil, twitterAccount: String? = nil) {
            self.aliases = aliases
            self.apiSiteParameter = apiSiteParameter
            self.audience = audience
            self.closedBetaDate = closedBetaDate
            self.faviconURL = faviconURL
            self.highResolutionIconURL = highResolutionIconURL
            self.iconURL = iconURL
            self.launchDate = launchDate
            self.logoURL = logoURL
            self.markdownExtensions = markdownExtensions
            self.name = name
            self.openBetaDate = openBetaDate
            self.relatedSites = relatedSites
            self.siteState = siteState
            self.siteType = siteType
            self.siteURL = siteURL
            self.styling = styling
            self.twitterAccount = twitterAccount
        }

        private enum CodingKeys: String, CodingKey {
            case aliases
            case apiSiteParameter = "api_site_parameter"
            case audience
            case closedBetaDate = "closed_beta_date"
            case faviconURL = "favicon_url"
            case highResolutionIconURL = "high_resolution_icon_url"
            case iconURL = "icon_url"
            case launchDate = "launch_date"
            case logoURL = "logo_url"
            case markdownExtensions = "markdown_extensions"
            case name
            case openBetaDate = "open_beta_date"
            case relatedSites = "related_sites"
            case siteState = "site_state"
            case siteType = "site_type"
            case siteURL = "site_url"
            case styling
            case twitterAccount = "twitter_account"
        }
    }

    public init(answersPerMinute: Double? = nil, apiRevision: String? = nil, badgesPerMinute: Double? = nil, newActiveUsers: Int? = nil, questionsPerMinute: Double? = nil, site: Site? = nil, totalAccepted: Int? = nil, totalAnswers: Int? = nil, totalBadges: Int? = nil, totalComments: Int? = nil, totalQuestions: Int? = nil, totalUnanswered: Int? = nil, totalUsers: Int? = nil, totalVotes: Int? = nil) {
        self.answersPerMinute = answersPerMinute
        self.apiRevision = apiRevision
        self.badgesPerMinute = badgesPerMinute
        self.newActiveUsers = newActiveUsers
        self.questionsPerMinute = questionsPerMinute
        self.site = site
        self.totalAccepted = totalAccepted
        self.totalAnswers = totalAnswers
        self.totalBadges = totalBadges
        self.totalComments = totalComments
        self.totalQuestions = totalQuestions
        self.totalUnanswered = totalUnanswered
        self.totalUsers = totalUsers
        self.totalVotes = totalVotes
    }

    private enum CodingKeys: String, CodingKey {
        case answersPerMinute = "answers_per_minute"
        case apiRevision = "api_revision"
        case badgesPerMinute = "badges_per_minute"
        case newActiveUsers = "new_active_users"
        case questionsPerMinute = "questions_per_minute"
        case site
        case totalAccepted = "total_accepted"
        case totalAnswers = "total_answers"
        case totalBadges = "total_badges"
        case totalComments = "total_comments"
        case totalQuestions = "total_questions"
        case totalUnanswered = "total_unanswered"
        case totalUsers = "total_users"
        case totalVotes = "total_votes"
    }
}

public struct NetworkUser: Codable {
    public var accountID: Int?
    public var answerCount: Int?
    public var badgeCounts: BadgeCounts?
    public var creationDate: Int?
    public var lastAccessDate: Int?
    public var questionCount: Int?
    public var reputation: Int?
    public var siteName: String?
    public var siteURL: String?
    public var topAnswers: [AnyJSON]?
    public var topQuestions: [AnyJSON]?
    public var userID: Int?
    public var userType: String?

    public struct BadgeCounts: Codable {
        public var bronze: Int?
        public var gold: Int?
        public var silver: Int?

        public init(bronze: Int? = nil, gold: Int? = nil, silver: Int? = nil) {
            self.bronze = bronze
            self.gold = gold
            self.silver = silver
        }
    }

    public init(accountID: Int? = nil, answerCount: Int? = nil, badgeCounts: BadgeCounts? = nil, creationDate: Int? = nil, lastAccessDate: Int? = nil, questionCount: Int? = nil, reputation: Int? = nil, siteName: String? = nil, siteURL: String? = nil, topAnswers: [AnyJSON]? = nil, topQuestions: [AnyJSON]? = nil, userID: Int? = nil, userType: String? = nil) {
        self.accountID = accountID
        self.answerCount = answerCount
        self.badgeCounts = badgeCounts
        self.creationDate = creationDate
        self.lastAccessDate = lastAccessDate
        self.questionCount = questionCount
        self.reputation = reputation
        self.siteName = siteName
        self.siteURL = siteURL
        self.topAnswers = topAnswers
        self.topQuestions = topQuestions
        self.userID = userID
        self.userType = userType
    }

    private enum CodingKeys: String, CodingKey {
        case accountID = "account_id"
        case answerCount = "answer_count"
        case badgeCounts = "badge_counts"
        case creationDate = "creation_date"
        case lastAccessDate = "last_access_date"
        case questionCount = "question_count"
        case reputation
        case siteName = "site_name"
        case siteURL = "site_url"
        case topAnswers = "top_answers"
        case topQuestions = "top_questions"
        case userID = "user_id"
        case userType = "user_type"
    }
}

public struct Notification: Codable {
    public var body: String?
    public var creationDate: Int?
    public var isUnread: Bool?
    public var notificationType: String?
    public var postID: Int?
    public var site: Site?

    public struct Site: Codable {
        public var aliases: [AnyJSON]?
        public var apiSiteParameter: String?
        public var audience: String?
        public var closedBetaDate: Int?
        public var faviconURL: String?
        public var highResolutionIconURL: String?
        public var iconURL: String?
        public var launchDate: Int?
        public var logoURL: String?
        public var markdownExtensions: [AnyJSON]?
        public var name: String?
        public var openBetaDate: Int?
        public var relatedSites: [AnyJSON]?
        public var siteState: String?
        public var siteType: String?
        public var siteURL: String?
        public var styling: Styling?
        public var twitterAccount: String?

        public struct Styling: Codable {
            public var linkColor: String?
            public var tagBackgroundColor: String?
            public var tagForegroundColor: String?

            public init(linkColor: String? = nil, tagBackgroundColor: String? = nil, tagForegroundColor: String? = nil) {
                self.linkColor = linkColor
                self.tagBackgroundColor = tagBackgroundColor
                self.tagForegroundColor = tagForegroundColor
            }

            private enum CodingKeys: String, CodingKey {
                case linkColor = "link_color"
                case tagBackgroundColor = "tag_background_color"
                case tagForegroundColor = "tag_foreground_color"
            }
        }

        public init(aliases: [AnyJSON]? = nil, apiSiteParameter: String? = nil, audience: String? = nil, closedBetaDate: Int? = nil, faviconURL: String? = nil, highResolutionIconURL: String? = nil, iconURL: String? = nil, launchDate: Int? = nil, logoURL: String? = nil, markdownExtensions: [AnyJSON]? = nil, name: String? = nil, openBetaDate: Int? = nil, relatedSites: [AnyJSON]? = nil, siteState: String? = nil, siteType: String? = nil, siteURL: String? = nil, styling: Styling? = nil, twitterAccount: String? = nil) {
            self.aliases = aliases
            self.apiSiteParameter = apiSiteParameter
            self.audience = audience
            self.closedBetaDate = closedBetaDate
            self.faviconURL = faviconURL
            self.highResolutionIconURL = highResolutionIconURL
            self.iconURL = iconURL
            self.launchDate = launchDate
            self.logoURL = logoURL
            self.markdownExtensions = markdownExtensions
            self.name = name
            self.openBetaDate = openBetaDate
            self.relatedSites = relatedSites
            self.siteState = siteState
            self.siteType = siteType
            self.siteURL = siteURL
            self.styling = styling
            self.twitterAccount = twitterAccount
        }

        private enum CodingKeys: String, CodingKey {
            case aliases
            case apiSiteParameter = "api_site_parameter"
            case audience
            case closedBetaDate = "closed_beta_date"
            case faviconURL = "favicon_url"
            case highResolutionIconURL = "high_resolution_icon_url"
            case iconURL = "icon_url"
            case launchDate = "launch_date"
            case logoURL = "logo_url"
            case markdownExtensions = "markdown_extensions"
            case name
            case openBetaDate = "open_beta_date"
            case relatedSites = "related_sites"
            case siteState = "site_state"
            case siteType = "site_type"
            case siteURL = "site_url"
            case styling
            case twitterAccount = "twitter_account"
        }
    }

    public init(body: String? = nil, creationDate: Int? = nil, isUnread: Bool? = nil, notificationType: String? = nil, postID: Int? = nil, site: Site? = nil) {
        self.body = body
        self.creationDate = creationDate
        self.isUnread = isUnread
        self.notificationType = notificationType
        self.postID = postID
        self.site = site
    }

    private enum CodingKeys: String, CodingKey {
        case body
        case creationDate = "creation_date"
        case isUnread = "is_unread"
        case notificationType = "notification_type"
        case postID = "post_id"
        case site
    }
}

public struct Post: Codable {
    public var body: String?
    public var bodyMarkdown: String?
    public var commentCount: Int?
    public var comments: [AnyJSON]?
    public var creationDate: Int?
    public var downVoteCount: Int?
    public var isDownvoted: Bool?
    public var lastActivityDate: Int?
    public var lastEditDate: Int?
    public var lastEditor: LastEditor?
    public var link: String?
    public var owner: Owner?
    public var postID: Int?
    public var postType: String?
    public var score: Int?
    public var shareLink: String?
    public var title: String?
    public var upVoteCount: Int?
    public var isUpvoted: Bool?

    public struct LastEditor: Codable {
        public var acceptRate: Int?
        public var badgeCounts: BadgeCounts?
        public var displayName: String?
        public var link: String?
        public var profileImage: String?
        public var reputation: Int?
        public var userID: Int?
        public var userType: String?

        public struct BadgeCounts: Codable {
            public var bronze: Int?
            public var gold: Int?
            public var silver: Int?

            public init(bronze: Int? = nil, gold: Int? = nil, silver: Int? = nil) {
                self.bronze = bronze
                self.gold = gold
                self.silver = silver
            }
        }

        public init(acceptRate: Int? = nil, badgeCounts: BadgeCounts? = nil, displayName: String? = nil, link: String? = nil, profileImage: String? = nil, reputation: Int? = nil, userID: Int? = nil, userType: String? = nil) {
            self.acceptRate = acceptRate
            self.badgeCounts = badgeCounts
            self.displayName = displayName
            self.link = link
            self.profileImage = profileImage
            self.reputation = reputation
            self.userID = userID
            self.userType = userType
        }

        private enum CodingKeys: String, CodingKey {
            case acceptRate = "accept_rate"
            case badgeCounts = "badge_counts"
            case displayName = "display_name"
            case link
            case profileImage = "profile_image"
            case reputation
            case userID = "user_id"
            case userType = "user_type"
        }
    }

    public struct Owner: Codable {
        public var acceptRate: Int?
        public var badgeCounts: BadgeCounts?
        public var displayName: String?
        public var link: String?
        public var profileImage: String?
        public var reputation: Int?
        public var userID: Int?
        public var userType: String?

        public struct BadgeCounts: Codable {
            public var bronze: Int?
            public var gold: Int?
            public var silver: Int?

            public init(bronze: Int? = nil, gold: Int? = nil, silver: Int? = nil) {
                self.bronze = bronze
                self.gold = gold
                self.silver = silver
            }
        }

        public init(acceptRate: Int? = nil, badgeCounts: BadgeCounts? = nil, displayName: String? = nil, link: String? = nil, profileImage: String? = nil, reputation: Int? = nil, userID: Int? = nil, userType: String? = nil) {
            self.acceptRate = acceptRate
            self.badgeCounts = badgeCounts
            self.displayName = displayName
            self.link = link
            self.profileImage = profileImage
            self.reputation = reputation
            self.userID = userID
            self.userType = userType
        }

        private enum CodingKeys: String, CodingKey {
            case acceptRate = "accept_rate"
            case badgeCounts = "badge_counts"
            case displayName = "display_name"
            case link
            case profileImage = "profile_image"
            case reputation
            case userID = "user_id"
            case userType = "user_type"
        }
    }

    public init(body: String? = nil, bodyMarkdown: String? = nil, commentCount: Int? = nil, comments: [AnyJSON]? = nil, creationDate: Int? = nil, downVoteCount: Int? = nil, isDownvoted: Bool? = nil, lastActivityDate: Int? = nil, lastEditDate: Int? = nil, lastEditor: LastEditor? = nil, link: String? = nil, owner: Owner? = nil, postID: Int? = nil, postType: String? = nil, score: Int? = nil, shareLink: String? = nil, title: String? = nil, upVoteCount: Int? = nil, isUpvoted: Bool? = nil) {
        self.body = body
        self.bodyMarkdown = bodyMarkdown
        self.commentCount = commentCount
        self.comments = comments
        self.creationDate = creationDate
        self.downVoteCount = downVoteCount
        self.isDownvoted = isDownvoted
        self.lastActivityDate = lastActivityDate
        self.lastEditDate = lastEditDate
        self.lastEditor = lastEditor
        self.link = link
        self.owner = owner
        self.postID = postID
        self.postType = postType
        self.score = score
        self.shareLink = shareLink
        self.title = title
        self.upVoteCount = upVoteCount
        self.isUpvoted = isUpvoted
    }

    private enum CodingKeys: String, CodingKey {
        case body
        case bodyMarkdown = "body_markdown"
        case commentCount = "comment_count"
        case comments
        case creationDate = "creation_date"
        case downVoteCount = "down_vote_count"
        case isDownvoted = "downvoted"
        case lastActivityDate = "last_activity_date"
        case lastEditDate = "last_edit_date"
        case lastEditor = "last_editor"
        case link
        case owner
        case postID = "post_id"
        case postType = "post_type"
        case score
        case shareLink = "share_link"
        case title
        case upVoteCount = "up_vote_count"
        case isUpvoted = "upvoted"
    }
}

public struct Privilege: Codable {
    public var description: String?
    public var reputation: Int?
    public var shortDescription: String?

    public init(description: String? = nil, reputation: Int? = nil, shortDescription: String? = nil) {
        self.description = description
        self.reputation = reputation
        self.shortDescription = shortDescription
    }

    private enum CodingKeys: String, CodingKey {
        case description
        case reputation
        case shortDescription = "short_description"
    }
}

public struct QuestionTimelineEvent: Codable {
    public var commentID: Int?
    public var creationDate: Int?
    public var downVoteCount: Int?
    public var owner: Owner?
    public var postID: Int?
    public var questionID: Int?
    public var revisionGuid: String?
    public var timelineType: String?
    public var upVoteCount: Int?
    public var user: User?

    public struct Owner: Codable {
        public var acceptRate: Int?
        public var badgeCounts: BadgeCounts?
        public var displayName: String?
        public var link: String?
        public var profileImage: String?
        public var reputation: Int?
        public var userID: Int?
        public var userType: String?

        public struct BadgeCounts: Codable {
            public var bronze: Int?
            public var gold: Int?
            public var silver: Int?

            public init(bronze: Int? = nil, gold: Int? = nil, silver: Int? = nil) {
                self.bronze = bronze
                self.gold = gold
                self.silver = silver
            }
        }

        public init(acceptRate: Int? = nil, badgeCounts: BadgeCounts? = nil, displayName: String? = nil, link: String? = nil, profileImage: String? = nil, reputation: Int? = nil, userID: Int? = nil, userType: String? = nil) {
            self.acceptRate = acceptRate
            self.badgeCounts = badgeCounts
            self.displayName = displayName
            self.link = link
            self.profileImage = profileImage
            self.reputation = reputation
            self.userID = userID
            self.userType = userType
        }

        private enum CodingKeys: String, CodingKey {
            case acceptRate = "accept_rate"
            case badgeCounts = "badge_counts"
            case displayName = "display_name"
            case link
            case profileImage = "profile_image"
            case reputation
            case userID = "user_id"
            case userType = "user_type"
        }
    }

    public struct User: Codable {
        public var acceptRate: Int?
        public var badgeCounts: BadgeCounts?
        public var displayName: String?
        public var link: String?
        public var profileImage: String?
        public var reputation: Int?
        public var userID: Int?
        public var userType: String?

        public struct BadgeCounts: Codable {
            public var bronze: Int?
            public var gold: Int?
            public var silver: Int?

            public init(bronze: Int? = nil, gold: Int? = nil, silver: Int? = nil) {
                self.bronze = bronze
                self.gold = gold
                self.silver = silver
            }
        }

        public init(acceptRate: Int? = nil, badgeCounts: BadgeCounts? = nil, displayName: String? = nil, link: String? = nil, profileImage: String? = nil, reputation: Int? = nil, userID: Int? = nil, userType: String? = nil) {
            self.acceptRate = acceptRate
            self.badgeCounts = badgeCounts
            self.displayName = displayName
            self.link = link
            self.profileImage = profileImage
            self.reputation = reputation
            self.userID = userID
            self.userType = userType
        }

        private enum CodingKeys: String, CodingKey {
            case acceptRate = "accept_rate"
            case badgeCounts = "badge_counts"
            case displayName = "display_name"
            case link
            case profileImage = "profile_image"
            case reputation
            case userID = "user_id"
            case userType = "user_type"
        }
    }

    public init(commentID: Int? = nil, creationDate: Int? = nil, downVoteCount: Int? = nil, owner: Owner? = nil, postID: Int? = nil, questionID: Int? = nil, revisionGuid: String? = nil, timelineType: String? = nil, upVoteCount: Int? = nil, user: User? = nil) {
        self.commentID = commentID
        self.creationDate = creationDate
        self.downVoteCount = downVoteCount
        self.owner = owner
        self.postID = postID
        self.questionID = questionID
        self.revisionGuid = revisionGuid
        self.timelineType = timelineType
        self.upVoteCount = upVoteCount
        self.user = user
    }

    private enum CodingKeys: String, CodingKey {
        case commentID = "comment_id"
        case creationDate = "creation_date"
        case downVoteCount = "down_vote_count"
        case owner
        case postID = "post_id"
        case questionID = "question_id"
        case revisionGuid = "revision_guid"
        case timelineType = "timeline_type"
        case upVoteCount = "up_vote_count"
        case user
    }
}

public struct Question: Codable {
    public var acceptedAnswerID: Int?
    public var answerCount: Int?
    public var answers: [AnyJSON]?
    public var body: String?
    public var bodyMarkdown: String?
    public var bountyAmount: Int?
    public var bountyClosesDate: Int?
    public var bountyUser: BountyUser?
    public var canClose: Bool?
    public var canFlag: Bool?
    public var closeVoteCount: Int?
    public var closedDate: Int?
    public var closedDetails: ClosedDetails?
    public var closedReason: String?
    public var commentCount: Int?
    public var comments: [AnyJSON]?
    public var communityOwnedDate: Int?
    public var creationDate: Int?
    public var deleteVoteCount: Int?
    public var downVoteCount: Int?
    public var isDownvoted: Bool?
    public var favoriteCount: Int?
    public var isFavorited: Bool?
    public var isAnswered: Bool?
    public var lastActivityDate: Int?
    public var lastEditDate: Int?
    public var lastEditor: LastEditor?
    public var link: String?
    public var lockedDate: Int?
    public var migratedFrom: MigratedFrom?
    public var migratedTo: MigratedTo?
    public var notice: Notice?
    public var owner: Owner?
    public var protectedDate: Int?
    public var questionID: Int?
    public var reopenVoteCount: Int?
    public var score: Int?
    public var shareLink: String?
    public var tags: [AnyJSON]?
    public var title: String?
    public var upVoteCount: Int?
    public var isUpvoted: Bool?
    public var viewCount: Int?

    public struct BountyUser: Codable {
        public var acceptRate: Int?
        public var badgeCounts: BadgeCounts?
        public var displayName: String?
        public var link: String?
        public var profileImage: String?
        public var reputation: Int?
        public var userID: Int?
        public var userType: String?

        public struct BadgeCounts: Codable {
            public var bronze: Int?
            public var gold: Int?
            public var silver: Int?

            public init(bronze: Int? = nil, gold: Int? = nil, silver: Int? = nil) {
                self.bronze = bronze
                self.gold = gold
                self.silver = silver
            }
        }

        public init(acceptRate: Int? = nil, badgeCounts: BadgeCounts? = nil, displayName: String? = nil, link: String? = nil, profileImage: String? = nil, reputation: Int? = nil, userID: Int? = nil, userType: String? = nil) {
            self.acceptRate = acceptRate
            self.badgeCounts = badgeCounts
            self.displayName = displayName
            self.link = link
            self.profileImage = profileImage
            self.reputation = reputation
            self.userID = userID
            self.userType = userType
        }

        private enum CodingKeys: String, CodingKey {
            case acceptRate = "accept_rate"
            case badgeCounts = "badge_counts"
            case displayName = "display_name"
            case link
            case profileImage = "profile_image"
            case reputation
            case userID = "user_id"
            case userType = "user_type"
        }
    }

    public struct ClosedDetails: Codable {
        public var byUsers: [AnyJSON]?
        public var description: String?
        public var isOnHold: Bool?
        public var originalQuestions: [AnyJSON]?
        public var reason: String?

        public init(byUsers: [AnyJSON]? = nil, description: String? = nil, isOnHold: Bool? = nil, originalQuestions: [AnyJSON]? = nil, reason: String? = nil) {
            self.byUsers = byUsers
            self.description = description
            self.isOnHold = isOnHold
            self.originalQuestions = originalQuestions
            self.reason = reason
        }

        private enum CodingKeys: String, CodingKey {
            case byUsers = "by_users"
            case description
            case isOnHold = "on_hold"
            case originalQuestions = "original_questions"
            case reason
        }
    }

    public struct LastEditor: Codable {
        public var acceptRate: Int?
        public var badgeCounts: BadgeCounts?
        public var displayName: String?
        public var link: String?
        public var profileImage: String?
        public var reputation: Int?
        public var userID: Int?
        public var userType: String?

        public struct BadgeCounts: Codable {
            public var bronze: Int?
            public var gold: Int?
            public var silver: Int?

            public init(bronze: Int? = nil, gold: Int? = nil, silver: Int? = nil) {
                self.bronze = bronze
                self.gold = gold
                self.silver = silver
            }
        }

        public init(acceptRate: Int? = nil, badgeCounts: BadgeCounts? = nil, displayName: String? = nil, link: String? = nil, profileImage: String? = nil, reputation: Int? = nil, userID: Int? = nil, userType: String? = nil) {
            self.acceptRate = acceptRate
            self.badgeCounts = badgeCounts
            self.displayName = displayName
            self.link = link
            self.profileImage = profileImage
            self.reputation = reputation
            self.userID = userID
            self.userType = userType
        }

        private enum CodingKeys: String, CodingKey {
            case acceptRate = "accept_rate"
            case badgeCounts = "badge_counts"
            case displayName = "display_name"
            case link
            case profileImage = "profile_image"
            case reputation
            case userID = "user_id"
            case userType = "user_type"
        }
    }

    public struct MigratedFrom: Codable {
        public var onDate: Int?
        public var otherSite: OtherSite?
        public var questionID: Int?

        public struct OtherSite: Codable {
            public var aliases: [AnyJSON]?
            public var apiSiteParameter: String?
            public var audience: String?
            public var closedBetaDate: Int?
            public var faviconURL: String?
            public var highResolutionIconURL: String?
            public var iconURL: String?
            public var launchDate: Int?
            public var logoURL: String?
            public var markdownExtensions: [AnyJSON]?
            public var name: String?
            public var openBetaDate: Int?
            public var relatedSites: [AnyJSON]?
            public var siteState: String?
            public var siteType: String?
            public var siteURL: String?
            public var styling: Styling?
            public var twitterAccount: String?

            public struct Styling: Codable {
                public var linkColor: String?
                public var tagBackgroundColor: String?
                public var tagForegroundColor: String?

                public init(linkColor: String? = nil, tagBackgroundColor: String? = nil, tagForegroundColor: String? = nil) {
                    self.linkColor = linkColor
                    self.tagBackgroundColor = tagBackgroundColor
                    self.tagForegroundColor = tagForegroundColor
                }

                private enum CodingKeys: String, CodingKey {
                    case linkColor = "link_color"
                    case tagBackgroundColor = "tag_background_color"
                    case tagForegroundColor = "tag_foreground_color"
                }
            }

            public init(aliases: [AnyJSON]? = nil, apiSiteParameter: String? = nil, audience: String? = nil, closedBetaDate: Int? = nil, faviconURL: String? = nil, highResolutionIconURL: String? = nil, iconURL: String? = nil, launchDate: Int? = nil, logoURL: String? = nil, markdownExtensions: [AnyJSON]? = nil, name: String? = nil, openBetaDate: Int? = nil, relatedSites: [AnyJSON]? = nil, siteState: String? = nil, siteType: String? = nil, siteURL: String? = nil, styling: Styling? = nil, twitterAccount: String? = nil) {
                self.aliases = aliases
                self.apiSiteParameter = apiSiteParameter
                self.audience = audience
                self.closedBetaDate = closedBetaDate
                self.faviconURL = faviconURL
                self.highResolutionIconURL = highResolutionIconURL
                self.iconURL = iconURL
                self.launchDate = launchDate
                self.logoURL = logoURL
                self.markdownExtensions = markdownExtensions
                self.name = name
                self.openBetaDate = openBetaDate
                self.relatedSites = relatedSites
                self.siteState = siteState
                self.siteType = siteType
                self.siteURL = siteURL
                self.styling = styling
                self.twitterAccount = twitterAccount
            }

            private enum CodingKeys: String, CodingKey {
                case aliases
                case apiSiteParameter = "api_site_parameter"
                case audience
                case closedBetaDate = "closed_beta_date"
                case faviconURL = "favicon_url"
                case highResolutionIconURL = "high_resolution_icon_url"
                case iconURL = "icon_url"
                case launchDate = "launch_date"
                case logoURL = "logo_url"
                case markdownExtensions = "markdown_extensions"
                case name
                case openBetaDate = "open_beta_date"
                case relatedSites = "related_sites"
                case siteState = "site_state"
                case siteType = "site_type"
                case siteURL = "site_url"
                case styling
                case twitterAccount = "twitter_account"
            }
        }

        public init(onDate: Int? = nil, otherSite: OtherSite? = nil, questionID: Int? = nil) {
            self.onDate = onDate
            self.otherSite = otherSite
            self.questionID = questionID
        }

        private enum CodingKeys: String, CodingKey {
            case onDate = "on_date"
            case otherSite = "other_site"
            case questionID = "question_id"
        }
    }

    public struct MigratedTo: Codable {
        public var onDate: Int?
        public var otherSite: OtherSite?
        public var questionID: Int?

        public struct OtherSite: Codable {
            public var aliases: [AnyJSON]?
            public var apiSiteParameter: String?
            public var audience: String?
            public var closedBetaDate: Int?
            public var faviconURL: String?
            public var highResolutionIconURL: String?
            public var iconURL: String?
            public var launchDate: Int?
            public var logoURL: String?
            public var markdownExtensions: [AnyJSON]?
            public var name: String?
            public var openBetaDate: Int?
            public var relatedSites: [AnyJSON]?
            public var siteState: String?
            public var siteType: String?
            public var siteURL: String?
            public var styling: Styling?
            public var twitterAccount: String?

            public struct Styling: Codable {
                public var linkColor: String?
                public var tagBackgroundColor: String?
                public var tagForegroundColor: String?

                public init(linkColor: String? = nil, tagBackgroundColor: String? = nil, tagForegroundColor: String? = nil) {
                    self.linkColor = linkColor
                    self.tagBackgroundColor = tagBackgroundColor
                    self.tagForegroundColor = tagForegroundColor
                }

                private enum CodingKeys: String, CodingKey {
                    case linkColor = "link_color"
                    case tagBackgroundColor = "tag_background_color"
                    case tagForegroundColor = "tag_foreground_color"
                }
            }

            public init(aliases: [AnyJSON]? = nil, apiSiteParameter: String? = nil, audience: String? = nil, closedBetaDate: Int? = nil, faviconURL: String? = nil, highResolutionIconURL: String? = nil, iconURL: String? = nil, launchDate: Int? = nil, logoURL: String? = nil, markdownExtensions: [AnyJSON]? = nil, name: String? = nil, openBetaDate: Int? = nil, relatedSites: [AnyJSON]? = nil, siteState: String? = nil, siteType: String? = nil, siteURL: String? = nil, styling: Styling? = nil, twitterAccount: String? = nil) {
                self.aliases = aliases
                self.apiSiteParameter = apiSiteParameter
                self.audience = audience
                self.closedBetaDate = closedBetaDate
                self.faviconURL = faviconURL
                self.highResolutionIconURL = highResolutionIconURL
                self.iconURL = iconURL
                self.launchDate = launchDate
                self.logoURL = logoURL
                self.markdownExtensions = markdownExtensions
                self.name = name
                self.openBetaDate = openBetaDate
                self.relatedSites = relatedSites
                self.siteState = siteState
                self.siteType = siteType
                self.siteURL = siteURL
                self.styling = styling
                self.twitterAccount = twitterAccount
            }

            private enum CodingKeys: String, CodingKey {
                case aliases
                case apiSiteParameter = "api_site_parameter"
                case audience
                case closedBetaDate = "closed_beta_date"
                case faviconURL = "favicon_url"
                case highResolutionIconURL = "high_resolution_icon_url"
                case iconURL = "icon_url"
                case launchDate = "launch_date"
                case logoURL = "logo_url"
                case markdownExtensions = "markdown_extensions"
                case name
                case openBetaDate = "open_beta_date"
                case relatedSites = "related_sites"
                case siteState = "site_state"
                case siteType = "site_type"
                case siteURL = "site_url"
                case styling
                case twitterAccount = "twitter_account"
            }
        }

        public init(onDate: Int? = nil, otherSite: OtherSite? = nil, questionID: Int? = nil) {
            self.onDate = onDate
            self.otherSite = otherSite
            self.questionID = questionID
        }

        private enum CodingKeys: String, CodingKey {
            case onDate = "on_date"
            case otherSite = "other_site"
            case questionID = "question_id"
        }
    }

    public struct Notice: Codable {
        public var body: String?
        public var creationDate: Int?
        public var ownerUserID: Int?

        public init(body: String? = nil, creationDate: Int? = nil, ownerUserID: Int? = nil) {
            self.body = body
            self.creationDate = creationDate
            self.ownerUserID = ownerUserID
        }

        private enum CodingKeys: String, CodingKey {
            case body
            case creationDate = "creation_date"
            case ownerUserID = "owner_user_id"
        }
    }

    public struct Owner: Codable {
        public var acceptRate: Int?
        public var badgeCounts: BadgeCounts?
        public var displayName: String?
        public var link: String?
        public var profileImage: String?
        public var reputation: Int?
        public var userID: Int?
        public var userType: String?

        public struct BadgeCounts: Codable {
            public var bronze: Int?
            public var gold: Int?
            public var silver: Int?

            public init(bronze: Int? = nil, gold: Int? = nil, silver: Int? = nil) {
                self.bronze = bronze
                self.gold = gold
                self.silver = silver
            }
        }

        public init(acceptRate: Int? = nil, badgeCounts: BadgeCounts? = nil, displayName: String? = nil, link: String? = nil, profileImage: String? = nil, reputation: Int? = nil, userID: Int? = nil, userType: String? = nil) {
            self.acceptRate = acceptRate
            self.badgeCounts = badgeCounts
            self.displayName = displayName
            self.link = link
            self.profileImage = profileImage
            self.reputation = reputation
            self.userID = userID
            self.userType = userType
        }

        private enum CodingKeys: String, CodingKey {
            case acceptRate = "accept_rate"
            case badgeCounts = "badge_counts"
            case displayName = "display_name"
            case link
            case profileImage = "profile_image"
            case reputation
            case userID = "user_id"
            case userType = "user_type"
        }
    }

    public init(acceptedAnswerID: Int? = nil, answerCount: Int? = nil, answers: [AnyJSON]? = nil, body: String? = nil, bodyMarkdown: String? = nil, bountyAmount: Int? = nil, bountyClosesDate: Int? = nil, bountyUser: BountyUser? = nil, canClose: Bool? = nil, canFlag: Bool? = nil, closeVoteCount: Int? = nil, closedDate: Int? = nil, closedDetails: ClosedDetails? = nil, closedReason: String? = nil, commentCount: Int? = nil, comments: [AnyJSON]? = nil, communityOwnedDate: Int? = nil, creationDate: Int? = nil, deleteVoteCount: Int? = nil, downVoteCount: Int? = nil, isDownvoted: Bool? = nil, favoriteCount: Int? = nil, isFavorited: Bool? = nil, isAnswered: Bool? = nil, lastActivityDate: Int? = nil, lastEditDate: Int? = nil, lastEditor: LastEditor? = nil, link: String? = nil, lockedDate: Int? = nil, migratedFrom: MigratedFrom? = nil, migratedTo: MigratedTo? = nil, notice: Notice? = nil, owner: Owner? = nil, protectedDate: Int? = nil, questionID: Int? = nil, reopenVoteCount: Int? = nil, score: Int? = nil, shareLink: String? = nil, tags: [AnyJSON]? = nil, title: String? = nil, upVoteCount: Int? = nil, isUpvoted: Bool? = nil, viewCount: Int? = nil) {
        self.acceptedAnswerID = acceptedAnswerID
        self.answerCount = answerCount
        self.answers = answers
        self.body = body
        self.bodyMarkdown = bodyMarkdown
        self.bountyAmount = bountyAmount
        self.bountyClosesDate = bountyClosesDate
        self.bountyUser = bountyUser
        self.canClose = canClose
        self.canFlag = canFlag
        self.closeVoteCount = closeVoteCount
        self.closedDate = closedDate
        self.closedDetails = closedDetails
        self.closedReason = closedReason
        self.commentCount = commentCount
        self.comments = comments
        self.communityOwnedDate = communityOwnedDate
        self.creationDate = creationDate
        self.deleteVoteCount = deleteVoteCount
        self.downVoteCount = downVoteCount
        self.isDownvoted = isDownvoted
        self.favoriteCount = favoriteCount
        self.isFavorited = isFavorited
        self.isAnswered = isAnswered
        self.lastActivityDate = lastActivityDate
        self.lastEditDate = lastEditDate
        self.lastEditor = lastEditor
        self.link = link
        self.lockedDate = lockedDate
        self.migratedFrom = migratedFrom
        self.migratedTo = migratedTo
        self.notice = notice
        self.owner = owner
        self.protectedDate = protectedDate
        self.questionID = questionID
        self.reopenVoteCount = reopenVoteCount
        self.score = score
        self.shareLink = shareLink
        self.tags = tags
        self.title = title
        self.upVoteCount = upVoteCount
        self.isUpvoted = isUpvoted
        self.viewCount = viewCount
    }

    private enum CodingKeys: String, CodingKey {
        case acceptedAnswerID = "accepted_answer_id"
        case answerCount = "answer_count"
        case answers
        case body
        case bodyMarkdown = "body_markdown"
        case bountyAmount = "bounty_amount"
        case bountyClosesDate = "bounty_closes_date"
        case bountyUser = "bounty_user"
        case canClose = "can_close"
        case canFlag = "can_flag"
        case closeVoteCount = "close_vote_count"
        case closedDate = "closed_date"
        case closedDetails = "closed_details"
        case closedReason = "closed_reason"
        case commentCount = "comment_count"
        case comments
        case communityOwnedDate = "community_owned_date"
        case creationDate = "creation_date"
        case deleteVoteCount = "delete_vote_count"
        case downVoteCount = "down_vote_count"
        case isDownvoted = "downvoted"
        case favoriteCount = "favorite_count"
        case isFavorited = "favorited"
        case isAnswered = "is_answered"
        case lastActivityDate = "last_activity_date"
        case lastEditDate = "last_edit_date"
        case lastEditor = "last_editor"
        case link
        case lockedDate = "locked_date"
        case migratedFrom = "migrated_from"
        case migratedTo = "migrated_to"
        case notice
        case owner
        case protectedDate = "protected_date"
        case questionID = "question_id"
        case reopenVoteCount = "reopen_vote_count"
        case score
        case shareLink = "share_link"
        case tags
        case title
        case upVoteCount = "up_vote_count"
        case isUpvoted = "upvoted"
        case viewCount = "view_count"
    }
}

public struct ReputationChange: Codable {
    public var link: String?
    public var onDate: Int?
    public var postID: Int?
    public var postType: String?
    public var reputationChange: Int?
    public var title: String?
    public var userID: Int?
    public var voteType: String?

    public init(link: String? = nil, onDate: Int? = nil, postID: Int? = nil, postType: String? = nil, reputationChange: Int? = nil, title: String? = nil, userID: Int? = nil, voteType: String? = nil) {
        self.link = link
        self.onDate = onDate
        self.postID = postID
        self.postType = postType
        self.reputationChange = reputationChange
        self.title = title
        self.userID = userID
        self.voteType = voteType
    }

    private enum CodingKeys: String, CodingKey {
        case link
        case onDate = "on_date"
        case postID = "post_id"
        case postType = "post_type"
        case reputationChange = "reputation_change"
        case title
        case userID = "user_id"
        case voteType = "vote_type"
    }
}

public struct ReputationHistoryItem: Codable {
    public var creationDate: Int?
    public var postID: Int?
    public var reputationChange: Int?
    public var reputationHistoryType: String?
    public var userID: Int?

    public init(creationDate: Int? = nil, postID: Int? = nil, reputationChange: Int? = nil, reputationHistoryType: String? = nil, userID: Int? = nil) {
        self.creationDate = creationDate
        self.postID = postID
        self.reputationChange = reputationChange
        self.reputationHistoryType = reputationHistoryType
        self.userID = userID
    }

    private enum CodingKeys: String, CodingKey {
        case creationDate = "creation_date"
        case postID = "post_id"
        case reputationChange = "reputation_change"
        case reputationHistoryType = "reputation_history_type"
        case userID = "user_id"
    }
}

public struct ReputationObject: Codable {
    public var link: String?
    public var onDate: Int?
    public var postID: Int?
    public var postType: String?
    public var reputationChange: Int?
    public var title: String?
    public var userID: Int?
    public var voteType: String?

    public init(link: String? = nil, onDate: Int? = nil, postID: Int? = nil, postType: String? = nil, reputationChange: Int? = nil, title: String? = nil, userID: Int? = nil, voteType: String? = nil) {
        self.link = link
        self.onDate = onDate
        self.postID = postID
        self.postType = postType
        self.reputationChange = reputationChange
        self.title = title
        self.userID = userID
        self.voteType = voteType
    }

    private enum CodingKeys: String, CodingKey {
        case link
        case onDate = "on_date"
        case postID = "post_id"
        case postType = "post_type"
        case reputationChange = "reputation_change"
        case title
        case userID = "user_id"
        case voteType = "vote_type"
    }
}

public struct Revision: Codable {
    public var body: String?
    public var comment: String?
    public var creationDate: Int?
    public var isRollback: Bool?
    public var lastBody: String?
    public var lastTags: [AnyJSON]?
    public var lastTitle: String?
    public var postID: Int?
    public var postType: String?
    public var revisionGuid: String?
    public var revisionNumber: Int?
    public var revisionType: String?
    public var isSetCommunityWiki: Bool?
    public var tags: [AnyJSON]?
    public var title: String?
    public var user: User?

    public struct User: Codable {
        public var acceptRate: Int?
        public var badgeCounts: BadgeCounts?
        public var displayName: String?
        public var link: String?
        public var profileImage: String?
        public var reputation: Int?
        public var userID: Int?
        public var userType: String?

        public struct BadgeCounts: Codable {
            public var bronze: Int?
            public var gold: Int?
            public var silver: Int?

            public init(bronze: Int? = nil, gold: Int? = nil, silver: Int? = nil) {
                self.bronze = bronze
                self.gold = gold
                self.silver = silver
            }
        }

        public init(acceptRate: Int? = nil, badgeCounts: BadgeCounts? = nil, displayName: String? = nil, link: String? = nil, profileImage: String? = nil, reputation: Int? = nil, userID: Int? = nil, userType: String? = nil) {
            self.acceptRate = acceptRate
            self.badgeCounts = badgeCounts
            self.displayName = displayName
            self.link = link
            self.profileImage = profileImage
            self.reputation = reputation
            self.userID = userID
            self.userType = userType
        }

        private enum CodingKeys: String, CodingKey {
            case acceptRate = "accept_rate"
            case badgeCounts = "badge_counts"
            case displayName = "display_name"
            case link
            case profileImage = "profile_image"
            case reputation
            case userID = "user_id"
            case userType = "user_type"
        }
    }

    public init(body: String? = nil, comment: String? = nil, creationDate: Int? = nil, isRollback: Bool? = nil, lastBody: String? = nil, lastTags: [AnyJSON]? = nil, lastTitle: String? = nil, postID: Int? = nil, postType: String? = nil, revisionGuid: String? = nil, revisionNumber: Int? = nil, revisionType: String? = nil, isSetCommunityWiki: Bool? = nil, tags: [AnyJSON]? = nil, title: String? = nil, user: User? = nil) {
        self.body = body
        self.comment = comment
        self.creationDate = creationDate
        self.isRollback = isRollback
        self.lastBody = lastBody
        self.lastTags = lastTags
        self.lastTitle = lastTitle
        self.postID = postID
        self.postType = postType
        self.revisionGuid = revisionGuid
        self.revisionNumber = revisionNumber
        self.revisionType = revisionType
        self.isSetCommunityWiki = isSetCommunityWiki
        self.tags = tags
        self.title = title
        self.user = user
    }

    private enum CodingKeys: String, CodingKey {
        case body
        case comment
        case creationDate = "creation_date"
        case isRollback = "is_rollback"
        case lastBody = "last_body"
        case lastTags = "last_tags"
        case lastTitle = "last_title"
        case postID = "post_id"
        case postType = "post_type"
        case revisionGuid = "revision_guid"
        case revisionNumber = "revision_number"
        case revisionType = "revision_type"
        case isSetCommunityWiki = "set_community_wiki"
        case tags
        case title
        case user
    }
}

public struct SingleFilter: Codable {
    public var filter: String?
    public var filterType: String?
    public var includedFields: [AnyJSON]?

    public init(filter: String? = nil, filterType: String? = nil, includedFields: [AnyJSON]? = nil) {
        self.filter = filter
        self.filterType = filterType
        self.includedFields = includedFields
    }

    private enum CodingKeys: String, CodingKey {
        case filter
        case filterType = "filter_type"
        case includedFields = "included_fields"
    }
}

public struct Site: Codable {
    public var aliases: [AnyJSON]?
    public var apiSiteParameter: String?
    public var audience: String?
    public var closedBetaDate: Int?
    public var faviconURL: String?
    public var highResolutionIconURL: String?
    public var iconURL: String?
    public var launchDate: Int?
    public var logoURL: String?
    public var markdownExtensions: [AnyJSON]?
    public var name: String?
    public var openBetaDate: Int?
    public var relatedSites: [AnyJSON]?
    public var siteState: String?
    public var siteType: String?
    public var siteURL: String?
    public var styling: Styling?
    public var twitterAccount: String?

    public struct Styling: Codable {
        public var linkColor: String?
        public var tagBackgroundColor: String?
        public var tagForegroundColor: String?

        public init(linkColor: String? = nil, tagBackgroundColor: String? = nil, tagForegroundColor: String? = nil) {
            self.linkColor = linkColor
            self.tagBackgroundColor = tagBackgroundColor
            self.tagForegroundColor = tagForegroundColor
        }

        private enum CodingKeys: String, CodingKey {
            case linkColor = "link_color"
            case tagBackgroundColor = "tag_background_color"
            case tagForegroundColor = "tag_foreground_color"
        }
    }

    public init(aliases: [AnyJSON]? = nil, apiSiteParameter: String? = nil, audience: String? = nil, closedBetaDate: Int? = nil, faviconURL: String? = nil, highResolutionIconURL: String? = nil, iconURL: String? = nil, launchDate: Int? = nil, logoURL: String? = nil, markdownExtensions: [AnyJSON]? = nil, name: String? = nil, openBetaDate: Int? = nil, relatedSites: [AnyJSON]? = nil, siteState: String? = nil, siteType: String? = nil, siteURL: String? = nil, styling: Styling? = nil, twitterAccount: String? = nil) {
        self.aliases = aliases
        self.apiSiteParameter = apiSiteParameter
        self.audience = audience
        self.closedBetaDate = closedBetaDate
        self.faviconURL = faviconURL
        self.highResolutionIconURL = highResolutionIconURL
        self.iconURL = iconURL
        self.launchDate = launchDate
        self.logoURL = logoURL
        self.markdownExtensions = markdownExtensions
        self.name = name
        self.openBetaDate = openBetaDate
        self.relatedSites = relatedSites
        self.siteState = siteState
        self.siteType = siteType
        self.siteURL = siteURL
        self.styling = styling
        self.twitterAccount = twitterAccount
    }

    private enum CodingKeys: String, CodingKey {
        case aliases
        case apiSiteParameter = "api_site_parameter"
        case audience
        case closedBetaDate = "closed_beta_date"
        case faviconURL = "favicon_url"
        case highResolutionIconURL = "high_resolution_icon_url"
        case iconURL = "icon_url"
        case launchDate = "launch_date"
        case logoURL = "logo_url"
        case markdownExtensions = "markdown_extensions"
        case name
        case openBetaDate = "open_beta_date"
        case relatedSites = "related_sites"
        case siteState = "site_state"
        case siteType = "site_type"
        case siteURL = "site_url"
        case styling
        case twitterAccount = "twitter_account"
    }
}

public struct SuggestedEdit: Codable {
    public var approvalDate: Int?
    public var body: String?
    public var comment: String?
    public var creationDate: Int?
    public var postID: Int?
    public var postType: String?
    public var proposingUser: ProposingUser?
    public var rejectionDate: Int?
    public var suggestedEditID: Int?
    public var tags: [AnyJSON]?
    public var title: String?

    public struct ProposingUser: Codable {
        public var acceptRate: Int?
        public var badgeCounts: BadgeCounts?
        public var displayName: String?
        public var link: String?
        public var profileImage: String?
        public var reputation: Int?
        public var userID: Int?
        public var userType: String?

        public struct BadgeCounts: Codable {
            public var bronze: Int?
            public var gold: Int?
            public var silver: Int?

            public init(bronze: Int? = nil, gold: Int? = nil, silver: Int? = nil) {
                self.bronze = bronze
                self.gold = gold
                self.silver = silver
            }
        }

        public init(acceptRate: Int? = nil, badgeCounts: BadgeCounts? = nil, displayName: String? = nil, link: String? = nil, profileImage: String? = nil, reputation: Int? = nil, userID: Int? = nil, userType: String? = nil) {
            self.acceptRate = acceptRate
            self.badgeCounts = badgeCounts
            self.displayName = displayName
            self.link = link
            self.profileImage = profileImage
            self.reputation = reputation
            self.userID = userID
            self.userType = userType
        }

        private enum CodingKeys: String, CodingKey {
            case acceptRate = "accept_rate"
            case badgeCounts = "badge_counts"
            case displayName = "display_name"
            case link
            case profileImage = "profile_image"
            case reputation
            case userID = "user_id"
            case userType = "user_type"
        }
    }

    public init(approvalDate: Int? = nil, body: String? = nil, comment: String? = nil, creationDate: Int? = nil, postID: Int? = nil, postType: String? = nil, proposingUser: ProposingUser? = nil, rejectionDate: Int? = nil, suggestedEditID: Int? = nil, tags: [AnyJSON]? = nil, title: String? = nil) {
        self.approvalDate = approvalDate
        self.body = body
        self.comment = comment
        self.creationDate = creationDate
        self.postID = postID
        self.postType = postType
        self.proposingUser = proposingUser
        self.rejectionDate = rejectionDate
        self.suggestedEditID = suggestedEditID
        self.tags = tags
        self.title = title
    }

    private enum CodingKeys: String, CodingKey {
        case approvalDate = "approval_date"
        case body
        case comment
        case creationDate = "creation_date"
        case postID = "post_id"
        case postType = "post_type"
        case proposingUser = "proposing_user"
        case rejectionDate = "rejection_date"
        case suggestedEditID = "suggested_edit_id"
        case tags
        case title
    }
}

public struct TagScoreObject: Codable {
    public var postCount: Int?
    public var score: Int?
    public var user: User?

    public struct User: Codable {
        public var acceptRate: Int?
        public var badgeCounts: BadgeCounts?
        public var displayName: String?
        public var link: String?
        public var profileImage: String?
        public var reputation: Int?
        public var userID: Int?
        public var userType: String?

        public struct BadgeCounts: Codable {
            public var bronze: Int?
            public var gold: Int?
            public var silver: Int?

            public init(bronze: Int? = nil, gold: Int? = nil, silver: Int? = nil) {
                self.bronze = bronze
                self.gold = gold
                self.silver = silver
            }
        }

        public init(acceptRate: Int? = nil, badgeCounts: BadgeCounts? = nil, displayName: String? = nil, link: String? = nil, profileImage: String? = nil, reputation: Int? = nil, userID: Int? = nil, userType: String? = nil) {
            self.acceptRate = acceptRate
            self.badgeCounts = badgeCounts
            self.displayName = displayName
            self.link = link
            self.profileImage = profileImage
            self.reputation = reputation
            self.userID = userID
            self.userType = userType
        }

        private enum CodingKeys: String, CodingKey {
            case acceptRate = "accept_rate"
            case badgeCounts = "badge_counts"
            case displayName = "display_name"
            case link
            case profileImage = "profile_image"
            case reputation
            case userID = "user_id"
            case userType = "user_type"
        }
    }

    public init(postCount: Int? = nil, score: Int? = nil, user: User? = nil) {
        self.postCount = postCount
        self.score = score
        self.user = user
    }

    private enum CodingKeys: String, CodingKey {
        case postCount = "post_count"
        case score
        case user
    }
}

public struct TagSynonym: Codable {
    public var appliedCount: Int?
    public var creationDate: Int?
    public var fromTag: String?
    public var lastAppliedDate: Int?
    public var toTag: String?

    public init(appliedCount: Int? = nil, creationDate: Int? = nil, fromTag: String? = nil, lastAppliedDate: Int? = nil, toTag: String? = nil) {
        self.appliedCount = appliedCount
        self.creationDate = creationDate
        self.fromTag = fromTag
        self.lastAppliedDate = lastAppliedDate
        self.toTag = toTag
    }

    private enum CodingKeys: String, CodingKey {
        case appliedCount = "applied_count"
        case creationDate = "creation_date"
        case fromTag = "from_tag"
        case lastAppliedDate = "last_applied_date"
        case toTag = "to_tag"
    }
}

public struct TagWiki: Codable {
    public var body: String?
    public var bodyLastEditDate: Int?
    public var excerpt: String?
    public var excerptLastEditDate: Int?
    public var lastBodyEditor: LastBodyEditor?
    public var lastExcerptEditor: LastExcerptEditor?
    public var tagName: String?

    public struct LastBodyEditor: Codable {
        public var acceptRate: Int?
        public var badgeCounts: BadgeCounts?
        public var displayName: String?
        public var link: String?
        public var profileImage: String?
        public var reputation: Int?
        public var userID: Int?
        public var userType: String?

        public struct BadgeCounts: Codable {
            public var bronze: Int?
            public var gold: Int?
            public var silver: Int?

            public init(bronze: Int? = nil, gold: Int? = nil, silver: Int? = nil) {
                self.bronze = bronze
                self.gold = gold
                self.silver = silver
            }
        }

        public init(acceptRate: Int? = nil, badgeCounts: BadgeCounts? = nil, displayName: String? = nil, link: String? = nil, profileImage: String? = nil, reputation: Int? = nil, userID: Int? = nil, userType: String? = nil) {
            self.acceptRate = acceptRate
            self.badgeCounts = badgeCounts
            self.displayName = displayName
            self.link = link
            self.profileImage = profileImage
            self.reputation = reputation
            self.userID = userID
            self.userType = userType
        }

        private enum CodingKeys: String, CodingKey {
            case acceptRate = "accept_rate"
            case badgeCounts = "badge_counts"
            case displayName = "display_name"
            case link
            case profileImage = "profile_image"
            case reputation
            case userID = "user_id"
            case userType = "user_type"
        }
    }

    public struct LastExcerptEditor: Codable {
        public var acceptRate: Int?
        public var badgeCounts: BadgeCounts?
        public var displayName: String?
        public var link: String?
        public var profileImage: String?
        public var reputation: Int?
        public var userID: Int?
        public var userType: String?

        public struct BadgeCounts: Codable {
            public var bronze: Int?
            public var gold: Int?
            public var silver: Int?

            public init(bronze: Int? = nil, gold: Int? = nil, silver: Int? = nil) {
                self.bronze = bronze
                self.gold = gold
                self.silver = silver
            }
        }

        public init(acceptRate: Int? = nil, badgeCounts: BadgeCounts? = nil, displayName: String? = nil, link: String? = nil, profileImage: String? = nil, reputation: Int? = nil, userID: Int? = nil, userType: String? = nil) {
            self.acceptRate = acceptRate
            self.badgeCounts = badgeCounts
            self.displayName = displayName
            self.link = link
            self.profileImage = profileImage
            self.reputation = reputation
            self.userID = userID
            self.userType = userType
        }

        private enum CodingKeys: String, CodingKey {
            case acceptRate = "accept_rate"
            case badgeCounts = "badge_counts"
            case displayName = "display_name"
            case link
            case profileImage = "profile_image"
            case reputation
            case userID = "user_id"
            case userType = "user_type"
        }
    }

    public init(body: String? = nil, bodyLastEditDate: Int? = nil, excerpt: String? = nil, excerptLastEditDate: Int? = nil, lastBodyEditor: LastBodyEditor? = nil, lastExcerptEditor: LastExcerptEditor? = nil, tagName: String? = nil) {
        self.body = body
        self.bodyLastEditDate = bodyLastEditDate
        self.excerpt = excerpt
        self.excerptLastEditDate = excerptLastEditDate
        self.lastBodyEditor = lastBodyEditor
        self.lastExcerptEditor = lastExcerptEditor
        self.tagName = tagName
    }

    private enum CodingKeys: String, CodingKey {
        case body
        case bodyLastEditDate = "body_last_edit_date"
        case excerpt
        case excerptLastEditDate = "excerpt_last_edit_date"
        case lastBodyEditor = "last_body_editor"
        case lastExcerptEditor = "last_excerpt_editor"
        case tagName = "tag_name"
    }
}

public struct Tag: Codable {
    public var count: Int?
    public var hasSynonyms: Bool?
    public var isModeratorOnly: Bool?
    public var isRequired: Bool?
    public var lastActivityDate: Int?
    public var name: String?
    public var synonyms: [AnyJSON]?
    public var userID: Int?

    public init(count: Int? = nil, hasSynonyms: Bool? = nil, isModeratorOnly: Bool? = nil, isRequired: Bool? = nil, lastActivityDate: Int? = nil, name: String? = nil, synonyms: [AnyJSON]? = nil, userID: Int? = nil) {
        self.count = count
        self.hasSynonyms = hasSynonyms
        self.isModeratorOnly = isModeratorOnly
        self.isRequired = isRequired
        self.lastActivityDate = lastActivityDate
        self.name = name
        self.synonyms = synonyms
        self.userID = userID
    }

    private enum CodingKeys: String, CodingKey {
        case count
        case hasSynonyms = "has_synonyms"
        case isModeratorOnly = "is_moderator_only"
        case isRequired = "is_required"
        case lastActivityDate = "last_activity_date"
        case name
        case synonyms
        case userID = "user_id"
    }
}

public struct TopTagObject: Codable {
    public var answerCount: Int?
    public var answerScore: Int?
    public var questionCount: Int?
    public var questionScore: Int?
    public var tagName: String?
    public var userID: Int?

    public init(answerCount: Int? = nil, answerScore: Int? = nil, questionCount: Int? = nil, questionScore: Int? = nil, tagName: String? = nil, userID: Int? = nil) {
        self.answerCount = answerCount
        self.answerScore = answerScore
        self.questionCount = questionCount
        self.questionScore = questionScore
        self.tagName = tagName
        self.userID = userID
    }

    private enum CodingKeys: String, CodingKey {
        case answerCount = "answer_count"
        case answerScore = "answer_score"
        case questionCount = "question_count"
        case questionScore = "question_score"
        case tagName = "tag_name"
        case userID = "user_id"
    }
}

public struct User: Codable {
    public var aboutMe: String?
    public var acceptRate: Int?
    public var accountID: Int?
    public var age: Int?
    public var answerCount: Int?
    public var badgeCounts: BadgeCounts?
    public var creationDate: Int?
    public var displayName: String?
    public var downVoteCount: Int?
    public var isEmployee: Bool?
    public var lastAccessDate: Int?
    public var lastModifiedDate: Int?
    public var link: String?
    public var location: String?
    public var profileImage: String?
    public var questionCount: Int?
    public var reputation: Int?
    public var reputationChangeDay: Int?
    public var reputationChangeMonth: Int?
    public var reputationChangeQuarter: Int?
    public var reputationChangeWeek: Int?
    public var reputationChangeYear: Int?
    public var timedPenaltyDate: Int?
    public var upVoteCount: Int?
    public var userID: Int?
    public var userType: String?
    public var viewCount: Int?
    public var websiteURL: String?

    public struct BadgeCounts: Codable {
        public var bronze: Int?
        public var gold: Int?
        public var silver: Int?

        public init(bronze: Int? = nil, gold: Int? = nil, silver: Int? = nil) {
            self.bronze = bronze
            self.gold = gold
            self.silver = silver
        }
    }

    public init(aboutMe: String? = nil, acceptRate: Int? = nil, accountID: Int? = nil, age: Int? = nil, answerCount: Int? = nil, badgeCounts: BadgeCounts? = nil, creationDate: Int? = nil, displayName: String? = nil, downVoteCount: Int? = nil, isEmployee: Bool? = nil, lastAccessDate: Int? = nil, lastModifiedDate: Int? = nil, link: String? = nil, location: String? = nil, profileImage: String? = nil, questionCount: Int? = nil, reputation: Int? = nil, reputationChangeDay: Int? = nil, reputationChangeMonth: Int? = nil, reputationChangeQuarter: Int? = nil, reputationChangeWeek: Int? = nil, reputationChangeYear: Int? = nil, timedPenaltyDate: Int? = nil, upVoteCount: Int? = nil, userID: Int? = nil, userType: String? = nil, viewCount: Int? = nil, websiteURL: String? = nil) {
        self.aboutMe = aboutMe
        self.acceptRate = acceptRate
        self.accountID = accountID
        self.age = age
        self.answerCount = answerCount
        self.badgeCounts = badgeCounts
        self.creationDate = creationDate
        self.displayName = displayName
        self.downVoteCount = downVoteCount
        self.isEmployee = isEmployee
        self.lastAccessDate = lastAccessDate
        self.lastModifiedDate = lastModifiedDate
        self.link = link
        self.location = location
        self.profileImage = profileImage
        self.questionCount = questionCount
        self.reputation = reputation
        self.reputationChangeDay = reputationChangeDay
        self.reputationChangeMonth = reputationChangeMonth
        self.reputationChangeQuarter = reputationChangeQuarter
        self.reputationChangeWeek = reputationChangeWeek
        self.reputationChangeYear = reputationChangeYear
        self.timedPenaltyDate = timedPenaltyDate
        self.upVoteCount = upVoteCount
        self.userID = userID
        self.userType = userType
        self.viewCount = viewCount
        self.websiteURL = websiteURL
    }

    private enum CodingKeys: String, CodingKey {
        case aboutMe = "about_me"
        case acceptRate = "accept_rate"
        case accountID = "account_id"
        case age
        case answerCount = "answer_count"
        case badgeCounts = "badge_counts"
        case creationDate = "creation_date"
        case displayName = "display_name"
        case downVoteCount = "down_vote_count"
        case isEmployee = "is_employee"
        case lastAccessDate = "last_access_date"
        case lastModifiedDate = "last_modified_date"
        case link
        case location
        case profileImage = "profile_image"
        case questionCount = "question_count"
        case reputation
        case reputationChangeDay = "reputation_change_day"
        case reputationChangeMonth = "reputation_change_month"
        case reputationChangeQuarter = "reputation_change_quarter"
        case reputationChangeWeek = "reputation_change_week"
        case reputationChangeYear = "reputation_change_year"
        case timedPenaltyDate = "timed_penalty_date"
        case upVoteCount = "up_vote_count"
        case userID = "user_id"
        case userType = "user_type"
        case viewCount = "view_count"
        case websiteURL = "website_url"
    }
}

public struct UserTimelineObject: Codable {
    public var badgeID: Int?
    public var commentID: Int?
    public var creationDate: Int?
    public var detail: String?
    public var link: String?
    public var postID: Int?
    public var postType: String?
    public var suggestedEditID: Int?
    public var timelineType: String?
    public var title: String?
    public var userID: Int?

    public init(badgeID: Int? = nil, commentID: Int? = nil, creationDate: Int? = nil, detail: String? = nil, link: String? = nil, postID: Int? = nil, postType: String? = nil, suggestedEditID: Int? = nil, timelineType: String? = nil, title: String? = nil, userID: Int? = nil) {
        self.badgeID = badgeID
        self.commentID = commentID
        self.creationDate = creationDate
        self.detail = detail
        self.link = link
        self.postID = postID
        self.postType = postType
        self.suggestedEditID = suggestedEditID
        self.timelineType = timelineType
        self.title = title
        self.userID = userID
    }

    private enum CodingKeys: String, CodingKey {
        case badgeID = "badge_id"
        case commentID = "comment_id"
        case creationDate = "creation_date"
        case detail
        case link
        case postID = "post_id"
        case postType = "post_type"
        case suggestedEditID = "suggested_edit_id"
        case timelineType = "timeline_type"
        case title
        case userID = "user_id"
    }
}

public struct UsersItem: Codable {
    public var aboutMe: String?
    public var acceptRate: Int?
    public var accountID: Int?
    public var age: Int?
    public var answerCount: Int?
    public var badgeCounts: BadgeCounts?
    public var creationDate: Int?
    public var displayName: String?
    public var downVoteCount: Int?
    public var isEmployee: Bool?
    public var lastAccessDate: Int?
    public var lastModifiedDate: Int?
    public var link: String?
    public var location: String?
    public var profileImage: String?
    public var questionCount: Int?
    public var reputation: Int?
    public var reputationChangeDay: Int?
    public var reputationChangeMonth: Int?
    public var reputationChangeQuarter: Int?
    public var reputationChangeWeek: Int?
    public var reputationChangeYear: Int?
    public var timedPenaltyDate: Int?
    public var upVoteCount: Int?
    public var userID: Int?
    public var userType: String?
    public var viewCount: Int?
    public var websiteURL: String?

    public struct BadgeCounts: Codable {
        public var bronze: Int?
        public var gold: Int?
        public var silver: Int?

        public init(bronze: Int? = nil, gold: Int? = nil, silver: Int? = nil) {
            self.bronze = bronze
            self.gold = gold
            self.silver = silver
        }
    }

    public init(aboutMe: String? = nil, acceptRate: Int? = nil, accountID: Int? = nil, age: Int? = nil, answerCount: Int? = nil, badgeCounts: BadgeCounts? = nil, creationDate: Int? = nil, displayName: String? = nil, downVoteCount: Int? = nil, isEmployee: Bool? = nil, lastAccessDate: Int? = nil, lastModifiedDate: Int? = nil, link: String? = nil, location: String? = nil, profileImage: String? = nil, questionCount: Int? = nil, reputation: Int? = nil, reputationChangeDay: Int? = nil, reputationChangeMonth: Int? = nil, reputationChangeQuarter: Int? = nil, reputationChangeWeek: Int? = nil, reputationChangeYear: Int? = nil, timedPenaltyDate: Int? = nil, upVoteCount: Int? = nil, userID: Int? = nil, userType: String? = nil, viewCount: Int? = nil, websiteURL: String? = nil) {
        self.aboutMe = aboutMe
        self.acceptRate = acceptRate
        self.accountID = accountID
        self.age = age
        self.answerCount = answerCount
        self.badgeCounts = badgeCounts
        self.creationDate = creationDate
        self.displayName = displayName
        self.downVoteCount = downVoteCount
        self.isEmployee = isEmployee
        self.lastAccessDate = lastAccessDate
        self.lastModifiedDate = lastModifiedDate
        self.link = link
        self.location = location
        self.profileImage = profileImage
        self.questionCount = questionCount
        self.reputation = reputation
        self.reputationChangeDay = reputationChangeDay
        self.reputationChangeMonth = reputationChangeMonth
        self.reputationChangeQuarter = reputationChangeQuarter
        self.reputationChangeWeek = reputationChangeWeek
        self.reputationChangeYear = reputationChangeYear
        self.timedPenaltyDate = timedPenaltyDate
        self.upVoteCount = upVoteCount
        self.userID = userID
        self.userType = userType
        self.viewCount = viewCount
        self.websiteURL = websiteURL
    }

    private enum CodingKeys: String, CodingKey {
        case aboutMe = "about_me"
        case acceptRate = "accept_rate"
        case accountID = "account_id"
        case age
        case answerCount = "answer_count"
        case badgeCounts = "badge_counts"
        case creationDate = "creation_date"
        case displayName = "display_name"
        case downVoteCount = "down_vote_count"
        case isEmployee = "is_employee"
        case lastAccessDate = "last_access_date"
        case lastModifiedDate = "last_modified_date"
        case link
        case location
        case profileImage = "profile_image"
        case questionCount = "question_count"
        case reputation
        case reputationChangeDay = "reputation_change_day"
        case reputationChangeMonth = "reputation_change_month"
        case reputationChangeQuarter = "reputation_change_quarter"
        case reputationChangeWeek = "reputation_change_week"
        case reputationChangeYear = "reputation_change_year"
        case timedPenaltyDate = "timed_penalty_date"
        case upVoteCount = "up_vote_count"
        case userID = "user_id"
        case userType = "user_type"
        case viewCount = "view_count"
        case websiteURL = "website_url"
    }
}

public struct WritePermission: Codable {
    public var canAdd: Bool?
    public var canDelete: Bool?
    public var canEdit: Bool?
    public var maxDailyActions: Int?
    public var minSecondsBetweenActions: Int?
    public var objectType: String?
    public var userID: Int?

    public init(canAdd: Bool? = nil, canDelete: Bool? = nil, canEdit: Bool? = nil, maxDailyActions: Int? = nil, minSecondsBetweenActions: Int? = nil, objectType: String? = nil, userID: Int? = nil) {
        self.canAdd = canAdd
        self.canDelete = canDelete
        self.canEdit = canEdit
        self.maxDailyActions = maxDailyActions
        self.minSecondsBetweenActions = minSecondsBetweenActions
        self.objectType = objectType
        self.userID = userID
    }

    private enum CodingKeys: String, CodingKey {
        case canAdd = "can_add"
        case canDelete = "can_delete"
        case canEdit = "can_edit"
        case maxDailyActions = "max_daily_actions"
        case minSecondsBetweenActions = "min_seconds_between_actions"
        case objectType = "object_type"
        case userID = "user_id"
    }
}

public enum AnyJSON: Equatable, Codable {
    case string(String)
    case number(Double)
    case object([String: AnyJSON])
    case array([AnyJSON])
    case bool(Bool)

    var value: Any {
        switch self {
        case .string(let string): return string
        case .number(let double): return double
        case .object(let dictionary): return dictionary
        case .array(let array): return array
        case .bool(let bool): return bool
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .array(array): try container.encode(array)
        case let .object(object): try container.encode(object)
        case let .string(string): try container.encode(string)
        case let .number(number): try container.encode(number)
        case let .bool(bool): try container.encode(bool)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let object = try? container.decode([String: AnyJSON].self) {
            self = .object(object)
        } else if let array = try? container.decode([AnyJSON].self) {
            self = .array(array)
        } else if let string = try? container.decode(String.self) {
            self = .string(string)
        } else if let bool = try? container.decode(Bool.self) {
            self = .bool(bool)
        } else if let number = try? container.decode(Double.self) {
            self = .number(number)
        } else {
            throw DecodingError.dataCorrupted(
                .init(codingPath: decoder.codingPath, debugDescription: "Invalid JSON value.")
            )
        }
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
