// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import Get
import URLQueryEncoder

extension Paths {
    public static var estimates: Estimates {
        Estimates(path: "/estimates")
    }

    public struct Estimates {
        /// Path: `/estimates`
        public let path: String
    }
}

extension Paths.Estimates {
    public var price: Price {
        Price(path: path + "/price")
    }

    public struct Price {
        /// Path: `/estimates/price`
        public let path: String

        /// Price Estimates
        ///
        /// The Price Estimates endpoint returns an estimated price range for each product offered at a given location. The price estimate is provided as a formatted string with the full price range and the localized currency symbol.<br><br>The response also includes low and high estimates, and the [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code for situations requiring currency conversion. When surge is active for a particular product, its surge_multiplier will be greater than 1, but the price estimate already factors in this multiplier.
        public func get(parameters: GetParameters) -> Request<[uber.PriceEstimate]> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var startLatitude: Double
            public var startLongitude: Double
            public var endLatitude: Double
            public var endLongitude: Double

            public init(startLatitude: Double, startLongitude: Double, endLatitude: Double, endLongitude: Double) {
                self.startLatitude = startLatitude
                self.startLongitude = startLongitude
                self.endLatitude = endLatitude
                self.endLongitude = endLongitude
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(startLatitude, forKey: "start_latitude")
                encoder.encode(startLongitude, forKey: "start_longitude")
                encoder.encode(endLatitude, forKey: "end_latitude")
                encoder.encode(endLongitude, forKey: "end_longitude")
                return encoder.items
            }
        }
    }
}

extension Paths.Estimates {
    public var time: Time {
        Time(path: path + "/time")
    }

    public struct Time {
        /// Path: `/estimates/time`
        public let path: String

        /// Time Estimates
        ///
        /// The Time Estimates endpoint returns ETAs for all products offered at a given location, with the responses expressed as integers in seconds. We recommend that this endpoint be called every minute to provide the most accurate, up-to-date ETAs.
        public func get(parameters: GetParameters) -> Request<[uber.Product]> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var startLatitude: Double
            public var startLongitude: Double
            public var customerUUID: String?
            public var productID: String?

            public init(startLatitude: Double, startLongitude: Double, customerUUID: String? = nil, productID: String? = nil) {
                self.startLatitude = startLatitude
                self.startLongitude = startLongitude
                self.customerUUID = customerUUID
                self.productID = productID
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(startLatitude, forKey: "start_latitude")
                encoder.encode(startLongitude, forKey: "start_longitude")
                encoder.encode(customerUUID, forKey: "customer_uuid")
                encoder.encode(productID, forKey: "product_id")
                return encoder.items
            }
        }
    }
}

extension Paths {
    public static var me: Me {
        Me(path: "/me")
    }

    public struct Me {
        /// Path: `/me`
        public let path: String

        /// User Profile
        ///
        /// The User Profile endpoint returns information about the Uber user that has authorized with the application.
        public var get: Request<uber.Profile> {
            .get(path)
        }
    }
}

extension Paths {
    public static var history: History {
        History(path: "/history")
    }

    public struct History {
        /// Path: `/history`
        public let path: String

        /// User Activity
        ///
        /// The User Activity endpoint returns data about a user's lifetime activity with Uber. The response will include pickup locations and times, dropoff locations and times, the distance of past requests, and information about which products were requested.<br><br>The history array in the response will have a maximum length based on the limit parameter. The response value count may exceed limit, therefore subsequent API requests may be necessary.
        public func get(offset: Int? = nil, limit: Int? = nil) -> Request<uber.Activities> {
            .get(path, query: makeGetQuery(offset, limit))
        }

        private func makeGetQuery(_ offset: Int?, _ limit: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(offset, forKey: "offset")
            encoder.encode(limit, forKey: "limit")
            return encoder.items
        }
    }
}

extension Paths {
    public static var products: Products {
        Products(path: "/products")
    }

    public struct Products {
        /// Path: `/products`
        public let path: String

        /// Product Types
        ///
        /// The Products endpoint returns information about the Uber products offered at a given location. The response includes the display name and other details about each product, and lists the products in the proper display order.
        public func get(latitude: Double, longitude: Double) -> Request<[uber.Product]> {
            .get(path, query: [("latitude", String(latitude)), ("longitude", String(longitude))])
        }
    }
}

public enum Paths {}
