// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation

public struct Activity: Codable {
    /// Unique identifier for the activity
    public var uuid: String?

    public init(uuid: String? = nil) {
        self.uuid = uuid
    }
}

public struct PriceEstimate: Codable {
    /// Lower bound of the estimated price.
    public var lowEstimate: Double?
    /// Formatted string of estimate in local currency of the start location. Estimate could be a range, a single number (flat rate) or "Metered" for TAXI.
    public var estimate: String?
    /// Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles
    public var productID: String?
    /// Expected surge multiplier. Surge is active if surge_multiplier is greater than 1. Price estimate already factors in the surge multiplier.
    public var surgeMultiplier: Double?
    /// Display name of product.
    public var displayName: String?
    /// Upper bound of the estimated price.
    public var highEstimate: Double?
    /// [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) currency code.
    public var currencyCode: String?

    public init(lowEstimate: Double? = nil, estimate: String? = nil, productID: String? = nil, surgeMultiplier: Double? = nil, displayName: String? = nil, highEstimate: Double? = nil, currencyCode: String? = nil) {
        self.lowEstimate = lowEstimate
        self.estimate = estimate
        self.productID = productID
        self.surgeMultiplier = surgeMultiplier
        self.displayName = displayName
        self.highEstimate = highEstimate
        self.currencyCode = currencyCode
    }

    private enum CodingKeys: String, CodingKey {
        case lowEstimate = "low_estimate"
        case estimate
        case productID = "product_id"
        case surgeMultiplier = "surge_multiplier"
        case displayName = "display_name"
        case highEstimate = "high_estimate"
        case currencyCode = "currency_code"
    }
}

public struct Profile: Codable {
    /// Promo code of the Uber user.
    public var promoCode: String?
    /// Last name of the Uber user.
    public var lastName: String?
    /// Email address of the Uber user
    public var email: String?
    /// Image URL of the Uber user.
    public var picture: String?
    /// First name of the Uber user.
    public var firstName: String?

    public init(promoCode: String? = nil, lastName: String? = nil, email: String? = nil, picture: String? = nil, firstName: String? = nil) {
        self.promoCode = promoCode
        self.lastName = lastName
        self.email = email
        self.picture = picture
        self.firstName = firstName
    }

    private enum CodingKeys: String, CodingKey {
        case promoCode = "promo_code"
        case lastName = "last_name"
        case email
        case picture
        case firstName = "first_name"
    }
}

public struct Error: Codable {
    public var code: Int?
    public var fields: String?
    public var message: String?

    public init(code: Int? = nil, fields: String? = nil, message: String? = nil) {
        self.code = code
        self.fields = fields
        self.message = message
    }
}

public struct Activities: Codable {
    /// Total number of items available.
    public var count: Int?
    public var history: [Activity]?
    /// Number of items to retrieve (100 max).
    public var limit: Int?
    /// Position in pagination.
    public var offset: Int?

    public init(count: Int? = nil, history: [Activity]? = nil, limit: Int? = nil, offset: Int? = nil) {
        self.count = count
        self.history = history
        self.limit = limit
        self.offset = offset
    }
}

public struct Product: Codable {
    /// Capacity of product. For example, 4 people.
    public var capacity: String?
    /// Description of product.
    public var description: String?
    /// Image URL representing the product.
    public var image: String?
    /// Display name of product.
    public var displayName: String?
    /// Unique identifier representing a specific product for a given latitude & longitude. For example, uberX in San Francisco will have a different product_id than uberX in Los Angeles.
    public var productID: String?

    public init(capacity: String? = nil, description: String? = nil, image: String? = nil, displayName: String? = nil, productID: String? = nil) {
        self.capacity = capacity
        self.description = description
        self.image = image
        self.displayName = displayName
        self.productID = productID
    }

    private enum CodingKeys: String, CodingKey {
        case capacity
        case description
        case image
        case displayName = "display_name"
        case productID = "product_id"
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
