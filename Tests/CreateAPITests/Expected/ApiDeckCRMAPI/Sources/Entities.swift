// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import NaiveDate

public struct Activity: Codable {
    /// Example: "12345"
    public var id: String?
    /// The third-party API ID of original entity
    ///
    /// Example: "12345"
    public var downstreamID: String?
    /// Example: "2021-05-01T12:00:00.000Z"
    public var activityDatetime: String?
    /// Example: 1800
    public var durationSeconds: Int?
    /// Example: "12345"
    public var userID: String?
    /// Example: "12345"
    public var accountID: String?
    /// Example: "12345"
    public var contactID: String?
    /// Example: "12345"
    public var companyID: String?
    /// Example: "12345"
    public var opportunityID: String?
    /// Example: "12345"
    public var leadID: String?
    /// Example: "12345"
    public var ownerID: String?
    /// Example: "12345"
    public var campaignID: String?
    /// Example: "12345"
    public var caseID: String?
    /// Example: "12345"
    public var assetID: String?
    /// Example: "12345"
    public var contractID: String?
    /// Example: "12345"
    public var productID: String?
    /// Example: "12345"
    public var solutionID: String?
    /// Example: "12345"
    public var customObjectID: String?
    /// Example: "meeting"
    public var type: `Type`
    /// Example: "Meeting"
    public var title: String?
    /// Example: "More info about the meeting"
    public var description: String?
    /// Note (internal)
    ///
    /// Example: "An internal note about the meeting"
    public var note: String?
    /// Example: "Space"
    public var location: String?
    public var locationAddress: Address?
    /// Example: false
    public var isAllDayEvent: Bool?
    /// Example: true
    public var isPrivate: Bool?
    /// Example: true
    public var isGroupEvent: Bool?
    /// Example: "debrief"
    public var eventSubType: String?
    /// Example: "Proposed"
    public var groupEventType: String?
    /// Example: false
    public var isChild: Bool?
    /// Example: false
    public var isArchived: Bool?
    /// Example: false
    public var isDeleted: Bool?
    /// Example: "busy"
    public var showAs: ShowAs?
    /// Done
    ///
    /// Whether the Activity is done or not
    ///
    /// Example: false
    public var isDone: Bool?
    /// Example: "2021-05-01T12:00:00.000Z"
    public var startDatetime: String?
    /// Example: "2021-05-01T12:30:00.000Z"
    public var endDatetime: String?
    /// Example: 30
    public var durationMinutes: Int?
    /// Example: "2021-05-01"
    public var activityDate: String?
    /// Example: "2021-05-01"
    public var endDate: String?
    /// Example: false
    public var isRecurrent: Bool?
    /// Example: "2021-05-01T17:00:00.000Z"
    public var reminderDatetime: String?
    /// Example: false
    public var isReminderSet: Bool?
    /// Meeting URL
    ///
    /// Example: "https://us02web.zoom.us/j/88120759396"
    public var videoConferenceURL: String?
    /// Meeting ID
    ///
    /// Example: "zoom:88120759396"
    public var videoConferenceID: String?
    public var customFields: [CustomField]?
    public var attendees: [ActivityAttendee]?
    /// Example: "12345"
    public var updatedBy: String?
    /// Example: "12345"
    public var createdBy: String?
    /// Example: "2020-09-30T07:43:32.000Z"
    public var updatedAt: String?
    /// Example: "2020-09-30T07:43:32.000Z"
    public var createdAt: String?

    /// Example: "meeting"
    public enum `Type`: String, Codable, CaseIterable {
        case call
        case meeting
        case email
        case note
        case task
        case deadline
        case sendLetter = "send-letter"
        case sendQuote = "send-quote"
        case other
    }

    /// Example: "busy"
    public enum ShowAs: String, Codable, CaseIterable {
        case free
        case busy
    }

    public init(id: String? = nil, downstreamID: String? = nil, activityDatetime: String? = nil, durationSeconds: Int? = nil, userID: String? = nil, accountID: String? = nil, contactID: String? = nil, companyID: String? = nil, opportunityID: String? = nil, leadID: String? = nil, ownerID: String? = nil, campaignID: String? = nil, caseID: String? = nil, assetID: String? = nil, contractID: String? = nil, productID: String? = nil, solutionID: String? = nil, customObjectID: String? = nil, type: `Type`, title: String? = nil, description: String? = nil, note: String? = nil, location: String? = nil, locationAddress: Address? = nil, isAllDayEvent: Bool? = nil, isPrivate: Bool? = nil, isGroupEvent: Bool? = nil, eventSubType: String? = nil, groupEventType: String? = nil, isChild: Bool? = nil, isArchived: Bool? = nil, isDeleted: Bool? = nil, showAs: ShowAs? = nil, isDone: Bool? = nil, startDatetime: String? = nil, endDatetime: String? = nil, durationMinutes: Int? = nil, activityDate: String? = nil, endDate: String? = nil, isRecurrent: Bool? = nil, reminderDatetime: String? = nil, isReminderSet: Bool? = nil, videoConferenceURL: String? = nil, videoConferenceID: String? = nil, customFields: [CustomField]? = nil, attendees: [ActivityAttendee]? = nil, updatedBy: String? = nil, createdBy: String? = nil, updatedAt: String? = nil, createdAt: String? = nil) {
        self.id = id
        self.downstreamID = downstreamID
        self.activityDatetime = activityDatetime
        self.durationSeconds = durationSeconds
        self.userID = userID
        self.accountID = accountID
        self.contactID = contactID
        self.companyID = companyID
        self.opportunityID = opportunityID
        self.leadID = leadID
        self.ownerID = ownerID
        self.campaignID = campaignID
        self.caseID = caseID
        self.assetID = assetID
        self.contractID = contractID
        self.productID = productID
        self.solutionID = solutionID
        self.customObjectID = customObjectID
        self.type = type
        self.title = title
        self.description = description
        self.note = note
        self.location = location
        self.locationAddress = locationAddress
        self.isAllDayEvent = isAllDayEvent
        self.isPrivate = isPrivate
        self.isGroupEvent = isGroupEvent
        self.eventSubType = eventSubType
        self.groupEventType = groupEventType
        self.isChild = isChild
        self.isArchived = isArchived
        self.isDeleted = isDeleted
        self.showAs = showAs
        self.isDone = isDone
        self.startDatetime = startDatetime
        self.endDatetime = endDatetime
        self.durationMinutes = durationMinutes
        self.activityDate = activityDate
        self.endDate = endDate
        self.isRecurrent = isRecurrent
        self.reminderDatetime = reminderDatetime
        self.isReminderSet = isReminderSet
        self.videoConferenceURL = videoConferenceURL
        self.videoConferenceID = videoConferenceID
        self.customFields = customFields
        self.attendees = attendees
        self.updatedBy = updatedBy
        self.createdBy = createdBy
        self.updatedAt = updatedAt
        self.createdAt = createdAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case downstreamID = "downstream_id"
        case activityDatetime = "activity_datetime"
        case durationSeconds = "duration_seconds"
        case userID = "user_id"
        case accountID = "account_id"
        case contactID = "contact_id"
        case companyID = "company_id"
        case opportunityID = "opportunity_id"
        case leadID = "lead_id"
        case ownerID = "owner_id"
        case campaignID = "campaign_id"
        case caseID = "case_id"
        case assetID = "asset_id"
        case contractID = "contract_id"
        case productID = "product_id"
        case solutionID = "solution_id"
        case customObjectID = "custom_object_id"
        case type
        case title
        case description
        case note
        case location
        case locationAddress = "location_address"
        case isAllDayEvent = "all_day_event"
        case isPrivate = "private"
        case isGroupEvent = "group_event"
        case eventSubType = "event_sub_type"
        case groupEventType = "group_event_type"
        case isChild = "child"
        case isArchived = "archived"
        case isDeleted = "deleted"
        case showAs = "show_as"
        case isDone = "done"
        case startDatetime = "start_datetime"
        case endDatetime = "end_datetime"
        case durationMinutes = "duration_minutes"
        case activityDate = "activity_date"
        case endDate = "end_date"
        case isRecurrent = "recurrent"
        case reminderDatetime = "reminder_datetime"
        case isReminderSet = "reminder_set"
        case videoConferenceURL = "video_conference_url"
        case videoConferenceID = "video_conference_id"
        case customFields = "custom_fields"
        case attendees
        case updatedBy = "updated_by"
        case createdBy = "created_by"
        case updatedAt = "updated_at"
        case createdAt = "created_at"
    }
}

public struct ActivityAttendee: Codable {
    /// Example: "12345"
    public var id: String?
    /// Example: "Elon Musk"
    public var name: String?
    /// Example: "Elon"
    public var firstName: String?
    /// Example: "D."
    public var middleName: String?
    /// Example: "Musk"
    public var lastName: String?
    /// Example: "Mr."
    public var prefix: String?
    /// Example: "PhD"
    public var suffix: String?
    /// Example: "elon@musk.com"
    public var emailAddress: String?
    /// Example: true
    public var isOrganizer: Bool?
    /// Example: "accepted"
    public var status: Status?
    /// Example: "12345"
    public var userID: String?
    /// Example: "12345"
    public var contactID: String?
    /// Example: "2017-08-12T20:43:21.291Z"
    public var updatedAt: Date?
    /// Example: "2017-08-12T20:43:21.291Z"
    public var createdAt: Date?

    /// Example: "accepted"
    public enum Status: String, Codable, CaseIterable {
        case accepted
        case tentative
        case declined
    }

    public init(id: String? = nil, name: String? = nil, firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, prefix: String? = nil, suffix: String? = nil, emailAddress: String? = nil, isOrganizer: Bool? = nil, status: Status? = nil, userID: String? = nil, contactID: String? = nil, updatedAt: Date? = nil, createdAt: Date? = nil) {
        self.id = id
        self.name = name
        self.firstName = firstName
        self.middleName = middleName
        self.lastName = lastName
        self.prefix = prefix
        self.suffix = suffix
        self.emailAddress = emailAddress
        self.isOrganizer = isOrganizer
        self.status = status
        self.userID = userID
        self.contactID = contactID
        self.updatedAt = updatedAt
        self.createdAt = createdAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case name
        case firstName = "first_name"
        case middleName = "middle_name"
        case lastName = "last_name"
        case prefix
        case suffix
        case emailAddress = "email_address"
        case isOrganizer = "is_organizer"
        case status
        case userID = "user_id"
        case contactID = "contact_id"
        case updatedAt = "updated_at"
        case createdAt = "created_at"
    }
}

public struct Address: Codable {
    /// Example: "123"
    public var id: String?
    /// Example: "primary"
    public var type: `Type`?
    /// The address string. Some APIs don't provide structured address data.
    ///
    /// Example: "25 Spring Street, Blackburn, VIC 3130"
    public var string: String?
    /// Example: "HQ US"
    public var name: String?
    /// Line 1 of the address e.g. number, street, suite, apt #, etc.
    ///
    /// Example: "Main street"
    public var line1: String?
    /// Line 2 of the address
    ///
    /// Example: "apt #"
    public var line2: String?
    /// Line 3 of the address
    ///
    /// Example: "Suite #"
    public var line3: String?
    /// Line 4 of the address
    ///
    /// Example: "delivery instructions"
    public var line4: String?
    /// Street number
    ///
    /// Example: "25"
    public var streetNumber: String?
    /// Name of city.
    ///
    /// Example: "San Francisco"
    public var city: String?
    /// Name of state
    ///
    /// Example: "CA"
    public var state: String?
    /// Zip code or equivalent.
    ///
    /// Example: "94104"
    public var postalCode: String?
    /// Country code according to ISO 3166-1 alpha-2.
    ///
    /// Example: "US"
    public var country: String?
    /// Example: "40.759211"
    public var latitude: String?
    /// Example: "-73.984638"
    public var longitude: String?
    /// Address field that holds a sublocality, such as a county
    ///
    /// Example: "Santa Clara"
    public var county: String?
    /// Example: "Elon Musk"
    public var contactName: String?
    /// Example: "Mr"
    public var salutation: String?
    /// Example: "111-111-1111"
    public var phoneNumber: String?
    /// Example: "122-111-1111"
    public var fax: String?
    /// Example: "elon@musk.com"
    public var email: String?
    /// Example: "https://elonmusk.com"
    public var website: String?
    /// Example: "1-12345"
    public var rowVersion: String?

    /// Example: "primary"
    public enum `Type`: String, Codable, CaseIterable {
        case primary
        case secondary
        case home
        case office
        case shipping
        case billing
        case other
    }

    public init(id: String? = nil, type: `Type`? = nil, string: String? = nil, name: String? = nil, line1: String? = nil, line2: String? = nil, line3: String? = nil, line4: String? = nil, streetNumber: String? = nil, city: String? = nil, state: String? = nil, postalCode: String? = nil, country: String? = nil, latitude: String? = nil, longitude: String? = nil, county: String? = nil, contactName: String? = nil, salutation: String? = nil, phoneNumber: String? = nil, fax: String? = nil, email: String? = nil, website: String? = nil, rowVersion: String? = nil) {
        self.id = id
        self.type = type
        self.string = string
        self.name = name
        self.line1 = line1
        self.line2 = line2
        self.line3 = line3
        self.line4 = line4
        self.streetNumber = streetNumber
        self.city = city
        self.state = state
        self.postalCode = postalCode
        self.country = country
        self.latitude = latitude
        self.longitude = longitude
        self.county = county
        self.contactName = contactName
        self.salutation = salutation
        self.phoneNumber = phoneNumber
        self.fax = fax
        self.email = email
        self.website = website
        self.rowVersion = rowVersion
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case type
        case string
        case name
        case line1
        case line2
        case line3
        case line4
        case streetNumber = "street_number"
        case city
        case state
        case postalCode = "postal_code"
        case country
        case latitude
        case longitude
        case county
        case contactName = "contact_name"
        case salutation
        case phoneNumber = "phone_number"
        case fax
        case email
        case website
        case rowVersion = "row_version"
    }
}

public struct BadRequestResponse: Codable {
    /// HTTP status code
    ///
    /// Example: 400
    public var statusCode: Double?
    /// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
    ///
    /// Example: "Bad Request"
    public var error: String?
    /// The type of error returned
    ///
    /// Example: "RequestHeadersValidationError"
    public var typeName: String?
    /// A human-readable message providing more details about the error.
    ///
    /// Example: "Invalid Params"
    public var message: String?
    /// Contains parameter or domain specific information related to the error and why it occurred.
    public var detail: Detail?
    /// Link to documentation of error type
    ///
    /// Example: "https://developers.apideck.com/errors#requestbodyvalidationerror"
    public var ref: String?

    /// Contains parameter or domain specific information related to the error and why it occurred.
    public struct Detail: Codable {
        /// Example: "Missing property foobar"
        public var string: String?
        /// Example:
        ///
        /// {
        ///   "missing" : [
        ///     {
        ///       "foobar" : "required"
        ///     }
        ///   ]
        /// }
        public var object: [String: AnyJSON]?

        public init(string: String? = nil, object: [String: AnyJSON]? = nil) {
            self.string = string
            self.object = object
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.object = try? container.decode([String: AnyJSON].self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = object { try container.encode(value) }
        }
    }

    public init(statusCode: Double? = nil, error: String? = nil, typeName: String? = nil, message: String? = nil, detail: Detail? = nil, ref: String? = nil) {
        self.statusCode = statusCode
        self.error = error
        self.typeName = typeName
        self.message = message
        self.detail = detail
        self.ref = ref
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case error
        case typeName = "type_name"
        case message
        case detail
        case ref
    }
}

public struct BankAccount: Codable {
    /// Example: "CH2989144532982975332"
    public var iban: String?
    /// Example: "AUDSCHGGXXX"
    public var bic: String?
    /// A BSB is a 6 digit numeric code used for identifying the branch of an Australian or New Zealand bank or financial institution.
    ///
    /// Example: "062-001"
    public var bsbNumber: String?
    /// A bank code is a code assigned by a central bank, a bank supervisory body or a Bankers Association in a country to all its licensed member banks or financial institutions.
    ///
    /// Example: "BNH"
    public var bankCode: String?
    /// Bank Account Number
    ///
    /// A bank account number is a number that is tied to your bank account. If you have several bank accounts, such as personal, joint, business (and so on), each account will have a different account number.
    ///
    /// Example: "123456789"
    public var accountNumber: String?
    /// Bank Account Name
    ///
    /// The name which you used in opening your bank account.
    ///
    /// Example: "SPACEX LLC"
    public var accountName: String?
    /// The type of bank account.
    ///
    /// Example: "credit_card"
    public var accountType: AccountType?
    /// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
    ///
    /// Example: "USD"
    public var currency: Currency?

    /// The type of bank account.
    ///
    /// Example: "credit_card"
    public enum AccountType: String, Codable, CaseIterable {
        case bankAccount = "bank_account"
        case creditCard = "credit_card"
        case other
    }

    public init(iban: String? = nil, bic: String? = nil, bsbNumber: String? = nil, bankCode: String? = nil, accountNumber: String? = nil, accountName: String? = nil, accountType: AccountType? = nil, currency: Currency? = nil) {
        self.iban = iban
        self.bic = bic
        self.bsbNumber = bsbNumber
        self.bankCode = bankCode
        self.accountNumber = accountNumber
        self.accountName = accountName
        self.accountType = accountType
        self.currency = currency
    }

    private enum CodingKeys: String, CodingKey {
        case iban
        case bic
        case bsbNumber = "bsb_number"
        case bankCode = "bank_code"
        case accountNumber = "account_number"
        case accountName = "account_name"
        case accountType = "account_type"
        case currency
    }
}

/// Example:
///
/// {
///   "name" : "SpaceX"
/// }
public struct CompaniesFilter: Codable {
    /// Name of the company to filter on
    ///
    /// Example: "SpaceX"
    public var name: String?

    public init(name: String? = nil) {
        self.name = name
    }
}

/// Example:
///
/// {
///   "by" : "created_at",
///   "direction" : "desc"
/// }
public struct CompaniesSort: Codable {
    /// The field on which to sort the Companies
    ///
    /// Example: "created_at"
    public var by: By
    /// The direction in which to sort the results
    public var direction: SortDirection?

    /// The field on which to sort the Companies
    ///
    /// Example: "created_at"
    public enum By: String, Codable, CaseIterable {
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case name
    }

    public init(by: By, direction: SortDirection? = nil) {
        self.by = by
        self.direction = direction
    }
}

public struct Company: Codable {
    /// Example: "12345"
    public var id: String?
    /// Example: "SpaceX"
    public var name: String
    public var interactionCount: Int?
    /// Example: "12345"
    public var ownerID: String?
    /// Example: "https://www.spacex.com/static/images/share.jpg"
    public var image: String?
    /// Example: "Space Exploration Technologies Corp. is an American aerospace manufacturer, space transportation services and communications company headquartered in Hawthorne, California."
    public var description: String?
    /// VAT number
    ///
    /// Example: "BE0689615164"
    public var vatNumber: String?
    /// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
    ///
    /// Example: "USD"
    public var currency: Currency?
    /// Example: "Open"
    public var status: String?
    /// Example: "+12129876543"
    public var fax: String?
    /// Annual revenue
    ///
    /// Example: "+$35m"
    public var annualRevenue: String?
    /// Number of employees
    ///
    /// Example: "500-1000"
    public var numberOfEmployees: String?
    /// Industry
    ///
    /// Example: "Apparel"
    public var industry: String?
    /// Ownership
    ///
    /// Example: "Public"
    public var ownership: String?
    /// Example: "12456EN"
    public var salesTaxNumber: String?
    /// Example: "78932EN"
    public var payeeNumber: String?
    /// An ABN is necessary for operating a business, while a TFN (Tax File Number) is required for any person working in Australia.
    ///
    /// Example: "46 115 614 695"
    public var abnOrTfn: String?
    /// An ABN Branch (also known as a GST Branch) is used if part of your business needs to account for GST separately from its parent entity.
    ///
    /// Example: "123"
    public var abnBranch: String?
    /// The Australian Company Number (ACN) is a nine digit number with the last digit being a check digit calculated using a modified modulus 10 calculation. ASIC has adopted a convention of always printing and displaying the ACN in the format XXX XXX XXX; three blocks of three characters, each block separated by a blank.
    ///
    /// Example: "XXX XXX XXX"
    public var acn: String?
    /// Parent ID
    ///
    /// Example: "22345"
    public var parentID: String?
    public var bankAccounts: [BankAccount]?
    public var websites: [Website]?
    public var addresses: [Address]?
    public var socialLinks: [SocialLink]?
    public var phoneNumbers: [PhoneNumber]?
    public var emails: [Email]?
    public var customFields: [CustomField]?
    /// Example: ["New"]
    public var tags: [String]?
    /// Read-only
    ///
    /// Example: false
    public var isReadOnly: Bool?
    /// Example: "2020-09-30T07:43:32.000Z"
    public var lastActivityAt: Date?
    /// Example: false
    public var isDeleted: Bool?
    /// Example: "12345"
    public var updatedBy: String?
    /// Example: "12345"
    public var createdBy: String?
    /// Example: "2020-09-30T07:43:32.000Z"
    public var updatedAt: Date?
    /// Example: "2020-09-30T07:43:32.000Z"
    public var createdAt: Date?

    public init(id: String? = nil, name: String, interactionCount: Int? = nil, ownerID: String? = nil, image: String? = nil, description: String? = nil, vatNumber: String? = nil, currency: Currency? = nil, status: String? = nil, fax: String? = nil, annualRevenue: String? = nil, numberOfEmployees: String? = nil, industry: String? = nil, ownership: String? = nil, salesTaxNumber: String? = nil, payeeNumber: String? = nil, abnOrTfn: String? = nil, abnBranch: String? = nil, acn: String? = nil, parentID: String? = nil, bankAccounts: [BankAccount]? = nil, websites: [Website]? = nil, addresses: [Address]? = nil, socialLinks: [SocialLink]? = nil, phoneNumbers: [PhoneNumber]? = nil, emails: [Email]? = nil, customFields: [CustomField]? = nil, tags: [String]? = nil, isReadOnly: Bool? = nil, lastActivityAt: Date? = nil, isDeleted: Bool? = nil, updatedBy: String? = nil, createdBy: String? = nil, updatedAt: Date? = nil, createdAt: Date? = nil) {
        self.id = id
        self.name = name
        self.interactionCount = interactionCount
        self.ownerID = ownerID
        self.image = image
        self.description = description
        self.vatNumber = vatNumber
        self.currency = currency
        self.status = status
        self.fax = fax
        self.annualRevenue = annualRevenue
        self.numberOfEmployees = numberOfEmployees
        self.industry = industry
        self.ownership = ownership
        self.salesTaxNumber = salesTaxNumber
        self.payeeNumber = payeeNumber
        self.abnOrTfn = abnOrTfn
        self.abnBranch = abnBranch
        self.acn = acn
        self.parentID = parentID
        self.bankAccounts = bankAccounts
        self.websites = websites
        self.addresses = addresses
        self.socialLinks = socialLinks
        self.phoneNumbers = phoneNumbers
        self.emails = emails
        self.customFields = customFields
        self.tags = tags
        self.isReadOnly = isReadOnly
        self.lastActivityAt = lastActivityAt
        self.isDeleted = isDeleted
        self.updatedBy = updatedBy
        self.createdBy = createdBy
        self.updatedAt = updatedAt
        self.createdAt = createdAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case name
        case interactionCount = "interaction_count"
        case ownerID = "owner_id"
        case image
        case description
        case vatNumber = "vat_number"
        case currency
        case status
        case fax
        case annualRevenue = "annual_revenue"
        case numberOfEmployees = "number_of_employees"
        case industry
        case ownership
        case salesTaxNumber = "sales_tax_number"
        case payeeNumber = "payee_number"
        case abnOrTfn = "abn_or_tfn"
        case abnBranch = "abn_branch"
        case acn
        case parentID = "parent_id"
        case bankAccounts = "bank_accounts"
        case websites
        case addresses
        case socialLinks = "social_links"
        case phoneNumbers = "phone_numbers"
        case emails
        case customFields = "custom_fields"
        case tags
        case isReadOnly = "read_only"
        case lastActivityAt = "last_activity_at"
        case isDeleted = "deleted"
        case updatedBy = "updated_by"
        case createdBy = "created_by"
        case updatedAt = "updated_at"
        case createdAt = "created_at"
    }
}

public struct Contact: Codable {
    /// Example: "12345"
    public var id: String?
    /// Example: "Elon Musk"
    public var name: String
    /// Example: "54321"
    public var ownerID: String?
    /// Example: "personal"
    public var type: `Type`?
    /// Example: "23456"
    public var companyID: String?
    /// Example: "23456"
    public var companyName: String?
    /// Example: "34567"
    public var leadID: String?
    /// Example: "Elon"
    public var firstName: String?
    /// Example: "D."
    public var middleName: String?
    /// Example: "Musk"
    public var lastName: String?
    /// Example: "Mr."
    public var prefix: String?
    /// Example: "PhD"
    public var suffix: String?
    /// Example: "CEO"
    public var title: String?
    /// Example: "Engineering"
    public var department: String?
    /// Language code according to ISO 639-1. For the United States - EN
    ///
    /// Example: "EN"
    public var language: String?
    /// Example: "female"
    public var gender: Gender?
    /// Example: "2000-08-12"
    public var birthday: String?
    /// Example: "https://unavatar.io/elon-musk"
    public var image: String?
    /// Example: "Cold Call"
    public var leadSource: String?
    /// Example: "+12129876543"
    public var fax: String?
    /// Example: "Internal champion"
    public var description: String?
    /// Example: 10.5
    public var currentBalance: Double?
    /// Example: "open"
    public var status: String?
    /// Example: true
    public var isActive: Bool?
    public var websites: [Website]?
    public var addresses: [Address]?
    public var socialLinks: [SocialLink]?
    public var phoneNumbers: [PhoneNumber]?
    public var emails: [Email]?
    public var customFields: [CustomField]?
    /// Example: ["New"]
    public var tags: [String]?
    /// Example: "2020-09-30T07:43:32.000Z"
    public var firstCallAt: Date?
    /// Example: "2020-09-30T07:43:32.000Z"
    public var firstEmailAt: Date?
    /// Example: "2020-09-30T07:43:32.000Z"
    public var lastActivityAt: Date?
    /// Example: "2017-08-12T20:43:21.291Z"
    public var updatedAt: Date?
    /// Example: "2017-08-12T20:43:21.291Z"
    public var createdAt: Date?

    /// Example: "personal"
    public enum `Type`: String, Codable, CaseIterable {
        case customer
        case supplier
        case employee
        case personal
    }

    /// Example: "female"
    public enum Gender: String, Codable, CaseIterable {
        case male
        case female
        case unisex
    }

    public init(id: String? = nil, name: String, ownerID: String? = nil, type: `Type`? = nil, companyID: String? = nil, companyName: String? = nil, leadID: String? = nil, firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, prefix: String? = nil, suffix: String? = nil, title: String? = nil, department: String? = nil, language: String? = nil, gender: Gender? = nil, birthday: String? = nil, image: String? = nil, leadSource: String? = nil, fax: String? = nil, description: String? = nil, currentBalance: Double? = nil, status: String? = nil, isActive: Bool? = nil, websites: [Website]? = nil, addresses: [Address]? = nil, socialLinks: [SocialLink]? = nil, phoneNumbers: [PhoneNumber]? = nil, emails: [Email]? = nil, customFields: [CustomField]? = nil, tags: [String]? = nil, firstCallAt: Date? = nil, firstEmailAt: Date? = nil, lastActivityAt: Date? = nil, updatedAt: Date? = nil, createdAt: Date? = nil) {
        self.id = id
        self.name = name
        self.ownerID = ownerID
        self.type = type
        self.companyID = companyID
        self.companyName = companyName
        self.leadID = leadID
        self.firstName = firstName
        self.middleName = middleName
        self.lastName = lastName
        self.prefix = prefix
        self.suffix = suffix
        self.title = title
        self.department = department
        self.language = language
        self.gender = gender
        self.birthday = birthday
        self.image = image
        self.leadSource = leadSource
        self.fax = fax
        self.description = description
        self.currentBalance = currentBalance
        self.status = status
        self.isActive = isActive
        self.websites = websites
        self.addresses = addresses
        self.socialLinks = socialLinks
        self.phoneNumbers = phoneNumbers
        self.emails = emails
        self.customFields = customFields
        self.tags = tags
        self.firstCallAt = firstCallAt
        self.firstEmailAt = firstEmailAt
        self.lastActivityAt = lastActivityAt
        self.updatedAt = updatedAt
        self.createdAt = createdAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case name
        case ownerID = "owner_id"
        case type
        case companyID = "company_id"
        case companyName = "company_name"
        case leadID = "lead_id"
        case firstName = "first_name"
        case middleName = "middle_name"
        case lastName = "last_name"
        case prefix
        case suffix
        case title
        case department
        case language
        case gender
        case birthday
        case image
        case leadSource = "lead_source"
        case fax
        case description
        case currentBalance = "current_balance"
        case status
        case isActive = "active"
        case websites
        case addresses
        case socialLinks = "social_links"
        case phoneNumbers = "phone_numbers"
        case emails
        case customFields = "custom_fields"
        case tags
        case firstCallAt = "first_call_at"
        case firstEmailAt = "first_email_at"
        case lastActivityAt = "last_activity_at"
        case updatedAt = "updated_at"
        case createdAt = "created_at"
    }
}

/// Example:
///
/// {
///   "email" : "elon@tesla.com",
///   "first_name" : "Elon",
///   "last_name" : "Musk"
/// }
public struct ContactsFilter: Codable {
    /// Name of the contact to filter on
    ///
    /// Example: "Elon Musk"
    public var name: String?
    /// First name of the contact to filter on
    ///
    /// Example: "Elon"
    public var firstName: String?
    /// Last name of the contact to filter on
    ///
    /// Example: "Musk"
    public var lastName: String?
    /// E-mail of the contact to filter on
    ///
    /// Example: "elon@tesla.com"
    public var email: String?

    public init(name: String? = nil, firstName: String? = nil, lastName: String? = nil, email: String? = nil) {
        self.name = name
        self.firstName = firstName
        self.lastName = lastName
        self.email = email
    }

    private enum CodingKeys: String, CodingKey {
        case name
        case firstName = "first_name"
        case lastName = "last_name"
        case email
    }
}

/// Example:
///
/// {
///   "by" : "created_at",
///   "direction" : "desc"
/// }
public struct ContactsSort: Codable {
    /// The field on which to sort the Contacts
    ///
    /// Example: "created_at"
    public var by: By
    /// The direction in which to sort the results
    public var direction: SortDirection?

    /// The field on which to sort the Contacts
    ///
    /// Example: "created_at"
    public enum By: String, Codable, CaseIterable {
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case name
        case firstName = "first_name"
        case lastName = "last_name"
        case email
    }

    public init(by: By, direction: SortDirection? = nil) {
        self.by = by
        self.direction = direction
    }
}

public struct CreateActivityResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "activities"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    /// UnifiedId
    public var data: UnifiedID

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: UnifiedID) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct CreateCompanyResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "companies"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    /// UnifiedId
    public var data: UnifiedID

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: UnifiedID) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct CreateContactResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "companies"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    /// UnifiedId
    public var data: UnifiedID

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: UnifiedID) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct CreateLeadResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "companies"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    /// UnifiedId
    public var data: UnifiedID

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: UnifiedID) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct CreateNoteResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "notes"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    /// UnifiedId
    public var data: UnifiedID

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: UnifiedID) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct CreateOpportunityResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "opportunities"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    /// UnifiedId
    public var data: UnifiedID

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: UnifiedID) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct CreatePipelineResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "pipelines"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    /// UnifiedId
    public var data: UnifiedID

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: UnifiedID) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct CreateUserResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "users"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    /// UnifiedId
    public var data: UnifiedID

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: UnifiedID) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

/// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
///
/// Example: "USD"
public enum Currency: String, Codable, CaseIterable {
    case unknownCurrency = "UNKNOWN_CURRENCY"
    case aed = "AED"
    case afn = "AFN"
    case all = "ALL"
    case amd = "AMD"
    case ang = "ANG"
    case aoa = "AOA"
    case ars = "ARS"
    case aud = "AUD"
    case awg = "AWG"
    case azn = "AZN"
    case bam = "BAM"
    case bbd = "BBD"
    case bdt = "BDT"
    case bgn = "BGN"
    case bhd = "BHD"
    case bif = "BIF"
    case bmd = "BMD"
    case bnd = "BND"
    case bob = "BOB"
    case bov = "BOV"
    case brl = "BRL"
    case bsd = "BSD"
    case btn = "BTN"
    case bwp = "BWP"
    case byr = "BYR"
    case bzd = "BZD"
    case cad = "CAD"
    case cdf = "CDF"
    case che = "CHE"
    case chf = "CHF"
    case chw = "CHW"
    case clf = "CLF"
    case clp = "CLP"
    case cny = "CNY"
    case cop = "COP"
    case cou = "COU"
    case crc = "CRC"
    case cuc = "CUC"
    case cup = "CUP"
    case cve = "CVE"
    case czk = "CZK"
    case djf = "DJF"
    case dkk = "DKK"
    case dop = "DOP"
    case dzd = "DZD"
    case egp = "EGP"
    case ern = "ERN"
    case etb = "ETB"
    case eur = "EUR"
    case fjd = "FJD"
    case fkp = "FKP"
    case gbp = "GBP"
    case gel = "GEL"
    case ghs = "GHS"
    case gip = "GIP"
    case gmd = "GMD"
    case gnf = "GNF"
    case gtq = "GTQ"
    case gyd = "GYD"
    case hkd = "HKD"
    case hnl = "HNL"
    case hrk = "HRK"
    case htg = "HTG"
    case huf = "HUF"
    case idr = "IDR"
    case ils = "ILS"
    case inr = "INR"
    case iqd = "IQD"
    case irr = "IRR"
    case isk = "ISK"
    case jmd = "JMD"
    case jod = "JOD"
    case jpy = "JPY"
    case kes = "KES"
    case kgs = "KGS"
    case khr = "KHR"
    case kmf = "KMF"
    case kpw = "KPW"
    case krw = "KRW"
    case kwd = "KWD"
    case kyd = "KYD"
    case kzt = "KZT"
    case lak = "LAK"
    case lbp = "LBP"
    case lkr = "LKR"
    case lrd = "LRD"
    case lsl = "LSL"
    case ltl = "LTL"
    case lvl = "LVL"
    case lyd = "LYD"
    case mad = "MAD"
    case mdl = "MDL"
    case mga = "MGA"
    case mkd = "MKD"
    case mmk = "MMK"
    case mnt = "MNT"
    case mop = "MOP"
    case mro = "MRO"
    case mur = "MUR"
    case mvr = "MVR"
    case mwk = "MWK"
    case mxn = "MXN"
    case mxv = "MXV"
    case myr = "MYR"
    case mzn = "MZN"
    case nad = "NAD"
    case ngn = "NGN"
    case nio = "NIO"
    case nok = "NOK"
    case npr = "NPR"
    case nzd = "NZD"
    case omr = "OMR"
    case pab = "PAB"
    case pen = "PEN"
    case pgk = "PGK"
    case php = "PHP"
    case pkr = "PKR"
    case pln = "PLN"
    case pyg = "PYG"
    case qar = "QAR"
    case ron = "RON"
    case rsd = "RSD"
    case rub = "RUB"
    case rwf = "RWF"
    case sar = "SAR"
    case sbd = "SBD"
    case scr = "SCR"
    case sdg = "SDG"
    case sek = "SEK"
    case sgd = "SGD"
    case shp = "SHP"
    case sll = "SLL"
    case sos = "SOS"
    case srd = "SRD"
    case ssp = "SSP"
    case std = "STD"
    case svc = "SVC"
    case syp = "SYP"
    case szl = "SZL"
    case thb = "THB"
    case tjs = "TJS"
    case tmt = "TMT"
    case tnd = "TND"
    case top = "TOP"
    case trc = "TRC"
    case `try` = "TRY"
    case ttd = "TTD"
    case twd = "TWD"
    case tzs = "TZS"
    case uah = "UAH"
    case ugx = "UGX"
    case usd = "USD"
    case usn = "USN"
    case uss = "USS"
    case uyi = "UYI"
    case uyu = "UYU"
    case uzs = "UZS"
    case vef = "VEF"
    case vnd = "VND"
    case vuv = "VUV"
    case wst = "WST"
    case xaf = "XAF"
    case xag = "XAG"
    case xau = "XAU"
    case xba = "XBA"
    case xbb = "XBB"
    case xbc = "XBC"
    case xbd = "XBD"
    case xcd = "XCD"
    case xdr = "XDR"
    case xof = "XOF"
    case xpd = "XPD"
    case xpf = "XPF"
    case xpt = "XPT"
    case xts = "XTS"
    case xxx = "XXX"
    case yer = "YER"
    case zar = "ZAR"
    case zmk = "ZMK"
    case zmw = "ZMW"
    case btc = "BTC"
}

public struct CustomField: Codable {
    /// Example: "2389328923893298"
    public var id: String
    /// Name of the custom field.
    ///
    /// Example: "employee_level"
    public var name: String?
    /// More information about the custom field
    ///
    /// Example: "Employee Level"
    public var description: String?
    public var value: Value?

    public struct Value: Codable {
        /// Example: "Uses Salesforce and Marketo"
        public var string: String?
        /// Example: 10
        public var double: Double?
        /// Example: true
        public var isBool: Bool?
        public var strings: [String]?

        public init(string: String? = nil, double: Double? = nil, isBool: Bool? = nil, strings: [String]? = nil) {
            self.string = string
            self.double = double
            self.isBool = isBool
            self.strings = strings
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.double = try? container.decode(Double.self)
            self.isBool = try? container.decode(Bool.self)
            self.strings = try? container.decode([String].self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = double { try container.encode(value) }
            if let value = isBool { try container.encode(value) }
            if let value = strings { try container.encode(value) }
        }
    }

    public init(id: String, name: String? = nil, description: String? = nil, value: Value? = nil) {
        self.id = id
        self.name = name
        self.description = description
        self.value = value
    }
}

public struct DeleteActivityResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "activities"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    /// UnifiedId
    public var data: UnifiedID

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: UnifiedID) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct DeleteCompanyResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "companies"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    /// UnifiedId
    public var data: UnifiedID

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: UnifiedID) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct DeleteContactResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "companies"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    /// UnifiedId
    public var data: UnifiedID

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: UnifiedID) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct DeleteLeadResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "companies"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    /// UnifiedId
    public var data: UnifiedID

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: UnifiedID) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct DeleteNoteResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "notes"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    /// UnifiedId
    public var data: UnifiedID

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: UnifiedID) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct DeleteOpportunityResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "companies"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    /// UnifiedId
    public var data: UnifiedID

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: UnifiedID) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct DeletePipelineResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "companies"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    /// UnifiedId
    public var data: UnifiedID

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: UnifiedID) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct DeleteUserResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "users"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    /// UnifiedId
    public var data: UnifiedID

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: UnifiedID) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct Email: Codable {
    /// Example: "123"
    public var id: String?
    /// Example: "elon@musk.com"
    public var email: String
    /// Example: "primary"
    public var type: `Type`?

    /// Example: "primary"
    public enum `Type`: String, Codable, CaseIterable {
        case primary
        case secondary
        case work
        case personal
        case billing
        case other
    }

    public init(id: String? = nil, email: String, type: `Type`? = nil) {
        self.id = id
        self.email = email
        self.type = type
    }
}

/// Example: "crm.company.created"
public enum EventType: String, Codable, CaseIterable {
    case asterisk = "*"
    case crmActivityCreated = "crm.activity.created"
    case crmActivityUpdated = "crm.activity.updated"
    case crmActivityDeleted = "crm.activity.deleted"
    case crmCompanyCreated = "crm.company.created"
    case crmCompanyUpdated = "crm.company.updated"
    case crmCompanyDeleted = "crm.company.deleted"
    case crmContactCreated = "crm.contact.created"
    case crmContactUpdated = "crm.contact.updated"
    case crmContactDeleted = "crm.contact.deleted"
    case crmLeadCreated = "crm.lead.created"
    case crmLeadUpdated = "crm.lead.updated"
    case crmLeadDeleted = "crm.lead.deleted"
    case crmNoteCreated = "crm.note.created"
    case crmNoteUpdated = "crm.note.updated"
    case crmNoteDeleted = "crm.note.deleted"
    case crmOpportunityCreated = "crm.opportunity.created"
    case crmOpportunityUpdated = "crm.opportunity.updated"
    case crmOpportunityDeleted = "crm.opportunity.deleted"
}

public struct GetActivitiesResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "activities"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    public var data: [Activity]
    /// Response metadata
    public var meta: Meta?
    /// Links to navigate to previous or next pages through the API
    public var links: Links?

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: [Activity], meta: Meta? = nil, links: Links? = nil) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
        self.meta = meta
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
        case meta
        case links
    }
}

public struct GetActivityResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "activities"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    public var data: Activity

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: Activity) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct GetCompaniesResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "companies"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    public var data: [Company]
    /// Response metadata
    public var meta: Meta?
    /// Links to navigate to previous or next pages through the API
    public var links: Links?

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: [Company], meta: Meta? = nil, links: Links? = nil) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
        self.meta = meta
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
        case meta
        case links
    }
}

public struct GetCompanyResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "companies"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    public var data: Company

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: Company) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct GetContactResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "companies"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    public var data: Contact

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: Contact) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct GetContactsResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "companies"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    public var data: [Contact]
    /// Response metadata
    public var meta: Meta?
    /// Links to navigate to previous or next pages through the API
    public var links: Links?

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: [Contact], meta: Meta? = nil, links: Links? = nil) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
        self.meta = meta
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
        case meta
        case links
    }
}

public struct GetLeadResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "companies"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    public var data: Lead

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: Lead) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct GetLeadsResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "companies"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    public var data: [Lead]
    /// Response metadata
    public var meta: Meta?
    /// Links to navigate to previous or next pages through the API
    public var links: Links?

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: [Lead], meta: Meta? = nil, links: Links? = nil) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
        self.meta = meta
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
        case meta
        case links
    }
}

public struct GetNoteResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "notes"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    public var data: Note

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: Note) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct GetNotesResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "notes"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    public var data: [Note]
    /// Response metadata
    public var meta: Meta?
    /// Links to navigate to previous or next pages through the API
    public var links: Links?

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: [Note], meta: Meta? = nil, links: Links? = nil) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
        self.meta = meta
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
        case meta
        case links
    }
}

public struct GetOpportunitiesResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "opportunities"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    public var data: [Opportunity]
    /// Response metadata
    public var meta: Meta?
    /// Links to navigate to previous or next pages through the API
    public var links: Links?

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: [Opportunity], meta: Meta? = nil, links: Links? = nil) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
        self.meta = meta
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
        case meta
        case links
    }
}

public struct GetOpportunityResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "opportunities"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    public var data: Opportunity

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: Opportunity) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct GetPipelineResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "pipelines"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    public var data: Pipeline

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: Pipeline) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct GetPipelinesResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "pipelines"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    public var data: [Pipeline]
    /// Response metadata
    public var meta: Meta?
    /// Links to navigate to previous or next pages through the API
    public var links: Links?

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: [Pipeline], meta: Meta? = nil, links: Links? = nil) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
        self.meta = meta
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
        case meta
        case links
    }
}

public struct GetUserResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "companies"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    public var data: User

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: User) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct GetUsersResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "users"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    public var data: [User]
    /// Response metadata
    public var meta: Meta?
    /// Links to navigate to previous or next pages through the API
    public var links: Links?

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: [User], meta: Meta? = nil, links: Links? = nil) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
        self.meta = meta
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
        case meta
        case links
    }
}

public struct Lead: Codable {
    /// Example: "12345"
    public var id: String?
    /// Example: "Elon Musk"
    public var name: String
    /// Example: "Spacex"
    public var companyName: String?
    /// Example: "54321"
    public var ownerID: String?
    /// Example: "2"
    public var companyID: String?
    /// Example: "2"
    public var contactID: String?
    /// Example: "Cold Call"
    public var leadSource: String?
    /// Example: "Elon"
    public var firstName: String?
    /// Example: "Musk"
    public var lastName: String?
    /// Example: "A thinker"
    public var description: String?
    /// Example: "Sir"
    public var prefix: String?
    /// Example: "CEO"
    public var title: String?
    /// Language code according to ISO 639-1. For the United States - EN
    ///
    /// Example: "EN"
    public var language: String?
    /// Example: "New"
    public var status: String?
    /// Example: 75000
    public var monetaryAmount: Double?
    /// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
    ///
    /// Example: "USD"
    public var currency: Currency?
    /// Example: "+12129876543"
    public var fax: String?
    public var websites: [Website]?
    public var addresses: [Address]?
    public var socialLinks: [SocialLink]?
    public var phoneNumbers: [PhoneNumber]?
    public var emails: [Email]?
    public var customFields: [CustomField]?
    /// Example: ["New"]
    public var tags: [String]?
    /// Example: "2020-09-30T07:43:32.000Z"
    public var updatedAt: String?
    /// Example: "2020-09-30T07:43:32.000Z"
    public var createdAt: String?

    public init(id: String? = nil, name: String, companyName: String? = nil, ownerID: String? = nil, companyID: String? = nil, contactID: String? = nil, leadSource: String? = nil, firstName: String? = nil, lastName: String? = nil, description: String? = nil, prefix: String? = nil, title: String? = nil, language: String? = nil, status: String? = nil, monetaryAmount: Double? = nil, currency: Currency? = nil, fax: String? = nil, websites: [Website]? = nil, addresses: [Address]? = nil, socialLinks: [SocialLink]? = nil, phoneNumbers: [PhoneNumber]? = nil, emails: [Email]? = nil, customFields: [CustomField]? = nil, tags: [String]? = nil, updatedAt: String? = nil, createdAt: String? = nil) {
        self.id = id
        self.name = name
        self.companyName = companyName
        self.ownerID = ownerID
        self.companyID = companyID
        self.contactID = contactID
        self.leadSource = leadSource
        self.firstName = firstName
        self.lastName = lastName
        self.description = description
        self.prefix = prefix
        self.title = title
        self.language = language
        self.status = status
        self.monetaryAmount = monetaryAmount
        self.currency = currency
        self.fax = fax
        self.websites = websites
        self.addresses = addresses
        self.socialLinks = socialLinks
        self.phoneNumbers = phoneNumbers
        self.emails = emails
        self.customFields = customFields
        self.tags = tags
        self.updatedAt = updatedAt
        self.createdAt = createdAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case name
        case companyName = "company_name"
        case ownerID = "owner_id"
        case companyID = "company_id"
        case contactID = "contact_id"
        case leadSource = "lead_source"
        case firstName = "first_name"
        case lastName = "last_name"
        case description
        case prefix
        case title
        case language
        case status
        case monetaryAmount = "monetary_amount"
        case currency
        case fax
        case websites
        case addresses
        case socialLinks = "social_links"
        case phoneNumbers = "phone_numbers"
        case emails
        case customFields = "custom_fields"
        case tags
        case updatedAt = "updated_at"
        case createdAt = "created_at"
    }
}

/// Example:
///
/// {
///   "email" : "elon@tesla.com",
///   "first_name" : "Elon",
///   "last_name" : "Musk"
/// }
public struct LeadsFilter: Codable {
    /// Name of the lead to filter on
    ///
    /// Example: "Elon Musk"
    public var name: String?
    /// First name of the lead to filter on
    ///
    /// Example: "Elon"
    public var firstName: String?
    /// Last name of the lead to filter on
    ///
    /// Example: "Musk"
    public var lastName: String?
    /// E-mail of the lead to filter on
    ///
    /// Example: "elon@tesla.com"
    public var email: String?

    public init(name: String? = nil, firstName: String? = nil, lastName: String? = nil, email: String? = nil) {
        self.name = name
        self.firstName = firstName
        self.lastName = lastName
        self.email = email
    }

    private enum CodingKeys: String, CodingKey {
        case name
        case firstName = "first_name"
        case lastName = "last_name"
        case email
    }
}

/// Example:
///
/// {
///   "by" : "created_at",
///   "direction" : "desc"
/// }
public struct LeadsSort: Codable {
    /// The field on which to sort the Leads
    ///
    /// Example: "created_at"
    public var by: By
    /// The direction in which to sort the results
    public var direction: SortDirection?

    /// The field on which to sort the Leads
    ///
    /// Example: "created_at"
    public enum By: String, Codable, CaseIterable {
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case name
        case firstName = "first_name"
        case lastName = "last_name"
        case email
    }

    public init(by: By, direction: SortDirection? = nil) {
        self.by = by
        self.direction = direction
    }
}

/// Links to navigate to previous or next pages through the API
public struct Links: Codable {
    /// Link to navigate to the previous page through the API
    ///
    /// Example: "https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D"
    public var previous: String?
    /// Link to navigate to the current page through the API
    ///
    /// Example: "https://unify.apideck.com/crm/companies"
    public var current: String?
    /// Link to navigate to the previous page through the API
    ///
    /// Example: "https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM"
    public var next: String?

    public init(previous: String? = nil, current: String? = nil, next: String? = nil) {
        self.previous = previous
        self.current = current
        self.next = next
    }
}

/// Response metadata
public struct Meta: Codable {
    /// Number of items returned in the data property of the response
    ///
    /// Example: 50
    public var itemsOnPage: Int?
    /// Cursors to navigate to previous or next pages through the API
    public var cursors: Cursors?

    /// Cursors to navigate to previous or next pages through the API
    public struct Cursors: Codable {
        /// Cursor to navigate to the previous page of results through the API
        ///
        /// Example: "em9oby1jcm06OnBhZ2U6OjE="
        public var previous: String?
        /// Cursor to navigate to the current page of results through the API
        ///
        /// Example: "em9oby1jcm06OnBhZ2U6OjI="
        public var current: String?
        /// Cursor to navigate to the next page of results through the API
        ///
        /// Example: "em9oby1jcm06OnBhZ2U6OjM="
        public var next: String?

        public init(previous: String? = nil, current: String? = nil, next: String? = nil) {
            self.previous = previous
            self.current = current
            self.next = next
        }
    }

    public init(itemsOnPage: Int? = nil, cursors: Cursors? = nil) {
        self.itemsOnPage = itemsOnPage
        self.cursors = cursors
    }

    private enum CodingKeys: String, CodingKey {
        case itemsOnPage = "items_on_page"
        case cursors
    }
}

public struct NotFoundResponse: Codable {
    /// HTTP status code
    ///
    /// Example: 404
    public var statusCode: Double?
    /// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
    ///
    /// Example: "Not Found"
    public var error: String?
    /// The type of error returned
    ///
    /// Example: "EntityNotFoundError"
    public var typeName: String?
    /// A human-readable message providing more details about the error.
    ///
    /// Example: "Unknown Widget"
    public var message: String?
    /// Contains parameter or domain specific information related to the error and why it occurred.
    public var detail: Detail?
    /// Link to documentation of error type
    ///
    /// Example: "https://developers.apideck.com/errors#entitynotfounderror"
    public var ref: String?

    /// Contains parameter or domain specific information related to the error and why it occurred.
    public struct Detail: Codable {
        /// Example: "Could not find widget with id: '123'"
        public var string: String?
        /// Example:
        ///
        /// {
        ///   "not_found" : {
        ///     "entity" : "widget",
        ///     "id" : "123"
        ///   }
        /// }
        public var object: [String: AnyJSON]?

        public init(string: String? = nil, object: [String: AnyJSON]? = nil) {
            self.string = string
            self.object = object
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.object = try? container.decode([String: AnyJSON].self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = object { try container.encode(value) }
        }
    }

    public init(statusCode: Double? = nil, error: String? = nil, typeName: String? = nil, message: String? = nil, detail: Detail? = nil, ref: String? = nil) {
        self.statusCode = statusCode
        self.error = error
        self.typeName = typeName
        self.message = message
        self.detail = detail
        self.ref = ref
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case error
        case typeName = "type_name"
        case message
        case detail
        case ref
    }
}

public struct NotImplementedResponse: Codable {
    /// HTTP status code
    ///
    /// Example: 501
    public var statusCode: Double?
    /// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
    ///
    /// Example: "Not Implemented"
    public var error: String?
    /// The type of error returned
    ///
    /// Example: "MappingError"
    public var typeName: String?
    /// A human-readable message providing more details about the error.
    ///
    /// Example: "Unmapped Attribute"
    public var message: String?
    /// Contains parameter or domain specific information related to the error and why it occurred.
    public var detail: Detail?
    /// Link to documentation of error type
    ///
    /// Example: "https://developers.apideck.com/errors#mappingerror"
    public var ref: String?

    /// Contains parameter or domain specific information related to the error and why it occurred.
    public struct Detail: Codable {
        /// Example: "Failed to retrieve Widget tokenUrl from 'components.securitySchemes.oauth2.flows'"
        public var string: String?
        public var object: [String: AnyJSON]?

        public init(string: String? = nil, object: [String: AnyJSON]? = nil) {
            self.string = string
            self.object = object
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.object = try? container.decode([String: AnyJSON].self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = object { try container.encode(value) }
        }
    }

    public init(statusCode: Double? = nil, error: String? = nil, typeName: String? = nil, message: String? = nil, detail: Detail? = nil, ref: String? = nil) {
        self.statusCode = statusCode
        self.error = error
        self.typeName = typeName
        self.message = message
        self.detail = detail
        self.ref = ref
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case error
        case typeName = "type_name"
        case message
        case detail
        case ref
    }
}

public struct Note: Codable {
    /// Example: "12345"
    public var id: String?
    /// Example: "Meeting Notes"
    public var title: String?
    /// Example: "Office hours are 9AM-6PM"
    public var content: String?
    /// Example: "12345"
    public var ownerID: String?
    /// Example: "12345"
    public var contactID: String?
    /// Example: "12345"
    public var companyID: String?
    /// Example: "12345"
    public var opportunityID: String?
    /// Example: "12345"
    public var leadID: String?
    /// Example: true
    public var isActive: Bool?
    /// Example: "12345"
    public var updatedBy: String?
    /// Example: "12345"
    public var createdBy: String?
    /// Example: "2020-09-30T07:43:32.000Z"
    public var updatedAt: String?
    /// Example: "2020-09-30T07:43:32.000Z"
    public var createdAt: String?

    public init(id: String? = nil, title: String? = nil, content: String? = nil, ownerID: String? = nil, contactID: String? = nil, companyID: String? = nil, opportunityID: String? = nil, leadID: String? = nil, isActive: Bool? = nil, updatedBy: String? = nil, createdBy: String? = nil, updatedAt: String? = nil, createdAt: String? = nil) {
        self.id = id
        self.title = title
        self.content = content
        self.ownerID = ownerID
        self.contactID = contactID
        self.companyID = companyID
        self.opportunityID = opportunityID
        self.leadID = leadID
        self.isActive = isActive
        self.updatedBy = updatedBy
        self.createdBy = createdBy
        self.updatedAt = updatedAt
        self.createdAt = createdAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case title
        case content
        case ownerID = "owner_id"
        case contactID = "contact_id"
        case companyID = "company_id"
        case opportunityID = "opportunity_id"
        case leadID = "lead_id"
        case isActive = "active"
        case updatedBy = "updated_by"
        case createdBy = "created_by"
        case updatedAt = "updated_at"
        case createdAt = "created_at"
    }
}

/// Example:
///
/// {
///   "monetary_amount" : 75000,
///   "status" : "Completed"
/// }
public struct OpportunitiesFilter: Codable {
    /// Title of the opportunity to filter on
    ///
    /// Example: "Tesla deal"
    public var title: String?
    /// Status to filter on
    ///
    /// Example: "Completed"
    public var status: String?
    /// Monetary amount to filter on
    ///
    /// Example: 75000
    public var monetaryAmount: Double?
    /// Win probability to filter on
    ///
    /// Example: 50
    public var winProbability: Double?

    public init(title: String? = nil, status: String? = nil, monetaryAmount: Double? = nil, winProbability: Double? = nil) {
        self.title = title
        self.status = status
        self.monetaryAmount = monetaryAmount
        self.winProbability = winProbability
    }

    private enum CodingKeys: String, CodingKey {
        case title
        case status
        case monetaryAmount = "monetary_amount"
        case winProbability = "win_probability"
    }
}

/// Example:
///
/// {
///   "by" : "created_at",
///   "direction" : "desc"
/// }
public struct OpportunitiesSort: Codable {
    /// The field on which to sort the Opportunities
    ///
    /// Example: "created_at"
    public var by: By
    /// The direction in which to sort the results
    public var direction: SortDirection?

    /// The field on which to sort the Opportunities
    ///
    /// Example: "created_at"
    public enum By: String, Codable, CaseIterable {
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case title
        case winProbability = "win_probability"
        case monetaryAmount = "monetary_amount"
        case status
    }

    public init(by: By, direction: SortDirection? = nil) {
        self.by = by
        self.direction = direction
    }
}

public struct Opportunity: Codable {
    /// Example: "12345"
    public var id: String?
    /// Example: "New Rocket"
    public var title: String
    /// Example: "12345"
    public var primaryContactID: String?
    /// Example: "Opportunities are created for People and Companies that are interested in buying your products or services. Create Opportunities for People and Companies to move them through one of your Pipelines."
    public var description: String?
    /// Example: "Existing Customer - Upgrade"
    public var type: String?
    /// Example: 75000
    public var monetaryAmount: Double?
    /// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
    ///
    /// Example: "USD"
    public var currency: Currency?
    /// Example: 40
    public var winProbability: Double?
    /// Expected Revenue
    ///
    /// Example: 75000
    public var expectedRevenue: Double?
    /// Example: "2020-10-30"
    public var closeDate: NaiveDate?
    /// Example: "12345"
    public var lossReasonID: String?
    /// Example: "No budget"
    public var lossReason: String?
    /// Example: "12345"
    public var wonReasonID: String?
    /// Example: "Best pitch"
    public var wonReason: String?
    /// Example: "12345"
    public var pipelineID: String?
    /// Example: "12345"
    public var pipelineStageID: String?
    /// Example: "12345"
    public var sourceID: String?
    /// Example: "12345"
    public var leadID: String?
    /// Lead source
    ///
    /// Example: "Website"
    public var leadSource: String?
    /// Example: "12345"
    public var contactID: String?
    /// Example: "12345"
    public var companyID: String?
    /// Example: "Copper"
    public var companyName: String?
    /// Example: "12345"
    public var ownerID: String?
    /// Example: "None"
    public var priority: String?
    /// Example: "Open"
    public var status: String?
    /// Example: "12345"
    public var statusID: String?
    /// Example: ["New"]
    public var tags: [String]?
    public var interactionCount: Double?
    public var customFields: [CustomField]?
    /// Example: "2020-09-30T07:43:32.000Z"
    public var stageLastChangedAt: Date?
    /// Example: "2020-09-30T07:43:32.000Z"
    public var lastActivityAt: String?
    /// Example: false
    public var isDeleted: Bool?
    /// Example: "2020-09-30T00:00:00.000Z"
    public var dateStageChanged: Date?
    /// Example: "2020-09-30T00:00:00.000Z"
    public var dateLastContacted: Date?
    /// Example: "2020-09-30T00:00:00.000Z"
    public var dateLeadCreated: Date?
    /// Example: "12345"
    public var updatedBy: String?
    /// Example: "12345"
    public var createdBy: String?
    /// Example: "2020-09-30T07:43:32.000Z"
    public var updatedAt: Date?
    /// Example: "2020-09-30T07:43:32.000Z"
    public var createdAt: Date?

    public init(id: String? = nil, title: String, primaryContactID: String? = nil, description: String? = nil, type: String? = nil, monetaryAmount: Double? = nil, currency: Currency? = nil, winProbability: Double? = nil, expectedRevenue: Double? = nil, closeDate: NaiveDate? = nil, lossReasonID: String? = nil, lossReason: String? = nil, wonReasonID: String? = nil, wonReason: String? = nil, pipelineID: String? = nil, pipelineStageID: String? = nil, sourceID: String? = nil, leadID: String? = nil, leadSource: String? = nil, contactID: String? = nil, companyID: String? = nil, companyName: String? = nil, ownerID: String? = nil, priority: String? = nil, status: String? = nil, statusID: String? = nil, tags: [String]? = nil, interactionCount: Double? = nil, customFields: [CustomField]? = nil, stageLastChangedAt: Date? = nil, lastActivityAt: String? = nil, isDeleted: Bool? = nil, dateStageChanged: Date? = nil, dateLastContacted: Date? = nil, dateLeadCreated: Date? = nil, updatedBy: String? = nil, createdBy: String? = nil, updatedAt: Date? = nil, createdAt: Date? = nil) {
        self.id = id
        self.title = title
        self.primaryContactID = primaryContactID
        self.description = description
        self.type = type
        self.monetaryAmount = monetaryAmount
        self.currency = currency
        self.winProbability = winProbability
        self.expectedRevenue = expectedRevenue
        self.closeDate = closeDate
        self.lossReasonID = lossReasonID
        self.lossReason = lossReason
        self.wonReasonID = wonReasonID
        self.wonReason = wonReason
        self.pipelineID = pipelineID
        self.pipelineStageID = pipelineStageID
        self.sourceID = sourceID
        self.leadID = leadID
        self.leadSource = leadSource
        self.contactID = contactID
        self.companyID = companyID
        self.companyName = companyName
        self.ownerID = ownerID
        self.priority = priority
        self.status = status
        self.statusID = statusID
        self.tags = tags
        self.interactionCount = interactionCount
        self.customFields = customFields
        self.stageLastChangedAt = stageLastChangedAt
        self.lastActivityAt = lastActivityAt
        self.isDeleted = isDeleted
        self.dateStageChanged = dateStageChanged
        self.dateLastContacted = dateLastContacted
        self.dateLeadCreated = dateLeadCreated
        self.updatedBy = updatedBy
        self.createdBy = createdBy
        self.updatedAt = updatedAt
        self.createdAt = createdAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case title
        case primaryContactID = "primary_contact_id"
        case description
        case type
        case monetaryAmount = "monetary_amount"
        case currency
        case winProbability = "win_probability"
        case expectedRevenue = "expected_revenue"
        case closeDate = "close_date"
        case lossReasonID = "loss_reason_id"
        case lossReason = "loss_reason"
        case wonReasonID = "won_reason_id"
        case wonReason = "won_reason"
        case pipelineID = "pipeline_id"
        case pipelineStageID = "pipeline_stage_id"
        case sourceID = "source_id"
        case leadID = "lead_id"
        case leadSource = "lead_source"
        case contactID = "contact_id"
        case companyID = "company_id"
        case companyName = "company_name"
        case ownerID = "owner_id"
        case priority
        case status
        case statusID = "status_id"
        case tags
        case interactionCount = "interaction_count"
        case customFields = "custom_fields"
        case stageLastChangedAt = "stage_last_changed_at"
        case lastActivityAt = "last_activity_at"
        case isDeleted = "deleted"
        case dateStageChanged = "date_stage_changed"
        case dateLastContacted = "date_last_contacted"
        case dateLeadCreated = "date_lead_created"
        case updatedBy = "updated_by"
        case createdBy = "created_by"
        case updatedAt = "updated_at"
        case createdAt = "created_at"
    }
}

public struct PaymentRequiredResponse: Codable {
    /// HTTP status code
    ///
    /// Example: 402
    public var statusCode: Double?
    /// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
    ///
    /// Example: "Payment Required"
    public var error: String?
    /// The type of error returned
    ///
    /// Example: "RequestLimitError"
    public var typeName: String?
    /// A human-readable message providing more details about the error.
    ///
    /// Example: "Request Limit Reached"
    public var message: String?
    /// Contains parameter or domain specific information related to the error and why it occurred.
    ///
    /// Example: "You have reached your limit of 2000"
    public var detail: String?
    /// Link to documentation of error type
    ///
    /// Example: "https://developers.apideck.com/errors#requestlimiterror"
    public var ref: String?

    public init(statusCode: Double? = nil, error: String? = nil, typeName: String? = nil, message: String? = nil, detail: String? = nil, ref: String? = nil) {
        self.statusCode = statusCode
        self.error = error
        self.typeName = typeName
        self.message = message
        self.detail = detail
        self.ref = ref
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case error
        case typeName = "type_name"
        case message
        case detail
        case ref
    }
}

public struct PhoneNumber: Codable {
    /// Example: "12345"
    public var id: String?
    /// Example: "1"
    public var countryCode: String?
    /// Example: "323"
    public var areaCode: String?
    /// Phone number
    ///
    /// Example: "111-111-1111"
    public var number: String
    /// Phone extension
    ///
    /// Example: "105"
    public var `extension`: String?
    /// Example: "primary"
    public var type: `Type`?

    /// Example: "primary"
    public enum `Type`: String, Codable, CaseIterable {
        case primary
        case secondary
        case home
        case work
        case office
        case mobile
        case assistant
        case fax
        case directDialIn = "direct-dial-in"
        case personal
        case other
    }

    public init(id: String? = nil, countryCode: String? = nil, areaCode: String? = nil, number: String, `extension`: String? = nil, type: `Type`? = nil) {
        self.id = id
        self.countryCode = countryCode
        self.areaCode = areaCode
        self.number = number
        self.extension = `extension`
        self.type = type
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case countryCode = "country_code"
        case areaCode = "area_code"
        case number
        case `extension` = "extension"
        case type
    }
}

public struct Pipeline: Codable {
    /// Example: "default"
    public var id: String?
    /// Example: "Sales Pipeline"
    public var name: String
    /// Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
    ///
    /// Example: "USD"
    public var currency: Currency?
    /// Example: false
    public var isArchived: Bool?
    public var displayOrder: Int?
    public var stages: [Stage]?
    /// Example: "2017-08-12T20:43:21.291Z"
    public var updatedAt: String?
    /// Example: "2017-08-12T20:43:21.291Z"
    public var createdAt: String?

    public struct Stage: Codable {
        /// Example: "contractsent"
        public var id: String?
        /// Example: "Contract Sent"
        public var name: String?
        /// Example: "CONTRACT_SENT"
        public var value: String?
        public var displayOrder: Int?

        public init(id: String? = nil, name: String? = nil, value: String? = nil, displayOrder: Int? = nil) {
            self.id = id
            self.name = name
            self.value = value
            self.displayOrder = displayOrder
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case name
            case value
            case displayOrder = "display_order"
        }
    }

    public init(id: String? = nil, name: String, currency: Currency? = nil, isArchived: Bool? = nil, displayOrder: Int? = nil, stages: [Stage]? = nil, updatedAt: String? = nil, createdAt: String? = nil) {
        self.id = id
        self.name = name
        self.currency = currency
        self.isArchived = isArchived
        self.displayOrder = displayOrder
        self.stages = stages
        self.updatedAt = updatedAt
        self.createdAt = createdAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case name
        case currency
        case isArchived = "archived"
        case displayOrder = "display_order"
        case stages
        case updatedAt = "updated_at"
        case createdAt = "created_at"
    }
}

public struct SocialLink: Codable {
    /// Example: "12345"
    public var id: String?
    /// Example: "https://www.twitter.com/apideck-io"
    public var url: String
    /// Example: "twitter"
    public var type: String?

    public init(id: String? = nil, url: String, type: String? = nil) {
        self.id = id
        self.url = url
        self.type = type
    }
}

/// The direction in which to sort the results
public enum SortDirection: String, Codable, CaseIterable {
    case asc
    case desc
}

public struct UnauthorizedResponse: Codable {
    /// HTTP status code
    ///
    /// Example: 401
    public var statusCode: Double?
    /// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
    ///
    /// Example: "Unauthorized"
    public var error: String?
    /// The type of error returned
    ///
    /// Example: "UnauthorizedError"
    public var typeName: String?
    /// A human-readable message providing more details about the error.
    ///
    /// Example: "Unauthorized Request"
    public var message: String?
    /// Contains parameter or domain specific information related to the error and why it occurred.
    ///
    /// Example: "Failed to generate valid JWT Session. Verify applicationId is correct"
    public var detail: String?
    /// Link to documentation of error type
    ///
    /// Example: "https://developers.apideck.com/errors#unauthorizederror"
    public var ref: String?

    public init(statusCode: Double? = nil, error: String? = nil, typeName: String? = nil, message: String? = nil, detail: String? = nil, ref: String? = nil) {
        self.statusCode = statusCode
        self.error = error
        self.typeName = typeName
        self.message = message
        self.detail = detail
        self.ref = ref
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case error
        case typeName = "type_name"
        case message
        case detail
        case ref
    }
}

public struct UnexpectedErrorResponse: Codable {
    /// HTTP status code
    ///
    /// Example: 400
    public var statusCode: Double?
    /// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
    ///
    /// Example: "Bad Request"
    public var error: String?
    /// The type of error returned
    ///
    /// Example: "RequestHeadersValidationError"
    public var typeName: String?
    /// A human-readable message providing more details about the error.
    ///
    /// Example: "Invalid Params"
    public var message: String?
    /// Contains parameter or domain specific information related to the error and why it occurred.
    public var detail: Detail?
    /// Link to documentation of error type
    ///
    /// Example: "https://developers.apideck.com/errors#unauthorizederror"
    public var ref: String?

    /// Contains parameter or domain specific information related to the error and why it occurred.
    public struct Detail: Codable {
        /// Example: "Missing Header: x-apideck-consumer-id"
        public var string: String?
        /// Example:
        ///
        /// {
        ///   "missing" : [
        ///     {
        ///       "x-apideck-consumer-id" : "required"
        ///     }
        ///   ]
        /// }
        public var object: [String: AnyJSON]?

        public init(string: String? = nil, object: [String: AnyJSON]? = nil) {
            self.string = string
            self.object = object
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            self.string = try? container.decode(String.self)
            self.object = try? container.decode([String: AnyJSON].self)
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            if let value = string { try container.encode(value) }
            if let value = object { try container.encode(value) }
        }
    }

    public init(statusCode: Double? = nil, error: String? = nil, typeName: String? = nil, message: String? = nil, detail: Detail? = nil, ref: String? = nil) {
        self.statusCode = statusCode
        self.error = error
        self.typeName = typeName
        self.message = message
        self.detail = detail
        self.ref = ref
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case error
        case typeName = "type_name"
        case message
        case detail
        case ref
    }
}

public struct UnifiedID: Codable {
    /// Example: "12345"
    public var id: String

    public init(id: String) {
        self.id = id
    }
}

public struct UnprocessableResponse: Codable {
    /// HTTP status code
    ///
    /// Example: 422
    public var statusCode: Double?
    /// Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)
    ///
    /// Example: "Unprocessable Entity"
    public var error: String?
    /// The type of error returned
    ///
    /// Example: "InvalidStateError"
    public var typeName: String?
    /// A human-readable message providing more details about the error.
    ///
    /// Example: "Invalid State"
    public var message: String?
    /// Contains parameter or domain specific information related to the error and why it occurred.
    ///
    /// Example: "State did not include unified_api"
    public var detail: String?
    /// Link to documentation of error type
    ///
    /// Example: "https://developers.apideck.com/errors#invalidstateerror"
    public var ref: String?

    public init(statusCode: Double? = nil, error: String? = nil, typeName: String? = nil, message: String? = nil, detail: String? = nil, ref: String? = nil) {
        self.statusCode = statusCode
        self.error = error
        self.typeName = typeName
        self.message = message
        self.detail = detail
        self.ref = ref
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case error
        case typeName = "type_name"
        case message
        case detail
        case ref
    }
}

public struct UpdateActivityResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "activities"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    /// UnifiedId
    public var data: UnifiedID

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: UnifiedID) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct UpdateCompanyResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "companies"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    /// UnifiedId
    public var data: UnifiedID

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: UnifiedID) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct UpdateContactResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "companies"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    /// UnifiedId
    public var data: UnifiedID

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: UnifiedID) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct UpdateLeadResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "companies"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    /// UnifiedId
    public var data: UnifiedID

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: UnifiedID) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct UpdateNoteResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "notes"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    /// UnifiedId
    public var data: UnifiedID

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: UnifiedID) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct UpdateOpportunityResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "companies"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    /// UnifiedId
    public var data: UnifiedID

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: UnifiedID) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct UpdatePipelineResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "pipelines"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    /// UnifiedId
    public var data: UnifiedID

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: UnifiedID) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct UpdateUserResponse: Codable {
    /// HTTP Response Status Code
    ///
    /// Example: 200
    public var statusCode: Int
    /// HTTP Response Status
    ///
    /// Example: "OK"
    public var status: String
    /// Apideck ID of service provider
    ///
    /// Example: "zoho-crm"
    public var service: String
    /// Unified API resource name
    ///
    /// Example: "companies"
    public var resource: String
    /// Operation performed
    ///
    /// Example: "one"
    public var operation: String
    /// UnifiedId
    public var data: UnifiedID

    public init(statusCode: Int, status: String, service: String, resource: String, operation: String, data: UnifiedID) {
        self.statusCode = statusCode
        self.status = status
        self.service = service
        self.resource = resource
        self.operation = operation
        self.data = data
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case status
        case service
        case resource
        case operation
        case data
    }
}

public struct User: Codable {
    /// Example: "12345"
    public var id: String?
    /// Example: "54321"
    public var parentID: String?
    /// Example: "masterofcoin"
    public var username: String?
    /// Example: "Elon"
    public var firstName: String?
    /// Example: "Musk"
    public var lastName: String?
    /// Job title
    ///
    /// Example: "CEO"
    public var title: String?
    /// The division the user is currently in.
    ///
    /// Example: "Europe"
    public var division: String?
    /// The department the user is currently in.
    ///
    /// Example: "R&D"
    public var department: String?
    /// Example: "SpaceX"
    public var companyName: String?
    /// An Employee Number, Employee ID or Employee Code, is a unique number that has been assigned to each individual staff member within a company.
    ///
    /// Example: "123456-AB"
    public var employeeNumber: String?
    /// Example: "A description"
    public var description: String?
    /// Example: "https://logo.clearbit.com/spacex.com?s=128"
    public var image: String?
    /// Language code according to ISO 639-1. For the United States - EN
    ///
    /// Example: "EN"
    public var language: String?
    /// Example: "active"
    public var status: String?
    /// Example: "supersecretpassword"
    public var password: String?
    public var addresses: [Address]?
    public var phoneNumbers: [PhoneNumber]?
    public var emails: [Email]
    /// Example: "2017-08-12T20:43:21.291Z"
    public var updatedAt: String?
    /// Example: "2017-08-12T20:43:21.291Z"
    public var createdAt: String?

    public init(id: String? = nil, parentID: String? = nil, username: String? = nil, firstName: String? = nil, lastName: String? = nil, title: String? = nil, division: String? = nil, department: String? = nil, companyName: String? = nil, employeeNumber: String? = nil, description: String? = nil, image: String? = nil, language: String? = nil, status: String? = nil, password: String? = nil, addresses: [Address]? = nil, phoneNumbers: [PhoneNumber]? = nil, emails: [Email], updatedAt: String? = nil, createdAt: String? = nil) {
        self.id = id
        self.parentID = parentID
        self.username = username
        self.firstName = firstName
        self.lastName = lastName
        self.title = title
        self.division = division
        self.department = department
        self.companyName = companyName
        self.employeeNumber = employeeNumber
        self.description = description
        self.image = image
        self.language = language
        self.status = status
        self.password = password
        self.addresses = addresses
        self.phoneNumbers = phoneNumbers
        self.emails = emails
        self.updatedAt = updatedAt
        self.createdAt = createdAt
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case parentID = "parent_id"
        case username
        case firstName = "first_name"
        case lastName = "last_name"
        case title
        case division
        case department
        case companyName = "company_name"
        case employeeNumber = "employee_number"
        case description
        case image
        case language
        case status
        case password
        case addresses
        case phoneNumbers = "phone_numbers"
        case emails
        case updatedAt = "updated_at"
        case createdAt = "created_at"
    }
}

public struct WebhookEvent: Codable {
    /// Unique reference to this request event
    ///
    /// Example: "9755c355-56c3-4a2f-a2da-86ff4411fccb"
    public var eventID: String?
    /// Service provider identifier
    ///
    /// Example: "close"
    public var serviceID: String?
    /// The service provider's ID of the entity that triggered this event
    ///
    /// Example: "123456ASDF"
    public var entityID: String?
    /// The type entity that triggered this event
    ///
    /// Example: "Company"
    public var entityType: String?
    /// The url to retrieve entity detail.
    ///
    /// Example: "https://unify.apideck.com/crm/contacts/123456"
    public var entityURL: String?
    /// The current count this request event has been attempted
    public var executionAttempt: Double?
    /// ISO Datetime for when the original event occurred
    ///
    /// Example: "2021-10-01T03:14:55.419Z"
    public var occurredAt: String?
    /// Example: "crm.company.created"
    public var eventType: EventType?

    public init(eventID: String? = nil, serviceID: String? = nil, entityID: String? = nil, entityType: String? = nil, entityURL: String? = nil, executionAttempt: Double? = nil, occurredAt: String? = nil, eventType: EventType? = nil) {
        self.eventID = eventID
        self.serviceID = serviceID
        self.entityID = entityID
        self.entityType = entityType
        self.entityURL = entityURL
        self.executionAttempt = executionAttempt
        self.occurredAt = occurredAt
        self.eventType = eventType
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.eventID = try values.decodeIfPresent(String.self, forKey: "event_id")
        self.serviceID = try values.decodeIfPresent(String.self, forKey: "service_id")
        self.entityID = try values.decodeIfPresent(String.self, forKey: "entity_id")
        self.entityType = try values.decodeIfPresent(String.self, forKey: "entity_type")
        self.entityURL = try values.decodeIfPresent(String.self, forKey: "entity_url")
        self.executionAttempt = try values.decodeIfPresent(Double.self, forKey: "execution_attempt")
        self.occurredAt = try values.decodeIfPresent(String.self, forKey: "occurred_at")
        self.eventType = try EventType(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(eventID, forKey: "event_id")
        try values.encodeIfPresent(serviceID, forKey: "service_id")
        try values.encodeIfPresent(entityID, forKey: "entity_id")
        try values.encodeIfPresent(entityType, forKey: "entity_type")
        try values.encodeIfPresent(entityURL, forKey: "entity_url")
        try values.encodeIfPresent(executionAttempt, forKey: "execution_attempt")
        try values.encodeIfPresent(occurredAt, forKey: "occurred_at")
        try values.encodeIfPresent(eventType, forKey: "event_type")
    }
}

public struct Website: Codable {
    /// Example: "12345"
    public var id: String?
    /// Example: "http://example.com"
    public var url: String
    /// Example: "primary"
    public var type: `Type`?

    /// Example: "primary"
    public enum `Type`: String, Codable, CaseIterable {
        case primary
        case secondary
        case work
        case personal
        case other
    }

    public init(id: String? = nil, url: String, type: `Type`? = nil) {
        self.id = id
        self.url = url
        self.type = type
    }
}

public enum AnyJSON: Equatable, Codable {
    case string(String)
    case number(Double)
    case object([String: AnyJSON])
    case array([AnyJSON])
    case bool(Bool)

    var value: Any {
        switch self {
        case .string(let string): return string
        case .number(let double): return double
        case .object(let dictionary): return dictionary
        case .array(let array): return array
        case .bool(let bool): return bool
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .array(array): try container.encode(array)
        case let .object(object): try container.encode(object)
        case let .string(string): try container.encode(string)
        case let .number(number): try container.encode(number)
        case let .bool(bool): try container.encode(bool)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let object = try? container.decode([String: AnyJSON].self) {
            self = .object(object)
        } else if let array = try? container.decode([AnyJSON].self) {
            self = .array(array)
        } else if let string = try? container.decode(String.self) {
            self = .string(string)
        } else if let bool = try? container.decode(Bool.self) {
            self = .bool(bool)
        } else if let number = try? container.decode(Double.self) {
            self = .number(number)
        } else {
            throw DecodingError.dataCorrupted(
                .init(codingPath: decoder.codingPath, debugDescription: "Invalid JSON value.")
            )
        }
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
