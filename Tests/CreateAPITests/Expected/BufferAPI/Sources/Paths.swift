// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import NaiveDate
import Get
import URLQueryEncoder

extension Paths {
    public static var info: Info {
        Info(path: "/info")
    }

    public struct Info {
        /// Path: `/info`
        public let path: String
    }
}

extension Paths.Info {
    public func mediaTypeExtension(_ mediaTypeExtension: String) -> WithConfiguration {
        WithConfiguration(path: "\(path)/configuration\(mediaTypeExtension)")
    }

    public struct WithConfiguration {
        /// Path: `/info/configuration{mediaTypeExtension}`
        public let path: String

        /// Returns an object with the current configuration that Buffer is using, including supported services, their icons and the varying limits of character and schedules.
        public var get: Request<BufferAPI.Configuration> {
            .get(path)
        }
    }
}

extension Paths {
    public static var links: Links {
        Links(path: "/links")
    }

    public struct Links {
        /// Path: `/links`
        public let path: String
    }
}

extension Paths.Links {
    public func mediaTypeExtension(_ mediaTypeExtension: String) -> WithShares {
        WithShares(path: "\(path)/shares\(mediaTypeExtension)")
    }

    public struct WithShares {
        /// Path: `/links/shares{mediaTypeExtension}`
        public let path: String

        /// Returns an object with a the numbers of shares a link has had using Buffer.
        public func get(url: String) -> Request<BufferAPI.Shares> {
            .get(path, query: [("url", url)])
        }
    }
}

extension Paths {
    public static var profiles: Profiles {
        Profiles(path: "/profiles")
    }

    public struct Profiles {
        /// Path: `/profiles`
        public let path: String
    }
}

extension Paths.Profiles {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/profiles/{id}`
        public let path: String
    }
}

extension Paths.Profiles.WithID {
    public var schedules: Schedules {
        Schedules(path: path + "/schedules")
    }

    public struct Schedules {
        /// Path: `/profiles/{id}/schedules`
        public let path: String
    }
}

extension Paths.Profiles.WithID.Schedules {
    public func mediaTypeExtension(_ mediaTypeExtension: String) -> WithUpdate {
        WithUpdate(path: "\(path)/update\(mediaTypeExtension)")
    }

    public struct WithUpdate {
        /// Path: `/profiles/{id}/schedules/update{mediaTypeExtension}`
        public let path: String

        /// "Set the posting schedules for the specified social media profile.
        public var post: Request<BufferAPI.Success> {
            .post(path)
        }
    }
}

extension Paths.Profiles.WithID {
    public func mediaTypeExtension(_ mediaTypeExtension: String) -> WithSchedules {
        WithSchedules(path: "\(path)/schedules\(mediaTypeExtension)")
    }

    public struct WithSchedules {
        /// Path: `/profiles/{id}/schedules{mediaTypeExtension}`
        public let path: String

        /// Returns details of the posting schedules associated with a social media profile.
        public var get: Request<BufferAPI.Schedules> {
            .get(path)
        }
    }
}

extension Paths.Profiles.WithID {
    public var updates: Updates {
        Updates(path: path + "/updates")
    }

    public struct Updates {
        /// Path: `/profiles/{id}/updates`
        public let path: String
    }
}

extension Paths.Profiles.WithID.Updates {
    public func mediaTypeExtension(_ mediaTypeExtension: String) -> WithPending {
        WithPending(path: "\(path)/pending\(mediaTypeExtension)")
    }

    public struct WithPending {
        /// Path: `/profiles/{id}/updates/pending{mediaTypeExtension}`
        public let path: String

        /// "Returns an array of updates that are currently in the buffer for an individual social media profile.
        public func get(parameters: GetParameters? = nil) -> Request<BufferAPI.UpdatesArray> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var page: Int?
            public var count: Int?
            public var since: NaiveDate?
            public var isUtc: Bool?

            public init(page: Int? = nil, count: Int? = nil, since: NaiveDate? = nil, isUtc: Bool? = nil) {
                self.page = page
                self.count = count
                self.since = since
                self.isUtc = isUtc
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(page, forKey: "page")
                encoder.encode(count, forKey: "count")
                encoder.encode(since, forKey: "since")
                encoder.encode(isUtc, forKey: "utc")
                return encoder.items
            }
        }
    }
}

extension Paths.Profiles.WithID.Updates {
    public func mediaTypeExtension(_ mediaTypeExtension: String) -> WithReorder {
        WithReorder(path: "\(path)/reorder\(mediaTypeExtension)")
    }

    public struct WithReorder {
        /// Path: `/profiles/{id}/updates/reorder{mediaTypeExtension}`
        public let path: String

        /// Edit the order at which statuses for the specified social media profile will be sent out of the buffer.
        public var post: Request<BufferAPI.Shuffle> {
            .post(path)
        }
    }
}

extension Paths.Profiles.WithID.Updates {
    public func mediaTypeExtension(_ mediaTypeExtension: String) -> WithSent {
        WithSent(path: "\(path)/sent\(mediaTypeExtension)")
    }

    public struct WithSent {
        /// Path: `/profiles/{id}/updates/sent{mediaTypeExtension}`
        public let path: String

        /// Returns an array of updates that have been sent from the buffer for an individual social media profile.
        public func get(parameters: GetParameters? = nil) -> Request<BufferAPI.UpdatesArray> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var page: Int?
            public var count: Int?
            public var since: NaiveDate?
            public var isUtc: Bool?

            public init(page: Int? = nil, count: Int? = nil, since: NaiveDate? = nil, isUtc: Bool? = nil) {
                self.page = page
                self.count = count
                self.since = since
                self.isUtc = isUtc
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(page, forKey: "page")
                encoder.encode(count, forKey: "count")
                encoder.encode(since, forKey: "since")
                encoder.encode(isUtc, forKey: "utc")
                return encoder.items
            }
        }
    }
}

extension Paths.Profiles.WithID.Updates {
    public func mediaTypeExtension(_ mediaTypeExtension: String) -> WithShuffle {
        WithShuffle(path: "\(path)/shuffle\(mediaTypeExtension)")
    }

    public struct WithShuffle {
        /// Path: `/profiles/{id}/updates/shuffle{mediaTypeExtension}`
        public let path: String

        /// Randomize the order at which statuses for the specified social media profile will be sent out of the buffer.
        public var post: Request<BufferAPI.Shuffle> {
            .post(path)
        }
    }
}

extension Paths.Profiles {
    public func id(_ id: String) -> WithMediaTypeExtension {
        WithMediaTypeExtension(path: "\(path)/\(id){mediaTypeExtension}")
    }

    public struct WithMediaTypeExtension {
        /// Path: `/profiles/{id}{mediaTypeExtension}`
        public let path: String

        /// Returns details of the single specified social media profile.
        public var get: Request<BufferAPI.Profile> {
            .get(path)
        }
    }
}

extension Paths {
    public static func mediaTypeExtension(_ mediaTypeExtension: String) -> WithProfiles {
        WithProfiles(path: "/profiles\(mediaTypeExtension)")
    }

    public struct WithProfiles {
        /// Path: `/profiles{mediaTypeExtension}`
        public let path: String

        /// Returns an array of social media profiles connected to a users account.
        public var get: Request<[Profile]> {
            .get(path)
        }
    }
}

extension Paths {
    public static var updates: Updates {
        Updates(path: "/updates")
    }

    public struct Updates {
        /// Path: `/updates`
        public let path: String
    }
}

extension Paths.Updates {
    public func mediaTypeExtension(_ mediaTypeExtension: String) -> WithCreate {
        WithCreate(path: "\(path)/create\(mediaTypeExtension)")
    }

    public struct WithCreate {
        /// Path: `/updates/create{mediaTypeExtension}`
        public let path: String

        /// Create one or more new status updates.
        public var post: Request<BufferAPI.NewUpdate> {
            .post(path)
        }
    }
}

extension Paths.Updates {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/updates/{id}`
        public let path: String
    }
}

extension Paths.Updates.WithID {
    public func mediaTypeExtension(_ mediaTypeExtension: String) -> WithDestroy {
        WithDestroy(path: "\(path)/destroy\(mediaTypeExtension)")
    }

    public struct WithDestroy {
        /// Path: `/updates/{id}/destroy{mediaTypeExtension}`
        public let path: String

        /// Permanently delete an existing status update.
        public var post: Request<BufferAPI.Success> {
            .post(path)
        }
    }
}

extension Paths.Updates.WithID {
    public func mediaTypeExtension(_ mediaTypeExtension: String) -> WithInteractions {
        WithInteractions(path: "\(path)/interactions\(mediaTypeExtension)")
    }

    public struct WithInteractions {
        /// Path: `/updates/{id}/interactions{mediaTypeExtension}`
        public let path: String

        /// Returns the detailed information on individual interactions with the social media update such as favorites, retweets and likes.
        public func get(parameters: GetParameters) -> Request<BufferAPI.Interactions> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetParameters {
            public var event: String
            public var page: Int?
            public var count: Int?

            public init(event: String, page: Int? = nil, count: Int? = nil) {
                self.event = event
                self.page = page
                self.count = count
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(event, forKey: "event")
                encoder.encode(page, forKey: "page")
                encoder.encode(count, forKey: "count")
                return encoder.items
            }
        }
    }
}

extension Paths.Updates.WithID {
    public func mediaTypeExtension(_ mediaTypeExtension: String) -> WithMoveToTop {
        WithMoveToTop(path: "\(path)/move_to_top\(mediaTypeExtension)")
    }

    public struct WithMoveToTop {
        /// Path: `/updates/{id}/move_to_top{mediaTypeExtension}`
        public let path: String

        /// Move an existing status update to the top of the queue and recalculate times for all updates in the queue. Returns the update with its new posting time.
        public var post: Request<BufferAPI.Update> {
            .post(path)
        }
    }
}

extension Paths.Updates.WithID {
    public func mediaTypeExtension(_ mediaTypeExtension: String) -> WithShare {
        WithShare(path: "\(path)/share\(mediaTypeExtension)")
    }

    public struct WithShare {
        /// Path: `/updates/{id}/share{mediaTypeExtension}`
        public let path: String

        /// Immediately shares a single pending update and recalculates times for updates remaining in the queue.
        public var post: Request<BufferAPI.Success> {
            .post(path)
        }
    }
}

extension Paths.Updates.WithID {
    public func mediaTypeExtension(_ mediaTypeExtension: String) -> WithUpdate {
        WithUpdate(path: "\(path)/update\(mediaTypeExtension)")
    }

    public struct WithUpdate {
        /// Path: `/updates/{id}/update{mediaTypeExtension}`
        public let path: String

        /// Edit an existing, individual status update.
        public var post: Request<BufferAPI.IndividualUpdate> {
            .post(path)
        }
    }
}

extension Paths.Updates {
    public func id(_ id: String) -> WithMediaTypeExtension {
        WithMediaTypeExtension(path: "\(path)/\(id){mediaTypeExtension}")
    }

    public struct WithMediaTypeExtension {
        /// Path: `/updates/{id}{mediaTypeExtension}`
        public let path: String

        /// Returns a single social media update.
        public var get: Request<BufferAPI.Update> {
            .get(path)
        }
    }
}

extension Paths {
    public static func mediaTypeExtension(_ mediaTypeExtension: String) -> WithUser {
        WithUser(path: "/user\(mediaTypeExtension)")
    }

    public struct WithUser {
        /// Path: `/user{mediaTypeExtension}`
        public let path: String

        /// Returns a single user.
        public var get: Request<BufferAPI.User> {
            .get(path)
        }
    }
}

public enum Paths {}
