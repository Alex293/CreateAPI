// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import NaiveDate

public struct Configuration: Codable {
    public var media: Media?
    public var services: Services?

    public struct Media: Codable {
        public var pictureFiletypes: [String]?
        public var pictureSizeMax: Double?
        public var pictureSizeMin: Double?

        public init(pictureFiletypes: [String]? = nil, pictureSizeMax: Double? = nil, pictureSizeMin: Double? = nil) {
            self.pictureFiletypes = pictureFiletypes
            self.pictureSizeMax = pictureSizeMax
            self.pictureSizeMin = pictureSizeMin
        }

        private enum CodingKeys: String, CodingKey {
            case pictureFiletypes = "picture_filetypes"
            case pictureSizeMax = "picture_size_max"
            case pictureSizeMin = "picture_size_min"
        }
    }

    public struct Services: Codable {
        public var appdotnet: Appdotnet?
        public var facebook: Facebook?
        public var google: Google?
        public var linkedin: Linkedin?
        public var twitter: Twitter?

        public struct Appdotnet: Codable {
            public var types: Types?
            public var urls: URLs?

            public struct Types: Codable {
                public var profile: Profile?

                public struct Profile: Codable {
                    public var characterLimit: Double?
                    public var icons: Icons?
                    public var isLinkAttachments: Bool?
                    public var name: String?
                    public var scheduleLimit: Double?
                    public var supportedInteractions: [[String: AnyJSON]]?

                    public struct Icons: Codable {
                        public var _16: String?
                        public var _32: String?
                        public var _64: String?

                        public init(_16: String? = nil, _32: String? = nil, _64: String? = nil) {
                            self._16 = _16
                            self._32 = _32
                            self._64 = _64
                        }

                        private enum CodingKeys: String, CodingKey {
                            case _16 = "16"
                            case _32 = "32"
                            case _64 = "64"
                        }
                    }

                    public init(characterLimit: Double? = nil, icons: Icons? = nil, isLinkAttachments: Bool? = nil, name: String? = nil, scheduleLimit: Double? = nil, supportedInteractions: [[String: AnyJSON]]? = nil) {
                        self.characterLimit = characterLimit
                        self.icons = icons
                        self.isLinkAttachments = isLinkAttachments
                        self.name = name
                        self.scheduleLimit = scheduleLimit
                        self.supportedInteractions = supportedInteractions
                    }

                    private enum CodingKeys: String, CodingKey {
                        case characterLimit = "character_limit"
                        case icons
                        case isLinkAttachments = "link_attachments"
                        case name
                        case scheduleLimit = "schedule_limit"
                        case supportedInteractions = "supported_interactions"
                    }
                }

                public init(profile: Profile? = nil) {
                    self.profile = profile
                }
            }

            public struct URLs: Codable {
                public var hashtag: String?
                public var user: String?

                public init(hashtag: String? = nil, user: String? = nil) {
                    self.hashtag = hashtag
                    self.user = user
                }
            }

            public init(types: Types? = nil, urls: URLs? = nil) {
                self.types = types
                self.urls = urls
            }
        }

        public struct Facebook: Codable {
            public var types: Types?
            public var urls: URLs?

            public struct Types: Codable {
                public var group: Group?
                public var page: Page?
                public var profile: Profile?

                public struct Group: Codable {
                    public var characterLimit: Double?
                    public var icons: Icons?
                    public var isLinkAttachments: Bool?
                    public var name: String?
                    public var scheduleLimit: Double?
                    public var supportedInteractions: [String]?

                    public struct Icons: Codable {
                        public var _16: String?
                        public var _32: String?
                        public var _64: String?

                        public init(_16: String? = nil, _32: String? = nil, _64: String? = nil) {
                            self._16 = _16
                            self._32 = _32
                            self._64 = _64
                        }

                        private enum CodingKeys: String, CodingKey {
                            case _16 = "16"
                            case _32 = "32"
                            case _64 = "64"
                        }
                    }

                    public init(characterLimit: Double? = nil, icons: Icons? = nil, isLinkAttachments: Bool? = nil, name: String? = nil, scheduleLimit: Double? = nil, supportedInteractions: [String]? = nil) {
                        self.characterLimit = characterLimit
                        self.icons = icons
                        self.isLinkAttachments = isLinkAttachments
                        self.name = name
                        self.scheduleLimit = scheduleLimit
                        self.supportedInteractions = supportedInteractions
                    }

                    private enum CodingKeys: String, CodingKey {
                        case characterLimit = "character_limit"
                        case icons
                        case isLinkAttachments = "link_attachments"
                        case name
                        case scheduleLimit = "schedule_limit"
                        case supportedInteractions = "supported_interactions"
                    }
                }

                public struct Page: Codable {
                    public var characterLimit: Double?
                    public var icons: Icons?
                    public var isLinkAttachments: Bool?
                    public var name: String?
                    public var scheduleLimit: Double?
                    public var supportedInteractions: [String]?

                    public struct Icons: Codable {
                        public var _16: String?
                        public var _32: String?
                        public var _64: String?

                        public init(_16: String? = nil, _32: String? = nil, _64: String? = nil) {
                            self._16 = _16
                            self._32 = _32
                            self._64 = _64
                        }

                        private enum CodingKeys: String, CodingKey {
                            case _16 = "16"
                            case _32 = "32"
                            case _64 = "64"
                        }
                    }

                    public init(characterLimit: Double? = nil, icons: Icons? = nil, isLinkAttachments: Bool? = nil, name: String? = nil, scheduleLimit: Double? = nil, supportedInteractions: [String]? = nil) {
                        self.characterLimit = characterLimit
                        self.icons = icons
                        self.isLinkAttachments = isLinkAttachments
                        self.name = name
                        self.scheduleLimit = scheduleLimit
                        self.supportedInteractions = supportedInteractions
                    }

                    private enum CodingKeys: String, CodingKey {
                        case characterLimit = "character_limit"
                        case icons
                        case isLinkAttachments = "link_attachments"
                        case name
                        case scheduleLimit = "schedule_limit"
                        case supportedInteractions = "supported_interactions"
                    }
                }

                public struct Profile: Codable {
                    public var characterLimit: Double?
                    public var icons: Icons?
                    public var isLinkAttachments: Bool?
                    public var name: String?
                    public var scheduleLimit: Double?
                    public var supportedInteractions: [String]?

                    public struct Icons: Codable {
                        public var _16: String?
                        public var _32: String?
                        public var _64: String?

                        public init(_16: String? = nil, _32: String? = nil, _64: String? = nil) {
                            self._16 = _16
                            self._32 = _32
                            self._64 = _64
                        }

                        private enum CodingKeys: String, CodingKey {
                            case _16 = "16"
                            case _32 = "32"
                            case _64 = "64"
                        }
                    }

                    public init(characterLimit: Double? = nil, icons: Icons? = nil, isLinkAttachments: Bool? = nil, name: String? = nil, scheduleLimit: Double? = nil, supportedInteractions: [String]? = nil) {
                        self.characterLimit = characterLimit
                        self.icons = icons
                        self.isLinkAttachments = isLinkAttachments
                        self.name = name
                        self.scheduleLimit = scheduleLimit
                        self.supportedInteractions = supportedInteractions
                    }

                    private enum CodingKeys: String, CodingKey {
                        case characterLimit = "character_limit"
                        case icons
                        case isLinkAttachments = "link_attachments"
                        case name
                        case scheduleLimit = "schedule_limit"
                        case supportedInteractions = "supported_interactions"
                    }
                }

                public init(group: Group? = nil, page: Page? = nil, profile: Profile? = nil) {
                    self.group = group
                    self.page = page
                    self.profile = profile
                }
            }

            public struct URLs: Codable {
                public var user: String?

                public init(user: String? = nil) {
                    self.user = user
                }
            }

            public init(types: Types? = nil, urls: URLs? = nil) {
                self.types = types
                self.urls = urls
            }
        }

        public struct Google: Codable {
            public var types: Types?
            public var urls: URLs?

            public struct Types: Codable {
                public var page: Page?
                public var profile: Profile?

                public struct Page: Codable {
                    public var characterLimit: Double?
                    public var icons: Icons?
                    public var isLinkAttachments: Bool?
                    public var name: String?
                    public var scheduleLimit: Double?
                    public var supportedInteractions: [String]?

                    public struct Icons: Codable {
                        public var _16: String?
                        public var _32: String?
                        public var _64: String?

                        public init(_16: String? = nil, _32: String? = nil, _64: String? = nil) {
                            self._16 = _16
                            self._32 = _32
                            self._64 = _64
                        }

                        private enum CodingKeys: String, CodingKey {
                            case _16 = "16"
                            case _32 = "32"
                            case _64 = "64"
                        }
                    }

                    public init(characterLimit: Double? = nil, icons: Icons? = nil, isLinkAttachments: Bool? = nil, name: String? = nil, scheduleLimit: Double? = nil, supportedInteractions: [String]? = nil) {
                        self.characterLimit = characterLimit
                        self.icons = icons
                        self.isLinkAttachments = isLinkAttachments
                        self.name = name
                        self.scheduleLimit = scheduleLimit
                        self.supportedInteractions = supportedInteractions
                    }

                    private enum CodingKeys: String, CodingKey {
                        case characterLimit = "character_limit"
                        case icons
                        case isLinkAttachments = "link_attachments"
                        case name
                        case scheduleLimit = "schedule_limit"
                        case supportedInteractions = "supported_interactions"
                    }
                }

                public struct Profile: Codable {
                    public var characterLimit: Double?
                    public var icons: Icons?
                    public var isLinkAttachments: Bool?
                    public var name: String?
                    public var scheduleLimit: Double?
                    public var supportedInteractions: [String]?

                    public struct Icons: Codable {
                        public var _16: String?
                        public var _32: String?
                        public var _64: String?

                        public init(_16: String? = nil, _32: String? = nil, _64: String? = nil) {
                            self._16 = _16
                            self._32 = _32
                            self._64 = _64
                        }

                        private enum CodingKeys: String, CodingKey {
                            case _16 = "16"
                            case _32 = "32"
                            case _64 = "64"
                        }
                    }

                    public init(characterLimit: Double? = nil, icons: Icons? = nil, isLinkAttachments: Bool? = nil, name: String? = nil, scheduleLimit: Double? = nil, supportedInteractions: [String]? = nil) {
                        self.characterLimit = characterLimit
                        self.icons = icons
                        self.isLinkAttachments = isLinkAttachments
                        self.name = name
                        self.scheduleLimit = scheduleLimit
                        self.supportedInteractions = supportedInteractions
                    }

                    private enum CodingKeys: String, CodingKey {
                        case characterLimit = "character_limit"
                        case icons
                        case isLinkAttachments = "link_attachments"
                        case name
                        case scheduleLimit = "schedule_limit"
                        case supportedInteractions = "supported_interactions"
                    }
                }

                public init(page: Page? = nil, profile: Profile? = nil) {
                    self.page = page
                    self.profile = profile
                }
            }

            public struct URLs: Codable {
                public var user: String?

                public init(user: String? = nil) {
                    self.user = user
                }
            }

            public init(types: Types? = nil, urls: URLs? = nil) {
                self.types = types
                self.urls = urls
            }
        }

        public struct Linkedin: Codable {
            public var types: Types?
            public var urls: URLs?

            public struct Types: Codable {
                public var group: Group?
                public var page: Page?
                public var profile: Profile?

                public struct Group: Codable {
                    public var characterLimit: Double?
                    public var icons: Icons?
                    public var isLinkAttachments: Bool?
                    public var name: String?
                    public var scheduleLimit: Double?
                    public var supportedInteractions: [String]?

                    public struct Icons: Codable {
                        public var _16: String?
                        public var _32: String?
                        public var _64: String?

                        public init(_16: String? = nil, _32: String? = nil, _64: String? = nil) {
                            self._16 = _16
                            self._32 = _32
                            self._64 = _64
                        }

                        private enum CodingKeys: String, CodingKey {
                            case _16 = "16"
                            case _32 = "32"
                            case _64 = "64"
                        }
                    }

                    public init(characterLimit: Double? = nil, icons: Icons? = nil, isLinkAttachments: Bool? = nil, name: String? = nil, scheduleLimit: Double? = nil, supportedInteractions: [String]? = nil) {
                        self.characterLimit = characterLimit
                        self.icons = icons
                        self.isLinkAttachments = isLinkAttachments
                        self.name = name
                        self.scheduleLimit = scheduleLimit
                        self.supportedInteractions = supportedInteractions
                    }

                    private enum CodingKeys: String, CodingKey {
                        case characterLimit = "character_limit"
                        case icons
                        case isLinkAttachments = "link_attachments"
                        case name
                        case scheduleLimit = "schedule_limit"
                        case supportedInteractions = "supported_interactions"
                    }
                }

                public struct Page: Codable {
                    public var characterLimit: Double?
                    public var icons: Icons?
                    public var isLinkAttachments: Bool?
                    public var name: String?
                    public var scheduleLimit: Double?
                    public var supportedInteractions: [String]?

                    public struct Icons: Codable {
                        public var _16: String?
                        public var _32: String?
                        public var _64: String?

                        public init(_16: String? = nil, _32: String? = nil, _64: String? = nil) {
                            self._16 = _16
                            self._32 = _32
                            self._64 = _64
                        }

                        private enum CodingKeys: String, CodingKey {
                            case _16 = "16"
                            case _32 = "32"
                            case _64 = "64"
                        }
                    }

                    public init(characterLimit: Double? = nil, icons: Icons? = nil, isLinkAttachments: Bool? = nil, name: String? = nil, scheduleLimit: Double? = nil, supportedInteractions: [String]? = nil) {
                        self.characterLimit = characterLimit
                        self.icons = icons
                        self.isLinkAttachments = isLinkAttachments
                        self.name = name
                        self.scheduleLimit = scheduleLimit
                        self.supportedInteractions = supportedInteractions
                    }

                    private enum CodingKeys: String, CodingKey {
                        case characterLimit = "character_limit"
                        case icons
                        case isLinkAttachments = "link_attachments"
                        case name
                        case scheduleLimit = "schedule_limit"
                        case supportedInteractions = "supported_interactions"
                    }
                }

                public struct Profile: Codable {
                    public var characterLimit: Double?
                    public var icons: Icons?
                    public var isLinkAttachments: Bool?
                    public var name: String?
                    public var scheduleLimit: Double?
                    public var supportedInteractions: [String]?

                    public struct Icons: Codable {
                        public var _16: String?
                        public var _32: String?
                        public var _64: String?

                        public init(_16: String? = nil, _32: String? = nil, _64: String? = nil) {
                            self._16 = _16
                            self._32 = _32
                            self._64 = _64
                        }

                        private enum CodingKeys: String, CodingKey {
                            case _16 = "16"
                            case _32 = "32"
                            case _64 = "64"
                        }
                    }

                    public init(characterLimit: Double? = nil, icons: Icons? = nil, isLinkAttachments: Bool? = nil, name: String? = nil, scheduleLimit: Double? = nil, supportedInteractions: [String]? = nil) {
                        self.characterLimit = characterLimit
                        self.icons = icons
                        self.isLinkAttachments = isLinkAttachments
                        self.name = name
                        self.scheduleLimit = scheduleLimit
                        self.supportedInteractions = supportedInteractions
                    }

                    private enum CodingKeys: String, CodingKey {
                        case characterLimit = "character_limit"
                        case icons
                        case isLinkAttachments = "link_attachments"
                        case name
                        case scheduleLimit = "schedule_limit"
                        case supportedInteractions = "supported_interactions"
                    }
                }

                public init(group: Group? = nil, page: Page? = nil, profile: Profile? = nil) {
                    self.group = group
                    self.page = page
                    self.profile = profile
                }
            }

            public struct URLs: Codable {
                public var user: String?

                public init(user: String? = nil) {
                    self.user = user
                }
            }

            public init(types: Types? = nil, urls: URLs? = nil) {
                self.types = types
                self.urls = urls
            }
        }

        public struct Twitter: Codable {
            public var types: Types?
            public var urls: URLs?

            public struct Types: Codable {
                public var profile: Profile?

                public struct Profile: Codable {
                    public var characterLimit: Double?
                    public var icons: Icons?
                    public var isLinkAttachments: Bool?
                    public var name: String?
                    public var scheduleLimit: Double?
                    public var supportedInteractions: [String]?

                    public struct Icons: Codable {
                        public var _16: String?
                        public var _32: String?
                        public var _64: String?

                        public init(_16: String? = nil, _32: String? = nil, _64: String? = nil) {
                            self._16 = _16
                            self._32 = _32
                            self._64 = _64
                        }

                        private enum CodingKeys: String, CodingKey {
                            case _16 = "16"
                            case _32 = "32"
                            case _64 = "64"
                        }
                    }

                    public init(characterLimit: Double? = nil, icons: Icons? = nil, isLinkAttachments: Bool? = nil, name: String? = nil, scheduleLimit: Double? = nil, supportedInteractions: [String]? = nil) {
                        self.characterLimit = characterLimit
                        self.icons = icons
                        self.isLinkAttachments = isLinkAttachments
                        self.name = name
                        self.scheduleLimit = scheduleLimit
                        self.supportedInteractions = supportedInteractions
                    }

                    private enum CodingKeys: String, CodingKey {
                        case characterLimit = "character_limit"
                        case icons
                        case isLinkAttachments = "link_attachments"
                        case name
                        case scheduleLimit = "schedule_limit"
                        case supportedInteractions = "supported_interactions"
                    }
                }

                public init(profile: Profile? = nil) {
                    self.profile = profile
                }
            }

            public struct URLs: Codable {
                public var cashtag: String?
                public var hashtag: String?
                public var user: String?

                public init(cashtag: String? = nil, hashtag: String? = nil, user: String? = nil) {
                    self.cashtag = cashtag
                    self.hashtag = hashtag
                    self.user = user
                }
            }

            public init(types: Types? = nil, urls: URLs? = nil) {
                self.types = types
                self.urls = urls
            }
        }

        public init(appdotnet: Appdotnet? = nil, facebook: Facebook? = nil, google: Google? = nil, linkedin: Linkedin? = nil, twitter: Twitter? = nil) {
            self.appdotnet = appdotnet
            self.facebook = facebook
            self.google = google
            self.linkedin = linkedin
            self.twitter = twitter
        }
    }

    public init(media: Media? = nil, services: Services? = nil) {
        self.media = media
        self.services = services
    }
}

public struct IndividualUpdate: Codable {
    public var bufferCount: Double?
    public var bufferPercentage: Double?
    public var isSuccess: Bool?
    public var update: Update?

    public struct Update: Codable {
        public var clientID: String?
        public var createdAt: Double?
        public var day: String?
        public var dueAt: Double?
        public var dueTime: String?
        public var id: String?
        public var media: Media?
        public var profileID: String?
        public var profileService: String?
        public var status: String?
        public var text: String?
        public var textFormatted: String?
        public var userID: String?
        public var via: String?

        public struct Media: Codable {
            public var description: String?
            public var link: String?
            public var title: String?

            public init(description: String? = nil, link: String? = nil, title: String? = nil) {
                self.description = description
                self.link = link
                self.title = title
            }
        }

        public init(clientID: String? = nil, createdAt: Double? = nil, day: String? = nil, dueAt: Double? = nil, dueTime: String? = nil, id: String? = nil, media: Media? = nil, profileID: String? = nil, profileService: String? = nil, status: String? = nil, text: String? = nil, textFormatted: String? = nil, userID: String? = nil, via: String? = nil) {
            self.clientID = clientID
            self.createdAt = createdAt
            self.day = day
            self.dueAt = dueAt
            self.dueTime = dueTime
            self.id = id
            self.media = media
            self.profileID = profileID
            self.profileService = profileService
            self.status = status
            self.text = text
            self.textFormatted = textFormatted
            self.userID = userID
            self.via = via
        }

        private enum CodingKeys: String, CodingKey {
            case clientID = "client_id"
            case createdAt = "created_at"
            case day
            case dueAt = "due_at"
            case dueTime = "due_time"
            case id
            case media
            case profileID = "profile_id"
            case profileService = "profile_service"
            case status
            case text
            case textFormatted = "text_formatted"
            case userID = "user_id"
            case via
        }
    }

    public init(bufferCount: Double? = nil, bufferPercentage: Double? = nil, isSuccess: Bool? = nil, update: Update? = nil) {
        self.bufferCount = bufferCount
        self.bufferPercentage = bufferPercentage
        self.isSuccess = isSuccess
        self.update = update
    }

    private enum CodingKeys: String, CodingKey {
        case bufferCount = "buffer_count"
        case bufferPercentage = "buffer_percentage"
        case isSuccess = "success"
        case update
    }
}

public struct Interactions: Codable {
    public var interactions: [Interaction]?
    public var total: Double?

    public struct Interaction: Codable {
        public var id: String?
        public var createdAt: Double?
        public var event: String?
        public var interactionID: String?
        public var user: User?

        public struct User: Codable {
            public var avatar: String?
            public var avatarHTTPS: String?
            public var followers: Double?
            public var twitterID: String?
            public var username: String?

            public init(avatar: String? = nil, avatarHTTPS: String? = nil, followers: Double? = nil, twitterID: String? = nil, username: String? = nil) {
                self.avatar = avatar
                self.avatarHTTPS = avatarHTTPS
                self.followers = followers
                self.twitterID = twitterID
                self.username = username
            }

            private enum CodingKeys: String, CodingKey {
                case avatar
                case avatarHTTPS = "avatar_https"
                case followers
                case twitterID = "twitter_id"
                case username
            }
        }

        public init(id: String? = nil, createdAt: Double? = nil, event: String? = nil, interactionID: String? = nil, user: User? = nil) {
            self.id = id
            self.createdAt = createdAt
            self.event = event
            self.interactionID = interactionID
            self.user = user
        }

        private enum CodingKeys: String, CodingKey {
            case id = "_id"
            case createdAt = "created_at"
            case event
            case interactionID = "interaction_id"
            case user
        }
    }

    public init(interactions: [Interaction]? = nil, total: Double? = nil) {
        self.interactions = interactions
        self.total = total
    }
}

public struct NewUpdate: Codable {
    public var bufferCount: Double?
    public var bufferPercentage: Double?
    public var isSuccess: Bool?
    public var updates: [Update]?

    public struct Update: Codable {
        public var createdAt: Double?
        public var day: String?
        public var dueAt: Double?
        public var dueTime: String?
        public var id: String?
        public var media: Media?
        public var profileID: String?
        public var profileService: String?
        public var status: String?
        public var text: String?
        public var textFormatted: String?
        public var userID: String?
        public var via: String?

        public struct Media: Codable {
            public var description: String?
            public var link: String?
            public var title: String?

            public init(description: String? = nil, link: String? = nil, title: String? = nil) {
                self.description = description
                self.link = link
                self.title = title
            }
        }

        public init(createdAt: Double? = nil, day: String? = nil, dueAt: Double? = nil, dueTime: String? = nil, id: String? = nil, media: Media? = nil, profileID: String? = nil, profileService: String? = nil, status: String? = nil, text: String? = nil, textFormatted: String? = nil, userID: String? = nil, via: String? = nil) {
            self.createdAt = createdAt
            self.day = day
            self.dueAt = dueAt
            self.dueTime = dueTime
            self.id = id
            self.media = media
            self.profileID = profileID
            self.profileService = profileService
            self.status = status
            self.text = text
            self.textFormatted = textFormatted
            self.userID = userID
            self.via = via
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "created_at"
            case day
            case dueAt = "due_at"
            case dueTime = "due_time"
            case id
            case media
            case profileID = "profile_id"
            case profileService = "profile_service"
            case status
            case text
            case textFormatted = "text_formatted"
            case userID = "user_id"
            case via
        }
    }

    public init(bufferCount: Double? = nil, bufferPercentage: Double? = nil, isSuccess: Bool? = nil, updates: [Update]? = nil) {
        self.bufferCount = bufferCount
        self.bufferPercentage = bufferPercentage
        self.isSuccess = isSuccess
        self.updates = updates
    }

    private enum CodingKeys: String, CodingKey {
        case bufferCount = "buffer_count"
        case bufferPercentage = "buffer_percentage"
        case isSuccess = "success"
        case updates
    }
}

public struct Profile: Codable {
    public var avatar: String?
    public var createdAt: Double?
    public var isDefault: Bool?
    public var formattedUsername: String?
    public var id: String?
    public var schedules: [Schedule]?
    public var service: String?
    public var serviceID: String?
    public var serviceUsername: String?
    public var statistics: Statistics?
    public var teamMembers: [String]?
    public var timezone: String?
    public var userID: String?

    public struct Schedule: Codable {
        public var days: [String]?
        public var times: [String]?

        public init(days: [String]? = nil, times: [String]? = nil) {
            self.days = days
            self.times = times
        }
    }

    public struct Statistics: Codable {
        public var followers: Double?

        public init(followers: Double? = nil) {
            self.followers = followers
        }
    }

    public init(avatar: String? = nil, createdAt: Double? = nil, isDefault: Bool? = nil, formattedUsername: String? = nil, id: String? = nil, schedules: [Schedule]? = nil, service: String? = nil, serviceID: String? = nil, serviceUsername: String? = nil, statistics: Statistics? = nil, teamMembers: [String]? = nil, timezone: String? = nil, userID: String? = nil) {
        self.avatar = avatar
        self.createdAt = createdAt
        self.isDefault = isDefault
        self.formattedUsername = formattedUsername
        self.id = id
        self.schedules = schedules
        self.service = service
        self.serviceID = serviceID
        self.serviceUsername = serviceUsername
        self.statistics = statistics
        self.teamMembers = teamMembers
        self.timezone = timezone
        self.userID = userID
    }

    private enum CodingKeys: String, CodingKey {
        case avatar
        case createdAt = "created_at"
        case isDefault = "default"
        case formattedUsername = "formatted_username"
        case id
        case schedules
        case service
        case serviceID = "service_id"
        case serviceUsername = "service_username"
        case statistics
        case teamMembers = "team_members"
        case timezone
        case userID = "user_id"
    }
}

public struct ProfilesItem: Codable {
    public var id: String?
    public var avatar: String?
    public var avatarHTTPS: String?
    public var counts: Counts?
    public var coverPhoto: String?
    public var isDefault: Bool?
    public var disabledFeatures: [[String: AnyJSON]]?
    public var disconnected: String?
    public var formattedService: String?
    public var formattedUsername: String?
    public var hasUsedSuggestions: Bool?
    public var schedules: [Schedule]?
    public var service: String?
    public var serviceID: String?
    public var serviceType: String?
    public var serviceUsername: String?
    public var shortener: Shortener?
    public var statistics: Statistics?
    public var timezone: String?
    public var userID: String?
    public var utmTracking: String?
    public var verb: String?

    public struct Counts: Codable {
        public var dailySuggestions: Double?
        public var drafts: Double?
        public var pending: Double?
        public var sent: Double?

        public init(dailySuggestions: Double? = nil, drafts: Double? = nil, pending: Double? = nil, sent: Double? = nil) {
            self.dailySuggestions = dailySuggestions
            self.drafts = drafts
            self.pending = pending
            self.sent = sent
        }

        private enum CodingKeys: String, CodingKey {
            case dailySuggestions = "daily_suggestions"
            case drafts
            case pending
            case sent
        }
    }

    public struct Schedule: Codable {
        public var days: [String]?
        public var times: [[String: AnyJSON]]?

        public init(days: [String]? = nil, times: [[String: AnyJSON]]? = nil) {
            self.days = days
            self.times = times
        }
    }

    public struct Shortener: Codable {
        public var domain: String?

        public init(domain: String? = nil) {
            self.domain = domain
        }
    }

    public struct Statistics: Codable {
        public var connections: Double?

        public init(connections: Double? = nil) {
            self.connections = connections
        }
    }

    public init(id: String? = nil, avatar: String? = nil, avatarHTTPS: String? = nil, counts: Counts? = nil, coverPhoto: String? = nil, isDefault: Bool? = nil, disabledFeatures: [[String: AnyJSON]]? = nil, disconnected: String? = nil, formattedService: String? = nil, formattedUsername: String? = nil, hasUsedSuggestions: Bool? = nil, schedules: [Schedule]? = nil, service: String? = nil, serviceID: String? = nil, serviceType: String? = nil, serviceUsername: String? = nil, shortener: Shortener? = nil, statistics: Statistics? = nil, timezone: String? = nil, userID: String? = nil, utmTracking: String? = nil, verb: String? = nil) {
        self.id = id
        self.avatar = avatar
        self.avatarHTTPS = avatarHTTPS
        self.counts = counts
        self.coverPhoto = coverPhoto
        self.isDefault = isDefault
        self.disabledFeatures = disabledFeatures
        self.disconnected = disconnected
        self.formattedService = formattedService
        self.formattedUsername = formattedUsername
        self.hasUsedSuggestions = hasUsedSuggestions
        self.schedules = schedules
        self.service = service
        self.serviceID = serviceID
        self.serviceType = serviceType
        self.serviceUsername = serviceUsername
        self.shortener = shortener
        self.statistics = statistics
        self.timezone = timezone
        self.userID = userID
        self.utmTracking = utmTracking
        self.verb = verb
    }

    private enum CodingKeys: String, CodingKey {
        case id = "_id"
        case avatar
        case avatarHTTPS = "avatar_https"
        case counts
        case coverPhoto = "cover_photo"
        case isDefault = "default"
        case disabledFeatures = "disabled_features"
        case disconnected
        case formattedService = "formatted_service"
        case formattedUsername = "formatted_username"
        case hasUsedSuggestions = "has_used_suggestions"
        case schedules
        case service
        case serviceID = "service_id"
        case serviceType = "service_type"
        case serviceUsername = "service_username"
        case shortener
        case statistics
        case timezone
        case userID = "user_id"
        case utmTracking = "utm_tracking"
        case verb
    }
}

public struct Reorder: Codable {
    public var isSuccess: Bool?
    public var updates: [Update]?

    public struct Update: Codable {
        public var createdAt: Double?
        public var day: String?
        public var dueAt: Double?
        public var dueTime: String?
        public var id: String?
        public var profileID: String?
        public var profileService: String?
        public var status: String?
        public var text: String?
        public var textFormatted: String?
        public var userID: String?
        public var via: String?

        public init(createdAt: Double? = nil, day: String? = nil, dueAt: Double? = nil, dueTime: String? = nil, id: String? = nil, profileID: String? = nil, profileService: String? = nil, status: String? = nil, text: String? = nil, textFormatted: String? = nil, userID: String? = nil, via: String? = nil) {
            self.createdAt = createdAt
            self.day = day
            self.dueAt = dueAt
            self.dueTime = dueTime
            self.id = id
            self.profileID = profileID
            self.profileService = profileService
            self.status = status
            self.text = text
            self.textFormatted = textFormatted
            self.userID = userID
            self.via = via
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "created_at"
            case day
            case dueAt = "due_at"
            case dueTime = "due_time"
            case id
            case profileID = "profile_id"
            case profileService = "profile_service"
            case status
            case text
            case textFormatted = "text_formatted"
            case userID = "user_id"
            case via
        }
    }

    public init(isSuccess: Bool? = nil, updates: [Update]? = nil) {
        self.isSuccess = isSuccess
        self.updates = updates
    }

    private enum CodingKeys: String, CodingKey {
        case isSuccess = "success"
        case updates
    }
}

public struct Schedules: Codable {
    public var days: [String]?
    public var times: [String]?

    public init(days: [String]? = nil, times: [String]? = nil) {
        self.days = days
        self.times = times
    }
}

public struct SchedulesUpdate: Codable {
    public var isSuccess: Bool?

    public init(isSuccess: Bool? = nil) {
        self.isSuccess = isSuccess
    }

    private enum CodingKeys: String, CodingKey {
        case isSuccess = "success"
    }
}

public struct Share: Codable {
    public var isSuccess: Bool?

    public init(isSuccess: Bool? = nil) {
        self.isSuccess = isSuccess
    }

    private enum CodingKeys: String, CodingKey {
        case isSuccess = "success"
    }
}

public struct Shares: Codable {
    public var shares: Double?

    public init(shares: Double? = nil) {
        self.shares = shares
    }
}

public struct Shuffle: Codable {
    public var isSuccess: Bool?
    public var updates: [Update]?

    public struct Update: Codable {
        public var createdAt: Double?
        public var day: String?
        public var dueAt: Double?
        public var dueTime: String?
        public var id: String?
        public var profileID: String?
        public var profileService: String?
        public var status: String?
        public var text: String?
        public var textFormatted: String?
        public var userID: String?
        public var via: String?

        public init(createdAt: Double? = nil, day: String? = nil, dueAt: Double? = nil, dueTime: String? = nil, id: String? = nil, profileID: String? = nil, profileService: String? = nil, status: String? = nil, text: String? = nil, textFormatted: String? = nil, userID: String? = nil, via: String? = nil) {
            self.createdAt = createdAt
            self.day = day
            self.dueAt = dueAt
            self.dueTime = dueTime
            self.id = id
            self.profileID = profileID
            self.profileService = profileService
            self.status = status
            self.text = text
            self.textFormatted = textFormatted
            self.userID = userID
            self.via = via
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "created_at"
            case day
            case dueAt = "due_at"
            case dueTime = "due_time"
            case id
            case profileID = "profile_id"
            case profileService = "profile_service"
            case status
            case text
            case textFormatted = "text_formatted"
            case userID = "user_id"
            case via
        }
    }

    public init(isSuccess: Bool? = nil, updates: [Update]? = nil) {
        self.isSuccess = isSuccess
        self.updates = updates
    }

    private enum CodingKeys: String, CodingKey {
        case isSuccess = "success"
        case updates
    }
}

public struct Success: Codable {
    public var isSuccess: Bool?

    public init(isSuccess: Bool? = nil) {
        self.isSuccess = isSuccess
    }

    private enum CodingKeys: String, CodingKey {
        case isSuccess = "success"
    }
}

public struct Update: Codable {
    public var createdAt: Double?
    public var day: String?
    public var dueAt: Double?
    public var dueTime: String?
    public var id: String?
    public var profileID: String?
    public var profileService: String?
    public var sentAt: Double?
    public var serviceUpdateID: String?
    public var statistics: Statistics?
    public var status: String?
    public var text: String?
    public var textFormatted: String?
    public var userID: String?
    public var via: String?

    public struct Statistics: Codable {
        public var clicks: Double?
        public var favorites: Double?
        public var mentions: Double?
        public var reach: Double?
        public var retweets: Double?

        public init(clicks: Double? = nil, favorites: Double? = nil, mentions: Double? = nil, reach: Double? = nil, retweets: Double? = nil) {
            self.clicks = clicks
            self.favorites = favorites
            self.mentions = mentions
            self.reach = reach
            self.retweets = retweets
        }
    }

    public init(createdAt: Double? = nil, day: String? = nil, dueAt: Double? = nil, dueTime: String? = nil, id: String? = nil, profileID: String? = nil, profileService: String? = nil, sentAt: Double? = nil, serviceUpdateID: String? = nil, statistics: Statistics? = nil, status: String? = nil, text: String? = nil, textFormatted: String? = nil, userID: String? = nil, via: String? = nil) {
        self.createdAt = createdAt
        self.day = day
        self.dueAt = dueAt
        self.dueTime = dueTime
        self.id = id
        self.profileID = profileID
        self.profileService = profileService
        self.sentAt = sentAt
        self.serviceUpdateID = serviceUpdateID
        self.statistics = statistics
        self.status = status
        self.text = text
        self.textFormatted = textFormatted
        self.userID = userID
        self.via = via
    }

    private enum CodingKeys: String, CodingKey {
        case createdAt = "created_at"
        case day
        case dueAt = "due_at"
        case dueTime = "due_time"
        case id
        case profileID = "profile_id"
        case profileService = "profile_service"
        case sentAt = "sent_at"
        case serviceUpdateID = "service_update_id"
        case statistics
        case status
        case text
        case textFormatted = "text_formatted"
        case userID = "user_id"
        case via
    }
}

public struct UpdatesArray: Codable {
    public var total: Double?
    public var updates: [Update]?

    public struct Update: Codable {
        public var createdAt: Double?
        public var day: String?
        public var dueAt: Double?
        public var dueTime: String?
        public var id: String?
        public var profileID: String?
        public var profileService: String?
        public var status: String?
        public var text: String?
        public var textFormatted: String?
        public var userID: String?
        public var via: String?

        public init(createdAt: Double? = nil, day: String? = nil, dueAt: Double? = nil, dueTime: String? = nil, id: String? = nil, profileID: String? = nil, profileService: String? = nil, status: String? = nil, text: String? = nil, textFormatted: String? = nil, userID: String? = nil, via: String? = nil) {
            self.createdAt = createdAt
            self.day = day
            self.dueAt = dueAt
            self.dueTime = dueTime
            self.id = id
            self.profileID = profileID
            self.profileService = profileService
            self.status = status
            self.text = text
            self.textFormatted = textFormatted
            self.userID = userID
            self.via = via
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "created_at"
            case day
            case dueAt = "due_at"
            case dueTime = "due_time"
            case id
            case profileID = "profile_id"
            case profileService = "profile_service"
            case status
            case text
            case textFormatted = "text_formatted"
            case userID = "user_id"
            case via
        }
    }

    public init(total: Double? = nil, updates: [Update]? = nil) {
        self.total = total
        self.updates = updates
    }
}

public struct User: Codable {
    public var id: String?
    public var activityAt: Double?
    public var createdAt: Double?
    public var plan: String?
    public var referralLink: String?
    public var referralToken: String?
    public var secretEmail: String?
    public var timezone: String?

    public init(id: String? = nil, activityAt: Double? = nil, createdAt: Double? = nil, plan: String? = nil, referralLink: String? = nil, referralToken: String? = nil, secretEmail: String? = nil, timezone: String? = nil) {
        self.id = id
        self.activityAt = activityAt
        self.createdAt = createdAt
        self.plan = plan
        self.referralLink = referralLink
        self.referralToken = referralToken
        self.secretEmail = secretEmail
        self.timezone = timezone
    }

    private enum CodingKeys: String, CodingKey {
        case id = "_id"
        case activityAt = "activity_at"
        case createdAt = "created_at"
        case plan
        case referralLink = "referral_link"
        case referralToken = "referral_token"
        case secretEmail = "secret_email"
        case timezone
    }
}

public enum AnyJSON: Equatable, Codable {
    case string(String)
    case number(Double)
    case object([String: AnyJSON])
    case array([AnyJSON])
    case bool(Bool)

    var value: Any {
        switch self {
        case .string(let string): return string
        case .number(let double): return double
        case .object(let dictionary): return dictionary
        case .array(let array): return array
        case .bool(let bool): return bool
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .array(array): try container.encode(array)
        case let .object(object): try container.encode(object)
        case let .string(string): try container.encode(string)
        case let .number(number): try container.encode(number)
        case let .bool(bool): try container.encode(bool)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let object = try? container.decode([String: AnyJSON].self) {
            self = .object(object)
        } else if let array = try? container.decode([AnyJSON].self) {
            self = .array(array)
        } else if let string = try? container.decode(String.self) {
            self = .string(string)
        } else if let bool = try? container.decode(Bool.self) {
            self = .bool(bool)
        } else if let number = try? container.decode(Double.self) {
            self = .number(number)
        } else {
            throw DecodingError.dataCorrupted(
                .init(codingPath: decoder.codingPath, debugDescription: "Invalid JSON value.")
            )
        }
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
