// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import Get
import URLQueryEncoder

extension Paths {
    public static var leads: Leads {
        Leads(path: "/lead/leads")
    }

    public struct Leads {
        /// Path: `/lead/leads`
        public let path: String

        /// List leads
        public func get(parameters: GetParameters? = nil) -> Request<ApiDeckLeadAPI.GetLeadsResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var isRaw: Bool?
            public var cursor: String?
            public var limit: Int?
            /// Example:
            ///
            /// {
            ///   "email" : "elon@tesla.com",
            ///   "first_name" : "Elon",
            ///   "last_name" : "Musk"
            /// }
            public var filter: Filter?
            /// Example:
            ///
            /// {
            ///   "by" : "created_at",
            ///   "direction" : "desc"
            /// }
            public var sort: Sort?

            /// Example:
            ///
            /// {
            ///   "email" : "elon@tesla.com",
            ///   "first_name" : "Elon",
            ///   "last_name" : "Musk"
            /// }
            public struct Filter: Codable {
                /// Name of the lead to filter on
                ///
                /// Example: "Elon Musk"
                public var name: String?
                /// First name of the lead to filter on
                ///
                /// Example: "Elon"
                public var firstName: String?
                /// Last name of the lead to filter on
                ///
                /// Example: "Musk"
                public var lastName: String?
                /// E-mail of the lead to filter on
                ///
                /// Example: "elon@tesla.com"
                public var email: String?

                public init(name: String? = nil, firstName: String? = nil, lastName: String? = nil, email: String? = nil) {
                    self.name = name
                    self.firstName = firstName
                    self.lastName = lastName
                    self.email = email
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(name, forKey: "name")
                    encoder.encode(firstName, forKey: "first_name")
                    encoder.encode(lastName, forKey: "last_name")
                    encoder.encode(email, forKey: "email")
                    return encoder.items
                }
            }

            /// Example:
            ///
            /// {
            ///   "by" : "created_at",
            ///   "direction" : "desc"
            /// }
            public struct Sort: Codable {
                /// The field on which to sort the Leads
                ///
                /// Example: "created_at"
                public var by: By
                /// The direction in which to sort the results
                public var direction: Direction?

                /// The field on which to sort the Leads
                ///
                /// Example: "created_at"
                public enum By: String, Codable, CaseIterable {
                    case createdAt = "created_at"
                    case updatedAt = "updated_at"
                    case name
                    case firstName = "first_name"
                    case lastName = "last_name"
                    case email
                }

                /// The direction in which to sort the results
                public enum Direction: String, Codable, CaseIterable {
                    case asc
                    case desc
                }

                public init(by: By, direction: Direction? = nil) {
                    self.by = by
                    self.direction = direction
                }

                public var asQuery: [(String, String?)] {
                    let encoder = URLQueryEncoder()
                    encoder.encode(by, forKey: "by")
                    encoder.encode(direction, forKey: "direction")
                    return encoder.items
                }
            }

            public init(isRaw: Bool? = nil, cursor: String? = nil, limit: Int? = nil, filter: Filter? = nil, sort: Sort? = nil) {
                self.isRaw = isRaw
                self.cursor = cursor
                self.limit = limit
                self.filter = filter
                self.sort = sort
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isRaw, forKey: "raw")
                encoder.encode(cursor, forKey: "cursor")
                encoder.encode(limit, forKey: "limit")
                encoder.encode(filter, forKey: "filter", isDeepObject: true)
                encoder.encode(sort, forKey: "sort", isDeepObject: true)
                return encoder.items
            }
        }

        /// Create lead
        public func post(isRaw: Bool? = nil, _ body: ApiDeckLeadAPI.Lead) -> Request<ApiDeckLeadAPI.CreateLeadResponse> {
            .post(path, query: makePostQuery(isRaw), body: body)
        }

        private func makePostQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }
    }
}

extension Paths.Leads {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/lead/leads/{id}`
        public let path: String

        /// Get lead
        public func get(isRaw: Bool? = nil) -> Request<ApiDeckLeadAPI.GetLeadResponse> {
            .get(path, query: makeGetQuery(isRaw))
        }

        private func makeGetQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }

        /// Update lead
        public func patch(isRaw: Bool? = nil, _ body: ApiDeckLeadAPI.Lead) -> Request<ApiDeckLeadAPI.UpdateLeadResponse> {
            .patch(path, query: makePatchQuery(isRaw), body: body)
        }

        private func makePatchQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }

        /// Delete lead
        public func delete(isRaw: Bool? = nil) -> Request<ApiDeckLeadAPI.DeleteLeadResponse> {
            .delete(path, query: makeDeleteQuery(isRaw))
        }

        private func makeDeleteQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }
    }
}

public enum Paths {}
