// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation

public struct Account: Codable {
    /// Number of credits left on your account
    public var balance: Int
    /// List of custom browsers as returned by /api/v1/browser/list
    public var browsers: [Browser]?
    /// Number of free screenshots available for the current month
    public var freeScreenshotsLeft: Int
    /// 1 is your account is authorized to request hosting on Browshot, 0 otherwise (default)
    public var hostingBrowshot: Int
    /// List of private instances as returned by /api/v1/instance/list
    public var instances: [Instance]?
    /// 1 is your account is authorized to create and use private instances, 0 otherwise (default)
    public var privateInstances: Int
    /// List of 10 latest screenshots requests as returned by /api/v1/screenshot/list
    public var screenshots: [Screenshot]?

    public init(balance: Int, browsers: [Browser]? = nil, freeScreenshotsLeft: Int, hostingBrowshot: Int, instances: [Instance]? = nil, privateInstances: Int, screenshots: [Screenshot]? = nil) {
        self.balance = balance
        self.browsers = browsers
        self.freeScreenshotsLeft = freeScreenshotsLeft
        self.hostingBrowshot = hostingBrowshot
        self.instances = instances
        self.privateInstances = privateInstances
        self.screenshots = screenshots
    }

    private enum CodingKeys: String, CodingKey {
        case balance
        case browsers
        case freeScreenshotsLeft = "free_screenshots_left"
        case hostingBrowshot = "hosting_browshot"
        case instances
        case privateInstances = "private_instances"
        case screenshots
    }
}

public struct AccountError: Codable {
    /// Description of the problem that occurred
    public var error: String?
    /// Status of the request - error
    public var status: String?

    public init(error: String? = nil, status: String? = nil) {
        self.error = error
        self.status = status
    }
}

public struct Batch: Codable {
    /// Number of unique URLs in the batch
    public var count: Int?
    /// Number of screenshots failed
    public var failed: Int?
    /// Time of batch completed (UNIX timestamp)
    public var finished: Int?
    /// Batch ID
    public var id: Int?
    /// Number of screenshots finishe
    public var processed: Int?
    /// Time of processing (UNIX timestamp)
    public var started: Int?
    /// Status of the request - "in_queue", "processing", "finished", "error"
    public var status: Status?
    /// URLs to download the batch
    public var urls: [String]?

    /// Status of the request - "in_queue", "processing", "finished", "error"
    public enum Status: String, Codable, CaseIterable {
        case inQueue = "in_queue"
        case processing
        case finished
        case error
    }

    public init(count: Int? = nil, failed: Int? = nil, finished: Int? = nil, id: Int? = nil, processed: Int? = nil, started: Int? = nil, status: Status? = nil, urls: [String]? = nil) {
        self.count = count
        self.failed = failed
        self.finished = finished
        self.id = id
        self.processed = processed
        self.started = started
        self.status = status
        self.urls = urls
    }
}

public struct BatchError: Codable {
    /// Description of the problem that occurred
    public var error: String?
    /// Status of the request - "in_queue", "processing", "finished", "error"
    public var status: String?

    public init(error: String? = nil, status: String? = nil) {
        self.error = error
        self.status = status
    }
}

public struct Browser: Codable {
    /// Flash support: 1 if enabled, 0 if disabled
    public var flash: Int?
    /// Browser ID
    public var id: Int?
    /// JavaScript support: 1 if enabled, 0 if disabled
    public var javascript: Int?
    /// Mobile browser: 1 if true, 0 if false
    public var mobile: Int?
    /// Browser name and version: Firefox 45, etc.
    public var name: String?

    public init(flash: Int? = nil, id: Int? = nil, javascript: Int? = nil, mobile: Int? = nil, name: String? = nil) {
        self.flash = flash
        self.id = id
        self.javascript = javascript
        self.mobile = mobile
        self.name = name
    }
}

public struct BrowserError: Codable {
    /// Description of the problem that occurred
    public var error: String?
    /// Status of the request - error
    public var status: String?

    public init(error: String? = nil, status: String? = nil) {
        self.error = error
        self.status = status
    }
}

public struct Instance: Codable {
    public var browser: Browser?
    /// Instance's country of origin
    public var country: String?
    /// Screen height in pixels
    public var height: Int?
    /// Instance ID (required to requests screenshots)
    public var id: Int?
    /// Instance load: 
    /// < 1: new screenshot requests will be processed immediately, 
    /// 1-2: new screenshot requests will be processed in about two minutes, 
    /// 2-3: new screenshot requests will be processed in about four minutes, 
    /// 3-4: new screenshot requests will be processed in about six minutes, 
    /// etc.
    public var load: Double?
    /// Number of credits for each screenshot
    public var screenshotCost: Int?
    /// Public, shared or private
    public var type: `Type`?
    /// Screen width in pixels
    public var width: Int?

    /// Public, shared or private
    public enum `Type`: String, Codable, CaseIterable {
        case `public`
        case shared
        case `private`
    }

    public init(browser: Browser? = nil, country: String? = nil, height: Int? = nil, id: Int? = nil, load: Double? = nil, screenshotCost: Int? = nil, type: `Type`? = nil, width: Int? = nil) {
        self.browser = browser
        self.country = country
        self.height = height
        self.id = id
        self.load = load
        self.screenshotCost = screenshotCost
        self.type = type
        self.width = width
    }

    private enum CodingKeys: String, CodingKey {
        case browser
        case country
        case height
        case id
        case load
        case screenshotCost = "screenshot_cost"
        case type
        case width
    }
}

public struct InstanceError: Codable {
    /// Description of the problem that occurred
    public var error: String?
    /// Status of the request - error
    public var status: String?

    public init(error: String? = nil, status: String? = nil) {
        self.error = error
        self.status = status
    }
}

public struct InstanceList: Codable {
    public var free: [Instance]?
    public var `private`: [Instance]?
    public var shared: [Instance]?

    public init(free: [Instance]? = nil, `private`: [Instance]? = nil, shared: [Instance]? = nil) {
        self.free = free
        self.private = `private`
        self.shared = shared
    }

    private enum CodingKeys: String, CodingKey {
        case free
        case `private` = "private"
        case shared
    }
}

public struct Screenshot: Codable {
    /// Custom cookie used (see Custom POST Data, Referer and Cookie)
    public var cookie: String?
    /// Number of credits spent for the screenshot
    public var cost: Int?
    /// Number of seconds to wait after page load
    public var delay: Int?
    /// Level of details about the screenshot and the page
    public var details: Int?
    /// Description of the problem that occurred
    public var error: String?
    /// URL of the screenshot (redirections can occur)
    public var finalURL: String?
    /// Number of seconds to wait after page load if Flash elements are present
    public var flashDelay: Int?
    /// Screenshot height
    public var height: Int?
    /// Screenshot ID
    public var id: Int
    /// Instance ID used for the screenshot
    public var instanceID: Int
    /// POST data sent (see Custom POST Data, Referer and Cookie)
    public var postData: String?
    /// Priority given to the screenshot: high (1) to low (3)
    public var priority: Int?
    /// Custom referrer used (see Custom POST Data, Referer and Cookie)
    public var referer: String?
    /// Image scale. Always 1 for desktop browsers; mobiles may change the scale (zoom in or zoom out) to fit the page on the screen
    public var scale: Double?
    /// URL to download the screenshot
    public var screenshotURL: [String: AnyJSON]?
    /// URL of optional javascript file executed after the page load event
    public var script: String?
    /// If the screenshot was shared, show the public URL
    public var sharedURL: String?
    /// Screenshot size requested
    public var size: Size?
    /// Status of the request: "in_queue", "processing", "finished", "error"
    public var status: Status
    /// Original URL requested
    public var url: String
    /// Screenshot width
    public var width: Int?

    /// Screenshot size requested
    public enum Size: String, Codable, CaseIterable {
        case screen
        case page
    }

    /// Status of the request: "in_queue", "processing", "finished", "error"
    public enum Status: String, Codable, CaseIterable {
        case inQueue = "in_queue"
        case processing
        case finished
        case error
    }

    public init(cookie: String? = nil, cost: Int? = nil, delay: Int? = nil, details: Int? = nil, error: String? = nil, finalURL: String? = nil, flashDelay: Int? = nil, height: Int? = nil, id: Int, instanceID: Int, postData: String? = nil, priority: Int? = nil, referer: String? = nil, scale: Double? = nil, screenshotURL: [String: AnyJSON]? = nil, script: String? = nil, sharedURL: String? = nil, size: Size? = nil, status: Status, url: String, width: Int? = nil) {
        self.cookie = cookie
        self.cost = cost
        self.delay = delay
        self.details = details
        self.error = error
        self.finalURL = finalURL
        self.flashDelay = flashDelay
        self.height = height
        self.id = id
        self.instanceID = instanceID
        self.postData = postData
        self.priority = priority
        self.referer = referer
        self.scale = scale
        self.screenshotURL = screenshotURL
        self.script = script
        self.sharedURL = sharedURL
        self.size = size
        self.status = status
        self.url = url
        self.width = width
    }

    private enum CodingKeys: String, CodingKey {
        case cookie
        case cost
        case delay
        case details
        case error
        case finalURL = "final_url"
        case flashDelay = "flash_delay"
        case height
        case id
        case instanceID = "instance_id"
        case postData = "post_data"
        case priority
        case referer
        case scale
        case screenshotURL = "screenshot_url"
        case script
        case sharedURL = "shared_url"
        case size
        case status
        case url
        case width
    }
}

public struct ScreenshotError: Codable {
    /// Number of credits taken
    public var cost: Double?
    /// Description of the problem that occurred
    public var error: String?
    /// Priority given to the screenshot - high (1) to low (3)
    public var priority: Double?
    /// Status of the request - "in_queue", "processing", "finished", "error"
    public var status: String?

    public init(cost: Double? = nil, error: String? = nil, priority: Double? = nil, status: String? = nil) {
        self.cost = cost
        self.error = error
        self.priority = priority
        self.status = status
    }
}

public struct ScreenshotHost: Codable {
    /// Screenshot ID
    public var id: Int?
    /// Status of the request: "error", "ok" or "in_queue"
    public var status: Status?
    /// URL to the hosted screenshot or thumbnail
    public var url: String?

    /// Status of the request: "error", "ok" or "in_queue"
    public enum Status: String, Codable, CaseIterable {
        case error
        case ok
        case inQueue = "in_queue"
    }

    public init(id: Int? = nil, status: Status? = nil, url: String? = nil) {
        self.id = id
        self.status = status
        self.url = url
    }
}

public struct ScreenshotInfoError: Codable {
    /// Description of the problem that occurred
    public var error: String?
    /// Screenshot ID
    public var id: Int?
    /// Status of the request - "in_queue", "processing", "finished", "error"
    public var status: String?

    public init(error: String? = nil, id: Int? = nil, status: String? = nil) {
        self.error = error
        self.id = id
        self.status = status
    }
}

public struct ScreenshotShort: Codable {
    /// Screenshot ID
    public var id: Int?
    /// Status of the request
    public var status: Status?

    /// Status of the request
    public enum Status: String, Codable, CaseIterable {
        case ok
        case error
    }

    public init(id: Int? = nil, status: Status? = nil) {
        self.id = id
        self.status = status
    }
}

public enum AnyJSON: Equatable, Codable {
    case string(String)
    case number(Double)
    case object([String: AnyJSON])
    case array([AnyJSON])
    case bool(Bool)

    var value: Any {
        switch self {
        case .string(let string): return string
        case .number(let double): return double
        case .object(let dictionary): return dictionary
        case .array(let array): return array
        case .bool(let bool): return bool
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .array(array): try container.encode(array)
        case let .object(object): try container.encode(object)
        case let .string(string): try container.encode(string)
        case let .number(number): try container.encode(number)
        case let .bool(bool): try container.encode(bool)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let object = try? container.decode([String: AnyJSON].self) {
            self = .object(object)
        } else if let array = try? container.decode([AnyJSON].self) {
            self = .array(array)
        } else if let string = try? container.decode(String.self) {
            self = .string(string)
        } else if let bool = try? container.decode(Bool.self) {
            self = .bool(bool)
        } else if let number = try? container.decode(Double.self) {
            self = .number(number)
        } else {
            throw DecodingError.dataCorrupted(
                .init(codingPath: decoder.codingPath, debugDescription: "Invalid JSON value.")
            )
        }
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
