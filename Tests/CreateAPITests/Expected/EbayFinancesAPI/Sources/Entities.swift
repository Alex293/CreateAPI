// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation

/// This type is used to express the dollar value and currency used for any transaction retrieved with the Finances API, including an order total, a seller payout, a buyer refund, or a seller credit.
public struct Amount: Codable {
    /// The three-letter ISO 4217 code representing the currency of the amount in the convertedFromValue field. This value is the pre-conversion currency. This field is only returned if/when currency conversion was applied by eBay. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/ba:CurrencyCodeEnum'>eBay API documentation</a>
    public var convertedFromCurrency: String?
    /// The monetary amount before any conversion is performed, in the currency specified by the convertedFromCurrency field. This value is the pre-conversion amount. The value field contains the converted amount of this value, in the currency specified by the currency field. This field is only returned if/when currency conversion was applied by eBay.
    public var convertedFromValue: String?
    /// A three-letter ISO 4217 code that indicates the currency of the amount in the value field. This field is always returned with any container using Amount type. Default: The currency of the authenticated user's country. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/ba:CurrencyCodeEnum'>eBay API documentation</a>
    public var currency: String?
    /// The exchange rate used for the monetary conversion. This field shows the exchange rate used to convert the dollar value in the value field from the dollar value in the convertedFromValue field. This field is only returned when eBay does a currency version, and a currency conversion is generally needed if the buyer is viewing, or has purchased an item on an international site. This field is only returned if/when currency conversion was applied by eBay.
    public var exchangeRate: String?
    /// The monetary amount, in the currency specified by the currency field. This field is always returned with any container using Amount type.
    public var value: String?

    public init(convertedFromCurrency: String? = nil, convertedFromValue: String? = nil, currency: String? = nil, exchangeRate: String? = nil, value: String? = nil) {
        self.convertedFromCurrency = convertedFromCurrency
        self.convertedFromValue = convertedFromValue
        self.currency = currency
        self.exchangeRate = exchangeRate
        self.value = value
    }
}

/// This type is used by the balanceAdjustment container, which shows the seller payout balance that will be applied toward the charges outlined in the charges array.
public struct BalanceAdjustment: Codable {
    /// This type is used to express the dollar value and currency used for any transaction retrieved with the Finances API, including an order total, a seller payout, a buyer refund, or a seller credit.
    public var adjustmentAmount: Amount?
    /// The enumeration value returned here indicates if the charge is a DEBIT or a CREDIT to the seller. Generally, all transfer transaction types are going to be DEBIT, since the money is being tranferred from the seller to eBay. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
    public var adjustmentType: String?

    public init(adjustmentAmount: Amount? = nil, adjustmentType: String? = nil) {
        self.adjustmentAmount = adjustmentAmount
        self.adjustmentType = adjustmentType
    }
}

/// This type is used to express details about the buyer associated with an order. At this time, the only field in this type is the eBay user ID of the buyer, but more fields may get added at a later date.
public struct Buyer: Codable {
    /// The eBay user ID of the order's buyer.
    public var username: String?

    public init(username: String? = nil) {
        self.username = username
    }
}

/// This type is used by the charge container, which is an array of one or more charges related to the transfer.
public struct Charge: Codable {
    /// The unique identifier of an order cancellation. This field is only applicable and returned if the charge is related to an order cancellation.
    public var cancellationID: String?
    /// The unique identifier of a case filed against an order. This field is only applicable and returned if the charge is related to a case filed against an order.
    public var caseID: String?
    /// This type is used to express the dollar value and currency used for any transaction retrieved with the Finances API, including an order total, a seller payout, a buyer refund, or a seller credit.
    public var chargeNetAmount: Amount?
    /// The unique identifier of an Item Not Received (INR) inquiry filed against an order. This field is only applicable and returned if the charge is related to has an INR inquiry filed against the order.
    public var inquiryID: String?
    /// The unique identifier of the order that is associated with the charge.
    public var orderID: String?
    /// The unique identifier of a third-party payment dispute filed against an order. This occurs when the buyer files a dispute against the order with their payment provider, and then the dispute comes into eBay's system. This field is only applicable and returned if the charge is related to a third-party payment dispute filed against an order.
    public var paymentDisputeID: String?
    /// The unique identifier of a buyer refund associated with the charge.
    public var refundID: String?
    /// The unique identifier of an order return. This field is only applicable and returned if the charge is related to an order that was returned by the buyer.
    public var returnID: String?

    public init(cancellationID: String? = nil, caseID: String? = nil, chargeNetAmount: Amount? = nil, inquiryID: String? = nil, orderID: String? = nil, paymentDisputeID: String? = nil, refundID: String? = nil, returnID: String? = nil) {
        self.cancellationID = cancellationID
        self.caseID = caseID
        self.chargeNetAmount = chargeNetAmount
        self.inquiryID = inquiryID
        self.orderID = orderID
        self.paymentDisputeID = paymentDisputeID
        self.refundID = refundID
        self.returnID = returnID
    }

    private enum CodingKeys: String, CodingKey {
        case cancellationID = "cancellationId"
        case caseID = "caseId"
        case chargeNetAmount
        case inquiryID = "inquiryId"
        case orderID = "orderId"
        case paymentDisputeID = "paymentDisputeId"
        case refundID = "refundId"
        case returnID = "returnId"
    }
}

/// This type defines the fields that can be returned in an error.
public struct Error: Codable {
    /// Identifies the type of erro.
    public var category: String?
    /// Name for the primary system where the error occurred. This is relevant for application errors.
    public var domain: String?
    /// A unique number to identify the error.
    public var errorID: Int?
    /// An array of request elements most closely associated to the error.
    public var inputRefIDs: [String]?
    /// A more detailed explanation of the error.
    public var longMessage: String?
    /// Information on how to correct the problem, in the end user's terms and language where applicable.
    public var message: String?
    /// An array of request elements most closely associated to the error.
    public var outputRefIDs: [String]?
    /// An array of name/value pairs that describe details the error condition. These are useful when multiple errors are returned.
    public var parameters: [ErrorParameter]?
    /// Further helps indicate which subsystem the error is coming from. System subcategories include: Initialization, Serialization, Security, Monitoring, Rate Limiting, etc.
    public var subdomain: String?

    public init(category: String? = nil, domain: String? = nil, errorID: Int? = nil, inputRefIDs: [String]? = nil, longMessage: String? = nil, message: String? = nil, outputRefIDs: [String]? = nil, parameters: [ErrorParameter]? = nil, subdomain: String? = nil) {
        self.category = category
        self.domain = domain
        self.errorID = errorID
        self.inputRefIDs = inputRefIDs
        self.longMessage = longMessage
        self.message = message
        self.outputRefIDs = outputRefIDs
        self.parameters = parameters
        self.subdomain = subdomain
    }

    private enum CodingKeys: String, CodingKey {
        case category
        case domain
        case errorID = "errorId"
        case inputRefIDs = "inputRefIds"
        case longMessage
        case message
        case outputRefIDs = "outputRefIds"
        case parameters
        case subdomain
    }
}

public struct ErrorParameter: Codable {
    /// The object of the error.
    public var name: String?
    /// The value of the object.
    public var value: String?

    public init(name: String? = nil, value: String? = nil) {
        self.name = name
        self.value = value
    }
}

/// This type is used to display fees that are automatically deducted from seller payouts.
public struct Fee: Codable {
    /// This type is used to express the dollar value and currency used for any transaction retrieved with the Finances API, including an order total, a seller payout, a buyer refund, or a seller credit.
    public var amount: Amount?
    /// A description of the fee that was deducted from the seller payout.
    public var feeMemo: String?
    /// The enumeration value returned here indicates the type of fee that was deducted from the seller payout. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/api:FeeTypeEnum'>eBay API documentation</a>
    public var feeType: String?

    public init(amount: Amount? = nil, feeMemo: String? = nil, feeType: String? = nil) {
        self.amount = amount
        self.feeMemo = feeMemo
        self.feeType = feeType
    }
}

/// This type provided details on the funding source for the transfer.
public struct FundingSource: Codable {
    /// The brand name of the credit card or the name of the financial institution that is the source of payment. This field may not be populated for other funding sources.
    public var brand: String?
    /// This field provides a note about the funding source. If the seller's credit card or bank account is the funding source, this field might contain the last four digits of the credit card or bank account. This field may also be returned as null.
    public var memo: String?
    /// The string value returned here indicates the funding source. Possible values include the following: AVAILABLE_FUNDS: transfer is funded with seller payout funds CREDIT_CARD: transfer is funded with seller's credit card BANK: transfer is funded with a direct debit to seller's bank account on file with eBay PAY_UPON_INVOICE: eBay will bill the seller for the transfer on the monthly invoice
    public var type: String?

    public init(brand: String? = nil, memo: String? = nil, type: String? = nil) {
        self.brand = brand
        self.memo = memo
        self.type = type
    }
}

/// This type is used to show the fees that are deducted from a seller payout for each line item in an order.
public struct OrderLineItem: Codable {
    /// This type is used to express the dollar value and currency used for any transaction retrieved with the Finances API, including an order total, a seller payout, a buyer refund, or a seller credit.
    public var feeBasisAmount: Amount?
    /// The unique identifier of an order line item.
    public var lineItemID: String?
    /// An array of all fees accrued for the order line item and deducted from a seller payout.
    public var marketplaceFees: [Fee]?

    public init(feeBasisAmount: Amount? = nil, lineItemID: String? = nil, marketplaceFees: [Fee]? = nil) {
        self.feeBasisAmount = feeBasisAmount
        self.lineItemID = lineItemID
        self.marketplaceFees = marketplaceFees
    }

    private enum CodingKeys: String, CodingKey {
        case feeBasisAmount
        case lineItemID = "lineItemId"
        case marketplaceFees
    }
}

/// This type is used to express the details of one seller payout that is returned with the getPayout or getPayouts methods.
public struct Payout: Codable {
    /// This type is used to express the dollar value and currency used for any transaction retrieved with the Finances API, including an order total, a seller payout, a buyer refund, or a seller credit.
    public var amount: Amount?
    /// This field contains additional information provided by the bank and passed on by the payment processor; e.g., the manner in which the transaction will appear on the seller's bank statement. The field is returned only when provided by the bank and processor.
    public var bankReference: String?
    /// This timestamp indicates the date/time when eBay last attempted to process a seller payout but it failed. This field is only returned if a seller payout fails, and the payoutStatus value shows RETRYABLE_FAILED or TERMINAL_FAILED. A seller can filter on the lastAttemptedPayoutDate in a getPayouts request.
    public var lastAttemptedPayoutDate: String?
    /// This timestamp indicates when the seller payout began processing. The following format is used: YYYY-MM-DDTHH:MM:SS.SSSZ. For example, 2015-08-04T19:09:02.768Z. This field is still returned even if the payout was pending but failed (payoutStatus value shows RETRYABLE_FAILED or TERMINAL_FAILED).
    public var payoutDate: String?
    /// The unique identifier of the seller payout. This identifier is generated once eBay begins processing the payout to the seller's bank account.
    public var payoutID: String?
    /// This type provides details about the seller's account that received (or is scheduled to receive) a payout.
    public var payoutInstrument: PayoutInstrument?
    /// This field contains information provided by upstream components, based on internal and external commitments. A typical message would contain the expected arrival time of the payout.
    public var payoutMemo: String?
    /// This enumeration value indicates the current status of the seller payout. For a successful payout, the value returned will be SUCCEEDED. See the PayoutStatusEnum type for more details on each payout status value. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:PayoutStatusEnum'>eBay API documentation</a>
    public var payoutStatus: String?
    /// This field provides more details about the current status of payout. The description returned here will correspond with enumeration value returned in the payoutStatus field. The following shows what description text might appear based on the different payoutStatus values: INITIATED: Preparing to send SUCCEEDED: Funds sent REVERSED: Waiting to retry : Money rejected by seller's bank RETRYABLE_FAILED: Waiting to retry TERMINAL_FAILED: Payout failed
    public var payoutStatusDescription: String?
    /// This integer value indicates the number of monetary transactions (all orders, refunds, and credits, etc.) that have occurred with the corresponding payout. Its value should always be at least 1, since there is at least one order per seller payout.
    public var transactionCount: Int?

    public init(amount: Amount? = nil, bankReference: String? = nil, lastAttemptedPayoutDate: String? = nil, payoutDate: String? = nil, payoutID: String? = nil, payoutInstrument: PayoutInstrument? = nil, payoutMemo: String? = nil, payoutStatus: String? = nil, payoutStatusDescription: String? = nil, transactionCount: Int? = nil) {
        self.amount = amount
        self.bankReference = bankReference
        self.lastAttemptedPayoutDate = lastAttemptedPayoutDate
        self.payoutDate = payoutDate
        self.payoutID = payoutID
        self.payoutInstrument = payoutInstrument
        self.payoutMemo = payoutMemo
        self.payoutStatus = payoutStatus
        self.payoutStatusDescription = payoutStatusDescription
        self.transactionCount = transactionCount
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case bankReference
        case lastAttemptedPayoutDate
        case payoutDate
        case payoutID = "payoutId"
        case payoutInstrument
        case payoutMemo
        case payoutStatus
        case payoutStatusDescription
        case transactionCount
    }
}

/// This type provides details about the seller's account that received (or is scheduled to receive) a payout.
public struct PayoutInstrument: Codable {
    /// This string value is the last four digits of the seller's account number.
    public var accountLastFourDigits: String?
    /// This string value indicates the type of account that received the payout. At this time, seller payouts can only be distributed to bank acounts, so the string value returned in this field will always be BankAccount.
    public var instrumentType: String?
    /// This string value is a seller-provided nickname that the seller uses to represent the bank account.
    public var nickname: String?

    public init(accountLastFourDigits: String? = nil, instrumentType: String? = nil, nickname: String? = nil) {
        self.accountLastFourDigits = accountLastFourDigits
        self.instrumentType = instrumentType
        self.nickname = nickname
    }
}

/// This type is the base response type of the getPayoutSummary method, and contains the total count of seller payouts (that match the input criteria), the total count of monetary transactions (order payment, buyer refunds, or seller credits) associated with those payouts, and the total value of those seller payouts.
public struct PayoutSummaryResponse: Codable {
    /// This type is used to express the dollar value and currency used for any transaction retrieved with the Finances API, including an order total, a seller payout, a buyer refund, or a seller credit.
    public var amount: Amount?
    /// This integer value indicates the total count of payouts to the seller that match the input criteria. This field is always returned, even if there are no payouts that match the input criteria (its value will show 0).
    public var payoutCount: Int?
    /// This integer value indicates the total count of monetary transactions (order payments, buyer refunds, and seller credits) associated with the payouts that match the input criteria. This field is always returned, even if there are no payouts that match the input criteria (its value will show 0). If there is at least one payout that matches the input criteria, the value in this field will be at least 1.
    public var transactionCount: Int?

    public init(amount: Amount? = nil, payoutCount: Int? = nil, transactionCount: Int? = nil) {
        self.amount = amount
        self.payoutCount = payoutCount
        self.transactionCount = transactionCount
    }
}

/// This type is the base response type of the getPayouts method, and contains an array of one or more payouts (that match the input criteria), the total count of payouts in the response, and various pagination data for the results set.
public struct Payouts: Codable {
    /// The URI of the getPayouts call request that produced the current page of the result set.
    public var href: String?
    /// The maximum number of payouts that may be returned per page of the result set. The limit value can be passed in as a query parameter, or if omitted, its value defaults to 20. Note: If this is the last or only page of the result set, the page may contain fewer payouts than the limit value. To determine the number of pages in a result set, divide the total value (total number of payouts matching input criteria) by this limit value, and then round up to the next integer. For example, if the total value was 120 (120 total payouts) and the limit value was 50 (show 50 payouts per page), the total number of pages in the result set is three, so the seller would have to make three separate getPayouts calls to view all payouts matching the input criteria. Maximum: 200 Default: 20
    public var limit: Int?
    /// The getPayouts call URI to use if you wish to view the next page of the result set. This field is only returned if there is a next page of results to view based on the current input criteria.
    public var next: String?
    /// This integer value indicates the actual position that the first payout returned on the current page has in the results set. So, if you wanted to view the 11th payout of the result set, you would set the offset value in the request to 10. In the request, you can use the offset parameter in conjunction with the limit parameter to control the pagination of the output. For example, if offset is set to 30 and limit is set to 10, the call retrieves payouts 31 thru 40 from the resulting collection of payouts. Note: This feature employs a zero-based list, where the first item in the list has an offset of 0. Default: 0 (zero)
    public var offset: Int?
    /// An array of one or more payouts that match the input criteria. Details for each payout include the unique identifier of the payout, the status of the payout, the amount of the payout, and the number of monetary transactions associated with the payout.
    public var payouts: [Payout]?
    /// The getPayouts call URI to use if you wish to view the previous page of the result set. This field is only returned if there is a previous page of results to view based on the current input criteria.
    public var prev: String?
    /// This integer value is the total number of payouts in the results set based on the current input criteria. Based on the total number of payouts that match the criteria, and on the limit and offset values, there may be additional pages in the results set.
    public var total: Int?

    public init(href: String? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, payouts: [Payout]? = nil, prev: String? = nil, total: Int? = nil) {
        self.href = href
        self.limit = limit
        self.next = next
        self.offset = offset
        self.payouts = payouts
        self.prev = prev
        self.total = total
    }
}

/// This field is returned for NON_SALE_CHARGE transactions that contain non-transactional seller fees.
public struct Reference: Codable {
    /// The identifier of the transaction as specified by the referenceType. For example, with a referenceType of item_id, the referenceId refers to a unique item. This item may have several NON_SALE_CHARGE transactions.
    public var referenceID: String?
    /// An enumeration value that identifies the reference type associated with the referenceId. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:ReferenceTypeEnum'>eBay API documentation</a>
    public var referenceType: String?

    public init(referenceID: String? = nil, referenceType: String? = nil) {
        self.referenceID = referenceID
        self.referenceType = referenceType
    }

    private enum CodingKeys: String, CodingKey {
        case referenceID = "referenceId"
        case referenceType
    }
}

/// This type is used by the response payload of the getSellerFundsSummary method. All of the funds returned in getSellerFundsSummary are funds that have not yet been paid to the seller through a seller payout. If there are no funds that are pending, on hold, or being processed for the seller's account, no response payload is returned, and an http status code of 204 - No Content is returned instead.
public struct SellerFundsSummaryResponse: Codable {
    /// This type is used to express the dollar value and currency used for any transaction retrieved with the Finances API, including an order total, a seller payout, a buyer refund, or a seller credit.
    public var availableFunds: Amount?
    /// This type is used to express the dollar value and currency used for any transaction retrieved with the Finances API, including an order total, a seller payout, a buyer refund, or a seller credit.
    public var fundsOnHold: Amount?
    /// This type is used to express the dollar value and currency used for any transaction retrieved with the Finances API, including an order total, a seller payout, a buyer refund, or a seller credit.
    public var processingFunds: Amount?
    /// This type is used to express the dollar value and currency used for any transaction retrieved with the Finances API, including an order total, a seller payout, a buyer refund, or a seller credit.
    public var totalFunds: Amount?

    public init(availableFunds: Amount? = nil, fundsOnHold: Amount? = nil, processingFunds: Amount? = nil, totalFunds: Amount? = nil) {
        self.availableFunds = availableFunds
        self.fundsOnHold = fundsOnHold
        self.processingFunds = processingFunds
        self.totalFunds = totalFunds
    }
}

/// This type is used to express the details of one of the following monetary transactions: a buyer's payment for an order, a refund to the buyer for a returned item or cancelled order, or a credit issued by eBay to the seller's account.
public struct Transaction: Codable {
    /// This type is used to express the dollar value and currency used for any transaction retrieved with the Finances API, including an order total, a seller payout, a buyer refund, or a seller credit.
    public var amount: Amount?
    /// The enumeration value returned in this field indicates if the monetary transaction amount is a (CREDIT) or a (DEBIT) to the seller's account. Typically, the SALE and CREDIT transaction types are credits to the seller's account, and the REFUND, DISPUTE, SHIPPING_LABEL, and TRANSFER transaction types are debits to the seller's account. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
    public var bookingEntry: String?
    /// This type is used to express details about the buyer associated with an order. At this time, the only field in this type is the eBay user ID of the buyer, but more fields may get added at a later date.
    public var buyer: Buyer?
    /// The type of fee. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/api:FeeTypeEnum'>eBay API documentation</a>
    public var feeType: String?
    /// The unique identifier of the eBay order associated with the monetary transaction.
    public var orderID: String?
    /// This array shows the fees that are deducted from a seller payout for each line item in an order.
    public var orderLineItems: [OrderLineItem]?
    /// This string value indicates the entity that is processing the payment.
    public var paymentsEntity: String?
    /// The unique identifier of the seller payout associated with the monetary transaction. This identifier is generated once eBay begins processing the payout for the corresponding order. This field will not be returned if eBay has not yet begun processing the payout for an order.
    public var payoutID: String?
    /// This field contains reference information for the transaction fee. This includes an ID and the type of ID provided (such as item ID).
    public var references: [Reference]?
    /// The Sales Record Number associated with a sales order. Sales Record Numbers are Selling Manager/Selling Manager Pro identifiers that are created at order checkout. Note: For all orders originating after February 1, 2020, a value of 0 will be returned in this field. The Sales Record Number field has also been removed from Seller Hub. Instead of salesRecordReference, depend on orderId instead as the identifier of the order. The salesRecordReference field has been scheduled for deprecation, and a date for when this field will no longer be returned at all will be announced soon.
    public var salesRecordReference: String?
    /// This type is used to express the dollar value and currency used for any transaction retrieved with the Finances API, including an order total, a seller payout, a buyer refund, or a seller credit.
    public var totalFeeAmount: Amount?
    /// This type is used to express the dollar value and currency used for any transaction retrieved with the Finances API, including an order total, a seller payout, a buyer refund, or a seller credit.
    public var totalFeeBasisAmount: Amount?
    /// This timestamp indicates when the monetary transaction (order purchase, buyer refund, seller credit) occurred. The following (UTC) format is used: YYYY-MM-DDTHH:MM:SS.SSSZ. For example, 2015-08-04T19:09:02.768Z.
    public var transactionDate: String?
    /// The unique identifier of the monetary transaction. A monetary transaction can be a sales order, an order refund to the buyer, a credit to the seller's account, a debit to the seller for the purchase of a shipping label, or a transaction where eBay recouped money from the seller if the seller lost a buyer-initiated payment dispute.
    public var transactionID: String?
    /// This field provides more details on shipping label transactions and transactions where the funds are being held by eBay. For shipping label transactions, the transactionMemo gives details about a purchase, a refund, or a price adjustment to the cost of the shipping label. For on-hold transactions, the transactionMemo provides information on the reason for the hold or when the hold will be released (e.g., &quot;Funds on hold. Estimated release on Jun 1&quot;). This field is only returned if applicable/available.
    public var transactionMemo: String?
    /// This enumeration value indicates the current status of the seller payout associated with the monetary transaction. See the TransactionStatusEnum type for more information on the different states. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:TransactionStatusEnum'>eBay API documentation</a>
    public var transactionStatus: String?
    /// This enumeration value indicates whether the monetary transaction is a buyer's payment for an order, a refund to the buyer for a returned item or cancelled order, a credit issued by eBay to the seller's account, a payment dispute between the buyer and seller, or where eBay is billing the seller for an eBay shipping label or another charge (such as a refund to a buyer). Note that the shipping label functionality will initially only be available to a select number of sellers. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:TransactionTypeEnum'>eBay API documentation</a>
    public var transactionType: String?

    public init(amount: Amount? = nil, bookingEntry: String? = nil, buyer: Buyer? = nil, feeType: String? = nil, orderID: String? = nil, orderLineItems: [OrderLineItem]? = nil, paymentsEntity: String? = nil, payoutID: String? = nil, references: [Reference]? = nil, salesRecordReference: String? = nil, totalFeeAmount: Amount? = nil, totalFeeBasisAmount: Amount? = nil, transactionDate: String? = nil, transactionID: String? = nil, transactionMemo: String? = nil, transactionStatus: String? = nil, transactionType: String? = nil) {
        self.amount = amount
        self.bookingEntry = bookingEntry
        self.buyer = buyer
        self.feeType = feeType
        self.orderID = orderID
        self.orderLineItems = orderLineItems
        self.paymentsEntity = paymentsEntity
        self.payoutID = payoutID
        self.references = references
        self.salesRecordReference = salesRecordReference
        self.totalFeeAmount = totalFeeAmount
        self.totalFeeBasisAmount = totalFeeBasisAmount
        self.transactionDate = transactionDate
        self.transactionID = transactionID
        self.transactionMemo = transactionMemo
        self.transactionStatus = transactionStatus
        self.transactionType = transactionType
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case bookingEntry
        case buyer
        case feeType
        case orderID = "orderId"
        case orderLineItems
        case paymentsEntity
        case payoutID = "payoutId"
        case references
        case salesRecordReference
        case totalFeeAmount
        case totalFeeBasisAmount
        case transactionDate
        case transactionID = "transactionId"
        case transactionMemo
        case transactionStatus
        case transactionType
    }
}

/// This type is the base response type of the getTransactionSummary method, and based on the filters that are used in the getTransactionSummary call URI, the response may include total count and amount of the seller's sales and credits, total count and amount of buyer refunds, and total count and amount of seller payment holds.
public struct TransactionSummaryResponse: Codable {
    /// This type is used to express the dollar value and currency used for any transaction retrieved with the Finances API, including an order total, a seller payout, a buyer refund, or a seller credit.
    public var adjustmentAmount: Amount?
    /// The credit debit sign indicator for adjustment. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
    public var adjustmentBookingEntry: String?
    /// Total adjustment count for given payee within a specified period.
    public var adjustmentCount: Int?
    /// This type is used to express the dollar value and currency used for any transaction retrieved with the Finances API, including an order total, a seller payout, a buyer refund, or a seller credit.
    public var balanceTransferAmount: Amount?
    /// The credit debit sign indicator for the balance transfer. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
    public var balanceTransferBookingEntry: String?
    /// The total balance transfer count for given payee within the specified period.
    public var balanceTransferCount: Int?
    /// This type is used to express the dollar value and currency used for any transaction retrieved with the Finances API, including an order total, a seller payout, a buyer refund, or a seller credit.
    public var creditAmount: Amount?
    /// The enumeration value indicates whether the dollar amount in the creditAmount field is a charge (debit) to the seller or a credit. Typically, the enumeration value returned here will be CREDIT. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
    public var creditBookingEntry: String?
    /// This integer value indicates the total number of the seller's sales and/or credits that match the input criteria. Note: Unless the transactionType filter is used in the request to retrieve a specific type of monetary transaction (sale, buyer refund, or seller credit), the creditCount and creditAmount fields account for both order sales and seller credits (the count and value is not distinguished between the two monetary transaction types). This field is generally returned, even if 0, but it will not be returned if a transactionType filter is used, and its value is set to either REFUND, DISPUTE, or SHIPPING_LABEL.
    public var creditCount: Int?
    /// This type is used to express the dollar value and currency used for any transaction retrieved with the Finances API, including an order total, a seller payout, a buyer refund, or a seller credit.
    public var disputeAmount: Amount?
    /// The enumeration value indicates whether the dollar amount in the disputeAmount field is a charge (debit) to the seller or a credit. Typically, the enumeration value returned here will be DEBIT, but its possible that CREDIT could be returned if the seller contested one or more payment disputes and won the dispute. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
    public var disputeBookingEntry: String?
    /// This integer value indicates the total number of payment disputes that have been initiated by one or more buyers. Only the orders that match the input criteria are considered. The Payment Disputes methods in the Fulfillment API can be used by the seller to retrieve more information about any payment disputes. This field is generally returned, even if 0, but it will not be returned if a transactionType filter is used, and its value is set to any value other than DISPUTE.
    public var disputeCount: Int?
    /// This type is used to express the dollar value and currency used for any transaction retrieved with the Finances API, including an order total, a seller payout, a buyer refund, or a seller credit.
    public var nonSaleChargeAmount: Amount?
    /// The credit/debit sign indicator for the non-sale charge. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
    public var nonSaleChargeBookingEntry: String?
    /// The total non-sale charge count for given payee within a specified period.
    public var nonSaleChargeCount: Int?
    /// This type is used to express the dollar value and currency used for any transaction retrieved with the Finances API, including an order total, a seller payout, a buyer refund, or a seller credit.
    public var onHoldAmount: Amount?
    /// The enumeration value indicates whether the dollar amount in the onHoldAmount field is a charge (debit) to the seller or a credit. Typically, the enumeration value returned here will be CREDIT, since on-hold funds should eventually be released as part of a payout to the seller once the hold is cleared. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
    public var onHoldBookingEntry: String?
    /// This integer value indicates the total number of order sales where the associated funds are on hold. Only the orders that match the input criteria are considered. This field is generally returned, even if 0, but it will not be returned if a transactionStatus filter is used, and its value is set to any value other than FUNDS_ON_HOLD.
    public var onHoldCount: Int?
    /// This type is used to express the dollar value and currency used for any transaction retrieved with the Finances API, including an order total, a seller payout, a buyer refund, or a seller credit.
    public var refundAmount: Amount?
    /// The enumeration value indicates whether the dollar amount in the refundAmount field is a charge (debit) to the seller or a credit. Typically, the enumeration value returned here will be DEBIT since this a refund from the seller to the buyer. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
    public var refundBookingEntry: String?
    /// This integer value indicates the total number of buyer refunds that match the input criteria. This field is generally returned, even if 0, but it will not be returned if a transactionType filter is used, and its value is set to any value other than REFUND.
    public var refundCount: Int?
    /// This type is used to express the dollar value and currency used for any transaction retrieved with the Finances API, including an order total, a seller payout, a buyer refund, or a seller credit.
    public var shippingLabelAmount: Amount?
    /// The enumeration value indicates whether the dollar amount in the shippingLabelAmount field is a charge (debit) to the seller or a credit. Typically, the enumeration value returned here will be DEBIT, as eBay will charge the seller when eBay shipping labels are purchased, but it can be CREDIT if the seller was refunded for a shipping label or was possibly overcharged for a shipping label. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
    public var shippingLabelBookingEntry: String?
    /// This is the total number of eBay shipping labels purchased by the seller. The count returned here may depend on the specified input criteria.
    public var shippingLabelCount: Int?
    /// This type is used to express the dollar value and currency used for any transaction retrieved with the Finances API, including an order total, a seller payout, a buyer refund, or a seller credit.
    public var transferAmount: Amount?
    /// The enumeration value indicates whether the dollar amount in the transferAmount field is a charge (debit) to the seller or a credit. Typically, the enumeration value returned here will be DEBIT since this a seller reimbursement to eBay for buyer refunds. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>
    public var transferBookingEntry: String?
    /// This integer value indicates the total number of buyer refund transfers that match the input criteria. This field is generally returned, even if 0, but it will not be returned if a transactionType filter is used, and its value is set to any value other than TRANSFER.
    public var transferCount: Int?

    public init(adjustmentAmount: Amount? = nil, adjustmentBookingEntry: String? = nil, adjustmentCount: Int? = nil, balanceTransferAmount: Amount? = nil, balanceTransferBookingEntry: String? = nil, balanceTransferCount: Int? = nil, creditAmount: Amount? = nil, creditBookingEntry: String? = nil, creditCount: Int? = nil, disputeAmount: Amount? = nil, disputeBookingEntry: String? = nil, disputeCount: Int? = nil, nonSaleChargeAmount: Amount? = nil, nonSaleChargeBookingEntry: String? = nil, nonSaleChargeCount: Int? = nil, onHoldAmount: Amount? = nil, onHoldBookingEntry: String? = nil, onHoldCount: Int? = nil, refundAmount: Amount? = nil, refundBookingEntry: String? = nil, refundCount: Int? = nil, shippingLabelAmount: Amount? = nil, shippingLabelBookingEntry: String? = nil, shippingLabelCount: Int? = nil, transferAmount: Amount? = nil, transferBookingEntry: String? = nil, transferCount: Int? = nil) {
        self.adjustmentAmount = adjustmentAmount
        self.adjustmentBookingEntry = adjustmentBookingEntry
        self.adjustmentCount = adjustmentCount
        self.balanceTransferAmount = balanceTransferAmount
        self.balanceTransferBookingEntry = balanceTransferBookingEntry
        self.balanceTransferCount = balanceTransferCount
        self.creditAmount = creditAmount
        self.creditBookingEntry = creditBookingEntry
        self.creditCount = creditCount
        self.disputeAmount = disputeAmount
        self.disputeBookingEntry = disputeBookingEntry
        self.disputeCount = disputeCount
        self.nonSaleChargeAmount = nonSaleChargeAmount
        self.nonSaleChargeBookingEntry = nonSaleChargeBookingEntry
        self.nonSaleChargeCount = nonSaleChargeCount
        self.onHoldAmount = onHoldAmount
        self.onHoldBookingEntry = onHoldBookingEntry
        self.onHoldCount = onHoldCount
        self.refundAmount = refundAmount
        self.refundBookingEntry = refundBookingEntry
        self.refundCount = refundCount
        self.shippingLabelAmount = shippingLabelAmount
        self.shippingLabelBookingEntry = shippingLabelBookingEntry
        self.shippingLabelCount = shippingLabelCount
        self.transferAmount = transferAmount
        self.transferBookingEntry = transferBookingEntry
        self.transferCount = transferCount
    }
}

/// This is the base response type of the getTransactions method. The getTransactions response includes details on one or more monetary transactions that match the input criteria, as well as pagination data.
public struct Transactions: Codable {
    /// The URI of the getTransactions method request that produced the current page of the result set.
    public var href: String?
    /// The maximum number of monetary transactions that may be returned per page of the result set. The limit value can be passed in as a query parameter, or if omitted, its value defaults to 20. Note: If this is the last or only page of the result set, the page may contain fewer monetary transactions than the limit value. To determine the number of pages in a result set, divide the total value (total number of monetary transactions matching input criteria) by this limit value, and then round up to the next integer. For example, if the total value was 120 (120 total monetary transactions) and the limit value was 50 (show 50 monetary transactions per page), the total number of pages in the result set is three, so the seller would have to make three separate getTransactions calls to view all monetary transactions matching the input criteria. Maximum: 200 Default: 20
    public var limit: Int?
    /// The getTransactions method URI to use if you wish to view the next page of the result set. This field is only returned if there is a next page of results to view based on the current input criteria.
    public var next: String?
    /// This integer value indicates the actual position that the first monetary transaction returned on the current page has in the results set. So, if you wanted to view the 11th monetary transaction of the result set, you would set the offset value in the request to 10. In the request, you can use the offset parameter in conjunction with the limit parameter to control the pagination of the output. For example, if offset is set to 30 and limit is set to 10, the method retrieves monetary transactions 31 thru 40 from the resulting collection of monetary transactions. Note: This feature employs a zero-based list, where the first item in the list has an offset of 0. Default: 0 (zero)
    public var offset: Int?
    /// The getTransactions method URI to use if you wish to view the previous page of the result set. This field is only returned if there is a previous page of results to view based on the current input criteria.
    public var prev: String?
    /// This integer value is the total amount of monetary transactions in the result set based on the current input criteria. Based on the total number of monetary transactions that match the criteria, and on the limit and offset values, there may be additional pages in the results set.
    public var total: Int?
    /// An array of one or more monetary transactions that match the input criteria. Details for each monetary transaction may include the unique identifier of the order associated with the monetary transaction, the status of the transaction, the amount of the order, the order's buyer, and the unique identifier of the payout (if a payout has been initiated/issued for the order).
    public var transactions: [Transaction]?

    public init(href: String? = nil, limit: Int? = nil, next: String? = nil, offset: Int? = nil, prev: String? = nil, total: Int? = nil, transactions: [Transaction]? = nil) {
        self.href = href
        self.limit = limit
        self.next = next
        self.offset = offset
        self.prev = prev
        self.total = total
        self.transactions = transactions
    }
}

/// This type is the base response type used by TRANSFER transaction type that is returned in the response.
public struct Transfer: Codable {
    /// This type provided details on the funding source for the transfer.
    public var fundingSource: FundingSource?
    /// This timestamp indicates the date/time of the transfer. The following (UTC) format is used: YYYY-MM-DDTHH:MM:SS.SSSZ. For example, 2020-08-04T19:09:02.768Z
    public var transactionDate: String?
    /// This type is used to express the dollar value and currency used for any transaction retrieved with the Finances API, including an order total, a seller payout, a buyer refund, or a seller credit.
    public var transferAmount: Amount?
    /// This type is used by the transferDetail container, which provides more details about the transfer and the charge(s) associated with the transfer.
    public var transferDetail: TransferDetail?
    /// The unique identifier of the TRANSFER transaction type. This is the same value that was passed into the end of the call URI.
    public var transferID: String?

    public init(fundingSource: FundingSource? = nil, transactionDate: String? = nil, transferAmount: Amount? = nil, transferDetail: TransferDetail? = nil, transferID: String? = nil) {
        self.fundingSource = fundingSource
        self.transactionDate = transactionDate
        self.transferAmount = transferAmount
        self.transferDetail = transferDetail
        self.transferID = transferID
    }

    private enum CodingKeys: String, CodingKey {
        case fundingSource
        case transactionDate
        case transferAmount
        case transferDetail
        case transferID = "transferId"
    }
}

/// This type is used by the transferDetail container, which provides more details about the transfer and the charge(s) associated with the transfer.
public struct TransferDetail: Codable {
    /// This type is used by the balanceAdjustment container, which shows the seller payout balance that will be applied toward the charges outlined in the charges array.
    public var balanceAdjustment: BalanceAdjustment?
    /// This container is an array of one or more charges related to the transfer. Charges can be related to an order cancellation, order return, case, payment dispute, etc.
    public var charges: [Charge]?
    /// This type is used to express the dollar value and currency used for any transaction retrieved with the Finances API, including an order total, a seller payout, a buyer refund, or a seller credit.
    public var totalChargeNetAmount: Amount?

    public init(balanceAdjustment: BalanceAdjustment? = nil, charges: [Charge]? = nil, totalChargeNetAmount: Amount? = nil) {
        self.balanceAdjustment = balanceAdjustment
        self.charges = charges
        self.totalChargeNetAmount = totalChargeNetAmount
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
