// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation

public struct Namespace: Codable {
    public var id: String?
    public var name: String?
    public var slug: String?

    public init(id: String? = nil, name: String? = nil, slug: String? = nil) {
        self.id = id
        self.name = name
        self.slug = slug
    }
}

public struct DataType: Codable {
    public var id: String?
    public var namespace: Namespace?
    public var slug: String?
    public var title: String?
    public var name: String?
    public var showNavigationLink: String?
    public var type: [String: AnyJSON]?
    public var modelSchema: String?

    public init(id: String? = nil, namespace: Namespace? = nil, slug: String? = nil, title: String? = nil, name: String? = nil, showNavigationLink: String? = nil, type: [String: AnyJSON]? = nil, modelSchema: String? = nil) {
        self.id = id
        self.namespace = namespace
        self.slug = slug
        self.title = title
        self.name = name
        self.showNavigationLink = showNavigationLink
        self.type = type
        self.modelSchema = modelSchema
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case namespace
        case slug
        case title
        case name
        case showNavigationLink = "show_navigation_link"
        case type
        case modelSchema = "model_schema"
    }
}

public struct Schema: Codable {
    public var id: String?
    public var namespace: Namespace?
    public var uri: String?
    public var schema: String?

    public init(id: String? = nil, namespace: Namespace? = nil, uri: String? = nil, schema: String? = nil) {
        self.id = id
        self.namespace = namespace
        self.uri = uri
        self.schema = schema
    }
}

public struct Connection: Codable {
    public var id: String?
    public var namespace: Namespace?
    public var name: String?
    public var url: String?
    public var key: String?
    public var token: String?
    public var parameters: [Parameter]?
    public var headers: [Header]?

    public struct Parameter: Codable {
        public var key: String?
        public var value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }
    }

    public struct Header: Codable {
        public var key: String?
        public var value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }
    }

    public init(id: String? = nil, namespace: Namespace? = nil, name: String? = nil, url: String? = nil, key: String? = nil, token: String? = nil, parameters: [Parameter]? = nil, headers: [Header]? = nil) {
        self.id = id
        self.namespace = namespace
        self.name = name
        self.url = url
        self.key = key
        self.token = token
        self.parameters = parameters
        self.headers = headers
    }
}

public struct Webhook: Codable {
    public var id: String?
    public var namespace: Namespace?
    public var name: String?
    public var path: String?
    public var parameters: [Parameter]?
    public var headers: [Header]?

    public struct Parameter: Codable {
        public var key: String?
        public var value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }
    }

    public struct Header: Codable {
        public var key: String?
        public var value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }
    }

    public init(id: String? = nil, namespace: Namespace? = nil, name: String? = nil, path: String? = nil, parameters: [Parameter]? = nil, headers: [Header]? = nil) {
        self.id = id
        self.namespace = namespace
        self.name = name
        self.path = path
        self.parameters = parameters
        self.headers = headers
    }
}

public struct ConnectionRole: Codable {
    public var id: String?
    public var namespace: Namespace?
    public var name: String?
    public var connection: [Connection]?
    public var webhook: [Webhook]?

    public init(id: String? = nil, namespace: Namespace? = nil, name: String? = nil, connection: [Connection]? = nil, webhook: [Webhook]? = nil) {
        self.id = id
        self.namespace = namespace
        self.name = name
        self.connection = connection
        self.webhook = webhook
    }
}

public struct Observer: Codable {
    public var id: String?
    public var namespace: Namespace?
    public var name: String?
    public var type: [String: AnyJSON]?
    public var dataType: DataType?
    public var triggers: String?

    public init(id: String? = nil, namespace: Namespace? = nil, name: String? = nil, type: [String: AnyJSON]? = nil, dataType: DataType? = nil, triggers: String? = nil) {
        self.id = id
        self.namespace = namespace
        self.name = name
        self.type = type
        self.dataType = dataType
        self.triggers = triggers
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case namespace
        case name
        case type
        case dataType = "data_type"
        case triggers
    }
}

public struct Scheduler: Codable {
    public var id: String?
    public var namespace: Namespace?
    public var name: String?
    public var expression: String?
    public var isActivated: Bool?

    public init(id: String? = nil, namespace: Namespace? = nil, name: String? = nil, expression: String? = nil, isActivated: Bool? = nil) {
        self.id = id
        self.namespace = namespace
        self.name = name
        self.expression = expression
        self.isActivated = isActivated
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case namespace
        case name
        case expression
        case isActivated = "activated"
    }
}

public struct Translator: Codable {
    public var id: String?
    public var namespace: Namespace?
    public var name: String?
    public var type: `Type`?
    public var style: Style?
    public var customDataType: DataType?
    public var sourceDataType: DataType?
    public var targetDataType: DataType?
    public var transformation: String?

    public enum `Type`: String, Codable, CaseIterable {
        case `import` = "Import"
        case export = "Export"
        case convert = "Convert"
        case update = "Update"
    }

    public enum Style: String, Codable, CaseIterable {
        case ruby = "Ruby"
        case liquid = "Liquid"
        case xslt
    }

    public init(id: String? = nil, namespace: Namespace? = nil, name: String? = nil, type: `Type`? = nil, style: Style? = nil, customDataType: DataType? = nil, sourceDataType: DataType? = nil, targetDataType: DataType? = nil, transformation: String? = nil) {
        self.id = id
        self.namespace = namespace
        self.name = name
        self.type = type
        self.style = style
        self.customDataType = customDataType
        self.sourceDataType = sourceDataType
        self.targetDataType = targetDataType
        self.transformation = transformation
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case namespace
        case name
        case type
        case style
        case customDataType = "custom_data_type"
        case sourceDataType = "source_data_type"
        case targetDataType = "target_data_type"
        case transformation
    }
}

public struct Flow: Codable {
    public var id: String?
    public var namespace: Namespace?
    public var name: String?
    public var isActive: Bool?
    public var event: [String: AnyJSON]?
    public var translator: Translator?
    public var responseTranslator: Translator?
    public var customDataType: DataType?
    public var webhook: Webhook?
    public var connectionRole: ConnectionRole?
    public var isNotifyRequest: Bool?
    public var isNotifyResponse: Bool?

    public init(id: String? = nil, namespace: Namespace? = nil, name: String? = nil, isActive: Bool? = nil, event: [String: AnyJSON]? = nil, translator: Translator? = nil, responseTranslator: Translator? = nil, customDataType: DataType? = nil, webhook: Webhook? = nil, connectionRole: ConnectionRole? = nil, isNotifyRequest: Bool? = nil, isNotifyResponse: Bool? = nil) {
        self.id = id
        self.namespace = namespace
        self.name = name
        self.isActive = isActive
        self.event = event
        self.translator = translator
        self.responseTranslator = responseTranslator
        self.customDataType = customDataType
        self.webhook = webhook
        self.connectionRole = connectionRole
        self.isNotifyRequest = isNotifyRequest
        self.isNotifyResponse = isNotifyResponse
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case namespace
        case name
        case isActive = "active"
        case event
        case translator
        case responseTranslator = "response_translator"
        case customDataType = "custom_data_type"
        case webhook
        case connectionRole = "connection_role"
        case isNotifyRequest = "notify_request"
        case isNotifyResponse = "notify_response"
    }
}

public enum AnyJSON: Equatable, Codable {
    case string(String)
    case number(Double)
    case object([String: AnyJSON])
    case array([AnyJSON])
    case bool(Bool)

    var value: Any {
        switch self {
        case .string(let string): return string
        case .number(let double): return double
        case .object(let dictionary): return dictionary
        case .array(let array): return array
        case .bool(let bool): return bool
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .array(array): try container.encode(array)
        case let .object(object): try container.encode(object)
        case let .string(string): try container.encode(string)
        case let .number(number): try container.encode(number)
        case let .bool(bool): try container.encode(bool)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let object = try? container.decode([String: AnyJSON].self) {
            self = .object(object)
        } else if let array = try? container.decode([AnyJSON].self) {
            self = .array(array)
        } else if let string = try? container.decode(String.self) {
            self = .string(string)
        } else if let bool = try? container.decode(Bool.self) {
            self = .bool(bool)
        } else if let number = try? container.decode(Double.self) {
            self = .number(number)
        } else {
            throw DecodingError.dataCorrupted(
                .init(codingPath: decoder.codingPath, debugDescription: "Invalid JSON value.")
            )
        }
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
