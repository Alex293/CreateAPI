// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import Get

extension Paths.Connection {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/setup/connection/{id}`
        public let path: String

        /// Retrieve an existing connection
        ///
        /// Retrieves the details of an existing connection. You need only supply the unique connection identifier that was returned upon connection creation.
        public var get: Request<CenitAPI.Connection> {
            .get(path)
        }

        /// Delete a connection
        ///
        /// Permanently deletes a connection. It cannot be undone.
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var connection: Connection {
        Connection(path: "/setup/connection")
    }

    public struct Connection {
        /// Path: `/setup/connection`
        public let path: String

        /// Returns a list of connections
        ///
        /// Returns a list of connections you've previously created. The connections are returned in sorted order, with the most recent connection appearing first.
        public var get: Request<[CenitAPI.Connection]> {
            .get(path)
        }

        /// Create or update a connection
        ///
        /// Creates or updates the specified connection by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
        public var post: Request<CenitAPI.Connection> {
            .post(path)
        }
    }
}

extension Paths.ConnectionRole {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/setup/connection_role/{id}`
        public let path: String

        /// Return a connection role
        ///
        /// Returns a connection role
        public var get: Request<CenitAPI.ConnectionRole> {
            .get(path)
        }

        /// Delete a connection role.
        ///
        /// Deletes the specified connection role.
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var connectionRole: ConnectionRole {
        ConnectionRole(path: "/setup/connection_role")
    }

    public struct ConnectionRole {
        /// Path: `/setup/connection_role`
        public let path: String

        /// Returns a list of connection roles
        ///
        /// Returns a list of connection roles you've previously created. The connection roles are returned in sorted order, with the most recent connection role appearing first.
        public var get: Request<[CenitAPI.ConnectionRole]> {
            .get(path)
        }

        /// Create or update a connection role
        ///
        /// Creates or updates the specified connection role by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
        public var post: Request<CenitAPI.ConnectionRole> {
            .post(path)
        }
    }
}

extension Paths {
    public static var dataType: DataType {
        DataType(path: "/setup/data_type")
    }

    public struct DataType {
        /// Path: `/setup/data_type`
        public let path: String

        /// Returns a list of data types
        ///
        /// Returns a list of data types you've previously created. The data types are returned in sorted order, with the most recent DataType appearing first.
        public var get: Request<[CenitAPI.DataType]> {
            .get(path)
        }

        /// Create or update a data type
        ///
        /// Creates or updates the specified data type by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
        public var post: Request<CenitAPI.DataType> {
            .post(path)
        }
    }
}

extension Paths.DataType {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/setup/data_type/{id}`
        public let path: String

        /// Retrieve a data type
        ///
        /// Retrieves the details of an existing data type. You need only supply the unique data  type identifier that was returned upon DataType creation.
        public var get: Request<CenitAPI.DataType> {
            .get(path)
        }

        /// Delete a data type
        ///
        /// Deletes the specified data type.
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var observer: Observer {
        Observer(path: "/setup/observer")
    }

    public struct Observer {
        /// Path: `/setup/observer`
        public let path: String

        /// Returns a list of events
        ///
        /// Returns a list of events you've previously created. The events are returned in sorted order, with the most recent event appearing first.
        public var get: Request<[CenitAPI.Observer]> {
            .get(path)
        }

        /// Create or update an event
        ///
        /// Creates or updates the specified event observer. Any parameters not provided will be left unchanged.
        public var post: Request<CenitAPI.Observer> {
            .post(path)
        }
    }
}

extension Paths.Observer {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/setup/observer/{id}`
        public let path: String

        /// Retrieve an existing event
        ///
        /// Retrieves the details of an existing event. You need only supply the unique event identifier that was returned upon event creation.
        public var get: Request<CenitAPI.Observer> {
            .get(path)
        }

        /// Delete an event
        ///
        /// Deletes the specified event observer.
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var scheduler: Scheduler {
        Scheduler(path: "/setup/scheduler")
    }

    public struct Scheduler {
        /// Path: `/setup/scheduler`
        public let path: String

        /// Returns a list of schedulers
        ///
        /// Returns a list of schedulers you've previously created. The schedulers are returned in sorted order, with the most recent scheduler appearing first.
        public var get: Request<[CenitAPI.Scheduler]> {
            .get(path)
        }

        /// Create or update an scheduler
        ///
        /// Creates or updates the specified scheduler. Any parameters not provided will be left unchanged.
        public var post: Request<CenitAPI.Scheduler> {
            .post(path)
        }
    }
}

extension Paths.Scheduler {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/setup/scheduler/{id}`
        public let path: String

        /// Retrieve an existing schedule
        ///
        /// Retrieves the details of an existing scheduler. You need only supply the unique scheduler identifier that was returned upon scheduler creation.
        public var get: Request<CenitAPI.Scheduler> {
            .get(path)
        }

        /// Delete an schedule
        ///
        /// Deletes the specified scheduler.
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var flow: Flow {
        Flow(path: "/setup/flow")
    }

    public struct Flow {
        /// Path: `/setup/flow`
        public let path: String

        /// Returns a list of flows
        ///
        /// Returns a list of flows you've previously created. The flows are returned in sorted order, with the most recent flow appearing first.
        public var get: Request<[CenitAPI.Flow]> {
            .get(path)
        }

        /// Create or update a flow
        ///
        /// Creates or updates the specified flow. Any parameters not provided will be left unchanged.
        public var post: Request<CenitAPI.Flow> {
            .post(path)
        }
    }
}

extension Paths.Flow {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/setup/flow/{id}`
        public let path: String

        /// Retrieve an existing flow
        ///
        /// Retrieves the details of an existing flow. You need only supply the unique flow identifier that was returned upon flow creation.
        public var get: Request<CenitAPI.Flow> {
            .get(path)
        }

        /// Delete a flow.
        ///
        /// Deletes the specified flow.
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var schema: Schema {
        Schema(path: "/setup/schema")
    }

    public struct Schema {
        /// Path: `/setup/schema`
        public let path: String

        /// Returns a list of schemas
        ///
        /// Returns a list of schemas you've previously created. The schemas are returned in sorted order, with the most recent schema appearing first.
        public var get: Request<[CenitAPI.Schema]> {
            .get(path)
        }

        /// Create or update an schema
        ///
        /// Creates or updates the specified schema. Any parameters not provided will be left unchanged.
        public var post: Request<CenitAPI.Schema> {
            .post(path)
        }
    }
}

extension Paths.Schema {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/setup/schema/{id}`
        public let path: String

        /// Retrieve an existing schema
        ///
        /// Retrieves the details of an existing schema. You need only supply the unique schema identifier that was returned upon schema creation.
        public var get: Request<CenitAPI.Schema> {
            .get(path)
        }

        /// Delete an schema.
        ///
        /// Deletes the specified schema.
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var translator: Translator {
        Translator(path: "/setup/translator")
    }

    public struct Translator {
        /// Path: `/setup/translator`
        public let path: String

        /// Returns a list of translators
        ///
        /// Returns a list of translators you've previously created. The translators are returned in sorted order, with the most recent translator appearing first.
        public var get: Request<[CenitAPI.Translator]> {
            .get(path)
        }

        /// Create or update a translator
        ///
        /// Creates or updates the specified translator. Any parameters not provided will be left unchanged.
        public var post: Request<CenitAPI.Translator> {
            .post(path)
        }
    }
}

extension Paths.Translator {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/setup/translator/{id}`
        public let path: String

        /// Retrieve an existing translator
        ///
        /// Retrieves the details of an existing translator. You need only supply the unique translator identifier that was returned upon translator creation.
        public var get: Request<CenitAPI.Translator> {
            .get(path)
        }

        /// Delete a translator
        ///
        /// Deletes the specified translator.
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var webhook: Webhook {
        Webhook(path: "/setup/webhook")
    }

    public struct Webhook {
        /// Path: `/setup/webhook`
        public let path: String

        /// Returns a list of webhooks
        ///
        /// Returns a list of webhooks you've previously created. The webhooks are returned in sorted order, with the most recent webhook appearing first.
        public var get: Request<[CenitAPI.Webhook]> {
            .get(path)
        }

        /// Create or update a webhook
        ///
        /// Creates or updates the specified webhook. Any parameters not provided will be left unchanged.
        public var post: Request<CenitAPI.Webhook> {
            .post(path)
        }
    }
}

extension Paths.Webhook {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/setup/webhook/{id}`
        public let path: String

        /// Retrieve an existing webhook
        ///
        /// Retrieves the details of an existing webhook. You need only supply the unique webhook identifier that was returned upon webhook creation.
        public var get: Request<CenitAPI.Webhook> {
            .get(path)
        }

        /// Delete a webhook
        ///
        /// Deletes the specified webhook.
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var namespace: Namespace {
        Namespace(path: "/setup/namespace")
    }

    public struct Namespace {
        /// Path: `/setup/namespace`
        public let path: String

        /// Returns a list of namespaces
        ///
        /// Returns a list of namespaces you've previously created. The namespaces are returned in sorted order, with the most recent namespace appearing first.
        public var get: Request<[CenitAPI.Namespace]> {
            .get(path)
        }

        /// Create or update a namespace
        ///
        /// Creates or updates the specified namespace. Any parameters not provided will be left unchanged.
        public var post: Request<CenitAPI.Namespace> {
            .post(path)
        }
    }
}

extension Paths.Namespace {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/setup/namespace/{id}`
        public let path: String

        /// Retrieve an existing namespace
        ///
        /// Retrieves the details of an existing namespace. You need only supply the unique webhook namespace that was returned upon namespace creation.
        public var get: Request<CenitAPI.Namespace> {
            .get(path)
        }

        /// Delete a namespace
        ///
        /// Deletes the specified namespace.
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

public enum Paths {}
