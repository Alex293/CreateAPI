// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import Get
import URLQueryEncoder

extension Paths {
    public static var articlesearchJSON: ArticlesearchJSON {
        ArticlesearchJSON(path: "/articlesearch.json")
    }

    public struct ArticlesearchJSON {
        /// Path: `/articlesearch.json`
        public let path: String

        /// Article Search
        ///
        /// Article Search requests use the following URI structure:
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetResponse: Decodable {
            public var response: Response?

            public struct Response: Decodable {
                public var docs: [NYTArticleSearchAPI.Doc]?
                public var meta: Meta?

                public struct Meta: Decodable {
                    public var hits: Int?
                    public var offset: Int?
                    public var time: Int?

                    public init(hits: Int? = nil, offset: Int? = nil, time: Int? = nil) {
                        self.hits = hits
                        self.offset = offset
                        self.time = time
                    }
                }

                public init(docs: [NYTArticleSearchAPI.Doc]? = nil, meta: Meta? = nil) {
                    self.docs = docs
                    self.meta = meta
                }
            }

            public init(response: Response? = nil) {
                self.response = response
            }
        }

        public struct GetParameters {
            public var q: String?
            public var fq: String?
            public var beginDate: String?
            public var endDate: String?
            public var sort: Sort?
            public var fl: String?
            public var isHl: Bool?
            public var page: Int?
            public var facetField: String?
            public var isFacetFilter: Bool?

            public enum Sort: String, Codable, CaseIterable {
                case newest
                case oldest
            }

            public init(q: String? = nil, fq: String? = nil, beginDate: String? = nil, endDate: String? = nil, sort: Sort? = nil, fl: String? = nil, isHl: Bool? = nil, page: Int? = nil, facetField: String? = nil, isFacetFilter: Bool? = nil) {
                self.q = q
                self.fq = fq
                self.beginDate = beginDate
                self.endDate = endDate
                self.sort = sort
                self.fl = fl
                self.isHl = isHl
                self.page = page
                self.facetField = facetField
                self.isFacetFilter = isFacetFilter
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(["q": q])
                encoder.encode(["fq": fq])
                encoder.encode(["begin_date": beginDate])
                encoder.encode(["end_date": endDate])
                encoder.encode(["sort": sort])
                encoder.encode(["fl": fl])
                encoder.encode(["hl": isHl])
                encoder.encode(["page": page])
                encoder.encode(["facet_field": facetField])
                encoder.encode(["facet_filter": isFacetFilter])
                return encoder.items
            }
        }
    }
}

public enum Paths {}
