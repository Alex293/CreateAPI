// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import NaiveDate

public struct LoginRequest: Codable {
    /// The email
    ///
    /// Example: "paulsimon@mysupercompany.com"
    public var login: String
    /// Your password
    ///
    /// Example: "I@mW0nder$Full"
    public var password: String

    public init(login: String, password: String) {
        self.login = login
        self.password = password
    }
}

public struct APICredentials: Codable {
    /// Your API credential list
    ///
    /// Example:
    ///
    /// [
    ///   {
    ///     "primaryToken" : "3b22980d8d1143c6ba7adf4e55b9a153",
    ///     "productName" : "UserApi",
    ///     "secondaryToken" : "162ae17fd52044c38cce3388ea5b0c91"
    ///   }
    /// ]
    public var credentials: [APICredential]?

    public init(credentials: [APICredential]? = nil) {
        self.credentials = credentials
    }
}

/// Your api credential
public struct APICredential: Codable {
    /// The product name related to this credential
    ///
    /// Example: "UserAPI"
    public var productName: String?
    /// The primary token to be used in the next call in the user scope API
    ///
    /// Example: "3b22980d8d1143c6ba7adf4e55b9a153"
    public var primaryToken: String?
    /// The secondary token. Could be usefull if you want to share your access with someone else.
    ///
    /// Example: "162ae17fd52044c38cce3388ea5b0c91"
    public var secondaryToken: String?

    public init(productName: String? = nil, primaryToken: String? = nil, secondaryToken: String? = nil) {
        self.productName = productName
        self.primaryToken = primaryToken
        self.secondaryToken = secondaryToken
    }
}

public struct RegisterRequest: Codable {
    /// Your email. We refuse disposable email.
    ///
    /// Example: "myemail@mycompany.com"
    public var email: String
    /// The password you want to use for your new account. \
    /// The password length must be greater or equals to 6 and lower or equals to 128. \
    /// The password must contains at least one number and one special character
    ///
    /// Example: "I@mW0nder$Full"
    public var password: String
    /// Can be null. Default: en-GB. The culture name you want to use. FYI. \
    /// The email activation will use this culture.
    ///
    /// Example: "en-GB"
    public var cultureName: String?
    /// The user id of your commercial in BeezUP.
    ///
    /// Example: "47ea14ab-195d-4f9a-a24e-32c329ee40f6"
    public var commercialOwnerUserID: String?

    public init(email: String, password: String, cultureName: String? = nil, commercialOwnerUserID: String? = nil) {
        self.email = email
        self.password = password
        self.cultureName = cultureName
        self.commercialOwnerUserID = commercialOwnerUserID
    }

    private enum CodingKeys: String, CodingKey {
        case email
        case password
        case cultureName
        case commercialOwnerUserID = "commercialOwnerUserId"
    }
}

public struct BeezUPCommonErrorResponseMessage: Codable {
    public var errors: [BeezUPCommonUserErrorMessage]

    public init(errors: [BeezUPCommonUserErrorMessage]) {
        self.errors = errors
    }
}

public struct BeezUPCommonUserErrorMessage: Codable {
    /// The documentation related to this operation.
    ///
    /// Example: "https://api-docs.beezup.com/#operation/EnableChannelCatalog"
    public var docURL: URL?
    /// The error code. The error code can be a pattern containing the argument's name
    ///
    /// Example: "CatalogImportationAlreadyInProgress(ExecutionId currentCatalogImportationId)"
    public var code: String
    /// The error message
    ///
    /// Example:
    ///
    /// "There is already an importation in progress: b24d0dd8-a561-478a-9b26-34f573f03527
    /// "
    public var message: String
    /// If the error is translated, the culture name will be indicated
    ///
    /// Example: "en"
    public var cultureName: String?
    /// A dictionary string/object
    public var arguments: [Argumants]?

    public struct Argumants: Codable {
        /// The key of the parameter
        ///
        /// Example: "currentCatalogImportationId"
        public var name: String
        /// The value of the parameter. Depending to the type.
        public var value: [String: AnyJSON]

        public init(name: String, value: [String: AnyJSON]) {
            self.name = name
            self.value = value
        }
    }

    public init(docURL: URL? = nil, code: String, message: String, cultureName: String? = nil, arguments: [Argumants]? = nil) {
        self.docURL = docURL
        self.code = code
        self.message = message
        self.cultureName = cultureName
        self.arguments = arguments
    }

    private enum CodingKeys: String, CodingKey {
        case docURL = "docUrl"
        case code
        case message
        case cultureName
        case arguments
    }
}

public struct PublicChannelIndex: Codable {
    /// The key is the country iso code
    ///
    /// Example:
    ///
    /// {
    ///   "DEU" : {
    ///     "href" : "\/v2\/public\/channels\/DEU",
    ///     "method" : "GET"
    ///   },
    ///   "ESP" : {
    ///     "href" : "\/v2\/public\/channels\/ESP'",
    ///     "method" : "GET"
    ///   },
    ///   "FRA" : {
    ///     "href" : "\/v2\/public\/channels\/FRA",
    ///     "method" : "GET"
    ///   },
    ///   "GBR" : {
    ///     "href" : "\/v2\/public\/channels\/GBR",
    ///     "method" : "GET"
    ///   },
    ///   "ITA" : {
    ///     "href" : "\/v2\/public\/channels\/ITA",
    ///     "method" : "GET"
    ///   }
    /// }
    public var channels: [String: BeezUPCommonLink3]?
    /// Example:
    ///
    /// {
    ///   "channelCountryLov" : {
    ///     "href" : "\/v2\/public\/lov\/www_ChannelCountry",
    ///     "method" : "GET"
    ///   },
    ///   "channelTypeLov" : {
    ///     "href" : "\/v2\/public\/lov\/ChannelType",
    ///     "method" : "GET"
    ///   },
    ///   "sectorLov" : {
    ///     "href" : "\/v2\/public\/lov\/ParamSector",
    ///     "method" : "GET"
    ///   },
    ///   "self" : {
    ///     "href" : "\/v2\/public\/channels",
    ///     "method" : "GET"
    ///   }
    /// }
    public var links: Links?

    /// Example:
    ///
    /// {
    ///   "channelCountryLov" : {
    ///     "href" : "\/v2\/public\/lov\/www_ChannelCountry",
    ///     "method" : "GET"
    ///   },
    ///   "channelTypeLov" : {
    ///     "href" : "\/v2\/public\/lov\/ChannelType",
    ///     "method" : "GET"
    ///   },
    ///   "sectorLov" : {
    ///     "href" : "\/v2\/public\/lov\/ParamSector",
    ///     "method" : "GET"
    ///   },
    ///   "self" : {
    ///     "href" : "\/v2\/public\/channels",
    ///     "method" : "GET"
    ///   }
    /// }
    public struct Links: Codable {
        public var this: BeezUPCommonLink3?
        public var channelCountryLov: BeezUPCommonLink3?
        public var channelTypeLov: BeezUPCommonLink3?
        public var sectorLov: BeezUPCommonLink3?

        public init(this: BeezUPCommonLink3? = nil, channelCountryLov: BeezUPCommonLink3? = nil, channelTypeLov: BeezUPCommonLink3? = nil, sectorLov: BeezUPCommonLink3? = nil) {
            self.this = this
            self.channelCountryLov = channelCountryLov
            self.channelTypeLov = channelTypeLov
            self.sectorLov = sectorLov
        }

        private enum CodingKeys: String, CodingKey {
            case this = "self"
            case channelCountryLov
            case channelTypeLov
            case sectorLov
        }
    }

    public init(channels: [String: BeezUPCommonLink3]? = nil, links: Links? = nil) {
        self.channels = channels
        self.links = links
    }
}

public struct PublicChannelInfoList: Codable {
    public var links: Links?
    public var channels: [PublicChannelInfo]?

    public struct Links: Codable {
        public var this: BeezUPCommonLink3?

        public init(this: BeezUPCommonLink3? = nil) {
            self.this = this
        }

        private enum CodingKeys: String, CodingKey {
            case this = "self"
        }
    }

    public init(links: Links? = nil, channels: [PublicChannelInfo]? = nil) {
        self.links = links
        self.channels = channels
    }
}

public struct PublicChannelInfo: Codable {
    /// The channel name
    ///
    /// Example: "Amazon Direct FRA"
    public var name: String
    /// The channel home url
    ///
    /// Example: "http://www.amazon.fr"
    public var homeURL: URL
    /// The channel logo url
    ///
    /// Example: "http://beezupcdn.blob.core.windows.net/comparators/Amazon%2520Direct%2520FRA.png"
    public var logoURL: URL
    /// The type list related to a channel
    ///
    /// Example: ["Marketplace"]
    public var types: [String]
    /// The sector list related to a channel
    ///
    /// Example: ["BRICOLAGE", "INFO", "GENERALIST"]
    public var sectors: [String]?

    public init(name: String, homeURL: URL, logoURL: URL, types: [String], sectors: [String]? = nil) {
        self.name = name
        self.homeURL = homeURL
        self.logoURL = logoURL
        self.types = types
        self.sectors = sectors
    }

    private enum CodingKeys: String, CodingKey {
        case name
        case homeURL = "homeUrl"
        case logoURL = "logoUrl"
        case types
        case sectors
    }
}

public struct BeezUPCommonLink3: Codable {
    /// The label corresponding to the link. This label is automatically translated based on the Accept-Language http header.
    ///
    /// Example: "The translated label"
    public var label: String?
    /// The documentation related to this operation.
    ///
    /// Example: "https://api-docs.beezup.com/#operation/EnableChannelCatalog"
    public var docURL: URL?
    /// The description of the link
    ///
    /// Example: "This is a description link"
    public var description: String?
    /// Indicate the relative uri for this link
    ///
    /// Example: "/v2/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}"
    public var href: String
    /// The operationId to call.
    ///
    /// Example: "GetOrder"
    public var operationID: String?
    /// Indicate the http method to use on this link
    ///
    /// Example: "GET"
    public var method: BeezUPCommonHTTPMethod?
    public var parameters: [String: BeezUPCommonLinkParameter3]?
    /// Indicates whether the href is templated or not
    public var isURLTemplated: Bool?
    /// Indicates whether all required params have been provided
    public var isAllRequiredParamsProvided: Bool?
    /// Indicates whether all optionals params have been provided
    public var isAllOptionalParamsProvided: Bool?
    public var info: BeezUPCommonInfoSummaries?

    public init(label: String? = nil, docURL: URL? = nil, description: String? = nil, href: String, operationID: String? = nil, method: BeezUPCommonHTTPMethod? = nil, parameters: [String: BeezUPCommonLinkParameter3]? = nil, isURLTemplated: Bool? = nil, isAllRequiredParamsProvided: Bool? = nil, isAllOptionalParamsProvided: Bool? = nil, info: BeezUPCommonInfoSummaries? = nil) {
        self.label = label
        self.docURL = docURL
        self.description = description
        self.href = href
        self.operationID = operationID
        self.method = method
        self.parameters = parameters
        self.isURLTemplated = isURLTemplated
        self.isAllRequiredParamsProvided = isAllRequiredParamsProvided
        self.isAllOptionalParamsProvided = isAllOptionalParamsProvided
        self.info = info
    }

    private enum CodingKeys: String, CodingKey {
        case label
        case docURL = "docUrl"
        case description
        case href
        case operationID = "operationId"
        case method
        case parameters
        case isURLTemplated = "urlTemplated"
        case isAllRequiredParamsProvided = "allRequiredParamsProvided"
        case isAllOptionalParamsProvided = "allOptionalParamsProvided"
        case info
    }
}

/// Indicate the http method to use on this link
///
/// Example: "GET"
public enum BeezUPCommonHTTPMethod: String, Codable, CaseIterable {
    case get = "GET"
    case post = "POST"
    case patch = "PATCH"
    case delete = "DELETE"
    case put = "PUT"
    case head = "HEAD"
}

public struct BeezUPCommonLinkParameter3: Codable {
    /// The label corresponding to the link parameter. This label is automatically translated based on the Accept-Language http header.
    ///
    /// Example: "The translated label"
    public var label: String?
    /// The value of the parameter. It can be an integer a string or an object.
    public var value: [String: AnyJSON]?
    /// Example: true
    public var isRequired: Bool
    /// * path: if the parameter must be pass in the path uri
    /// * header: if the parameter must be passed in http header
    /// * query: if the parameter must be passed in querystring
    /// * body: if the paramter must be passed in the body
    ///
    /// Example: "path"
    public var `in`: BeezUPCommonParameterIn
    /// The value type of the parameter
    ///
    /// Example: "string"
    public var type: BeezUPCommonParameterType?
    /// Describe the way you have to follow to get access to the LOV
    public var lovLink: BeezUPCommonLOVLink3?
    /// If true, you MUST indicate a value from the list of values otherwise it's a freetext
    ///
    /// Example: true
    public var isLovRequired: Bool?
    /// Description of the parameter
    ///
    /// Example: "the store identifier"
    public var description: String?
    /// Schema of the parameter
    ///
    /// Example: "orderListRequest"
    public var schema: String?
    /// If the parameter is an object with flexible properties (additionProperties/dictionary), we will describe the properties of the object.
    ///
    /// Example:
    ///
    /// {
    ///   "shipOrder" : {
    ///     "type" : "string"
    ///   }
    /// }
    public var properties: [String: BeezUPCommonLinkParameterProperty3]?

    public init(label: String? = nil, value: [String: AnyJSON]? = nil, isRequired: Bool? = nil, `in`: BeezUPCommonParameterIn, type: BeezUPCommonParameterType? = nil, lovLink: BeezUPCommonLOVLink3? = nil, isLovRequired: Bool? = nil, description: String? = nil, schema: String? = nil, properties: [String: BeezUPCommonLinkParameterProperty3]? = nil) {
        self.label = label
        self.value = value
        self.isRequired = isRequired ?? false
        self.in = `in`
        self.type = type
        self.lovLink = lovLink
        self.isLovRequired = isLovRequired
        self.description = description
        self.schema = schema
        self.properties = properties
    }

    private enum CodingKeys: String, CodingKey {
        case label
        case value
        case isRequired = "required"
        case `in` = "in"
        case type
        case lovLink
        case isLovRequired = "lovRequired"
        case description
        case schema
        case properties
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        self.label = try values.decodeIfPresent(String.self, forKey: .label)
        self.value = try values.decodeIfPresent([String: AnyJSON].self, forKey: .value)
        self.isRequired = try values.decodeIfPresent(Bool.self, forKey: .isRequired) ?? false
        self.in = try values.decode(BeezUPCommonParameterIn.self, forKey: .`in`)
        self.type = try values.decodeIfPresent(BeezUPCommonParameterType.self, forKey: .type)
        self.lovLink = try values.decodeIfPresent(BeezUPCommonLOVLink3.self, forKey: .lovLink)
        self.isLovRequired = try values.decodeIfPresent(Bool.self, forKey: .isLovRequired)
        self.description = try values.decodeIfPresent(String.self, forKey: .description)
        self.schema = try values.decodeIfPresent(String.self, forKey: .schema)
        self.properties = try values.decodeIfPresent([String: BeezUPCommonLinkParameterProperty3].self, forKey: .properties)
    }
}

public struct BeezUPCommonInfoSummaries: Codable {
    public var successes: [BeezUPCommonSuccessSummary]?
    public var errors: [BeezUPCommonErrorSummary]?
    public var warnings: [BeezUPCommonWarningSummary]?
    public var informations: [BeezUPCommonInfoSummary]?

    public init(successes: [BeezUPCommonSuccessSummary]? = nil, errors: [BeezUPCommonErrorSummary]? = nil, warnings: [BeezUPCommonWarningSummary]? = nil, informations: [BeezUPCommonInfoSummary]? = nil) {
        self.successes = successes
        self.errors = errors
        self.warnings = warnings
        self.informations = informations
    }
}

/// * path: if the parameter must be pass in the path uri
/// * header: if the parameter must be passed in http header
/// * query: if the parameter must be passed in querystring
/// * body: if the paramter must be passed in the body
///
/// Example: "path"
public enum BeezUPCommonParameterIn: String, Codable, CaseIterable {
    case path
    case header
    case query
    case body
}

/// The value type of the parameter
///
/// Example: "string"
public enum BeezUPCommonParameterType: String, Codable, CaseIterable {
    case string
    case integer
    case number
    case boolean
    case object
    case array
    case date
    case dateTime = "date-time"
}

/// Describe the way you have to follow to get access to the LOV
public struct BeezUPCommonLOVLink3: Codable {
    /// Indicate the uri to the list of value
    ///
    /// Example: "/v2/public/Go2CultureName"
    public var href: URL
    /// Indicate the http method to use on this link
    ///
    /// Example: "GET"
    public var method: BeezUPCommonHTTPMethod?

    public init(href: URL, method: BeezUPCommonHTTPMethod? = nil) {
        self.href = href
        self.method = method
    }
}

public struct BeezUPCommonLinkParameterProperty3: Codable {
    /// The label corresponding to the link parameter property. This label is automatically translated based on the Accept-Language http header.
    ///
    /// Example: "The translated label"
    public var label: String?
    /// The value of the parameter. It can be an integer a string or an object.
    public var value: [String: AnyJSON]?
    /// Example: true
    public var isRequired: Bool?
    /// The value type of the parameter
    ///
    /// Example: "string"
    public var type: BeezUPCommonParameterType
    /// Describe the way you have to follow to get access to the LOV
    public var lovLink: BeezUPCommonLOVLink3?
    /// If true, you MUST use indicate a value from the list of values otherwise it's a freetext
    ///
    /// Example: true
    public var isLovRequired: Bool?
    /// Description of the parameter
    ///
    /// Example: "the store identifier"
    public var description: String?
    /// Schema of the parameter
    ///
    /// Example: "orderListRequest"
    public var schema: String?

    public init(label: String? = nil, value: [String: AnyJSON]? = nil, isRequired: Bool? = nil, type: BeezUPCommonParameterType, lovLink: BeezUPCommonLOVLink3? = nil, isLovRequired: Bool? = nil, description: String? = nil, schema: String? = nil) {
        self.label = label
        self.value = value
        self.isRequired = isRequired
        self.type = type
        self.lovLink = lovLink
        self.isLovRequired = isLovRequired
        self.description = description
        self.schema = schema
    }

    private enum CodingKeys: String, CodingKey {
        case label
        case value
        case isRequired = "required"
        case type
        case lovLink
        case isLovRequired = "lovRequired"
        case description
        case schema
    }
}

public struct BeezUPCommonSuccessSummary: Codable {
    public var successCode: String?
    public var successMessage: String?
    public var successArguments: [String: String]?
    public var propertyName: String?
    public var propertyValue: String?
    public var objectName: String?

    public init(successCode: String? = nil, successMessage: String? = nil, successArguments: [String: String]? = nil, propertyName: String? = nil, propertyValue: String? = nil, objectName: String? = nil) {
        self.successCode = successCode
        self.successMessage = successMessage
        self.successArguments = successArguments
        self.propertyName = propertyName
        self.propertyValue = propertyValue
        self.objectName = objectName
    }
}

public struct BeezUPCommonErrorSummary: Codable {
    public var utcDate: Date?
    public var errorGuid: String?
    public var errorCode: String?
    public var errorMessage: String?
    public var technicalErrorMessage: String?
    public var exceptionDetail: BeezUPCommonExceptionDetail?
    public var errorArguments: [String: String]?
    public var propertyName: String?
    public var propertyValue: String?
    public var objectName: String?
    public var source: String?

    public init(utcDate: Date? = nil, errorGuid: String? = nil, errorCode: String? = nil, errorMessage: String? = nil, technicalErrorMessage: String? = nil, exceptionDetail: BeezUPCommonExceptionDetail? = nil, errorArguments: [String: String]? = nil, propertyName: String? = nil, propertyValue: String? = nil, objectName: String? = nil, source: String? = nil) {
        self.utcDate = utcDate
        self.errorGuid = errorGuid
        self.errorCode = errorCode
        self.errorMessage = errorMessage
        self.technicalErrorMessage = technicalErrorMessage
        self.exceptionDetail = exceptionDetail
        self.errorArguments = errorArguments
        self.propertyName = propertyName
        self.propertyValue = propertyValue
        self.objectName = objectName
        self.source = source
    }
}

public struct BeezUPCommonWarningSummary: Codable {
    public var technicalErrorMessage: String?
    public var warningMessage: String?
    public var warningCode: String?
    public var warningArguments: [String: String]?

    public init(technicalErrorMessage: String? = nil, warningMessage: String? = nil, warningCode: String? = nil, warningArguments: [String: String]? = nil) {
        self.technicalErrorMessage = technicalErrorMessage
        self.warningMessage = warningMessage
        self.warningCode = warningCode
        self.warningArguments = warningArguments
    }
}

public struct BeezUPCommonInfoSummary: Codable {
    public var informationCode: String?
    public var informationMessage: String?
    public var informationArguments: [String: String]?
    public var propertyName: String?
    public var propertyValue: String?
    public var objectName: String?

    public init(informationCode: String? = nil, informationMessage: String? = nil, informationArguments: [String: String]? = nil, propertyName: String? = nil, propertyValue: String? = nil, objectName: String? = nil) {
        self.informationCode = informationCode
        self.informationMessage = informationMessage
        self.informationArguments = informationArguments
        self.propertyName = propertyName
        self.propertyValue = propertyValue
        self.objectName = objectName
    }
}

public struct BeezUPCommonExceptionDetail: Codable {
    public var helpLink: String?
    public var message: String?
    public var stackTrace: String?
    public var type: String?

    public init(helpLink: String? = nil, message: String? = nil, stackTrace: String? = nil, type: String? = nil) {
        self.helpLink = helpLink
        self.message = message
        self.stackTrace = stackTrace
        self.type = type
    }
}

public struct PublicLovIndex: Codable {
    public var links: PublicLovIndexLinks?

    public init(links: PublicLovIndexLinks? = nil) {
        self.links = links
    }
}

public struct PublicLovIndexLinks: Codable {
    public var this: BeezUPCommonLink3?
    /// List of lov link. The key is the list name.
    public var lists: [String: BeezUPCommonLink3]?

    public init(this: BeezUPCommonLink3? = nil, lists: [String: BeezUPCommonLink3]? = nil) {
        self.this = this
        self.lists = lists
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case lists
    }
}

public struct PublicListOfValuesResponse: Codable {
    public var links: PublicListOfValuesResponseLinks?
    public var items: [BeezUPCommonListOfValueItem]?

    public init(links: PublicListOfValuesResponseLinks? = nil, items: [BeezUPCommonListOfValueItem]? = nil) {
        self.links = links
        self.items = items
    }
}

public struct PublicListOfValuesResponseLinks: Codable {
    public var this: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3? = nil) {
        self.this = this
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
    }
}

/// This object is used by LOV apis
public struct BeezUPCommonListOfValueItem: Codable {
    public var position: Int?
    /// Example: "FRA"
    public var codeIdentifier: String
    /// Example: "France"
    public var translationText: String?
    public var intIdentifier: Int

    public init(position: Int? = nil, codeIdentifier: String, translationText: String? = nil, intIdentifier: Int) {
        self.position = position
        self.codeIdentifier = codeIdentifier
        self.translationText = translationText
        self.intIdentifier = intIdentifier
    }
}

public struct UserLovIndex: Codable {
    public var links: UserLovIndexLinks?

    public init(links: UserLovIndexLinks? = nil) {
        self.links = links
    }
}

public struct UserLovIndexLinks: Codable {
    public var this: BeezUPCommonLink3?
    /// List of lov link. The key is the list name.
    public var lists: [String: BeezUPCommonLink3]?

    public init(this: BeezUPCommonLink3? = nil, lists: [String: BeezUPCommonLink3]? = nil) {
        self.this = this
        self.lists = lists
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case lists
    }
}

public struct UserListOfValuesResponse: Codable {
    public var links: UserListOfValuesResponseLinks?
    public var items: [BeezUPCommonListOfValueItem]?

    public init(links: UserListOfValuesResponseLinks? = nil, items: [BeezUPCommonListOfValueItem]? = nil) {
        self.links = links
        self.items = items
    }
}

public struct UserListOfValuesResponseLinks: Codable {
    public var this: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3? = nil) {
        self.this = this
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
    }
}

public struct ErrorResponseMessagePaymentRequiredLinks: Codable {
    public var offer: BeezUPCommonLink3

    public init(offer: BeezUPCommonLink3) {
        self.offer = offer
    }
}

public struct ErrorResponseMessagePaymentRequired: Codable {
    public var beezUPCommonErrorResponseMessage: BeezUPCommonErrorResponseMessage
    public var links: ErrorResponseMessagePaymentRequiredLinks

    public init(beezUPCommonErrorResponseMessage: BeezUPCommonErrorResponseMessage, links: ErrorResponseMessagePaymentRequiredLinks) {
        self.beezUPCommonErrorResponseMessage = beezUPCommonErrorResponseMessage
        self.links = links
    }

    public init(from decoder: Decoder) throws {
        self.beezUPCommonErrorResponseMessage = try BeezUPCommonErrorResponseMessage(from: decoder)
        self.links = try ErrorResponseMessagePaymentRequiredLinks(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(beezUPCommonErrorResponseMessage, forKey: "beezUPCommonErrorResponseMessage")
        try values.encode(links, forKey: "links")
    }
}

/// The index of the customer API
public struct CustomerIndex: Codable {
    /// Gives you want you can do on this API
    public var links: CustomerIndexLinks
    public var lovLinks: CustomerIndexLovLinks

    public init(links: CustomerIndexLinks, lovLinks: CustomerIndexLovLinks) {
        self.links = links
        self.lovLinks = lovLinks
    }
}

/// Gives you want you can do on this API
public struct CustomerIndexLinks: Codable {
    public var this: BeezUPCommonLink3
    public var accountInfo: BeezUPCommonLink3
    public var friendInfo: BeezUPCommonLink3
    public var logout: BeezUPCommonLink3?
    public var stores: BeezUPCommonLink3?
    public var billingPeriods: BeezUPCommonLink3
    public var standardOffers: BeezUPCommonLink3
    public var getOffer: BeezUPCommonLink3?
    public var invoices: BeezUPCommonLink3?
    public var contracts: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3, accountInfo: BeezUPCommonLink3, friendInfo: BeezUPCommonLink3, logout: BeezUPCommonLink3? = nil, stores: BeezUPCommonLink3? = nil, billingPeriods: BeezUPCommonLink3, standardOffers: BeezUPCommonLink3, getOffer: BeezUPCommonLink3? = nil, invoices: BeezUPCommonLink3? = nil, contracts: BeezUPCommonLink3? = nil) {
        self.this = this
        self.accountInfo = accountInfo
        self.friendInfo = friendInfo
        self.logout = logout
        self.stores = stores
        self.billingPeriods = billingPeriods
        self.standardOffers = standardOffers
        self.getOffer = getOffer
        self.invoices = invoices
        self.contracts = contracts
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case accountInfo
        case friendInfo
        case logout
        case stores
        case billingPeriods
        case standardOffers
        case getOffer
        case invoices
        case contracts
    }
}

public struct CustomerIndexLovLinks: Codable {
    /// Describe the way you have to follow to get access to the LOV
    public var offerLov: BeezUPCommonLOVLink3?
    /// Describe the way you have to follow to get access to the LOV
    public var activeOfferLov: BeezUPCommonLOVLink3?
    /// Describe the way you have to follow to get access to the LOV
    public var customerStatusLov: BeezUPCommonLOVLink3?
    /// Describe the way you have to follow to get access to the LOV
    public var beezUPTimeZoneLov: BeezUPCommonLOVLink3?
    /// Describe the way you have to follow to get access to the LOV
    public var storeCountryLov: BeezUPCommonLOVLink3?
    /// Describe the way you have to follow to get access to the LOV
    public var storeSectorLov: BeezUPCommonLOVLink3?
    /// Describe the way you have to follow to get access to the LOV
    public var countryLov: BeezUPCommonLOVLink3?
    /// Describe the way you have to follow to get access to the LOV
    public var contractTerminationReasonLov: BeezUPCommonLOVLink3?
    /// Describe the way you have to follow to get access to the LOV
    public var invoicePaymentStatusLov: BeezUPCommonLOVLink3?

    public init(offerLov: BeezUPCommonLOVLink3? = nil, activeOfferLov: BeezUPCommonLOVLink3? = nil, customerStatusLov: BeezUPCommonLOVLink3? = nil, beezUPTimeZoneLov: BeezUPCommonLOVLink3? = nil, storeCountryLov: BeezUPCommonLOVLink3? = nil, storeSectorLov: BeezUPCommonLOVLink3? = nil, countryLov: BeezUPCommonLOVLink3? = nil, contractTerminationReasonLov: BeezUPCommonLOVLink3? = nil, invoicePaymentStatusLov: BeezUPCommonLOVLink3? = nil) {
        self.offerLov = offerLov
        self.activeOfferLov = activeOfferLov
        self.customerStatusLov = customerStatusLov
        self.beezUPTimeZoneLov = beezUPTimeZoneLov
        self.storeCountryLov = storeCountryLov
        self.storeSectorLov = storeSectorLov
        self.countryLov = countryLov
        self.contractTerminationReasonLov = contractTerminationReasonLov
        self.invoicePaymentStatusLov = invoicePaymentStatusLov
    }
}

public struct StoreShares: Codable {
    public var links: StoreSharesLinks
    public var shares: [StoreShare]

    public init(links: StoreSharesLinks, shares: [StoreShare]) {
        self.links = links
        self.shares = shares
    }
}

public struct StoreSharesLinks: Codable {
    public var this: BeezUPCommonLink3?
    public var share: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3? = nil, share: BeezUPCommonLink3? = nil) {
        self.this = this
        self.share = share
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case share
    }
}

public struct StoreShare: Codable {
    /// The user identifier
    ///
    /// Example: "8a7fbdec-9e71-472e-9974-27d5c1d57cf8"
    public var userID: String
    /// Indicates the role can have a user on a store.
    /// * Owner: Indicates that you are the owner of this store
    /// * User: Indicates that you are a simple user on this store
    ///
    /// Example: "User"
    public var userRole: StoreUserRole
    /// The different actions you can make on this store share
    public var links: StoreShareLinks

    public init(userID: String, userRole: StoreUserRole, links: StoreShareLinks) {
        self.userID = userID
        self.userRole = userRole
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case userID = "userId"
        case userRole
        case links
    }
}

/// The different actions you can make on this store share
public struct StoreShareLinks: Codable {
    public var deleteShare: BeezUPCommonLink3?

    public init(deleteShare: BeezUPCommonLink3? = nil) {
        self.deleteShare = deleteShare
    }
}

/// The action links you can do globally on stores
public struct StoreListLinks: Codable {
    public var this: BeezUPCommonLink3?
    public var createStore: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3? = nil, createStore: BeezUPCommonLink3? = nil) {
        self.this = this
        self.createStore = createStore
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case createStore
    }
}

public struct StoreList: Codable {
    /// The action links you can do globally on stores
    public var links: StoreListLinks
    public var stores: [Store]

    public init(links: StoreListLinks, stores: [Store]) {
        self.links = links
        self.stores = stores
    }
}

/// Indicates the role can have a user on a store.
/// * Owner: Indicates that you are the owner of this store
/// * User: Indicates that you are a simple user on this store
///
/// Example: "User"
public enum StoreUserRole: String, Codable, CaseIterable {
    case owner = "Owner"
    case user = "User"
}

/// The store status
/// * Active:  When the store is active
/// * SystemBlocked:  When the store is blocked by the system
/// * UserBlocked: When the store is blocked on GO not on the system
///
/// Example: "Active"
public enum StoreStatus: String, Codable, CaseIterable {
    case active = "Active"
    case systemBlocked = "SystemBlocked"
    case userBlocked = "UserBlocked"
}

/// The account status
/// * Active:  When the account is active
/// * SystemBlocked:  When all stores on the account are blocked by the system
/// * UserBlocked: When all stores on the account are blocked on GO not on the system
/// * NotActivated: When the email is not verified
///
/// Example: "Active"
public enum AccountStatus: String, Codable, CaseIterable {
    case active = "Active"
    case systemBlocked = "SystemBlocked"
    case userBlocked = "UserBlocked"
    case notActivated = "NotActivated"
}

public struct Store: Codable {
    /// The store identifier
    ///
    /// Example: "64f43358-63a1-47f7-97ec-0301fc39956b"
    public var storeID: String
    /// The store name. Must be unique.
    ///
    /// Example: "My Store"
    public var name: String
    /// The url of your store
    ///
    /// Example: "http://www.mystore.com"
    public var url: String
    /// The country iso code alpha 3 based on the list of values /user/lov/StoreCountry
    ///
    /// Example: "DEU"
    public var countryIsoCodeAlpha3: String
    /// The currency code <a href="https://en.wikipedia.org/wiki/ISO_4217">(ISO 4217)</a>
    ///
    /// Example: "EUR"
    public var currencyCode: String
    /// The store's sectors based on the list of values /user/lov/ParamSector
    ///
    /// Example: ["ANIMALERIE", "AUTOMOTO"]
    public var sectors: [String]
    /// Indicates the role can have a user on a store.
    /// * Owner: Indicates that you are the owner of this store
    /// * User: Indicates that you are a simple user on this store
    ///
    /// Example: "User"
    public var userRole: StoreUserRole
    /// The store status
    /// * Active:  When the store is active
    /// * SystemBlocked:  When the store is blocked by the system
    /// * UserBlocked: When the store is blocked on GO not on the system
    ///
    /// Example: "Active"
    public var status: StoreStatus
    /// The user id of the owner of the store
    ///
    /// Example: "00000000-0000-0000-0000-000000000000"
    public var ownerUserID: String
    /// The offer id based on /offers. Not a free offer of course.
    public var offerID: Int
    /// The offer Name
    ///
    /// Example: "Premium"
    public var offerName: String
    /// The share count related to this store
    public var shareCount: Int
    /// The creation date of the store
    ///
    /// Example: "2017-04-01T22:30:00Z"
    public var creationUtcDate: Date
    /// The version of GO to use
    public var goVersion: Int
    /// The action links for this store
    public var links: StoreLinks
    /// Is the store a test or a production store
    public var isTest: Bool

    public init(storeID: String, name: String, url: String, countryIsoCodeAlpha3: String, currencyCode: String, sectors: [String], userRole: StoreUserRole, status: StoreStatus, ownerUserID: String, offerID: Int, offerName: String, shareCount: Int, creationUtcDate: Date, goVersion: Int, links: StoreLinks, isTest: Bool) {
        self.storeID = storeID
        self.name = name
        self.url = url
        self.countryIsoCodeAlpha3 = countryIsoCodeAlpha3
        self.currencyCode = currencyCode
        self.sectors = sectors
        self.userRole = userRole
        self.status = status
        self.ownerUserID = ownerUserID
        self.offerID = offerID
        self.offerName = offerName
        self.shareCount = shareCount
        self.creationUtcDate = creationUtcDate
        self.goVersion = goVersion
        self.links = links
        self.isTest = isTest
    }

    private enum CodingKeys: String, CodingKey {
        case storeID = "storeId"
        case name
        case url
        case countryIsoCodeAlpha3
        case currencyCode
        case sectors
        case userRole
        case status
        case ownerUserID = "ownerUserId"
        case offerID = "offerId"
        case offerName
        case shareCount
        case creationUtcDate
        case goVersion
        case links
        case isTest
    }
}

/// The action links for this store
public struct StoreLinks: Codable {
    public var this: BeezUPCommonLink3?
    public var deleteStore: BeezUPCommonLink3?
    public var updateStore: BeezUPCommonLink3?
    public var shares: BeezUPCommonLink3?
    public var share: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3? = nil, deleteStore: BeezUPCommonLink3? = nil, updateStore: BeezUPCommonLink3? = nil, shares: BeezUPCommonLink3? = nil, share: BeezUPCommonLink3? = nil) {
        self.this = this
        self.deleteStore = deleteStore
        self.updateStore = updateStore
        self.shares = shares
        self.share = share
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case deleteStore
        case updateStore
        case shares
        case share
    }
}

/// The request to create a store. The store identifier is optional, if null it will be automatically computed.
public struct CreateStoreRequest: Codable {
    /// The store identifier
    ///
    /// Example: "64f43358-63a1-47f7-97ec-0301fc39956b"
    public var id: String?
    /// The store name. Must be unique.
    ///
    /// Example: "My Store"
    public var name: String
    /// The url of your store
    ///
    /// Example: "http://www.mystore.com"
    public var url: String
    /// The country iso code alpha 3 based on the list of values /user/lov/StoreCountry
    ///
    /// Example: "DEU"
    public var countryIsoCodeAlpha3: String
    /// The store's sectors based on the list of values /user/lov/ParamSector
    ///
    /// Example: ["ANIMALERIE", "AUTOMOTO"]
    public var sectors: [String]

    public init(id: String? = nil, name: String, url: String, countryIsoCodeAlpha3: String, sectors: [String]) {
        self.id = id
        self.name = name
        self.url = url
        self.countryIsoCodeAlpha3 = countryIsoCodeAlpha3
        self.sectors = sectors
    }
}

public struct UpdateStoreRequest: Codable {
    /// The store name. Must be unique.
    ///
    /// Example: "My Store"
    public var name: String
    /// The url of your store
    ///
    /// Example: "http://www.mystore.com"
    public var url: String
    /// The store's sectors based on the list of values /user/lov/ParamSector
    ///
    /// Example: ["ANIMALERIE", "AUTOMOTO"]
    public var sectors: [String]

    public init(name: String, url: String, sectors: [String]) {
        self.name = name
        self.url = url
        self.sectors = sectors
    }
}

/// Describe the rights for a functionality
public struct FunctionalityRightInfo: Codable {
    /// The functionality code
    ///
    /// Example: "COMPAMANA"
    public var functionalityCode: String
    /// The max value for this functionality code considering your rights
    ///
    /// Example: 10
    public var maxValueInterger: Int?
    /// If you can use this functionality unlimitedly
    ///
    /// Example: true
    public var isUnlimited: Bool?

    public init(functionalityCode: String, maxValueInterger: Int? = nil, isUnlimited: Bool? = nil) {
        self.functionalityCode = functionalityCode
        self.maxValueInterger = maxValueInterger
        self.isUnlimited = isUnlimited
    }

    private enum CodingKeys: String, CodingKey {
        case functionalityCode
        case maxValueInterger
        case isUnlimited = "unlimited"
    }
}

public struct InvoiceListLinks: Codable {
    public var this: BeezUPCommonLink3

    public init(this: BeezUPCommonLink3) {
        self.this = this
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
    }
}

public struct InvoiceList: Codable {
    public var links: InvoiceListLinks
    /// Example:
    ///
    /// [
    ///   {
    ///     "amount" : "101",
    ///     "amountToBePaid" : "0",
    ///     "contractId" : "7098487a-86f6-4322-b8a5-b67f7363b3e7",
    ///     "currencyCode" : "EUR",
    ///     "dueDate" : "2016-05-10",
    ///     "invoiceDate" : "2016-05-01",
    ///     "invoiceNumber" : "B1234",
    ///     "invoiceUrl" : "https:\/\/beezupbilling.blob.core.windows.net\/invoicepdf\/2000\/CustomerUserId_00000000-0000-0000-0000-000000000000\/ContractId_00000000-0000-0000-0000-000000000000\/2000-01-01_B1234.pdf",
    ///     "paymentStatus" : "Paid"
    ///   }
    /// ]
    public var invoices: [Invoice]

    public init(links: InvoiceListLinks, invoices: [Invoice]) {
        self.links = links
        self.invoices = invoices
    }
}

/// The payment status
///
/// Example: "Paid"
public enum InvoicePaymentStatus: String, Codable, CaseIterable {
    case paid = "Paid"
    case notPaid = "NotPaid"
    case partiallyPaid = "PartiallyPaid"
    case loss = "Loss"
}

public struct Invoice: Codable {
    /// The invoice date
    ///
    /// Example: "2016-05-01"
    public var invoiceDate: NaiveDate
    /// Your contract identifier
    ///
    /// Example: "7098487a-86f6-4322-b8a5-b67f7363b3e7"
    public var contractID: String
    /// Your invoice number
    ///
    /// Example: "B1234"
    public var invoiceNumber: String
    /// The amount of your invoice
    ///
    /// Example: 101.42
    public var amount: Double
    /// The remaining amount to be paid for this invoice
    ///
    /// Example: 0.0
    public var amountToBePaid: Double
    /// The currency code <a href="https://en.wikipedia.org/wiki/ISO_4217">(ISO 4217)</a>
    ///
    /// Example: "EUR"
    public var currencyCode: String
    /// The payment status
    ///
    /// Example: "Paid"
    public var paymentStatus: InvoicePaymentStatus
    /// Example: "2016-05-10"
    public var dueDate: NaiveDate
    /// The url of the invoice document
    ///
    /// Example: "https://beezupbilling.blob.core.windows.net/invoicepdf/2000/CustomerUserId_00000000-0000-0000-0000-000000000000/ContractId_00000000-0000-0000-0000-000000000000/2000-01-01_B1234.pdf"
    public var invoiceURL: URL?

    public init(invoiceDate: NaiveDate, contractID: String, invoiceNumber: String, amount: Double, amountToBePaid: Double, currencyCode: String, paymentStatus: InvoicePaymentStatus, dueDate: NaiveDate, invoiceURL: URL? = nil) {
        self.invoiceDate = invoiceDate
        self.contractID = contractID
        self.invoiceNumber = invoiceNumber
        self.amount = amount
        self.amountToBePaid = amountToBePaid
        self.currencyCode = currencyCode
        self.paymentStatus = paymentStatus
        self.dueDate = dueDate
        self.invoiceURL = invoiceURL
    }

    private enum CodingKeys: String, CodingKey {
        case invoiceDate
        case contractID = "contractId"
        case invoiceNumber
        case amount
        case amountToBePaid
        case currencyCode
        case paymentStatus
        case dueDate
        case invoiceURL = "invoiceUrl"
    }
}

public struct UserFriendInfo: Codable {
    /// Your friend's user id
    ///
    /// Example: "00c4a9d2-fc8e-4b3d-8e52-c4f276245bc1"
    public var userID: String
    /// Your friend's user last name
    ///
    /// Example: "Humphrey"
    public var lastName: String
    /// Your friend's user first name
    ///
    /// Example: "Bogart"
    public var firstName: String
    /// Your friend's user email
    ///
    /// Example: "humphray.bogart@yahoo.ma"
    public var email: String
    /// Your friend's user profile picture url
    ///
    /// Example: "https://www.biography.com/.image/c_fill,cs_srgb,dpr_1.0,g_face,h_300,q_80,w_300/MTE4MDAzNDEwNDU3MjMyOTEw/humphrey-bogart-9217486-1-402.jpg"
    public var profilePictureURL: String?
    /// Your friend's user country iso code alpha 3
    ///
    /// Example: "USA"
    public var countryIsoCodeAlpha3: String
    /// Your friend's user company name
    ///
    /// Example: "World company"
    public var company: String
    /// Your friend's user occupation in his company
    ///
    /// Example: "I'm an actor..."
    public var whatIDo: String?

    public init(userID: String, lastName: String, firstName: String, email: String, profilePictureURL: String? = nil, countryIsoCodeAlpha3: String, company: String, whatIDo: String? = nil) {
        self.userID = userID
        self.lastName = lastName
        self.firstName = firstName
        self.email = email
        self.profilePictureURL = profilePictureURL
        self.countryIsoCodeAlpha3 = countryIsoCodeAlpha3
        self.company = company
        self.whatIDo = whatIDo
    }

    private enum CodingKeys: String, CodingKey {
        case userID = "userId"
        case lastName
        case firstName
        case email
        case profilePictureURL = "profilePictureUrl"
        case countryIsoCodeAlpha3
        case company
        case whatIDo
    }
}

public struct CreateContractResponseLinks: Codable {
    public var this: BeezUPCommonLink3?
    public var contracts: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3? = nil, contracts: BeezUPCommonLink3? = nil) {
        self.this = this
        self.contracts = contracts
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case contracts
    }
}

public struct CreateContractResponse: Codable {
    public var links: CreateContractResponseLinks?
    public var info: BeezUPCommonInfoSummaries?

    public init(links: CreateContractResponseLinks? = nil, info: BeezUPCommonInfoSummaries? = nil) {
        self.links = links
        self.info = info
    }
}

public struct ContractsLinks: Codable {
    public var this: BeezUPCommonLink3?
    public var create: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3? = nil, create: BeezUPCommonLink3? = nil) {
        self.this = this
        self.create = create
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case create
    }
}

public struct CurrentContractInfoLinks: Codable {
    public var disable: BeezUPCommonLink3?
    public var reenable: BeezUPCommonLink3?

    public init(disable: BeezUPCommonLink3? = nil, reenable: BeezUPCommonLink3? = nil) {
        self.disable = disable
        self.reenable = reenable
    }
}

public struct NextContractInfoLinks: Codable {
    public var delete: BeezUPCommonLink3?

    public init(delete: BeezUPCommonLink3? = nil) {
        self.delete = delete
    }
}

public struct CurrentContractInfo: Codable {
    /// Describe the conditions of a contract
    public var contractInfo: ContractInfo
    public var links: CurrentContractInfoLinks

    public init(contractInfo: ContractInfo, links: CurrentContractInfoLinks) {
        self.contractInfo = contractInfo
        self.links = links
    }

    public init(from decoder: Decoder) throws {
        self.contractInfo = try ContractInfo(from: decoder)
        self.links = try CurrentContractInfoLinks(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(contractInfo, forKey: "contractInfo")
        try values.encode(links, forKey: "links")
    }
}

public struct Contracts: Codable {
    public var links: ContractsLinks
    public var current: CurrentContractInfo?
    public var next: NextContractInfo?

    public init(links: ContractsLinks, current: CurrentContractInfo? = nil, next: NextContractInfo? = nil) {
        self.links = links
        self.current = current
        self.next = next
    }
}

public struct NextContractInfo: Codable {
    /// Describe the conditions of a contract
    public var contractInfo: ContractInfo
    public var links: NextContractInfoLinks

    public init(contractInfo: ContractInfo, links: NextContractInfoLinks) {
        self.contractInfo = contractInfo
        self.links = links
    }

    public init(from decoder: Decoder) throws {
        self.contractInfo = try ContractInfo(from: decoder)
        self.links = try NextContractInfoLinks(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(contractInfo, forKey: "contractInfo")
        try values.encode(links, forKey: "links")
    }
}

/// Describe the conditions of a contract
public struct ContractInfo: Codable {
    /// The trial period in month
    public var trialPeriodInMonth: Int?
    /// The percent discount related to the billing period
    public var billingPeriodPercentDiscount: Double?
    /// The discount duration in month
    public var discountDurationInMonth: Int?
    /// The percent of the discount
    public var percentDiscount: Double?
    /// The offer id based on /offers. Not a free offer of course.
    public var offerID: Int?
    /// The store count you want to have in your contract.
    public var storeCount: Int?
    /// The start date of your contract
    public var startUtcDate: Date?
    /// The calculated end date of commitment
    public var commitmentCalculatedFinishUtcDate: Date?
    /// The billing period in month
    public var billingPeriodInMonth: Int?
    /// The fixed price of your contract
    public var fixedPrice: Double?
    /// The offer name based on /offers
    public var offerName: String?
    /// The currency code <a href="https://en.wikipedia.org/wiki/ISO_4217">(ISO 4217)</a>
    ///
    /// Example: "EUR"
    public var currencyCode: String?
    /// Your contract identifier
    ///
    /// Example: "7098487a-86f6-4322-b8a5-b67f7363b3e7"
    public var contractID: String?
    /// The commitment period in month
    public var commitmentPeriodInMonth: Int?
    /// The click included
    public var clickIncluded: Int?
    /// Additional click price
    public var additionalClickPrice: Double?
    /// The IP of the user who creates the contract
    public var ipUserCreation: String?
    /// The IP of the user who modified the contract
    public var ipUserModification: String?
    /// Internal usage: Old offer type. Describe the fix and variable model information
    public var fixedAndVariableClickInfo: FixedAndVariableClickModelInfo?
    /// Internal usage: Old offer type. Describe the fix and variable model information
    public var variableModelInfo: VariableModelInfo?
    /// Is commitment is automatically renewed
    public var isCommitmentRenewalAutomatically: Bool?
    /// The end of your discount
    public var discountEndUtcDate: Date?
    /// Is the contract is modifiable ?
    public var isModifiableContract: Bool?

    public init(trialPeriodInMonth: Int? = nil, billingPeriodPercentDiscount: Double? = nil, discountDurationInMonth: Int? = nil, percentDiscount: Double? = nil, offerID: Int? = nil, storeCount: Int? = nil, startUtcDate: Date? = nil, commitmentCalculatedFinishUtcDate: Date? = nil, billingPeriodInMonth: Int? = nil, fixedPrice: Double? = nil, offerName: String? = nil, currencyCode: String? = nil, contractID: String? = nil, commitmentPeriodInMonth: Int? = nil, clickIncluded: Int? = nil, additionalClickPrice: Double? = nil, ipUserCreation: String? = nil, ipUserModification: String? = nil, fixedAndVariableClickInfo: FixedAndVariableClickModelInfo? = nil, variableModelInfo: VariableModelInfo? = nil, isCommitmentRenewalAutomatically: Bool? = nil, discountEndUtcDate: Date? = nil, isModifiableContract: Bool? = nil) {
        self.trialPeriodInMonth = trialPeriodInMonth
        self.billingPeriodPercentDiscount = billingPeriodPercentDiscount
        self.discountDurationInMonth = discountDurationInMonth
        self.percentDiscount = percentDiscount
        self.offerID = offerID
        self.storeCount = storeCount
        self.startUtcDate = startUtcDate
        self.commitmentCalculatedFinishUtcDate = commitmentCalculatedFinishUtcDate
        self.billingPeriodInMonth = billingPeriodInMonth
        self.fixedPrice = fixedPrice
        self.offerName = offerName
        self.currencyCode = currencyCode
        self.contractID = contractID
        self.commitmentPeriodInMonth = commitmentPeriodInMonth
        self.clickIncluded = clickIncluded
        self.additionalClickPrice = additionalClickPrice
        self.ipUserCreation = ipUserCreation
        self.ipUserModification = ipUserModification
        self.fixedAndVariableClickInfo = fixedAndVariableClickInfo
        self.variableModelInfo = variableModelInfo
        self.isCommitmentRenewalAutomatically = isCommitmentRenewalAutomatically
        self.discountEndUtcDate = discountEndUtcDate
        self.isModifiableContract = isModifiableContract
    }

    private enum CodingKeys: String, CodingKey {
        case trialPeriodInMonth
        case billingPeriodPercentDiscount
        case discountDurationInMonth
        case percentDiscount
        case offerID = "offerId"
        case storeCount
        case startUtcDate
        case commitmentCalculatedFinishUtcDate
        case billingPeriodInMonth
        case fixedPrice
        case offerName
        case currencyCode
        case contractID = "contractId"
        case commitmentPeriodInMonth
        case clickIncluded
        case additionalClickPrice
        case ipUserCreation
        case ipUserModification
        case fixedAndVariableClickInfo
        case variableModelInfo
        case isCommitmentRenewalAutomatically
        case discountEndUtcDate
        case isModifiableContract
    }
}

public struct ClickIncludedAndAdditionalClickPrice: Codable {
    /// The click included
    public var clickIncluded: Int?
    /// The additional click price
    public var additionalClickPrice: Double?

    public init(clickIncluded: Int? = nil, additionalClickPrice: Double? = nil) {
        self.clickIncluded = clickIncluded
        self.additionalClickPrice = additionalClickPrice
    }
}

public struct ClickIncludedAndVariablePrice: Codable {
    /// Click included
    public var clickIncluded: Int?
    /// The pricing applied for this range
    public var variablePrice: Double?

    public init(clickIncluded: Int? = nil, variablePrice: Double? = nil) {
        self.clickIncluded = clickIncluded
        self.variablePrice = variablePrice
    }
}

/// The contract termination info
public struct TerminateContract: Codable {
    /// The contract termination reason type identifier, if your current contract is scheduled to be terminated. The value is based on the list of values /user/lov/ContractTerminationReason
    public var contractTerminationReasonType: Int
    /// The termination reason, if your current contract is scheduled to be terminated.
    ///
    /// Example: "I'm crazy, I want to leave your splendid service..."
    public var contractTerminationReason: String?

    public init(contractTerminationReasonType: Int, contractTerminationReason: String? = nil) {
        self.contractTerminationReasonType = contractTerminationReasonType
        self.contractTerminationReason = contractTerminationReason
    }
}

public struct OfferRequest: Codable {
    /// The offer id based on /offers. Not a free offer of course.
    public var offerID: Int
    /// The store count you want to have in your contract.
    public var storeCount: Int
    /// The coupon discount code
    ///
    /// Example: "I-LOVE-BEEZUP"
    public var couponDiscountCode: String?
    /// Your special coupon offer identifier
    ///
    /// Example: "04efc310-bc25-4710-a83a-faf200284fe5"
    public var couponOfferCode: String?
    /// Can be null. The billing period in month based on /billingPeriods
    ///
    /// Example: 12
    public var billingPeriodInMonth: Int

    public init(offerID: Int, storeCount: Int, couponDiscountCode: String? = nil, couponOfferCode: String? = nil, billingPeriodInMonth: Int) {
        self.offerID = offerID
        self.storeCount = storeCount
        self.couponDiscountCode = couponDiscountCode
        self.couponOfferCode = couponOfferCode
        self.billingPeriodInMonth = billingPeriodInMonth
    }

    private enum CodingKeys: String, CodingKey {
        case offerID = "offerId"
        case storeCount
        case couponDiscountCode
        case couponOfferCode
        case billingPeriodInMonth
    }
}

/// Payment method
public enum PaymentMethod: String, Codable, CaseIterable {
    case transfer = "Transfer"
    case debit = "Debit"
    case paypal = "Paypal"
    case check = "Check"
    case creditNote = "CreditNote"
    case loss = "Loss"
    case onlinePayment = "OnlinePayment"
}

public struct Offer: Codable {
    public var content: OfferContent?
    public var info: BeezUPCommonInfoSummaries?
    /// The different actions you can make on this offer
    public var links: OfferLinks?

    public init(content: OfferContent? = nil, info: BeezUPCommonInfoSummaries? = nil, links: OfferLinks? = nil) {
        self.content = content
        self.info = info
        self.links = links
    }
}

/// The different actions you can make on this offer
public struct OfferLinks: Codable {
    public var createContract: BeezUPCommonLink3?

    public init(createContract: BeezUPCommonLink3? = nil) {
        self.createContract = createContract
    }
}

public struct OfferContent: Codable {
    /// Describe the prorata info based on your previous invoice
    public var previousFixPeriodInvoiceProrataInfo: PreviousFixPeriodInvoiceProrataInfo
    /// Describe the billing period information related to the offer.
    public var contractBillingPeriodInfo: ContractBillingPeriodInfo
    /// Describe the click information related to the offer.
    public var contractClickInfo: ContractClickInfo
    /// Describe the commitment information related to the offer.
    public var contractCommitmentInfo: ContractCommitmentInfo
    /// Describe the discount information related to the offer.
    public var contractDiscountInfo: ContractDiscountInfo
    /// Describe the pricing information related to the offer.
    public var contractMoneyInfo: ContractMoneyInfo
    /// Describe the store information related to the offer.
    public var contractStoreInfo: ContractStoreInfo
    /// Describe the bonus information related to your current contract.
    public var contractBonusInfo: ContractBonusInfo
    /// The contract termination reason type identifier, if your current contract is scheduled to be terminated. The value is based on the list of values /user/lov/ContractTerminationReason
    public var contractTerminationReasonType: Int?
    /// The termination reason, if your current contract is scheduled to be terminated.
    ///
    /// Example: "I'm crazy, I want to leave your splendid service..."
    public var contractTerminationReason: String?
    /// Internal usage: Indicates if we have to notify you about VAT exemption.
    ///
    /// Example: true
    public var isNotifyVatExemption: Bool

    public init(previousFixPeriodInvoiceProrataInfo: PreviousFixPeriodInvoiceProrataInfo, contractBillingPeriodInfo: ContractBillingPeriodInfo, contractClickInfo: ContractClickInfo, contractCommitmentInfo: ContractCommitmentInfo, contractDiscountInfo: ContractDiscountInfo, contractMoneyInfo: ContractMoneyInfo, contractStoreInfo: ContractStoreInfo, contractBonusInfo: ContractBonusInfo, contractTerminationReasonType: Int? = nil, contractTerminationReason: String? = nil, isNotifyVatExemption: Bool) {
        self.previousFixPeriodInvoiceProrataInfo = previousFixPeriodInvoiceProrataInfo
        self.contractBillingPeriodInfo = contractBillingPeriodInfo
        self.contractClickInfo = contractClickInfo
        self.contractCommitmentInfo = contractCommitmentInfo
        self.contractDiscountInfo = contractDiscountInfo
        self.contractMoneyInfo = contractMoneyInfo
        self.contractStoreInfo = contractStoreInfo
        self.contractBonusInfo = contractBonusInfo
        self.contractTerminationReasonType = contractTerminationReasonType
        self.contractTerminationReason = contractTerminationReason
        self.isNotifyVatExemption = isNotifyVatExemption
    }

    private enum CodingKeys: String, CodingKey {
        case previousFixPeriodInvoiceProrataInfo
        case contractBillingPeriodInfo
        case contractClickInfo
        case contractCommitmentInfo
        case contractDiscountInfo
        case contractMoneyInfo
        case contractStoreInfo
        case contractBonusInfo
        case contractTerminationReasonType
        case contractTerminationReason
        case isNotifyVatExemption = "notifyVatExemption"
    }
}

/// Describe the prorata info based on your previous invoice
public struct PreviousFixPeriodInvoiceProrataInfo: Codable {
    /// The prorata amount
    ///
    /// Example: 194.66
    public var computedProrataToBeDeducted: Double?
    /// The previous invoice number
    ///
    /// Example: "B1234"
    public var invoiceNumber: String?
    /// The amount to be payed of the previous invoice
    ///
    /// Example: 0.0
    public var amountToBePaid: Double?
    /// The amout after tax of the previous invoice
    ///
    /// Example: 101.42
    public var amountAfterTax: Double?
    /// The contract id related to the previous invoice
    ///
    /// Example: "8a7fbdec-9e71-472e-9974-27d5c1d57cf8"
    public var contractID: String?
    /// The fixed end period of the previous invoice
    ///
    /// Example: "2017-05-01"
    public var fixedPeriodEndDate: NaiveDate?
    /// The fixed start period of the previous invoice
    ///
    /// Example: "2017-04-01"
    public var fixedPeriodStartDate: NaiveDate?

    public init(computedProrataToBeDeducted: Double? = nil, invoiceNumber: String? = nil, amountToBePaid: Double? = nil, amountAfterTax: Double? = nil, contractID: String? = nil, fixedPeriodEndDate: NaiveDate? = nil, fixedPeriodStartDate: NaiveDate? = nil) {
        self.computedProrataToBeDeducted = computedProrataToBeDeducted
        self.invoiceNumber = invoiceNumber
        self.amountToBePaid = amountToBePaid
        self.amountAfterTax = amountAfterTax
        self.contractID = contractID
        self.fixedPeriodEndDate = fixedPeriodEndDate
        self.fixedPeriodStartDate = fixedPeriodStartDate
    }

    private enum CodingKeys: String, CodingKey {
        case computedProrataToBeDeducted
        case invoiceNumber
        case amountToBePaid
        case amountAfterTax
        case contractID = "contractId"
        case fixedPeriodEndDate
        case fixedPeriodStartDate
    }
}

/// Describe the billing period information related to the offer.
public struct ContractBillingPeriodInfo: Codable {
    /// The amount discounted related to the billing period
    ///
    /// Example: 20.0
    public var amountBillingPeriodDiscount: Double?
    /// The discount percent related to the billing period
    ///
    /// Example: 10.0
    public var billingPeriodPercentDiscount: Double?
    /// Can be null. The billing period in month based on /billingPeriods
    ///
    /// Example: 12
    public var billingPeriodInMonth: Int?

    public init(amountBillingPeriodDiscount: Double? = nil, billingPeriodPercentDiscount: Double? = nil, billingPeriodInMonth: Int? = nil) {
        self.amountBillingPeriodDiscount = amountBillingPeriodDiscount
        self.billingPeriodPercentDiscount = billingPeriodPercentDiscount
        self.billingPeriodInMonth = billingPeriodInMonth
    }
}

/// Describe the click information related to the offer.
public struct ContractClickInfo: Codable {
    /// The addition click price in the offer
    ///
    /// Example: 0.001
    public var additionalClickPrice: Double?
    /// The click included in the offer
    ///
    /// Example: 5000
    public var clickIncluded: Int?
    /// The click included in your current contract
    ///
    /// Example: 5000
    public var initialOfferClickIncluded: Int?

    public init(additionalClickPrice: Double? = nil, clickIncluded: Int? = nil, initialOfferClickIncluded: Int? = nil) {
        self.additionalClickPrice = additionalClickPrice
        self.clickIncluded = clickIncluded
        self.initialOfferClickIncluded = initialOfferClickIncluded
    }
}

/// Describe the commitment information related to the offer.
public struct ContractCommitmentInfo: Codable {
    /// The commitment end date related to the offer
    ///
    /// Example: "2017-06-02"
    public var commitmentCalculatedFinishDate: NaiveDate?
    /// The start date related to the offer
    public var newContractStartDate: Date?
    /// The commitment period in month related to the offer
    public var commitmentPeriodInMonth: Int?
    /// The trial period in month related to the offer
    public var trialPeriodInMonth: Int?
    /// The trial period end date related to the offer
    public var trialPeriodFinishDate: NaiveDate?
    /// The payment delay in days related to the offer
    public var paymentDelayInDays: Int?
    /// The offer id based on /offers. Not a free offer of course.
    public var offerID: Int?
    /// The offer Name
    ///
    /// Example: "Premium"
    public var offerName: String?
    /// Your current contract id
    ///
    /// Example: "dce56457-aa23-478d-8d76-b56eb9be799f"
    public var currentContractID: String?
    /// Your current commercial user id
    ///
    /// Example: "0ddc2b79-10fe-4071-8161-42faa897082f"
    public var commercialUserID: String?
    /// Interal usage: Old offer type. The model description
    ///
    /// Example: "BLABLA"
    public var model: String?
    /// The current contract termination date
    ///
    /// Example: "2017-06-02"
    public var currentContractTerminationDate: NaiveDate?
    /// Payment method
    public var requestedPaymentMethod: PaymentMethod?
    /// Payment method
    public var currentCustomerPaymentMethod: PaymentMethod?
    /// Internal usage: Old offer type. Your contract type
    ///
    /// Example: 1234
    public var contractType: Int?
    /// Internal usage: Old offer type. Is the current contract model needs to be converted into a new contract type
    ///
    /// Example: false
    public var isModelMustBeTransmittedInNewContract: Bool?
    /// Internal usage: Old offer type. Describe the fix and variable model information
    public var fixedAndVariableClickInfo: FixedAndVariableClickModelInfo?
    /// Internal usage: Old offer type. Describe the fix and variable model information
    public var variableModelInfo: VariableModelInfo?
    /// Payment method
    public var paymentMethodAuthorized: PaymentMethod?
    /// Your special coupon offer identifier
    ///
    /// Example: "04efc310-bc25-4710-a83a-faf200284fe5"
    public var couponOfferCode: String?
    /// The commercial that is responsible of the creation of your account
    ///
    /// Example: "6e07814d-26a9-494b-91b2-e5ed0b9aba8c"
    public var commercialCreatorUserID: String?
    /// The minimum billing period in month authorized for this offer.
    public var minBillingPeriodInMonths: Int?
    /// If true, this means you want to leave us and that's sad... :'-(
    ///
    /// Example: false
    public var isCustomerWantsToTerminateHisContract: Bool?

    public init(commitmentCalculatedFinishDate: NaiveDate? = nil, newContractStartDate: Date? = nil, commitmentPeriodInMonth: Int? = nil, trialPeriodInMonth: Int? = nil, trialPeriodFinishDate: NaiveDate? = nil, paymentDelayInDays: Int? = nil, offerID: Int? = nil, offerName: String? = nil, currentContractID: String? = nil, commercialUserID: String? = nil, model: String? = nil, currentContractTerminationDate: NaiveDate? = nil, requestedPaymentMethod: PaymentMethod? = nil, currentCustomerPaymentMethod: PaymentMethod? = nil, contractType: Int? = nil, isModelMustBeTransmittedInNewContract: Bool? = nil, fixedAndVariableClickInfo: FixedAndVariableClickModelInfo? = nil, variableModelInfo: VariableModelInfo? = nil, paymentMethodAuthorized: PaymentMethod? = nil, couponOfferCode: String? = nil, commercialCreatorUserID: String? = nil, minBillingPeriodInMonths: Int? = nil, isCustomerWantsToTerminateHisContract: Bool? = nil) {
        self.commitmentCalculatedFinishDate = commitmentCalculatedFinishDate
        self.newContractStartDate = newContractStartDate
        self.commitmentPeriodInMonth = commitmentPeriodInMonth
        self.trialPeriodInMonth = trialPeriodInMonth
        self.trialPeriodFinishDate = trialPeriodFinishDate
        self.paymentDelayInDays = paymentDelayInDays
        self.offerID = offerID
        self.offerName = offerName
        self.currentContractID = currentContractID
        self.commercialUserID = commercialUserID
        self.model = model
        self.currentContractTerminationDate = currentContractTerminationDate
        self.requestedPaymentMethod = requestedPaymentMethod
        self.currentCustomerPaymentMethod = currentCustomerPaymentMethod
        self.contractType = contractType
        self.isModelMustBeTransmittedInNewContract = isModelMustBeTransmittedInNewContract
        self.fixedAndVariableClickInfo = fixedAndVariableClickInfo
        self.variableModelInfo = variableModelInfo
        self.paymentMethodAuthorized = paymentMethodAuthorized
        self.couponOfferCode = couponOfferCode
        self.commercialCreatorUserID = commercialCreatorUserID
        self.minBillingPeriodInMonths = minBillingPeriodInMonths
        self.isCustomerWantsToTerminateHisContract = isCustomerWantsToTerminateHisContract
    }

    private enum CodingKeys: String, CodingKey {
        case commitmentCalculatedFinishDate
        case newContractStartDate
        case commitmentPeriodInMonth
        case trialPeriodInMonth
        case trialPeriodFinishDate
        case paymentDelayInDays
        case offerID = "offerId"
        case offerName
        case currentContractID = "currentContractId"
        case commercialUserID = "commercialUserId"
        case model
        case currentContractTerminationDate
        case requestedPaymentMethod
        case currentCustomerPaymentMethod
        case contractType
        case isModelMustBeTransmittedInNewContract
        case fixedAndVariableClickInfo
        case variableModelInfo
        case paymentMethodAuthorized
        case couponOfferCode
        case commercialCreatorUserID = "commercialCreatorUserId"
        case minBillingPeriodInMonths
        case isCustomerWantsToTerminateHisContract
    }
}

/// Describe the discount information related to the offer.
public struct ContractDiscountInfo: Codable {
    /// The amount discounted per month
    ///
    /// Example: 101.42
    public var amountCodePromoDiscountPerMonth: Double?
    /// Duration of the discount in month
    public var discountDurationInMonth: Int?
    /// Percentage of the discount
    ///
    /// Example: 20.0
    public var percentDiscount: Double?
    /// Indicate the validaty of the discount
    ///
    /// Example: "Valid"
    public var promotionalCodeValidity: PromotionalCodeValidity?
    /// The discount amount
    ///
    /// Example: 101.42
    public var amountCodePromoDiscount: Double?
    /// The discount code
    ///
    /// Example: "I-LOVE-BEEZUP"
    public var couponDiscountCode: String?
    /// Internal use: The discount id
    public var couponDiscountID: Int?
    /// Is this discount is related to a coupon offer
    ///
    /// Example: true
    public var isCouponDiscountLinkedToCouponOffer: Bool?
    /// Do you have currently a discount on your contract ?
    ///
    /// Example: true
    public var customerHasActualDiscount: Bool?

    public init(amountCodePromoDiscountPerMonth: Double? = nil, discountDurationInMonth: Int? = nil, percentDiscount: Double? = nil, promotionalCodeValidity: PromotionalCodeValidity? = nil, amountCodePromoDiscount: Double? = nil, couponDiscountCode: String? = nil, couponDiscountID: Int? = nil, isCouponDiscountLinkedToCouponOffer: Bool? = nil, customerHasActualDiscount: Bool? = nil) {
        self.amountCodePromoDiscountPerMonth = amountCodePromoDiscountPerMonth
        self.discountDurationInMonth = discountDurationInMonth
        self.percentDiscount = percentDiscount
        self.promotionalCodeValidity = promotionalCodeValidity
        self.amountCodePromoDiscount = amountCodePromoDiscount
        self.couponDiscountCode = couponDiscountCode
        self.couponDiscountID = couponDiscountID
        self.isCouponDiscountLinkedToCouponOffer = isCouponDiscountLinkedToCouponOffer
        self.customerHasActualDiscount = customerHasActualDiscount
    }

    private enum CodingKeys: String, CodingKey {
        case amountCodePromoDiscountPerMonth
        case discountDurationInMonth
        case percentDiscount
        case promotionalCodeValidity
        case amountCodePromoDiscount
        case couponDiscountCode
        case couponDiscountID = "couponDiscountId"
        case isCouponDiscountLinkedToCouponOffer
        case customerHasActualDiscount
    }
}

/// Describe the pricing information related to the offer.
public struct ContractMoneyInfo: Codable {
    /// The amount excluding taxes and excluding code promo discount including billing period discount.
    public var amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount: Double?
    /// The amount excluding taxes including discounts.
    public var amountExcludingTaxesIncludingDiscounts: Double?
    /// The taxes excluding discount including billing period discount.
    public var amountTaxesExcludingDiscountIncludingBillingPeriodDiscount: Double?
    /// The amount including taxes excluding discount including billing period discount.
    public var amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount: Double?
    /// The currency code <a href="https://en.wikipedia.org/wiki/ISO_4217">(ISO 4217)</a>
    ///
    /// Example: "EUR"
    public var currencyCode: String?
    /// The VAT percent.
    public var vatPercent: Double?
    /// The amount excluding taxes including discounts per month.
    public var amountExcludingTaxesIncludingDiscountsPerMonth: Double?
    /// The amount excluding taxes and excluding discounts.
    public var amountExcludingTaxesAndExcludingDiscounts: Double?
    /// Taxes including discounts.
    public var amountTaxesIncludingDiscounts: Double?
    /// The amount including taxes including discounts.
    public var amountIncludingTaxesIncludingDiscounts: Double?
    /// The initial offer fixed price.
    public var initialOfferFixedPrice: Double?

    public init(amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount: Double? = nil, amountExcludingTaxesIncludingDiscounts: Double? = nil, amountTaxesExcludingDiscountIncludingBillingPeriodDiscount: Double? = nil, amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount: Double? = nil, currencyCode: String? = nil, vatPercent: Double? = nil, amountExcludingTaxesIncludingDiscountsPerMonth: Double? = nil, amountExcludingTaxesAndExcludingDiscounts: Double? = nil, amountTaxesIncludingDiscounts: Double? = nil, amountIncludingTaxesIncludingDiscounts: Double? = nil, initialOfferFixedPrice: Double? = nil) {
        self.amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount = amountExcludingTaxesAndExcludingCodePromoDiscountIncludingBillingPeriodDiscount
        self.amountExcludingTaxesIncludingDiscounts = amountExcludingTaxesIncludingDiscounts
        self.amountTaxesExcludingDiscountIncludingBillingPeriodDiscount = amountTaxesExcludingDiscountIncludingBillingPeriodDiscount
        self.amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount = amountIncludingTaxesExcludingDiscountIncludingBillingPeriodDiscount
        self.currencyCode = currencyCode
        self.vatPercent = vatPercent
        self.amountExcludingTaxesIncludingDiscountsPerMonth = amountExcludingTaxesIncludingDiscountsPerMonth
        self.amountExcludingTaxesAndExcludingDiscounts = amountExcludingTaxesAndExcludingDiscounts
        self.amountTaxesIncludingDiscounts = amountTaxesIncludingDiscounts
        self.amountIncludingTaxesIncludingDiscounts = amountIncludingTaxesIncludingDiscounts
        self.initialOfferFixedPrice = initialOfferFixedPrice
    }
}

/// Describe the store information related to the offer.
public struct ContractStoreInfo: Codable {
    /// The store count you want to have in your contract.
    public var storeCount: Int?
    /// The maximum store count related to the offer.
    public var maxStoreCount: Int?
    /// The minimum store count related to the offer.
    public var minStoreCount: Int?
    /// The owned store count.
    public var ownedStoreCount: Int?
    /// The additional store price.
    public var additionalStorePrice: Double?
    /// The store count included in the offer.
    public var storeIncluded: Int?

    public init(storeCount: Int? = nil, maxStoreCount: Int? = nil, minStoreCount: Int? = nil, ownedStoreCount: Int? = nil, additionalStorePrice: Double? = nil, storeIncluded: Int? = nil) {
        self.storeCount = storeCount
        self.maxStoreCount = maxStoreCount
        self.minStoreCount = minStoreCount
        self.ownedStoreCount = ownedStoreCount
        self.additionalStorePrice = additionalStorePrice
        self.storeIncluded = storeIncluded
    }
}

/// Describe the bonus information related to your current contract.
public struct ContractBonusInfo: Codable {
    public var bonuses: [BonusInfo]

    public init(bonuses: [BonusInfo]) {
        self.bonuses = bonuses
    }
}

/// Internal usage: Old offer type. Describe the fix and variable model information
public struct FixedAndVariableClickModelInfo: Codable {
    public var clickIncludedAndAdditionalClickPrices: [ClickIncludedAndAdditionalClickPrice]

    public init(clickIncludedAndAdditionalClickPrices: [ClickIncludedAndAdditionalClickPrice]) {
        self.clickIncludedAndAdditionalClickPrices = clickIncludedAndAdditionalClickPrices
    }
}

/// Internal usage: Old offer type. Describe the fix and variable model information
public struct VariableModelInfo: Codable {
    /// Click included with variable pricing information
    public var clickIncludedAndVariablePrices: [ClickIncludedAndVariablePrice]
    /// The overflow click count
    public var overflowClickCount: Int
    /// The overflow click price
    public var overflowClickPrice: Double

    public init(clickIncludedAndVariablePrices: [ClickIncludedAndVariablePrice], overflowClickCount: Int, overflowClickPrice: Double) {
        self.clickIncludedAndVariablePrices = clickIncludedAndVariablePrices
        self.overflowClickCount = overflowClickCount
        self.overflowClickPrice = overflowClickPrice
    }
}

public struct BonusInfo: Codable {
    public var bonusType: BonusType
    /// Example: 12.34
    public var amount: Double

    public init(bonusType: BonusType, amount: Double) {
        self.bonusType = bonusType
        self.amount = amount
    }
}

/// Your profile picture choice about usage of gravatar picture, initials picture or uploaded picture.
///
/// Example: "initials"
public enum ProfilePictureSelected: String, Codable, CaseIterable {
    case gravatar
    case initials
    case uploaded
}

/// The different actions you can make on this account
public struct AccountInfoLinks: Codable {
    public var this: BeezUPCommonLink3
    public var savePersonalInfo: BeezUPCommonLink3
    public var changeEmail: BeezUPCommonLink3
    public var changePassword: BeezUPCommonLink3
    public var saveCompanyInfo: BeezUPCommonLink3
    public var getProfilePictureInfo: BeezUPCommonLink3
    public var saveProfilePictureInfo: BeezUPCommonLink3
    public var getCreditCardInfo: BeezUPCommonLink3
    public var saveCreditCardInfo: BeezUPCommonLink3
    public var activateUserAccount: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3, savePersonalInfo: BeezUPCommonLink3, changeEmail: BeezUPCommonLink3, changePassword: BeezUPCommonLink3, saveCompanyInfo: BeezUPCommonLink3, getProfilePictureInfo: BeezUPCommonLink3, saveProfilePictureInfo: BeezUPCommonLink3, getCreditCardInfo: BeezUPCommonLink3, saveCreditCardInfo: BeezUPCommonLink3, activateUserAccount: BeezUPCommonLink3? = nil) {
        self.this = this
        self.savePersonalInfo = savePersonalInfo
        self.changeEmail = changeEmail
        self.changePassword = changePassword
        self.saveCompanyInfo = saveCompanyInfo
        self.getProfilePictureInfo = getProfilePictureInfo
        self.saveProfilePictureInfo = saveProfilePictureInfo
        self.getCreditCardInfo = getCreditCardInfo
        self.saveCreditCardInfo = saveCreditCardInfo
        self.activateUserAccount = activateUserAccount
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case savePersonalInfo
        case changeEmail
        case changePassword
        case saveCompanyInfo
        case getProfilePictureInfo
        case saveProfilePictureInfo
        case getCreditCardInfo
        case saveCreditCardInfo
        case activateUserAccount
    }
}

public struct AccountInfo: Codable {
    /// The user identifier
    ///
    /// Example: "8a7fbdec-9e71-472e-9974-27d5c1d57cf8"
    public var userID: String
    /// The email
    ///
    /// Example: "paulsimon@mysupercompany.com"
    public var email: String
    /// The email
    ///
    /// Example: "paulsimon@mysupercompany.com"
    public var commercialOwnerEmail: String?
    public var personalInfo: PersonalInfo?
    /// The account status
    /// * Active:  When the account is active
    /// * SystemBlocked:  When all stores on the account are blocked by the system
    /// * UserBlocked: When all stores on the account are blocked on GO not on the system
    /// * NotActivated: When the email is not verified
    ///
    /// Example: "Active"
    public var status: AccountStatus
    public var companyInfo: CompanyInfo?
    /// Indicate the url of your picture profil
    ///
    /// Example: "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e5/Marlon_Brando_%28cropped%29.jpg/220px-Marlon_Brando_%28cropped%29.jpg"
    public var profilePictureURL: String?
    /// The different actions you can make on this account
    public var links: AccountInfoLinks
    public var info: BeezUPCommonInfoSummaries?

    public init(userID: String, email: String, commercialOwnerEmail: String? = nil, personalInfo: PersonalInfo? = nil, status: AccountStatus, companyInfo: CompanyInfo? = nil, profilePictureURL: String? = nil, links: AccountInfoLinks, info: BeezUPCommonInfoSummaries? = nil) {
        self.userID = userID
        self.email = email
        self.commercialOwnerEmail = commercialOwnerEmail
        self.personalInfo = personalInfo
        self.status = status
        self.companyInfo = companyInfo
        self.profilePictureURL = profilePictureURL
        self.links = links
        self.info = info
    }

    private enum CodingKeys: String, CodingKey {
        case userID = "userId"
        case email
        case commercialOwnerEmail
        case personalInfo
        case status
        case companyInfo
        case profilePictureURL = "profilePictureUrl"
        case links
        case info
    }
}

public struct PersonalInfo: Codable {
    /// Your last name
    ///
    /// Example: "Simon"
    public var lastName: String
    /// Your first name
    ///
    /// Example: "Paul"
    public var firstName: String
    /// Your phone number
    ///
    /// Example: "5551234"
    public var phoneNumber: String
    /// Your role in your company
    ///
    /// Example: "I'm the Manager on this company"
    public var whatIDo: String?
    /// The time zone identifier based on the list of values /v2/user/lov/BeezUPTimeZone
    ///
    /// Example: 79
    public var beezUPTimeZoneID: Int

    public init(lastName: String, firstName: String, phoneNumber: String, whatIDo: String? = nil, beezUPTimeZoneID: Int) {
        self.lastName = lastName
        self.firstName = firstName
        self.phoneNumber = phoneNumber
        self.whatIDo = whatIDo
        self.beezUPTimeZoneID = beezUPTimeZoneID
    }

    private enum CodingKeys: String, CodingKey {
        case lastName
        case firstName
        case phoneNumber
        case whatIDo
        case beezUPTimeZoneID = "beezUPTimeZoneId"
    }
}

public struct ChangeEmailRequest: Codable {
    /// The email
    ///
    /// Example: "paulsimon@mysupercompany.com"
    public var newEmail: String

    public init(newEmail: String) {
        self.newEmail = newEmail
    }
}

public struct ChangePasswordRequest: Codable {
    /// Your current password
    public var oldPassword: String
    /// Your new password. Which must respect the same constraints as the user registeration
    public var newPassword: String

    public init(oldPassword: String, newPassword: String) {
        self.oldPassword = oldPassword
        self.newPassword = newPassword
    }
}

public struct CompanyInfo: Codable {
    /// Your address
    ///
    /// Example: "21 jump street"
    public var address: String
    /// Your address postal code
    ///
    /// Example: "13014"
    public var postalCode: String
    /// Your address city
    ///
    /// Example: "New-York"
    public var city: String
    /// The country iso code alpha 3 <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3">(ISO 3166-1_alpha-3)</a>
    ///
    /// Example: "FRA"
    public var countryIsoCodeAlpha3: String
    /// Your company name
    ///
    /// Example: "My super company"
    public var company: String
    /// Your company VATNumber. Used for french company. This number is checked with official web service before being saved.
    ///
    /// Example: "1234567890"
    public var vatNumber: String?
    /// Your company accounting emails
    ///
    /// Example: ["myaccountemail@mysupercompany.com"]
    public var accountingEmails: [String]?

    public init(address: String, postalCode: String, city: String, countryIsoCodeAlpha3: String, company: String, vatNumber: String? = nil, accountingEmails: [String]? = nil) {
        self.address = address
        self.postalCode = postalCode
        self.city = city
        self.countryIsoCodeAlpha3 = countryIsoCodeAlpha3
        self.company = company
        self.vatNumber = vatNumber
        self.accountingEmails = accountingEmails
    }
}

public struct ProfilePictureInfoResponseLinks: Codable {
    public var this: BeezUPCommonLink3
    public var save: BeezUPCommonLink3

    public init(this: BeezUPCommonLink3, save: BeezUPCommonLink3) {
        self.this = this
        self.save = save
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case save
    }
}

public struct ProfilePictureInfoResponse: Codable {
    public var profilePictureInfo: ProfilePictureInfoWithDefault
    public var links: ProfilePictureInfoResponseLinks

    public init(profilePictureInfo: ProfilePictureInfoWithDefault, links: ProfilePictureInfoResponseLinks) {
        self.profilePictureInfo = profilePictureInfo
        self.links = links
    }
}

public struct ProfilePictureInfoWithDefault: Codable {
    public var profilePictureInfo: ProfilePictureInfo
    /// Indicate the url of your picture profil based on your initials
    ///
    /// Example: "https://dummyimage.com/50x50/000000/fff&text=AM"
    public var initialsProfilePictureURL: String
    /// Indicate the url of your picture profil based on gravatar
    ///
    /// Example: "https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50?d=mm"
    public var gravatarProfilePictureURL: String

    public init(profilePictureInfo: ProfilePictureInfo, initialsProfilePictureURL: String, gravatarProfilePictureURL: String) {
        self.profilePictureInfo = profilePictureInfo
        self.initialsProfilePictureURL = initialsProfilePictureURL
        self.gravatarProfilePictureURL = gravatarProfilePictureURL
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.profilePictureInfo = try ProfilePictureInfo(from: decoder)
        self.initialsProfilePictureURL = try values.decode(String.self, forKey: "initialsProfilePictureUrl")
        self.gravatarProfilePictureURL = try values.decode(String.self, forKey: "gravatarProfilePictureUrl")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(profilePictureInfo, forKey: "profilePictureInfo")
        try values.encode(initialsProfilePictureURL, forKey: "initialsProfilePictureUrl")
        try values.encode(gravatarProfilePictureURL, forKey: "gravatarProfilePictureUrl")
    }
}

public struct ProfilePictureInfo: Codable {
    /// Indicate the url of your picture profil
    ///
    /// Example: "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e5/Marlon_Brando_%28cropped%29.jpg/220px-Marlon_Brando_%28cropped%29.jpg"
    public var profilePictureURL: String?
    /// Your profile picture choice about usage of gravatar picture, initials picture or uploaded picture.
    ///
    /// Example: "initials"
    public var profilePictureSelected: ProfilePictureSelected

    public init(profilePictureURL: String? = nil, profilePictureSelected: ProfilePictureSelected) {
        self.profilePictureURL = profilePictureURL
        self.profilePictureSelected = profilePictureSelected
    }

    private enum CodingKeys: String, CodingKey {
        case profilePictureURL = "profilePictureUrl"
        case profilePictureSelected
    }
}

/// The different actions you can make on this offer
public struct CreditCardInfoResponseLinks: Codable {
    public var this: BeezUPCommonLink3
    public var saveCreditCardInfo: BeezUPCommonLink3

    public init(this: BeezUPCommonLink3, saveCreditCardInfo: BeezUPCommonLink3) {
        self.this = this
        self.saveCreditCardInfo = saveCreditCardInfo
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case saveCreditCardInfo
    }
}

public struct CreditCardInfoResponse: Codable {
    /// The different actions you can make on this offer
    public var links: CreditCardInfoResponseLinks
    /// Payment method
    public var currentPaymentMethod: PaymentMethod
    public var creditCardInfo: CreditCardInfoWithCardType?
    public var info: BeezUPCommonInfoSummaries?

    public init(links: CreditCardInfoResponseLinks, currentPaymentMethod: PaymentMethod, creditCardInfo: CreditCardInfoWithCardType? = nil, info: BeezUPCommonInfoSummaries? = nil) {
        self.links = links
        self.currentPaymentMethod = currentPaymentMethod
        self.creditCardInfo = creditCardInfo
        self.info = info
    }
}

public struct CreditCardInfo: Codable {
    /// Card number
    ///
    /// Example: "1234567890091234"
    public var cardNumber: String
    /// Card Verification Code
    ///
    /// Example: "123"
    public var cardVerificationCode: String
    /// Expiration Month
    ///
    /// Example: 12
    public var expirationMonth: Int
    /// Expiration Year
    ///
    /// Example: 2017
    public var expirationYear: Int

    public init(cardNumber: String, cardVerificationCode: String, expirationMonth: Int, expirationYear: Int) {
        self.cardNumber = cardNumber
        self.cardVerificationCode = cardVerificationCode
        self.expirationMonth = expirationMonth
        self.expirationYear = expirationYear
    }
}

public struct CreditCardInfoWithCardType: Codable {
    /// Card number
    ///
    /// Example: "1234567890091234"
    public var cardNumber: String
    /// Expiration Month
    ///
    /// Example: 12
    public var expirationMonth: Int
    /// Expiration Year
    ///
    /// Example: 2017
    public var expirationYear: Int
    /// Your credit card type. Example: VISA, MasterCard, etc...
    ///
    /// Example: "VISA"
    public var cardType: String

    public init(cardNumber: String, expirationMonth: Int, expirationYear: Int, cardType: String) {
        self.cardNumber = cardNumber
        self.expirationMonth = expirationMonth
        self.expirationYear = expirationYear
        self.cardType = cardType
    }
}

public struct StoreAlerts: Codable {
    /// Example:
    ///
    /// [
    ///   {
    ///     "alertId" : "8",
    ///     "alertName" : "NoImportSinceXDays",
    ///     "isActive" : true,
    ///     "properties" : [
    ///       {
    ///         "propertyId" : "2",
    ///         "propertyValidationExpression" : "\\b0*([1-9]|[12][0-9]|30)\\b",
    ///         "propertyValue" : "2"
    ///       }
    ///     ]
    ///   }
    /// ]
    public var alerts: [StoreAlert]?

    public init(alerts: [StoreAlert]? = nil) {
        self.alerts = alerts
    }
}

public struct StoreAlert: Codable {
    /// The different actions you can make on this alert
    public var links: StoreAlertLinks
    /// Alert identifier
    public var alertID: Int
    /// The alert name
    ///
    /// Example: "NoImportSinceXDays"
    public var alertName: String
    /// Is the alert enable ?
    ///
    /// Example: true
    public var isEnabled: Bool
    /// The current configuration properties of the alert
    ///
    /// Example:
    ///
    /// [
    ///   {
    ///     "propertyId" : "2",
    ///     "propertyValidationExpression" : "\\b0*([1-9]|[12][0-9]|30)\\b",
    ///     "propertyValue" : "2"
    ///   }
    /// ]
    public var properties: [StoreAlertPropertyInfo]?

    public init(links: StoreAlertLinks, alertID: Int, alertName: String, isEnabled: Bool, properties: [StoreAlertPropertyInfo]? = nil) {
        self.links = links
        self.alertID = alertID
        self.alertName = alertName
        self.isEnabled = isEnabled
        self.properties = properties
    }

    private enum CodingKeys: String, CodingKey {
        case links
        case alertID = "alertId"
        case alertName
        case isEnabled = "enabled"
        case properties
    }
}

/// The different actions you can make on this alert
public struct StoreAlertLinks: Codable {
    public var save: BeezUPCommonLink3?

    public init(save: BeezUPCommonLink3? = nil) {
        self.save = save
    }
}

public struct StoreAlertPropertyInfo: Codable {
    public var storeAlertProperty: StoreAlertProperty
    /// The property name of the alert
    ///
    /// Example: "NbDays"
    public var propertyName: String
    /// The regular expression related to the alert property
    ///
    /// Example: "\b0*([1-9]|[12][0-9]|30)\b"
    public var propertyValidationExpression: String?

    public init(storeAlertProperty: StoreAlertProperty, propertyName: String, propertyValidationExpression: String? = nil) {
        self.storeAlertProperty = storeAlertProperty
        self.propertyName = propertyName
        self.propertyValidationExpression = propertyValidationExpression
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.storeAlertProperty = try StoreAlertProperty(from: decoder)
        self.propertyName = try values.decode(String.self, forKey: "propertyName")
        self.propertyValidationExpression = try values.decodeIfPresent(String.self, forKey: "propertyValidationExpression")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(storeAlertProperty, forKey: "storeAlertProperty")
        try values.encode(propertyName, forKey: "propertyName")
        try values.encodeIfPresent(propertyValidationExpression, forKey: "propertyValidationExpression")
    }
}

public struct SaveStoreAlertRequest: Codable {
    /// Is the alert enable ?
    ///
    /// Example: true
    public var isEnabled: Bool
    /// Properties to configure the alert
    ///
    /// Example:
    ///
    /// [
    ///   {
    ///     "propertyId" : "2",
    ///     "propertyValue" : "3"
    ///   }
    /// ]
    public var properties: [StoreAlertProperty]?

    public init(isEnabled: Bool, properties: [StoreAlertProperty]? = nil) {
        self.isEnabled = isEnabled
        self.properties = properties
    }

    private enum CodingKeys: String, CodingKey {
        case isEnabled = "enabled"
        case properties
    }
}

public struct StoreAlertProperty: Codable {
    /// The property identifier of the alert
    public var propertyID: Int
    /// The property value
    ///
    /// Example: "2"
    public var propertyValue: String

    public init(propertyID: Int, propertyValue: String) {
        self.propertyID = propertyID
        self.propertyValue = propertyValue
    }

    private enum CodingKeys: String, CodingKey {
        case propertyID = "propertyId"
        case propertyValue
    }
}

public struct StandardOffersLinks: Codable {
    public var this: BeezUPCommonLink3

    public init(this: BeezUPCommonLink3) {
        self.this = this
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
    }
}

public struct StandardOffers: Codable {
    public var links: StandardOffersLinks
    /// All standard offers
    ///
    /// Example:
    ///
    /// [
    ///   {
    ///     "additionalClickPrice" : "0",
    ///     "currencyCode" : "EUR",
    ///     "fixedPrice" : "101",
    ///     "functionalities" : [
    ///       {
    ///         "functionalityCode" : "MARKETMANA",
    ///         "maxValueInteger" : "4",
    ///         "text" : "Marketplace management",
    ///         "unlimited" : false
    ///       }
    ///     ],
    ///     "includedClick" : "1200",
    ///     "isMostPopular" : true,
    ///     "name" : "Wonder offer",
    ///     "offerId" : "1234",
    ///     "position" : "1"
    ///   }
    /// ]
    public var offers: [StandardOffer]
    /// All functionalities...
    ///
    /// Example:
    ///
    /// [
    ///   {
    ///     "code" : "MARKETMANA",
    ///     "order" : "1"
    ///   }
    /// ]
    public var functionalities: [Functionality]

    public init(links: StandardOffersLinks, offers: [StandardOffer], functionalities: [Functionality]) {
        self.links = links
        self.offers = offers
        self.functionalities = functionalities
    }
}

public struct StandardOfferLinks: Codable {
    public var getOffer: BeezUPCommonLink3?

    public init(getOffer: BeezUPCommonLink3? = nil) {
        self.getOffer = getOffer
    }
}

public struct StandardOffer: Codable {
    /// The offer Id
    ///
    /// Example: 1234
    public var offerID: Int
    /// The offer name
    ///
    /// Example: "Wonder offer"
    public var name: String
    /// The additional click price
    ///
    /// Example: 0.1234
    public var additionalClickPrice: Double?
    /// The included click
    ///
    /// Example: 1200
    public var includedClick: Int?
    /// UI purpose. Is the offer is the most popular
    ///
    /// Example: true
    public var isMostPopular: Bool?
    /// Is an old offer
    ///
    /// Example: false
    public var isOldOffer: Bool?
    /// The fixed price of the offer
    ///
    /// Example: 101.42
    public var fixedPrice: Double?
    /// The currency code <a href="https://en.wikipedia.org/wiki/ISO_4217">(ISO 4217)</a>
    ///
    /// Example: "EUR"
    public var currencyCode: String?
    /// UI purpose. The position of the offer
    public var position: Int?
    /// Example:
    ///
    /// [
    ///   {
    ///     "functionalityCode" : "MARKETMANA",
    ///     "maxValueInteger" : "4",
    ///     "text" : "Marketplace management",
    ///     "unlimited" : false
    ///   }
    /// ]
    public var functionalities: [OfferFunctionality]?
    public var links: StandardOfferLinks

    public init(offerID: Int, name: String, additionalClickPrice: Double? = nil, includedClick: Int? = nil, isMostPopular: Bool? = nil, isOldOffer: Bool? = nil, fixedPrice: Double? = nil, currencyCode: String? = nil, position: Int? = nil, functionalities: [OfferFunctionality]? = nil, links: StandardOfferLinks) {
        self.offerID = offerID
        self.name = name
        self.additionalClickPrice = additionalClickPrice
        self.includedClick = includedClick
        self.isMostPopular = isMostPopular
        self.isOldOffer = isOldOffer
        self.fixedPrice = fixedPrice
        self.currencyCode = currencyCode
        self.position = position
        self.functionalities = functionalities
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case offerID = "offerId"
        case name
        case additionalClickPrice
        case includedClick
        case isMostPopular
        case isOldOffer
        case fixedPrice
        case currencyCode
        case position
        case functionalities
        case links
    }
}

public struct Functionality: Codable {
    /// The functionality code
    ///
    /// Example: "MARKETMANA"
    public var code: String
    /// UI purpose: Indicate the position of the functionality
    public var order: Int

    public init(code: String, order: Int) {
        self.code = code
        self.order = order
    }
}

public struct OfferFunctionality: Codable {
    /// The functionality code
    ///
    /// Example: "MARKETMANA"
    public var functionalityCode: String
    /// The max value in integer for this feature in this offer
    public var maxValueInteger: Int?
    /// Is this feature is unlimited for this offer?
    ///
    /// Example: false
    public var isUnlimited: Bool
    /// A description text of this feature
    ///
    /// Example: "Marketplace management"
    public var text: String?

    public init(functionalityCode: String, maxValueInteger: Int? = nil, isUnlimited: Bool, text: String? = nil) {
        self.functionalityCode = functionalityCode
        self.maxValueInteger = maxValueInteger
        self.isUnlimited = isUnlimited
        self.text = text
    }

    private enum CodingKeys: String, CodingKey {
        case functionalityCode
        case maxValueInteger
        case isUnlimited = "unlimited"
        case text
    }
}

public struct BillingPeriodListLinks: Codable {
    public var this: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3? = nil) {
        self.this = this
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
    }
}

public struct BillingPeriodList: Codable {
    public var links: BillingPeriodListLinks
    /// The billing period list
    ///
    /// Example:
    ///
    /// [
    ///   {
    ///     "billingPeriodInMonth" : "12",
    ///     "discountPercentage" : "20"
    ///   }
    /// ]
    public var billingPeriods: [BillingPeriod]

    public init(links: BillingPeriodListLinks, billingPeriods: [BillingPeriod]) {
        self.links = links
        self.billingPeriods = billingPeriods
    }
}

public struct BillingPeriod: Codable {
    /// The billing period in month
    ///
    /// Example: 12
    public var billingPeriodInMonth: Int
    /// The discount percentage related to this billing period
    ///
    /// Example: 20.0
    public var discountPercentage: Double

    public init(billingPeriodInMonth: Int, discountPercentage: Double) {
        self.billingPeriodInMonth = billingPeriodInMonth
        self.discountPercentage = discountPercentage
    }
}

/// Indicate the validaty of the discount
///
/// Example: "Valid"
public enum PromotionalCodeValidity: String, Codable, CaseIterable {
    case `none` = "None"
    case valid = "Valid"
    case invalid = "Invalid"
    case expiredOrInactive = "ExpiredOrInactive"
}

public enum BonusType: String, Codable, CaseIterable {
    case onlinePaymentMethodBonus = "OnlinePaymentMethodBonus"
    case previousInvoiceProrataBonus = "PreviousInvoiceProrataBonus"
    case previousContractBonus = "PreviousContractBonus"
}

/// JWT token to access Zendesk restricted help center
public struct ZendeskToken: Codable {
    /// A JWT token build from your name and email to use on Zendesk
    ///
    /// Example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
    public var token: String?

    public init(token: String? = nil) {
        self.token = token
    }
}

public struct CatalogIndexLinks: Codable {
    public var this: BeezUPCommonLink3
    public var beezUPColumns: BeezUPCommonLink3

    public init(this: BeezUPCommonLink3, beezUPColumns: BeezUPCommonLink3) {
        self.this = this
        self.beezUPColumns = beezUPColumns
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case beezUPColumns
    }
}

public struct CatalogIndexLOVLinks: Codable {
    /// Describe the way you have to follow to get access to the LOV
    public var beezUPColumnLov: BeezUPCommonLOVLink3
    /// Describe the way you have to follow to get access to the LOV
    public var beezUPColumnDataTypeLov: BeezUPCommonLOVLink3
    /// Describe the way you have to follow to get access to the LOV
    public var beezUPColumnImportanceLov: BeezUPCommonLOVLink3
    /// Describe the way you have to follow to get access to the LOV
    public var beezUPColumnDisplayGroupLov: BeezUPCommonLOVLink3
    /// Describe the way you have to follow to get access to the LOV
    public var duplicateProductValueStrategyLov: BeezUPCommonLOVLink3
    /// Describe the way you have to follow to get access to the LOV
    public var compareOptionLov: BeezUPCommonLOVLink3

    public init(beezUPColumnLov: BeezUPCommonLOVLink3, beezUPColumnDataTypeLov: BeezUPCommonLOVLink3, beezUPColumnImportanceLov: BeezUPCommonLOVLink3, beezUPColumnDisplayGroupLov: BeezUPCommonLOVLink3, duplicateProductValueStrategyLov: BeezUPCommonLOVLink3, compareOptionLov: BeezUPCommonLOVLink3) {
        self.beezUPColumnLov = beezUPColumnLov
        self.beezUPColumnDataTypeLov = beezUPColumnDataTypeLov
        self.beezUPColumnImportanceLov = beezUPColumnImportanceLov
        self.beezUPColumnDisplayGroupLov = beezUPColumnDisplayGroupLov
        self.duplicateProductValueStrategyLov = duplicateProductValueStrategyLov
        self.compareOptionLov = compareOptionLov
    }
}

public struct CatalogIndex: Codable {
    public var links: CatalogIndexLinks
    public var lovLinks: CatalogIndexLOVLinks
    public var storeLinks: CatalogStoreIndexList?

    public init(links: CatalogIndexLinks, lovLinks: CatalogIndexLOVLinks, storeLinks: CatalogStoreIndexList? = nil) {
        self.links = links
        self.lovLinks = lovLinks
        self.storeLinks = storeLinks
    }
}

public struct CatalogStoreIndexList: Codable {
    /// The key is the store identifier.
    public var links: [String: CatalogStoreIndex]?

    public init(links: [String: CatalogStoreIndex]? = nil) {
        self.links = links
    }
}

public struct CatalogStoreIndexLinks: Codable {
    public var this: BeezUPCommonLink3
    public var inputConfiguration: BeezUPCommonLink3?
    public var autoImportInfo: BeezUPCommonLink3?
    public var importations: BeezUPCommonLink3?
    public var startImportation: BeezUPCommonLink3?
    public var catalogColumns: BeezUPCommonLink3?
    public var customColumns: BeezUPCommonLink3?
    public var categories: BeezUPCommonLink3?
    public var products: BeezUPCommonLink3?
    public var randomProducts: BeezUPCommonLink3?
    public var computeExpression: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3, inputConfiguration: BeezUPCommonLink3? = nil, autoImportInfo: BeezUPCommonLink3? = nil, importations: BeezUPCommonLink3? = nil, startImportation: BeezUPCommonLink3? = nil, catalogColumns: BeezUPCommonLink3? = nil, customColumns: BeezUPCommonLink3? = nil, categories: BeezUPCommonLink3? = nil, products: BeezUPCommonLink3? = nil, randomProducts: BeezUPCommonLink3? = nil, computeExpression: BeezUPCommonLink3? = nil) {
        self.this = this
        self.inputConfiguration = inputConfiguration
        self.autoImportInfo = autoImportInfo
        self.importations = importations
        self.startImportation = startImportation
        self.catalogColumns = catalogColumns
        self.customColumns = customColumns
        self.categories = categories
        self.products = products
        self.randomProducts = randomProducts
        self.computeExpression = computeExpression
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case inputConfiguration
        case autoImportInfo
        case importations
        case startImportation
        case catalogColumns
        case customColumns
        case categories
        case products
        case randomProducts
        case computeExpression
    }
}

/// Indicates the status of the catalog store.
/// * OK: If the latest importation is a success!
/// * Failed: If the latest importation has failed !
/// * Outdated: If the latest succeed importation is later than 1 day.
///
/// Example: "OK"
public enum CatalogStoreStatus: String, Codable, CaseIterable {
    case ok = "OK"
    case failed = "Failed"
    case outdated = "Outdated"
}

public struct CatalogStoreIndex: Codable {
    public var links: CatalogStoreIndexLinks
    /// Indicates the status of the catalog store.
    /// * OK: If the latest importation is a success!
    /// * Failed: If the latest importation has failed !
    /// * Outdated: If the latest succeed importation is later than 1 day.
    ///
    /// Example: "OK"
    public var status: CatalogStoreStatus

    public init(links: CatalogStoreIndexLinks, status: CatalogStoreStatus) {
        self.links = links
        self.status = status
    }
}

public struct ImportationsResponseLinks: Codable {
    public var this: BeezUPCommonLink3?
    public var start: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3? = nil, start: BeezUPCommonLink3? = nil) {
        self.this = this
        self.start = start
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case start
    }
}

public struct ImportationReportingLinks: Codable {
    public var report: BeezUPCommonLink3?

    public init(report: BeezUPCommonLink3? = nil) {
        self.report = report
    }
}

public struct ImportationsResponse: Codable {
    public var links: ImportationsResponseLinks?
    public var importations: [ImportationReporting]?

    public init(links: ImportationsResponseLinks? = nil, importations: [ImportationReporting]? = nil) {
        self.links = links
        self.importations = importations
    }
}

public struct ImportAlreadyInProgressResponse: Codable {
    /// The error message list
    public var errors: [BeezUPCommonUserErrorMessage]
    /// The action links
    public var links: ImportAlreadyInProgressResponseLinks

    public init(errors: [BeezUPCommonUserErrorMessage], links: ImportAlreadyInProgressResponseLinks) {
        self.errors = errors
        self.links = links
    }
}

/// The action links
public struct ImportAlreadyInProgressResponseLinks: Codable {
    public var currentImportation: BeezUPCommonLink3
    public var cancelCurrentImportation: BeezUPCommonLink3

    public init(currentImportation: BeezUPCommonLink3, cancelCurrentImportation: BeezUPCommonLink3) {
        self.currentImportation = currentImportation
        self.cancelCurrentImportation = cancelCurrentImportation
    }
}

/// Indicate the scheduling type. Schedule or Interval. We recommand you to use interval for a better reporting.
///
/// Example: "Schedule"
public enum SchedulingType: String, Codable, CaseIterable {
    case schedule = "Schedule"
    case interval = "Interval"
}

/// Indicate the duplicate product sku strategy.
///
/// Example: "KeepFirstDuplicateProductOnly"
public enum DuplicateProductValueStrategy: String, Codable, CaseIterable {
    case `none` = "None"
    case skipAllDuplicateProducts = "SkipAllDuplicateProducts"
    case keepFirstDuplicateProductOnly = "KeepFirstDuplicateProductOnly"
    case failImportationIfAnyDuplicateProduct = "FailImportationIfAnyDuplicateProduct"
}

/// Indicate how the product sku are compared for the duplication check.
///
/// Example: "IgnoreCase"
public enum CompareOptions: String, Codable, CaseIterable {
    case `none` = "None"
    case ignoreCase = "IgnoreCase"
    case ignoreNonSpace = "IgnoreNonSpace"
    case ignoreSymbols = "IgnoreSymbols"
    case ordinalIgnoreCase = "OrdinalIgnoreCase"
    case stringSort = "StringSort"
    case ordinal = "Ordinal"
}

public struct AutoImportConfigurationLinks: Codable {
    public var this: BeezUPCommonLink3
    public var activate: BeezUPCommonLink3?
    public var start: BeezUPCommonLink3?
    public var pause: BeezUPCommonLink3?
    public var resume: BeezUPCommonLink3?
    public var scheduleInterval: BeezUPCommonLink3?
    public var schedule: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3, activate: BeezUPCommonLink3? = nil, start: BeezUPCommonLink3? = nil, pause: BeezUPCommonLink3? = nil, resume: BeezUPCommonLink3? = nil, scheduleInterval: BeezUPCommonLink3? = nil, schedule: BeezUPCommonLink3? = nil) {
        self.this = this
        self.activate = activate
        self.start = start
        self.pause = pause
        self.resume = resume
        self.scheduleInterval = scheduleInterval
        self.schedule = schedule
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case activate
        case start
        case pause
        case resume
        case scheduleInterval
        case schedule
    }
}

public struct AutoImportConfiguration: Codable {
    /// Describe the input configuration
    public var input: InputConfiguration
    /// The user identifier
    ///
    /// Example: "8a7fbdec-9e71-472e-9974-27d5c1d57cf8"
    public var inputConfiguredByUserID: String
    /// Indicate the scheduling type. Schedule or Interval. We recommand you to use interval for a better reporting.
    ///
    /// Example: "Schedule"
    public var schedulingType: SchedulingType
    /// The user identifier
    ///
    /// Example: "8a7fbdec-9e71-472e-9974-27d5c1d57cf8"
    public var scheduledByUserID: String?
    /// Indicate the scheduling value. If the scheduling type is Interval then the value will be a duration otherwise the values will be the time.
    ///
    /// Example: ["21:00:00", "23:00:00", "08:30:00"]
    public var schedulingValue: [String]
    /// Indicate if the auto import is in pause or not.
    ///
    /// Example: false
    public var isPaused: Bool
    /// The user identifier
    ///
    /// Example: "8a7fbdec-9e71-472e-9974-27d5c1d57cf8"
    public var pauseStatusChangedByUserID: String?
    /// Indicate when the pause status has changed in UTC date.
    ///
    /// Example: "2017-04-01T13:21:42Z"
    public var pauseStatusChangedUtcDate: Date?
    /// Describe how you want to manage the duplication of the product value
    public var duplicateProductConfiguration: DuplicateProductValueConfiguration
    /// Indicate the time zone name of the scheduling. If the scheduling type is "Schedule"
    ///
    /// Example: "Romance Standard Time"
    public var schedulingLocalTimeZoneName: String?

    public init(input: InputConfiguration, inputConfiguredByUserID: String, schedulingType: SchedulingType, scheduledByUserID: String? = nil, schedulingValue: [String], isPaused: Bool, pauseStatusChangedByUserID: String? = nil, pauseStatusChangedUtcDate: Date? = nil, duplicateProductConfiguration: DuplicateProductValueConfiguration, schedulingLocalTimeZoneName: String? = nil) {
        self.input = input
        self.inputConfiguredByUserID = inputConfiguredByUserID
        self.schedulingType = schedulingType
        self.scheduledByUserID = scheduledByUserID
        self.schedulingValue = schedulingValue
        self.isPaused = isPaused
        self.pauseStatusChangedByUserID = pauseStatusChangedByUserID
        self.pauseStatusChangedUtcDate = pauseStatusChangedUtcDate
        self.duplicateProductConfiguration = duplicateProductConfiguration
        self.schedulingLocalTimeZoneName = schedulingLocalTimeZoneName
    }

    private enum CodingKeys: String, CodingKey {
        case input
        case inputConfiguredByUserID = "inputConfiguredByUserId"
        case schedulingType
        case scheduledByUserID = "scheduledByUserId"
        case schedulingValue
        case isPaused = "paused"
        case pauseStatusChangedByUserID = "pauseStatusChangedByUserId"
        case pauseStatusChangedUtcDate
        case duplicateProductConfiguration
        case schedulingLocalTimeZoneName
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        self.input = try values.decode(InputConfiguration.self, forKey: .input)
        self.inputConfiguredByUserID = try values.decode(String.self, forKey: .inputConfiguredByUserID)
        self.schedulingType = try values.decode(SchedulingType.self, forKey: .schedulingType)
        self.scheduledByUserID = try values.decodeIfPresent(String.self, forKey: .scheduledByUserID)
        self.schedulingValue = try values.decode([String].self, forKey: .schedulingValue)
        self.isPaused = try values.decode(Bool.self, forKey: .isPaused)
        self.pauseStatusChangedByUserID = try values.decodeIfPresent(String.self, forKey: .pauseStatusChangedByUserID)
        self.pauseStatusChangedUtcDate = try values.decodeIfPresent(Date.self, forKey: .pauseStatusChangedUtcDate)
        self.duplicateProductConfiguration = try values.decode(DuplicateProductValueConfiguration.self, forKey: .duplicateProductConfiguration)
        self.schedulingLocalTimeZoneName = try values.decodeIfPresent(String.self, forKey: .schedulingLocalTimeZoneName)
    }
}

/// Describe the input configuration
public struct InputConfiguration: Codable {
    /// Can be null. Use to transform multiple files with an XSLT file.
    ///
    /// Example: "http://beezupblob.com/Mytransformation.xslt"
    public var transformFileURL: URL?
    /// The list of files to get and read
    public var files: [InputFileConfiguration]

    public init(transformFileURL: URL? = nil, files: [InputFileConfiguration]) {
        self.transformFileURL = transformFileURL
        self.files = files
    }

    private enum CodingKeys: String, CodingKey {
        case transformFileURL = "transformFileUrl"
        case files
    }
}

/// Describe how to get and read a file
public struct InputFileConfiguration: Codable {
    /// The file number starting by 1
    public var fileNumber: Int
    /// Describe the way to download the file
    public var fetch: InputFileFetchConfiguration
    /// Describe how to read the file. If FileFormatStrategy is CSV, csvFileReadProperties is required. Otherwise the xmlFileReadProperties is required.
    public var read: InputFileReadConfiguration

    public init(fileNumber: Int, fetch: InputFileFetchConfiguration, read: InputFileReadConfiguration) {
        self.fileNumber = fileNumber
        self.fetch = fetch
        self.read = read
    }
}

/// Indicate the download strategy (simple uri, ftps, ftplatest file, etc...)
///
/// Example: "SimpleUri"
public enum DownloadCatalogStrategy: String, Codable, CaseIterable {
    case simpleUri = "SimpleUri"
    case ftpLatest = "FtpLatest"
    case sftp = "Sftp"
    case sftpLatest = "SftpLatest"
    case ftps = "Ftps"
    case ftpsLatest = "FtpsLatest"
    case local = "Local"
}

/// Indicate the compression type
///
/// Example: "None"
public enum CompressionFormatStrategy: String, Codable, CaseIterable {
    case `none` = "None"
    case zip = "Zip"
    case tarGz = "TarGz"
    case gzip = "Gzip"
    case bzip2 = "Bzip2"
    case rar = "Rar"
}

/// Describe the way to download the file
public struct InputFileFetchConfiguration: Codable {
    /// Indicate the Uri of the file. (http, https, ftp, ftps, sftp are allowed)
    ///
    /// Example: "http://www.mywebsite.com/mycatalog.csv"
    public var uri: String
    /// Provides the credentials
    public var credential: Credential?
    /// Indicate the download strategy (simple uri, ftps, ftplatest file, etc...)
    ///
    /// Example: "SimpleUri"
    public var downloadCatalogStrategy: DownloadCatalogStrategy
    /// Indicate the compression type
    ///
    /// Example: "None"
    public var compressionFormatStrategy: CompressionFormatStrategy?
    /// Indicate the relative path in the compressed file
    ///
    /// Example: "folder/file.xxx"
    public var compressedRelativePath: String?
    /// Indicate the download time out in second
    ///
    /// Example: 360
    public var downloadTimeout: Int?

    public init(uri: String, credential: Credential? = nil, downloadCatalogStrategy: DownloadCatalogStrategy, compressionFormatStrategy: CompressionFormatStrategy? = nil, compressedRelativePath: String? = nil, downloadTimeout: Int? = nil) {
        self.uri = uri
        self.credential = credential
        self.downloadCatalogStrategy = downloadCatalogStrategy
        self.compressionFormatStrategy = compressionFormatStrategy
        self.compressedRelativePath = compressedRelativePath
        self.downloadTimeout = downloadTimeout
    }
}

/// CSV or XML
///
/// Example: "Csv"
public enum FileFormatStrategy: String, Codable, CaseIterable {
    case unknown = "Unknown"
    case csv = "Csv"
    case xml = "Xml"
    case json = "Json"
}

/// Describe how to read the file. If FileFormatStrategy is CSV, csvFileReadProperties is required. Otherwise the xmlFileReadProperties is required.
public struct InputFileReadConfiguration: Codable {
    /// CSV or XML
    ///
    /// Example: "Csv"
    public var format: FileFormatStrategy
    /// The encoding type. UTF-8 by default.
    ///
    /// Example: "UTF-8"
    public var encodingTypeName: String?
    /// The culture name of the file.  (i.e. fr-FR). If null then Invariant culture will be used.
    ///
    /// Example: "fr-FR"
    public var cultureName: String?
    /// The CSV file description
    public var csvFileReadProperties: InputFileReadCsvConfiguration?
    /// The XML file description
    public var xmlFileReadProperties: InputFileReadXmlConfiguration?

    public init(format: FileFormatStrategy, encodingTypeName: String? = nil, cultureName: String? = nil, csvFileReadProperties: InputFileReadCsvConfiguration? = nil, xmlFileReadProperties: InputFileReadXmlConfiguration? = nil) {
        self.format = format
        self.encodingTypeName = encodingTypeName
        self.cultureName = cultureName
        self.csvFileReadProperties = csvFileReadProperties
        self.xmlFileReadProperties = xmlFileReadProperties
    }
}

/// Provides the credentials
public struct Credential: Codable {
    /// The user name
    ///
    /// Example: "MyLogin"
    public var userName: String
    /// The password
    ///
    /// Example: "MyPassword"
    public var password: String?

    public init(userName: String, password: String? = nil) {
        self.userName = userName
        self.password = password
    }
}

/// The CSV file description
public struct InputFileReadCsvConfiguration: Codable {
    /// Indicate if the csv file contains the column name at the first row
    ///
    /// Example: true
    public var hasHeaderRecord: Bool
    /// Indicate if the importation should not use the csv column name from the file
    ///
    /// Example: true
    public var isIgnoreHeaderRecord: Bool
    /// Indicate the separator of the values in the CSV file. Generally ";"
    ///
    /// Example: ";"
    public var csvSeparator: String
    /// Indicate the text qualifier of the CSV file. Generally the value is "
    public var csvTextQualifier: String?

    public init(hasHeaderRecord: Bool, isIgnoreHeaderRecord: Bool, csvSeparator: String, csvTextQualifier: String? = nil) {
        self.hasHeaderRecord = hasHeaderRecord
        self.isIgnoreHeaderRecord = isIgnoreHeaderRecord
        self.csvSeparator = csvSeparator
        self.csvTextQualifier = csvTextQualifier
    }

    private enum CodingKeys: String, CodingKey {
        case hasHeaderRecord
        case isIgnoreHeaderRecord = "ignoreHeaderRecord"
        case csvSeparator
        case csvTextQualifier
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        self.hasHeaderRecord = try values.decode(Bool.self, forKey: .hasHeaderRecord)
        self.isIgnoreHeaderRecord = try values.decode(Bool.self, forKey: .isIgnoreHeaderRecord)
        self.csvSeparator = try values.decode(String.self, forKey: .csvSeparator)
        self.csvTextQualifier = try values.decodeIfPresent(String.self, forKey: .csvTextQualifier)
    }
}

/// The XML file description
public struct InputFileReadXmlConfiguration: Codable {
    /// Indicate if the importation should take in account the attribute in the xml nodes.
    ///
    /// Example: true
    public var useXmlAttributes: Bool
    /// Indicate if the children xml nodes should be flatten with there parent to take in account the sub node values.
    ///
    /// Example: true
    public var isFlattenXmlChildElements: Bool

    public init(useXmlAttributes: Bool, isFlattenXmlChildElements: Bool) {
        self.useXmlAttributes = useXmlAttributes
        self.isFlattenXmlChildElements = isFlattenXmlChildElements
    }

    private enum CodingKeys: String, CodingKey {
        case useXmlAttributes
        case isFlattenXmlChildElements = "flattenXmlChildElements"
    }
}

/// The message request to configure the auto import interval
public struct ConfigureAutoImportIntervalRequest: Codable {
    /// Indicate the interval in time span. (i.e. "04:00:00" for every 4 hours)
    ///
    /// Example: "04:00:00"
    public var interval: String

    public init(interval: String) {
        self.interval = interval
    }
}

/// The message request to schedule the auto import
public struct ScheduleAutoImportRequest: Codable {
    /// Indicate the time span you want to import your catalog. (i.e. "21:00:00" to import your catalog at 9PM)
    ///
    /// Example: ["21:00:00", "23:00:00", "08:30:00"]
    public var schedules: [String]
    /// If null the local time zone name will be "Romance Standard Time"
    ///
    /// Example: "Romance Standard Time"
    public var localTimeZoneName: String?

    public init(schedules: [String], localTimeZoneName: String? = nil) {
        self.schedules = schedules
        self.localTimeZoneName = localTimeZoneName
    }
}

/// Last manual import input configuration
public struct LastManualImportInputConfiguration: Codable {
    /// Describe the input configuration
    public var input: InputConfiguration

    public init(input: InputConfiguration) {
        self.input = input
    }
}

/// Describe a BeezUP column
public struct BeezUPColumnConfiguration: Codable {
    /// The BeezUP column name
    ///
    /// Example: "CategoryFirstLevel"
    public var beezUPColumnName: String
    /// /!\ ONLY AVAILABLE ON CATALOG COLUMN NOT ON CUSTOM COLUMNS!!
    /// If true, an error happen at the second occurence of the same value for this column
    /// This information will be used during the importation process and later for mapping proposal
    ///
    /// Example: false
    public var isUnique: Bool
    /// Importance of the column
    ///
    /// Example: "Required"
    public var columnImportance: BeezUPCommonColumnImportance
    /// Data type of the column, will be used for parsing and for consolidation proces
    ///
    /// Example: "String"
    public var columnDataType: BeezUPCommonColumnDataType?
    /// If the size of the value is greater than the limit we can truncate the value instead of failing...
    ///
    /// Example: false
    public var canBeTruncated: Bool
    /// Indicate the display group name where the column must be putted
    ///
    /// Example: "Category"
    public var displayGroupName: String
    /// Describe the BeezUP column
    ///
    /// Example: "Use for big text, like description"
    public var description: String?

    public init(beezUPColumnName: String, isUnique: Bool? = nil, columnImportance: BeezUPCommonColumnImportance, columnDataType: BeezUPCommonColumnDataType? = nil, canBeTruncated: Bool? = nil, displayGroupName: String, description: String? = nil) {
        self.beezUPColumnName = beezUPColumnName
        self.isUnique = isUnique ?? false
        self.columnImportance = columnImportance
        self.columnDataType = columnDataType
        self.canBeTruncated = canBeTruncated ?? false
        self.displayGroupName = displayGroupName
        self.description = description
    }

    private enum CodingKeys: String, CodingKey {
        case beezUPColumnName
        case isUnique = "unique"
        case columnImportance
        case columnDataType
        case canBeTruncated
        case displayGroupName
        case description
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        self.beezUPColumnName = try values.decode(String.self, forKey: .beezUPColumnName)
        self.isUnique = try values.decodeIfPresent(Bool.self, forKey: .isUnique) ?? false
        self.columnImportance = try values.decode(BeezUPCommonColumnImportance.self, forKey: .columnImportance)
        self.columnDataType = try values.decodeIfPresent(BeezUPCommonColumnDataType.self, forKey: .columnDataType)
        self.canBeTruncated = try values.decodeIfPresent(Bool.self, forKey: .canBeTruncated) ?? false
        self.displayGroupName = try values.decode(String.self, forKey: .displayGroupName)
        self.description = try values.decodeIfPresent(String.self, forKey: .description)
    }
}

/// The message request for the change user column name
public struct ChangeUserColumnNameRequest: Codable {
    /// Column named by the user
    ///
    /// Example: "My SKU"
    public var userColumName: String

    public init(userColumName: String) {
        self.userColumName = userColumName
    }
}

/// The request message to create a custom column
public struct CreateCustomColumnRequest: Codable {
    /// Column named by the user
    ///
    /// Example: "My SKU"
    public var userColumnName: String
    /// The encrypted excel expression of the column
    ///
    /// Example: "uziushdczaniodnndonisodndsiondsoidsndoin"
    public var encryptedExpression: String
    /// The encrypted XML Blockly representation of the expression
    ///
    /// Example: "apokpoa,opz,sixsoisiosnoisn"
    public var encryptedBlocklyExpression: String
    /// Indicate the display group name where the column must be putted
    ///
    /// Example: "Category"
    public var displayGroupName: String

    public init(userColumnName: String, encryptedExpression: String, encryptedBlocklyExpression: String, displayGroupName: String) {
        self.userColumnName = userColumnName
        self.encryptedExpression = encryptedExpression
        self.encryptedBlocklyExpression = encryptedBlocklyExpression
        self.displayGroupName = displayGroupName
    }
}

/// The request message to change the custom column expression
public struct ChangeCustomColumnExpressionRequest: Codable {
    /// The encrypted excel expression of the column
    ///
    /// Example: "uziushdczaniodnndonisodndsiondsoidsndoin"
    public var encryptedExpression: String
    /// The encrypted XML Blockly representation of the expression
    ///
    /// Example: "apokpoa,opz,sixsoisiosnoisn"
    public var encryptedBlocklyExpression: String

    public init(encryptedExpression: String, encryptedBlocklyExpression: String) {
        self.encryptedExpression = encryptedExpression
        self.encryptedBlocklyExpression = encryptedBlocklyExpression
    }
}

/// The request message to compute an expression based on the provided product values
public struct ComputeExpressionRequest: Codable {
    /// The key is the column identifier
    ///
    /// Example:
    ///
    /// {
    ///   "012929c0-e78b-462a-a96e-25c061575385" : "http:\/\/media.conforama.fr\/Medias\/500000\/80000\/5000\/500\/10\/G_585511_A.jpg",
    ///   "46602e10-bc45-4944-a440-63d5f7ece1f8" : "42",
    ///   "68082b11-4ffd-4bec-964a-465a471c7d37" : "SKU1234",
    ///   "b6d74510-41ce-42ec-947a-0bdf62e9beee" : "Refrigerateur",
    ///   "ba270fa0-8482-46be-905a-cae4ca746b92" : "http:\/\/www.conforama.fr\/gros-electromenager\/encastrable\/refrigerateur-encastrable\/refrigerateur-combine-161-litres-far-r5115s\/p\/585511"
    /// }
    public var productValues: [String: String]
    /// The encrypted excel expression of the column
    ///
    /// Example: "uziushdczaniodnndonisodndsiondsoidsndoin"
    public var encryptedExpression: String

    public init(productValues: [String: String], encryptedExpression: String) {
        self.productValues = productValues
        self.encryptedExpression = encryptedExpression
    }
}

/// Describe the reporting of the catalog importation
public struct ImportationMonitoring: Codable {
    /// The user identifier
    ///
    /// Example: "8a7fbdec-9e71-472e-9974-27d5c1d57cf8"
    public var userID: String?
    /// Indicates if the importation was successfully completed or not
    ///
    /// Example: true
    public var isSuccess: Bool
    /// The execution identifier of the catalog importation
    ///
    /// Example: "bf3bc288-604c-4267-925e-66b1a15dca75"
    public var executionID: String
    /// The last update of the reporting
    ///
    /// Example: "2017-04-01T13:10:09Z"
    public var lastUpdateUtcDate: Date
    /// The start date of the importation
    ///
    /// Example: "2017-04-01T13:01:01Z"
    public var beginUtcDate: Date
    /// In case of error a description will be indicated
    public var errors: [BeezUPCommonUserErrorMessage]?
    /// Contains all steps of the importation process with a boolean. If true the step has been passed, false the step is not complete
    ///
    /// Example:
    ///
    /// {
    ///   "isCatalogImportComputeDiffCompleted" : false,
    ///   "isCatalogImportPrepareReadCompleted" : false,
    ///   "isCatalogUpdateCompleted" : false,
    ///   "isSavedInDb" : false
    /// }
    public var steps: [String: Bool]
    /// Applicable operations considering the state of the importation
    public var links: ImportationMonitoringLinks?

    public init(userID: String? = nil, isSuccess: Bool, executionID: String, lastUpdateUtcDate: Date, beginUtcDate: Date, errors: [BeezUPCommonUserErrorMessage]? = nil, steps: [String: Bool], links: ImportationMonitoringLinks? = nil) {
        self.userID = userID
        self.isSuccess = isSuccess
        self.executionID = executionID
        self.lastUpdateUtcDate = lastUpdateUtcDate
        self.beginUtcDate = beginUtcDate
        self.errors = errors
        self.steps = steps
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case userID = "userId"
        case isSuccess = "success"
        case executionID = "executionId"
        case lastUpdateUtcDate
        case beginUtcDate
        case errors
        case steps
        case links
    }
}

/// Applicable operations considering the state of the importation
public struct ImportationMonitoringLinks: Codable {
    public var this: BeezUPCommonLink3
    public var technicalProgression: BeezUPCommonLink3
    public var cancel: BeezUPCommonLink3?
    public var configureRemainingCatalogColumns: BeezUPCommonLink3?
    public var commitColumns: BeezUPCommonLink3?
    public var commit: BeezUPCommonLink3?
    public var activateAutoImport: BeezUPCommonLink3?
    public var catalogColumns: BeezUPCommonLink3?
    public var customColumns: BeezUPCommonLink3?
    public var productSamples: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3, technicalProgression: BeezUPCommonLink3, cancel: BeezUPCommonLink3? = nil, configureRemainingCatalogColumns: BeezUPCommonLink3? = nil, commitColumns: BeezUPCommonLink3? = nil, commit: BeezUPCommonLink3? = nil, activateAutoImport: BeezUPCommonLink3? = nil, catalogColumns: BeezUPCommonLink3? = nil, customColumns: BeezUPCommonLink3? = nil, productSamples: BeezUPCommonLink3? = nil) {
        self.this = this
        self.technicalProgression = technicalProgression
        self.cancel = cancel
        self.configureRemainingCatalogColumns = configureRemainingCatalogColumns
        self.commitColumns = commitColumns
        self.commit = commit
        self.activateAutoImport = activateAutoImport
        self.catalogColumns = catalogColumns
        self.customColumns = customColumns
        self.productSamples = productSamples
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case technicalProgression
        case cancel
        case configureRemainingCatalogColumns
        case commitColumns
        case commit
        case activateAutoImport
        case catalogColumns
        case customColumns
        case productSamples
    }
}

public struct DetectedCatalogColumnListLinks: Codable {
    public var this: BeezUPCommonLink3

    public init(this: BeezUPCommonLink3) {
        self.this = this
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
    }
}

/// The list of detected catalog column
public struct DetectedCatalogColumnList: Codable {
    public var links: DetectedCatalogColumnListLinks
    /// Contains all deteted catalog columns
    public var detectedCatalogColumns: [DetectedCatalogColumn]?

    public init(links: DetectedCatalogColumnListLinks, detectedCatalogColumns: [DetectedCatalogColumn]? = nil) {
        self.links = links
        self.detectedCatalogColumns = detectedCatalogColumns
    }
}

public struct DetectedCatalogColumnLinks: Codable {
    public var configure: BeezUPCommonLink3?
    public var ignore: BeezUPCommonLink3?
    public var reattend: BeezUPCommonLink3?
    public var map: BeezUPCommonLink3?
    public var unmap: BeezUPCommonLink3?

    public init(configure: BeezUPCommonLink3? = nil, ignore: BeezUPCommonLink3? = nil, reattend: BeezUPCommonLink3? = nil, map: BeezUPCommonLink3? = nil, unmap: BeezUPCommonLink3? = nil) {
        self.configure = configure
        self.ignore = ignore
        self.reattend = reattend
        self.map = map
        self.unmap = unmap
    }
}

public struct DetectedCatalogColumn: Codable {
    /// The catalog column configuration
    ///
    /// Example:
    ///
    /// {
    ///   "catalogColumnName" : "SKU",
    ///   "configuration" : {
    ///     "beezUPColumnName" : "CategoryFirstLevel",
    ///     "canBeTruncated" : false,
    ///     "columnCultureName" : "fr-FR",
    ///     "columnDataType" : "String",
    ///     "columnFormat" : "MM\/dd\/yyyy",
    ///     "columnImportance" : "Required",
    ///     "displayGroupName" : "Category"
    ///   },
    ///   "duplicateProductValueConfiguration" : {
    ///     "compareOptions" : "IgnoreCase",
    ///     "strategy" : "KeepFirstDuplicateProductOnly"
    ///   },
    ///   "id" : "8a76f06a-fefc-4c0d-bcfe-b210f1482977",
    ///   "ignored" : true,
    ///   "userColumName" : "My SKU"
    /// }
    public var catalogColumn: CatalogColumn
    public var links: DetectedCatalogColumnLinks

    public init(catalogColumn: CatalogColumn, links: DetectedCatalogColumnLinks) {
        self.catalogColumn = catalogColumn
        self.links = links
    }

    public init(from decoder: Decoder) throws {
        self.catalogColumn = try CatalogColumn(from: decoder)
        self.links = try DetectedCatalogColumnLinks(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(catalogColumn, forKey: "catalogColumn")
        try values.encode(links, forKey: "links")
    }
}

/// Describe a product sample
public struct ProductSample: Codable {
    /// The key is the column identifier
    ///
    /// Example:
    ///
    /// {
    ///   "012929c0-e78b-462a-a96e-25c061575385" : "http:\/\/media.conforama.fr\/Medias\/500000\/80000\/5000\/500\/10\/G_585511_A.jpg",
    ///   "46602e10-bc45-4944-a440-63d5f7ece1f8" : "42",
    ///   "68082b11-4ffd-4bec-964a-465a471c7d37" : "SKU1234",
    ///   "b6d74510-41ce-42ec-947a-0bdf62e9beee" : "Refrigerateur",
    ///   "ba270fa0-8482-46be-905a-cae4ca746b92" : "http:\/\/www.conforama.fr\/gros-electromenager\/encastrable\/refrigerateur-encastrable\/refrigerateur-combine-161-litres-far-r5115s\/p\/585511"
    /// }
    public var productValues: [String: String]?

    public init(productValues: [String: String]? = nil) {
        self.productValues = productValues
    }
}

/// The request to configure a catalog column
public struct ConfigureCatalogColumnCatalogRequest: Codable {
    /// The catalog column configuration
    ///
    /// Example:
    ///
    /// {
    ///   "catalogColumnName" : "SKU",
    ///   "configuration" : {
    ///     "beezUPColumnName" : "CategoryFirstLevel",
    ///     "canBeTruncated" : false,
    ///     "columnCultureName" : "fr-FR",
    ///     "columnDataType" : "String",
    ///     "columnFormat" : "MM\/dd\/yyyy",
    ///     "columnImportance" : "Required",
    ///     "displayGroupName" : "Category"
    ///   },
    ///   "duplicateProductValueConfiguration" : {
    ///     "compareOptions" : "IgnoreCase",
    ///     "strategy" : "KeepFirstDuplicateProductOnly"
    ///   },
    ///   "id" : "8a76f06a-fefc-4c0d-bcfe-b210f1482977",
    ///   "ignored" : true,
    ///   "userColumName" : "My SKU"
    /// }
    public var catalogColumn: CatalogColumn

    public init(catalogColumn: CatalogColumn) {
        self.catalogColumn = catalogColumn
    }
}

public struct CatalogColumnList: Codable {
    public var catalogColumns: [CatalogColumn]

    public init(catalogColumns: [CatalogColumn]) {
        self.catalogColumns = catalogColumns
    }
}

public struct CustomColumnListLinks: Codable {
    public var this: BeezUPCommonLink3
    public var add: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3, add: BeezUPCommonLink3? = nil) {
        self.this = this
        self.add = add
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case add
    }
}

public struct CustomColumnList: Codable {
    public var links: CustomColumnListLinks
    public var customColumns: [CustomColumn]

    public init(links: CustomColumnListLinks, customColumns: [CustomColumn]) {
        self.links = links
        self.customColumns = customColumns
    }
}

public struct ImportationCustomColumnListLinks: Codable {
    public var this: BeezUPCommonLink3
    public var add: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3, add: BeezUPCommonLink3? = nil) {
        self.this = this
        self.add = add
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case add
    }
}

public struct ImportationCustomColumnList: Codable {
    public var links: CustomColumnListLinks
    public var customColumns: [ImportationCustomColumn]

    public init(links: CustomColumnListLinks, customColumns: [ImportationCustomColumn]) {
        self.links = links
        self.customColumns = customColumns
    }
}

public struct CatalogColumnLinks: Codable {
    public var rename: BeezUPCommonLink3?

    public init(rename: BeezUPCommonLink3? = nil) {
        self.rename = rename
    }
}

/// The catalog column configuration
///
/// Example:
///
/// {
///   "catalogColumnName" : "SKU",
///   "configuration" : {
///     "beezUPColumnName" : "CategoryFirstLevel",
///     "canBeTruncated" : false,
///     "columnCultureName" : "fr-FR",
///     "columnDataType" : "String",
///     "columnFormat" : "MM\/dd\/yyyy",
///     "columnImportance" : "Required",
///     "displayGroupName" : "Category"
///   },
///   "duplicateProductValueConfiguration" : {
///     "compareOptions" : "IgnoreCase",
///     "strategy" : "KeepFirstDuplicateProductOnly"
///   },
///   "id" : "8a76f06a-fefc-4c0d-bcfe-b210f1482977",
///   "ignored" : true,
///   "userColumName" : "My SKU"
/// }
public struct CatalogColumn: Codable {
    /// IF true, the product values of this column will be not taken in account during the importation process
    public var isIgnored: Bool
    /// Describe how you want to manage the duplication of the product value
    public var duplicateProductValueConfiguration: DuplicateProductValueConfiguration?
    /// The catalog column identifier
    ///
    /// Example: "8f6671d6-a9bc-4de0-a0c4-4643b0c3f871"
    public var id: String
    /// The catalog column name
    ///
    /// Example: "SKU"
    public var catalogColumnName: String
    /// Column named by the user
    ///
    /// Example: "My SKU"
    public var userColumName: String
    /// Indicates the configuration applied on the column (catalog or custom) during the importation process.
    public var configuration: ColumnConfiguration
    public var links: CatalogColumnLinks

    public init(isIgnored: Bool? = nil, duplicateProductValueConfiguration: DuplicateProductValueConfiguration? = nil, id: String, catalogColumnName: String, userColumName: String, configuration: ColumnConfiguration, links: CatalogColumnLinks) {
        self.isIgnored = isIgnored ?? false
        self.duplicateProductValueConfiguration = duplicateProductValueConfiguration
        self.id = id
        self.catalogColumnName = catalogColumnName
        self.userColumName = userColumName
        self.configuration = configuration
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case isIgnored = "ignored"
        case duplicateProductValueConfiguration
        case id
        case catalogColumnName
        case userColumName
        case configuration
        case links
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        self.isIgnored = try values.decodeIfPresent(Bool.self, forKey: .isIgnored) ?? false
        self.duplicateProductValueConfiguration = try values.decodeIfPresent(DuplicateProductValueConfiguration.self, forKey: .duplicateProductValueConfiguration)
        self.id = try values.decode(String.self, forKey: .id)
        self.catalogColumnName = try values.decode(String.self, forKey: .catalogColumnName)
        self.userColumName = try values.decode(String.self, forKey: .userColumName)
        self.configuration = try values.decode(ColumnConfiguration.self, forKey: .configuration)
        self.links = try values.decode(CatalogColumnLinks.self, forKey: .links)
    }
}

/// Describe how you want to manage the duplication of the product value
public struct DuplicateProductValueConfiguration: Codable {
    /// Indicate the duplicate product sku strategy.
    ///
    /// Example: "KeepFirstDuplicateProductOnly"
    public var strategy: DuplicateProductValueStrategy
    /// Indicate how the product sku are compared for the duplication check.
    ///
    /// Example: "IgnoreCase"
    public var compareOptions: CompareOptions

    public init(strategy: DuplicateProductValueStrategy, compareOptions: CompareOptions) {
        self.strategy = strategy
        self.compareOptions = compareOptions
    }
}

/// Indicates the configuration applied on the column (catalog or custom) during the importation process.
public struct ColumnConfiguration: Codable {
    /// The BeezUP column name
    ///
    /// Example: "CategoryFirstLevel"
    public var beezUPColumnName: String?
    /// Importance of the column
    ///
    /// Example: "Required"
    public var columnImportance: BeezUPCommonColumnImportance
    /// Data type of the column, will be used for parsing and for consolidation proces
    ///
    /// Example: "String"
    public var columnDataType: BeezUPCommonColumnDataType
    /// If non null, culture used to parse the value to the storage type of this column\n will be used for parsing and for consolidation proces
    ///
    /// Example: "fr-FR"
    public var columnCultureName: String?
    /// If non null, format used to parse the value to the storage type of this column\n will be used for parsing and for consolidation proces
    ///
    /// Example: "MM/dd/yyyy"
    public var columnFormat: String?
    /// If the size of the value is greater than the limit we can truncate the value instead of failing...
    ///
    /// Example: false
    public var canBeTruncated: Bool
    /// Indicate the display group name where the column must be putted
    ///
    /// Example: "Category"
    public var displayGroupName: String?

    public init(beezUPColumnName: String? = nil, columnImportance: BeezUPCommonColumnImportance, columnDataType: BeezUPCommonColumnDataType, columnCultureName: String? = nil, columnFormat: String? = nil, canBeTruncated: Bool? = nil, displayGroupName: String? = nil) {
        self.beezUPColumnName = beezUPColumnName
        self.columnImportance = columnImportance
        self.columnDataType = columnDataType
        self.columnCultureName = columnCultureName
        self.columnFormat = columnFormat
        self.canBeTruncated = canBeTruncated ?? false
        self.displayGroupName = displayGroupName
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        self.beezUPColumnName = try values.decodeIfPresent(String.self, forKey: .beezUPColumnName)
        self.columnImportance = try values.decode(BeezUPCommonColumnImportance.self, forKey: .columnImportance)
        self.columnDataType = try values.decode(BeezUPCommonColumnDataType.self, forKey: .columnDataType)
        self.columnCultureName = try values.decodeIfPresent(String.self, forKey: .columnCultureName)
        self.columnFormat = try values.decodeIfPresent(String.self, forKey: .columnFormat)
        self.canBeTruncated = try values.decodeIfPresent(Bool.self, forKey: .canBeTruncated) ?? false
        self.displayGroupName = try values.decodeIfPresent(String.self, forKey: .displayGroupName)
    }
}

public struct MapBeezUPColumnRequest: Codable {
    /// The BeezUP column name
    ///
    /// Example: "CategoryFirstLevel"
    public var beezUPColumnName: String

    public init(beezUPColumnName: String) {
        self.beezUPColumnName = beezUPColumnName
    }
}

/// The catalog importation reporting
public struct ImportationReporting: Codable {
    public var links: ImportationReportingLinks?
    /// The execution identifier of the catalog importation
    ///
    /// Example: "bf3bc288-604c-4267-925e-66b1a15dca75"
    public var executionID: String
    /// The last step name of the importation process
    ///
    /// Example: "IsSaveInDb"
    public var stepName: String?
    /// The user identifier
    ///
    /// Example: "8a7fbdec-9e71-472e-9974-27d5c1d57cf8"
    public var userID: String?
    /// Indicate if the importation succeed or not.
    ///
    /// Example: true
    public var isSuccess: Bool?
    /// Indicate the total product count detected in the catalog during the importation.
    ///
    /// Example: 101
    public var totalProductCount: Int?
    /// Indicate the total product count in error detected in the catalog during the importation.
    public var totalProductErrorCount: Int?
    /// Indicate the total product count in success in the catalog during the importation.
    ///
    /// Example: 101
    public var totalProductSuccessCount: Int?
    /// Indicate the error message list related to this importation.
    public var errors: [BeezUPCommonUserErrorMessage]?
    /// Indicate the last update UTC date of the reporting.
    ///
    /// Example: "2017-04-01T13:10:09Z"
    public var lastUpdateUtcDate: Date
    /// Indicate if this importation is an auto import or not.
    ///
    /// Example: true
    public var isAutoImported: Bool?
    /// Indicate the begin UTC date of this importation.
    ///
    /// Example: "2017-04-01T13:01:01Z"
    public var beginUtcDate: Date
    /// Indicate the end UTC date of this importation.
    ///
    /// Example: "2017-04-01T13:10:09Z"
    public var endUtcDate: Date?
    /// Indicate the input url of this importation.
    ///
    /// Example: "http://blal.com/catalog.csv"
    public var inputConfigurationURL: URL?
    /// Indicate the steps that have been passed during the importation process
    ///
    /// Example:
    ///
    /// {
    ///   "isCatalogImportComputeDiffCompleted" : false,
    ///   "isCatalogImportPrepareReadCompleted" : false,
    ///   "isCatalogUpdateCompleted" : false,
    ///   "isSavedInDb" : false
    /// }
    public var steps: [String: Bool]

    public init(links: ImportationReportingLinks? = nil, executionID: String, stepName: String? = nil, userID: String? = nil, isSuccess: Bool? = nil, totalProductCount: Int? = nil, totalProductErrorCount: Int? = nil, totalProductSuccessCount: Int? = nil, errors: [BeezUPCommonUserErrorMessage]? = nil, lastUpdateUtcDate: Date, isAutoImported: Bool? = nil, beginUtcDate: Date, endUtcDate: Date? = nil, inputConfigurationURL: URL? = nil, steps: [String: Bool]) {
        self.links = links
        self.executionID = executionID
        self.stepName = stepName
        self.userID = userID
        self.isSuccess = isSuccess
        self.totalProductCount = totalProductCount
        self.totalProductErrorCount = totalProductErrorCount
        self.totalProductSuccessCount = totalProductSuccessCount
        self.errors = errors
        self.lastUpdateUtcDate = lastUpdateUtcDate
        self.isAutoImported = isAutoImported
        self.beginUtcDate = beginUtcDate
        self.endUtcDate = endUtcDate
        self.inputConfigurationURL = inputConfigurationURL
        self.steps = steps
    }

    private enum CodingKeys: String, CodingKey {
        case links
        case executionID = "executionId"
        case stepName
        case userID = "userId"
        case isSuccess = "success"
        case totalProductCount
        case totalProductErrorCount
        case totalProductSuccessCount
        case errors
        case lastUpdateUtcDate
        case isAutoImported = "autoImported"
        case beginUtcDate
        case endUtcDate
        case inputConfigurationURL = "inputConfigurationUrl"
        case steps
    }
}

/// The message request start a manual importation process. Indicate the way to handle duplicate product. Can be null if you want to reuse the configuration of the previous importation succeed.
public struct StartManualImportRequest: Codable {
    /// Describe the input configuration
    public var input: InputConfiguration
    /// Describe how you want to manage the duplication of the product value
    public var duplicateProductSkuConfiguration: DuplicateProductValueConfiguration?

    public init(input: InputConfiguration, duplicateProductSkuConfiguration: DuplicateProductValueConfiguration? = nil) {
        self.input = input
        self.duplicateProductSkuConfiguration = duplicateProductSkuConfiguration
    }
}

public struct ImportationTechnicalProgression: Codable {
    /// Indicate for each step of the importation the uris to look at
    public var stepsProgression: [String: [String]]?

    public init(stepsProgression: [String: [String]]? = nil) {
        self.stepsProgression = stepsProgression
    }
}

/// The message request to change a custom column expression an user name
public struct ChangeCustomColumnRequest: Codable {
    /// The encrypted excel expression of the column
    ///
    /// Example: "uziushdczaniodnndonisodndsiondsoidsndoin"
    public var encryptedExpression: String
    /// The encrypted XML Blockly representation of the expression
    ///
    /// Example: "apokpoa,opz,sixsoisiosnoisn"
    public var encryptedBlocklyExpression: String
    /// Column named by the user
    ///
    /// Example: "My SKU"
    public var userColumName: String

    public init(encryptedExpression: String, encryptedBlocklyExpression: String, userColumName: String) {
        self.encryptedExpression = encryptedExpression
        self.encryptedBlocklyExpression = encryptedBlocklyExpression
        self.userColumName = userColumName
    }
}

public struct CustomColumnLinks: Codable {
    public var save: BeezUPCommonLink3
    public var delete: BeezUPCommonLink3
    public var rename: BeezUPCommonLink3
    public var expression: BeezUPCommonLink3
    public var saveExpression: BeezUPCommonLink3

    public init(save: BeezUPCommonLink3, delete: BeezUPCommonLink3, rename: BeezUPCommonLink3, expression: BeezUPCommonLink3, saveExpression: BeezUPCommonLink3) {
        self.save = save
        self.delete = delete
        self.rename = rename
        self.expression = expression
        self.saveExpression = saveExpression
    }
}

/// The custom column configuration
public struct CustomColumn: Codable {
    /// The catalog column identifier
    ///
    /// Example: "8f6671d6-a9bc-4de0-a0c4-4643b0c3f871"
    public var id: String
    /// Column named by the user
    ///
    /// Example: "My SKU"
    public var userColumName: String
    /// Indicates the configuration applied on the column (catalog or custom) during the importation process.
    public var configuration: ColumnConfiguration
    public var catalogColumnDependencies: [String]?
    public var links: CustomColumnLinks

    public init(id: String, userColumName: String, configuration: ColumnConfiguration, catalogColumnDependencies: [String]? = nil, links: CustomColumnLinks) {
        self.id = id
        self.userColumName = userColumName
        self.configuration = configuration
        self.catalogColumnDependencies = catalogColumnDependencies
        self.links = links
    }
}

public struct ImportationCustomColumnLinks: Codable {
    public var save: BeezUPCommonLink3
    public var delete: BeezUPCommonLink3
    public var expression: BeezUPCommonLink3
    public var map: BeezUPCommonLink3?
    public var unmap: BeezUPCommonLink3?
    public var productSampleValue: BeezUPCommonLink3?

    public init(save: BeezUPCommonLink3, delete: BeezUPCommonLink3, expression: BeezUPCommonLink3, map: BeezUPCommonLink3? = nil, unmap: BeezUPCommonLink3? = nil, productSampleValue: BeezUPCommonLink3? = nil) {
        self.save = save
        self.delete = delete
        self.expression = expression
        self.map = map
        self.unmap = unmap
        self.productSampleValue = productSampleValue
    }
}

/// The custom column configuration
public struct ImportationCustomColumn: Codable {
    /// The catalog column identifier
    ///
    /// Example: "8f6671d6-a9bc-4de0-a0c4-4643b0c3f871"
    public var id: String
    /// Column named by the user
    ///
    /// Example: "My SKU"
    public var userColumName: String
    /// Indicates the configuration applied on the column (catalog or custom) during the importation process.
    public var configuration: ColumnConfiguration
    public var links: ImportationCustomColumnLinks

    public init(id: String, userColumName: String, configuration: ColumnConfiguration, links: ImportationCustomColumnLinks) {
        self.id = id
        self.userColumName = userColumName
        self.configuration = configuration
        self.links = links
    }
}

public struct RandomProductList: Codable {
    public var products: [Product]

    public init(products: [Product]) {
        self.products = products
    }
}

public struct ProductList: Codable {
    /// Example:
    ///
    /// {
    ///   "entryCount" : "25",
    ///   "links" : {
    ///     "first" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "1",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "last" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "38",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "next" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "2",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     }
    ///   },
    ///   "pageCount" : "38",
    ///   "totalEntryCount" : "943"
    /// }
    public var paginationResult: BeezUPCommonPaginationResult
    public var products: [Product]

    public init(paginationResult: BeezUPCommonPaginationResult, products: [Product]) {
        self.paginationResult = paginationResult
        self.products = products
    }
}

/// Represent a catalog product
public struct Product: Codable {
    /// The product identifier
    ///
    /// Example: "578419df-1bbf-41a6-96fa-862e42182b67"
    public var productID: String
    /// The catalog category identifier
    ///
    /// Example: "81a058a6-0451-4b79-84ef-94c58d0ed4ac"
    public var categoryID: String
    /// The key is the column identifier
    ///
    /// Example:
    ///
    /// {
    ///   "012929c0-e78b-462a-a96e-25c061575385" : "http:\/\/media.conforama.fr\/Medias\/500000\/80000\/5000\/500\/10\/G_585511_A.jpg",
    ///   "46602e10-bc45-4944-a440-63d5f7ece1f8" : "42",
    ///   "68082b11-4ffd-4bec-964a-465a471c7d37" : "SKU1234",
    ///   "b6d74510-41ce-42ec-947a-0bdf62e9beee" : "Refrigerateur",
    ///   "ba270fa0-8482-46be-905a-cae4ca746b92" : "http:\/\/www.conforama.fr\/gros-electromenager\/encastrable\/refrigerateur-encastrable\/refrigerateur-combine-161-litres-far-r5115s\/p\/585511"
    /// }
    public var values: [String: String]
    /// Indicates if the product exists in the current catalog
    ///
    /// Example: true
    public var isExists: Bool

    public init(productID: String, categoryID: String, values: [String: String], isExists: Bool) {
        self.productID = productID
        self.categoryID = categoryID
        self.values = values
        self.isExists = isExists
    }

    private enum CodingKeys: String, CodingKey {
        case productID = "productId"
        case categoryID = "categoryId"
        case values
        case isExists = "exists"
    }
}

/// The request message to get products based on these filters
public struct GetProductsRequest: Codable {
    /// Indicates the page number
    public var pageNumber: Int
    /// Indicate the item count per page
    ///
    /// Example: 100
    public var pageSize: Int
    public var columnIDList: [String]?
    /// Search for existing products or not. If null you will received both.
    ///
    /// Example: true
    public var isExists: Bool?
    /// Filter with a list of product identifier
    public var productIDList: [String]?
    /// Search for product by sku
    ///
    /// Example: "MySku123"
    public var sku: String?
    /// Search for product by ean
    ///
    /// Example: "MySku123"
    public var ean: String?
    /// Search for product by mpn
    ///
    /// Example: "MySku123"
    public var mpn: String?
    /// Search for products containing this title
    ///
    /// Example: "Frigo"
    public var title: String?
    /// The catalog category path
    ///
    /// Example: ["Vêtements", "Femmes", "Chaussures"]
    public var categoryPath: [String]?
    /// The catalog column identifier (catalog or custom column)
    ///
    /// Example: "bea7c21e-948b-4ac3-9ffd-4396e62c4163"
    public var orderByCatalogColumnID: String?
    /// Do not retrieve sub categories. By default, this value is set to false
    ///
    /// Example: false
    public var isWithoutSubCategories: Bool?

    public init(pageNumber: Int, pageSize: Int, columnIDList: [String]? = nil, isExists: Bool? = nil, productIDList: [String]? = nil, sku: String? = nil, ean: String? = nil, mpn: String? = nil, title: String? = nil, categoryPath: [String]? = nil, orderByCatalogColumnID: String? = nil, isWithoutSubCategories: Bool? = nil) {
        self.pageNumber = pageNumber
        self.pageSize = pageSize
        self.columnIDList = columnIDList
        self.isExists = isExists
        self.productIDList = productIDList
        self.sku = sku
        self.ean = ean
        self.mpn = mpn
        self.title = title
        self.categoryPath = categoryPath
        self.orderByCatalogColumnID = orderByCatalogColumnID
        self.isWithoutSubCategories = isWithoutSubCategories
    }

    private enum CodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case columnIDList = "columnIdList"
        case isExists = "exists"
        case productIDList = "productIdList"
        case sku
        case ean
        case mpn
        case title
        case categoryPath
        case orderByCatalogColumnID = "orderByCatalogColumnId"
        case isWithoutSubCategories = "withoutSubCategories"
    }
}

/// The object which contains the category list
public struct CategoryList: Codable {
    /// The category list
    public var categories: [Category]

    public init(categories: [Category]) {
        self.categories = categories
    }
}

/// The catalog category
public struct Category: Codable {
    /// The catalog category identifier
    ///
    /// Example: "81a058a6-0451-4b79-84ef-94c58d0ed4ac"
    public var categoryID: String?
    /// The catalog category path
    ///
    /// Example: ["Vêtements", "Femmes", "Chaussures"]
    public var categoryPath: [String]
    /// The total product count related to this category and his sub categories
    ///
    /// Example: 101
    public var totalProductCount: Int
    /// The product count related to this category
    ///
    /// Example: 101
    public var selfProductCount: Int

    public init(categoryID: String? = nil, categoryPath: [String], totalProductCount: Int, selfProductCount: Int) {
        self.categoryID = categoryID
        self.categoryPath = categoryPath
        self.totalProductCount = totalProductCount
        self.selfProductCount = selfProductCount
    }

    private enum CodingKeys: String, CodingKey {
        case categoryID = "categoryId"
        case categoryPath
        case totalProductCount
        case selfProductCount
    }
}

/// Get Importation Products Report Request
public struct GetImportationProductsReportRequest: Codable {
    /// Indicates the page number
    public var pageNumber: Int
    /// Indicate the item count per page
    ///
    /// Example: 100
    public var pageSize: Int
    /// Filter by Sku (equals)
    public var sku: String?
    /// Filter by EAN (equals)
    public var ean: String?
    /// Filter by MPN (equals)
    public var mpn: String?
    /// Filter by Title (StartsWith)
    public var title: String?
    /// Get Importation Products Report Request Error Codes
    public var errorCodes: [GetImportationProductsReportRequestErrorCode]?

    public init(pageNumber: Int, pageSize: Int, sku: String? = nil, ean: String? = nil, mpn: String? = nil, title: String? = nil, errorCodes: [GetImportationProductsReportRequestErrorCode]? = nil) {
        self.pageNumber = pageNumber
        self.pageSize = pageSize
        self.sku = sku
        self.ean = ean
        self.mpn = mpn
        self.title = title
        self.errorCodes = errorCodes
    }
}

/// Get Importation Products Report Request Error Codes
public struct GetImportationProductsReportRequestErrorCode: Codable {
    /// Error Code
    public var errorCode: String?
    /// Column named by the user
    ///
    /// Example: "My SKU"
    public var userColumnName: String?

    public init(errorCode: String? = nil, userColumnName: String? = nil) {
        self.errorCode = errorCode
        self.userColumnName = userColumnName
    }
}

/// Get Importation Products Report Response
public struct GetImportationProductsReportResponse: Codable {
    /// Example:
    ///
    /// {
    ///   "entryCount" : "25",
    ///   "links" : {
    ///     "first" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "1",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "last" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "38",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "next" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "2",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     }
    ///   },
    ///   "pageCount" : "38",
    ///   "totalEntryCount" : "943"
    /// }
    public var paginationResult: BeezUPCommonPaginationResult
    /// Product Errors
    public var productErrors: [ProductError]?

    public init(paginationResult: BeezUPCommonPaginationResult, productErrors: [ProductError]? = nil) {
        self.paginationResult = paginationResult
        self.productErrors = productErrors
    }
}

public struct ProductError: Codable {
    public var lineNumber: Int
    /// The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers. http://schema.org/sku
    public var sku: String?
    public var ean: String?
    public var mpn: String?
    public var title: String?
    public var errors: [ProductErrorCode]

    public init(lineNumber: Int, sku: String? = nil, ean: String? = nil, mpn: String? = nil, title: String? = nil, errors: [ProductErrorCode]) {
        self.lineNumber = lineNumber
        self.sku = sku
        self.ean = ean
        self.mpn = mpn
        self.title = title
        self.errors = errors
    }
}

public struct ProductErrorCode: Codable {
    /// Error Code
    public var errorCode: String?
    /// Column named by the user
    ///
    /// Example: "My SKU"
    public var userColumName: String?
    /// The BeezUP column name
    ///
    /// Example: "CategoryFirstLevel"
    public var beezUPColumnName: String?
    public var errorMessage: String?

    public init(errorCode: String? = nil, userColumName: String? = nil, beezUPColumnName: String? = nil, errorMessage: String? = nil) {
        self.errorCode = errorCode
        self.userColumName = userColumName
        self.beezUPColumnName = beezUPColumnName
        self.errorMessage = errorMessage
    }
}

public struct GetImportationReportResponseDiff: Codable {
    public var createdCount: Int
    public var updatedCount: Int
    public var deletedCount: Int
    public var unchangedCount: Int?

    public init(createdCount: Int, updatedCount: Int, deletedCount: Int, unchangedCount: Int? = nil) {
        self.createdCount = createdCount
        self.updatedCount = updatedCount
        self.deletedCount = deletedCount
        self.unchangedCount = unchangedCount
    }
}

public struct GetImportationReportResponseProductMetrics: Codable {
    public var detectedCount: Int
    public var duplicatedCount: Int
    public var failedCount: Int
    public var activeCount: Int

    public init(detectedCount: Int, duplicatedCount: Int, failedCount: Int, activeCount: Int) {
        self.detectedCount = detectedCount
        self.duplicatedCount = duplicatedCount
        self.failedCount = failedCount
        self.activeCount = activeCount
    }
}

/// Get Importation Report Response
public struct GetImportationReportResponse: Codable {
    /// The execution identifier of the catalog importation
    ///
    /// Example: "bf3bc288-604c-4267-925e-66b1a15dca75"
    public var executionID: String
    public var importationInfo: GetImportationReportResponseImportationInfo
    public var columns: GetImportationReportResponseDiff?
    public var categories: GetImportationReportResponseDiff?
    public var products: GetImportationReportResponseDiff?
    public var productMetrics: GetImportationReportResponseProductMetrics?
    public var errors: [GetImportationReportResponseError]

    public init(executionID: String, importationInfo: GetImportationReportResponseImportationInfo, columns: GetImportationReportResponseDiff? = nil, categories: GetImportationReportResponseDiff? = nil, products: GetImportationReportResponseDiff? = nil, productMetrics: GetImportationReportResponseProductMetrics? = nil, errors: [GetImportationReportResponseError]) {
        self.executionID = executionID
        self.importationInfo = importationInfo
        self.columns = columns
        self.categories = categories
        self.products = products
        self.productMetrics = productMetrics
        self.errors = errors
    }

    private enum CodingKeys: String, CodingKey {
        case executionID = "executionId"
        case importationInfo
        case columns
        case categories
        case products
        case productMetrics
        case errors
    }
}

public struct GetImportationReportResponseImportationInfo: Codable {
    /// The start date of the importation
    ///
    /// Example: "2017-04-01T13:01:01Z"
    public var beginUtcDate: Date
    /// The start date of the importation
    ///
    /// Example: "2017-04-01T13:01:01Z"
    public var endUtcDate: Date
    /// The user identifier
    ///
    /// Example: "8a7fbdec-9e71-472e-9974-27d5c1d57cf8"
    public var userID: String
    /// Describe how to get and read a file
    public var inputConfiguration: InputFileConfiguration

    public init(beginUtcDate: Date, endUtcDate: Date, userID: String, inputConfiguration: InputFileConfiguration) {
        self.beginUtcDate = beginUtcDate
        self.endUtcDate = endUtcDate
        self.userID = userID
        self.inputConfiguration = inputConfiguration
    }

    private enum CodingKeys: String, CodingKey {
        case beginUtcDate
        case endUtcDate
        case userID = "userId"
        case inputConfiguration
    }
}

public struct GetImportationReportResponseError: Codable {
    /// Error Code
    public var errorCode: String
    /// Column named by the user
    ///
    /// Example: "My SKU"
    public var userColumName: String
    /// The BeezUP column name
    ///
    /// Example: "CategoryFirstLevel"
    public var beezUPColumnName: String?
    public var productCount: Int

    public init(errorCode: String, userColumName: String, beezUPColumnName: String? = nil, productCount: Int) {
        self.errorCode = errorCode
        self.userColumName = userColumName
        self.beezUPColumnName = beezUPColumnName
        self.productCount = productCount
    }
}

/// Importance of the column
///
/// Example: "Required"
public enum BeezUPCommonColumnImportance: String, Codable, CaseIterable {
    case required = "Required"
    case recommended = "Recommended"
    case optional = "Optional"
}

/// Data type of the column, will be used for parsing and for consolidation proces
///
/// Example: "String"
public enum BeezUPCommonColumnDataType: String, Codable, CaseIterable {
    case string = "String"
    case url = "Url"
    case text = "Text"
    case decimal = "Decimal"
    case dateTime = "DateTime"
    case int = "Int"
    case specialInt = "SpecialInt"
    case inStock = "InStock"
    case unknown = "Unknown"
    case imageURL = "ImageUrl"
}

/// Example:
///
/// {
///   "entryCount" : "25",
///   "links" : {
///     "first" : {
///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
///       "method" : "POST",
///       "parameters" : [
///         {
///           "in" : "body",
///           "name" : "request",
///           "schema" : "orderListRequest",
///           "type" : "object",
///           "value" : {
///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
///             "pageNumber" : "1",
///             "pageSize" : "25"
///           }
///         }
///       ]
///     },
///     "last" : {
///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
///       "method" : "POST",
///       "parameters" : [
///         {
///           "in" : "body",
///           "name" : "request",
///           "schema" : "orderListRequest",
///           "type" : "object",
///           "value" : {
///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
///             "pageNumber" : "38",
///             "pageSize" : "25"
///           }
///         }
///       ]
///     },
///     "next" : {
///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
///       "method" : "POST",
///       "parameters" : [
///         {
///           "in" : "body",
///           "name" : "request",
///           "schema" : "orderListRequest",
///           "type" : "object",
///           "value" : {
///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
///             "pageNumber" : "2",
///             "pageSize" : "25"
///           }
///         }
///       ]
///     }
///   },
///   "pageCount" : "38",
///   "totalEntryCount" : "943"
/// }
public struct BeezUPCommonPaginationResult: Codable {
    /// The entry count currently returned
    ///
    /// Example: 25
    public var entryCount: Int
    /// The page count
    ///
    /// Example: 38
    public var pageCount: Int
    /// The total entry count
    ///
    /// Example: 943
    public var totalEntryCount: Int
    /// The navigation links 'first', 'last', 'next', 'previous'
    public var links: BeezUPCommonPaginationResultLinks

    public init(entryCount: Int, pageCount: Int, totalEntryCount: Int, links: BeezUPCommonPaginationResultLinks) {
        self.entryCount = entryCount
        self.pageCount = pageCount
        self.totalEntryCount = totalEntryCount
        self.links = links
    }
}

/// The navigation links 'first', 'last', 'next', 'previous'
public struct BeezUPCommonPaginationResultLinks: Codable {
    public var first: BeezUPCommonLink3
    public var last: BeezUPCommonLink3
    public var previous: BeezUPCommonLink3?
    public var next: BeezUPCommonLink3?

    public init(first: BeezUPCommonLink3, last: BeezUPCommonLink3, previous: BeezUPCommonLink3? = nil, next: BeezUPCommonLink3? = nil) {
        self.first = first
        self.last = last
        self.previous = previous
        self.next = next
    }
}

/// The available channel
public struct ChannelHeader: Codable {
    /// The channel identifier
    ///
    /// Example: "2dc136a7-0d3d-4cc9-a825-a28a42c53e28"
    public var channelID: String
    /// The channel name
    ///
    /// Example: "Amazon FRA"
    public var channelName: String
    /// The URL <a href="https://en.wikipedia.org/wiki/URL">https://en.wikipedia.org/wiki/URL</a>
    ///
    /// Example: "http://www.mydomain.com"
    public var channelLogoURL: String
    /// The type list related to a channel
    ///
    /// Example: ["Marketplace"]
    public var types: [String]
    /// The links related to an available channel
    public var links: ChannelHeaderLinks

    public init(channelID: String, channelName: String, channelLogoURL: String, types: [String], links: ChannelHeaderLinks) {
        self.channelID = channelID
        self.channelName = channelName
        self.channelLogoURL = channelLogoURL
        self.types = types
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case channelID = "channelId"
        case channelName
        case channelLogoURL = "channelLogoUrl"
        case types
        case links
    }
}

/// The links related to an available channel
public struct ChannelHeaderLinks: Codable {
    public var this: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3? = nil) {
        self.this = this
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
    }
}

public struct ChannelInfo: Codable {
    /// The channel identifier
    ///
    /// Example: "2dc136a7-0d3d-4cc9-a825-a28a42c53e28"
    public var channelID: String
    /// The channel name
    ///
    /// Example: "Amazon FRA"
    public var channelName: String
    /// The URL <a href="https://en.wikipedia.org/wiki/URL">https://en.wikipedia.org/wiki/URL</a>
    ///
    /// Example: "http://www.mydomain.com"
    public var channelLogoURL: String?
    /// Indicae a description to the channel
    ///
    /// Example: "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Mollitia dolorum, animi voluptatibus maiores, assumenda maxime illum, labore quae quas ducimus laudantium provident veritatis doloremque dignissimos eum. Error magni illum autem."
    public var channelDescription: String?
    /// Indicate the BeezUP offer
    ///
    /// Example: "First month free"
    public var beezUPOffer: String?
    public var salesContact: SalesContact?
    public var details: Details?
    public var keyNumbers: KeyNumbers?
    public var technicalContact: TechnicalContact?

    public struct SalesContact: Codable {
        /// Indicate the BeezUP offer
        ///
        /// Example: "Stéphanie Gregis"
        public var name: String?
        /// Indicate the sales contact email
        ///
        /// Example: "stephanie.gregis@m6.fr"
        public var email: String?
        /// The sales contact phone number
        ///
        /// Example: "0033 6 08 87 85 45"
        public var phoneNumber: String?

        public init(name: String? = nil, email: String? = nil, phoneNumber: String? = nil) {
            self.name = name
            self.email = email
            self.phoneNumber = phoneNumber
        }
    }

    public struct Details: Codable {
        /// The cost's description of the channel
        ///
        /// Example: "CPC variation from 0.10€ to 0.20€"
        public var costs: String?
        /// The business model of the channel
        ///
        /// Example: "CPC"
        public var businessModel: String?
        /// The channel type
        ///
        /// Example: "Comparator"
        public var channelType: String?
        /// The tracking type
        ///
        /// Example: "Redirect"
        public var trackingType: String?
        /// The channel category
        public var category: String?
        /// The home url of the channel
        ///
        /// Example: "http://www.achetezfacile.com"
        public var homeURL: URL?
        /// The subscription link to the channel
        ///
        /// Example:
        ///
        /// "By Email at : stephanie.gregis@m6.fr
        /// "
        public var subscriptionLink: String?

        public init(costs: String? = nil, businessModel: String? = nil, channelType: String? = nil, trackingType: String? = nil, category: String? = nil, homeURL: URL? = nil, subscriptionLink: String? = nil) {
            self.costs = costs
            self.businessModel = businessModel
            self.channelType = channelType
            self.trackingType = trackingType
            self.category = category
            self.homeURL = homeURL
            self.subscriptionLink = subscriptionLink
        }

        private enum CodingKeys: String, CodingKey {
            case costs
            case businessModel
            case channelType
            case trackingType
            case category
            case homeURL = "homeUrl"
            case subscriptionLink
        }
    }

    public struct KeyNumbers: Codable {
        /// The estimated product count of the channel
        ///
        /// Example: "1M"
        public var products: String?
        /// The estimated category count of the channel
        ///
        /// Example: "NC"
        public var categories: String?
        /// The estimated store count of the channel
        ///
        /// Example: "3000"
        public var stores: String?
        /// The estimated view count per month of the channel
        ///
        /// Example: "3M"
        public var viewsPerMonth: String?

        public init(products: String? = nil, categories: String? = nil, stores: String? = nil, viewsPerMonth: String? = nil) {
            self.products = products
            self.categories = categories
            self.stores = stores
            self.viewsPerMonth = viewsPerMonth
        }
    }

    public struct TechnicalContact: Codable {
        /// The technical contact name
        ///
        /// Example: "Pierre Guédon"
        public var name: String?
        /// The technical contact phone number
        ///
        /// Example: "NC"
        public var phoneNumber: String?
        /// The technical contact email
        ///
        /// Example: "pierre.guedon@m6.fr"
        public var email: String?

        public init(name: String? = nil, phoneNumber: String? = nil, email: String? = nil) {
            self.name = name
            self.phoneNumber = phoneNumber
            self.email = email
        }
    }

    public init(channelID: String, channelName: String, channelLogoURL: String? = nil, channelDescription: String? = nil, beezUPOffer: String? = nil, salesContact: SalesContact? = nil, details: Details? = nil, keyNumbers: KeyNumbers? = nil, technicalContact: TechnicalContact? = nil) {
        self.channelID = channelID
        self.channelName = channelName
        self.channelLogoURL = channelLogoURL
        self.channelDescription = channelDescription
        self.beezUPOffer = beezUPOffer
        self.salesContact = salesContact
        self.details = details
        self.keyNumbers = keyNumbers
        self.technicalContact = technicalContact
    }

    private enum CodingKeys: String, CodingKey {
        case channelID = "channelId"
        case channelName
        case channelLogoURL = "channelLogoUrl"
        case channelDescription
        case beezUPOffer
        case salesContact
        case details
        case keyNumbers
        case technicalContact
    }
}

/// Get channel first level category list
public struct ChannelRootCategory: Codable {
    public var firstLevelCategories: [ChannelFirstLevelCategory]

    public init(firstLevelCategories: [ChannelFirstLevelCategory]) {
        self.firstLevelCategories = firstLevelCategories
    }
}

/// The first level category with his sub categories
public struct ChannelFirstLevelCategory: Codable {
    /// Example: "24f508da-a069-4467-b9d3-15baebe9bac7"
    public var channelCategoryID: String
    /// The channel category name
    ///
    /// Example: "Clothing"
    public var channelCategoryName: String
    /// The channel category level starting from 1
    public var channelCategoryLevel: Int
    /// The default cost on this channel category
    ///
    /// Example: 10.42
    public var channelCategoryDefaultCost: Double?
    /// The channel category channel code identifier
    ///
    /// Example: "1342"
    public var channelCategoryChannelCode: String?
    /// The channel category column overrides
    public var channelCategoryColumnOverrides: [String: ChannelCategoryColumnOverride]?
    public var subCategories: [ChannelCategory]?

    public init(channelCategoryID: String, channelCategoryName: String, channelCategoryLevel: Int, channelCategoryDefaultCost: Double? = nil, channelCategoryChannelCode: String? = nil, channelCategoryColumnOverrides: [String: ChannelCategoryColumnOverride]? = nil, subCategories: [ChannelCategory]? = nil) {
        self.channelCategoryID = channelCategoryID
        self.channelCategoryName = channelCategoryName
        self.channelCategoryLevel = channelCategoryLevel
        self.channelCategoryDefaultCost = channelCategoryDefaultCost
        self.channelCategoryChannelCode = channelCategoryChannelCode
        self.channelCategoryColumnOverrides = channelCategoryColumnOverrides
        self.subCategories = subCategories
    }

    private enum CodingKeys: String, CodingKey {
        case channelCategoryID = "channelCategoryId"
        case channelCategoryName
        case channelCategoryLevel
        case channelCategoryDefaultCost
        case channelCategoryChannelCode
        case channelCategoryColumnOverrides
        case subCategories
    }
}

/// The channel category
public struct ChannelCategory: Codable {
    /// Example: "24f508da-a069-4467-b9d3-15baebe9bac7"
    public var channelCategoryID: String
    /// The channel category path
    ///
    /// Example: ["Clothing", "Women", "Shoes"]
    public var channelCategoryPath: [String]
    /// The channel category level starting from 1
    public var channelCategoryLevel: Int
    /// The default cost on this channel category
    ///
    /// Example: 10.42
    public var channelCategoryDefaultCost: Double?
    /// The channel category channel code identifier
    ///
    /// Example: "1342"
    public var channelCategoryChannelCode: String?
    /// The channel category column overrides
    public var channelCategoryColumnOverrides: [String: ChannelCategoryColumnOverride]?

    public init(channelCategoryID: String, channelCategoryPath: [String], channelCategoryLevel: Int, channelCategoryDefaultCost: Double? = nil, channelCategoryChannelCode: String? = nil, channelCategoryColumnOverrides: [String: ChannelCategoryColumnOverride]? = nil) {
        self.channelCategoryID = channelCategoryID
        self.channelCategoryPath = channelCategoryPath
        self.channelCategoryLevel = channelCategoryLevel
        self.channelCategoryDefaultCost = channelCategoryDefaultCost
        self.channelCategoryChannelCode = channelCategoryChannelCode
        self.channelCategoryColumnOverrides = channelCategoryColumnOverrides
    }

    private enum CodingKeys: String, CodingKey {
        case channelCategoryID = "channelCategoryId"
        case channelCategoryPath
        case channelCategoryLevel
        case channelCategoryDefaultCost
        case channelCategoryChannelCode
        case channelCategoryColumnOverrides
    }
}

public struct ChannelCategoryColumnOverride: Codable {
    /// The channel column identifier
    ///
    /// Example: "8a76f06a-fefc-4c0d-bcfe-b210f1482977"
    public var channelColumnID: String
    /// The channel column name
    ///
    /// Example: "NAME"
    public var channelColumnName: String
    /// The channel column description
    ///
    /// Example: "Please enter the base prices (price per unit) according to <a href="http://www.gesetze-im-internet.de/pangv/__2.html">Article PAngV</a>"
    public var channelColumnDescription: String?
    /// Indicates if this column must shown in the mapping page or not
    ///
    /// Example: true
    public var isShowInMapping: Bool
    /// The channel column configuration. The BeezUP Column Name is optional. If the BeezUP column is mapped we will indicate the data type and column importance of the BeezUP column.
    public var configuration: ChannelColumnConfiguration
    /// The restricted values. The key will be the restricted value identifier (format:guid) and the value will be the restriced value
    public var restrictedValues: [String: String]?

    public init(channelColumnID: String, channelColumnName: String, channelColumnDescription: String? = nil, isShowInMapping: Bool, configuration: ChannelColumnConfiguration, restrictedValues: [String: String]? = nil) {
        self.channelColumnID = channelColumnID
        self.channelColumnName = channelColumnName
        self.channelColumnDescription = channelColumnDescription
        self.isShowInMapping = isShowInMapping
        self.configuration = configuration
        self.restrictedValues = restrictedValues
    }

    private enum CodingKeys: String, CodingKey {
        case channelColumnID = "channelColumnId"
        case channelColumnName
        case channelColumnDescription
        case isShowInMapping = "showInMapping"
        case configuration
        case restrictedValues
    }
}

/// The channel column
public struct ChannelColumn: Codable {
    /// The channel column identifier
    ///
    /// Example: "8a76f06a-fefc-4c0d-bcfe-b210f1482977"
    public var channelColumnID: String
    /// The channel column name
    ///
    /// Example: "NAME"
    public var channelColumnName: String
    /// The channel column description
    ///
    /// Example: "Please enter the base prices (price per unit) according to <a href="http://www.gesetze-im-internet.de/pangv/__2.html">Article PAngV</a>"
    public var channelColumnDescription: String?
    /// Indicates if this column must shown in the mapping page or not
    ///
    /// Example: true
    public var isShowInMapping: Bool
    /// The position of the column starting from 1
    public var position: Int
    /// The channel column configuration. The BeezUP Column Name is optional. If the BeezUP column is mapped we will indicate the data type and column importance of the BeezUP column.
    public var configuration: ChannelColumnConfiguration
    /// The restricted values. The key will be the restricted value identifier (format:guid) and the value will be the restriced value
    public var restrictedValues: [String: String]?

    public init(channelColumnID: String, channelColumnName: String, channelColumnDescription: String? = nil, isShowInMapping: Bool, position: Int, configuration: ChannelColumnConfiguration, restrictedValues: [String: String]? = nil) {
        self.channelColumnID = channelColumnID
        self.channelColumnName = channelColumnName
        self.channelColumnDescription = channelColumnDescription
        self.isShowInMapping = isShowInMapping
        self.position = position
        self.configuration = configuration
        self.restrictedValues = restrictedValues
    }

    private enum CodingKeys: String, CodingKey {
        case channelColumnID = "channelColumnId"
        case channelColumnName
        case channelColumnDescription
        case isShowInMapping = "showInMapping"
        case position
        case configuration
        case restrictedValues
    }
}

/// The channel column configuration. The BeezUP Column Name is optional. If the BeezUP column is mapped we will indicate the data type and column importance of the BeezUP column.
public struct ChannelColumnConfiguration: Codable {
    /// Importance of the column
    ///
    /// Example: "Required"
    public var columnImportance: BeezUPCommonColumnImportance
    /// Data type of the column, will be used for parsing and for consolidation proces
    ///
    /// Example: "String"
    public var columnDataType: BeezUPCommonColumnDataType
    /// The BeezUP column name
    ///
    /// Example: "CategoryFirstLevel"
    public var beezUPColumnName: String?

    public init(columnImportance: BeezUPCommonColumnImportance, columnDataType: BeezUPCommonColumnDataType, beezUPColumnName: String? = nil) {
        self.columnImportance = columnImportance
        self.columnDataType = columnDataType
        self.beezUPColumnName = beezUPColumnName
    }
}

public struct ChannelCatalogExportCacheInfoResponse: Codable {
    public var cacheInfo: ChannelCatalogExportCacheInfo
    public var links: ChannelCatalogExportCacheInfoResponseLinks

    public init(cacheInfo: ChannelCatalogExportCacheInfo, links: ChannelCatalogExportCacheInfoResponseLinks) {
        self.cacheInfo = cacheInfo
        self.links = links
    }
}

public struct ChannelCatalogExportCacheInfoResponseLinks: Codable {
    public var this: BeezUPCommonLink3
    public var clear: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3, clear: BeezUPCommonLink3? = nil) {
        self.this = this
        self.clear = clear
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case clear
    }
}

public struct ChannelCatalogExportCacheInfo: Codable {
    /// The cache status
    ///
    /// Example: "ReadyForGeneration"
    public var cacheStatus: String
    /// The last update UTC date of the cache
    ///
    /// Example: "2014-08-25T07:32:31.584Z"
    public var lastUpdateUtcDate: Date?
    /// The last content change UTC date
    ///
    /// Example: "2014-08-25T07:30:31.584Z"
    public var lastContentChangeUtcDate: Date?
    /// The expiration UTC date of the cache
    ///
    /// Example: "2014-08-25T08:02:31.584Z"
    public var expirationUtcDate: Date?
    /// The feed url
    ///
    /// Example: "https://www.scootmotoshop.com/feed.xml"
    public var feedURL: String?

    public init(cacheStatus: String, lastUpdateUtcDate: Date? = nil, lastContentChangeUtcDate: Date? = nil, expirationUtcDate: Date? = nil, feedURL: String? = nil) {
        self.cacheStatus = cacheStatus
        self.lastUpdateUtcDate = lastUpdateUtcDate
        self.lastContentChangeUtcDate = lastContentChangeUtcDate
        self.expirationUtcDate = expirationUtcDate
        self.feedURL = feedURL
    }

    private enum CodingKeys: String, CodingKey {
        case cacheStatus
        case lastUpdateUtcDate
        case lastContentChangeUtcDate
        case expirationUtcDate
        case feedURL = "feedUrl"
    }
}

public struct ChannelCatalogExportationHistoryLinks: Codable {
    public var this: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3? = nil) {
        self.this = this
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
    }
}

public struct ChannelCatalogExportationHistory: Codable {
    /// Example:
    ///
    /// {
    ///   "entryCount" : "25",
    ///   "links" : {
    ///     "first" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "1",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "last" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "38",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "next" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "2",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     }
    ///   },
    ///   "pageCount" : "38",
    ///   "totalEntryCount" : "943"
    /// }
    public var paginationResult: BeezUPCommonPaginationResult?
    public var exportations: [ChannelCatalogExportationReporting]
    public var links: ChannelCatalogExportationHistoryLinks

    public init(paginationResult: BeezUPCommonPaginationResult? = nil, exportations: [ChannelCatalogExportationReporting], links: ChannelCatalogExportationHistoryLinks) {
        self.paginationResult = paginationResult
        self.exportations = exportations
        self.links = links
    }
}

public struct ChannelCatalogExportationReporting: Codable {
    /// The exportation UTC date
    ///
    /// Example: "2014-08-25T07:32:31.584Z"
    public var exportationUtcDate: Date
    /// The exportation duration. \
    /// '00:01:00' measn 1 minute.
    ///
    /// Example: "00:01:00"
    public var exportationDuration: String?
    /// The cache status during the exportation
    ///
    /// Example: "Available"
    public var cacheStatus: String?
    /// The exportated product count during this exportation
    ///
    /// Example: 10142
    public var exportedProductCount: Int?
    /// The IP address of the client who requests this exportation
    ///
    /// Example: "42.101.42.101"
    public var clientIpAddress: String
    /// The http header User-Agent sent by the client who requests this operation
    ///
    /// Example: "Wget/1.13.4 (linux-gnu)"
    public var clientUserAgent: String

    public init(exportationUtcDate: Date, exportationDuration: String? = nil, cacheStatus: String? = nil, exportedProductCount: Int? = nil, clientIpAddress: String, clientUserAgent: String) {
        self.exportationUtcDate = exportationUtcDate
        self.exportationDuration = exportationDuration
        self.cacheStatus = cacheStatus
        self.exportedProductCount = exportedProductCount
        self.clientIpAddress = clientIpAddress
        self.clientUserAgent = clientUserAgent
    }
}

/// Indicates how global actions you can do like how to create a channel catalog, exclusion filter operators, etc...
public struct ChannelCatalogListLinks: Codable {
    public var this: BeezUPCommonLink3?
    public var beezUPColumns: BeezUPCommonLink3?
    public var add: BeezUPCommonLink3?
    public var filterOperators: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3? = nil, beezUPColumns: BeezUPCommonLink3? = nil, add: BeezUPCommonLink3? = nil, filterOperators: BeezUPCommonLink3? = nil) {
        self.this = this
        self.beezUPColumns = beezUPColumns
        self.add = add
        self.filterOperators = filterOperators
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case beezUPColumns
        case add
        case filterOperators
    }
}

public struct ChannelCatalogListLovLinks: Codable {
    /// Describe the way you have to follow to get access to the LOV
    public var channelCatalogExclusionFilterOperatorLov: BeezUPCommonLOVLink3?
    /// Describe the way you have to follow to get access to the LOV
    public var channelCatalogExportCacheStatusLov: BeezUPCommonLOVLink3?

    public init(channelCatalogExclusionFilterOperatorLov: BeezUPCommonLOVLink3? = nil, channelCatalogExportCacheStatusLov: BeezUPCommonLOVLink3? = nil) {
        self.channelCatalogExclusionFilterOperatorLov = channelCatalogExclusionFilterOperatorLov
        self.channelCatalogExportCacheStatusLov = channelCatalogExportCacheStatusLov
    }
}

/// This is the index of the channel catalog API
public struct ChannelCatalogList: Codable {
    /// Indicates how global actions you can do like how to create a channel catalog, exclusion filter operators, etc...
    public var links: ChannelCatalogListLinks?
    public var lovLinks: ChannelCatalogListLovLinks?
    /// The channel catalog list. The key is the channel catalog identifier
    public var channelCatalogs: [String: ChannelCatalog]?

    public init(links: ChannelCatalogListLinks? = nil, lovLinks: ChannelCatalogListLovLinks? = nil, channelCatalogs: [String: ChannelCatalog]? = nil) {
        self.links = links
        self.lovLinks = lovLinks
        self.channelCatalogs = channelCatalogs
    }
}

public struct AddChannelCatalogRequest: Codable {
    /// The channel identifier
    ///
    /// Example: "2dc136a7-0d3d-4cc9-a825-a28a42c53e28"
    public var channelID: String
    /// The store identifier
    ///
    /// Example: "64f43358-63a1-47f7-97ec-0301fc39956b"
    public var storeID: String

    public init(channelID: String, storeID: String) {
        self.channelID = channelID
        self.storeID = storeID
    }

    private enum CodingKeys: String, CodingKey {
        case channelID = "channelId"
        case storeID = "storeId"
    }
}

/// Represents the general settings of your channel catalog
public struct GeneralSettings: Codable {
    /// If true then you authorize disclosure of my statistics generated from clicks and sales
    ///
    /// Example: true
    public var isAcceptToPublishInfo: Bool
    /// Do not export "out of stock" products. Note: this option is not taken into account by the counter.
    ///
    /// Example: true
    public var isDoNotExportOutOfStockProducts: Bool
    /// Activate BeezUP tracking for my statistics (checked by default)
    ///
    /// Example: true
    public var isActiveBeezUPTracking: Bool

    public init(isAcceptToPublishInfo: Bool, isDoNotExportOutOfStockProducts: Bool, isActiveBeezUPTracking: Bool) {
        self.isAcceptToPublishInfo = isAcceptToPublishInfo
        self.isDoNotExportOutOfStockProducts = isDoNotExportOutOfStockProducts
        self.isActiveBeezUPTracking = isActiveBeezUPTracking
    }

    private enum CodingKeys: String, CodingKey {
        case isAcceptToPublishInfo = "acceptToPublishInfo"
        case isDoNotExportOutOfStockProducts = "doNotExportOutOfStockProducts"
        case isActiveBeezUPTracking = "activeBeezUPTracking"
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        self.isAcceptToPublishInfo = try values.decode(Bool.self, forKey: .isAcceptToPublishInfo)
        self.isDoNotExportOutOfStockProducts = try values.decode(Bool.self, forKey: .isDoNotExportOutOfStockProducts)
        self.isActiveBeezUPTracking = try values.decode(Bool.self, forKey: .isActiveBeezUPTracking)
    }
}

/// CPC means cost per click.
/// CPA means cost per action.
/// You can have CPC/CPA with a global cost value.
/// You can have CPC/CPA by category the cost value MUST be null
/// You can have global fixed price.
///
/// Example: "Fixed_Global"
public enum CostType: String, Codable, CaseIterable {
    case cPCGlobal = "CPC_Global"
    case cPAGlobal = "CPA_Global"
    case cPCByCategory = "CPC_ByCategory"
    case cPAByCategory = "CPA_ByCategory"
    case fixedGlobal = "Fixed_Global"
}

/// Indicate the default configuration of the cost on this channel.
public struct ChannelCostSettings: Codable {
    /// CPC means cost per click.
    /// CPA means cost per action.
    /// You can have CPC/CPA with a global cost value.
    /// You can have CPC/CPA by category the cost value MUST be null
    /// You can have global fixed price.
    ///
    /// Example: "Fixed_Global"
    public var costType: CostType
    /// In case of global cost type, you have to indicate the cost value.
    ///
    /// Example: 10.21
    public var globalCostValue: Double?

    public init(costType: CostType, globalCostValue: Double? = nil) {
        self.costType = costType
        self.globalCostValue = globalCostValue
    }
}

/// If this property is not indicated please force the user to configure the cost settings.
/// Defines the cost type you have on this channel with the cost value.
public struct CostSettings: Codable {
    /// CPC means cost per click.
    /// CPA means cost per action.
    /// You can have CPC/CPA with a global cost value.
    /// You can have CPC/CPA by category the cost value MUST be null
    /// You can have global fixed price.
    ///
    /// Example: "Fixed_Global"
    public var costType: CostType
    /// In case of global cost type, you have to indicate the cost value.
    ///
    /// Example: 10.21
    public var globalCostValue: Double?

    public init(costType: CostType, globalCostValue: Double? = nil) {
        self.costType = costType
        self.globalCostValue = globalCostValue
    }
}

/// The request message to unmap a catalog category path to a channel category path
public struct UnmapCategoryRequest: Codable {
    /// The catalog category path
    ///
    /// Example: ["Vêtements", "Femmes", "Chaussures"]
    public var catalogCategoryPath: [String]

    public init(catalogCategoryPath: [String]) {
        self.catalogCategoryPath = catalogCategoryPath
    }
}

/// The request message to make a mapping between catalog category path and a channel category path
public struct ConfigureCategoryRequest: Codable {
    /// Great feature! In case of mapping to parent channel category, you can ask to override the mapping of all sub channel category to this catalog category path
    ///
    /// Example: true
    public var isOverrideSubCategoryMappings: Bool
    public var channelCatalogCategories: [ChannelCatalogCategoryConfiguration]

    public init(isOverrideSubCategoryMappings: Bool, channelCatalogCategories: [ChannelCatalogCategoryConfiguration]) {
        self.isOverrideSubCategoryMappings = isOverrideSubCategoryMappings
        self.channelCatalogCategories = channelCatalogCategories
    }

    private enum CodingKeys: String, CodingKey {
        case isOverrideSubCategoryMappings = "overrideSubCategoryMappings"
        case channelCatalogCategories
    }
}

/// The action you can do on the category mappings
public struct ChannelCatalogCategoryMappingsLinks: Codable {
    public var this: BeezUPCommonLink3
    public var disable: BeezUPCommonLink3?
    public var reenable: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3, disable: BeezUPCommonLink3? = nil, reenable: BeezUPCommonLink3? = nil) {
        self.this = this
        self.disable = disable
        self.reenable = reenable
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case disable
        case reenable
    }
}

public struct ChannelCatalogCategoryConfigurationList: Codable {
    /// The action you can do on the category mappings
    public var links: ChannelCatalogCategoryMappingsLinks
    public var channelCatalogCategoryConfigurations: [ChannelCatalogCategoryConfigurationInfo]
    /// Example: "required"
    public var mappingStatus: MappingStatus
    /// Example: "required"
    public var costStatus: CostStatus

    public init(links: ChannelCatalogCategoryMappingsLinks, channelCatalogCategoryConfigurations: [ChannelCatalogCategoryConfigurationInfo], mappingStatus: MappingStatus, costStatus: CostStatus) {
        self.links = links
        self.channelCatalogCategoryConfigurations = channelCatalogCategoryConfigurations
        self.mappingStatus = mappingStatus
        self.costStatus = costStatus
    }
}

/// Example: "required"
public enum MappingStatus: String, Codable, CaseIterable {
    case required
    case optional
    case notConfigurable
}

/// Example: "required"
public enum CostStatus: String, Codable, CaseIterable {
    case required
    case optional
    case notConfigurable
}

public struct ChannelCatalogCategoryMappingInfoLinks: Codable {
    public var configureCategories: BeezUPCommonLink3?

    public init(configureCategories: BeezUPCommonLink3? = nil) {
        self.configureCategories = configureCategories
    }
}

/// For all catalog categories the current mapping applied
public struct ChannelCatalogCategoryConfigurationInfo: Codable {
    public var links: ChannelCatalogCategoryMappingInfoLinks
    /// The catalog category path
    ///
    /// Example: ["Vêtements", "Femmes", "Chaussures"]
    public var catalogCategoryPath: [String]
    /// The channel category path
    ///
    /// Example: ["Clothing", "Women", "Shoes"]
    public var channelCategoryPath: [String]?
    /// In case of CPC_ByCategory or CPA_ByCategory cost type, you have to indicate the cost value.
    ///
    /// Example: 10.21
    public var costValue: Double?

    public init(links: ChannelCatalogCategoryMappingInfoLinks, catalogCategoryPath: [String], channelCategoryPath: [String]? = nil, costValue: Double? = nil) {
        self.links = links
        self.catalogCategoryPath = catalogCategoryPath
        self.channelCategoryPath = channelCategoryPath
        self.costValue = costValue
    }
}

/// Represent a mapping between a catalog category path and a channel category path.
/// The cost on this mapping can be applied.
public struct ChannelCatalogCategoryConfiguration: Codable {
    /// Great feature! In case of mapping to parent catalog category, you can ask to automatically map new sub catalog category in the next importation to this channel category path.
    ///
    /// Example: true
    public var isAutoMapNewSubCategories: Bool
    /// The catalog category path
    ///
    /// Example: ["Vêtements", "Femmes", "Chaussures"]
    public var catalogCategoryPath: [String]
    /// The channel category path
    ///
    /// Example: ["Clothing", "Women", "Shoes"]
    public var channelCategoryPath: [String]?
    /// In case of CPC_ByCategory or CPA_ByCategory cost type, you have to indicate the cost value.
    ///
    /// Example: 10.21
    public var costValue: Double?

    public init(isAutoMapNewSubCategories: Bool, catalogCategoryPath: [String], channelCategoryPath: [String]? = nil, costValue: Double? = nil) {
        self.isAutoMapNewSubCategories = isAutoMapNewSubCategories
        self.catalogCategoryPath = catalogCategoryPath
        self.channelCategoryPath = channelCategoryPath
        self.costValue = costValue
    }

    private enum CodingKeys: String, CodingKey {
        case isAutoMapNewSubCategories = "autoMapNewSubCategories"
        case catalogCategoryPath
        case channelCategoryPath
        case costValue
    }
}

public struct ChannelCatalogColumnMappingWithName: Codable {
    /// Represent a mapping between a channel column (considering channel category mapping) and a catalog column
    public var channelCatalogColumnMapping: ChannelCatalogColumnMapping
    /// The channel column name
    ///
    /// Example: "NAME"
    public var channelColumnName: String
    /// The BeezUP column name
    ///
    /// Example: "CategoryFirstLevel"
    public var channelBeezUPColumnName: String?
    /// The catalog column named by the user (catalog or custom column)
    ///
    /// Example: "My title"
    public var catalogColumnName: String?
    /// The BeezUP column name
    ///
    /// Example: "CategoryFirstLevel"
    public var catalogBeezUPColumnName: String?

    public init(channelCatalogColumnMapping: ChannelCatalogColumnMapping, channelColumnName: String, channelBeezUPColumnName: String? = nil, catalogColumnName: String? = nil, catalogBeezUPColumnName: String? = nil) {
        self.channelCatalogColumnMapping = channelCatalogColumnMapping
        self.channelColumnName = channelColumnName
        self.channelBeezUPColumnName = channelBeezUPColumnName
        self.catalogColumnName = catalogColumnName
        self.catalogBeezUPColumnName = catalogBeezUPColumnName
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.channelCatalogColumnMapping = try ChannelCatalogColumnMapping(from: decoder)
        self.channelColumnName = try values.decode(String.self, forKey: "channelColumnName")
        self.channelBeezUPColumnName = try values.decodeIfPresent(String.self, forKey: "channelBeezUPColumnName")
        self.catalogColumnName = try values.decodeIfPresent(String.self, forKey: "catalogColumnName")
        self.catalogBeezUPColumnName = try values.decodeIfPresent(String.self, forKey: "catalogBeezUPColumnName")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(channelCatalogColumnMapping, forKey: "channelCatalogColumnMapping")
        try values.encode(channelColumnName, forKey: "channelColumnName")
        try values.encodeIfPresent(channelBeezUPColumnName, forKey: "channelBeezUPColumnName")
        try values.encodeIfPresent(catalogColumnName, forKey: "catalogColumnName")
        try values.encodeIfPresent(catalogBeezUPColumnName, forKey: "catalogBeezUPColumnName")
    }
}

/// Represent a mapping between a channel column (considering channel category mapping) and a catalog column
public struct ChannelCatalogColumnMapping: Codable {
    /// The channel column identifier
    ///
    /// Example: "8a76f06a-fefc-4c0d-bcfe-b210f1482977"
    public var channelColumnID: String
    /// The channel category path
    ///
    /// Example: ["Clothing", "Women", "Shoes"]
    public var channelCategoryPath: [String]?
    /// The catalog column identifier (catalog or custom column)
    ///
    /// Example: "bea7c21e-948b-4ac3-9ffd-4396e62c4163"
    public var catalogColumnID: String?

    public init(channelColumnID: String, channelCategoryPath: [String]? = nil, catalogColumnID: String? = nil) {
        self.channelColumnID = channelColumnID
        self.channelCategoryPath = channelCategoryPath
        self.catalogColumnID = catalogColumnID
    }

    private enum CodingKeys: String, CodingKey {
        case channelColumnID = "channelColumnId"
        case channelCategoryPath
        case catalogColumnID = "catalogColumnId"
    }
}

/// The message contains the offer identifier required to execute this operation
public struct UpgradeOfferRequired: Codable {
    /// The offer identifier required
    public var offerID: Int

    public init(offerID: Int) {
        self.offerID = offerID
    }

    private enum CodingKeys: String, CodingKey {
        case offerID = "offerId"
    }
}

/// Channel Catalog State
public struct ChannelCatalogState: Codable {
    /// Example: 101
    public var exportedProductCount: Int
    /// Example: "success"
    public var columnMappingStatus: ColumnMappingStatus
    /// The category mapping state of the channel catalog
    public var categoryMappingState: CategoryMappingState
    /// Example: "success"
    public var apiSettingsStatus: BeezUPCommonAPISettingsStatus?

    public init(exportedProductCount: Int, columnMappingStatus: ColumnMappingStatus, categoryMappingState: CategoryMappingState, apiSettingsStatus: BeezUPCommonAPISettingsStatus? = nil) {
        self.exportedProductCount = exportedProductCount
        self.columnMappingStatus = columnMappingStatus
        self.categoryMappingState = categoryMappingState
        self.apiSettingsStatus = apiSettingsStatus
    }
}

/// Example: "success"
public enum ColumnMappingStatus: String, Codable, CaseIterable {
    case warning
    case success
    case failed
}

/// The category mapping state of the channel catalog
public struct CategoryMappingState: Codable {
    /// Example: "success"
    public var status: CategoryMappingStatus?
    /// Indicates the uncategorized product count
    ///
    /// Example: 101
    public var uncategorizedProductCount: Int?
    /// Indicates the count of products without cost defined
    ///
    /// Example: 42
    public var withoutCategoryCostProductCount: Int?

    public init(status: CategoryMappingStatus? = nil, uncategorizedProductCount: Int? = nil, withoutCategoryCostProductCount: Int? = nil) {
        self.status = status
        self.uncategorizedProductCount = uncategorizedProductCount
        self.withoutCategoryCostProductCount = withoutCategoryCostProductCount
    }
}

/// Example: "success"
public enum CategoryMappingStatus: String, Codable, CaseIterable {
    case warning
    case success
    case failed
}

public struct ChannelCategorySettings: Codable {
    /// Indicates if the category mapping is required, otherwise you can map the categories but it will not block the publication of your catalog
    ///
    /// Example: true
    public var isMappingRequired: Bool?
    /// Indicates if the category mapping is required on category path leaf or not
    ///
    /// Example: true
    public var isMappingLeafRequired: Bool?

    public init(isMappingRequired: Bool? = nil, isMappingLeafRequired: Bool? = nil) {
        self.isMappingRequired = isMappingRequired
        self.isMappingLeafRequired = isMappingLeafRequired
    }

    private enum CodingKeys: String, CodingKey {
        case isMappingRequired = "mappingRequired"
        case isMappingLeafRequired = "mappingLeafRequired"
    }
}

public struct ChannelCatalogCategoryMappingSettings: Codable {
    /// Optional parameter. Indicates that you have decided to do not map your categories with the channel's categories.
    ///
    /// Example: false
    public var isCategoryMappingDisabledByMerchant: Bool?

    public init(isCategoryMappingDisabledByMerchant: Bool? = nil) {
        self.isCategoryMappingDisabledByMerchant = isCategoryMappingDisabledByMerchant
    }

    private enum CodingKeys: String, CodingKey {
        case isCategoryMappingDisabledByMerchant = "categoryMappingDisabledByMerchant"
    }
}

public struct ChannelCatalog: Codable {
    /// The basic info related to a channel
    public var beezUPCommonChannelBasicInfo: BeezUPCommonChannelBasicInfo
    /// Indicates if the channel catalog is enable
    ///
    /// Example: true
    public var isEnabled: Bool
    /// Indicates if this channel catalog is related to a marketplace
    ///
    /// Example: true
    public var isMarketplace: Bool
    /// The channel catalog identifier
    ///
    /// Example: "6d6b04de-406b-4539-8e7e-bf3e8da5dfb0"
    public var channelCatalogID: String
    /// The store identifier
    ///
    /// Example: "64f43358-63a1-47f7-97ec-0301fc39956b"
    public var storeID: String
    /// Represents the general settings of your channel catalog
    public var generalSettings: GeneralSettings
    /// Indicate the default configuration of the cost on this channel.
    public var channelCostSettings: ChannelCostSettings
    public var channelCategorySettings: ChannelCategorySettings
    /// If this property is not indicated please force the user to configure the cost settings.
    /// Defines the cost type you have on this channel with the cost value.
    public var costSettings: CostSettings?
    public var categoryMappingSettings: ChannelCatalogCategoryMappingSettings?
    /// The column mapping list between a channel and a catalog
    public var columnMappings: [ChannelCatalogColumnMappingWithName]?
    /// The exclusion filter list
    public var exclusionFilters: [ExclusionFilter]?
    /// The URL <a href="https://en.wikipedia.org/wiki/URL">https://en.wikipedia.org/wiki/URL</a>
    ///
    /// Example: "http://www.mydomain.com"
    public var exportURL: String?
    /// Channel Catalog State
    public var state: ChannelCatalogState
    /// The channel type list related to the channel
    ///
    /// Example: ["Marketplace"]
    public var types: [String]
    /// Indicates the actions you can do on a channel catalog
    public var links: ChannelCatalogLinks

    public init(beezUPCommonChannelBasicInfo: BeezUPCommonChannelBasicInfo, isEnabled: Bool, isMarketplace: Bool, channelCatalogID: String, storeID: String, generalSettings: GeneralSettings, channelCostSettings: ChannelCostSettings, channelCategorySettings: ChannelCategorySettings, costSettings: CostSettings? = nil, categoryMappingSettings: ChannelCatalogCategoryMappingSettings? = nil, columnMappings: [ChannelCatalogColumnMappingWithName]? = nil, exclusionFilters: [ExclusionFilter]? = nil, exportURL: String? = nil, state: ChannelCatalogState, types: [String], links: ChannelCatalogLinks) {
        self.beezUPCommonChannelBasicInfo = beezUPCommonChannelBasicInfo
        self.isEnabled = isEnabled
        self.isMarketplace = isMarketplace
        self.channelCatalogID = channelCatalogID
        self.storeID = storeID
        self.generalSettings = generalSettings
        self.channelCostSettings = channelCostSettings
        self.channelCategorySettings = channelCategorySettings
        self.costSettings = costSettings
        self.categoryMappingSettings = categoryMappingSettings
        self.columnMappings = columnMappings
        self.exclusionFilters = exclusionFilters
        self.exportURL = exportURL
        self.state = state
        self.types = types
        self.links = links
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.beezUPCommonChannelBasicInfo = try BeezUPCommonChannelBasicInfo(from: decoder)
        self.isEnabled = try values.decode(Bool.self, forKey: "enabled")
        self.isMarketplace = try values.decode(Bool.self, forKey: "isMarketplace")
        self.channelCatalogID = try values.decode(String.self, forKey: "channelCatalogId")
        self.storeID = try values.decode(String.self, forKey: "storeId")
        self.generalSettings = try GeneralSettings(from: decoder)
        self.channelCostSettings = try ChannelCostSettings(from: decoder)
        self.channelCategorySettings = try ChannelCategorySettings(from: decoder)
        self.costSettings = try CostSettings(from: decoder)
        self.categoryMappingSettings = try ChannelCatalogCategoryMappingSettings(from: decoder)
        self.columnMappings = try values.decodeIfPresent([ChannelCatalogColumnMappingWithName].self, forKey: "columnMappings")
        self.exclusionFilters = try values.decodeIfPresent([ExclusionFilter].self, forKey: "exclusionFilters")
        self.exportURL = try values.decodeIfPresent(String.self, forKey: "exportUrl")
        self.state = try ChannelCatalogState(from: decoder)
        self.types = try values.decode([String].self, forKey: "types")
        self.links = try ChannelCatalogLinks(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(beezUPCommonChannelBasicInfo, forKey: "beezUPCommonChannelBasicInfo")
        try values.encode(isEnabled, forKey: "enabled")
        try values.encode(isMarketplace, forKey: "isMarketplace")
        try values.encode(channelCatalogID, forKey: "channelCatalogId")
        try values.encode(storeID, forKey: "storeId")
        try values.encode(generalSettings, forKey: "generalSettings")
        try values.encode(channelCostSettings, forKey: "channelCostSettings")
        try values.encode(channelCategorySettings, forKey: "channelCategorySettings")
        try values.encodeIfPresent(costSettings, forKey: "costSettings")
        try values.encodeIfPresent(categoryMappingSettings, forKey: "categoryMappingSettings")
        try values.encodeIfPresent(columnMappings, forKey: "columnMappings")
        try values.encodeIfPresent(exclusionFilters, forKey: "exclusionFilters")
        try values.encodeIfPresent(exportURL, forKey: "exportUrl")
        try values.encode(state, forKey: "state")
        try values.encode(types, forKey: "types")
        try values.encode(links, forKey: "links")
    }
}

/// Indicates the actions you can do on a channel catalog
public struct ChannelCatalogLinks: Codable {
    public var this: BeezUPCommonLink3
    public var delete: BeezUPCommonLink3?
    public var enable: BeezUPCommonLink3?
    public var disable: BeezUPCommonLink3?
    public var configureGeneralSettings: BeezUPCommonLink3?
    public var configureCostSettings: BeezUPCommonLink3?
    public var configureColumnMappings: BeezUPCommonLink3?
    public var reenableCategoryMappings: BeezUPCommonLink3?
    public var disableCategoryMappings: BeezUPCommonLink3?
    public var categoryMappings: BeezUPCommonLink3?
    public var exclusionFilters: BeezUPCommonLink3?
    public var products: BeezUPCommonLink3?
    public var exportationCacheInfo: BeezUPCommonLink3?
    public var marketplaceSettings: BeezUPCommonLink3?
    public var channelInfo: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3, delete: BeezUPCommonLink3? = nil, enable: BeezUPCommonLink3? = nil, disable: BeezUPCommonLink3? = nil, configureGeneralSettings: BeezUPCommonLink3? = nil, configureCostSettings: BeezUPCommonLink3? = nil, configureColumnMappings: BeezUPCommonLink3? = nil, reenableCategoryMappings: BeezUPCommonLink3? = nil, disableCategoryMappings: BeezUPCommonLink3? = nil, categoryMappings: BeezUPCommonLink3? = nil, exclusionFilters: BeezUPCommonLink3? = nil, products: BeezUPCommonLink3? = nil, exportationCacheInfo: BeezUPCommonLink3? = nil, marketplaceSettings: BeezUPCommonLink3? = nil, channelInfo: BeezUPCommonLink3? = nil) {
        self.this = this
        self.delete = delete
        self.enable = enable
        self.disable = disable
        self.configureGeneralSettings = configureGeneralSettings
        self.configureCostSettings = configureCostSettings
        self.configureColumnMappings = configureColumnMappings
        self.reenableCategoryMappings = reenableCategoryMappings
        self.disableCategoryMappings = disableCategoryMappings
        self.categoryMappings = categoryMappings
        self.exclusionFilters = exclusionFilters
        self.products = products
        self.exportationCacheInfo = exportationCacheInfo
        self.marketplaceSettings = marketplaceSettings
        self.channelInfo = channelInfo
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case delete
        case enable
        case disable
        case configureGeneralSettings
        case configureCostSettings
        case configureColumnMappings
        case reenableCategoryMappings
        case disableCategoryMappings
        case categoryMappings
        case exclusionFilters
        case products
        case exportationCacheInfo
        case marketplaceSettings
        case channelInfo
    }
}

public struct ProductOverrideWithCatalogValue: Codable {
    /// The overridden product value
    ///
    /// Example: "Sony bravia"
    public var override: String
    /// The catalog product value
    ///
    /// Example: "Sony"
    public var catalogValue: String?

    public init(override: String, catalogValue: String? = nil) {
        self.override = override
        self.catalogValue = catalogValue
    }
}

public struct ExclusionFiltersResponseLinks: Codable {
    public var this: BeezUPCommonLink3
    public var configure: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3, configure: BeezUPCommonLink3? = nil) {
        self.this = this
        self.configure = configure
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case configure
    }
}

public struct ExclusionFiltersResponse: Codable {
    public var links: ExclusionFiltersResponseLinks
    /// The exclusion filter list
    public var exclusionFilters: [ExclusionFilter]?

    public init(links: ExclusionFiltersResponseLinks, exclusionFilters: [ExclusionFilter]? = nil) {
        self.links = links
        self.exclusionFilters = exclusionFilters
    }
}

/// The exclusion filter
public struct ExclusionFilter: Codable {
    /// The exclusion filter name
    ///
    /// Example: "Exclude sony products"
    public var name: String
    /// The position of the exclusion filter
    public var position: Int
    /// Indicate the filter's group. All filters in the same group means an "AND" operation in the filter group
    ///
    /// Example: "d9833f4b-718a-436f-bab5-89da3d21bf60"
    public var groupID: String
    /// Indicate the filter group position. This information is used for the UI purpose and must be unique in the filter group.
    public var positionInGroup: Int
    /// The channel column identifier
    ///
    /// Example: "8a76f06a-fefc-4c0d-bcfe-b210f1482977"
    public var channelColumnID: String
    /// The exclusion filter operator name
    ///
    /// Example: "Contains"
    public var operatorName: String
    /// The value indicate by the user when the filter operation requires it.
    ///
    /// Example: "sony"
    public var value: String?
    /// Indicates if the filter is currently enable.
    ///
    /// Example: true
    public var isEnabled: Bool

    public init(name: String, position: Int, groupID: String, positionInGroup: Int, channelColumnID: String, operatorName: String, value: String? = nil, isEnabled: Bool) {
        self.name = name
        self.position = position
        self.groupID = groupID
        self.positionInGroup = positionInGroup
        self.channelColumnID = channelColumnID
        self.operatorName = operatorName
        self.value = value
        self.isEnabled = isEnabled
    }

    private enum CodingKeys: String, CodingKey {
        case name
        case position
        case groupID = "groupId"
        case positionInGroup
        case channelColumnID = "channelColumnId"
        case operatorName
        case value
        case isEnabled = "enabled"
    }
}

/// Data type of the operator
///
/// Example: "string"
public enum FilterOperatorDataType: String, Codable, CaseIterable {
    case string
    case number
}

/// The filter operator
public struct FilterOperator: Codable {
    /// The exclusion filter operator name
    ///
    /// Example: "Contains"
    public var name: String?
    /// Data type of the operator
    ///
    /// Example: "string"
    public var expectedChannelColumnDataType: FilterOperatorDataType?
    /// This operator requires a value
    ///
    /// Example: true
    public var isValueRequired: Bool?
    /// Data type of the operator
    ///
    /// Example: "string"
    public var expectedValueDataType: FilterOperatorDataType?

    public init(name: String? = nil, expectedChannelColumnDataType: FilterOperatorDataType? = nil, isValueRequired: Bool? = nil, expectedValueDataType: FilterOperatorDataType? = nil) {
        self.name = name
        self.expectedChannelColumnDataType = expectedChannelColumnDataType
        self.isValueRequired = isValueRequired
        self.expectedValueDataType = expectedValueDataType
    }

    private enum CodingKeys: String, CodingKey {
        case name
        case expectedChannelColumnDataType
        case isValueRequired = "valueRequired"
        case expectedValueDataType
    }
}

/// Indicate how you want to combine the filters:
/// * funnel: You will get the products which meet at least one of the product set criterion. The criteria are applied in the following order:
///   - categorization
///   - exclusion filters
///   - deactivations
/// * cumulative: You will get the products which have all the product set criteria
public enum ProductSetVisibilityCriteriaLogicType: String, Codable, CaseIterable {
    case funnel
    case cumulative
}

public struct ProductSetVisibilityCriteria: Codable {
    /// Indicate how you want to combine the filters:
    /// * funnel: You will get the products which meet at least one of the product set criterion. The criteria are applied in the following order:
    ///   - categorization
    ///   - exclusion filters
    ///   - deactivations
    /// * cumulative: You will get the products which have all the product set criteria
    public var logic: ProductSetVisibilityCriteriaLogicType
    /// If false, search for products absent from the current catalog. If true, search for products currently in the catalog. If null the filter will not be taken in account.
    ///
    /// Example: true
    public var isExist: Bool?
    /// Search product WITHOUT category mapped with the channel. If null the filter will not be taken in account.
    ///
    /// Example: false
    public var isUncategorized: Bool?
    /// Search excluded products by at least an exclusion filter. If null the filter will not be taken in account.
    ///
    /// Example: false
    public var isExcluded: Bool?
    /// Search disabled products. If null the filter will not be taken in account.
    ///
    /// Example: false
    public var isDisabled: Bool?

    public init(logic: ProductSetVisibilityCriteriaLogicType, isExist: Bool? = nil, isUncategorized: Bool? = nil, isExcluded: Bool? = nil, isDisabled: Bool? = nil) {
        self.logic = logic
        self.isExist = isExist
        self.isUncategorized = isUncategorized
        self.isExcluded = isExcluded
        self.isDisabled = isDisabled
    }

    private enum CodingKeys: String, CodingKey {
        case logic
        case isExist = "exist"
        case isUncategorized = "uncategorized"
        case isExcluded = "excluded"
        case isDisabled = "disabled"
    }
}

public struct GetChannelCatalogProductInfoListRequest: Codable {
    public var pageNumber: Int
    /// Example: 100
    public var pageSize: Int
    public var criteria: ProductSetVisibilityCriteria
    /// Search overridden products. If null the filter will not be taken in account.
    ///
    /// Example: true
    public var isOverridden: Bool?
    public var productFilters: ChannelCatalogProductFilters?
    public var catalogCategoryFilter: BeezUPCommonCatalogCategoryFilter?
    public var channelCategoryFilter: BeezUPCommonChannelCategoryFilter?

    public init(pageNumber: Int, pageSize: Int, criteria: ProductSetVisibilityCriteria, isOverridden: Bool? = nil, productFilters: ChannelCatalogProductFilters? = nil, catalogCategoryFilter: BeezUPCommonCatalogCategoryFilter? = nil, channelCategoryFilter: BeezUPCommonChannelCategoryFilter? = nil) {
        self.pageNumber = pageNumber
        self.pageSize = pageSize
        self.criteria = criteria
        self.isOverridden = isOverridden
        self.productFilters = productFilters
        self.catalogCategoryFilter = catalogCategoryFilter
        self.channelCategoryFilter = channelCategoryFilter
    }

    private enum CodingKeys: String, CodingKey {
        case pageNumber
        case pageSize
        case criteria
        case isOverridden = "overridden"
        case productFilters
        case catalogCategoryFilter
        case channelCategoryFilter
    }
}

public struct ChannelCatalogProductFilters: Codable {
    /// The catalog product SKU filter (multiple values)
    public var catalogSkus: [String]?
    /// The catalog product EAN filter (multiple values)
    public var catalogEans: [String]?
    /// The catalog product MPN filter (multiple values)
    public var catalogMpns: [String]?
    /// The channel product SKU filter (multiple values)
    public var channelSkus: [String]?
    /// The channel product EAN filter (multiple values)
    public var channelEans: [String]?
    /// The channel product MPN filter (multiple values)
    public var channelMpns: [String]?
    /// The product title filter
    ///
    /// Example: "Refrigérateur"
    public var title: String?
    /// Describe a filter on a product's column.
    /// The key is the column identifier of your catalog or a custom column.
    public var additionalProductFilters: [String: BeezUPCommonAdditionalProductFiltersValue]?

    public init(catalogSkus: [String]? = nil, catalogEans: [String]? = nil, catalogMpns: [String]? = nil, channelSkus: [String]? = nil, channelEans: [String]? = nil, channelMpns: [String]? = nil, title: String? = nil, additionalProductFilters: [String: BeezUPCommonAdditionalProductFiltersValue]? = nil) {
        self.catalogSkus = catalogSkus
        self.catalogEans = catalogEans
        self.catalogMpns = catalogMpns
        self.channelSkus = channelSkus
        self.channelEans = channelEans
        self.channelMpns = channelMpns
        self.title = title
        self.additionalProductFilters = additionalProductFilters
    }
}

/// The channel catalog products counters. For each counter you will have a count.
public struct ChannelCatalogProductsCounters: Codable {
    /// Imported product count currently in your catalog.
    ///
    /// Example: 1000
    public var existingProductCount: Int?
    /// Product count WITHOUT category mapped on existing products.
    ///
    /// Example: 250
    public var uncategorizedProductCount: Int?
    /// Disabled product count INCLUDING uncategorized products on existing products.
    ///
    /// Example: 169
    public var disabledProductCountIncludingUncategorized: Int?
    /// Disabled product count EXCLUDING uncategorized products on existing products.
    ///
    /// Example: 150
    public var disabledProductCountExcludingUncategorized: Int?
    /// Excluded product count INCLUDING uncategorized products AND disabled products on existing products.
    ///
    /// Example: 66
    public var excludedProductCountIncludingUncategorizedAndDisabled: Int?
    /// Excluded product count EXCLUDING uncategorized products AND disabled products on existing products.
    ///
    /// Example: 50
    public var excludedProductCountExcludingUncategorizedAndDisabled: Int?

    public init(existingProductCount: Int? = nil, uncategorizedProductCount: Int? = nil, disabledProductCountIncludingUncategorized: Int? = nil, disabledProductCountExcludingUncategorized: Int? = nil, excludedProductCountIncludingUncategorizedAndDisabled: Int? = nil, excludedProductCountExcludingUncategorizedAndDisabled: Int? = nil) {
        self.existingProductCount = existingProductCount
        self.uncategorizedProductCount = uncategorizedProductCount
        self.disabledProductCountIncludingUncategorized = disabledProductCountIncludingUncategorized
        self.disabledProductCountExcludingUncategorized = disabledProductCountExcludingUncategorized
        self.excludedProductCountIncludingUncategorizedAndDisabled = excludedProductCountIncludingUncategorizedAndDisabled
        self.excludedProductCountExcludingUncategorizedAndDisabled = excludedProductCountExcludingUncategorizedAndDisabled
    }
}

public struct ChannelCatalogProductInfoListLinks: Codable {
    public var this: BeezUPCommonLink3
    public var export: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3, export: BeezUPCommonLink3? = nil) {
        self.this = this
        self.export = export
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case export
    }
}

/// The channel catalog product info list
public struct ChannelCatalogProductInfoList: Codable {
    /// Example:
    ///
    /// {
    ///   "entryCount" : "25",
    ///   "links" : {
    ///     "first" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "1",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "last" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "38",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "next" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "2",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     }
    ///   },
    ///   "pageCount" : "38",
    ///   "totalEntryCount" : "943"
    /// }
    public var paginationResult: BeezUPCommonPaginationResult
    public var links: ChannelCatalogProductInfoListLinks
    public var productInfos: [ChannelCatalogProductInfo]

    public init(paginationResult: BeezUPCommonPaginationResult, links: ChannelCatalogProductInfoListLinks, productInfos: [ChannelCatalogProductInfo]) {
        self.paginationResult = paginationResult
        self.links = links
        self.productInfos = productInfos
    }
}

public struct ChannelCatalogProductInfo: Codable {
    /// The basic information related to a product
    public var beezUPCommonProductBasicInfo: BeezUPCommonProductBasicInfo
    /// The key is the channel column identifier
    ///
    /// Example:
    ///
    /// {
    ///   "0EA21509-1141-57BD-B679-371BC98B2ADA" : {
    ///     "catalogValue" : "http:\/\/www.toto.com\/thing\/images\/cache\/ldldld.jpg",
    ///     "override" : "http:\/\/www.blalbla.nl\/images\/cache\/ldldld.jpg"
    ///   },
    ///   "2A77749D-0AAB-5245-89B5-6A1A4E06DACA" : {
    ///     "catalogValue" : "http:\/\/www.toto.com\/thing\/images\/cache\/dldldl.jpg",
    ///     "override" : "http:\/\/www.blalbla.nl\/images\/cache\/dldldl.jpg"
    ///   },
    ///   "8a76f06a-fefc-4c0d-bcfe-b210f1482977" : {
    ///     "catalogValue" : "x235",
    ///     "override" : "3563"
    ///   },
    ///   "54B3B3CB-5CA5-5471-9DAE-5310C032059A" : {
    ///     "catalogValue" : "http:\/\/www.toto.com\/thing\/cache\/dlmdl.jpg",
    ///     "override" : "http:\/\/www.blalbla.nl\/images\/cache\/dlmdl.jpg"
    ///   },
    ///   "57F70E81-E4F2-5034-BC65-E1D5C48EBEDA" : {
    ///     "catalogValue" : "Sony",
    ///     "override" : "Sony bravia"
    ///   },
    ///   "B7B79A0B-A8DE-54DA-964C-E2704DF3738A" : {
    ///     "catalogValue" : "x_ezlSHBELNL56",
    ///     "override" : "SHBELNL56"
    ///   }
    /// }
    public var overrides: [String: ProductOverrideWithCatalogValue]
    /// Indicates if the product has been disabled or not
    ///
    /// Example: false
    public var isDisabled: Bool
    /// Indicates if the product's category has been NOT mapped to a channel category
    ///
    /// Example: true
    public var isUncategorized: Bool
    /// Indicates if the product has been excluded by a exclusion filter
    ///
    /// Example: true
    public var isExcluded: Bool
    /// Example: ["Exclude sony products"]
    public var excludedBy: [String]?
    /// Indicates the differents actions you can do on a channel product
    public var links: ChannelCatalogProductInfoLinks

    public init(beezUPCommonProductBasicInfo: BeezUPCommonProductBasicInfo, overrides: [String: ProductOverrideWithCatalogValue], isDisabled: Bool, isUncategorized: Bool, isExcluded: Bool, excludedBy: [String]? = nil, links: ChannelCatalogProductInfoLinks) {
        self.beezUPCommonProductBasicInfo = beezUPCommonProductBasicInfo
        self.overrides = overrides
        self.isDisabled = isDisabled
        self.isUncategorized = isUncategorized
        self.isExcluded = isExcluded
        self.excludedBy = excludedBy
        self.links = links
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.beezUPCommonProductBasicInfo = try BeezUPCommonProductBasicInfo(from: decoder)
        self.overrides = try values.decode([String: ProductOverrideWithCatalogValue].self, forKey: "overrides")
        self.isDisabled = try values.decode(Bool.self, forKey: "disabled")
        self.isUncategorized = try values.decode(Bool.self, forKey: "uncategorized")
        self.isExcluded = try values.decode(Bool.self, forKey: "excluded")
        self.excludedBy = try values.decodeIfPresent([String].self, forKey: "excludedBy")
        self.links = try ChannelCatalogProductInfoLinks(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(beezUPCommonProductBasicInfo, forKey: "beezUPCommonProductBasicInfo")
        try values.encode(overrides, forKey: "overrides")
        try values.encode(isDisabled, forKey: "disabled")
        try values.encode(isUncategorized, forKey: "uncategorized")
        try values.encode(isExcluded, forKey: "excluded")
        try values.encodeIfPresent(excludedBy, forKey: "excludedBy")
        try values.encode(links, forKey: "links")
    }
}

/// Indicates the differents actions you can do on a channel product
public struct ChannelCatalogProductInfoLinks: Codable {
    public var this: BeezUPCommonLink3
    public var override: BeezUPCommonLink3
    public var disable: BeezUPCommonLink3?
    public var reenable: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3, override: BeezUPCommonLink3, disable: BeezUPCommonLink3? = nil, reenable: BeezUPCommonLink3? = nil) {
        self.this = this
        self.override = override
        self.disable = disable
        self.reenable = reenable
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case override
        case disable
        case reenable
    }
}

public struct ChannelCatalogProductByChannelCatalogRequest: Codable {
    /// The store identifier
    ///
    /// Example: "64f43358-63a1-47f7-97ec-0301fc39956b"
    public var storeID: String
    /// The product identifier
    ///
    /// Example: "578419df-1bbf-41a6-96fa-862e42182b67"
    public var productID: String
    /// The list of channel catalog identifier
    public var channelCatalogIDs: [String]

    public init(storeID: String, productID: String, channelCatalogIDs: [String]) {
        self.storeID = storeID
        self.productID = productID
        self.channelCatalogIDs = channelCatalogIDs
    }

    private enum CodingKeys: String, CodingKey {
        case storeID = "storeId"
        case productID = "productId"
        case channelCatalogIDs = "channelCatalogIds"
    }
}

public struct ChannelCatalogProductByChannelCatalogResponse: Codable {
    /// The channel catalog product by channel catalog. The key is the channel catalog identifier
    public var channelCatalogs: [String: ChannelCatalogProductInfo]?

    public init(channelCatalogs: [String: ChannelCatalogProductInfo]? = nil) {
        self.channelCatalogs = channelCatalogs
    }
}

public struct BeezUPCommonCatalogCategoryFilter: Codable {
    /// Indicates on which catalog category path you want to make the filter
    ///
    /// Example: ["Maison", "Chambre"]
    public var categoryPath: [String]?

    public init(categoryPath: [String]? = nil) {
        self.categoryPath = categoryPath
    }
}

public struct BeezUPCommonChannelCategoryFilter: Codable {
    /// Indicates on which channel category path you want to make the filter
    ///
    /// Example: ["Home", "Bedroom"]
    public var categoryPath: [String]?

    public init(categoryPath: [String]? = nil) {
        self.categoryPath = categoryPath
    }
}

/// The basic info related to a channel
public struct BeezUPCommonChannelBasicInfo: Codable {
    /// The channel identifier
    ///
    /// Example: "2dc136a7-0d3d-4cc9-a825-a28a42c53e28"
    public var channelID: String
    /// The channel name
    ///
    /// Example: "Amazon FRA"
    public var channelName: String
    /// The URL <a href="https://en.wikipedia.org/wiki/URL">https://en.wikipedia.org/wiki/URL</a>
    ///
    /// Example: "http://www.mydomain.com"
    public var channelImageURL: String

    public init(channelID: String, channelName: String, channelImageURL: String) {
        self.channelID = channelID
        self.channelName = channelName
        self.channelImageURL = channelImageURL
    }

    private enum CodingKeys: String, CodingKey {
        case channelID = "channelId"
        case channelName
        case channelImageURL = "channelImageUrl"
    }
}

/// The basic information related to a product
public struct BeezUPCommonProductBasicInfo: Codable {
    /// The product identifier
    ///
    /// Example: "00000000-0000-0000-0000-000000000000"
    public var productID: String
    /// The product SKU
    ///
    /// Example: "SKU1234"
    public var productSku: String
    /// The product tile
    ///
    /// Example: "My supert product"
    public var productTitle: String
    /// The product image Url
    ///
    /// Example: "http://i2.cdscdn.com/pdt2/3/9/0/1/550x550/hai6901018043390/rw/haier-b20fwrss-refrigerateur-americain.jpg"
    public var productImageURL: URL?
    /// Indicates if the product still exists in your catalog
    ///
    /// Example: true
    public var isProductExists: Bool

    public init(productID: String, productSku: String, productTitle: String, productImageURL: URL? = nil, isProductExists: Bool) {
        self.productID = productID
        self.productSku = productSku
        self.productTitle = productTitle
        self.productImageURL = productImageURL
        self.isProductExists = isProductExists
    }

    private enum CodingKeys: String, CodingKey {
        case productID = "productId"
        case productSku
        case productTitle
        case productImageURL = "productImageUrl"
        case isProductExists = "productExists"
    }
}

/// Example: "success"
public enum BeezUPCommonAPISettingsStatus: String, Codable, CaseIterable {
    case warning
    case success
    case failed
}

/// Example:
///
/// {
///   "672644c7-5bd0-4e25-88c1-1f732bda5e4c" : {
///     "operatorName" : "GreaterTo",
///     "values" : [
///       "100"
///     ]
///   }
/// }
public struct BeezUPCommonAdditionalProductFiltersValue: Codable {
    /// Indicate the operator you want to make on the columnId
    public var operatorName: String?
    /// Must be null if the operator is "IsNull" or "IsNotNull".
    /// Can contains multiple value in case of "InList" operator. Otherwise a single value is expected.
    ///
    /// Example: ["My value"]
    public var values: [String]?

    public init(operatorName: String? = nil, values: [String]? = nil) {
        self.operatorName = operatorName
        self.values = values
    }
}

/// The Publication Type
///
/// Example: "PublishOffers"
public enum PublicationType: String, Codable, CaseIterable {
    case publishProducts = "PublishProducts"
    case publishOffers = "PublishOffers"
    case unpublish = "Unpublish"
}

/// The Feed Type
///
/// Example: "Offers"
public enum FeedType: String, Codable, CaseIterable {
    case products = "Products"
    case inventory = "Inventory"
    case pricing = "Pricing"
    case images = "Images"
    case relationships = "Relationships"
    case unpublish = "Unpublish"
    case offers = "Offers"
}

public struct AccountPublicationsLinks: Codable {
    public var this: BeezUPCommonLink3

    public init(this: BeezUPCommonLink3) {
        self.this = this
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
    }
}

/// The publication history for an account
public struct AccountPublications: Codable {
    public var links: AccountPublicationsLinks
    /// The recent publications for the requested account
    ///
    /// Example:
    ///
    /// [
    ///   {
    ///     "feeds" : [
    ///       {
    ///         "endUtcDate" : "2016-02-13T12:02:00Z",
    ///         "errorMessage" : null,
    ///         "exportedProducts" : "10142",
    ///         "failedItems" : "1",
    ///         "feedType" : "Offers",
    ///         "htmlReportGenerationErrorMessage" : null,
    ///         "htmlReportUrl" : "http:\/\/www.myreporthtml.com",
    ///         "processingStatus" : "Done",
    ///         "publishedItems" : "10041",
    ///         "publishedItemsWithWarning" : "123",
    ///         "startUtcDate" : "2016-02-13T12:01:11Z",
    ///         "transmittedItems" : "10042"
    ///       },
    ///       {
    ///         "endUtcDate" : "2016-02-13T12:02:00Z",
    ///         "errorMessage" : null,
    ///         "exportedProducts" : "10142",
    ///         "failedItems" : "1",
    ///         "feedType" : "Inventory",
    ///         "htmlReportGenerationErrorMessage" : null,
    ///         "htmlReportUrl" : "http:\/\/www.myreporthtml.com",
    ///         "processingStatus" : "Done",
    ///         "publishedItems" : "10041",
    ///         "publishedItemsWithWarning" : "123",
    ///         "startUtcDate" : "2016-02-13T12:01:11Z",
    ///         "transmittedItems" : "10042"
    ///       },
    ///       {
    ///         "errorMessage" : null,
    ///         "exportedProducts" : "10142",
    ///         "failedItems" : "1",
    ///         "feedType" : "Pricing",
    ///         "htmlReportGenerationErrorMessage" : null,
    ///         "htmlReportUrl" : "http:\/\/www.myreporthtml.com",
    ///         "processingStatus" : "InProgress",
    ///         "publishedItems" : "10041",
    ///         "publishedItemsWithWarning" : "123",
    ///         "startUtcDate" : "2016-02-13T12:01:11Z",
    ///         "transmittedItems" : "10042"
    ///       }
    ///     ],
    ///     "publicationType" : "PublishOffers"
    ///   },
    ///   {
    ///     "feeds" : [
    ///       {
    ///         "endUtcDate" : "2016-02-13T12:02:00Z",
    ///         "errorMessage" : null,
    ///         "exportedProducts" : "10142",
    ///         "failedItems" : "1",
    ///         "feedType" : "Product",
    ///         "htmlReportGenerationErrorMessage" : null,
    ///         "htmlReportUrl" : "http:\/\/www.myreporthtml.com",
    ///         "processingStatus" : "Done",
    ///         "publishedItems" : "10041",
    ///         "publishedItemsWithWarning" : "123",
    ///         "startUtcDate" : "2016-02-13T12:01:11Z",
    ///         "transmittedItems" : "10042"
    ///       },
    ///       {
    ///         "endUtcDate" : "2016-02-13T12:02:00Z",
    ///         "errorMessage" : null,
    ///         "exportedProducts" : "10142",
    ///         "failedItems" : "1",
    ///         "feedType" : "Inventory",
    ///         "htmlReportGenerationErrorMessage" : null,
    ///         "htmlReportUrl" : "http:\/\/www.myreporthtml.com",
    ///         "processingStatus" : "Done",
    ///         "publishedItems" : "10041",
    ///         "publishedItemsWithWarning" : "123",
    ///         "startUtcDate" : "2016-02-13T12:01:11Z",
    ///         "transmittedItems" : "10042"
    ///       },
    ///       {
    ///         "errorMessage" : null,
    ///         "exportedProducts" : "10142",
    ///         "failedItems" : "1",
    ///         "feedType" : "Pricing",
    ///         "htmlReportGenerationErrorMessage" : null,
    ///         "htmlReportUrl" : "http:\/\/www.myreporthtml.com",
    ///         "processingStatus" : "InProgress",
    ///         "publishedItems" : "10041",
    ///         "publishedItemsWithWarning" : "123",
    ///         "startUtcDate" : "2016-02-13T12:01:11Z",
    ///         "transmittedItems" : "10042"
    ///       }
    ///     ],
    ///     "publicationType" : "PublishProducts"
    ///   }
    /// ]
    public var publications: [PublicationReporting]

    public init(links: AccountPublicationsLinks, publications: [PublicationReporting]) {
        self.links = links
        self.publications = publications
    }
}

/// Model for a publication reporting, can have multiple feeds
public struct PublicationReporting: Codable {
    /// The Publication Type
    ///
    /// Example: "PublishOffers"
    public var publicationType: PublicationType
    /// The feeds that were published
    ///
    /// Example:
    ///
    /// [
    ///   {
    ///     "endUtcDate" : "2016-02-13T12:02:00Z",
    ///     "errorMessage" : null,
    ///     "exportedProducts" : "10142",
    ///     "failedItems" : "1",
    ///     "feedType" : "Offers",
    ///     "htmlReportGenerationErrorMessage" : null,
    ///     "htmlReportUrl" : "http:\/\/www.myreporthtml.com",
    ///     "processingStatus" : "Done",
    ///     "publishedItems" : "10041",
    ///     "publishedItemsWithWarning" : "123",
    ///     "startUtcDate" : "2016-02-13T12:01:11Z",
    ///     "transmittedItems" : "10042"
    ///   }
    /// ]
    public var feeds: [PublicationFeedReporting]

    public init(publicationType: PublicationType, feeds: [PublicationFeedReporting]) {
        self.publicationType = publicationType
        self.feeds = feeds
    }
}

/// Publication feed reporting
public struct PublicationFeedReporting: Codable {
    /// The Feed Type
    ///
    /// Example: "Offers"
    public var feedType: FeedType
    /// The feed publication start time (UTC timezone)
    ///
    /// Example: "2016-02-13T12:01:11Z"
    public var startUtcDate: Date
    /// The feed publication end time (UTC timezone)
    ///
    /// Example: "2016-02-13T12:02:00Z"
    public var endUtcDate: Date?
    /// The processing status
    ///
    /// Example: "Done"
    public var processingStatus: String
    /// The product count downloaded from BeezUP Export
    ///
    /// Example: 10142
    public var exportedProducts: Int?
    /// The item count (products or offers) sent to the marketplace
    ///
    /// Example: 10042
    public var transmittedItems: Int?
    /// The item count (products or offers) the marketplace flagged as successful
    ///
    /// Example: 10041
    public var publishedItems: Int?
    /// The item count (products or offers) the marketplace flagged as successful with warnings
    ///
    /// Example: 123
    public var publishedItemsWithWarning: Int?
    /// The item count (products or offers) the marketplace flagged as failed
    public var failedItems: Int?
    /// The error message
    public var errorMessage: String?
    /// The Url for the Html Report generated
    ///
    /// Example: "http://www.myreporthtml.com"
    public var htmlReportURL: URL?
    /// The error message if the Html Report generation failed
    ///
    /// Example: "Example error message"
    public var htmlReportGenerationErrorMessage: String?
    /// Indicates if the publication is completed or not
    ///
    /// Example: true
    public var isCompleted: Bool?

    public init(feedType: FeedType, startUtcDate: Date, endUtcDate: Date? = nil, processingStatus: String, exportedProducts: Int? = nil, transmittedItems: Int? = nil, publishedItems: Int? = nil, publishedItemsWithWarning: Int? = nil, failedItems: Int? = nil, errorMessage: String? = nil, htmlReportURL: URL? = nil, htmlReportGenerationErrorMessage: String? = nil, isCompleted: Bool? = nil) {
        self.feedType = feedType
        self.startUtcDate = startUtcDate
        self.endUtcDate = endUtcDate
        self.processingStatus = processingStatus
        self.exportedProducts = exportedProducts
        self.transmittedItems = transmittedItems
        self.publishedItems = publishedItems
        self.publishedItemsWithWarning = publishedItemsWithWarning
        self.failedItems = failedItems
        self.errorMessage = errorMessage
        self.htmlReportURL = htmlReportURL
        self.htmlReportGenerationErrorMessage = htmlReportGenerationErrorMessage
        self.isCompleted = isCompleted
    }

    private enum CodingKeys: String, CodingKey {
        case feedType
        case startUtcDate
        case endUtcDate
        case processingStatus
        case exportedProducts
        case transmittedItems
        case publishedItems
        case publishedItemsWithWarning
        case failedItems
        case errorMessage
        case htmlReportURL = "htmlReportUrl"
        case htmlReportGenerationErrorMessage
        case isCompleted = "completed"
    }
}

public struct ChannelCatalogMarketplacePropertiesLinks: Codable {
    public var this: BeezUPCommonLink3
    public var settings: BeezUPCommonLink3?
    public var externalConfigurationPage: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3, settings: BeezUPCommonLink3? = nil, externalConfigurationPage: BeezUPCommonLink3? = nil) {
        self.this = this
        self.settings = settings
        self.externalConfigurationPage = externalConfigurationPage
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case settings
        case externalConfigurationPage
    }
}

public struct ChannelCatalogMarketplaceProperties: Codable {
    public var info: BeezUPCommonInfoSummaries?
    public var links: ChannelCatalogMarketplacePropertiesLinks
    /// The groups settings with constraints
    ///
    /// Example:
    ///
    /// [
    ///   {
    ///     "name" : "AccountInformations",
    ///     "position" : "1",
    ///     "properties" : [
    ///       {
    ///         "name" : "EbayToken",
    ///         "position" : "1",
    ///         "readOnly" : true,
    ///         "values" : [
    ///           "AgAAAA**AQAAAA**aAAAAA**2VFhVg**nY+sHZ2PrBmdj6wVnY+sEZ2PrA2dj6AElISgCJaLpwWdj6x9nY+seQ**OEsBAA**AAMAAA**jzsVAMwj1dPBsyCEp0Fuj\/toSBrfZF2JpKKDrrXIirMzgvgbsyxnA2h1wl7WjFD+TfdCmaBq3CAFLOog\/433G5gsse1DLTT6uXFajdiHnPVfnL7QtKIpQEIwL8ZO5Tx1dGl0XQLsU7knPwbGHn5X6Z3JzXrCGvvpw2+MIzDNhasYlqPfOEr8Lct5dcsIIdhXl\/qgrzALe5++v76\/XjaXvP6eic3uCWBEXBiXC1uisjEtOqaNIPkFaiICBaXsQUzVZdM68bQatBg5bwf6hxvqOyNJRw4pttGStovcXXjL+aszw7ejbxLv1lJ6qeTMj5oRwTPl0AzBAejcY+DTBrLEmgdzrvWHLvMOa1ijGOGzVodBoDGimiqadCPQpAVZr0e7HvQIVbOlbmKpuCUFJ4RPCv0NxpkCm1\/nxZWeS9H8gd\/SfLf9Chgd115dcKzgxFBoSh7myJcw+MRM7szPQ2Pwv980dTRyHvbI8XR4OieYvXmU4H7Nl51N8B3qkjYFkdcp6J06eqs4dO68lDNdWZfXHkjwI3dY6umDUp4y82IdQl8IykPty3\/DZfUAfqafgiAwMHZvXjewp5HhPjDi2zgf+5EcDlvf6rNMzjsghjdWUQi4WldDk+LXgkos6jswIQaNPdpW1D4KyPYWtGYknx0Xzzuc6WmBoVwGFalgMvCWWI9Gs2w6PG5GqB9zm1Fnr3svtPbNYPQ6q3VQpkKL2SWQXy383O1cp6ZMLI9GwZe0FnrqCxb\/wc4XJUVw2RoR3qiX"
    ///         ]
    ///       },
    ///       {
    ///         "name" : "PayPalEmailAddress",
    ///         "pattern" : "(?:[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+\/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])",
    ///         "position" : "2",
    ///         "required" : true,
    ///         "x-pattern" : "(?:[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+\/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])"
    ///       }
    ///     ]
    ///   },
    ///   {
    ///     "displayGroupCode" : "AnnounceTitle",
    ///     "displayGroupPosition" : "2",
    ///     "properties" : [
    ///       {
    ///         "name" : "Postalcode",
    ///         "position" : "1",
    ///         "required" : true
    ///       },
    ///       {
    ///         "lovLink" : {
    ///           "href" : "\/v2\/user\/lov\/Country_eBay"
    ///         },
    ///         "lovRequired" : true,
    ///         "name" : "Country",
    ///         "position" : "2",
    ///         "required" : true
    ///       },
    ///       {
    ///         "lovLink" : {
    ///           "href" : "\/v2\/user\/lov\/ReturnsWithinDuration_eBay"
    ///         },
    ///         "lovRequired" : true,
    ///         "name" : "ReturnsWithinOption",
    ///         "position" : "3",
    ///         "required" : true
    ///       },
    ///       {
    ///         "lovLink" : {
    ///           "href" : "\/v2\/user\/lov\/FRA_ShippingService_eBay"
    ///         },
    ///         "lovRequired" : true,
    ///         "name" : "ShippingService",
    ///         "position" : "4",
    ///         "required" : true
    ///       },
    ///       {
    ///         "lovLink" : {
    ///           "href" : "\/v2\/user\/lov\/Currency_eBay"
    ///         },
    ///         "lovRequired" : true,
    ///         "name" : "Currency",
    ///         "position" : "5",
    ///         "required" : true
    ///       },
    ///       {
    ///         "lovLink" : {
    ///           "href" : "\/v2\/user\/lov\/PaymentMethods_eBay"
    ///         },
    ///         "lovRequired" : true,
    ///         "maxItems" : 2,
    ///         "minItems" : 1,
    ///         "name" : "PaymentMethods",
    ///         "position" : "6",
    ///         "required" : true
    ///       }
    ///     ]
    ///   },
    ///   {
    ///     "displayGroupCode" : "SalesConditions",
    ///     "displayGroupPosition" : "3",
    ///     "properties" : [
    ///       {
    ///         "lovLink" : {
    ///           "href" : "\/v2\/user\/lov\/ReturnsAcceptedOption_eBay"
    ///         },
    ///         "lovRequired" : true,
    ///         "name" : "ReturnsAcceptedOption",
    ///         "position" : "1",
    ///         "required" : true
    ///       },
    ///       {
    ///         "lovLink" : {
    ///           "href" : "\/v2\/user\/lov\/ShippingCostPaidByOption_eBay"
    ///         },
    ///         "lovRequired" : true,
    ///         "name" : "ShippingCostPaidByOption",
    ///         "position" : "2",
    ///         "required" : true
    ///       },
    ///       {
    ///         "lovLink" : {
    ///           "href" : "\/v2\/user\/lov\/RefundOption_eBay"
    ///         },
    ///         "lovRequired" : true,
    ///         "name" : "RefundOption",
    ///         "position" : "3",
    ///         "required" : true
    ///       },
    ///       {
    ///         "lovLink" : {
    ///           "href" : "\/v2\/user\/lov\/ReturnsWithinDuration_eBay"
    ///         },
    ///         "lovRequired" : true,
    ///         "name" : "ReturnsWithinOption",
    ///         "position" : "4",
    ///         "required" : true
    ///       },
    ///       {
    ///         "maxLength" : 5000,
    ///         "name" : "ReturnDescription",
    ///         "position" : "5",
    ///         "required" : false
    ///       }
    ///     ]
    ///   },
    ///   {
    ///     "displayGroupCode" : "HTML",
    ///     "displayGroupPosition" : "4",
    ///     "properties" : [
    ///       {
    ///         "maxLength" : 50000,
    ///         "name" : "Template_HTML",
    ///         "position" : "1",
    ///         "required" : false
    ///       }
    ///     ]
    ///   },
    ///   {
    ///     "displayGroupCode" : "OrdersRetrievalOptions",
    ///     "displayGroupPosition" : "5",
    ///     "properties" : [
    ///       {
    ///         "description" : "If true allows to retireve one marketplace country only",
    ///         "name" : "RetrieveOnlyOneCountry",
    ///         "position" : "1",
    ///         "required" : false,
    ///         "type" : "boolean"
    ///       }
    ///     ]
    ///   }
    /// ]
    public var propertyGroups: [ChannelCatalogMarketplacePropertyGroup]

    public init(info: BeezUPCommonInfoSummaries? = nil, links: ChannelCatalogMarketplacePropertiesLinks, propertyGroups: [ChannelCatalogMarketplacePropertyGroup]) {
        self.info = info
        self.links = links
        self.propertyGroups = propertyGroups
    }
}

public struct ChannelCatalogMarketplacePropertyGroup: Codable {
    /// Indicate the code identifier of the group
    ///
    /// Example: "AccountInformations"
    public var name: String
    /// Indicate the position of the group
    public var position: Int
    /// Example:
    ///
    /// [
    ///   {
    ///     "name" : "EbayToken",
    ///     "position" : "1",
    ///     "readOnly" : true,
    ///     "values" : [
    ///       "AgAAAA**AQAAAA**aAAAAA**2VFhVg**nY+sHZ2PrBmdj6wVnY+sEZ2PrA2dj6AElISgCJaLpwWdj6x9nY+seQ**OEsBAA**AAMAAA**jzsVAMwj1dPBsyCEp0Fuj\/toSBrfZF2JpKKDrrXIirMzgvgbsyxnA2h1wl7WjFD+TfdCmaBq3CAFLOog\/433G5gsse1DLTT6uXFajdiHnPVfnL7QtKIpQEIwL8ZO5Tx1dGl0XQLsU7knPwbGHn5X6Z3JzXrCGvvpw2+MIzDNhasYlqPfOEr8Lct5dcsIIdhXl\/qgrzALe5++v76\/XjaXvP6eic3uCWBEXBiXC1uisjEtOqaNIPkFaiICBaXsQUzVZdM68bQatBg5bwf6hxvqOyNJRw4pttGStovcXXjL+aszw7ejbxLv1lJ6qeTMj5oRwTPl0AzBAejcY+DTBrLEmgdzrvWHLvMOa1ijGOGzVodBoDGimiqadCPQpAVZr0e7HvQIVbOlbmKpuCUFJ4RPCv0NxpkCm1\/nxZWeS9H8gd\/SfLf9Chgd115dcKzgxFBoSh7myJcw+MRM7szPQ2Pwv980dTRyHvbI8XR4OieYvXmU4H7Nl51N8B3qkjYFkdcp6J06eqs4dO68lDNdWZfXHkjwI3dY6umDUp4y82IdQl8IykPty3\/DZfUAfqafgiAwMHZvXjewp5HhPjDi2zgf+5EcDlvf6rNMzjsghjdWUQi4WldDk+LXgkos6jswIQaNPdpW1D4KyPYWtGYknx0Xzzuc6WmBoVwGFalgMvCWWI9Gs2w6PG5GqB9zm1Fnr3svtPbNYPQ6q3VQpkKL2SWQXy383O1cp6ZMLI9GwZe0FnrqCxb\/wc4XJUVw2RoR3qiX"
    ///     ]
    ///   },
    ///   {
    ///     "name" : "PaypalAddress",
    ///     "pattern" : "(?:[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+\/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])",
    ///     "position" : "2",
    ///     "required" : true,
    ///     "x-pattern" : "(?:[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+\/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])"
    ///   }
    /// ]
    public var properties: [ChannelCatalogMarketplaceProperty]

    public init(name: String, position: Int, properties: [ChannelCatalogMarketplaceProperty]) {
        self.name = name
        self.position = position
        self.properties = properties
    }
}

/// The Data Type
///
/// Example: "string"
public enum `Type`: String, Codable, CaseIterable {
    case string
    case integer
    case boolean
    case number
}

/// Example: "string"
public enum ChannelCatalogMarketplacePropertyDiscriminatorType: String, Codable, CaseIterable {
    case channelCatalogMarketplaceStringProperty
    case channelCatalogMarketplaceIntegerProperty
    case channelCatalogMarketplaceBooleanProperty
    case channelCatalogMarketplaceNumberProperty
}

/// Model for fetching a channel catalog marketplace property
public struct ChannelCatalogMarketplaceProperty: Codable {
    /// Channel catalog marketplace property name
    ///
    /// Example: "PaypalAddress"
    public var name: String
    public var info: BeezUPCommonInfoSummaries?
    /// Indicate the description of the property
    ///
    /// Example: "If true allows to retireve one marketplace country only"
    public var description: String?
    /// Indicate the position of the property in the display group
    public var position: Int
    /// Indicate if the value cannot be changed. This is used for example for ebay token that should not be changed.
    ///
    /// Example: false
    public var isReadOnly: Bool
    /// Indicates the minimum size of the property value
    public var minLength: Int?
    /// Indicates the maximum size of the property value
    ///
    /// Example: 500
    public var maxLength: Int?
    /// Indicates the minimum item count of the property value.
    public var minItems: Int?
    /// Indicates the maximum item count of the property value
    public var maxItems: Int?
    /// Describe the way you have to follow to get access to the LOV
    public var lovLink: BeezUPCommonLOVLink3?
    /// Indicates if the property value must be in the list of value.
    ///
    /// Example: true
    public var isLovRequired: Bool
    /// Indicate if the property is required or not
    ///
    /// Example: true
    public var isRequired: Bool
    /// Indicates the offer identifier required to configure this property.
    ///
    /// Example: 10
    public var offerIDRequired: Int?
    /// Indicates if this property should be displayed in the configuration page.
    ///
    /// Example: true
    public var isVisible: Bool
    /// The Data Type
    ///
    /// Example: "string"
    public var type: `Type`
    /// Example: "string"
    public var discriminatorType: ChannelCatalogMarketplacePropertyDiscriminatorType
    /// Channel catalog marketplace setting value format validation regular expression
    ///
    /// Example: "(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])"
    public var pattern: String?

    public init(name: String, info: BeezUPCommonInfoSummaries? = nil, description: String? = nil, position: Int, isReadOnly: Bool, minLength: Int? = nil, maxLength: Int? = nil, minItems: Int? = nil, maxItems: Int? = nil, lovLink: BeezUPCommonLOVLink3? = nil, isLovRequired: Bool? = nil, isRequired: Bool, offerIDRequired: Int? = nil, isVisible: Bool, type: `Type`, discriminatorType: ChannelCatalogMarketplacePropertyDiscriminatorType, pattern: String? = nil) {
        self.name = name
        self.info = info
        self.description = description
        self.position = position
        self.isReadOnly = isReadOnly
        self.minLength = minLength
        self.maxLength = maxLength
        self.minItems = minItems
        self.maxItems = maxItems
        self.lovLink = lovLink
        self.isLovRequired = isLovRequired ?? false
        self.isRequired = isRequired
        self.offerIDRequired = offerIDRequired
        self.isVisible = isVisible
        self.type = type
        self.discriminatorType = discriminatorType
        self.pattern = pattern
    }

    private enum CodingKeys: String, CodingKey {
        case name
        case info
        case description
        case position
        case isReadOnly = "readOnly"
        case minLength
        case maxLength
        case minItems
        case maxItems
        case lovLink
        case isLovRequired = "lovRequired"
        case isRequired = "required"
        case offerIDRequired = "offerIdRequired"
        case isVisible = "visible"
        case type
        case discriminatorType
        case pattern
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        self.name = try values.decode(String.self, forKey: .name)
        self.info = try values.decodeIfPresent(BeezUPCommonInfoSummaries.self, forKey: .info)
        self.description = try values.decodeIfPresent(String.self, forKey: .description)
        self.position = try values.decode(Int.self, forKey: .position)
        self.isReadOnly = try values.decode(Bool.self, forKey: .isReadOnly)
        self.minLength = try values.decodeIfPresent(Int.self, forKey: .minLength)
        self.maxLength = try values.decodeIfPresent(Int.self, forKey: .maxLength)
        self.minItems = try values.decodeIfPresent(Int.self, forKey: .minItems)
        self.maxItems = try values.decodeIfPresent(Int.self, forKey: .maxItems)
        self.lovLink = try values.decodeIfPresent(BeezUPCommonLOVLink3.self, forKey: .lovLink)
        self.isLovRequired = try values.decodeIfPresent(Bool.self, forKey: .isLovRequired) ?? false
        self.isRequired = try values.decode(Bool.self, forKey: .isRequired)
        self.offerIDRequired = try values.decodeIfPresent(Int.self, forKey: .offerIDRequired)
        self.isVisible = try values.decode(Bool.self, forKey: .isVisible)
        self.type = try values.decode(`Type`.self, forKey: .type)
        self.discriminatorType = try values.decode(ChannelCatalogMarketplacePropertyDiscriminatorType.self, forKey: .discriminatorType)
        self.pattern = try values.decodeIfPresent(String.self, forKey: .pattern)
    }
}

public struct ChannelCatalogMarketplaceStringProperty: Codable {
    /// Model for fetching a channel catalog marketplace property
    public var channelCatalogMarketplaceProperty: ChannelCatalogMarketplaceProperty
    /// Indicate the default values of the property
    ///
    /// Example: ["My default value"]
    public var `default`: [String]?

    public init(channelCatalogMarketplaceProperty: ChannelCatalogMarketplaceProperty, `default`: [String]? = nil) {
        self.channelCatalogMarketplaceProperty = channelCatalogMarketplaceProperty
        self.default = `default`
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.channelCatalogMarketplaceProperty = try ChannelCatalogMarketplaceProperty(from: decoder)
        self.default = try values.decodeIfPresent([String].self, forKey: "default")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(channelCatalogMarketplaceProperty, forKey: "channelCatalogMarketplaceProperty")
        try values.encodeIfPresent(`default`, forKey: "default")
    }
}

public struct ChannelCatalogMarketplaceIntegerProperty: Codable {
    /// Model for fetching a channel catalog marketplace property
    public var channelCatalogMarketplaceProperty: ChannelCatalogMarketplaceProperty
    /// Indicate the default values of the property
    ///
    /// Example: ["201"]
    public var `default`: [Int]?

    public init(channelCatalogMarketplaceProperty: ChannelCatalogMarketplaceProperty, `default`: [Int]? = nil) {
        self.channelCatalogMarketplaceProperty = channelCatalogMarketplaceProperty
        self.default = `default`
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.channelCatalogMarketplaceProperty = try ChannelCatalogMarketplaceProperty(from: decoder)
        self.default = try values.decodeIfPresent([Int].self, forKey: "default")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(channelCatalogMarketplaceProperty, forKey: "channelCatalogMarketplaceProperty")
        try values.encodeIfPresent(`default`, forKey: "default")
    }
}

public struct ChannelCatalogMarketplaceBooleanProperty: Codable {
    /// Model for fetching a channel catalog marketplace property
    public var channelCatalogMarketplaceProperty: ChannelCatalogMarketplaceProperty
    /// Indicate the default values of the property
    ///
    /// Example: false
    public var isDefault: Bool?

    public init(channelCatalogMarketplaceProperty: ChannelCatalogMarketplaceProperty, isDefault: Bool? = nil) {
        self.channelCatalogMarketplaceProperty = channelCatalogMarketplaceProperty
        self.isDefault = isDefault
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.channelCatalogMarketplaceProperty = try ChannelCatalogMarketplaceProperty(from: decoder)
        self.isDefault = try values.decodeIfPresent(Bool.self, forKey: "default")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(channelCatalogMarketplaceProperty, forKey: "channelCatalogMarketplaceProperty")
        try values.encodeIfPresent(isDefault, forKey: "default")
    }
}

public struct ChannelCatalogMarketplaceNumberProperty: Codable {
    /// Model for fetching a channel catalog marketplace property
    public var channelCatalogMarketplaceProperty: ChannelCatalogMarketplaceProperty
    /// Indicate the default values of the property
    ///
    /// Example: ["201.69"]
    public var `default`: [Double]?

    public init(channelCatalogMarketplaceProperty: ChannelCatalogMarketplaceProperty, `default`: [Double]? = nil) {
        self.channelCatalogMarketplaceProperty = channelCatalogMarketplaceProperty
        self.default = `default`
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.channelCatalogMarketplaceProperty = try ChannelCatalogMarketplaceProperty(from: decoder)
        self.default = try values.decodeIfPresent([Double].self, forKey: "default")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(channelCatalogMarketplaceProperty, forKey: "channelCatalogMarketplaceProperty")
        try values.encodeIfPresent(`default`, forKey: "default")
    }
}

/// The channel catalog marketplace settings to save
public struct SetChannelCatalogMarketplaceSettingsRequest: Codable {
    /// Example:
    ///
    /// [
    ///   {
    ///     "name" : "Country",
    ///     "values" : [
    ///       "FR"
    ///     ]
    ///   },
    ///   {
    ///     "name" : "Currency",
    ///     "values" : [
    ///       "EUR"
    ///     ]
    ///   },
    ///   {
    ///     "name" : "ListingDuration",
    ///     "values" : [
    ///       "GTC"
    ///     ]
    ///   },
    ///   {
    ///     "name" : "PaymentMethods",
    ///     "values" : [
    ///       "CCAccepted"
    ///     ]
    ///   },
    ///   {
    ///     "name" : "PayPalEmailAddress",
    ///     "values" : [
    ///       "pascal@ixeoline.com"
    ///     ]
    ///   },
    ///   {
    ///     "name" : "PostalCode",
    ///     "values" : [
    ///       "69630"
    ///     ]
    ///   },
    ///   {
    ///     "name" : "RefundOption",
    ///     "values" : [
    ///       "MoneyBackOrExchange"
    ///     ]
    ///   },
    ///   {
    ///     "name" : "ReturnsAcceptedOption",
    ///     "values" : [
    ///       "ReturnsAccepted"
    ///     ]
    ///   },
    ///   {
    ///     "name" : "ReturnsWithinOption",
    ///     "values" : [
    ///       "Days_10"
    ///     ]
    ///   },
    ///   {
    ///     "name" : "ShippingCostPaidByOption",
    ///     "values" : [
    ///       "Buyer"
    ///     ]
    ///   },
    ///   {
    ///     "name" : "ShippingService",
    ///     "values" : [
    ///       "FR_ColiposteColissimo"
    ///     ]
    ///   }
    /// ]
    public var settings: [ChannelCatalogMarketplaceSetting]

    public init(settings: [ChannelCatalogMarketplaceSetting]) {
        self.settings = settings
    }
}

/// Publish the catalog to the marketplace
public struct PublishCatalogToMarketplaceRequest: Codable {
    /// Define the publication strategy kind, for that you have 2 choices 
    /// * Delta - This is the recommanded publication strategy kind, this strategy will push to the marketplace only the difference between your catalog and the previous published feeds done by BeezUP. 
    /// * Full - If you want to force the publication of all your catalog feeds to the marketplace. 
    ///       !WARNING! Depending to the marketplace this operation will purge the existing offers on the marketplace that are not in the catalog or unknown from the publication feed referential.
    public var publicationStrategyKind: PublicationStrategyKind
    /// The Feed Type
    ///
    /// Example: "Offers"
    public var feedType: FeedType
    /// In full publication strategy kind, for some marktetplace, you can ask to unpublish or not your existing feeds on the markeptlace absent from your exported catalog.
    public var isWithUnpublish: Bool

    public init(publicationStrategyKind: PublicationStrategyKind, feedType: FeedType, isWithUnpublish: Bool) {
        self.publicationStrategyKind = publicationStrategyKind
        self.feedType = feedType
        self.isWithUnpublish = isWithUnpublish
    }

    private enum CodingKeys: String, CodingKey {
        case publicationStrategyKind
        case feedType
        case isWithUnpublish = "withUnpublish"
    }
}

/// Define the publication strategy kind, for that you have 2 choices 
/// * Delta - This is the recommanded publication strategy kind, this strategy will push to the marketplace only the difference between your catalog and the previous published feeds done by BeezUP. 
/// * Full - If you want to force the publication of all your catalog feeds to the marketplace. 
///       !WARNING! Depending to the marketplace this operation will purge the existing offers on the marketplace that are not in the catalog or unknown from the publication feed referential.
public enum PublicationStrategyKind: String, Codable, CaseIterable {
    case delta = "Delta"
    case full = "Full"
}

public struct ChannelCatalogMarketplaceSettingsLinks: Codable {
    public var this: BeezUPCommonLink3
    public var save: BeezUPCommonLink3

    public init(this: BeezUPCommonLink3, save: BeezUPCommonLink3) {
        self.this = this
        self.save = save
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case save
    }
}

/// The channel catalog marketplace settings
public struct ChannelCatalogMarketplaceSettings: Codable {
    public var links: ChannelCatalogMarketplaceSettingsLinks
    /// Example:
    ///
    /// [
    ///   {
    ///     "name" : "Country",
    ///     "values" : [
    ///       "FR"
    ///     ]
    ///   },
    ///   {
    ///     "name" : "Currency",
    ///     "values" : [
    ///       "EUR"
    ///     ]
    ///   },
    ///   {
    ///     "name" : "ListingDuration",
    ///     "values" : [
    ///       "GTC"
    ///     ]
    ///   },
    ///   {
    ///     "name" : "PaymentMethods",
    ///     "values" : [
    ///       "CCAccepted"
    ///     ]
    ///   },
    ///   {
    ///     "name" : "PayPalEmailAddress",
    ///     "values" : [
    ///       "pascal@ixeoline.com"
    ///     ]
    ///   },
    ///   {
    ///     "name" : "PostalCode",
    ///     "values" : [
    ///       "69630"
    ///     ]
    ///   },
    ///   {
    ///     "name" : "RefundOption",
    ///     "values" : [
    ///       "MoneyBackOrExchange"
    ///     ]
    ///   },
    ///   {
    ///     "name" : "ReturnsAcceptedOption",
    ///     "values" : [
    ///       "ReturnsAccepted"
    ///     ]
    ///   },
    ///   {
    ///     "name" : "ReturnsWithinOption",
    ///     "values" : [
    ///       "Days_10"
    ///     ]
    ///   },
    ///   {
    ///     "name" : "ShippingCostPaidByOption",
    ///     "values" : [
    ///       "Buyer"
    ///     ]
    ///   },
    ///   {
    ///     "name" : "ShippingService",
    ///     "values" : [
    ///       "FR_ColiposteColissimo"
    ///     ]
    ///   }
    /// ]
    public var settings: [ChannelCatalogMarketplaceSetting]

    public init(links: ChannelCatalogMarketplaceSettingsLinks, settings: [ChannelCatalogMarketplaceSetting]) {
        self.links = links
        self.settings = settings
    }
}

/// Example: "string"
public enum ChannelCatalogMarketplaceSettingDiscriminatorType: String, Codable, CaseIterable {
    case channelCatalogMarketplaceStringSetting
    case channelCatalogMarketplaceIntegerSetting
    case channelCatalogMarketplaceBooleanSetting
    case channelCatalogMarketplaceNumberSetting
}

/// Model for fetching a channel catalog marketplace setting
public struct ChannelCatalogMarketplaceSetting: Codable {
    /// Channel catalog marketplace property name
    ///
    /// Example: "PaypalAddress"
    public var name: String
    /// Example: "string"
    public var discriminatorType: ChannelCatalogMarketplaceSettingDiscriminatorType

    public init(name: String, discriminatorType: ChannelCatalogMarketplaceSettingDiscriminatorType) {
        self.name = name
        self.discriminatorType = discriminatorType
    }
}

public struct ChannelCatalogMarketplaceStringSetting: Codable {
    /// Model for fetching a channel catalog marketplace setting
    public var channelCatalogMarketplaceSetting: ChannelCatalogMarketplaceSetting
    /// Channel catalog marketplace property values
    ///
    /// Example: ["myemail@mydomain.com"]
    public var values: [String]?

    public init(channelCatalogMarketplaceSetting: ChannelCatalogMarketplaceSetting, values: [String]? = nil) {
        self.channelCatalogMarketplaceSetting = channelCatalogMarketplaceSetting
        self.values = values
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.channelCatalogMarketplaceSetting = try ChannelCatalogMarketplaceSetting(from: decoder)
        self.values = try values.decodeIfPresent([String].self, forKey: "values")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(channelCatalogMarketplaceSetting, forKey: "channelCatalogMarketplaceSetting")
        try values.encodeIfPresent(self.values, forKey: "values")
    }
}

public struct ChannelCatalogMarketplaceIntegerSetting: Codable {
    /// Model for fetching a channel catalog marketplace setting
    public var channelCatalogMarketplaceSetting: ChannelCatalogMarketplaceSetting
    /// Channel catalog marketplace property values
    ///
    /// Example: ["201"]
    public var values: [Int]?

    public init(channelCatalogMarketplaceSetting: ChannelCatalogMarketplaceSetting, values: [Int]? = nil) {
        self.channelCatalogMarketplaceSetting = channelCatalogMarketplaceSetting
        self.values = values
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.channelCatalogMarketplaceSetting = try ChannelCatalogMarketplaceSetting(from: decoder)
        self.values = try values.decodeIfPresent([Int].self, forKey: "values")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(channelCatalogMarketplaceSetting, forKey: "channelCatalogMarketplaceSetting")
        try values.encodeIfPresent(self.values, forKey: "values")
    }
}

public struct ChannelCatalogMarketplaceBooleanSetting: Codable {
    /// Model for fetching a channel catalog marketplace setting
    public var channelCatalogMarketplaceSetting: ChannelCatalogMarketplaceSetting
    /// Channel catalog marketplace property values
    ///
    /// Example: false
    public var isValue: Bool?

    public init(channelCatalogMarketplaceSetting: ChannelCatalogMarketplaceSetting, isValue: Bool? = nil) {
        self.channelCatalogMarketplaceSetting = channelCatalogMarketplaceSetting
        self.isValue = isValue
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.channelCatalogMarketplaceSetting = try ChannelCatalogMarketplaceSetting(from: decoder)
        self.isValue = try values.decodeIfPresent(Bool.self, forKey: "value")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(channelCatalogMarketplaceSetting, forKey: "channelCatalogMarketplaceSetting")
        try values.encodeIfPresent(isValue, forKey: "value")
    }
}

public struct ChannelCatalogMarketplaceNumberSetting: Codable {
    /// Model for fetching a channel catalog marketplace setting
    public var channelCatalogMarketplaceSetting: ChannelCatalogMarketplaceSetting
    /// Channel catalog marketplace property values
    ///
    /// Example: ["201.69"]
    public var values: [Double]?

    public init(channelCatalogMarketplaceSetting: ChannelCatalogMarketplaceSetting, values: [Double]? = nil) {
        self.channelCatalogMarketplaceSetting = channelCatalogMarketplaceSetting
        self.values = values
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.channelCatalogMarketplaceSetting = try ChannelCatalogMarketplaceSetting(from: decoder)
        self.values = try values.decodeIfPresent([Double].self, forKey: "values")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(channelCatalogMarketplaceSetting, forKey: "channelCatalogMarketplaceSetting")
        try values.encodeIfPresent(self.values, forKey: "values")
    }
}

/// The marketplace channel catalog list
public struct MarketplaceChannelCatalogList: Codable {
    public var links: MarketplaceChannelCatalogListLinks
    /// The list of marketplace channel catalog
    public var marketplaceChannelCatalogs: [MarketplaceChannelCatalog]

    public init(links: MarketplaceChannelCatalogListLinks, marketplaceChannelCatalogs: [MarketplaceChannelCatalog]) {
        self.links = links
        self.marketplaceChannelCatalogs = marketplaceChannelCatalogs
    }
}

public struct MarketplaceChannelCatalogListLinks: Codable {
    public var this: BeezUPCommonLink3

    public init(this: BeezUPCommonLink3) {
        self.this = this
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
    }
}

/// This object indicates you the association between a channel catalog and a marketplace. The account identifier will be automatically defined based on your marketplace merchant identfier.
public struct MarketplaceChannelCatalog: Codable {
    /// Example: "success"
    public var apiSettingsStatus: BeezUPCommonAPISettingsStatus
    /// The enabled status of the Channel Catalog
    ///
    /// Example: true
    public var isEnabled: Bool
    /// The technical code of the marketplace.
    ///
    /// Example: "Amazon"
    public var marketplaceTechnicalCode: String
    /// In an marketplace technical code like CDiscount you can have several marketplaces like GO SPORT, etc. We identify them by a business code.
    ///
    /// Example: "GOSPORT"
    public var marketplaceBusinessCode: String
    /// The marketplace identifier in the marketplace
    ///
    /// Example: "71"
    public var marketplaceMarketPlaceID: String
    /// The marketplace country iso code alpha 2 (see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Decoding_table for more details)
    ///
    /// Example: "FR"
    public var marketplaceIsoCountryCodeAlpha2: String
    /// The marketplace name
    ///
    /// Example: "ebay FRA"
    public var beezUPMarketplaceName: [String: AnyJSON]
    /// The channel identifier
    ///
    /// Example: "2dc136a7-0d3d-4cc9-a825-a28a42c53e28"
    public var beezUPChannelID: String
    /// The channel catalog identifier
    ///
    /// Example: "6d6b04de-406b-4539-8e7e-bf3e8da5dfb0"
    public var beezUPChannelCatalogID: String
    /// The store identifier
    ///
    /// Example: "64f43358-63a1-47f7-97ec-0301fc39956b"
    public var beezUPStoreID: String
    /// The store name
    ///
    /// Example: "My Store 1"
    public var beezUPStoreName: String
    /// The marketplace merchant identifier list
    ///
    /// Example:
    ///
    /// {
    ///   "Ebay_PayPalEmailAddress" : "yourEbayId@paypal.com"
    /// }
    public var marketplaceMerchantIdentifiers: [String: String]?
    /// The marketplace account identifier in BeezUP. This account identifier is based on your api settings.
    ///
    /// Example: 1234
    public var marketplaceAccountID: Int?
    /// Indicates the List Of Values related to the marketplace
    public var lovLinks: MarketplaceChannelCatalogLovLinks
    /// Indicate the actions you can do on a channel catalog. If the settings are valid, you will be able to access to the publication history.
    public var links: MarketplaceChannelCatalogLinks

    public init(apiSettingsStatus: BeezUPCommonAPISettingsStatus, isEnabled: Bool, marketplaceTechnicalCode: String, marketplaceBusinessCode: String, marketplaceMarketPlaceID: String, marketplaceIsoCountryCodeAlpha2: String, beezUPMarketplaceName: [String: AnyJSON], beezUPChannelID: String, beezUPChannelCatalogID: String, beezUPStoreID: String, beezUPStoreName: String, marketplaceMerchantIdentifiers: [String: String]? = nil, marketplaceAccountID: Int? = nil, lovLinks: MarketplaceChannelCatalogLovLinks, links: MarketplaceChannelCatalogLinks) {
        self.apiSettingsStatus = apiSettingsStatus
        self.isEnabled = isEnabled
        self.marketplaceTechnicalCode = marketplaceTechnicalCode
        self.marketplaceBusinessCode = marketplaceBusinessCode
        self.marketplaceMarketPlaceID = marketplaceMarketPlaceID
        self.marketplaceIsoCountryCodeAlpha2 = marketplaceIsoCountryCodeAlpha2
        self.beezUPMarketplaceName = beezUPMarketplaceName
        self.beezUPChannelID = beezUPChannelID
        self.beezUPChannelCatalogID = beezUPChannelCatalogID
        self.beezUPStoreID = beezUPStoreID
        self.beezUPStoreName = beezUPStoreName
        self.marketplaceMerchantIdentifiers = marketplaceMerchantIdentifiers
        self.marketplaceAccountID = marketplaceAccountID
        self.lovLinks = lovLinks
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case apiSettingsStatus
        case isEnabled = "enabled"
        case marketplaceTechnicalCode
        case marketplaceBusinessCode
        case marketplaceMarketPlaceID = "marketplaceMarketPlaceId"
        case marketplaceIsoCountryCodeAlpha2
        case beezUPMarketplaceName
        case beezUPChannelID = "beezUPChannelId"
        case beezUPChannelCatalogID = "beezUPChannelCatalogId"
        case beezUPStoreID = "beezUPStoreId"
        case beezUPStoreName
        case marketplaceMerchantIdentifiers
        case marketplaceAccountID = "marketplaceAccountId"
        case lovLinks
        case links
    }
}

/// Indicates the List Of Values related to the marketplace
public struct MarketplaceChannelCatalogLovLinks: Codable {
    /// Describe the way you have to follow to get access to the LOV
    public var shippingMethodLOV: BeezUPCommonLOVLink3?
    /// Describe the way you have to follow to get access to the LOV
    public var carrierCodeLOV: BeezUPCommonLOVLink3?
    /// Describe the way you have to follow to get access to the LOV
    public var cancelationReasonCodeLOV: BeezUPCommonLOVLink3?
    /// Describe the way you have to follow to get access to the LOV
    public var refundReasonCodeLOV: BeezUPCommonLOVLink3?
    /// Describe the way you have to follow to get access to the LOV
    public var marketplaceStorePropertyLOV: BeezUPCommonLOVLink3?
    /// Describe the way you have to follow to get access to the LOV
    public var marketplaceStorePropertyGroupLOV: BeezUPCommonLOVLink3?

    public init(shippingMethodLOV: BeezUPCommonLOVLink3? = nil, carrierCodeLOV: BeezUPCommonLOVLink3? = nil, cancelationReasonCodeLOV: BeezUPCommonLOVLink3? = nil, refundReasonCodeLOV: BeezUPCommonLOVLink3? = nil, marketplaceStorePropertyLOV: BeezUPCommonLOVLink3? = nil, marketplaceStorePropertyGroupLOV: BeezUPCommonLOVLink3? = nil) {
        self.shippingMethodLOV = shippingMethodLOV
        self.carrierCodeLOV = carrierCodeLOV
        self.cancelationReasonCodeLOV = cancelationReasonCodeLOV
        self.refundReasonCodeLOV = refundReasonCodeLOV
        self.marketplaceStorePropertyLOV = marketplaceStorePropertyLOV
        self.marketplaceStorePropertyGroupLOV = marketplaceStorePropertyGroupLOV
    }
}

/// Indicate the actions you can do on a channel catalog. If the settings are valid, you will be able to access to the publication history.
public struct MarketplaceChannelCatalogLinks: Codable {
    public var properties: BeezUPCommonLink3
    public var settings: BeezUPCommonLink3
    public var publications: BeezUPCommonLink3?
    public var publishOptions: [MarketplaceChannelCatalogPublicationOption]?

    public init(properties: BeezUPCommonLink3, settings: BeezUPCommonLink3, publications: BeezUPCommonLink3? = nil, publishOptions: [MarketplaceChannelCatalogPublicationOption]? = nil) {
        self.properties = properties
        self.settings = settings
        self.publications = publications
        self.publishOptions = publishOptions
    }
}

public struct MarketplaceChannelCatalogPublicationOption: Codable {
    /// Define the publication strategy kind, for that you have 2 choices 
    /// * Delta - This is the recommanded publication strategy kind, this strategy will push to the marketplace only the difference between your catalog and the previous published feeds done by BeezUP. 
    /// * Full - If you want to force the publication of all your catalog feeds to the marketplace. 
    ///       !WARNING! Depending to the marketplace this operation will purge the existing offers on the marketplace that are not in the catalog or unknown from the publication feed referential.
    public var kind: PublicationStrategyKind
    /// The Feed Type
    ///
    /// Example: "Offers"
    public var feedType: FeedType
    public var isWithUnpublish: Bool
    /// The Publication Type
    public var strategy: String
    public var link: BeezUPCommonLink3

    public init(kind: PublicationStrategyKind, feedType: FeedType, isWithUnpublish: Bool, strategy: String, link: BeezUPCommonLink3) {
        self.kind = kind
        self.feedType = feedType
        self.isWithUnpublish = isWithUnpublish
        self.strategy = strategy
        self.link = link
    }

    private enum CodingKeys: String, CodingKey {
        case kind
        case feedType
        case isWithUnpublish = "withUnpublish"
        case strategy
        case link
    }
}

public struct OrderExportationsLinks: Codable {
    public var this: BeezUPCommonLink3

    public init(this: BeezUPCommonLink3) {
        self.this = this
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
    }
}

/// The list of Order report exportations.\
/// The paginationResult properties can be null if the list is empty.
public struct OrderExportations: Codable {
    /// Example:
    ///
    /// {
    ///   "entryCount" : "25",
    ///   "links" : {
    ///     "first" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "1",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "last" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "38",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "next" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "2",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     }
    ///   },
    ///   "pageCount" : "38",
    ///   "totalEntryCount" : "943"
    /// }
    public var paginationResult: BeezUPCommonPaginationResult?
    public var exportations: [OrderExportationReporting]
    public var links: OrderExportationsLinks

    public init(paginationResult: BeezUPCommonPaginationResult? = nil, exportations: [OrderExportationReporting], links: OrderExportationsLinks) {
        self.paginationResult = paginationResult
        self.exportations = exportations
        self.links = links
    }
}

/// Represent the reporting of the Order report exportations
public struct OrderExportationReporting: Codable {
    /// Example: "2017-04-01T13:10:12Z"
    public var abortionUtcDate: Date?
    /// Example: "2017-04-01T13:10:12Z"
    public var beginUtcDate: Date?
    /// Example: "http://beezuporder2.blob.com/yourReport.csv"
    public var blobNameUri: String?
    /// Example: "2017-04-01T15:10:12Z"
    public var endUtcDate: Date?
    /// Example: "2017-04-01T13:09:12Z"
    public var enqueuedUtcDate: Date
    /// Example: "You have an error here"
    public var errorMessage: String?
    public var executionUUID: String
    /// Example: "2017-04-01T13:39:12Z"
    public var expirationUtcDate: Date?
    /// Example: "2017-04-01T13:39:12Z"
    public var failureUtcDate: Date?
    /// Example: "127.0.0.1"
    public var ipAddress: String
    /// Raw representation of the JSON
    ///
    /// Example: "{"StartDate:"2016-09-30T22:00:00Z","EndDate:"2016-10-30T23:00:00Z","OrderListingFilterDateSearchType:0,"MarketPlaceOrderIds:null,"BeezUPOrderStatusNames:null,"ResultByPage:20,"MerchantOrderIds:null,"PageIndex:0,"MarketPlaceTechnicalCodes:["PriceMinister","Amazon","CDiscount","Mirakl"],"MarketPlaceBusinessCodes:["PRICEMINISTER"],"AccountIds:[1234,987],"StoreIds:["00000000-0000-0000-0000-00000000007c"],"BuyerFullName:null}"
    public var jsonCriteria: String?
    /// Example: "2017-04-01T15:10:12Z"
    public var lastUpdateUtcDate: Date?
    /// Example: 1024
    public var orderCount: Int?
    /// Example: "Done"
    public var processingStatus: OrderExportationReportingProcessingStatus
    public var remainingOrderCount: Int?
    /// Example: "2017-04-01T13:39:12Z"
    public var resumedUtcDate: Date?
    /// Indicates the origin of the operation
    ///
    /// Example: "Api"
    public var sourceType: SourceType
    /// The user identifier
    ///
    /// Example: "8a7fbdec-9e71-472e-9974-27d5c1d57cf8"
    public var sourceUserID: String?
    /// Example: "Marilyn monroe"
    public var sourceUserName: String
    /// Example: "2017-04-01T13:39:12Z"
    public var suspendedUtcDate: Date?
    /// Example: "00:30:00"
    public var timeoutDuration: String?
    /// Example: "You have a warning here"
    public var warningMessage: String?

    public init(abortionUtcDate: Date? = nil, beginUtcDate: Date? = nil, blobNameUri: String? = nil, endUtcDate: Date? = nil, enqueuedUtcDate: Date, errorMessage: String? = nil, executionUUID: String, expirationUtcDate: Date? = nil, failureUtcDate: Date? = nil, ipAddress: String, jsonCriteria: String? = nil, lastUpdateUtcDate: Date? = nil, orderCount: Int? = nil, processingStatus: OrderExportationReportingProcessingStatus, remainingOrderCount: Int? = nil, resumedUtcDate: Date? = nil, sourceType: SourceType, sourceUserID: String? = nil, sourceUserName: String, suspendedUtcDate: Date? = nil, timeoutDuration: String? = nil, warningMessage: String? = nil) {
        self.abortionUtcDate = abortionUtcDate
        self.beginUtcDate = beginUtcDate
        self.blobNameUri = blobNameUri
        self.endUtcDate = endUtcDate
        self.enqueuedUtcDate = enqueuedUtcDate
        self.errorMessage = errorMessage
        self.executionUUID = executionUUID
        self.expirationUtcDate = expirationUtcDate
        self.failureUtcDate = failureUtcDate
        self.ipAddress = ipAddress
        self.jsonCriteria = jsonCriteria
        self.lastUpdateUtcDate = lastUpdateUtcDate
        self.orderCount = orderCount
        self.processingStatus = processingStatus
        self.remainingOrderCount = remainingOrderCount
        self.resumedUtcDate = resumedUtcDate
        self.sourceType = sourceType
        self.sourceUserID = sourceUserID
        self.sourceUserName = sourceUserName
        self.suspendedUtcDate = suspendedUtcDate
        self.timeoutDuration = timeoutDuration
        self.warningMessage = warningMessage
    }

    private enum CodingKeys: String, CodingKey {
        case abortionUtcDate
        case beginUtcDate
        case blobNameUri
        case endUtcDate
        case enqueuedUtcDate
        case errorMessage
        case executionUUID
        case expirationUtcDate
        case failureUtcDate
        case ipAddress
        case jsonCriteria
        case lastUpdateUtcDate
        case orderCount
        case processingStatus
        case remainingOrderCount
        case resumedUtcDate
        case sourceType
        case sourceUserID = "sourceUserId"
        case sourceUserName
        case suspendedUtcDate
        case timeoutDuration
        case warningMessage
    }
}

/// Indicates on which date you want to make the filter
public enum DateSearchType: String, Codable, CaseIterable {
    case modification = "Modification"
    case purchase = "Purchase"
    case marketPlaceModification = "MarketPlaceModification"
}

public struct OrderListRequestWithoutPagination: Codable {
    /// Example: ["PriceMinister"]
    public var marketplaceTechnicalCodes: [String]?
    /// Example: ["PRICEMINISTER"]
    public var marketplaceBusinessCodes: [String]?
    /// Account Id list
    ///
    /// Example: ["12345"]
    public var accountIDs: [Int]?
    /// Store Id list
    public var storeIDs: [String]?
    /// Example: ["InProgress"]
    public var beezUPOrderStatuses: [String]?
    /// Indicates on which date you want to make the filter
    public var dateSearchType: DateSearchType?
    /// The begin period you want to make the search. \
    /// The period MUST not be greater than 30 days.
    /// The begin period MUST be lower than the end period.
    ///
    /// Example: "2017-03-01T13:10:01Z"
    public var beginPeriodUtcDate: Date
    /// The end period of you search. \
    /// The period MUST not be greater than 30 days. \
    /// The end period MUST be greater than the begin period.
    /// The end period MUST be lower to the current date.
    ///
    /// Example: "2017-04-01T13:10:01Z"
    public var endPeriodUtcDate: Date
    /// Indicates on which invoice availability to filter
    ///
    /// Example: "All"
    public var invoiceAvailabilityType: String?
    /// Buyer full name
    ///
    /// Example: "Monroe"
    public var orderBuyerName: String?
    /// Example: ["AmazonOrderId1234"]
    public var marketplaceOrderIDs: [String]?
    /// Indicates on which order merchant info synchronization status to filter
    ///
    /// Example: "All"
    public var orderMerchantInfoSynchronizationStatus: String?
    /// Merchant order id list
    ///
    /// Example: ["MyOrderId1234"]
    public var orderMerchantOrderIDs: [String]?

    public init(marketplaceTechnicalCodes: [String]? = nil, marketplaceBusinessCodes: [String]? = nil, accountIDs: [Int]? = nil, storeIDs: [String]? = nil, beezUPOrderStatuses: [String]? = nil, dateSearchType: DateSearchType? = nil, beginPeriodUtcDate: Date, endPeriodUtcDate: Date, invoiceAvailabilityType: String? = nil, orderBuyerName: String? = nil, marketplaceOrderIDs: [String]? = nil, orderMerchantInfoSynchronizationStatus: String? = nil, orderMerchantOrderIDs: [String]? = nil) {
        self.marketplaceTechnicalCodes = marketplaceTechnicalCodes
        self.marketplaceBusinessCodes = marketplaceBusinessCodes
        self.accountIDs = accountIDs
        self.storeIDs = storeIDs
        self.beezUPOrderStatuses = beezUPOrderStatuses
        self.dateSearchType = dateSearchType
        self.beginPeriodUtcDate = beginPeriodUtcDate
        self.endPeriodUtcDate = endPeriodUtcDate
        self.invoiceAvailabilityType = invoiceAvailabilityType
        self.orderBuyerName = orderBuyerName
        self.marketplaceOrderIDs = marketplaceOrderIDs
        self.orderMerchantInfoSynchronizationStatus = orderMerchantInfoSynchronizationStatus
        self.orderMerchantOrderIDs = orderMerchantOrderIDs
    }

    private enum CodingKeys: String, CodingKey {
        case marketplaceTechnicalCodes
        case marketplaceBusinessCodes
        case accountIDs = "accountIds"
        case storeIDs = "storeIds"
        case beezUPOrderStatuses
        case dateSearchType
        case beginPeriodUtcDate
        case endPeriodUtcDate
        case invoiceAvailabilityType
        case orderBuyerName = "order_Buyer_Name"
        case marketplaceOrderIDs = "marketplaceOrderIds"
        case orderMerchantInfoSynchronizationStatus
        case orderMerchantOrderIDs = "order_MerchantOrderIds"
    }
}

public struct OrderListRequest: Codable {
    public var orderListRequestWithoutPagination: OrderListRequestWithoutPagination
    /// Indicate the order count per page
    ///
    /// Example: 100
    public var pageSize: Int
    /// Indicates the page number
    public var pageNumber: Int

    public init(orderListRequestWithoutPagination: OrderListRequestWithoutPagination, pageSize: Int, pageNumber: Int) {
        self.orderListRequestWithoutPagination = orderListRequestWithoutPagination
        self.pageSize = pageSize
        self.pageNumber = pageNumber
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.orderListRequestWithoutPagination = try OrderListRequestWithoutPagination(from: decoder)
        self.pageSize = try values.decode(Int.self, forKey: "pageSize")
        self.pageNumber = try values.decode(Int.self, forKey: "pageNumber")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(orderListRequestWithoutPagination, forKey: "orderListRequestWithoutPagination")
        try values.encode(pageSize, forKey: "pageSize")
        try values.encode(pageNumber, forKey: "pageNumber")
    }
}

/// The type of the file to export
///
/// Example: "csv"
public enum ExportOrderListFormat: String, Codable, CaseIterable {
    case csv
}

/// The message request to export order list. The store identifier is requested to regroup the exportations.
public struct ExportOrderListRequest: Codable {
    /// The type of the file to export
    ///
    /// Example: "csv"
    public var format: ExportOrderListFormat?
    /// The store identifier
    ///
    /// Example: "64f43358-63a1-47f7-97ec-0301fc39956b"
    public var storeID: String
    public var orderListRequestWithoutPagination: OrderListRequestWithoutPagination

    public init(format: ExportOrderListFormat? = nil, storeID: String, orderListRequestWithoutPagination: OrderListRequestWithoutPagination) {
        self.format = format
        self.storeID = storeID
        self.orderListRequestWithoutPagination = orderListRequestWithoutPagination
    }

    private enum CodingKeys: String, CodingKey {
        case format
        case storeID = "storeId"
        case orderListRequestWithoutPagination
    }
}

/// Example: "Done"
public enum OrderExportationReportingProcessingStatus: String, Codable, CaseIterable {
    case `none` = "None"
    case inProgress = "InProgress"
    case done = "Done"
    case failed = "Failed"
    case alreadyInProgress = "AlreadyInProgress"
    case aborted = "Aborted"
    case suspended = "Suspended"
}

public struct AutomaticTransitionInfoListLinks: Codable {
    public var this: BeezUPCommonLink3
    public var configure: BeezUPCommonLink3

    public init(this: BeezUPCommonLink3, configure: BeezUPCommonLink3) {
        self.this = this
        self.configure = configure
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case configure
    }
}

public struct AutomaticTransitionInfoList: Codable {
    public var links: AutomaticTransitionInfoListLinks
    public var automaticTransitionInfos: [AutomaticTransitionInfo]?

    public init(links: AutomaticTransitionInfoListLinks, automaticTransitionInfos: [AutomaticTransitionInfo]? = nil) {
        self.links = links
        self.automaticTransitionInfos = automaticTransitionInfos
    }
}

public struct AutomaticTransitionInfoLinks: Codable {
    public var configure: BeezUPCommonLink3

    public init(configure: BeezUPCommonLink3) {
        self.configure = configure
    }
}

public struct AutomaticTransitionInfo: Codable {
    public var automaticTransition: AutomaticTransition
    /// In an marketplace technical code like CDiscount you can have several marketplaces like GO SPORT, etc. We identify them by a business code.
    ///
    /// Example: "GOSPORT"
    public var marketplaceBusinessCode: String
    /// BeezUP order status. Unified for all marketplaces.
    ///
    /// Example: "Shipped"
    public var beezUPOrderStatus: String
    /// Example: "ShipOrder"
    public var businessOperationType: String
    public var links: AutomaticTransitionInfoLinks?

    public init(automaticTransition: AutomaticTransition, marketplaceBusinessCode: String, beezUPOrderStatus: String, businessOperationType: String, links: AutomaticTransitionInfoLinks? = nil) {
        self.automaticTransition = automaticTransition
        self.marketplaceBusinessCode = marketplaceBusinessCode
        self.beezUPOrderStatus = beezUPOrderStatus
        self.businessOperationType = businessOperationType
        self.links = links
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.automaticTransition = try AutomaticTransition(from: decoder)
        self.marketplaceBusinessCode = try values.decode(String.self, forKey: "marketplaceBusinessCode")
        self.beezUPOrderStatus = try values.decode(String.self, forKey: "beezUPOrderStatus")
        self.businessOperationType = try values.decode(String.self, forKey: "businessOperationType")
        self.links = try AutomaticTransitionInfoLinks(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(automaticTransition, forKey: "automaticTransition")
        try values.encode(marketplaceBusinessCode, forKey: "marketplaceBusinessCode")
        try values.encode(beezUPOrderStatus, forKey: "beezUPOrderStatus")
        try values.encode(businessOperationType, forKey: "businessOperationType")
        try values.encodeIfPresent(links, forKey: "links")
    }
}

public struct ConfigureAutomaticTransitionRequest: Codable {
    public var automaticTransitions: [AutomaticTransition]

    public init(automaticTransitions: [AutomaticTransition]) {
        self.automaticTransitions = automaticTransitions
    }
}

public struct AutomaticTransition: Codable {
    /// The technical code of the marketplace.
    ///
    /// Example: "Amazon"
    public var marketplaceTechnicalCode: String
    /// The marketplace account identifier in BeezUP. This account identifier is based on your api settings.
    ///
    /// Example: 1234
    public var accountID: Int
    /// Example: 1234
    public var orderStatusTransitionID: Int
    /// Example: false
    public var isEnabled: Bool

    public init(marketplaceTechnicalCode: String, accountID: Int, orderStatusTransitionID: Int, isEnabled: Bool) {
        self.marketplaceTechnicalCode = marketplaceTechnicalCode
        self.accountID = accountID
        self.orderStatusTransitionID = orderStatusTransitionID
        self.isEnabled = isEnabled
    }

    private enum CodingKeys: String, CodingKey {
        case marketplaceTechnicalCode
        case accountID = "accountId"
        case orderStatusTransitionID = "orderStatusTransitionId"
        case isEnabled = "enabled"
    }
}

public struct OrderIdentifier: Codable {
    /// The technical code of the marketplace.
    ///
    /// Example: "Amazon"
    public var marketplaceTechnicalCode: String
    /// The marketplace account identifier in BeezUP. This account identifier is based on your api settings.
    ///
    /// Example: 1234
    public var accountID: Int
    /// The BeezUP Order identifier
    public var beezUPOrderID: String

    public init(marketplaceTechnicalCode: String, accountID: Int, beezUPOrderID: String) {
        self.marketplaceTechnicalCode = marketplaceTechnicalCode
        self.accountID = accountID
        self.beezUPOrderID = beezUPOrderID
    }

    private enum CodingKeys: String, CodingKey {
        case marketplaceTechnicalCode
        case accountID = "accountId"
        case beezUPOrderID = "beezUPOrderId"
    }
}

public struct ClearMerchantOrderInfoListRequest: Codable {
    /// Example:
    ///
    /// [
    ///   {
    ///     "accountId" : "1234",
    ///     "beezUPOrderId" : "0",
    ///     "marketplaceTechnicalCode" : "Amazon"
    ///   },
    ///   {
    ///     "accountId" : "5678",
    ///     "beezUPOrderId" : "0",
    ///     "marketplaceTechnicalCode" : "Amazon"
    ///   },
    ///   {
    ///     "accountId" : "9876",
    ///     "beezUPOrderId" : "0",
    ///     "marketplaceTechnicalCode" : "Ebay"
    ///   }
    /// ]
    public var orders: [OrderIdentifier]

    public init(orders: [OrderIdentifier]) {
        self.orders = orders
    }
}

public struct SetMerchantOrderInfoListRequest: Codable {
    /// The e-commerce software name of the merchant
    ///
    /// Example: "Prestashop"
    public var orderMerchantECommerceSoftwareName: String
    /// The e-commece software version of the merchant
    ///
    /// Example: "123.0.1"
    public var orderMerchantECommerceSoftwareVersion: String
    /// Example:
    ///
    /// [
    ///   {
    ///     "accountId" : "1234",
    ///     "beezUPOrderId" : "8D47FF1427A26B064ca98e95f644361ada5a5be0bbb3b53",
    ///     "marketplaceTechnicalCode" : "Amazon",
    ///     "order_MerchantOrderId" : "BX1234"
    ///   },
    ///   {
    ///     "accountId" : "5678",
    ///     "beezUPOrderId" : "8D47FF149F213D055f26e3c413e4c9ba5c5cfda460547a4",
    ///     "marketplaceTechnicalCode" : "Amazon",
    ///     "order_MerchantOrderId" : "BX5678"
    ///   },
    ///   {
    ///     "accountId" : "9876",
    ///     "beezUPOrderId" : "8D47FF150217B60bdec05ab61c445d1a59e3da050b52823",
    ///     "marketplaceTechnicalCode" : "Ebay",
    ///     "order_MerchantOrderId" : "BX9876"
    ///   }
    /// ]
    public var orders: [SetMerchantOrderInfoListRequestItem]

    public init(orderMerchantECommerceSoftwareName: String, orderMerchantECommerceSoftwareVersion: String, orders: [SetMerchantOrderInfoListRequestItem]) {
        self.orderMerchantECommerceSoftwareName = orderMerchantECommerceSoftwareName
        self.orderMerchantECommerceSoftwareVersion = orderMerchantECommerceSoftwareVersion
        self.orders = orders
    }

    private enum CodingKeys: String, CodingKey {
        case orderMerchantECommerceSoftwareName = "order_MerchantECommerceSoftwareName"
        case orderMerchantECommerceSoftwareVersion = "order_MerchantECommerceSoftwareVersion"
        case orders
    }
}

public struct SetMerchantOrderInfoListRequestItem: Codable {
    public var orderIdentifier: OrderIdentifier
    /// The order merchant identifier
    ///
    /// Example: "MyOrderMerchantId"
    public var orderMerchantOrderID: String

    public init(orderIdentifier: OrderIdentifier, orderMerchantOrderID: String) {
        self.orderIdentifier = orderIdentifier
        self.orderMerchantOrderID = orderMerchantOrderID
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.orderIdentifier = try OrderIdentifier(from: decoder)
        self.orderMerchantOrderID = try values.decode(String.self, forKey: "order_MerchantOrderId")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(orderIdentifier, forKey: "orderIdentifier")
        try values.encode(orderMerchantOrderID, forKey: "order_MerchantOrderId")
    }
}

public struct SetMerchantOrderInfoRequest: Codable {
    /// The order merchant identifier
    ///
    /// Example: "MyOrderMerchantId"
    public var orderMerchantOrderID: String
    /// The e-commerce software name of the merchant
    ///
    /// Example: "Prestashop"
    public var orderMerchantECommerceSoftwareName: String
    /// The e-commece software version of the merchant
    ///
    /// Example: "123.0.1"
    public var orderMerchantECommerceSoftwareVersion: String

    public init(orderMerchantOrderID: String, orderMerchantECommerceSoftwareName: String, orderMerchantECommerceSoftwareVersion: String) {
        self.orderMerchantOrderID = orderMerchantOrderID
        self.orderMerchantECommerceSoftwareName = orderMerchantECommerceSoftwareName
        self.orderMerchantECommerceSoftwareVersion = orderMerchantECommerceSoftwareVersion
    }

    private enum CodingKeys: String, CodingKey {
        case orderMerchantOrderID = "order_MerchantOrderId"
        case orderMerchantECommerceSoftwareName = "order_MerchantECommerceSoftwareName"
        case orderMerchantECommerceSoftwareVersion = "order_MerchantECommerceSoftwareVersion"
    }
}

public struct AccountSynchronizationList: Codable {
    public var accountSynchronizations: [AccountSynchronization]?

    public init(accountSynchronizations: [AccountSynchronization]? = nil) {
        self.accountSynchronizations = accountSynchronizations
    }
}

public struct AccountSynchronization: Codable {
    /// The marketplace account identifier in BeezUP. This account identifier is based on your api settings.
    ///
    /// Example: 1234
    public var accountID: Int
    public var completedHarvestSynchroUtcDate: Date?
    /// In an marketplace technical code like CDiscount you can have several marketplaces like GO SPORT, etc. We identify them by a business code.
    ///
    /// Example: "GOSPORT"
    public var marketplaceBusinessCode: String
    /// The technical code of the marketplace.
    ///
    /// Example: "Amazon"
    public var marketplaceTechnicalCode: String

    public init(accountID: Int, completedHarvestSynchroUtcDate: Date? = nil, marketplaceBusinessCode: String, marketplaceTechnicalCode: String) {
        self.accountID = accountID
        self.completedHarvestSynchroUtcDate = completedHarvestSynchroUtcDate
        self.marketplaceBusinessCode = marketplaceBusinessCode
        self.marketplaceTechnicalCode = marketplaceTechnicalCode
    }

    private enum CodingKeys: String, CodingKey {
        case accountID = "accountId"
        case completedHarvestSynchroUtcDate
        case marketplaceBusinessCode
        case marketplaceTechnicalCode
    }
}

public struct OrderHeaderLinks: Codable {
    public var this: BeezUPCommonLink3

    public init(this: BeezUPCommonLink3) {
        self.this = this
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
    }
}

/// Describe the basic information related to an order. All properties with the prefix order_ are translated in the list of values /user/lov/OrderMetaInfoOrderDetails
public struct OrderHeader: Codable {
    /// The technical code of the marketplace.
    ///
    /// Example: "Amazon"
    public var marketplaceTechnicalCode: String
    /// The marketplace account identifier in BeezUP. This account identifier is based on your api settings.
    ///
    /// Example: 1234
    public var accountID: Int
    /// The BeezUP Order identifier
    public var beezUPOrderID: String
    /// The URL <a href="https://en.wikipedia.org/wiki/URL">https://en.wikipedia.org/wiki/URL</a>
    ///
    /// Example: "http://www.mydomain.com"
    public var beezUPOrderURL: String?
    /// In an marketplace technical code like CDiscount you can have several marketplaces like GO SPORT, etc. We identify them by a business code.
    ///
    /// Example: "GOSPORT"
    public var marketplaceBusinessCode: String
    /// The order marketplace identifier
    ///
    /// Example: "AMAZON12345"
    public var orderMarketplaceOrderID: String
    /// BeezUP order status. Unified for all marketplaces.
    ///
    /// Example: "Shipped"
    public var orderStatusBeezUPOrderStatus: String
    /// The marketplace order state
    ///
    /// Example: "In_progress_3"
    public var orderStatusMarketplaceOrderStatus: String?
    /// The order merchant identifier
    ///
    /// Example: "MyOrderMerchantId"
    public var orderMerchantOrderID: String?
    /// The e-commerce software name of the merchant
    ///
    /// Example: "Prestashop"
    public var orderMerchantECommerceSoftwareName: String?
    /// The e-commece software version of the merchant
    ///
    /// Example: "123.0.1"
    public var orderMerchantECommerceSoftwareVersion: String?
    /// The purchase date of this order
    ///
    /// Example: "2017-03-31T21:30:23Z"
    public var orderPurchaseUtcDate: Date
    /// The last modification UTC date done by BeezUP of this order
    ///
    /// Example: "2017-04-16T10:30:23Z"
    public var orderLastModificationUtcDate: Date
    /// The last modification UTC date done by the marketplace on this order
    ///
    /// Example: "2017-04-16T10:25:23Z"
    public var orderMarketplaceLastModificationUtcDate: Date
    /// Buyer full name
    ///
    /// Example: "Monroe"
    public var orderBuyerName: String?
    /// The total price of this order (corresponding to the amount paid by the customer)
    ///
    /// Example: 101.42
    public var orderTotalPrice: Double?
    /// The currency code <a href="https://en.wikipedia.org/wiki/ISO_4217">(ISO 4217)</a>
    ///
    /// Example: "EUR"
    public var orderCurrencyCode: String?
    /// The order invoice number
    public var orderInvoiceNumber: String?
    /// The order invoice URI
    public var orderInvoiceUri: String?
    /// If true, there is currently a harvest or an order change in progress. Otherwise false.
    ///
    /// Example: false
    public var isProcessing: Bool
    /// ETag value to identify the order.\
    /// This information is required for the operation GetOrder and ChangeOrder.\
    /// For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3
    ///
    /// Example: "ca071a4580129f932a03971968ffef69"
    public var etag: String
    public var links: OrderHeaderLinks

    public init(marketplaceTechnicalCode: String, accountID: Int, beezUPOrderID: String, beezUPOrderURL: String? = nil, marketplaceBusinessCode: String, orderMarketplaceOrderID: String, orderStatusBeezUPOrderStatus: String, orderStatusMarketplaceOrderStatus: String? = nil, orderMerchantOrderID: String? = nil, orderMerchantECommerceSoftwareName: String? = nil, orderMerchantECommerceSoftwareVersion: String? = nil, orderPurchaseUtcDate: Date, orderLastModificationUtcDate: Date, orderMarketplaceLastModificationUtcDate: Date, orderBuyerName: String? = nil, orderTotalPrice: Double? = nil, orderCurrencyCode: String? = nil, orderInvoiceNumber: String? = nil, orderInvoiceUri: String? = nil, isProcessing: Bool, etag: String, links: OrderHeaderLinks) {
        self.marketplaceTechnicalCode = marketplaceTechnicalCode
        self.accountID = accountID
        self.beezUPOrderID = beezUPOrderID
        self.beezUPOrderURL = beezUPOrderURL
        self.marketplaceBusinessCode = marketplaceBusinessCode
        self.orderMarketplaceOrderID = orderMarketplaceOrderID
        self.orderStatusBeezUPOrderStatus = orderStatusBeezUPOrderStatus
        self.orderStatusMarketplaceOrderStatus = orderStatusMarketplaceOrderStatus
        self.orderMerchantOrderID = orderMerchantOrderID
        self.orderMerchantECommerceSoftwareName = orderMerchantECommerceSoftwareName
        self.orderMerchantECommerceSoftwareVersion = orderMerchantECommerceSoftwareVersion
        self.orderPurchaseUtcDate = orderPurchaseUtcDate
        self.orderLastModificationUtcDate = orderLastModificationUtcDate
        self.orderMarketplaceLastModificationUtcDate = orderMarketplaceLastModificationUtcDate
        self.orderBuyerName = orderBuyerName
        self.orderTotalPrice = orderTotalPrice
        self.orderCurrencyCode = orderCurrencyCode
        self.orderInvoiceNumber = orderInvoiceNumber
        self.orderInvoiceUri = orderInvoiceUri
        self.isProcessing = isProcessing
        self.etag = etag
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case marketplaceTechnicalCode
        case accountID = "accountId"
        case beezUPOrderID = "beezUPOrderId"
        case beezUPOrderURL = "beezUPOrderUrl"
        case marketplaceBusinessCode
        case orderMarketplaceOrderID = "order_MarketplaceOrderId"
        case orderStatusBeezUPOrderStatus = "order_Status_BeezUPOrderStatus"
        case orderStatusMarketplaceOrderStatus = "order_Status_MarketplaceOrderStatus"
        case orderMerchantOrderID = "order_MerchantOrderId"
        case orderMerchantECommerceSoftwareName = "order_MerchantECommerceSoftwareName"
        case orderMerchantECommerceSoftwareVersion = "order_MerchantECommerceSoftwareVersion"
        case orderPurchaseUtcDate = "order_PurchaseUtcDate"
        case orderLastModificationUtcDate = "order_LastModificationUtcDate"
        case orderMarketplaceLastModificationUtcDate = "order_MarketplaceLastModificationUtcDate"
        case orderBuyerName = "order_Buyer_Name"
        case orderTotalPrice = "order_TotalPrice"
        case orderCurrencyCode = "order_CurrencyCode"
        case orderInvoiceNumber = "order_Invoice_Number"
        case orderInvoiceUri = "order_Invoice_Uri"
        case isProcessing = "processing"
        case etag
        case links
    }
}

/// Describe an order item. All properties with the prefix orderItem_ are translated in the list of values /user/lov/OrderMetaInfoOrderItems
public struct OrderItem: Codable {
    /// The BeezUP identifier of the order Item
    ///
    /// Example: "1"
    public var beezUPOrderItemID: String
    /// The order item type of the order item
    ///
    /// Example: "Product"
    public var orderItemOrderItemType: String
    /// The product id indicated in the catalog importation in BeezUP system for this order item. This property will help you to match the order to the inventory system.
    ///
    /// Example: "73267"
    public var orderItemMerchantImportedProductID: String?
    /// The column name for the product id indicated in the catalog importation in BeezUP system related to this order item. This property will help you to match the order to the inventory system.
    ///
    /// Example: "reference"
    public var orderItemMerchantImportedProductIDColumnName: String?
    /// The product url indicated in the catalog importation in BeezUP system related to this order item
    ///
    /// Example: "http://blabla.com/my-folder/73267.html"
    public var orderItemMerchantImportedProductURL: String?
    /// The column name indicate in the mapping for the product id related to the order item
    ///
    /// Example: "reference_produit"
    public var orderItemMerchantProductIDColumnName: String?
    /// The store id in the beezup system related to the order item. This property will help you to match the order to the inventory system.
    ///
    /// Example: "00000000-cceb-4c20-b2c9-000000000000"
    public var orderItemBeezUPStoreID: String?
    /// The tax of the order item
    ///
    /// Example: 0.0
    public var orderItemItemTax: Double?
    /// The title of the order item
    ///
    /// Example: "bLA acide-plomb 6v-4.5ah 70x48x106mm"
    public var orderItemTitle: String?
    /// The URL of the image of the order item
    ///
    /// Example: "http://blabla.com//das6-45.jpg"
    public var orderItemImageURL: String?
    /// The merchant product id of the order item
    ///
    /// Example: "BlaLdas6-4.5"
    public var orderItemMerchantProductID: String?
    /// The marketplace product identifier of the order item
    public var orderItemMarketPlaceProductID: String?
    /// The order item gtin
    ///
    /// Example: "gtin_sample"
    public var orderItemGtin: String?
    /// The price of the order item
    ///
    /// Example: 6.86
    public var orderItemItemPrice: Double?
    /// The quantity of the order item
    ///
    /// Example: 1.0
    public var orderItemQuantity: Double?
    /// The total price of the order item
    ///
    /// Example: 6.86
    public var orderItemTotalPrice: Double?
    /// The shipping price of the order item
    ///
    /// Example: 0.0
    public var orderItemShippingPrice: Double?
    /// The merchant product condition of the order item
    ///
    /// Example: "New"
    public var orderItemCondition: String?
    /// The merchant product uri of the order item
    ///
    /// Example: "http://beezupblob.com/productLink.xml"
    public var orderItemMarketplaceProductUri: String?
    /// The marketplace image uri
    ///
    /// Example: "http://beezupblob.com/marketplaceImg.jpg"
    public var orderItemMarketplaceImageUri: String?

    public init(beezUPOrderItemID: String, orderItemOrderItemType: String, orderItemMerchantImportedProductID: String? = nil, orderItemMerchantImportedProductIDColumnName: String? = nil, orderItemMerchantImportedProductURL: String? = nil, orderItemMerchantProductIDColumnName: String? = nil, orderItemBeezUPStoreID: String? = nil, orderItemItemTax: Double? = nil, orderItemTitle: String? = nil, orderItemImageURL: String? = nil, orderItemMerchantProductID: String? = nil, orderItemMarketPlaceProductID: String? = nil, orderItemGtin: String? = nil, orderItemItemPrice: Double? = nil, orderItemQuantity: Double? = nil, orderItemTotalPrice: Double? = nil, orderItemShippingPrice: Double? = nil, orderItemCondition: String? = nil, orderItemMarketplaceProductUri: String? = nil, orderItemMarketplaceImageUri: String? = nil) {
        self.beezUPOrderItemID = beezUPOrderItemID
        self.orderItemOrderItemType = orderItemOrderItemType
        self.orderItemMerchantImportedProductID = orderItemMerchantImportedProductID
        self.orderItemMerchantImportedProductIDColumnName = orderItemMerchantImportedProductIDColumnName
        self.orderItemMerchantImportedProductURL = orderItemMerchantImportedProductURL
        self.orderItemMerchantProductIDColumnName = orderItemMerchantProductIDColumnName
        self.orderItemBeezUPStoreID = orderItemBeezUPStoreID
        self.orderItemItemTax = orderItemItemTax
        self.orderItemTitle = orderItemTitle
        self.orderItemImageURL = orderItemImageURL
        self.orderItemMerchantProductID = orderItemMerchantProductID
        self.orderItemMarketPlaceProductID = orderItemMarketPlaceProductID
        self.orderItemGtin = orderItemGtin
        self.orderItemItemPrice = orderItemItemPrice
        self.orderItemQuantity = orderItemQuantity
        self.orderItemTotalPrice = orderItemTotalPrice
        self.orderItemShippingPrice = orderItemShippingPrice
        self.orderItemCondition = orderItemCondition
        self.orderItemMarketplaceProductUri = orderItemMarketplaceProductUri
        self.orderItemMarketplaceImageUri = orderItemMarketplaceImageUri
    }

    private enum CodingKeys: String, CodingKey {
        case beezUPOrderItemID = "beezUPOrderItemId"
        case orderItemOrderItemType = "orderItem_OrderItemType"
        case orderItemMerchantImportedProductID = "orderItem_MerchantImportedProductId"
        case orderItemMerchantImportedProductIDColumnName = "orderItem_MerchantImportedProductIdColumnName"
        case orderItemMerchantImportedProductURL = "orderItem_MerchantImportedProductUrl"
        case orderItemMerchantProductIDColumnName = "orderItem_MerchantProductIdColumnName"
        case orderItemBeezUPStoreID = "orderItem_BeezUPStoreId"
        case orderItemItemTax = "orderItem_ItemTax"
        case orderItemTitle = "orderItem_Title"
        case orderItemImageURL = "orderItem_ImageUrl"
        case orderItemMerchantProductID = "orderItem_MerchantProductId"
        case orderItemMarketPlaceProductID = "orderItem_MarketPlaceProductId"
        case orderItemGtin = "orderItem_gtin"
        case orderItemItemPrice = "orderItem_ItemPrice"
        case orderItemQuantity = "orderItem_Quantity"
        case orderItemTotalPrice = "orderItem_TotalPrice"
        case orderItemShippingPrice = "orderItem_Shipping_Price"
        case orderItemCondition = "orderItem_Condition"
        case orderItemMarketplaceProductUri = "orderItem_MarketplaceProductUri"
        case orderItemMarketplaceImageUri = "orderItem_MarketplaceImageUri"
    }
}

public struct OrderLinks: Codable {
    public var orderHeaderLinks: OrderHeaderLinks
    public var history: BeezUPCommonLink3
    public var harvest: BeezUPCommonLink3
    public var setMerchantInfo: BeezUPCommonLink3
    public var clearMerchantInfo: BeezUPCommonLink3

    public init(orderHeaderLinks: OrderHeaderLinks, history: BeezUPCommonLink3, harvest: BeezUPCommonLink3, setMerchantInfo: BeezUPCommonLink3, clearMerchantInfo: BeezUPCommonLink3) {
        self.orderHeaderLinks = orderHeaderLinks
        self.history = history
        self.harvest = harvest
        self.setMerchantInfo = setMerchantInfo
        self.clearMerchantInfo = clearMerchantInfo
    }

    public init(from decoder: Decoder) throws {
        self.orderHeaderLinks = try OrderHeaderLinks(from: decoder)
        self.history = try BeezUPCommonLink3(from: decoder)
        self.harvest = try BeezUPCommonLink3(from: decoder)
        self.setMerchantInfo = try BeezUPCommonLink3(from: decoder)
        self.clearMerchantInfo = try BeezUPCommonLink3(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(orderHeaderLinks, forKey: "orderHeaderLinks")
        try values.encode(history, forKey: "history")
        try values.encode(harvest, forKey: "harvest")
        try values.encode(setMerchantInfo, forKey: "setMerchantInfo")
        try values.encode(clearMerchantInfo, forKey: "clearMerchantInfo")
    }
}

public struct Order: Codable {
    /// Describe the basic information related to an order. All properties with the prefix order_ are translated in the list of values /user/lov/OrderMetaInfoOrderDetails
    public var orderHeader: OrderHeader
    public var links: OrderLinks
    /// Useful to identify the origin of the order. For example in Amazon.
    ///
    /// Example: "Amazon France"
    public var orderMarketPlaceChannel: String?
    /// The total tax of this order
    ///
    /// Example: 0.0
    public var orderTotalTax: Double?
    /// The total commission of this order
    ///
    /// Example: 0.0
    public var orderTotalCommission: Double?
    /// The payment method of this order
    ///
    /// Example: "1 / 1X"
    public var orderPaymentMethod: String?
    /// The UTC date of the payment of this order
    ///
    /// Example: "2017-04-01T13:22:01Z"
    public var orderPayingUtcDate: Date?
    /// The comment associated to this order
    ///
    /// Example: "This is a comment"
    public var orderComment: String?
    /// Order Shipping first name
    ///
    /// Example: "Monroe"
    public var orderShippingFirstName: String?
    /// Order Shipping last name
    ///
    /// Example: "Monroe"
    public var orderShippingLastName: String?
    /// The civility of the person in the shipping address for this order
    ///
    /// Example: "MRS"
    public var orderShippingCivility: String?
    /// The company name of the shipping address for this order
    ///
    /// Example: "My Company"
    public var orderShippingCompanyName: String?
    /// The name of the person in the shipping address for this order
    ///
    /// Example: "Jacques BAUREGARD"
    public var orderShippingAddressName: String?
    /// The email of the person in the shipping address for this order
    ///
    /// Example: "client_000000@manomano.fr"
    public var orderShippingEmail: String?
    /// The shipping address line 1 of this order
    ///
    /// Example: "5 rue amélie"
    public var orderShippingAddressLine1: String?
    /// The shipping address line 2 of this order
    ///
    /// Example: "BDR"
    public var orderShippingAddressLine2: String?
    /// The shipping address line 3 of this order
    ///
    /// Example: "RDC"
    public var orderShippingAddressLine3: String?
    /// The shipping address postal code of this order
    ///
    /// Example: "13014"
    public var orderShippingAddressPostalCode: String?
    /// The shipping address city of this order
    ///
    /// Example: "Marseille"
    public var orderShippingAddressCity: String?
    /// The shipping address state or region of this order
    ///
    /// Example: "BDR"
    public var orderShippingAddressStateOrRegion: String?
    /// The shipping address country name
    ///
    /// Example: "France"
    public var orderShippingAddressCountryName: String?
    /// The shipping address country iso code alpha 2 (see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#/decoding_table for more details)
    ///
    /// Example: "FR"
    public var orderShippingAddressCountryIsoCodeAlpha2: String?
    /// The phone number of the person in the shipping address for this order
    ///
    /// Example: 33000000041
    public var orderShippingPhone: String?
    /// The mobile phone number of the person in the shipping address for this order
    ///
    /// Example: 33000000042
    public var orderShippingMobilePhone: String?
    /// The shipping price of this order
    ///
    /// Example: 6.9
    public var orderShippingPrice: Double?
    /// The shipping method of this order
    ///
    /// Example: "DPD Domicile"
    public var orderShippingMethod: String?
    /// The shipping tax for this order
    ///
    /// Example: 0.0
    public var orderShippingShippingTax: Double?
    /// The UTC date of the earliest ship for this order
    ///
    /// Example: "2017-04-02T21:30:00Z"
    public var orderShippingEarliestShipUtcDate: Date?
    /// The UTC date of the latest ship for this order
    ///
    /// Example: "2017-04-30T21:30:00Z"
    public var orderShippingLatestShipUtcDate: Date?
    /// The buyer identifier for this order
    ///
    /// Example: "1234567890"
    public var orderBuyerIdentifier: String?
    /// Order Buyer first name
    ///
    /// Example: "Monroe"
    public var orderBuyerFirstName: String?
    /// Order Buyer last name
    ///
    /// Example: "Monroe"
    public var orderBuyerLastName: String?
    /// The buyer civility for this order
    ///
    /// Example: "Marseille"
    public var orderBuyerCivility: String?
    /// The buyer company name for this order
    ///
    /// Example: "Marsillia"
    public var orderBuyerCompanyName: String?
    /// The email of the buyer for this order
    ///
    /// Example: "client_000000@manomano.fr"
    public var orderBuyerEmail: String?
    /// The Buyer address line 1 of this order
    ///
    /// Example: "5 rue amélie"
    public var orderBuyerAddressLine1: String?
    /// The Buyer address line 2 of this order
    ///
    /// Example: "BDR"
    public var orderBuyerAddressLine2: String?
    /// The Buyer address line 3 of this order
    ///
    /// Example: "RDC"
    public var orderBuyerAddressLine3: String?
    /// The Buyer address postal code of this order
    ///
    /// Example: "13014"
    public var orderBuyerAddressPostalCode: String?
    /// The Buyer address city of this order
    ///
    /// Example: "Marseille"
    public var orderBuyerAddressCity: String?
    /// The Buyer address state or region of this order
    ///
    /// Example: "BDR"
    public var orderBuyerAddressStateOrRegion: String?
    /// The Buyer address country name
    ///
    /// Example: "France"
    public var orderBuyerAddressCountryName: String?
    /// The Buyer address country iso code alpha 2 (see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#/decoding_table for more details)
    ///
    /// Example: "FR"
    public var orderBuyerAddressCountryIsoCodeAlpha2: String?
    /// The phone number of the buyer for this order
    ///
    /// Example: 33000000101
    public var orderBuyerPhone: String?
    /// The mobile phone number of the buyer for this order
    ///
    /// Example: 33000000042
    public var orderBuyerMobilePhone: String?
    /// Indicates if the order is considered as Prime (only on Amazon)
    ///
    /// Example: true
    public var orderIsPrime: Bool?
    /// The order FulfilledBy
    public var orderFulfilledBy: String?
    /// The order IsBusiness
    public var orderIsBusiness: Bool?
    /// Technical information: The url to the source of this order. We received this information from the marketplace.
    ///
    /// Example: "http://beezupblob.com/order.xml"
    public var orderOrderSourceUri: URL?
    /// Technical information: The url to the source of this order items. We received this information from the marketplace.
    ///
    /// Example: "http://beezupblob.com/orderItems.xml"
    public var orderOrderItemsSourceUri: URL?
    public var orderItems: [OrderItem]
    /// Contains the authorized change actions for an order
    ///
    /// Example:
    ///
    /// [
    ///   {
    ///     "href" : "\/v2\/user\/marketplaces\/orders\/Amazon\/1001\/00000000000000000000000000000000000000000000000\/ShipOrder",
    ///     "method" : "POST",
    ///     "parameters" : {
    ///       "If-Match" : {
    ///         "in" : "header",
    ///         "required" : true,
    ///         "type" : "string",
    ///         "value" : "\"ca071a4580129f932a03971968ffef69\""
    ///       },
    ///       "request" : {
    ///         "in" : "body",
    ///         "properties" : {
    ///           "order_Shipping_CarrierName" : {
    ///             "lovLink" : {
    ///               "href" : "\/v2\/user\/PriceMinisterCarrierName"
    ///             },
    ///             "lovRequired" : true,
    ///             "required" : true,
    ///             "type" : "string"
    ///           },
    ///           "order_Shipping_FulfillmentDate" : {
    ///             "required" : true,
    ///             "type" : "date-time"
    ///           },
    ///           "order_Shipping_Method" : {
    ///             "lovLink" : {
    ///               "href" : "\/v2\/user\/ShippingMethod_PriceMinister"
    ///             },
    ///             "lovRequired" : false,
    ///             "required" : true,
    ///             "type" : "string"
    ///           },
    ///           "order_Shipping_ShipperTrackingNumber" : {
    ///             "required" : true,
    ///             "type" : "string"
    ///           }
    ///         },
    ///         "schema" : "changeOrderRequest",
    ///         "type" : "object"
    ///       },
    ///       "testMode" : {
    ///         "in" : "query",
    ///         "required" : false,
    ///         "type" : "boolean",
    ///         "value" : false
    ///       },
    ///       "userName" : {
    ///         "in" : "query",
    ///         "required" : true,
    ///         "type" : "string"
    ///       }
    ///     },
    ///     "rel" : "ShipOrder",
    ///     "templated" : true
    ///   },
    ///   {
    ///     "href" : "\/v2\/user\/marketplaces\/orders\/Amazon\/1001\/00000000000000000000000000000000000000000000000\/CancelOrder",
    ///     "method" : "POST",
    ///     "parameters" : {
    ///       "If-Match" : {
    ///         "in" : "header",
    ///         "required" : true,
    ///         "type" : "string",
    ///         "value" : "\"ca071a4580129f932a03971968ffef69\""
    ///       },
    ///       "request" : {
    ///         "in" : "body",
    ///         "properties" : {
    ///           "order_Cancel_Reason" : {
    ///             "required" : true,
    ///             "type" : "string"
    ///           }
    ///         },
    ///         "schema" : "changeOrderRequest",
    ///         "type" : "object"
    ///       },
    ///       "testMode" : {
    ///         "in" : "query",
    ///         "required" : false,
    ///         "type" : "boolean",
    ///         "value" : false
    ///       },
    ///       "userName" : {
    ///         "in" : "query",
    ///         "required" : true,
    ///         "type" : "string"
    ///       }
    ///     },
    ///     "rel" : "CancelOrder",
    ///     "templated" : true
    ///   }
    /// ]
    public var transitionLinks: [LinksChangeOrderLink]

    public init(orderHeader: OrderHeader, links: OrderLinks, orderMarketPlaceChannel: String? = nil, orderTotalTax: Double? = nil, orderTotalCommission: Double? = nil, orderPaymentMethod: String? = nil, orderPayingUtcDate: Date? = nil, orderComment: String? = nil, orderShippingFirstName: String? = nil, orderShippingLastName: String? = nil, orderShippingCivility: String? = nil, orderShippingCompanyName: String? = nil, orderShippingAddressName: String? = nil, orderShippingEmail: String? = nil, orderShippingAddressLine1: String? = nil, orderShippingAddressLine2: String? = nil, orderShippingAddressLine3: String? = nil, orderShippingAddressPostalCode: String? = nil, orderShippingAddressCity: String? = nil, orderShippingAddressStateOrRegion: String? = nil, orderShippingAddressCountryName: String? = nil, orderShippingAddressCountryIsoCodeAlpha2: String? = nil, orderShippingPhone: String? = nil, orderShippingMobilePhone: String? = nil, orderShippingPrice: Double? = nil, orderShippingMethod: String? = nil, orderShippingShippingTax: Double? = nil, orderShippingEarliestShipUtcDate: Date? = nil, orderShippingLatestShipUtcDate: Date? = nil, orderBuyerIdentifier: String? = nil, orderBuyerFirstName: String? = nil, orderBuyerLastName: String? = nil, orderBuyerCivility: String? = nil, orderBuyerCompanyName: String? = nil, orderBuyerEmail: String? = nil, orderBuyerAddressLine1: String? = nil, orderBuyerAddressLine2: String? = nil, orderBuyerAddressLine3: String? = nil, orderBuyerAddressPostalCode: String? = nil, orderBuyerAddressCity: String? = nil, orderBuyerAddressStateOrRegion: String? = nil, orderBuyerAddressCountryName: String? = nil, orderBuyerAddressCountryIsoCodeAlpha2: String? = nil, orderBuyerPhone: String? = nil, orderBuyerMobilePhone: String? = nil, orderIsPrime: Bool? = nil, orderFulfilledBy: String? = nil, orderIsBusiness: Bool? = nil, orderOrderSourceUri: URL? = nil, orderOrderItemsSourceUri: URL? = nil, orderItems: [OrderItem], transitionLinks: [LinksChangeOrderLink]) {
        self.orderHeader = orderHeader
        self.links = links
        self.orderMarketPlaceChannel = orderMarketPlaceChannel
        self.orderTotalTax = orderTotalTax
        self.orderTotalCommission = orderTotalCommission
        self.orderPaymentMethod = orderPaymentMethod
        self.orderPayingUtcDate = orderPayingUtcDate
        self.orderComment = orderComment
        self.orderShippingFirstName = orderShippingFirstName
        self.orderShippingLastName = orderShippingLastName
        self.orderShippingCivility = orderShippingCivility
        self.orderShippingCompanyName = orderShippingCompanyName
        self.orderShippingAddressName = orderShippingAddressName
        self.orderShippingEmail = orderShippingEmail
        self.orderShippingAddressLine1 = orderShippingAddressLine1
        self.orderShippingAddressLine2 = orderShippingAddressLine2
        self.orderShippingAddressLine3 = orderShippingAddressLine3
        self.orderShippingAddressPostalCode = orderShippingAddressPostalCode
        self.orderShippingAddressCity = orderShippingAddressCity
        self.orderShippingAddressStateOrRegion = orderShippingAddressStateOrRegion
        self.orderShippingAddressCountryName = orderShippingAddressCountryName
        self.orderShippingAddressCountryIsoCodeAlpha2 = orderShippingAddressCountryIsoCodeAlpha2
        self.orderShippingPhone = orderShippingPhone
        self.orderShippingMobilePhone = orderShippingMobilePhone
        self.orderShippingPrice = orderShippingPrice
        self.orderShippingMethod = orderShippingMethod
        self.orderShippingShippingTax = orderShippingShippingTax
        self.orderShippingEarliestShipUtcDate = orderShippingEarliestShipUtcDate
        self.orderShippingLatestShipUtcDate = orderShippingLatestShipUtcDate
        self.orderBuyerIdentifier = orderBuyerIdentifier
        self.orderBuyerFirstName = orderBuyerFirstName
        self.orderBuyerLastName = orderBuyerLastName
        self.orderBuyerCivility = orderBuyerCivility
        self.orderBuyerCompanyName = orderBuyerCompanyName
        self.orderBuyerEmail = orderBuyerEmail
        self.orderBuyerAddressLine1 = orderBuyerAddressLine1
        self.orderBuyerAddressLine2 = orderBuyerAddressLine2
        self.orderBuyerAddressLine3 = orderBuyerAddressLine3
        self.orderBuyerAddressPostalCode = orderBuyerAddressPostalCode
        self.orderBuyerAddressCity = orderBuyerAddressCity
        self.orderBuyerAddressStateOrRegion = orderBuyerAddressStateOrRegion
        self.orderBuyerAddressCountryName = orderBuyerAddressCountryName
        self.orderBuyerAddressCountryIsoCodeAlpha2 = orderBuyerAddressCountryIsoCodeAlpha2
        self.orderBuyerPhone = orderBuyerPhone
        self.orderBuyerMobilePhone = orderBuyerMobilePhone
        self.orderIsPrime = orderIsPrime
        self.orderFulfilledBy = orderFulfilledBy
        self.orderIsBusiness = orderIsBusiness
        self.orderOrderSourceUri = orderOrderSourceUri
        self.orderOrderItemsSourceUri = orderOrderItemsSourceUri
        self.orderItems = orderItems
        self.transitionLinks = transitionLinks
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.orderHeader = try OrderHeader(from: decoder)
        self.links = try OrderLinks(from: decoder)
        self.orderMarketPlaceChannel = try values.decodeIfPresent(String.self, forKey: "order_MarketPlaceChannel")
        self.orderTotalTax = try values.decodeIfPresent(Double.self, forKey: "order_TotalTax")
        self.orderTotalCommission = try values.decodeIfPresent(Double.self, forKey: "order_TotalCommission")
        self.orderPaymentMethod = try values.decodeIfPresent(String.self, forKey: "order_PaymentMethod")
        self.orderPayingUtcDate = try values.decodeIfPresent(Date.self, forKey: "order_PayingUtcDate")
        self.orderComment = try values.decodeIfPresent(String.self, forKey: "order_Comment")
        self.orderShippingFirstName = try values.decodeIfPresent(String.self, forKey: "order_Shipping_FirstName")
        self.orderShippingLastName = try values.decodeIfPresent(String.self, forKey: "order_Shipping_LastName")
        self.orderShippingCivility = try values.decodeIfPresent(String.self, forKey: "order_Shipping_Civility")
        self.orderShippingCompanyName = try values.decodeIfPresent(String.self, forKey: "order_Shipping_CompanyName")
        self.orderShippingAddressName = try values.decodeIfPresent(String.self, forKey: "order_Shipping_AddressName")
        self.orderShippingEmail = try values.decodeIfPresent(String.self, forKey: "order_Shipping_Email")
        self.orderShippingAddressLine1 = try values.decodeIfPresent(String.self, forKey: "order_Shipping_AddressLine1")
        self.orderShippingAddressLine2 = try values.decodeIfPresent(String.self, forKey: "order_Shipping_AddressLine2")
        self.orderShippingAddressLine3 = try values.decodeIfPresent(String.self, forKey: "order_Shipping_AddressLine3")
        self.orderShippingAddressPostalCode = try values.decodeIfPresent(String.self, forKey: "order_Shipping_AddressPostalCode")
        self.orderShippingAddressCity = try values.decodeIfPresent(String.self, forKey: "order_Shipping_AddressCity")
        self.orderShippingAddressStateOrRegion = try values.decodeIfPresent(String.self, forKey: "order_Shipping_AddressStateOrRegion")
        self.orderShippingAddressCountryName = try values.decodeIfPresent(String.self, forKey: "order_Shipping_AddressCountryName")
        self.orderShippingAddressCountryIsoCodeAlpha2 = try values.decodeIfPresent(String.self, forKey: "order_Shipping_AddressCountryIsoCodeAlpha2")
        self.orderShippingPhone = try values.decodeIfPresent(String.self, forKey: "order_Shipping_Phone")
        self.orderShippingMobilePhone = try values.decodeIfPresent(String.self, forKey: "order_Shipping_MobilePhone")
        self.orderShippingPrice = try values.decodeIfPresent(Double.self, forKey: "order_Shipping_Price")
        self.orderShippingMethod = try values.decodeIfPresent(String.self, forKey: "order_Shipping_Method")
        self.orderShippingShippingTax = try values.decodeIfPresent(Double.self, forKey: "order_Shipping_ShippingTax")
        self.orderShippingEarliestShipUtcDate = try values.decodeIfPresent(Date.self, forKey: "order_Shipping_EarliestShipUtcDate")
        self.orderShippingLatestShipUtcDate = try values.decodeIfPresent(Date.self, forKey: "order_Shipping_LatestShipUtcDate")
        self.orderBuyerIdentifier = try values.decodeIfPresent(String.self, forKey: "order_Buyer_Identifier")
        self.orderBuyerFirstName = try values.decodeIfPresent(String.self, forKey: "order_Buyer_FirstName")
        self.orderBuyerLastName = try values.decodeIfPresent(String.self, forKey: "order_Buyer_LastName")
        self.orderBuyerCivility = try values.decodeIfPresent(String.self, forKey: "order_Buyer_Civility")
        self.orderBuyerCompanyName = try values.decodeIfPresent(String.self, forKey: "order_Buyer_CompanyName")
        self.orderBuyerEmail = try values.decodeIfPresent(String.self, forKey: "order_Buyer_Email")
        self.orderBuyerAddressLine1 = try values.decodeIfPresent(String.self, forKey: "order_Buyer_AddressLine1")
        self.orderBuyerAddressLine2 = try values.decodeIfPresent(String.self, forKey: "order_Buyer_AddressLine2")
        self.orderBuyerAddressLine3 = try values.decodeIfPresent(String.self, forKey: "order_Buyer_AddressLine3")
        self.orderBuyerAddressPostalCode = try values.decodeIfPresent(String.self, forKey: "order_Buyer_AddressPostalCode")
        self.orderBuyerAddressCity = try values.decodeIfPresent(String.self, forKey: "order_Buyer_AddressCity")
        self.orderBuyerAddressStateOrRegion = try values.decodeIfPresent(String.self, forKey: "order_Buyer_AddressStateOrRegion")
        self.orderBuyerAddressCountryName = try values.decodeIfPresent(String.self, forKey: "order_Buyer_AddressCountryName")
        self.orderBuyerAddressCountryIsoCodeAlpha2 = try values.decodeIfPresent(String.self, forKey: "order_Buyer_AddressCountryIsoCodeAlpha2")
        self.orderBuyerPhone = try values.decodeIfPresent(String.self, forKey: "order_Buyer_Phone")
        self.orderBuyerMobilePhone = try values.decodeIfPresent(String.self, forKey: "order_Buyer_MobilePhone")
        self.orderIsPrime = try values.decodeIfPresent(Bool.self, forKey: "order_IsPrime")
        self.orderFulfilledBy = try values.decodeIfPresent(String.self, forKey: "order_FulfilledBy")
        self.orderIsBusiness = try values.decodeIfPresent(Bool.self, forKey: "order_IsBusiness")
        self.orderOrderSourceUri = try values.decodeIfPresent(URL.self, forKey: "order_OrderSourceUri")
        self.orderOrderItemsSourceUri = try values.decodeIfPresent(URL.self, forKey: "order_OrderItemsSourceUri")
        self.orderItems = try values.decode([OrderItem].self, forKey: "orderItems")
        self.transitionLinks = try values.decode([LinksChangeOrderLink].self, forKey: "transitionLinks")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(orderHeader, forKey: "orderHeader")
        try values.encode(links, forKey: "links")
        try values.encodeIfPresent(orderMarketPlaceChannel, forKey: "order_MarketPlaceChannel")
        try values.encodeIfPresent(orderTotalTax, forKey: "order_TotalTax")
        try values.encodeIfPresent(orderTotalCommission, forKey: "order_TotalCommission")
        try values.encodeIfPresent(orderPaymentMethod, forKey: "order_PaymentMethod")
        try values.encodeIfPresent(orderPayingUtcDate, forKey: "order_PayingUtcDate")
        try values.encodeIfPresent(orderComment, forKey: "order_Comment")
        try values.encodeIfPresent(orderShippingFirstName, forKey: "order_Shipping_FirstName")
        try values.encodeIfPresent(orderShippingLastName, forKey: "order_Shipping_LastName")
        try values.encodeIfPresent(orderShippingCivility, forKey: "order_Shipping_Civility")
        try values.encodeIfPresent(orderShippingCompanyName, forKey: "order_Shipping_CompanyName")
        try values.encodeIfPresent(orderShippingAddressName, forKey: "order_Shipping_AddressName")
        try values.encodeIfPresent(orderShippingEmail, forKey: "order_Shipping_Email")
        try values.encodeIfPresent(orderShippingAddressLine1, forKey: "order_Shipping_AddressLine1")
        try values.encodeIfPresent(orderShippingAddressLine2, forKey: "order_Shipping_AddressLine2")
        try values.encodeIfPresent(orderShippingAddressLine3, forKey: "order_Shipping_AddressLine3")
        try values.encodeIfPresent(orderShippingAddressPostalCode, forKey: "order_Shipping_AddressPostalCode")
        try values.encodeIfPresent(orderShippingAddressCity, forKey: "order_Shipping_AddressCity")
        try values.encodeIfPresent(orderShippingAddressStateOrRegion, forKey: "order_Shipping_AddressStateOrRegion")
        try values.encodeIfPresent(orderShippingAddressCountryName, forKey: "order_Shipping_AddressCountryName")
        try values.encodeIfPresent(orderShippingAddressCountryIsoCodeAlpha2, forKey: "order_Shipping_AddressCountryIsoCodeAlpha2")
        try values.encodeIfPresent(orderShippingPhone, forKey: "order_Shipping_Phone")
        try values.encodeIfPresent(orderShippingMobilePhone, forKey: "order_Shipping_MobilePhone")
        try values.encodeIfPresent(orderShippingPrice, forKey: "order_Shipping_Price")
        try values.encodeIfPresent(orderShippingMethod, forKey: "order_Shipping_Method")
        try values.encodeIfPresent(orderShippingShippingTax, forKey: "order_Shipping_ShippingTax")
        try values.encodeIfPresent(orderShippingEarliestShipUtcDate, forKey: "order_Shipping_EarliestShipUtcDate")
        try values.encodeIfPresent(orderShippingLatestShipUtcDate, forKey: "order_Shipping_LatestShipUtcDate")
        try values.encodeIfPresent(orderBuyerIdentifier, forKey: "order_Buyer_Identifier")
        try values.encodeIfPresent(orderBuyerFirstName, forKey: "order_Buyer_FirstName")
        try values.encodeIfPresent(orderBuyerLastName, forKey: "order_Buyer_LastName")
        try values.encodeIfPresent(orderBuyerCivility, forKey: "order_Buyer_Civility")
        try values.encodeIfPresent(orderBuyerCompanyName, forKey: "order_Buyer_CompanyName")
        try values.encodeIfPresent(orderBuyerEmail, forKey: "order_Buyer_Email")
        try values.encodeIfPresent(orderBuyerAddressLine1, forKey: "order_Buyer_AddressLine1")
        try values.encodeIfPresent(orderBuyerAddressLine2, forKey: "order_Buyer_AddressLine2")
        try values.encodeIfPresent(orderBuyerAddressLine3, forKey: "order_Buyer_AddressLine3")
        try values.encodeIfPresent(orderBuyerAddressPostalCode, forKey: "order_Buyer_AddressPostalCode")
        try values.encodeIfPresent(orderBuyerAddressCity, forKey: "order_Buyer_AddressCity")
        try values.encodeIfPresent(orderBuyerAddressStateOrRegion, forKey: "order_Buyer_AddressStateOrRegion")
        try values.encodeIfPresent(orderBuyerAddressCountryName, forKey: "order_Buyer_AddressCountryName")
        try values.encodeIfPresent(orderBuyerAddressCountryIsoCodeAlpha2, forKey: "order_Buyer_AddressCountryIsoCodeAlpha2")
        try values.encodeIfPresent(orderBuyerPhone, forKey: "order_Buyer_Phone")
        try values.encodeIfPresent(orderBuyerMobilePhone, forKey: "order_Buyer_MobilePhone")
        try values.encodeIfPresent(orderIsPrime, forKey: "order_IsPrime")
        try values.encodeIfPresent(orderFulfilledBy, forKey: "order_FulfilledBy")
        try values.encodeIfPresent(orderIsBusiness, forKey: "order_IsBusiness")
        try values.encodeIfPresent(orderOrderSourceUri, forKey: "order_OrderSourceUri")
        try values.encodeIfPresent(orderOrderItemsSourceUri, forKey: "order_OrderItemsSourceUri")
        try values.encode(orderItems, forKey: "orderItems")
        try values.encode(transitionLinks, forKey: "transitionLinks")
    }
}

public struct LinksChangeOrderLink: Codable {
    public var beezUPCommonLink3: BeezUPCommonLink3
    /// Indicate the relation name related to the link
    ///
    /// Example: "self"
    public var rel: String?

    public init(beezUPCommonLink3: BeezUPCommonLink3, rel: String? = nil) {
        self.beezUPCommonLink3 = beezUPCommonLink3
        self.rel = rel
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.beezUPCommonLink3 = try BeezUPCommonLink3(from: decoder)
        self.rel = try values.decodeIfPresent(String.self, forKey: "rel")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(beezUPCommonLink3, forKey: "beezUPCommonLink3")
        try values.encodeIfPresent(rel, forKey: "rel")
    }
}

public struct OrderIndex: Codable {
    /// Gives you all entry point operations you can do on this API
    public var links: OrderIndexLinks
    /// Gives you all the LOV to get the translations realated to operation name, codes, property names and statuses.
    public var lovLinks: OrderIndexLovLinks

    public init(links: OrderIndexLinks, lovLinks: OrderIndexLovLinks) {
        self.links = links
        self.lovLinks = lovLinks
    }
}

/// Gives you all entry point operations you can do on this API
public struct OrderIndexLinks: Codable {
    public var this: BeezUPCommonLink3
    public var status: BeezUPCommonLink3
    public var harvest: BeezUPCommonLink3
    public var setMerchantInfos: BeezUPCommonLink3
    public var clearMerchantInfos: BeezUPCommonLink3
    public var export: BeezUPCommonLink3
    public var autoTransitions: BeezUPCommonLink3
    public var exportations: BeezUPCommonLink3?
    public var orders: BeezUPCommonLink3
    public var lightOrders: BeezUPCommonLink3

    public init(this: BeezUPCommonLink3, status: BeezUPCommonLink3, harvest: BeezUPCommonLink3, setMerchantInfos: BeezUPCommonLink3, clearMerchantInfos: BeezUPCommonLink3, export: BeezUPCommonLink3, autoTransitions: BeezUPCommonLink3, exportations: BeezUPCommonLink3? = nil, orders: BeezUPCommonLink3, lightOrders: BeezUPCommonLink3) {
        self.this = this
        self.status = status
        self.harvest = harvest
        self.setMerchantInfos = setMerchantInfos
        self.clearMerchantInfos = clearMerchantInfos
        self.export = export
        self.autoTransitions = autoTransitions
        self.exportations = exportations
        self.orders = orders
        self.lightOrders = lightOrders
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case status
        case harvest
        case setMerchantInfos
        case clearMerchantInfos
        case export
        case autoTransitions
        case exportations
        case orders
        case lightOrders
    }
}

/// Gives you all the LOV to get the translations realated to operation name, codes, property names and statuses.
public struct OrderIndexLovLinks: Codable {
    /// Describe the way you have to follow to get access to the LOV
    public var orderChangeBusinessOperationType: BeezUPCommonLOVLink3
    /// Describe the way you have to follow to get access to the LOV
    public var orderState: BeezUPCommonLOVLink3
    /// Describe the way you have to follow to get access to the LOV
    public var orderProperty: BeezUPCommonLOVLink3
    /// Describe the way you have to follow to get access to the LOV
    public var orderPropertyPosted: BeezUPCommonLOVLink3

    public init(orderChangeBusinessOperationType: BeezUPCommonLOVLink3, orderState: BeezUPCommonLOVLink3, orderProperty: BeezUPCommonLOVLink3, orderPropertyPosted: BeezUPCommonLOVLink3) {
        self.orderChangeBusinessOperationType = orderChangeBusinessOperationType
        self.orderState = orderState
        self.orderProperty = orderProperty
        self.orderPropertyPosted = orderPropertyPosted
    }
}

/// The list of actions you can do from the order list response
public struct OrderListLinks: Codable {
    public var harvest: BeezUPCommonLink3
    public var setMerchantInfos: BeezUPCommonLink3
    public var clearMerchantInfos: BeezUPCommonLink3
    public var export: BeezUPCommonLink3
    public var status: BeezUPCommonLink3

    public init(harvest: BeezUPCommonLink3, setMerchantInfos: BeezUPCommonLink3, clearMerchantInfos: BeezUPCommonLink3, export: BeezUPCommonLink3, status: BeezUPCommonLink3) {
        self.harvest = harvest
        self.setMerchantInfos = setMerchantInfos
        self.clearMerchantInfos = clearMerchantInfos
        self.export = export
        self.status = status
    }
}

public struct OrderListLightLinks: Codable {
    /// The list of actions you can do from the order list response
    public var orderListLinks: OrderListLinks
    public var this: BeezUPCommonLink3

    public init(orderListLinks: OrderListLinks, this: BeezUPCommonLink3) {
        self.orderListLinks = orderListLinks
        self.this = this
    }

    public init(from decoder: Decoder) throws {
        self.orderListLinks = try OrderListLinks(from: decoder)
        self.this = try BeezUPCommonLink3(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(orderListLinks, forKey: "orderListLinks")
        try values.encode(this, forKey: "self")
    }
}

public struct OrderListFullLinks: Codable {
    /// The list of actions you can do from the order list response
    public var orderListLinks: OrderListLinks
    public var this: BeezUPCommonLink3

    public init(orderListLinks: OrderListLinks, this: BeezUPCommonLink3) {
        self.orderListLinks = orderListLinks
        self.this = this
    }

    public init(from decoder: Decoder) throws {
        self.orderListLinks = try OrderListLinks(from: decoder)
        self.this = try BeezUPCommonLink3(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(orderListLinks, forKey: "orderListLinks")
        try values.encode(this, forKey: "self")
    }
}

/// The order list with minimum information we have from the orders.\
/// The paginationResult properties can be null if the list is empty.
public struct OrderListLight: Codable {
    /// Example:
    ///
    /// {
    ///   "entryCount" : "25",
    ///   "links" : {
    ///     "first" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "1",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "last" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "38",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "next" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "2",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     }
    ///   },
    ///   "pageCount" : "38",
    ///   "totalEntryCount" : "943"
    /// }
    public var paginationResult: BeezUPCommonPaginationResult?
    public var orders: [OrderHeader]
    public var links: OrderListLightLinks

    public init(paginationResult: BeezUPCommonPaginationResult? = nil, orders: [OrderHeader], links: OrderListLightLinks) {
        self.paginationResult = paginationResult
        self.orders = orders
        self.links = links
    }
}

/// The order list with all information we have from the orders and its items.\
/// The paginationResult properties can be null if the list is empty.
public struct OrderListFull: Codable {
    /// Example:
    ///
    /// {
    ///   "entryCount" : "25",
    ///   "links" : {
    ///     "first" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "1",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "last" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "38",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "next" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "2",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     }
    ///   },
    ///   "pageCount" : "38",
    ///   "totalEntryCount" : "943"
    /// }
    public var paginationResult: BeezUPCommonPaginationResult?
    public var orders: [Order]
    public var links: OrderListFullLinks

    public init(paginationResult: BeezUPCommonPaginationResult? = nil, orders: [Order], links: OrderListFullLinks) {
        self.paginationResult = paginationResult
        self.orders = orders
        self.links = links
    }
}

/// Describe the history related to an order
public struct OrderHistory: Codable {
    /// The list of change order operation
    public var changeOrderReportings: [ChangeOrderReporting]?
    public var harvestOrderReportings: [HarvestOrderReporting]?
    public var lastModificationUtcDate: Date?

    public init(changeOrderReportings: [ChangeOrderReporting]? = nil, harvestOrderReportings: [HarvestOrderReporting]? = nil, lastModificationUtcDate: Date? = nil) {
        self.changeOrderReportings = changeOrderReportings
        self.harvestOrderReportings = harvestOrderReportings
        self.lastModificationUtcDate = lastModificationUtcDate
    }
}

/// Indicates the origin of the operation
///
/// Example: "Api"
public enum SourceType: String, Codable, CaseIterable {
    case api = "Api"
    case go = "Go"
}

/// The reporting related to a change order operation
public struct ChangeOrderReporting: Codable {
    /// The execution identifier
    public var executionUUID: String?
    /// Example: "ShipOrder"
    public var changeOrderType: String?
    /// Indicates the origin of the operation
    ///
    /// Example: "Api"
    public var sourceType: SourceType?
    /// The user identifier
    ///
    /// Example: "8a7fbdec-9e71-472e-9974-27d5c1d57cf8"
    public var sourceUserID: String?
    /// Example: "Guillaume Tell"
    public var sourceUserName: String?
    /// The creation UTC date of the execution
    ///
    /// Example: "2017-04-01T13:10:03Z"
    public var creationUtcDate: Date?
    /// The processing status of the execution
    ///
    /// Example: "Done"
    public var processingStatus: String?
    /// The last update UTC date of the execution
    ///
    /// Example: "2017-04-01T13:10:05Z"
    public var lastUpdateUtcDate: Date?
    /// The error message during the execution
    ///
    /// Example: "This is an error message"
    public var errorMessage: String?
    /// The IP address who request this operation
    ///
    /// Example: "127.0.0.1"
    public var ipAddress: String?
    /// This operation was a test
    ///
    /// Example: false
    public var isTestMode: Bool?
    public var details: [String: [String: AnyJSON]]?

    public init(executionUUID: String? = nil, changeOrderType: String? = nil, sourceType: SourceType? = nil, sourceUserID: String? = nil, sourceUserName: String? = nil, creationUtcDate: Date? = nil, processingStatus: String? = nil, lastUpdateUtcDate: Date? = nil, errorMessage: String? = nil, ipAddress: String? = nil, isTestMode: Bool? = nil, details: [String: [String: AnyJSON]]? = nil) {
        self.executionUUID = executionUUID
        self.changeOrderType = changeOrderType
        self.sourceType = sourceType
        self.sourceUserID = sourceUserID
        self.sourceUserName = sourceUserName
        self.creationUtcDate = creationUtcDate
        self.processingStatus = processingStatus
        self.lastUpdateUtcDate = lastUpdateUtcDate
        self.errorMessage = errorMessage
        self.ipAddress = ipAddress
        self.isTestMode = isTestMode
        self.details = details
    }

    private enum CodingKeys: String, CodingKey {
        case executionUUID
        case changeOrderType
        case sourceType
        case sourceUserID = "sourceUserId"
        case sourceUserName
        case creationUtcDate
        case processingStatus
        case lastUpdateUtcDate
        case errorMessage
        case ipAddress
        case isTestMode = "testMode"
        case details
    }
}

/// The reporting related to a harvest order operation
public struct HarvestOrderReporting: Codable {
    /// The execution identifier
    public var executionUUID: String?
    /// The creation UTC date of the execution
    ///
    /// Example: "2017-04-01T13:10:03Z"
    public var creationUtcDate: Date?
    /// The processing status of the execution
    ///
    /// Example: "Done"
    public var processingStatus: String?
    /// The last update UTC date of the execution
    ///
    /// Example: "2017-04-01T13:10:05Z"
    public var lastUpdateUtcDate: Date?
    /// The warning message during the execution
    ///
    /// Example: "This is an error message"
    public var errorMessage: String?
    /// The warning message during the execution
    ///
    /// Example: "This is a warning"
    public var warningMessage: String?
    /// BeezUP order status. Unified for all marketplaces.
    ///
    /// Example: "Shipped"
    public var beezUPStatus: String?
    /// The order marketplace status
    ///
    /// Example: "In_progress_3"
    public var marketplaceStatus: String?
    /// The marketplace order status forced by BeezUP during the order change oepration. This could happend when there is no status on the marketplace side.
    ///
    /// Example: "In_progress_3"
    public var beezUPForcedStatus: String?

    public init(executionUUID: String? = nil, creationUtcDate: Date? = nil, processingStatus: String? = nil, lastUpdateUtcDate: Date? = nil, errorMessage: String? = nil, warningMessage: String? = nil, beezUPStatus: String? = nil, marketplaceStatus: String? = nil, beezUPForcedStatus: String? = nil) {
        self.executionUUID = executionUUID
        self.creationUtcDate = creationUtcDate
        self.processingStatus = processingStatus
        self.lastUpdateUtcDate = lastUpdateUtcDate
        self.errorMessage = errorMessage
        self.warningMessage = warningMessage
        self.beezUPStatus = beezUPStatus
        self.marketplaceStatus = marketplaceStatus
        self.beezUPForcedStatus = beezUPForcedStatus
    }
}

/// Contains all change order operations you want to make.  (max 100 items per call)
public struct ChangeOrderListRequest: Codable {
    /// The change order operations
    public var changeOrders: [ChangeOrderListRequestItem]

    public init(changeOrders: [ChangeOrderListRequestItem]) {
        self.changeOrders = changeOrders
    }
}

/// Contains the order identifier and the change order request
public struct ChangeOrderListRequestItem: Codable {
    public var order: OrderIdentifierWithETag
    /// All properties with the prefix order_ are translated in the list of values /user/lov#OrderMetaInfoPosted
    ///
    /// Example:
    ///
    /// {
    ///   "order_Shipping_CarrierName" : "La poste",
    ///   "order_Shipping_EstimatedDeliveryDate" : "2014-09-24T09:58:00Z",
    ///   "order_Shipping_FulfillmentDate" : "2014-09-23T09:58:00Z",
    ///   "order_Shipping_ShipperTrackingNumber" : "1H01845163783",
    ///   "order_Shipping_ShippingUrl" : "https:\/\/trackingpackage.com?number=1H01845163783"
    /// }
    public var changeOrderRequest: [String: String]?

    public init(order: OrderIdentifierWithETag, changeOrderRequest: [String: String]? = nil) {
        self.order = order
        self.changeOrderRequest = changeOrderRequest
    }
}

public struct OrderIdentifierWithETag: Codable {
    public var orderIdentifier: OrderIdentifier
    /// ETag value to identify the order.\
    /// This information is required for the operation GetOrder and ChangeOrder.\
    /// For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3
    ///
    /// Example: "ca071a4580129f932a03971968ffef69"
    public var etag: String

    public init(orderIdentifier: OrderIdentifier, etag: String) {
        self.orderIdentifier = orderIdentifier
        self.etag = etag
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.orderIdentifier = try OrderIdentifier(from: decoder)
        self.etag = try values.decode(String.self, forKey: "etag")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(orderIdentifier, forKey: "orderIdentifier")
        try values.encode(etag, forKey: "etag")
    }
}

/// The response given by the batch operation
public struct BatchOrderOperationResponse: Codable {
    public var operations: [OrderOperationResponse]

    public init(operations: [OrderOperationResponse]) {
        self.operations = operations
    }
}

/// The response given by the batch operation for an order
public struct OrderOperationResponse: Codable {
    public var order: OrderIdentifier
    /// Indicates if the operation succeed or not
    ///
    /// Example: true
    public var isSuccess: Bool
    /// Indicates the http status corresponding to the individual operation
    ///
    /// Example: 204
    public var status: Int
    /// The error list
    public var errors: [BeezUPCommonUserErrorMessage]?

    public init(order: OrderIdentifier, isSuccess: Bool, status: Int, errors: [BeezUPCommonUserErrorMessage]? = nil) {
        self.order = order
        self.isSuccess = isSuccess
        self.status = status
        self.errors = errors
    }

    private enum CodingKeys: String, CodingKey {
        case order
        case isSuccess = "success"
        case status
        case errors
    }
}

public struct OrderListFullWithLinks: Codable {
    public var orders: [OrderWithLinks]
    public var links: OrderListFullLinks
    /// Example:
    ///
    /// {
    ///   "entryCount" : "25",
    ///   "links" : {
    ///     "first" : {
    ///       "href" : "\/merchant\/orders\/v1\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "1",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "last" : {
    ///       "href" : "\/merchant\/orders\/v1\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "38",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "next" : {
    ///       "href" : "\/merchant\/orders\/v1\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "2",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     }
    ///   },
    ///   "pageCount" : "38",
    ///   "totalEntryCount" : "943"
    /// }
    public var paginationResult: PaginationResult

    public init(orders: [OrderWithLinks], links: OrderListFullLinks, paginationResult: PaginationResult) {
        self.orders = orders
        self.links = links
        self.paginationResult = paginationResult
    }
}

public struct OrderListLightWithLinks: Codable {
    public var orders: [OrderHeaderWithLinks]
    public var links: OrderListLightLinks
    /// Example:
    ///
    /// {
    ///   "entryCount" : "25",
    ///   "links" : {
    ///     "first" : {
    ///       "href" : "\/merchant\/orders\/v1\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "1",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "last" : {
    ///       "href" : "\/merchant\/orders\/v1\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "38",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "next" : {
    ///       "href" : "\/merchant\/orders\/v1\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "2",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     }
    ///   },
    ///   "pageCount" : "38",
    ///   "totalEntryCount" : "943"
    /// }
    public var paginationResult: PaginationResult

    public init(orders: [OrderHeaderWithLinks], links: OrderListLightLinks, paginationResult: PaginationResult) {
        self.orders = orders
        self.links = links
        self.paginationResult = paginationResult
    }
}

public struct OrderWithLinks: Codable {
    public var order: Order
    public var links: OrderLinks
    /// Contains the authorized change actions for an order
    ///
    /// Example:
    ///
    /// [
    ///   {
    ///     "href" : "\/v2\/user\/marketplaces\/orders\/Amazon\/1001\/00000000000000000000000000000000000000000000000\/ShipOrder",
    ///     "method" : "POST",
    ///     "parameters" : {
    ///       "If-Match" : {
    ///         "in" : "header",
    ///         "required" : true,
    ///         "type" : "string",
    ///         "value" : "\"ca071a4580129f932a03971968ffef69\""
    ///       },
    ///       "request" : {
    ///         "in" : "body",
    ///         "properties" : {
    ///           "order_Shipping_CarrierName" : {
    ///             "lovLink" : {
    ///               "href" : "\/v2\/user\/PriceMinisterCarrierName"
    ///             },
    ///             "lovRequired" : true,
    ///             "required" : true,
    ///             "type" : "string"
    ///           },
    ///           "order_Shipping_FulfillmentDate" : {
    ///             "required" : true,
    ///             "type" : "date-time"
    ///           },
    ///           "order_Shipping_Method" : {
    ///             "lovLink" : {
    ///               "href" : "\/v2\/user\/ShippingMethod_PriceMinister"
    ///             },
    ///             "lovRequired" : false,
    ///             "required" : true,
    ///             "type" : "string"
    ///           },
    ///           "order_Shipping_ShipperTrackingNumber" : {
    ///             "required" : true,
    ///             "type" : "string"
    ///           }
    ///         },
    ///         "schema" : "changeOrderRequest",
    ///         "type" : "object"
    ///       },
    ///       "testMode" : {
    ///         "in" : "query",
    ///         "required" : false,
    ///         "type" : "boolean",
    ///         "value" : false
    ///       },
    ///       "userName" : {
    ///         "in" : "query",
    ///         "required" : true,
    ///         "type" : "string"
    ///       }
    ///     },
    ///     "rel" : "ShipOrder",
    ///     "templated" : true
    ///   },
    ///   {
    ///     "href" : "\/v2\/user\/marketplaces\/orders\/Amazon\/1001\/00000000000000000000000000000000000000000000000\/CancelOrder",
    ///     "method" : "POST",
    ///     "parameters" : {
    ///       "If-Match" : {
    ///         "in" : "header",
    ///         "required" : true,
    ///         "type" : "string",
    ///         "value" : "\"ca071a4580129f932a03971968ffef69\""
    ///       },
    ///       "request" : {
    ///         "in" : "body",
    ///         "properties" : {
    ///           "order_Cancel_Reason" : {
    ///             "required" : true,
    ///             "type" : "string"
    ///           }
    ///         },
    ///         "schema" : "changeOrderRequest",
    ///         "type" : "object"
    ///       },
    ///       "testMode" : {
    ///         "in" : "query",
    ///         "required" : false,
    ///         "type" : "boolean",
    ///         "value" : false
    ///       },
    ///       "userName" : {
    ///         "in" : "query",
    ///         "required" : true,
    ///         "type" : "string"
    ///       }
    ///     },
    ///     "rel" : "CancelOrder",
    ///     "templated" : true
    ///   }
    /// ]
    public var transitionLinks: [LinksChangeOrderLink]

    public init(order: Order, links: OrderLinks, transitionLinks: [LinksChangeOrderLink]) {
        self.order = order
        self.links = links
        self.transitionLinks = transitionLinks
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.order = try Order(from: decoder)
        self.links = try OrderLinks(from: decoder)
        self.transitionLinks = try values.decode([LinksChangeOrderLink].self, forKey: "transitionLinks")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(order, forKey: "order")
        try values.encode(links, forKey: "links")
        try values.encode(transitionLinks, forKey: "transitionLinks")
    }
}

public struct OrderHeaderWithLinks: Codable {
    /// Describe the basic information related to an order. All properties with the prefix order_ are translated in the list of values /user/lov/OrderMetaInfoOrderDetails
    public var orderHeader: OrderHeader
    public var links: OrderHeaderLinks

    public init(orderHeader: OrderHeader, links: OrderHeaderLinks) {
        self.orderHeader = orderHeader
        self.links = links
    }

    public init(from decoder: Decoder) throws {
        self.orderHeader = try OrderHeader(from: decoder)
        self.links = try OrderHeaderLinks(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(orderHeader, forKey: "orderHeader")
        try values.encode(links, forKey: "links")
    }
}

public struct LinksChangeOrderV3Link: Codable {
    public var link3: Link3
    /// Indicate the relation name related to the link
    ///
    /// Example: "self"
    public var rel: String?

    public init(link3: Link3, rel: String? = nil) {
        self.link3 = link3
        self.rel = rel
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.link3 = try Link3(from: decoder)
        self.rel = try values.decodeIfPresent(String.self, forKey: "rel")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(link3, forKey: "link3")
        try values.encodeIfPresent(rel, forKey: "rel")
    }
}

public struct ErrorResponseMessage: Codable {
    public var errors: [UserErrorMessage]

    public init(errors: [UserErrorMessage]) {
        self.errors = errors
    }
}

/// Contains all change order operations you want to make.  (max 100 items per call)
public struct ChangeOrderListRequestV2: Codable {
    /// The change order operations
    public var changeOrders: [ChangeOrderListRequestItemV2]

    public init(changeOrders: [ChangeOrderListRequestItemV2]) {
        self.changeOrders = changeOrders
    }
}

/// This object is used by LOV apis
public struct ListOfValueItem: Codable {
    public var position: Int?
    /// Example: "FRA"
    public var codeIdentifier: String
    /// Example: "France"
    public var translationText: String?
    public var intIdentifier: Int

    public init(position: Int? = nil, codeIdentifier: String, translationText: String? = nil, intIdentifier: Int) {
        self.position = position
        self.codeIdentifier = codeIdentifier
        self.translationText = translationText
        self.intIdentifier = intIdentifier
    }
}

public struct UserErrorMessage: Codable {
    /// The documentation related to this operation.
    ///
    /// Example: "https://api-docs.imn.io/#operation/EnableChannelCatalog"
    public var docURL: URL?
    /// Error Code
    public var code: String
    /// The error message
    ///
    /// Example:
    ///
    /// "There is already an importation in progress: b24d0dd8-a561-478a-9b26-34f573f03527
    /// "
    public var message: String
    /// If the error is translated, the culture name will be indicated
    ///
    /// Example: "en"
    public var cultureName: String?
    /// A dictionary string/object
    public var arguments: [String: [String: AnyJSON]]?

    public init(docURL: URL? = nil, code: String, message: String, cultureName: String? = nil, arguments: [String: [String: AnyJSON]]? = nil) {
        self.docURL = docURL
        self.code = code
        self.message = message
        self.cultureName = cultureName
        self.arguments = arguments
    }

    private enum CodingKeys: String, CodingKey {
        case docURL = "docUrl"
        case code
        case message
        case cultureName
        case arguments
    }
}

/// Example:
///
/// {
///   "entryCount" : "25",
///   "links" : {
///     "first" : {
///       "href" : "\/merchant\/orders\/v1\/list\/full",
///       "method" : "POST",
///       "parameters" : [
///         {
///           "in" : "body",
///           "name" : "request",
///           "schema" : "orderListRequest",
///           "type" : "object",
///           "value" : {
///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
///             "pageNumber" : "1",
///             "pageSize" : "25"
///           }
///         }
///       ]
///     },
///     "last" : {
///       "href" : "\/merchant\/orders\/v1\/list\/full",
///       "method" : "POST",
///       "parameters" : [
///         {
///           "in" : "body",
///           "name" : "request",
///           "schema" : "orderListRequest",
///           "type" : "object",
///           "value" : {
///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
///             "pageNumber" : "38",
///             "pageSize" : "25"
///           }
///         }
///       ]
///     },
///     "next" : {
///       "href" : "\/merchant\/orders\/v1\/list\/full",
///       "method" : "POST",
///       "parameters" : [
///         {
///           "in" : "body",
///           "name" : "request",
///           "schema" : "orderListRequest",
///           "type" : "object",
///           "value" : {
///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
///             "pageNumber" : "2",
///             "pageSize" : "25"
///           }
///         }
///       ]
///     }
///   },
///   "pageCount" : "38",
///   "totalEntryCount" : "943"
/// }
public struct PaginationResult: Codable {
    /// The entry count currently returned
    ///
    /// Example: 25
    public var entryCount: Int
    /// The page count
    ///
    /// Example: 38
    public var pageCount: Int
    /// The total entry count
    ///
    /// Example: 943
    public var totalEntryCount: Int
    /// The navigation links 'first', 'last', 'next', 'previous'
    public var links: PaginationResultLinks

    public init(entryCount: Int, pageCount: Int, totalEntryCount: Int, links: PaginationResultLinks) {
        self.entryCount = entryCount
        self.pageCount = pageCount
        self.totalEntryCount = totalEntryCount
        self.links = links
    }
}

/// Contains the order identifier and the change order request
public struct ChangeOrderListRequestItemV2: Codable {
    public var order: OrderIdentifier
    /// All properties with the prefix order_ are translated in the list of values /user/lov#OrderMetaInfoPosted
    ///
    /// Example:
    ///
    /// {
    ///   "order_Shipping_CarrierName" : "La poste",
    ///   "order_Shipping_EstimatedDeliveryDate" : "2014-09-24T09:58:00Z",
    ///   "order_Shipping_FulfillmentDate" : "2014-09-23T09:58:00Z",
    ///   "order_Shipping_ShipperTrackingNumber" : "1H01845163783",
    ///   "order_Shipping_ShippingUrl" : "https:\/\/trackingpackage.com?number=1H01845163783"
    /// }
    public var changeOrderRequest: [String: String]?

    public init(order: OrderIdentifier, changeOrderRequest: [String: String]? = nil) {
        self.order = order
        self.changeOrderRequest = changeOrderRequest
    }
}

/// Indicates on which date you want to make the filter
public enum OrderListDateSearchType: String, Codable, CaseIterable {
    case modification = "Modification"
    case purchase = "Purchase"
    case marketPlaceModification = "MarketPlaceModification"
}

/// The navigation links 'first', 'last', 'next', 'previous'
public struct PaginationResultLinks: Codable {
    public var first: Link3
    public var last: Link3
    public var previous: Link3?
    public var next: Link3?

    public init(first: Link3, last: Link3, previous: Link3? = nil, next: Link3? = nil) {
        self.first = first
        self.last = last
        self.previous = previous
        self.next = next
    }
}

public struct ExchangedMessagesItem: Codable {
    public var operationName: String
    public var requestUri: URL?
    public var responseUri: URL?
    public var requestUtcDate: Date?
    public var responseUtcDate: Date?

    public init(operationName: String, requestUri: URL? = nil, responseUri: URL? = nil, requestUtcDate: Date? = nil, responseUtcDate: Date? = nil) {
        self.operationName = operationName
        self.requestUri = requestUri
        self.responseUri = responseUri
        self.requestUtcDate = requestUtcDate
        self.responseUtcDate = responseUtcDate
    }
}

public struct Link3: Codable {
    /// The label corresponding to the link. This label is automatically translated based on the Accept-Language http header.
    ///
    /// Example: "The translated label"
    public var label: String?
    /// The documentation related to this operation.
    ///
    /// Example: "https://api-docs.imn.io/#operation/EnableChannelCatalog"
    public var docURL: URL?
    /// The description of the link
    ///
    /// Example: "This is a description link"
    public var description: String?
    /// Indicate the relative uri for this link
    ///
    /// Example: "/merchant/orders/v1/{marketplaceCode}/{IMNOrderId}"
    public var href: String
    /// The operationId to call.
    ///
    /// Example: "GetOrder"
    public var operationID: String?
    /// Indicate the http method to use on this link
    ///
    /// Example: "GET"
    public var method: HTTPMethod?
    public var parameters: [String: LinkParameter3]?
    /// Indicates whether the href is templated or not
    public var isURLTemplated: Bool?
    /// Indicates whether all required params have been provided
    public var isAllRequiredParamsProvided: Bool?
    /// Indicates whether all optionals params have been provided
    public var isAllOptionalParamsProvided: Bool?
    public var info: InfoSummaries?
    /// Indicate the relation name related to the link
    public var rel: String?

    public init(label: String? = nil, docURL: URL? = nil, description: String? = nil, href: String, operationID: String? = nil, method: HTTPMethod? = nil, parameters: [String: LinkParameter3]? = nil, isURLTemplated: Bool? = nil, isAllRequiredParamsProvided: Bool? = nil, isAllOptionalParamsProvided: Bool? = nil, info: InfoSummaries? = nil, rel: String? = nil) {
        self.label = label
        self.docURL = docURL
        self.description = description
        self.href = href
        self.operationID = operationID
        self.method = method
        self.parameters = parameters
        self.isURLTemplated = isURLTemplated
        self.isAllRequiredParamsProvided = isAllRequiredParamsProvided
        self.isAllOptionalParamsProvided = isAllOptionalParamsProvided
        self.info = info
        self.rel = rel
    }

    private enum CodingKeys: String, CodingKey {
        case label
        case docURL = "docUrl"
        case description
        case href
        case operationID = "operationId"
        case method
        case parameters
        case isURLTemplated = "urlTemplated"
        case isAllRequiredParamsProvided = "allRequiredParamsProvided"
        case isAllOptionalParamsProvided = "allOptionalParamsProvided"
        case info
        case rel
    }
}

/// Indicate the http method to use on this link
///
/// Example: "GET"
public enum HTTPMethod: String, Codable, CaseIterable {
    case get = "GET"
    case post = "POST"
    case patch = "PATCH"
    case delete = "DELETE"
    case put = "PUT"
    case head = "HEAD"
}

public struct InfoSummaries: Codable {
    public var successes: [SuccessSummary]?
    public var errors: [ErrorSummary]?
    public var warnings: [WarningSummary]?
    public var informations: [InfoSummary]?

    public init(successes: [SuccessSummary]? = nil, errors: [ErrorSummary]? = nil, warnings: [WarningSummary]? = nil, informations: [InfoSummary]? = nil) {
        self.successes = successes
        self.errors = errors
        self.warnings = warnings
        self.informations = informations
    }
}

public struct OrderHarvestErrorValue: Codable {
    public var technicalCodePropertyName: String
    public var errorMessage: String

    public init(technicalCodePropertyName: String, errorMessage: String) {
        self.technicalCodePropertyName = technicalCodePropertyName
        self.errorMessage = errorMessage
    }
}

public struct LinkParameter3: Codable {
    /// The label corresponding to the link parameter. This label is automatically translated based on the Accept-Language http header.
    ///
    /// Example: "The translated label"
    public var label: String?
    /// The value of the parameter. It can be an integer a string or an object.
    public var value: [String: AnyJSON]?
    /// Example: true
    public var isRequired: Bool
    /// * path: if the parameter must be pass in the path uri
    /// * header: if the parameter must be passed in http header
    /// * query: if the parameter must be passed in querystring
    /// * body: if the parameter must be passed in the body
    /// * file: if the parameter must be passed in a multipart/form-data (https://swagger.io/docs/specification/2-0/file-upload/)
    ///
    /// Example: "path"
    public var `in`: ParameterIn
    /// Describe the way you have to follow to get access to the LOV
    public var lovLink: LOVLink3?
    /// If true, you MUST indicate a value from the list of values otherwise it's a freetext
    ///
    /// Example: true
    public var isLovRequired: Bool?
    /// Description of the parameter
    ///
    /// Example: "the store identifier"
    public var description: String?
    /// Schema of the parameter
    ///
    /// Example: "orderListRequest"
    public var schema: String?
    /// The regular expression to validate the value
    ///
    /// Example: "*.-api$"
    public var pattern: String?
    /// If the parameter is an object with flexible properties (additionProperties/dictionary), we will describe the properties of the object.
    public var properties: [String: AnyJSON]?

    public init(label: String? = nil, value: [String: AnyJSON]? = nil, isRequired: Bool? = nil, `in`: ParameterIn, lovLink: LOVLink3? = nil, isLovRequired: Bool? = nil, description: String? = nil, schema: String? = nil, pattern: String? = nil, properties: [String: AnyJSON]? = nil) {
        self.label = label
        self.value = value
        self.isRequired = isRequired ?? false
        self.in = `in`
        self.lovLink = lovLink
        self.isLovRequired = isLovRequired
        self.description = description
        self.schema = schema
        self.pattern = pattern
        self.properties = properties
    }

    private enum CodingKeys: String, CodingKey {
        case label
        case value
        case isRequired = "required"
        case `in` = "in"
        case lovLink
        case isLovRequired = "lovRequired"
        case description
        case schema
        case pattern
        case properties
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        self.label = try values.decodeIfPresent(String.self, forKey: .label)
        self.value = try values.decodeIfPresent([String: AnyJSON].self, forKey: .value)
        self.isRequired = try values.decodeIfPresent(Bool.self, forKey: .isRequired) ?? false
        self.in = try values.decode(ParameterIn.self, forKey: .`in`)
        self.lovLink = try values.decodeIfPresent(LOVLink3.self, forKey: .lovLink)
        self.isLovRequired = try values.decodeIfPresent(Bool.self, forKey: .isLovRequired)
        self.description = try values.decodeIfPresent(String.self, forKey: .description)
        self.schema = try values.decodeIfPresent(String.self, forKey: .schema)
        self.pattern = try values.decodeIfPresent(String.self, forKey: .pattern)
        self.properties = try values.decodeIfPresent([String: AnyJSON].self, forKey: .properties)
    }
}

public struct SuccessSummary: Codable {
    public var successCode: String?
    public var successMessage: String?
    public var successArguments: [String: String]?
    public var propertyName: String?
    public var propertyValue: String?
    public var objectName: String?

    public init(successCode: String? = nil, successMessage: String? = nil, successArguments: [String: String]? = nil, propertyName: String? = nil, propertyValue: String? = nil, objectName: String? = nil) {
        self.successCode = successCode
        self.successMessage = successMessage
        self.successArguments = successArguments
        self.propertyName = propertyName
        self.propertyValue = propertyValue
        self.objectName = objectName
    }
}

public struct ErrorSummary: Codable {
    public var utcDate: Date?
    public var errorGuid: String?
    public var errorCode: String?
    public var errorMessage: String?
    public var technicalErrorMessage: String?
    public var exceptionDetail: ExceptionDetail?
    public var errorArguments: [String: String]?
    public var propertyName: String?
    public var propertyValue: String?
    public var objectName: String?
    public var source: String?

    public init(utcDate: Date? = nil, errorGuid: String? = nil, errorCode: String? = nil, errorMessage: String? = nil, technicalErrorMessage: String? = nil, exceptionDetail: ExceptionDetail? = nil, errorArguments: [String: String]? = nil, propertyName: String? = nil, propertyValue: String? = nil, objectName: String? = nil, source: String? = nil) {
        self.utcDate = utcDate
        self.errorGuid = errorGuid
        self.errorCode = errorCode
        self.errorMessage = errorMessage
        self.technicalErrorMessage = technicalErrorMessage
        self.exceptionDetail = exceptionDetail
        self.errorArguments = errorArguments
        self.propertyName = propertyName
        self.propertyValue = propertyValue
        self.objectName = objectName
        self.source = source
    }
}

public struct WarningSummary: Codable {
    public var technicalErrorMessage: String?
    public var warningMessage: String?
    public var warningCode: String?
    public var warningArguments: [String: String]?

    public init(technicalErrorMessage: String? = nil, warningMessage: String? = nil, warningCode: String? = nil, warningArguments: [String: String]? = nil) {
        self.technicalErrorMessage = technicalErrorMessage
        self.warningMessage = warningMessage
        self.warningCode = warningCode
        self.warningArguments = warningArguments
    }
}

public struct InfoSummary: Codable {
    public var informationCode: String?
    public var informationMessage: String?
    public var informationArguments: [String: String]?
    public var propertyName: String?
    public var propertyValue: String?
    public var objectName: String?

    public init(informationCode: String? = nil, informationMessage: String? = nil, informationArguments: [String: String]? = nil, propertyName: String? = nil, propertyValue: String? = nil, objectName: String? = nil) {
        self.informationCode = informationCode
        self.informationMessage = informationMessage
        self.informationArguments = informationArguments
        self.propertyName = propertyName
        self.propertyValue = propertyValue
        self.objectName = objectName
    }
}

/// * path: if the parameter must be pass in the path uri
/// * header: if the parameter must be passed in http header
/// * query: if the parameter must be passed in querystring
/// * body: if the parameter must be passed in the body
/// * file: if the parameter must be passed in a multipart/form-data (https://swagger.io/docs/specification/2-0/file-upload/)
///
/// Example: "path"
public enum ParameterIn: String, Codable, CaseIterable {
    case path
    case header
    case query
    case body
    case file
}

/// Describe the way you have to follow to get access to the LOV
public struct LOVLink3: Codable {
    /// Indicate the uri to the list of value
    ///
    /// Example: "/merchant/lov/v1/Go2CultureName"
    public var href: URL
    /// Indicate the http method to use on this link
    ///
    /// Example: "GET"
    public var method: HTTPMethod?

    public init(href: URL, method: HTTPMethod? = nil) {
        self.href = href
        self.method = method
    }
}

public struct LinkParameterProperty3: Codable {
    /// The label corresponding to the link parameter property. This label is automatically translated based on the Accept-Language http header.
    ///
    /// Example: "The translated label"
    public var label: String?
    /// The value of the parameter. It can be an integer a string or an object.
    public var value: [String: AnyJSON]?
    /// Example: true
    public var isRequired: Bool?
    /// The value type of the parameter
    ///
    /// Example: "string"
    public var type: ParameterType
    /// Describe the way you have to follow to get access to the LOV
    public var lovLink: LOVLink3?
    /// If true, you MUST use indicate a value from the list of values otherwise it's a freetext
    ///
    /// Example: true
    public var isLovRequired: Bool?
    /// Description of the parameter
    ///
    /// Example: "the store identifier"
    public var description: String?
    /// Schema of the parameter
    ///
    /// Example: "orderListRequest"
    public var schema: String?
    /// The regular expression to validate the value
    ///
    /// Example: "*.-api$"
    public var pattern: String?

    public init(label: String? = nil, value: [String: AnyJSON]? = nil, isRequired: Bool? = nil, type: ParameterType, lovLink: LOVLink3? = nil, isLovRequired: Bool? = nil, description: String? = nil, schema: String? = nil, pattern: String? = nil) {
        self.label = label
        self.value = value
        self.isRequired = isRequired
        self.type = type
        self.lovLink = lovLink
        self.isLovRequired = isLovRequired
        self.description = description
        self.schema = schema
        self.pattern = pattern
    }

    private enum CodingKeys: String, CodingKey {
        case label
        case value
        case isRequired = "required"
        case type
        case lovLink
        case isLovRequired = "lovRequired"
        case description
        case schema
        case pattern
    }
}

public struct ExceptionDetail: Codable {
    public var helpLink: String?
    public var message: String?
    public var stackTrace: String?
    public var type: String?

    public init(helpLink: String? = nil, message: String? = nil, stackTrace: String? = nil, type: String? = nil) {
        self.helpLink = helpLink
        self.message = message
        self.stackTrace = stackTrace
        self.type = type
    }
}

/// The value type of the parameter
///
/// Example: "string"
public enum ParameterType: String, Codable, CaseIterable {
    case string
    case integer
    case number
    case boolean
    case object
    case array
    case date
    case dateTime = "date-time"
    case file
}

public struct SubscriptionLinks: Codable {
    public var reporting: Link3?
    public var activate: Link3?
    public var deactivate: Link3?
    public var retry: Link3?
    public var delete: Link3?

    public init(reporting: Link3? = nil, activate: Link3? = nil, deactivate: Link3? = nil, retry: Link3? = nil, delete: Link3? = nil) {
        self.reporting = reporting
        self.activate = activate
        self.deactivate = deactivate
        self.retry = retry
        self.delete = delete
    }
}

public struct SubscriptionIndex: Codable {
    /// The subscription definition
    public var subscription: Subscription
    public var links: SubscriptionLinks?

    public init(subscription: Subscription, links: SubscriptionLinks? = nil) {
        self.subscription = subscription
        self.links = links
    }

    public init(from decoder: Decoder) throws {
        self.subscription = try Subscription(from: decoder)
        self.links = try SubscriptionLinks(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(subscription, forKey: "subscription")
        try values.encodeIfPresent(links, forKey: "links")
    }
}

public struct CreateSubscriptionRequest: Codable {
    /// The URL <a href="https://en.wikipedia.org/wiki/URL">https://en.wikipedia.org/wiki/URL</a>
    ///
    /// Example: "http://www.mydomain.com"
    public var targetURL: String
    /// The subscription name you want to use
    ///
    /// Example: "MySubscriptionName"
    public var name: String
    /// The name of your application
    ///
    /// Example: "MyApp"
    public var merchantApplicationName: String
    /// The version of your application
    ///
    /// Example: "1.0"
    public var merchantApplicationVersion: String
    /// The email
    ///
    /// Example: "paulsimon@mysupercompany.com"
    public var merchantEmailAlert: String?

    public init(targetURL: String, name: String, merchantApplicationName: String, merchantApplicationVersion: String, merchantEmailAlert: String? = nil) {
        self.targetURL = targetURL
        self.name = name
        self.merchantApplicationName = merchantApplicationName
        self.merchantApplicationVersion = merchantApplicationVersion
        self.merchantEmailAlert = merchantEmailAlert
    }

    private enum CodingKeys: String, CodingKey {
        case targetURL = "targetUrl"
        case name
        case merchantApplicationName
        case merchantApplicationVersion
        case merchantEmailAlert
    }
}

/// The subscription push reporting
public struct SubscriptionPushReporting: Codable {
    /// The identifier of the subscription to the orders for a merchant
    public var subscriptionID: String
    /// The message identifier. It's a guid.
    ///
    /// Example: "b0d3faea-f881-439f-ba92-02b1168511ea"
    public var eventID: String
    /// Indicates if the push operation has succeed
    public var isSucceed: Bool
    /// This modification date correspond to the last order pushed by your subscription consumer
    public var lastOrderModificationUtcDate: Date
    /// The retry count. When we the retry count will reach maximum retry count, the subscription will be deactivated.
    public var retryCount: Int?
    /// The maximum BeezUP will retry to push orders. When we the retry count will reach maximum retry count, the subscription will be deactivated.
    public var maxRetryCount: Int?
    /// The next scheduled  date we retry to send orders
    public var nextScheduledRetryUtcDate: Date?
    public var errorMessage: ErrorResponseMessage?
    /// The URL <a href="https://en.wikipedia.org/wiki/URL">https://en.wikipedia.org/wiki/URL</a>
    ///
    /// Example: "http://www.mydomain.com"
    public var requestUri: String?
    /// The URL <a href="https://en.wikipedia.org/wiki/URL">https://en.wikipedia.org/wiki/URL</a>
    ///
    /// Example: "http://www.mydomain.com"
    public var responseUri: String?
    /// The order count sent
    public var orderCount: Int
    /// The duration of the push operation
    public var duration: String
    /// The HTTP status received from the consumer
    public var httpstatus: Int?

    public init(subscriptionID: String, eventID: String, isSucceed: Bool, lastOrderModificationUtcDate: Date, retryCount: Int? = nil, maxRetryCount: Int? = nil, nextScheduledRetryUtcDate: Date? = nil, errorMessage: ErrorResponseMessage? = nil, requestUri: String? = nil, responseUri: String? = nil, orderCount: Int, duration: String, httpstatus: Int? = nil) {
        self.subscriptionID = subscriptionID
        self.eventID = eventID
        self.isSucceed = isSucceed
        self.lastOrderModificationUtcDate = lastOrderModificationUtcDate
        self.retryCount = retryCount
        self.maxRetryCount = maxRetryCount
        self.nextScheduledRetryUtcDate = nextScheduledRetryUtcDate
        self.errorMessage = errorMessage
        self.requestUri = requestUri
        self.responseUri = responseUri
        self.orderCount = orderCount
        self.duration = duration
        self.httpstatus = httpstatus
    }

    private enum CodingKeys: String, CodingKey {
        case subscriptionID = "subscriptionId"
        case eventID = "eventId"
        case isSucceed = "succeed"
        case lastOrderModificationUtcDate
        case retryCount
        case maxRetryCount
        case nextScheduledRetryUtcDate
        case errorMessage
        case requestUri
        case responseUri
        case orderCount
        case duration
        case httpstatus = "httpStatus"
    }
}

public struct ActivateSubscriptionRequest: Codable {
    /// If set, the date must be in the past the subscription will recover existing orders using the begin period order last modification date. If not set then you will receive new/updated orders in real-time.
    public var recoverBeginPeriodOrderLastModificationUtcDate: Date?
    /// If end period set, first the date must be in the past, the subscription will recover existing orders using the begin and the end period order last modification date. 
    /// If end period is not set and the begin period is set, then you will recover existing orders from the past using the begin period last modification date and after than you will continue to receive new/updated orders in real-time.
    /// If begin/end period are not set then you will receive new/updated orders in real-time.
    /// REMARK: The begin period is required if the end period is fulfilled.
    /// REMARK: If the end period is order last modification date is indicated then once we have push all orders to your target url the subscription will be desactivated.
    public var recoverEndPeriodOrderLastModificationUtcDate: Date?

    public init(recoverBeginPeriodOrderLastModificationUtcDate: Date? = nil, recoverEndPeriodOrderLastModificationUtcDate: Date? = nil) {
        self.recoverBeginPeriodOrderLastModificationUtcDate = recoverBeginPeriodOrderLastModificationUtcDate
        self.recoverEndPeriodOrderLastModificationUtcDate = recoverEndPeriodOrderLastModificationUtcDate
    }
}

/// The subscription definition
public struct Subscription: Codable {
    /// The identifier of the subscription to the orders for a merchant
    public var id: String
    /// The status of your subscription
    ///
    /// Example: "active"
    public var status: SubscriptionStatus
    /// The URL <a href="https://en.wikipedia.org/wiki/URL">https://en.wikipedia.org/wiki/URL</a>
    ///
    /// Example: "http://www.mydomain.com"
    public var targetURL: String
    /// The subscription name you want to use
    ///
    /// Example: "MySubscriptionName"
    public var name: String
    /// The name of your application
    ///
    /// Example: "MyApp"
    public var merchantApplicationName: String
    /// The version of your application
    ///
    /// Example: "1.0"
    public var merchantApplicationVersion: String
    /// Recover existing orders using the begin period order last modification date. If not set then you will receive new/updated orders in real-time.
    public var recoverBeginPeriodOrderLastModificationUtcDate: Date?
    /// Recover existing orders using the begin and the end period order last modification date.
    /// Otherwise, you will receive new/updated orders in real-time.
    public var recoverEndPeriodOrderLastModificationUtcDate: Date?
    /// This modification date correspond to the last order pushed by your subscription consumer
    public var lastOrderPushedModificationUtcDate: Date?
    /// The date of the last pushed order successfully received by your subscription consumer
    public var lastSuccessfulOrderPushedUtcDate: Date?
    /// The subscription consumption status
    public var consumerHealthStatus: ConsumptionAvailabilityStatus?
    /// This date indicates since when the subscription consumer is unavailable
    public var consumerUnvailableSinceUtcDate: Date?
    /// The last date we retry to send orders
    public var lastRetryUtcDate: Date?
    /// The retry count. When we the retry count will reach maximum retry count, the subscription will be deactivated.
    public var retryCount: Int?
    /// The maximum BeezUP will retry to push orders. When we the retry count will reach maximum retry count, the subscription will be deactivated.
    public var maxRetryCount: Int?
    /// The next scheduled  date we retry to send orders
    public var nextScheduledRetryUtcDate: Date?
    /// The email
    ///
    /// Example: "paulsimon@mysupercompany.com"
    public var merchantEmailAlert: String?
    public var lastErrorMessage: ErrorResponseMessage?
    /// The URL <a href="https://en.wikipedia.org/wiki/URL">https://en.wikipedia.org/wiki/URL</a>
    ///
    /// Example: "http://www.mydomain.com"
    public var consumerLastRequestSentUri: String?

    public init(id: String, status: SubscriptionStatus, targetURL: String, name: String, merchantApplicationName: String, merchantApplicationVersion: String, recoverBeginPeriodOrderLastModificationUtcDate: Date? = nil, recoverEndPeriodOrderLastModificationUtcDate: Date? = nil, lastOrderPushedModificationUtcDate: Date? = nil, lastSuccessfulOrderPushedUtcDate: Date? = nil, consumerHealthStatus: ConsumptionAvailabilityStatus? = nil, consumerUnvailableSinceUtcDate: Date? = nil, lastRetryUtcDate: Date? = nil, retryCount: Int? = nil, maxRetryCount: Int? = nil, nextScheduledRetryUtcDate: Date? = nil, merchantEmailAlert: String? = nil, lastErrorMessage: ErrorResponseMessage? = nil, consumerLastRequestSentUri: String? = nil) {
        self.id = id
        self.status = status
        self.targetURL = targetURL
        self.name = name
        self.merchantApplicationName = merchantApplicationName
        self.merchantApplicationVersion = merchantApplicationVersion
        self.recoverBeginPeriodOrderLastModificationUtcDate = recoverBeginPeriodOrderLastModificationUtcDate
        self.recoverEndPeriodOrderLastModificationUtcDate = recoverEndPeriodOrderLastModificationUtcDate
        self.lastOrderPushedModificationUtcDate = lastOrderPushedModificationUtcDate
        self.lastSuccessfulOrderPushedUtcDate = lastSuccessfulOrderPushedUtcDate
        self.consumerHealthStatus = consumerHealthStatus
        self.consumerUnvailableSinceUtcDate = consumerUnvailableSinceUtcDate
        self.lastRetryUtcDate = lastRetryUtcDate
        self.retryCount = retryCount
        self.maxRetryCount = maxRetryCount
        self.nextScheduledRetryUtcDate = nextScheduledRetryUtcDate
        self.merchantEmailAlert = merchantEmailAlert
        self.lastErrorMessage = lastErrorMessage
        self.consumerLastRequestSentUri = consumerLastRequestSentUri
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case status
        case targetURL = "targetUrl"
        case name
        case merchantApplicationName
        case merchantApplicationVersion
        case recoverBeginPeriodOrderLastModificationUtcDate
        case recoverEndPeriodOrderLastModificationUtcDate
        case lastOrderPushedModificationUtcDate
        case lastSuccessfulOrderPushedUtcDate
        case consumerHealthStatus
        case consumerUnvailableSinceUtcDate
        case lastRetryUtcDate
        case retryCount
        case maxRetryCount
        case nextScheduledRetryUtcDate
        case merchantEmailAlert
        case lastErrorMessage
        case consumerLastRequestSentUri
    }
}

/// The status of your subscription
///
/// Example: "active"
public enum SubscriptionStatus: String, Codable, CaseIterable {
    case active
    case inactive
}

/// The subscription consumption status
public enum ConsumptionAvailabilityStatus: String, Codable, CaseIterable {
    case available = "Available"
    case degraded = "Degraded"
    case unavailable = "Unavailable"
}

public struct GetOrderInvoiceGeneralSettingsResponse: Codable {
    /// Order Invoice General Settings
    public var orderInvoiceGeneralSettings: OrderInvoiceGeneralSettings
    /// Invoice Sequence Number
    ///
    /// Example: 879
    public var lastInvoiceSequenceNumber: Int?

    public init(orderInvoiceGeneralSettings: OrderInvoiceGeneralSettings, lastInvoiceSequenceNumber: Int? = nil) {
        self.orderInvoiceGeneralSettings = orderInvoiceGeneralSettings
        self.lastInvoiceSequenceNumber = lastInvoiceSequenceNumber
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.orderInvoiceGeneralSettings = try OrderInvoiceGeneralSettings(from: decoder)
        self.lastInvoiceSequenceNumber = try values.decodeIfPresent(Int.self, forKey: "lastInvoiceSequenceNumber")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(orderInvoiceGeneralSettings, forKey: "orderInvoiceGeneralSettings")
        try values.encodeIfPresent(lastInvoiceSequenceNumber, forKey: "lastInvoiceSequenceNumber")
    }
}

public struct GetOrderInvoiceDesignPreviewResponse: Codable {
    /// Invoice Content HTML
    public var invoiceHTMLContent: String

    public init(invoiceHTMLContent: String) {
        self.invoiceHTMLContent = invoiceHTMLContent
    }

    private enum CodingKeys: String, CodingKey {
        case invoiceHTMLContent = "invoiceHtmlContent"
    }
}

public struct GenerateOrderInvoiceRequest: Codable {
    /// Invoice Sequence Number
    ///
    /// Example: 879
    public var invoiceSequenceNumber: Int?

    public init(invoiceSequenceNumber: Int? = nil) {
        self.invoiceSequenceNumber = invoiceSequenceNumber
    }
}

public struct PreviewOrderInvoiceRequest: Codable {
    /// Invoice Sequence Number
    ///
    /// Example: 879
    public var invoiceSequenceNumber: Int?

    public init(invoiceSequenceNumber: Int? = nil) {
        self.invoiceSequenceNumber = invoiceSequenceNumber
    }
}

public struct PreviewOrderInvoiceResponse: Codable {
    /// Invoice Content HTML
    public var invoiceHTMLContent: String

    public init(invoiceHTMLContent: String) {
        self.invoiceHTMLContent = invoiceHTMLContent
    }

    private enum CodingKeys: String, CodingKey {
        case invoiceHTMLContent = "invoiceHtmlContent"
    }
}

public struct GetOrderInvoicePdfFromHTMLInvoiceURLRequest: Codable {
    /// Order invoice url
    ///
    /// Example: "http://www.mydomain.com"
    public var orderInvoiceUri: String

    public init(orderInvoiceUri: String) {
        self.orderInvoiceUri = orderInvoiceUri
    }
}

/// Order Invoice General Settings
public struct OrderInvoiceGeneralSettings: Codable {
    /// If the error is translated, the culture name will be indicated
    ///
    /// Example: "en"
    public var cultureName: String
    /// Product VAT in percent
    ///
    /// Example: 4.0
    public var productVATPercent: Double
    /// Shipping cost VAT in percent
    ///
    /// Example: 8.0
    public var shippingVATPercent: Double
    /// Invoice Prefix. Can contain 1 to 50 characters, with alphanumeric characters in lowercase uppercase and #, _, -
    ///
    /// Example: "TOTO"
    public var invoicePrefix: String
    /// Invoice Sequence Number
    ///
    /// Example: 879
    public var invoiceStartingSequenceNumber: Int

    public init(cultureName: String, productVATPercent: Double, shippingVATPercent: Double, invoicePrefix: String, invoiceStartingSequenceNumber: Int) {
        self.cultureName = cultureName
        self.productVATPercent = productVATPercent
        self.shippingVATPercent = shippingVATPercent
        self.invoicePrefix = invoicePrefix
        self.invoiceStartingSequenceNumber = invoiceStartingSequenceNumber
    }
}

public struct OrderInvoiceDesignSettings: Codable {
    /// Header Content HTML
    public var headerContentHTML: String?
    /// Footer Content HTML
    public var footerContentHTML: String?

    public init(headerContentHTML: String? = nil, footerContentHTML: String? = nil) {
        self.headerContentHTML = headerContentHTML
        self.footerContentHTML = footerContentHTML
    }

    private enum CodingKeys: String, CodingKey {
        case headerContentHTML = "headerContentHtml"
        case footerContentHTML = "footerContentHtml"
    }
}

public struct AnalyticsIndexLovLinks: Codable {
    /// Describe the way you have to follow to get access to the LOV
    public var performanceIndicatorTypeLov: BeezUPCommonLOVLink3?
    /// Describe the way you have to follow to get access to the LOV
    public var performanceIndicatorTypeForReportsByChannelLov: BeezUPCommonLOVLink3?
    /// Describe the way you have to follow to get access to the LOV
    public var performanceIndicatorTypeForReportsByCategoryLov: BeezUPCommonLOVLink3?
    /// Describe the way you have to follow to get access to the LOV
    public var performanceIndicatorTypeForReportsByProductLov: BeezUPCommonLOVLink3?
    /// Describe the way you have to follow to get access to the LOV
    public var performanceIndicatorFormulaParameterTypeLov: BeezUPCommonLOVLink3?
    /// Describe the way you have to follow to get access to the LOV
    public var performanceIndicatorFormulaOperatorNameLov: BeezUPCommonLOVLink3?
    /// Describe the way you have to follow to get access to the LOV
    public var performanceIndicatorFilterOperatorNameLov: BeezUPCommonLOVLink3?
    /// Describe the way you have to follow to get access to the LOV
    public var analyticsProductColumnFilterOperatorNameLov: BeezUPCommonLOVLink3?
    /// Describe the way you have to follow to get access to the LOV
    public var analyticsNumericalProductColumnFilterOperatorNameLov: BeezUPCommonLOVLink3?
    /// Describe the way you have to follow to get access to the LOV
    public var analyticsStringProductColumnFilterOperatorNameLov: BeezUPCommonLOVLink3?
    /// Describe the way you have to follow to get access to the LOV
    public var storeOptimisationRuleExecutionStatusLov: BeezUPCommonLOVLink3?

    public init(performanceIndicatorTypeLov: BeezUPCommonLOVLink3? = nil, performanceIndicatorTypeForReportsByChannelLov: BeezUPCommonLOVLink3? = nil, performanceIndicatorTypeForReportsByCategoryLov: BeezUPCommonLOVLink3? = nil, performanceIndicatorTypeForReportsByProductLov: BeezUPCommonLOVLink3? = nil, performanceIndicatorFormulaParameterTypeLov: BeezUPCommonLOVLink3? = nil, performanceIndicatorFormulaOperatorNameLov: BeezUPCommonLOVLink3? = nil, performanceIndicatorFilterOperatorNameLov: BeezUPCommonLOVLink3? = nil, analyticsProductColumnFilterOperatorNameLov: BeezUPCommonLOVLink3? = nil, analyticsNumericalProductColumnFilterOperatorNameLov: BeezUPCommonLOVLink3? = nil, analyticsStringProductColumnFilterOperatorNameLov: BeezUPCommonLOVLink3? = nil, storeOptimisationRuleExecutionStatusLov: BeezUPCommonLOVLink3? = nil) {
        self.performanceIndicatorTypeLov = performanceIndicatorTypeLov
        self.performanceIndicatorTypeForReportsByChannelLov = performanceIndicatorTypeForReportsByChannelLov
        self.performanceIndicatorTypeForReportsByCategoryLov = performanceIndicatorTypeForReportsByCategoryLov
        self.performanceIndicatorTypeForReportsByProductLov = performanceIndicatorTypeForReportsByProductLov
        self.performanceIndicatorFormulaParameterTypeLov = performanceIndicatorFormulaParameterTypeLov
        self.performanceIndicatorFormulaOperatorNameLov = performanceIndicatorFormulaOperatorNameLov
        self.performanceIndicatorFilterOperatorNameLov = performanceIndicatorFilterOperatorNameLov
        self.analyticsProductColumnFilterOperatorNameLov = analyticsProductColumnFilterOperatorNameLov
        self.analyticsNumericalProductColumnFilterOperatorNameLov = analyticsNumericalProductColumnFilterOperatorNameLov
        self.analyticsStringProductColumnFilterOperatorNameLov = analyticsStringProductColumnFilterOperatorNameLov
        self.storeOptimisationRuleExecutionStatusLov = storeOptimisationRuleExecutionStatusLov
    }
}

public struct AnalyticsIndexLinks: Codable {
    public var this: BeezUPCommonLink3
    public var trackingStatus: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3, trackingStatus: BeezUPCommonLink3? = nil) {
        self.this = this
        self.trackingStatus = trackingStatus
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case trackingStatus
    }
}

public struct AnalyticsStoreIndexLinks: Codable {
    public var this: BeezUPCommonLink3
    public var trackingStatus: BeezUPCommonLink3
    public var trackedClicks: BeezUPCommonLink3
    public var trackedOrders: BeezUPCommonLink3
    public var trackedExternalOrders: BeezUPCommonLink3?
    public var reportByDay: BeezUPCommonLink3?
    public var reportByChannel: BeezUPCommonLink3?
    public var reportByCategory: BeezUPCommonLink3?
    public var reportByProduct: BeezUPCommonLink3?
    public var optimiseAll: BeezUPCommonLink3?
    public var optimise: BeezUPCommonLink3?
    public var optimiseByChannel: BeezUPCommonLink3?
    public var optimiseByCategory: BeezUPCommonLink3?
    public var optimiseByProduct: BeezUPCommonLink3?
    public var reportFilters: BeezUPCommonLink3
    public var rules: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3, trackingStatus: BeezUPCommonLink3, trackedClicks: BeezUPCommonLink3, trackedOrders: BeezUPCommonLink3, trackedExternalOrders: BeezUPCommonLink3? = nil, reportByDay: BeezUPCommonLink3? = nil, reportByChannel: BeezUPCommonLink3? = nil, reportByCategory: BeezUPCommonLink3? = nil, reportByProduct: BeezUPCommonLink3? = nil, optimiseAll: BeezUPCommonLink3? = nil, optimise: BeezUPCommonLink3? = nil, optimiseByChannel: BeezUPCommonLink3? = nil, optimiseByCategory: BeezUPCommonLink3? = nil, optimiseByProduct: BeezUPCommonLink3? = nil, reportFilters: BeezUPCommonLink3, rules: BeezUPCommonLink3? = nil) {
        self.this = this
        self.trackingStatus = trackingStatus
        self.trackedClicks = trackedClicks
        self.trackedOrders = trackedOrders
        self.trackedExternalOrders = trackedExternalOrders
        self.reportByDay = reportByDay
        self.reportByChannel = reportByChannel
        self.reportByCategory = reportByCategory
        self.reportByProduct = reportByProduct
        self.optimiseAll = optimiseAll
        self.optimise = optimise
        self.optimiseByChannel = optimiseByChannel
        self.optimiseByCategory = optimiseByCategory
        self.optimiseByProduct = optimiseByProduct
        self.reportFilters = reportFilters
        self.rules = rules
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case trackingStatus
        case trackedClicks
        case trackedOrders
        case trackedExternalOrders
        case reportByDay
        case reportByChannel
        case reportByCategory
        case reportByProduct
        case optimiseAll
        case optimise
        case optimiseByChannel
        case optimiseByCategory
        case optimiseByProduct
        case reportFilters
        case rules
    }
}

public struct ReportByCommonResponseLinks: Codable {
    public var enableAllProducts: BeezUPCommonLink3?
    public var disableAllProducts: BeezUPCommonLink3?
    public var enableProducts: BeezUPCommonLink3?
    public var disableProducts: BeezUPCommonLink3?

    public init(enableAllProducts: BeezUPCommonLink3? = nil, disableAllProducts: BeezUPCommonLink3? = nil, enableProducts: BeezUPCommonLink3? = nil, disableProducts: BeezUPCommonLink3? = nil) {
        self.enableAllProducts = enableAllProducts
        self.disableAllProducts = disableAllProducts
        self.enableProducts = enableProducts
        self.disableProducts = disableProducts
    }
}

public struct ReportByChannelLinks: Codable {
    public var enableProducts: BeezUPCommonLink3?
    public var disableProducts: BeezUPCommonLink3?

    public init(enableProducts: BeezUPCommonLink3? = nil, disableProducts: BeezUPCommonLink3? = nil) {
        self.enableProducts = enableProducts
        self.disableProducts = disableProducts
    }
}

public struct ReportByCategoryLinks: Codable {
    public var enableProducts: BeezUPCommonLink3?
    public var disableProducts: BeezUPCommonLink3?

    public init(enableProducts: BeezUPCommonLink3? = nil, disableProducts: BeezUPCommonLink3? = nil) {
        self.enableProducts = enableProducts
        self.disableProducts = disableProducts
    }
}

/// Depending if the report concerned multiple channels or one channel.
public struct ReportByProductLinks: Codable {
    /// If the report concerned one product for one channel the channel catalog product info will give you all you need to enable or disable the product.
    public var oneChannelLinks: ReportByProductOneChannelLinks?
    public var allChannelsLinks: ReportByProductAllChannelsLinks?

    public init(oneChannelLinks: ReportByProductOneChannelLinks? = nil, allChannelsLinks: ReportByProductAllChannelsLinks? = nil) {
        self.oneChannelLinks = oneChannelLinks
        self.allChannelsLinks = allChannelsLinks
    }
}

/// If the report concerned one product for one channel the channel catalog product info will give you all you need to enable or disable the product.
public struct ReportByProductOneChannelLinks: Codable {
    public var productInfo: BeezUPCommonLink3
    public var enableProductForOneChannel: BeezUPCommonLink3
    public var disableProductForOneChannel: BeezUPCommonLink3

    public init(productInfo: BeezUPCommonLink3, enableProductForOneChannel: BeezUPCommonLink3, disableProductForOneChannel: BeezUPCommonLink3) {
        self.productInfo = productInfo
        self.enableProductForOneChannel = enableProductForOneChannel
        self.disableProductForOneChannel = disableProductForOneChannel
    }
}

public struct ReportByProductAllChannelsLinks: Codable {
    public var enableProductForAllChannels: BeezUPCommonLink3
    public var disableProductForAllChannels: BeezUPCommonLink3

    public init(enableProductForAllChannels: BeezUPCommonLink3, disableProductForAllChannels: BeezUPCommonLink3) {
        self.enableProductForAllChannels = enableProductForAllChannels
        self.disableProductForAllChannels = disableProductForAllChannels
    }
}

public struct ReportFiltersLinks: Codable {
    public var this: BeezUPCommonLink3
    public var save: BeezUPCommonLink3

    public init(this: BeezUPCommonLink3, save: BeezUPCommonLink3) {
        self.this = this
        self.save = save
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case save
    }
}

public struct ReportFilterHeaderLinks: Codable {
    public var this: BeezUPCommonLink3

    public init(this: BeezUPCommonLink3) {
        self.this = this
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
    }
}

/// Indicates the actions you can do on this report filter
public struct ReportFilterLinks: Codable {
    public var this: BeezUPCommonLink3?
    public var save: BeezUPCommonLink3?
    public var delete: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3? = nil, save: BeezUPCommonLink3? = nil, delete: BeezUPCommonLink3? = nil) {
        self.this = this
        self.save = save
        self.delete = delete
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case save
        case delete
    }
}

/// Links to know if the user can create a rule or run all rules
public struct RuleListLinks: Codable {
    public var this: BeezUPCommonLink3
    public var create: BeezUPCommonLink3
    public var history: BeezUPCommonLink3
    public var run: BeezUPCommonLink3

    public init(this: BeezUPCommonLink3, create: BeezUPCommonLink3, history: BeezUPCommonLink3, run: BeezUPCommonLink3) {
        self.this = this
        self.create = create
        self.history = history
        self.run = run
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case create
        case history
        case run
    }
}

/// Links to retrieve/action on other entities
public struct RuleLinks: Codable {
    public var this: BeezUPCommonLink3
    public var update: BeezUPCommonLink3?
    public var delete: BeezUPCommonLink3?
    public var moveup: BeezUPCommonLink3?
    public var movedown: BeezUPCommonLink3?
    public var enable: BeezUPCommonLink3?
    public var disable: BeezUPCommonLink3?
    public var run: BeezUPCommonLink3?
    public var reportFilter: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3, update: BeezUPCommonLink3? = nil, delete: BeezUPCommonLink3? = nil, moveup: BeezUPCommonLink3? = nil, movedown: BeezUPCommonLink3? = nil, enable: BeezUPCommonLink3? = nil, disable: BeezUPCommonLink3? = nil, run: BeezUPCommonLink3? = nil, reportFilter: BeezUPCommonLink3? = nil) {
        self.this = this
        self.update = update
        self.delete = delete
        self.moveup = moveup
        self.movedown = movedown
        self.enable = enable
        self.disable = disable
        self.run = run
        self.reportFilter = reportFilter
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case update
        case delete
        case moveup
        case movedown
        case enable
        case disable
        case run
        case reportFilter
    }
}

/// Links to retrieve/action on this rule execution
public struct RuleExecutionReportingLinks: Codable {
    public var rule: BeezUPCommonLink3?

    public init(rule: BeezUPCommonLink3? = nil) {
        self.rule = rule
    }
}

/// The Analytics API operation index.
public struct AnalyticsIndex: Codable {
    public var stores: [AnalyticsStoreIndex]
    public var links: AnalyticsIndexLinks
    public var lovLinks: AnalyticsIndexLovLinks?

    public init(stores: [AnalyticsStoreIndex], links: AnalyticsIndexLinks, lovLinks: AnalyticsIndexLovLinks? = nil) {
        self.stores = stores
        self.links = links
        self.lovLinks = lovLinks
    }
}

public struct AnalyticsStoreIndex: Codable {
    public var links: AnalyticsStoreIndexLinks

    public init(links: AnalyticsStoreIndexLinks) {
        self.links = links
    }
}

public struct TrackingStatus: Codable {
    /// The utc date of the latest synchronized click
    ///
    /// Example: "2016-08-29T09:12:33.001Z"
    public var clickSynchronizationUtcDate: Date
    /// The utc date of the latest synchronized order
    ///
    /// Example: "2016-08-29T09:12:33.001Z"
    public var orderSynchonizationUtcDate: Date
    /// The utc date of the latest synchronized marketplace order
    ///
    /// Example: "2016-08-29T09:12:33.001Z"
    public var marketplaceOrderSynchonizationUtcDate: Date

    public init(clickSynchronizationUtcDate: Date, orderSynchonizationUtcDate: Date, marketplaceOrderSynchonizationUtcDate: Date) {
        self.clickSynchronizationUtcDate = clickSynchronizationUtcDate
        self.orderSynchonizationUtcDate = orderSynchonizationUtcDate
        self.marketplaceOrderSynchonizationUtcDate = marketplaceOrderSynchonizationUtcDate
    }
}

public struct StoreTrackingStatus: Codable {
    /// The utc date of the latest synchronized click
    ///
    /// Example: "2016-08-29T09:12:33.001Z"
    public var clickSynchronizationUtcDate: Date?
    /// The utc date of the latest synchronized order
    ///
    /// Example: "2016-08-29T09:12:33.001Z"
    public var orderSynchonizationUtcDate: Date?
    /// The utc date of the latest synchronized marketplace order
    ///
    /// Example: "2016-08-29T09:12:33.001Z"
    public var marketplaceOrderSynchonizationUtcDate: Date?

    public init(clickSynchronizationUtcDate: Date? = nil, orderSynchonizationUtcDate: Date? = nil, marketplaceOrderSynchonizationUtcDate: Date? = nil) {
        self.clickSynchronizationUtcDate = clickSynchronizationUtcDate
        self.orderSynchonizationUtcDate = orderSynchonizationUtcDate
        self.marketplaceOrderSynchonizationUtcDate = marketplaceOrderSynchonizationUtcDate
    }
}

public struct TrackedClicks: Codable {
    public var clicks: [TrackedClick]

    public init(clicks: [TrackedClick]) {
        self.clicks = clicks
    }
}

public struct TrackedClick: Codable {
    /// The utc date of the click
    ///
    /// Example: "2016-08-29T09:12:33.001Z"
    public var utcDate: Date
    /// The basic information related to a product
    public var product: BeezUPCommonProductBasicInfo
    /// The user IP address for the click
    ///
    /// Example: "127.0.0.1"
    public var ipAddress: String
    /// The basic info related to a channel
    public var channel: BeezUPCommonChannelBasicInfo

    public init(utcDate: Date, product: BeezUPCommonProductBasicInfo, ipAddress: String, channel: BeezUPCommonChannelBasicInfo) {
        self.utcDate = utcDate
        self.product = product
        self.ipAddress = ipAddress
        self.channel = channel
    }
}

public struct TrackedOrders: Codable {
    public var orders: [TrackedOrder]

    public init(orders: [TrackedOrder]) {
        self.orders = orders
    }
}

public struct TrackedOrder: Codable {
    /// The utc date of the order
    ///
    /// Example: "2016-08-29T09:12:33.001Z"
    public var utcDate: Date
    /// The basic info related to a channel
    public var channel: BeezUPCommonChannelBasicInfo
    /// The merchant order identifier
    ///
    /// Example: "My_Merchant_Order_Id"
    public var merchantOrderID: String
    /// The total amount of the order
    ///
    /// Example: 101.42
    public var totalAmount: Double
    /// The currency code <a href="https://en.wikipedia.org/wiki/ISO_4217">(ISO 4217)</a>
    ///
    /// Example: "EUR"
    public var currencyCode: String
    /// Indicate if the payment of this order has been validated or not
    ///
    /// Example: false
    public var isPaymentValidated: Bool
    /// The product list of this order
    ///
    /// Example:
    ///
    /// [
    ///   {
    ///     "margin" : "9",
    ///     "productActive" : true,
    ///     "productId" : "00000000-0000-0000-0000-000000000000",
    ///     "productImageUrl" : "http:\/\/i2.cdscdn.com\/pdt2\/3\/9\/0\/1\/550x550\/hai6901018043390\/rw\/haier-b20fwrss-refrigerateur-americain.jpg",
    ///     "productSku" : "SKU123345",
    ///     "productTitle" : "My super product title",
    ///     "quantity" : "1",
    ///     "unitPrice" : "101"
    ///   }
    /// ]
    public var products: [TrackedOrderProduct]

    public init(utcDate: Date, channel: BeezUPCommonChannelBasicInfo, merchantOrderID: String, totalAmount: Double, currencyCode: String, isPaymentValidated: Bool, products: [TrackedOrderProduct]) {
        self.utcDate = utcDate
        self.channel = channel
        self.merchantOrderID = merchantOrderID
        self.totalAmount = totalAmount
        self.currencyCode = currencyCode
        self.isPaymentValidated = isPaymentValidated
        self.products = products
    }

    private enum CodingKeys: String, CodingKey {
        case utcDate
        case channel
        case merchantOrderID = "merchantOrderId"
        case totalAmount
        case currencyCode
        case isPaymentValidated = "paymentValidated"
        case products
    }
}

public struct TrackedOrderProduct: Codable {
    /// The basic information related to a product
    public var beezUPCommonProductBasicInfo: BeezUPCommonProductBasicInfo
    /// The product's unit price for the order
    ///
    /// Example: 101.42
    public var unitPrice: Double
    /// The quantity of this product for the order
    ///
    /// Example: 1.0
    public var quantity: Double
    /// The product's margin for the order
    ///
    /// Example: 9.66
    public var margin: Double

    public init(beezUPCommonProductBasicInfo: BeezUPCommonProductBasicInfo, unitPrice: Double, quantity: Double, margin: Double) {
        self.beezUPCommonProductBasicInfo = beezUPCommonProductBasicInfo
        self.unitPrice = unitPrice
        self.quantity = quantity
        self.margin = margin
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.beezUPCommonProductBasicInfo = try BeezUPCommonProductBasicInfo(from: decoder)
        self.unitPrice = try values.decode(Double.self, forKey: "unitPrice")
        self.quantity = try values.decode(Double.self, forKey: "quantity")
        self.margin = try values.decode(Double.self, forKey: "margin")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(beezUPCommonProductBasicInfo, forKey: "beezUPCommonProductBasicInfo")
        try values.encode(unitPrice, forKey: "unitPrice")
        try values.encode(quantity, forKey: "quantity")
        try values.encode(margin, forKey: "margin")
    }
}

public struct TrackedExternalOrders: Codable {
    public var externalOrders: [TrackedExternalOrder]

    public init(externalOrders: [TrackedExternalOrder]) {
        self.externalOrders = externalOrders
    }
}

public struct TrackedExternalOrder: Codable {
    /// The utc date of the external order
    ///
    /// Example: "2016-08-29T09:12:33.001Z"
    public var utcDate: Date
    /// The merchant order identifier
    ///
    /// Example: "My_Order_Merchant_Id"
    public var merchantOrderID: String
    /// Can be null. The visitor identifier of the external order
    ///
    /// Example: "A_VISITOR_ID"
    public var visitorID: String?
    /// The total amount of the external order
    ///
    /// Example: 101.42
    public var totalAmount: Double
    /// The currency code <a href="https://en.wikipedia.org/wiki/ISO_4217">(ISO 4217)</a>
    ///
    /// Example: "EUR"
    public var currencyCode: String
    /// Indicate if the payment of this external order has been validated or not
    ///
    /// Example: false
    public var isPaymentValidated: Bool
    /// Can be null. The product list included in the external order
    ///
    /// Example:
    ///
    /// [
    ///   {
    ///     "margin" : "9",
    ///     "merchantOrderId" : "My_Merchant_Order_Id",
    ///     "productActive" : true,
    ///     "productImageUrl" : "http:\/\/cdn3.sarenza.net\/static\/_img\/productsV4\/0000010744\/MD_0000010744_29411_09.jpg?201308142051",
    ///     "productSku" : "something",
    ///     "productTitle" : "Something great",
    ///     "quantity" : "1",
    ///     "unitPrice" : "101"
    ///   }
    /// ]
    public var products: [TrackedExternalOrderProduct]?

    public init(utcDate: Date, merchantOrderID: String, visitorID: String? = nil, totalAmount: Double, currencyCode: String, isPaymentValidated: Bool, products: [TrackedExternalOrderProduct]? = nil) {
        self.utcDate = utcDate
        self.merchantOrderID = merchantOrderID
        self.visitorID = visitorID
        self.totalAmount = totalAmount
        self.currencyCode = currencyCode
        self.isPaymentValidated = isPaymentValidated
        self.products = products
    }

    private enum CodingKeys: String, CodingKey {
        case utcDate
        case merchantOrderID = "merchantOrderId"
        case visitorID = "visitorId"
        case totalAmount
        case currencyCode
        case isPaymentValidated = "paymentValidated"
        case products
    }
}

public struct TrackedExternalOrderProduct: Codable {
    /// The product sku received for the external order
    ///
    /// Example: "something"
    public var productSku: String
    /// We tried to get the catalog product title based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.
    ///
    /// Example: "Something great"
    public var productTitle: String?
    /// We tried to get the catalog product image Url based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.
    ///
    /// Example: "http://cdn3.sarenza.net/static/_img/productsV4/0000010744/MD_0000010744_29411_09.jpg?201308142051"
    public var productImageURL: URL?
    /// We tried to get the catalog product if it's still active based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.
    ///
    /// Example: true
    public var isProductActive: Bool?
    /// We tried to get the catalog product identifier based on the product SKU. This property can be null, if we cannot found the product. This is possible if the product is not referenced in the imported catalog.
    ///
    /// Example: "6d469a54-8426-4855-abc2-9e062e2056b9"
    public var productID: String?
    /// The product's unit price for the external order. This property is voluntarily a string because the value could be an invalid one.
    ///
    /// Example: "101.42"
    public var unitPrice: String?
    /// The quantity of this product for the external order. This property is voluntarily a string because the value could be an invalid one
    ///
    /// Example: "1.00"
    public var quantity: String?
    /// The product's margin for the external order. This property is voluntarily a string because the value could be an invalid one
    ///
    /// Example: "9.66"
    public var margin: String?

    public init(productSku: String, productTitle: String? = nil, productImageURL: URL? = nil, isProductActive: Bool? = nil, productID: String? = nil, unitPrice: String? = nil, quantity: String? = nil, margin: String? = nil) {
        self.productSku = productSku
        self.productTitle = productTitle
        self.productImageURL = productImageURL
        self.isProductActive = isProductActive
        self.productID = productID
        self.unitPrice = unitPrice
        self.quantity = quantity
        self.margin = margin
    }

    private enum CodingKeys: String, CodingKey {
        case productSku
        case productTitle
        case productImageURL = "productImageUrl"
        case isProductActive = "productActive"
        case productID = "productId"
        case unitPrice
        case quantity
        case margin
    }
}

public struct ReportAdvancedFilters: Codable {
    /// Example: "Global"
    public var marginType: MarginType
    /// If the margin type is 'Global', indicate the percentage of sale price.
    ///
    /// Example: 10
    public var globalMarginPercent: Int?
    /// Example: "OnClickDate"
    public var linkClickToOrderType: LinkClickToOrderType
    /// If the linkOrderType is OnClickDate, indicate the max day to search the click from the order
    public var linkClickToOrderMaxDay: Int?
    /// If true, you will get the only the orders with payment validated. Otherwise, you will get all orders validated or not.
    ///
    /// Example: true
    public var isOnlyPaymentValidatedOrders: Bool
    /// If true, you will get only direct sales. Otherwise the indirect sales will be included.
    ///
    /// Example: true
    public var isOnlyDirectSales: Bool
    /// The KPI formula
    ///
    /// Example:
    ///
    /// {
    ///   "firstParameter" : "Cost",
    ///   "operatorName" : "Multiply",
    ///   "secondParamter" : "ROI",
    ///   "thirdParameter" : "100"
    /// }
    public var performanceIndicatorFormula: PerformanceIndicatorFormula

    public init(marginType: MarginType, globalMarginPercent: Int? = nil, linkClickToOrderType: LinkClickToOrderType, linkClickToOrderMaxDay: Int? = nil, isOnlyPaymentValidatedOrders: Bool, isOnlyDirectSales: Bool, performanceIndicatorFormula: PerformanceIndicatorFormula) {
        self.marginType = marginType
        self.globalMarginPercent = globalMarginPercent
        self.linkClickToOrderType = linkClickToOrderType
        self.linkClickToOrderMaxDay = linkClickToOrderMaxDay
        self.isOnlyPaymentValidatedOrders = isOnlyPaymentValidatedOrders
        self.isOnlyDirectSales = isOnlyDirectSales
        self.performanceIndicatorFormula = performanceIndicatorFormula
    }

    private enum CodingKeys: String, CodingKey {
        case marginType
        case globalMarginPercent
        case linkClickToOrderType
        case linkClickToOrderMaxDay
        case isOnlyPaymentValidatedOrders = "onlyPaymentValidatedOrders"
        case isOnlyDirectSales = "onlyDirectSales"
        case performanceIndicatorFormula
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        self.marginType = try values.decode(MarginType.self, forKey: .marginType)
        self.globalMarginPercent = try values.decodeIfPresent(Int.self, forKey: .globalMarginPercent)
        self.linkClickToOrderType = try values.decode(LinkClickToOrderType.self, forKey: .linkClickToOrderType)
        self.linkClickToOrderMaxDay = try values.decodeIfPresent(Int.self, forKey: .linkClickToOrderMaxDay)
        self.isOnlyPaymentValidatedOrders = try values.decode(Bool.self, forKey: .isOnlyPaymentValidatedOrders)
        self.isOnlyDirectSales = try values.decode(Bool.self, forKey: .isOnlyDirectSales)
        self.performanceIndicatorFormula = try values.decode(PerformanceIndicatorFormula.self, forKey: .performanceIndicatorFormula)
    }
}

/// Example: "Global"
public enum MarginType: String, Codable, CaseIterable {
    case tracker = "Tracker"
    case global = "Global"
}

/// Example: "OnClickDate"
public enum LinkClickToOrderType: String, Codable, CaseIterable {
    case onPurchaseDate = "OnPurchaseDate"
    case onClickDate = "OnClickDate"
}

/// The KPI formula
///
/// Example:
///
/// {
///   "firstParameter" : "Cost",
///   "operatorName" : "Multiply",
///   "secondParamter" : "ROI",
///   "thirdParameter" : "100"
/// }
public struct PerformanceIndicatorFormula: Codable {
    /// Indicate on which indicator or value you want to make your formula
    ///
    /// Example: "Cost"
    public var firstParameter: PerformanceIndicatorFormulaParameterType?
    /// Example: "Multiply"
    public var operatorName: PerformanceIndicatorFormulaOperatorName?
    /// Indicate on which indicator or value you want to make your formula
    ///
    /// Example: "Cost"
    public var secondParameter: PerformanceIndicatorFormulaParameterType?
    /// Indicate the value of the third parameter of your formula
    ///
    /// Example: 100
    public var thirdParameter: Int?

    public init(firstParameter: PerformanceIndicatorFormulaParameterType? = nil, operatorName: PerformanceIndicatorFormulaOperatorName? = nil, secondParameter: PerformanceIndicatorFormulaParameterType? = nil, thirdParameter: Int? = nil) {
        self.firstParameter = firstParameter
        self.operatorName = operatorName
        self.secondParameter = secondParameter
        self.thirdParameter = thirdParameter
    }
}

/// Indicate on which indicator or value you want to make your formula
///
/// Example: "Cost"
public enum PerformanceIndicatorFormulaParameterType: String, Codable, CaseIterable {
    case cost = "Cost"
    case totalSales = "TotalSales"
    case margin = "Margin"
    case totalSalesMinusCost = "TotalSalesMinusCost"
    case marginMinusCost = "MarginMinusCost"
    case orderCount = "OrderCount"
    case clickCount = "ClickCount"
    case soldProductCount = "SoldProductCount"
    case one = "One"
}

/// Example: "Multiply"
public enum PerformanceIndicatorFormulaOperatorName: String, Codable, CaseIterable {
    case multiply = "Multiply"
    case divide = "Divide"
}

public struct ReportByDayRequest: Codable {
    /// Indicate the channel identifier list
    ///
    /// Example: ["2dc136a7-0d3d-4cc9-a825-a28a42c53e28"]
    public var channelIDs: [String]?
    /// The product identifier
    ///
    /// Example: "578419df-1bbf-41a6-96fa-862e42182b67"
    public var productID: String?
    /// The catalog category identifier
    ///
    /// Example: "81a058a6-0451-4b79-84ef-94c58d0ed4ac"
    public var catalogCategoryID: String?
    /// The begin date of the period for the report
    public var beginPeriodUtcDate: NaiveDate
    /// The end date of the period for the report
    public var endPeriodUtcDate: NaiveDate
    public var advancedFilters: ReportAdvancedFilters?

    public init(channelIDs: [String]? = nil, productID: String? = nil, catalogCategoryID: String? = nil, beginPeriodUtcDate: NaiveDate, endPeriodUtcDate: NaiveDate, advancedFilters: ReportAdvancedFilters? = nil) {
        self.channelIDs = channelIDs
        self.productID = productID
        self.catalogCategoryID = catalogCategoryID
        self.beginPeriodUtcDate = beginPeriodUtcDate
        self.endPeriodUtcDate = endPeriodUtcDate
        self.advancedFilters = advancedFilters
    }

    private enum CodingKeys: String, CodingKey {
        case channelIDs = "channelIds"
        case productID = "productId"
        case catalogCategoryID = "catalogCategoryId"
        case beginPeriodUtcDate
        case endPeriodUtcDate
        case advancedFilters
    }
}

public struct ReportByDayResponse: Codable {
    /// The currency code <a href="https://en.wikipedia.org/wiki/ISO_4217">(ISO 4217)</a>
    ///
    /// Example: "EUR"
    public var currencyCode: String
    public var globalPerformanceIndicators: ReportByDayGlobal
    public var days: [ReportByDay]

    public init(currencyCode: String, globalPerformanceIndicators: ReportByDayGlobal, days: [ReportByDay]) {
        self.currencyCode = currencyCode
        self.globalPerformanceIndicators = globalPerformanceIndicators
        self.days = days
    }
}

public struct ReportByDayGlobal: Codable {
    public var allChannels: ReportByDayGlobalAllChannels
    public var byChannels: [ReportByDayGlobalByChannel]

    public init(allChannels: ReportByDayGlobalAllChannels, byChannels: [ReportByDayGlobalByChannel]) {
        self.allChannels = allChannels
        self.byChannels = byChannels
    }
}

public struct ReportByDayGlobalAllChannels: Codable {
    /// Indicates the global performance indicator
    ///
    /// Example: 10.42
    public var performanceIndicator: Double

    public init(performanceIndicator: Double) {
        self.performanceIndicator = performanceIndicator
    }
}

public struct ReportByDayGlobalByChannel: Codable {
    public var reportByDayGlobalAllChannels: ReportByDayGlobalAllChannels
    /// The basic info related to a channel
    public var channel: BeezUPCommonChannelBasicInfo

    public init(reportByDayGlobalAllChannels: ReportByDayGlobalAllChannels, channel: BeezUPCommonChannelBasicInfo) {
        self.reportByDayGlobalAllChannels = reportByDayGlobalAllChannels
        self.channel = channel
    }

    public init(from decoder: Decoder) throws {
        self.reportByDayGlobalAllChannels = try ReportByDayGlobalAllChannels(from: decoder)
        self.channel = try BeezUPCommonChannelBasicInfo(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(reportByDayGlobalAllChannels, forKey: "reportByDayGlobalAllChannels")
        try values.encode(channel, forKey: "channel")
    }
}

public struct ReportByDay: Codable {
    public var day: NaiveDate
    public var allChannels: ReportByDayAllChannels
    public var byChannels: [ReportByDayByChannel]

    public init(day: NaiveDate, allChannels: ReportByDayAllChannels, byChannels: [ReportByDayByChannel]) {
        self.day = day
        self.allChannels = allChannels
        self.byChannels = byChannels
    }
}

public struct ReportByDayAllChannels: Codable {
    /// The click count
    ///
    /// Example: 101
    public var clickCount: Int
    /// The cost
    ///
    /// Example: 10.42
    public var cost: Double
    /// The order count
    ///
    /// Example: 42
    public var orderCount: Int
    /// The Return On Investment
    ///
    /// Example: 23.11
    public var roi: Double
    /// The margin
    ///
    /// Example: 42.42
    public var margin: Double
    /// The performance indicator based on the performance indicator formula indicated in the request
    ///
    /// Example: 23.09
    public var performanceIndicator: Double
    /// The total sales
    ///
    /// Example: 234.42
    public var totalSales: Double
    /// The product sold count count
    public var soldProductCount: Int

    public init(clickCount: Int, cost: Double, orderCount: Int, roi: Double, margin: Double, performanceIndicator: Double, totalSales: Double, soldProductCount: Int) {
        self.clickCount = clickCount
        self.cost = cost
        self.orderCount = orderCount
        self.roi = roi
        self.margin = margin
        self.performanceIndicator = performanceIndicator
        self.totalSales = totalSales
        self.soldProductCount = soldProductCount
    }
}

public struct ReportByDayByChannel: Codable {
    public var reportByDayAllChannels: ReportByDayAllChannels
    /// The basic info related to a channel
    public var channel: BeezUPCommonChannelBasicInfo

    public init(reportByDayAllChannels: ReportByDayAllChannels, channel: BeezUPCommonChannelBasicInfo) {
        self.reportByDayAllChannels = reportByDayAllChannels
        self.channel = channel
    }

    public init(from decoder: Decoder) throws {
        self.reportByDayAllChannels = try ReportByDayAllChannels(from: decoder)
        self.channel = try BeezUPCommonChannelBasicInfo(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(reportByDayAllChannels, forKey: "reportByDayAllChannels")
        try values.encode(channel, forKey: "channel")
    }
}

/// Contains common filter parameters
public struct ReportFilterCommonParameters: Codable {
    /// The channel identifier
    ///
    /// Example: "2dc136a7-0d3d-4cc9-a825-a28a42c53e28"
    public var channelID: String?
    /// Indicates the period type we want use for the report filter
    public var periodType: ReportFilterPeriodType
    /// The begin date period you want to get the report. It's required only in case of custom period type !
    ///
    /// Example: "2006-11-20T00:00:00Z"
    public var beginPeriodUtcDate: Date?
    /// The end date period you want to get the report. It's required only in case of custom period type !
    ///
    /// Example: "2006-12-20T00:00:00Z"
    public var endPeriodUtcDate: Date?
    public var categoryFilter: BeezUPCommonCatalogCategoryFilter?
    /// Example:
    ///
    /// [
    ///   {
    ///     "indicator" : "Cost",
    ///     "operatorName" : "Equals",
    ///     "value" : "10"
    ///   }
    /// ]
    public var performanceIndicatorFilters: [PerformanceIndicatorFilter]?
    public var advancedFilters: ReportAdvancedFilters

    public init(channelID: String? = nil, periodType: ReportFilterPeriodType, beginPeriodUtcDate: Date? = nil, endPeriodUtcDate: Date? = nil, categoryFilter: BeezUPCommonCatalogCategoryFilter? = nil, performanceIndicatorFilters: [PerformanceIndicatorFilter]? = nil, advancedFilters: ReportAdvancedFilters) {
        self.channelID = channelID
        self.periodType = periodType
        self.beginPeriodUtcDate = beginPeriodUtcDate
        self.endPeriodUtcDate = endPeriodUtcDate
        self.categoryFilter = categoryFilter
        self.performanceIndicatorFilters = performanceIndicatorFilters
        self.advancedFilters = advancedFilters
    }

    private enum CodingKeys: String, CodingKey {
        case channelID = "channelId"
        case periodType
        case beginPeriodUtcDate
        case endPeriodUtcDate
        case categoryFilter
        case performanceIndicatorFilters
        case advancedFilters
    }
}

/// Indicates the period type we want use for the report filter
public enum ReportFilterPeriodType: String, Codable, CaseIterable {
    case custom = "Custom"
    case yesterday = "Yesterday"
    case last7Days = "Last7Days"
    case lastWeek = "LastWeek"
    case thisMonth = "ThisMonth"
    case last30Days = "Last30Days"
    case lastMonth = "LastMonth"
    case last60Days = "Last60Days"
    case last90Days = "Last90Days"
    case last3Months = "Last3Months"
}

public struct PerformanceIndicatorFilter: Codable {
    /// Indicate on which indicator or value you want to make your formula
    ///
    /// Example: "Cost"
    public var performanceIndicator: PerformanceIndicatorType
    /// Indicates the operator you want to apply on this indicator
    ///
    /// Example: "Equals"
    public var operatorName: String
    /// Indicates the filter value to apply on this indicator
    ///
    /// Example: 10.42
    public var value: Double

    public init(performanceIndicator: PerformanceIndicatorType, operatorName: String, value: Double) {
        self.performanceIndicator = performanceIndicator
        self.operatorName = operatorName
        self.value = value
    }
}

/// Indicate on which indicator or value you want to make your formula
///
/// Example: "Cost"
public enum PerformanceIndicatorType: String, Codable, CaseIterable {
    case clickCount = "ClickCount"
    case cost = "Cost"
    case orderCount = "OrderCount"
    case productCount = "ProductCount"
    case soldProductCount = "SoldProductCount"
    case disabledProductCount = "DisabledProductCount"
    case enabledProductCount = "EnabledProductCount"
    case totalSales = "TotalSales"
    case margin = "Margin"
    case roi = "ROI"
    case performanceIndicator = "PerformanceIndicator"
}

/// Contains common filter parameters with Order By functionnality
public struct OrderedReportFilterCommonParameters: Codable {
    /// Contains common filter parameters
    public var reportFilterCommonParameters: ReportFilterCommonParameters
    /// Indicate on which indicator or value you want to make your formula
    ///
    /// Example: "Cost"
    public var orderBy: PerformanceIndicatorType?
    /// Indicate which direction to order results by
    ///
    /// Example: "Ascending"
    public var orderByDirection: OrderByDirection?

    public init(reportFilterCommonParameters: ReportFilterCommonParameters, orderBy: PerformanceIndicatorType? = nil, orderByDirection: OrderByDirection? = nil) {
        self.reportFilterCommonParameters = reportFilterCommonParameters
        self.orderBy = orderBy
        self.orderByDirection = orderByDirection
    }

    public init(from decoder: Decoder) throws {
        self.reportFilterCommonParameters = try ReportFilterCommonParameters(from: decoder)
        self.orderBy = try PerformanceIndicatorType(from: decoder)
        self.orderByDirection = try OrderByDirection(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(reportFilterCommonParameters, forKey: "reportFilterCommonParameters")
        try values.encodeIfPresent(orderBy, forKey: "orderBy")
        try values.encodeIfPresent(orderByDirection, forKey: "orderByDirection")
    }
}

/// Indicate which direction to order results by
///
/// Example: "Ascending"
public enum OrderByDirection: String, Codable, CaseIterable {
    case ascending = "Ascending"
    case descending = "Descending"
}

public struct PaginationRequestParameters: Codable {
    /// Indicate the item count per page
    ///
    /// Example: 100
    public var pageSize: Int?
    /// Indicates the page number
    public var pageNumber: Int?

    public init(pageSize: Int? = nil, pageNumber: Int? = nil) {
        self.pageSize = pageSize
        self.pageNumber = pageNumber
    }
}

public struct ReportByChannelRequest: Codable {
    /// Contains common filter parameters with Order By functionnality
    public var orderedReportFilterCommonParameters: OrderedReportFilterCommonParameters
    public var paginationRequestParameters: PaginationRequestParameters

    public init(orderedReportFilterCommonParameters: OrderedReportFilterCommonParameters, paginationRequestParameters: PaginationRequestParameters) {
        self.orderedReportFilterCommonParameters = orderedReportFilterCommonParameters
        self.paginationRequestParameters = paginationRequestParameters
    }

    public init(from decoder: Decoder) throws {
        self.orderedReportFilterCommonParameters = try OrderedReportFilterCommonParameters(from: decoder)
        self.paginationRequestParameters = try PaginationRequestParameters(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(orderedReportFilterCommonParameters, forKey: "orderedReportFilterCommonParameters")
        try values.encode(paginationRequestParameters, forKey: "paginationRequestParameters")
    }
}

public struct ReportByChannelResponse: Codable {
    /// Example:
    ///
    /// {
    ///   "entryCount" : "25",
    ///   "links" : {
    ///     "first" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "1",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "last" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "38",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "next" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "2",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     }
    ///   },
    ///   "pageCount" : "38",
    ///   "totalEntryCount" : "943"
    /// }
    public var paginationResult: BeezUPCommonPaginationResult
    /// The currency code <a href="https://en.wikipedia.org/wiki/ISO_4217">(ISO 4217)</a>
    ///
    /// Example: "EUR"
    public var currencyCode: String
    public var channels: [ReportByChannel]
    public var links: ReportByCommonResponseLinks

    public init(paginationResult: BeezUPCommonPaginationResult, currencyCode: String, channels: [ReportByChannel], links: ReportByCommonResponseLinks) {
        self.paginationResult = paginationResult
        self.currencyCode = currencyCode
        self.channels = channels
        self.links = links
    }
}

public struct ReportByChannel: Codable {
    /// The basic info related to a channel
    public var channel: BeezUPCommonChannelBasicInfo
    /// The catalog product count
    ///
    /// Example: 101
    public var catalogProductCount: Int
    /// The enabled product count
    ///
    /// Example: 101
    public var enabledProductCount: Int
    /// The click count
    ///
    /// Example: 1024
    public var clickCount: Int
    /// The cost for
    ///
    /// Example: 1234.12
    public var cost: Double
    /// The order count
    ///
    /// Example: 42
    public var orderCount: Int
    /// The Return On Investment
    ///
    /// Example: 42.42
    public var roi: Double?
    /// The margin
    ///
    /// Example: 23.1
    public var margin: Double?
    /// The performance indicator based on the performance indicator formula indicated in the request
    ///
    /// Example: 12.21
    public var performanceIndicator: Double
    /// The total sales
    ///
    /// Example: 234.42
    public var totalSales: Double
    /// The product sold count count
    public var soldProductCount: Int
    public var links: ReportByChannelLinks

    public init(channel: BeezUPCommonChannelBasicInfo, catalogProductCount: Int, enabledProductCount: Int, clickCount: Int, cost: Double, orderCount: Int, roi: Double? = nil, margin: Double? = nil, performanceIndicator: Double, totalSales: Double, soldProductCount: Int, links: ReportByChannelLinks) {
        self.channel = channel
        self.catalogProductCount = catalogProductCount
        self.enabledProductCount = enabledProductCount
        self.clickCount = clickCount
        self.cost = cost
        self.orderCount = orderCount
        self.roi = roi
        self.margin = margin
        self.performanceIndicator = performanceIndicator
        self.totalSales = totalSales
        self.soldProductCount = soldProductCount
        self.links = links
    }
}

public struct ReportByCategoryRequest: Codable {
    /// Contains common filter parameters with Order By functionnality
    public var orderedReportFilterCommonParameters: OrderedReportFilterCommonParameters
    public var paginationRequestParameters: PaginationRequestParameters

    public init(orderedReportFilterCommonParameters: OrderedReportFilterCommonParameters, paginationRequestParameters: PaginationRequestParameters) {
        self.orderedReportFilterCommonParameters = orderedReportFilterCommonParameters
        self.paginationRequestParameters = paginationRequestParameters
    }

    public init(from decoder: Decoder) throws {
        self.orderedReportFilterCommonParameters = try OrderedReportFilterCommonParameters(from: decoder)
        self.paginationRequestParameters = try PaginationRequestParameters(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(orderedReportFilterCommonParameters, forKey: "orderedReportFilterCommonParameters")
        try values.encode(paginationRequestParameters, forKey: "paginationRequestParameters")
    }
}

public struct ReportByCategoryResponse: Codable {
    /// Example:
    ///
    /// {
    ///   "entryCount" : "25",
    ///   "links" : {
    ///     "first" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "1",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "last" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "38",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "next" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "2",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     }
    ///   },
    ///   "pageCount" : "38",
    ///   "totalEntryCount" : "943"
    /// }
    public var paginationResult: BeezUPCommonPaginationResult?
    /// The currency code <a href="https://en.wikipedia.org/wiki/ISO_4217">(ISO 4217)</a>
    ///
    /// Example: "EUR"
    public var currencyCode: String?
    public var categories: [ReportByCategory]?
    public var links: ReportByCommonResponseLinks?

    public init(paginationResult: BeezUPCommonPaginationResult? = nil, currencyCode: String? = nil, categories: [ReportByCategory]? = nil, links: ReportByCommonResponseLinks? = nil) {
        self.paginationResult = paginationResult
        self.currencyCode = currencyCode
        self.categories = categories
        self.links = links
    }
}

public struct ReportByCategory: Codable {
    /// The catalog category identifier
    ///
    /// Example: "81a058a6-0451-4b79-84ef-94c58d0ed4ac"
    public var catalogCategoryID: String
    /// The catalog category path
    ///
    /// Example: ["Vêtements", "Femmes", "Chaussures"]
    public var catalogCategoryPath: [String]?
    /// The product count for this category. This includes all the products that have been imported and can still have associated clicks and orders.
    ///
    /// Example: 101
    public var allProductCount: Int
    /// The catalog product count for this category. This includes all products that are still present in your imported catalog.
    ///
    /// Example: 101
    public var catalogProductCount: Int
    /// The enabled product count for this category. This includes all products that are still present in your imported catalog and have not been disabled via the optimisation feature.
    ///
    /// Example: 101
    public var enabledProductCount: Int
    /// The click count for this category
    ///
    /// Example: 1001
    public var clickCount: Int
    /// The cost for this category
    ///
    /// Example: 12.42
    public var cost: Double
    /// The order count for this category
    ///
    /// Example: 25
    public var orderCount: Int
    /// The Return On Investment for this category
    ///
    /// Example: 25.33
    public var roi: Double?
    /// The margin for this category
    ///
    /// Example: 3.33
    public var margin: Double?
    /// The performance indicator based on the performance indicator formula indicated in the request for this category
    ///
    /// Example: 25.33
    public var performanceIndicator: Double
    /// The total sales for this category
    ///
    /// Example: 234.42
    public var totalSales: Double
    /// The product sold count count for this category
    public var soldProductCount: Int
    public var links: ReportByCategoryLinks

    public init(catalogCategoryID: String, catalogCategoryPath: [String]? = nil, allProductCount: Int, catalogProductCount: Int, enabledProductCount: Int, clickCount: Int, cost: Double, orderCount: Int, roi: Double? = nil, margin: Double? = nil, performanceIndicator: Double, totalSales: Double, soldProductCount: Int, links: ReportByCategoryLinks) {
        self.catalogCategoryID = catalogCategoryID
        self.catalogCategoryPath = catalogCategoryPath
        self.allProductCount = allProductCount
        self.catalogProductCount = catalogProductCount
        self.enabledProductCount = enabledProductCount
        self.clickCount = clickCount
        self.cost = cost
        self.orderCount = orderCount
        self.roi = roi
        self.margin = margin
        self.performanceIndicator = performanceIndicator
        self.totalSales = totalSales
        self.soldProductCount = soldProductCount
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case catalogCategoryID = "catalogCategoryId"
        case catalogCategoryPath
        case allProductCount
        case catalogProductCount
        case enabledProductCount
        case clickCount
        case cost
        case orderCount
        case roi
        case margin
        case performanceIndicator
        case totalSales
        case soldProductCount
        case links
    }
}

public struct ReportByProductRequest: Codable {
    /// Contains common filter parameters with Order By functionnality
    public var orderedReportFilterCommonParameters: OrderedReportFilterCommonParameters
    public var paginationRequestParameters: PaginationRequestParameters
    /// Example: ["4b460e31-3d1f-4117-922d-b159a64ec1d2"]
    public var productColumnsToDisplay: [String]?
    /// You can filter on the product state.
    ///
    /// Example: "All"
    public var productState: ProductStateFilter
    public var analyticsProductColumnFilters: AnalyticsProductColumnFilters?

    public init(orderedReportFilterCommonParameters: OrderedReportFilterCommonParameters, paginationRequestParameters: PaginationRequestParameters, productColumnsToDisplay: [String]? = nil, productState: ProductStateFilter, analyticsProductColumnFilters: AnalyticsProductColumnFilters? = nil) {
        self.orderedReportFilterCommonParameters = orderedReportFilterCommonParameters
        self.paginationRequestParameters = paginationRequestParameters
        self.productColumnsToDisplay = productColumnsToDisplay
        self.productState = productState
        self.analyticsProductColumnFilters = analyticsProductColumnFilters
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.orderedReportFilterCommonParameters = try OrderedReportFilterCommonParameters(from: decoder)
        self.paginationRequestParameters = try PaginationRequestParameters(from: decoder)
        self.productColumnsToDisplay = try values.decodeIfPresent([String].self, forKey: "productColumnsToDisplay")
        self.productState = try ProductStateFilter(from: decoder)
        self.analyticsProductColumnFilters = try AnalyticsProductColumnFilters(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(orderedReportFilterCommonParameters, forKey: "orderedReportFilterCommonParameters")
        try values.encode(paginationRequestParameters, forKey: "paginationRequestParameters")
        try values.encodeIfPresent(productColumnsToDisplay, forKey: "productColumnsToDisplay")
        try values.encode(productState, forKey: "productState")
        try values.encodeIfPresent(analyticsProductColumnFilters, forKey: "analyticsProductColumnFilters")
    }
}

public struct AnalyticsProductColumnFilters: Codable {
    /// The product sku filter
    ///
    /// Example: "M1234"
    public var sku: String?
    /// The product title filter
    ///
    /// Example: "Refrigérateur"
    public var title: String?
    /// Describes a filter on a product's column.
    /// The key is the column identifier of your catalog or a custom column.
    public var additionalAnalyticsProductColumnFilters: [String: AnalyticsProductColumnFilter]?

    public init(sku: String? = nil, title: String? = nil, additionalAnalyticsProductColumnFilters: [String: AnalyticsProductColumnFilter]? = nil) {
        self.sku = sku
        self.title = title
        self.additionalAnalyticsProductColumnFilters = additionalAnalyticsProductColumnFilters
    }
}

/// Example:
///
/// {
///   "672644c7-5bd0-4e25-88c1-1f732bda5e4c" : {
///     "operatorName" : "NumericalGreaterThan",
///     "values" : [
///       "100"
///     ]
///   }
/// }
public struct AnalyticsProductColumnFilter: Codable {
    /// Indicate the operator you want to apply on the columnId
    public var operatorName: String
    /// Must be null if the operator is "IsNull" or "IsNotNull".
    /// Can contains multiple value in case of "InList" operator. Otherwise a single value is expected.
    ///
    /// Example: ["My value"]
    public var values: [String]?

    public init(operatorName: String, values: [String]? = nil) {
        self.operatorName = operatorName
        self.values = values
    }
}

/// You can filter on the product state.
///
/// Example: "All"
public enum ProductStateFilter: String, Codable, CaseIterable {
    case all = "All"
    case enabled = "Enabled"
    case disabled = "Disabled"
}

public struct ReportByProductResponse: Codable {
    /// Example:
    ///
    /// {
    ///   "entryCount" : "25",
    ///   "links" : {
    ///     "first" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "1",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "last" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "38",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "next" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "2",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     }
    ///   },
    ///   "pageCount" : "38",
    ///   "totalEntryCount" : "943"
    /// }
    public var paginationResult: BeezUPCommonPaginationResult
    /// The currency code <a href="https://en.wikipedia.org/wiki/ISO_4217">(ISO 4217)</a>
    ///
    /// Example: "EUR"
    public var currencyCode: String
    public var products: [ReportByProduct]
    public var links: ReportByCommonResponseLinks

    public init(paginationResult: BeezUPCommonPaginationResult, currencyCode: String, products: [ReportByProduct], links: ReportByCommonResponseLinks) {
        self.paginationResult = paginationResult
        self.currencyCode = currencyCode
        self.products = products
        self.links = links
    }
}

public struct ReportByProduct: Codable {
    /// The basic information related to a product
    public var product: BeezUPCommonProductBasicInfo
    /// The count of channel where this product is enabled
    public var enabledOnChannelCount: Int
    /// The channel count where this product can be enabled
    public var channelCount: Int
    /// The click count for this product
    ///
    /// Example: 1234
    public var clickCount: Int
    /// The cost for this product
    ///
    /// Example: 101.42
    public var cost: Double
    /// The order count for this product
    ///
    /// Example: 234
    public var orderCount: Int
    /// The Return On Investment for this product
    ///
    /// Example: 42.01
    public var roi: Double?
    /// The margin for this product
    ///
    /// Example: 50.0
    public var margin: Double?
    /// The performance indicator based on the performance indicator formula indicated in the request for this product
    ///
    /// Example: 10.12
    public var performanceIndicator: Double
    /// The total sales for this product
    ///
    /// Example: 234.42
    public var totalSales: Double
    /// The product sold count count for this product
    public var soldProductCount: Int
    /// Depending if the report concerned multiple channels or one channel.
    public var links: ReportByProductLinks

    public init(product: BeezUPCommonProductBasicInfo, enabledOnChannelCount: Int, channelCount: Int, clickCount: Int, cost: Double, orderCount: Int, roi: Double? = nil, margin: Double? = nil, performanceIndicator: Double, totalSales: Double, soldProductCount: Int, links: ReportByProductLinks) {
        self.product = product
        self.enabledOnChannelCount = enabledOnChannelCount
        self.channelCount = channelCount
        self.clickCount = clickCount
        self.cost = cost
        self.orderCount = orderCount
        self.roi = roi
        self.margin = margin
        self.performanceIndicator = performanceIndicator
        self.totalSales = totalSales
        self.soldProductCount = soldProductCount
        self.links = links
    }
}

public struct OptimiseAllRequest: Codable {
    /// Contains common filter parameters with Order By functionnality
    public var orderedReportFilterCommonParameters: OrderedReportFilterCommonParameters
    /// The report type
    ///
    /// Example: "ByProduct"
    public var reportType: ReportType
    /// Example: ["4b460e31-3d1f-4117-922d-b159a64ec1d2"]
    public var productColumnsToDisplay: [String]?
    /// You can filter on the product state.
    ///
    /// Example: "All"
    public var productState: ProductStateFilter?
    public var analyticsProductColumnFilters: AnalyticsProductColumnFilters?

    public init(orderedReportFilterCommonParameters: OrderedReportFilterCommonParameters, reportType: ReportType, productColumnsToDisplay: [String]? = nil, productState: ProductStateFilter? = nil, analyticsProductColumnFilters: AnalyticsProductColumnFilters? = nil) {
        self.orderedReportFilterCommonParameters = orderedReportFilterCommonParameters
        self.reportType = reportType
        self.productColumnsToDisplay = productColumnsToDisplay
        self.productState = productState
        self.analyticsProductColumnFilters = analyticsProductColumnFilters
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.orderedReportFilterCommonParameters = try OrderedReportFilterCommonParameters(from: decoder)
        self.reportType = try ReportType(from: decoder)
        self.productColumnsToDisplay = try values.decodeIfPresent([String].self, forKey: "productColumnsToDisplay")
        self.productState = try ProductStateFilter(from: decoder)
        self.analyticsProductColumnFilters = try AnalyticsProductColumnFilters(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(orderedReportFilterCommonParameters, forKey: "orderedReportFilterCommonParameters")
        try values.encode(reportType, forKey: "reportType")
        try values.encodeIfPresent(productColumnsToDisplay, forKey: "productColumnsToDisplay")
        try values.encodeIfPresent(productState, forKey: "productState")
        try values.encodeIfPresent(analyticsProductColumnFilters, forKey: "analyticsProductColumnFilters")
    }
}

public struct OptimiseRequest: Codable {
    public var optimiseAllRequest: OptimiseAllRequest
    public var paginationRequestParameters: PaginationRequestParameters

    public init(optimiseAllRequest: OptimiseAllRequest, paginationRequestParameters: PaginationRequestParameters) {
        self.optimiseAllRequest = optimiseAllRequest
        self.paginationRequestParameters = paginationRequestParameters
    }

    public init(from decoder: Decoder) throws {
        self.optimiseAllRequest = try OptimiseAllRequest(from: decoder)
        self.paginationRequestParameters = try PaginationRequestParameters(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(optimiseAllRequest, forKey: "optimiseAllRequest")
        try values.encode(paginationRequestParameters, forKey: "paginationRequestParameters")
    }
}

/// Copy the optimisation between 2 channels
public struct CopyOptimisationRequest: Codable {
    /// The channel identifier
    ///
    /// Example: "2dc136a7-0d3d-4cc9-a825-a28a42c53e28"
    public var channelIDSource: String
    /// The channel identifier
    ///
    /// Example: "2dc136a7-0d3d-4cc9-a825-a28a42c53e28"
    public var channelIDTarget: String
    /// If true the existing optimisation will be kept
    ///
    /// Example: false
    public var isKeepExistingOptimisation: Bool

    public init(channelIDSource: String, channelIDTarget: String, isKeepExistingOptimisation: Bool) {
        self.channelIDSource = channelIDSource
        self.channelIDTarget = channelIDTarget
        self.isKeepExistingOptimisation = isKeepExistingOptimisation
    }

    private enum CodingKeys: String, CodingKey {
        case channelIDSource = "channelIdSource"
        case channelIDTarget = "channelIdTarget"
        case isKeepExistingOptimisation = "keepExistingOptimisation"
    }
}

/// Products optimisatisation copied
public struct CopyOptimisationResponse: Codable {
    /// The basic info related to a channel
    public var channel: BeezUPCommonChannelBasicInfo
    /// The catalog product count
    ///
    /// Example: 101
    public var catalogProductCount: Int
    /// The enabled product count
    ///
    /// Example: 101
    public var enabledProductCount: Int

    public init(channel: BeezUPCommonChannelBasicInfo, catalogProductCount: Int, enabledProductCount: Int) {
        self.channel = channel
        self.catalogProductCount = catalogProductCount
        self.enabledProductCount = enabledProductCount
    }
}

/// The report type
///
/// Example: "ByProduct"
public enum ReportType: String, Codable, CaseIterable {
    case byChannel = "ByChannel"
    case byCategory = "ByCategory"
    case byProduct = "ByProduct"
    case byDay = "ByDay"
}

public struct ReportFilterList: Codable {
    public var reportFilters: [ReportFilterHeader]
    public var links: ReportFiltersLinks

    public init(reportFilters: [ReportFilterHeader], links: ReportFiltersLinks) {
        self.reportFilters = reportFilters
        self.links = links
    }
}

public struct ReportFilterHeader: Codable {
    /// Report filter identifier
    ///
    /// Example: "fb19c53c-2f63-4262-9d94-2d7faa500acd"
    public var reportFilterID: String
    /// Report filter name
    ///
    /// Example: "My report filter"
    public var reportFilterName: String
    /// The report type
    ///
    /// Example: "ByProduct"
    public var reportType: ReportType
    public var links: ReportFilterHeaderLinks

    public init(reportFilterID: String, reportFilterName: String, reportType: ReportType, links: ReportFilterHeaderLinks) {
        self.reportFilterID = reportFilterID
        self.reportFilterName = reportFilterName
        self.reportType = reportType
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case reportFilterID = "reportFilterId"
        case reportFilterName
        case reportType
        case links
    }
}

public struct ReportFilter: Codable {
    /// Report filter identifier
    ///
    /// Example: "fb19c53c-2f63-4262-9d94-2d7faa500acd"
    public var reportFilterID: String
    /// Report filter name
    ///
    /// Example: "My report filter"
    public var reportFilterName: String
    public var parameters: ReportFilterParameters
    /// Indicates the actions you can do on this report filter
    public var links: ReportFilterLinks?

    public init(reportFilterID: String, reportFilterName: String, parameters: ReportFilterParameters, links: ReportFilterLinks? = nil) {
        self.reportFilterID = reportFilterID
        self.reportFilterName = reportFilterName
        self.parameters = parameters
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case reportFilterID = "reportFilterId"
        case reportFilterName
        case parameters
        case links
    }
}

public struct SaveReportFilterRequest: Codable {
    /// Report filter name
    ///
    /// Example: "My report filter"
    public var reportFilterName: String
    public var parameters: ReportFilterParameters

    public init(reportFilterName: String, parameters: ReportFilterParameters) {
        self.reportFilterName = reportFilterName
        self.parameters = parameters
    }
}

public struct ReportFilterParameters: Codable {
    /// Contains common filter parameters
    public var reportFilterCommonParameters: ReportFilterCommonParameters
    /// The report type
    ///
    /// Example: "ByProduct"
    public var reportType: ReportType
    /// Example: ["4b460e31-3d1f-4117-922d-b159a64ec1d2"]
    public var productColumnsToDisplay: [String]?
    /// You can filter on the product state.
    ///
    /// Example: "All"
    public var productState: ProductStateFilter?
    public var analyticsProductColumnFilters: AnalyticsProductColumnFilters?

    public init(reportFilterCommonParameters: ReportFilterCommonParameters, reportType: ReportType, productColumnsToDisplay: [String]? = nil, productState: ProductStateFilter? = nil, analyticsProductColumnFilters: AnalyticsProductColumnFilters? = nil) {
        self.reportFilterCommonParameters = reportFilterCommonParameters
        self.reportType = reportType
        self.productColumnsToDisplay = productColumnsToDisplay
        self.productState = productState
        self.analyticsProductColumnFilters = analyticsProductColumnFilters
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.reportFilterCommonParameters = try ReportFilterCommonParameters(from: decoder)
        self.reportType = try ReportType(from: decoder)
        self.productColumnsToDisplay = try values.decodeIfPresent([String].self, forKey: "productColumnsToDisplay")
        self.productState = try ProductStateFilter(from: decoder)
        self.analyticsProductColumnFilters = try AnalyticsProductColumnFilters(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(reportFilterCommonParameters, forKey: "reportFilterCommonParameters")
        try values.encode(reportType, forKey: "reportType")
        try values.encodeIfPresent(productColumnsToDisplay, forKey: "productColumnsToDisplay")
        try values.encodeIfPresent(productState, forKey: "productState")
        try values.encodeIfPresent(analyticsProductColumnFilters, forKey: "analyticsProductColumnFilters")
    }
}

public struct RuleList: Codable {
    /// Rule list
    public var rules: [Rule]
    /// Links to know if the user can create a rule or run all rules
    public var links: RuleListLinks

    public init(rules: [Rule], links: RuleListLinks) {
        self.rules = rules
        self.links = links
    }
}

public struct Rule: Codable {
    /// The identifier of the rule
    ///
    /// Example: "c38006b4-29d0-4b8a-978b-701a0b12d5a8"
    public var ruleID: String
    /// The name of the rule
    ///
    /// Example: "My Rule"
    public var ruleName: String
    /// The status of the last execution
    ///
    /// Example: "Succeeded"
    public var lastExecutionStatus: RuleLastExecutionStatus?
    /// The utc date of the last execution
    ///
    /// Example: "2016-08-29T09:12:33.001Z"
    public var lastExecutionUtcDate: Date?
    /// The optimisation action
    ///
    /// Example: "reenable"
    public var actionName: OptimisationActionName
    /// Report filter identifier linked to the rule
    ///
    /// Example: "fb19c53c-2f63-4262-9d94-2d7faa500acd"
    public var reportFilterID: String
    /// Rule execution position
    public var position: Int
    /// Is the rule enabled
    ///
    /// Example: true
    public var isEnabled: Bool
    /// Rule validity start utc date
    ///
    /// Example: "2016-08-29T09:12:33.001Z"
    public var validityStartUtcDate: Date?
    /// Rule validity end utc date
    ///
    /// Example: "3016-08-29T09:12:33.001Z"
    public var validityEndUtcDate: Date?
    /// Links to retrieve/action on other entities
    public var links: RuleLinks

    public init(ruleID: String, ruleName: String, lastExecutionStatus: RuleLastExecutionStatus? = nil, lastExecutionUtcDate: Date? = nil, actionName: OptimisationActionName, reportFilterID: String, position: Int, isEnabled: Bool, validityStartUtcDate: Date? = nil, validityEndUtcDate: Date? = nil, links: RuleLinks) {
        self.ruleID = ruleID
        self.ruleName = ruleName
        self.lastExecutionStatus = lastExecutionStatus
        self.lastExecutionUtcDate = lastExecutionUtcDate
        self.actionName = actionName
        self.reportFilterID = reportFilterID
        self.position = position
        self.isEnabled = isEnabled
        self.validityStartUtcDate = validityStartUtcDate
        self.validityEndUtcDate = validityEndUtcDate
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case ruleID = "ruleId"
        case ruleName
        case lastExecutionStatus
        case lastExecutionUtcDate
        case actionName
        case reportFilterID = "reportFilterId"
        case position
        case isEnabled = "enabled"
        case validityStartUtcDate
        case validityEndUtcDate
        case links
    }
}

public struct CreateRuleRequest: Codable {
    /// The optimisation action
    ///
    /// Example: "reenable"
    public var optimisationActionName: OptimisationActionName
    /// The name of the rule
    ///
    /// Example: "My rule"
    public var ruleName: String
    /// The report filter to use for the rule
    ///
    /// Example: "fb19c53c-2f63-4262-9d94-2d7faa500acd"
    public var reportFilterID: String
    /// The start validity utc date of the rule
    ///
    /// Example: "2016-08-29T09:12:33.001Z"
    public var startUtcDate: Date?
    /// The end validity utc date of the rule
    ///
    /// Example: "2017-09-30T10:42:40.001Z"
    public var endUtcDate: Date?

    public init(optimisationActionName: OptimisationActionName, ruleName: String, reportFilterID: String, startUtcDate: Date? = nil, endUtcDate: Date? = nil) {
        self.optimisationActionName = optimisationActionName
        self.ruleName = ruleName
        self.reportFilterID = reportFilterID
        self.startUtcDate = startUtcDate
        self.endUtcDate = endUtcDate
    }

    private enum CodingKeys: String, CodingKey {
        case optimisationActionName
        case ruleName
        case reportFilterID = "reportFilterId"
        case startUtcDate
        case endUtcDate
    }
}

/// This update will replace the following values.
public struct UpdateRuleRequest: Codable {
    /// The name of the rule
    ///
    /// Example: "My Rule Renamed"
    public var ruleName: String
    /// Not required. The start validity utc date of the rule.
    ///
    /// Example: "2016-08-29T09:12:33.001Z"
    public var startUtcDate: Date?
    /// Not required. The end validity utc date of the rule
    ///
    /// Example: "2016-08-29T09:12:33.001Z"
    public var endUtcDate: Date?

    public init(ruleName: String, startUtcDate: Date? = nil, endUtcDate: Date? = nil) {
        self.ruleName = ruleName
        self.startUtcDate = startUtcDate
        self.endUtcDate = endUtcDate
    }
}

/// The optimisation action
///
/// Example: "reenable"
public enum OptimisationActionName: String, Codable, CaseIterable {
    case reenable
    case disable
}

public struct RuleExecutionReportings: Codable {
    /// The rules executions history
    public var executions: [RuleExecutionReporting]?
    /// Example:
    ///
    /// {
    ///   "entryCount" : "25",
    ///   "links" : {
    ///     "first" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "1",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "last" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "38",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     },
    ///     "next" : {
    ///       "href" : "\/v2\/user\/marketplaces\/orders\/list\/full",
    ///       "method" : "POST",
    ///       "parameters" : [
    ///         {
    ///           "in" : "body",
    ///           "name" : "request",
    ///           "schema" : "orderListRequest",
    ///           "type" : "object",
    ///           "value" : {
    ///             "beginPeriodUtcDate" : "2014-08-25T07:32:31.584Z",
    ///             "endPeriodUtcDate" : "2014-09-24T07:32:31.584Z",
    ///             "pageNumber" : "2",
    ///             "pageSize" : "25"
    ///           }
    ///         }
    ///       ]
    ///     }
    ///   },
    ///   "pageCount" : "38",
    ///   "totalEntryCount" : "943"
    /// }
    public var paginationResult: BeezUPCommonPaginationResult?

    public init(executions: [RuleExecutionReporting]? = nil, paginationResult: BeezUPCommonPaginationResult? = nil) {
        self.executions = executions
        self.paginationResult = paginationResult
    }
}

public struct RuleExecutionReporting: Codable {
    /// The rule identifier
    ///
    /// Example: "fd9a23a1-569b-40af-af91-f7275a57bf89"
    public var ruleID: String
    /// The name of the rule
    ///
    /// Example: "toto"
    public var ruleName: String
    /// The start utc date of the execution of the rule
    ///
    /// Example: "2016-08-29T09:12:33.001Z"
    public var startedUtcDate: Date?
    /// The completed utc date of the execution of the rule
    ///
    /// Example: "2016-08-29T09:12:33.001Z"
    public var completedUtcDate: Date?
    /// The status of the execution of the rule
    ///
    /// Example: "Succeeded"
    public var status: RuleExecutionReportingStatus
    /// The error type for this execution if any
    ///
    /// Example: "ChannelNotPresent"
    public var errorType: RuleExecutionReportingErrorType?
    /// The count of affected products, active or not
    public var affectedProductCount: Int?
    /// The count of affected active products
    public var activeAffectedProductCount: Int?
    /// The count of affected Channels across all products
    public var affectedChannelCount: Int?
    /// The optimisation action
    ///
    /// Example: "reenable"
    public var optimisationActionName: OptimisationActionName?
    /// The userId that executed the rule if any
    ///
    /// Example: "e8289350-69f8-45a6-b0ca-b641c83e0422"
    public var userID: String?
    /// The requestor type for the execution of the rule
    ///
    /// Example: "User"
    public var executionSource: RuleExecutionReportingExecutionSource
    /// The url for the excel report for this execution
    ///
    /// Example: "http://www.google.com"
    public var reportURL: String?
    /// Links to retrieve/action on this rule execution
    public var links: RuleExecutionReportingLinks?

    public init(ruleID: String, ruleName: String, startedUtcDate: Date? = nil, completedUtcDate: Date? = nil, status: RuleExecutionReportingStatus, errorType: RuleExecutionReportingErrorType? = nil, affectedProductCount: Int? = nil, activeAffectedProductCount: Int? = nil, affectedChannelCount: Int? = nil, optimisationActionName: OptimisationActionName? = nil, userID: String? = nil, executionSource: RuleExecutionReportingExecutionSource, reportURL: String? = nil, links: RuleExecutionReportingLinks? = nil) {
        self.ruleID = ruleID
        self.ruleName = ruleName
        self.startedUtcDate = startedUtcDate
        self.completedUtcDate = completedUtcDate
        self.status = status
        self.errorType = errorType
        self.affectedProductCount = affectedProductCount
        self.activeAffectedProductCount = activeAffectedProductCount
        self.affectedChannelCount = affectedChannelCount
        self.optimisationActionName = optimisationActionName
        self.userID = userID
        self.executionSource = executionSource
        self.reportURL = reportURL
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case ruleID = "ruleId"
        case ruleName
        case startedUtcDate
        case completedUtcDate
        case status
        case errorType
        case affectedProductCount
        case activeAffectedProductCount
        case affectedChannelCount
        case optimisationActionName
        case userID = "userId"
        case executionSource
        case reportURL = "reportUrl"
        case links
    }
}

/// The status of the last execution
///
/// Example: "Succeeded"
public enum RuleLastExecutionStatus: String, Codable, CaseIterable {
    case inProgress = "InProgress"
    case succeeded = "Succeeded"
    case failed = "Failed"
    case unknown = "Unknown"
}

/// The status of the execution of the rule
///
/// Example: "Succeeded"
public enum RuleExecutionReportingStatus: String, Codable, CaseIterable {
    case inProgress = "InProgress"
    case succeeded = "Succeeded"
    case alreadyInProgress = "AlreadyInProgress"
    case aborted = "Aborted"
    case failed = "Failed"
    case unknown = "Unknown"
}

/// The requestor type for the execution of the rule
///
/// Example: "User"
public enum RuleExecutionReportingExecutionSource: String, Codable, CaseIterable {
    case scheduler = "Scheduler"
    case user = "User"
}

/// The error type for this execution if any
///
/// Example: "ChannelNotPresent"
public enum RuleExecutionReportingErrorType: String, Codable, CaseIterable {
    case channelNotPresent = "ChannelNotPresent"
    case storeIsInSystemBlockState = "StoreIsInSystemBlockState"
}

/// Indicates how global actions you can do like how to create a channel catalog, exclusion filter operators, etc...
public struct LegacyTrackingChannelCatalogListLinks: Codable {
    public var this: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3? = nil) {
        self.this = this
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
    }
}

/// Indicates the actions you can do on a channel catalog
public struct LegacyTrackingChannelCatalogLinks: Codable {
    public var this: BeezUPCommonLink3
    public var migrate: BeezUPCommonLink3?

    public init(this: BeezUPCommonLink3, migrate: BeezUPCommonLink3? = nil) {
        self.this = this
        self.migrate = migrate
    }

    private enum CodingKeys: String, CodingKey {
        case this = "self"
        case migrate
    }
}

/// This is the index of the channel catalog API
public struct LegacyTrackingChannelCatalogList: Codable {
    /// Indicates how global actions you can do like how to create a channel catalog, exclusion filter operators, etc...
    public var links: LegacyTrackingChannelCatalogListLinks?
    /// The channel catalog list. The key is the channel catalog identifier
    public var channelCatalogs: [String: LegacyTrackingChannelCatalog]?

    public init(links: LegacyTrackingChannelCatalogListLinks? = nil, channelCatalogs: [String: LegacyTrackingChannelCatalog]? = nil) {
        self.links = links
        self.channelCatalogs = channelCatalogs
    }
}

/// The channel catalog
public struct LegacyTrackingChannelCatalog: Codable {
    /// Indicates the actions you can do on a channel catalog
    public var links: LegacyTrackingChannelCatalogLinks

    public init(links: LegacyTrackingChannelCatalogLinks) {
        self.links = links
    }
}

public enum AnyJSON: Equatable, Codable {
    case string(String)
    case number(Double)
    case object([String: AnyJSON])
    case array([AnyJSON])
    case bool(Bool)

    var value: Any {
        switch self {
        case .string(let string): return string
        case .number(let double): return double
        case .object(let dictionary): return dictionary
        case .array(let array): return array
        case .bool(let bool): return bool
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .array(array): try container.encode(array)
        case let .object(object): try container.encode(object)
        case let .string(string): try container.encode(string)
        case let .number(number): try container.encode(number)
        case let .bool(bool): try container.encode(bool)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let object = try? container.decode([String: AnyJSON].self) {
            self = .object(object)
        } else if let array = try? container.decode([AnyJSON].self) {
            self = .array(array)
        } else if let string = try? container.decode(String.self) {
            self = .string(string)
        } else if let bool = try? container.decode(Bool.self) {
            self = .bool(bool)
        } else if let number = try? container.decode(Double.self) {
            self = .number(number)
        } else {
            throw DecodingError.dataCorrupted(
                .init(codingPath: decoder.codingPath, debugDescription: "Invalid JSON value.")
            )
        }
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
