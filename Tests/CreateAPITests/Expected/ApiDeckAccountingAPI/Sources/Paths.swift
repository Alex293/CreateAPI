// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import Get
import URLQueryEncoder

extension Paths {
    public static var taxRates: TaxRates {
        TaxRates(path: "/accounting/tax-rates")
    }

    public struct TaxRates {
        /// Path: `/accounting/tax-rates`
        public let path: String

        /// List Tax Rates
        ///
        /// List Tax Rates. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Connectors Affected: Quickbooks
        public func get(parameters: GetParameters? = nil) -> Request<ApiDeckAccountingAPI.GetTaxRatesResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var isRaw: Bool?
            public var cursor: String?
            public var limit: Int?

            public init(isRaw: Bool? = nil, cursor: String? = nil, limit: Int? = nil) {
                self.isRaw = isRaw
                self.cursor = cursor
                self.limit = limit
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isRaw, forKey: "raw")
                encoder.encode(cursor, forKey: "cursor")
                encoder.encode(limit, forKey: "limit")
                return encoder.items
            }
        }

        /// Create Tax Rate
        public func post(isRaw: Bool? = nil, _ body: ApiDeckAccountingAPI.TaxRate) -> Request<ApiDeckAccountingAPI.CreateTaxRateResponse> {
            .post(path, query: makePostQuery(isRaw), body: body)
        }

        private func makePostQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }
    }
}

extension Paths.TaxRates {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/accounting/tax-rates/{id}`
        public let path: String

        /// Get Tax Rate
        ///
        /// Get Tax Rate. Note: Not all connectors return the actual rate/percentage value. In this case, only the tax code or reference is returned. Support will soon be added to return the actual rate/percentage by doing additional calls in the background to provide the full view of a given tax rate. Connectors Affected: Quickbooks
        public func get(isRaw: Bool? = nil) -> Request<ApiDeckAccountingAPI.GetTaxRateResponse> {
            .get(path, query: makeGetQuery(isRaw))
        }

        private func makeGetQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }

        /// Update Tax Rate
        public func patch(isRaw: Bool? = nil, _ body: ApiDeckAccountingAPI.TaxRate) -> Request<ApiDeckAccountingAPI.UpdateTaxRateResponse> {
            .patch(path, query: makePatchQuery(isRaw), body: body)
        }

        private func makePatchQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }

        /// Delete Tax Rate
        public func delete(isRaw: Bool? = nil) -> Request<ApiDeckAccountingAPI.DeleteTaxRateResponse> {
            .delete(path, query: makeDeleteQuery(isRaw))
        }

        private func makeDeleteQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }
    }
}

extension Paths {
    public static var invoices: Invoices {
        Invoices(path: "/accounting/invoices")
    }

    public struct Invoices {
        /// Path: `/accounting/invoices`
        public let path: String

        /// List Invoices
        public func get(parameters: GetParameters? = nil) -> Request<ApiDeckAccountingAPI.GetInvoicesResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var isRaw: Bool?
            public var cursor: String?
            public var limit: Int?

            public init(isRaw: Bool? = nil, cursor: String? = nil, limit: Int? = nil) {
                self.isRaw = isRaw
                self.cursor = cursor
                self.limit = limit
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isRaw, forKey: "raw")
                encoder.encode(cursor, forKey: "cursor")
                encoder.encode(limit, forKey: "limit")
                return encoder.items
            }
        }

        /// Create Invoice
        public func post(isRaw: Bool? = nil, _ body: ApiDeckAccountingAPI.Invoice) -> Request<ApiDeckAccountingAPI.CreateInvoiceResponse> {
            .post(path, query: makePostQuery(isRaw), body: body)
        }

        private func makePostQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }
    }
}

extension Paths.Invoices {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/accounting/invoices/{id}`
        public let path: String

        /// Get Invoice
        public func get(isRaw: Bool? = nil) -> Request<ApiDeckAccountingAPI.GetInvoiceResponse> {
            .get(path, query: makeGetQuery(isRaw))
        }

        private func makeGetQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }

        /// Update Invoice
        public func patch(isRaw: Bool? = nil, _ body: ApiDeckAccountingAPI.Invoice) -> Request<ApiDeckAccountingAPI.UpdateInvoiceResponse> {
            .patch(path, query: makePatchQuery(isRaw), body: body)
        }

        private func makePatchQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }

        /// Delete Invoice
        public func delete(isRaw: Bool? = nil) -> Request<ApiDeckAccountingAPI.DeleteInvoiceResponse> {
            .delete(path, query: makeDeleteQuery(isRaw))
        }

        private func makeDeleteQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }
    }
}

extension Paths {
    public static var ledgerAccounts: LedgerAccounts {
        LedgerAccounts(path: "/accounting/ledger-accounts")
    }

    public struct LedgerAccounts {
        /// Path: `/accounting/ledger-accounts`
        public let path: String

        /// List Ledger Accounts
        public func get(parameters: GetParameters? = nil) -> Request<ApiDeckAccountingAPI.GetLedgerAccountsResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var isRaw: Bool?
            public var cursor: String?
            public var limit: Int?

            public init(isRaw: Bool? = nil, cursor: String? = nil, limit: Int? = nil) {
                self.isRaw = isRaw
                self.cursor = cursor
                self.limit = limit
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isRaw, forKey: "raw")
                encoder.encode(cursor, forKey: "cursor")
                encoder.encode(limit, forKey: "limit")
                return encoder.items
            }
        }

        /// Create Ledger Account
        public func post(isRaw: Bool? = nil, _ body: ApiDeckAccountingAPI.LedgerAccount) -> Request<ApiDeckAccountingAPI.CreateLedgerAccountResponse> {
            .post(path, query: makePostQuery(isRaw), body: body)
        }

        private func makePostQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }
    }
}

extension Paths.LedgerAccounts {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/accounting/ledger-accounts/{id}`
        public let path: String

        /// Get Ledger Account
        public func get(isRaw: Bool? = nil) -> Request<ApiDeckAccountingAPI.GetLedgerAccountResponse> {
            .get(path, query: makeGetQuery(isRaw))
        }

        private func makeGetQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }

        /// Update Ledger Account
        public func patch(isRaw: Bool? = nil, _ body: ApiDeckAccountingAPI.LedgerAccount) -> Request<ApiDeckAccountingAPI.UpdateLedgerAccountResponse> {
            .patch(path, query: makePatchQuery(isRaw), body: body)
        }

        private func makePatchQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }

        /// Delete Ledger Account
        public func delete(isRaw: Bool? = nil) -> Request<ApiDeckAccountingAPI.DeleteLedgerAccountResponse> {
            .delete(path, query: makeDeleteQuery(isRaw))
        }

        private func makeDeleteQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }
    }
}

extension Paths {
    public static var invoiceItems: InvoiceItems {
        InvoiceItems(path: "/accounting/invoice-items")
    }

    public struct InvoiceItems {
        /// Path: `/accounting/invoice-items`
        public let path: String

        /// List Invoice Items
        public func get(parameters: GetParameters? = nil) -> Request<ApiDeckAccountingAPI.GetInvoiceItemsResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var isRaw: Bool?
            public var cursor: String?
            public var limit: Int?

            public init(isRaw: Bool? = nil, cursor: String? = nil, limit: Int? = nil) {
                self.isRaw = isRaw
                self.cursor = cursor
                self.limit = limit
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isRaw, forKey: "raw")
                encoder.encode(cursor, forKey: "cursor")
                encoder.encode(limit, forKey: "limit")
                return encoder.items
            }
        }

        /// Create Invoice Item
        public func post(isRaw: Bool? = nil, _ body: ApiDeckAccountingAPI.InvoiceItem) -> Request<ApiDeckAccountingAPI.CreateInvoiceItemResponse> {
            .post(path, query: makePostQuery(isRaw), body: body)
        }

        private func makePostQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }
    }
}

extension Paths.InvoiceItems {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/accounting/invoice-items/{id}`
        public let path: String

        /// Get Invoice Item
        public func get(isRaw: Bool? = nil) -> Request<ApiDeckAccountingAPI.GetInvoiceItemResponse> {
            .get(path, query: makeGetQuery(isRaw))
        }

        private func makeGetQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }

        /// Update Invoice Item
        public func patch(isRaw: Bool? = nil, _ body: ApiDeckAccountingAPI.InvoiceItem) -> Request<ApiDeckAccountingAPI.UpdateInvoiceItemsResponse> {
            .patch(path, query: makePatchQuery(isRaw), body: body)
        }

        private func makePatchQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }

        /// Delete Invoice Item
        public func delete(isRaw: Bool? = nil) -> Request<ApiDeckAccountingAPI.DeleteTaxRateResponse> {
            .delete(path, query: makeDeleteQuery(isRaw))
        }

        private func makeDeleteQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }
    }
}

extension Paths {
    public static var customers: Customers {
        Customers(path: "/accounting/customers")
    }

    public struct Customers {
        /// Path: `/accounting/customers`
        public let path: String

        /// List Customers
        public func get(parameters: GetParameters? = nil) -> Request<ApiDeckAccountingAPI.GetCustomersResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var isRaw: Bool?
            public var cursor: String?
            public var limit: Int?

            public init(isRaw: Bool? = nil, cursor: String? = nil, limit: Int? = nil) {
                self.isRaw = isRaw
                self.cursor = cursor
                self.limit = limit
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isRaw, forKey: "raw")
                encoder.encode(cursor, forKey: "cursor")
                encoder.encode(limit, forKey: "limit")
                return encoder.items
            }
        }

        /// Create Customer
        public func post(isRaw: Bool? = nil, _ body: ApiDeckAccountingAPI.AccountingCustomer) -> Request<ApiDeckAccountingAPI.CreateCustomerResponse> {
            .post(path, query: makePostQuery(isRaw), body: body)
        }

        private func makePostQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }
    }
}

extension Paths.Customers {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/accounting/customers/{id}`
        public let path: String

        /// Get Customer
        public func get(isRaw: Bool? = nil) -> Request<ApiDeckAccountingAPI.GetCustomerResponse> {
            .get(path, query: makeGetQuery(isRaw))
        }

        private func makeGetQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }

        /// Update Customer
        public func patch(isRaw: Bool? = nil, _ body: ApiDeckAccountingAPI.AccountingCustomer) -> Request<ApiDeckAccountingAPI.UpdateCustomerResponse> {
            .patch(path, query: makePatchQuery(isRaw), body: body)
        }

        private func makePatchQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }

        /// Delete Customer
        public func delete(isRaw: Bool? = nil) -> Request<ApiDeckAccountingAPI.DeleteCustomerResponse> {
            .delete(path, query: makeDeleteQuery(isRaw))
        }

        private func makeDeleteQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }
    }
}

extension Paths {
    public static var payments: Payments {
        Payments(path: "/accounting/payments")
    }

    public struct Payments {
        /// Path: `/accounting/payments`
        public let path: String

        /// List Payments
        public func get(parameters: GetParameters? = nil) -> Request<ApiDeckAccountingAPI.GetPaymentsResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var isRaw: Bool?
            public var cursor: String?
            public var limit: Int?

            public init(isRaw: Bool? = nil, cursor: String? = nil, limit: Int? = nil) {
                self.isRaw = isRaw
                self.cursor = cursor
                self.limit = limit
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(isRaw, forKey: "raw")
                encoder.encode(cursor, forKey: "cursor")
                encoder.encode(limit, forKey: "limit")
                return encoder.items
            }
        }

        /// Create Payment
        public func post(isRaw: Bool? = nil, _ body: ApiDeckAccountingAPI.Payment) -> Request<ApiDeckAccountingAPI.CreatePaymentResponse> {
            .post(path, query: makePostQuery(isRaw), body: body)
        }

        private func makePostQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }
    }
}

extension Paths.Payments {
    public func id(_ id: String) -> WithID {
        WithID(path: "\(path)/\(id)")
    }

    public struct WithID {
        /// Path: `/accounting/payments/{id}`
        public let path: String

        /// Get Payment
        public func get(isRaw: Bool? = nil) -> Request<ApiDeckAccountingAPI.GetPaymentResponse> {
            .get(path, query: makeGetQuery(isRaw))
        }

        private func makeGetQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }

        /// Update Payment
        public func patch(isRaw: Bool? = nil, _ body: ApiDeckAccountingAPI.Payment) -> Request<ApiDeckAccountingAPI.UpdatePaymentResponse> {
            .patch(path, query: makePatchQuery(isRaw), body: body)
        }

        private func makePatchQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }

        /// Delete Payment
        public func delete(isRaw: Bool? = nil) -> Request<ApiDeckAccountingAPI.DeletePaymentResponse> {
            .delete(path, query: makeDeleteQuery(isRaw))
        }

        private func makeDeleteQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }
    }
}

extension Paths {
    public static var companyInfo: CompanyInfo {
        CompanyInfo(path: "/accounting/company-info")
    }

    public struct CompanyInfo {
        /// Path: `/accounting/company-info`
        public let path: String

        /// Get company info
        public func get(isRaw: Bool? = nil) -> Request<ApiDeckAccountingAPI.GetCompanyInfoResponse> {
            .get(path, query: makeGetQuery(isRaw))
        }

        private func makeGetQuery(_ isRaw: Bool?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(isRaw, forKey: "raw")
            return encoder.items
        }
    }
}

public enum Paths {}
