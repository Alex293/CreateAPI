// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import Get
import URLQueryEncoder

extension Paths {
    public static var byDateJSON: ByDateJSON {
        ByDateJSON(path: "/user-content/by-date.json")
    }

    public struct ByDateJSON {
        /// Path: `/user-content/by-date.json`
        public let path: String

        /// Comments by Date
        public func get(date: String? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(date))
        }

        public struct GetResponse: Decodable {
            public var copyright: String?
            public var debug: Debug?
            public var results: Results?
            public var status: String?

            public struct Debug: Decodable {
                public var version: Double?

                public init(version: Double? = nil) {
                    self.version = version
                }
            }

            public struct Results: Decodable {
                public var apiTimestamp: String?
                public var comments: [Commants]?
                public var totalCommentsFound: Int?
                public var totalCommentsReturned: Int?

                public struct Commants: Decodable {
                    public var approveDate: String?
                    public var assetID: Int?
                    public var assetURL: String?
                    public var commentBody: String?
                    public var commentID: Int?
                    public var commentSequence: Int?
                    public var commentTitle: String?
                    public var commentType: String?
                    public var createDate: String?
                    public var editorsSelection: Int?
                    public var lft: Int?
                    public var parentID: AnyJSON?
                    public var recommendationCount: Int?
                    public var replies: [[String: AnyJSON]]?
                    public var replyCount: Int?
                    public var rgt: Int?
                    public var status: String?
                    public var statusID: Int?
                    public var updateDate: String?
                    public var userDisplayName: String?
                    public var userID: Int?
                    public var userLocation: String?
                    public var userTitle: String?
                    public var userURL: Int?

                    public init(approveDate: String? = nil, assetID: Int? = nil, assetURL: String? = nil, commentBody: String? = nil, commentID: Int? = nil, commentSequence: Int? = nil, commentTitle: String? = nil, commentType: String? = nil, createDate: String? = nil, editorsSelection: Int? = nil, lft: Int? = nil, parentID: AnyJSON? = nil, recommendationCount: Int? = nil, replies: [[String: AnyJSON]]? = nil, replyCount: Int? = nil, rgt: Int? = nil, status: String? = nil, statusID: Int? = nil, updateDate: String? = nil, userDisplayName: String? = nil, userID: Int? = nil, userLocation: String? = nil, userTitle: String? = nil, userURL: Int? = nil) {
                        self.approveDate = approveDate
                        self.assetID = assetID
                        self.assetURL = assetURL
                        self.commentBody = commentBody
                        self.commentID = commentID
                        self.commentSequence = commentSequence
                        self.commentTitle = commentTitle
                        self.commentType = commentType
                        self.createDate = createDate
                        self.editorsSelection = editorsSelection
                        self.lft = lft
                        self.parentID = parentID
                        self.recommendationCount = recommendationCount
                        self.replies = replies
                        self.replyCount = replyCount
                        self.rgt = rgt
                        self.status = status
                        self.statusID = statusID
                        self.updateDate = updateDate
                        self.userDisplayName = userDisplayName
                        self.userID = userID
                        self.userLocation = userLocation
                        self.userTitle = userTitle
                        self.userURL = userURL
                    }
                }

                public init(apiTimestamp: String? = nil, comments: [Commants]? = nil, totalCommentsFound: Int? = nil, totalCommentsReturned: Int? = nil) {
                    self.apiTimestamp = apiTimestamp
                    self.comments = comments
                    self.totalCommentsFound = totalCommentsFound
                    self.totalCommentsReturned = totalCommentsReturned
                }

                private enum CodingKeys: String, CodingKey {
                    case apiTimestamp = "api_timestamp"
                    case comments
                    case totalCommentsFound
                    case totalCommentsReturned
                }
            }

            public init(copyright: String? = nil, debug: Debug? = nil, results: Results? = nil, status: String? = nil) {
                self.copyright = copyright
                self.debug = debug
                self.results = results
                self.status = status
            }
        }

        private func makeGetQuery(_ date: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(date, forKey: "date")
            return encoder.items
        }
    }
}

extension Paths {
    public static var recentJSON: RecentJSON {
        RecentJSON(path: "/user-content/recent.json")
    }

    public struct RecentJSON {
        /// Path: `/user-content/recent.json`
        public let path: String

        /// Recent User Comments
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var copyright: String?
            public var debug: Debug?
            public var results: Results?
            public var status: String?

            public struct Debug: Decodable {
                public var version: Double?

                public init(version: Double? = nil) {
                    self.version = version
                }
            }

            public struct Results: Decodable {
                public var apiTimestamp: String?
                public var comments: [Commants]?
                public var totalCommentsReturned: Int?

                public struct Commants: Decodable {
                    public var approveDate: String?
                    public var asset: Asset?
                    public var assetID: Int?
                    public var commentBody: String?
                    public var commentID: Int?
                    public var commentSequence: Int?
                    public var commentTitle: String?
                    public var commentType: String?
                    public var createDate: String?
                    public var displayName: String?
                    public var editorsSelection: Int?
                    public var location: String?
                    public var parentID: AnyJSON?
                    public var recommendationCount: Int?
                    public var replies: [[String: AnyJSON]]?
                    public var status: String?
                    public var statusID: Int?
                    public var updateDate: String?
                    public var userDisplayName: String?
                    public var userID: Int?
                    public var userLocation: String?
                    public var userTitle: String?
                    public var userURL: String?

                    public struct Asset: Decodable {
                        public var allProperties: [AllProperty]?
                        public var assetID: Int?
                        public var assetTitle: String?
                        public var assetURL: String?
                        public var createDate: String?
                        public var labels: [[String: AnyJSON]]?
                        public var properties: Properties?
                        public var source: String?
                        public var taxonomy: String?
                        public var text: [[String: AnyJSON]]?
                        public var updateDate: String?
                        public var vendorID: String?

                        public struct AllProperty: Decodable {
                            public var description: String?
                            public var name: String?
                            public var properties: [[String: AnyJSON]]?

                            public init(description: String? = nil, name: String? = nil, properties: [[String: AnyJSON]]? = nil) {
                                self.description = description
                                self.name = name
                                self.properties = properties
                            }
                        }

                        public struct Properties: Decodable {
                            public var automoderationOn: AutomoderationOn?
                            public var commentListSortEditors: CommentListSortEditors?
                            public var reachedMaxComOff: ReachedMaxComOff?

                            public struct AutomoderationOn: Decodable {
                                public var groupID: Int?
                                public var taxonomyID: Int?

                                public init(groupID: Int? = nil, taxonomyID: Int? = nil) {
                                    self.groupID = groupID
                                    self.taxonomyID = taxonomyID
                                }
                            }

                            public struct CommentListSortEditors: Decodable {
                                public var groupID: Int?
                                public var taxonomyID: Int?

                                public init(groupID: Int? = nil, taxonomyID: Int? = nil) {
                                    self.groupID = groupID
                                    self.taxonomyID = taxonomyID
                                }
                            }

                            public struct ReachedMaxComOff: Decodable {
                                public var groupID: Int?
                                public var taxonomyID: Int?

                                public init(groupID: Int? = nil, taxonomyID: Int? = nil) {
                                    self.groupID = groupID
                                    self.taxonomyID = taxonomyID
                                }
                            }

                            public init(automoderationOn: AutomoderationOn? = nil, commentListSortEditors: CommentListSortEditors? = nil, reachedMaxComOff: ReachedMaxComOff? = nil) {
                                self.automoderationOn = automoderationOn
                                self.commentListSortEditors = commentListSortEditors
                                self.reachedMaxComOff = reachedMaxComOff
                            }

                            private enum CodingKeys: String, CodingKey {
                                case automoderationOn = "automoderation-on"
                                case commentListSortEditors = "comment-list-sort-editors"
                                case reachedMaxComOff = "reached-max-com-off"
                            }
                        }

                        public init(allProperties: [AllProperty]? = nil, assetID: Int? = nil, assetTitle: String? = nil, assetURL: String? = nil, createDate: String? = nil, labels: [[String: AnyJSON]]? = nil, properties: Properties? = nil, source: String? = nil, taxonomy: String? = nil, text: [[String: AnyJSON]]? = nil, updateDate: String? = nil, vendorID: String? = nil) {
                            self.allProperties = allProperties
                            self.assetID = assetID
                            self.assetTitle = assetTitle
                            self.assetURL = assetURL
                            self.createDate = createDate
                            self.labels = labels
                            self.properties = properties
                            self.source = source
                            self.taxonomy = taxonomy
                            self.text = text
                            self.updateDate = updateDate
                            self.vendorID = vendorID
                        }

                        private enum CodingKeys: String, CodingKey {
                            case allProperties = "all-properties"
                            case assetID
                            case assetTitle
                            case assetURL
                            case createDate
                            case labels
                            case properties
                            case source
                            case taxonomy
                            case text
                            case updateDate
                            case vendorID
                        }
                    }

                    public init(approveDate: String? = nil, asset: Asset? = nil, assetID: Int? = nil, commentBody: String? = nil, commentID: Int? = nil, commentSequence: Int? = nil, commentTitle: String? = nil, commentType: String? = nil, createDate: String? = nil, displayName: String? = nil, editorsSelection: Int? = nil, location: String? = nil, parentID: AnyJSON? = nil, recommendationCount: Int? = nil, replies: [[String: AnyJSON]]? = nil, status: String? = nil, statusID: Int? = nil, updateDate: String? = nil, userDisplayName: String? = nil, userID: Int? = nil, userLocation: String? = nil, userTitle: String? = nil, userURL: String? = nil) {
                        self.approveDate = approveDate
                        self.asset = asset
                        self.assetID = assetID
                        self.commentBody = commentBody
                        self.commentID = commentID
                        self.commentSequence = commentSequence
                        self.commentTitle = commentTitle
                        self.commentType = commentType
                        self.createDate = createDate
                        self.displayName = displayName
                        self.editorsSelection = editorsSelection
                        self.location = location
                        self.parentID = parentID
                        self.recommendationCount = recommendationCount
                        self.replies = replies
                        self.status = status
                        self.statusID = statusID
                        self.updateDate = updateDate
                        self.userDisplayName = userDisplayName
                        self.userID = userID
                        self.userLocation = userLocation
                        self.userTitle = userTitle
                        self.userURL = userURL
                    }

                    private enum CodingKeys: String, CodingKey {
                        case approveDate
                        case asset
                        case assetID
                        case commentBody
                        case commentID
                        case commentSequence
                        case commentTitle
                        case commentType
                        case createDate
                        case displayName = "display_name"
                        case editorsSelection
                        case location
                        case parentID
                        case recommendationCount
                        case replies
                        case status
                        case statusID
                        case updateDate
                        case userDisplayName
                        case userID
                        case userLocation
                        case userTitle
                        case userURL
                    }
                }

                public init(apiTimestamp: String? = nil, comments: [Commants]? = nil, totalCommentsReturned: Int? = nil) {
                    self.apiTimestamp = apiTimestamp
                    self.comments = comments
                    self.totalCommentsReturned = totalCommentsReturned
                }

                private enum CodingKeys: String, CodingKey {
                    case apiTimestamp = "api_timestamp"
                    case comments
                    case totalCommentsReturned
                }
            }

            public init(copyright: String? = nil, debug: Debug? = nil, results: Results? = nil, status: String? = nil) {
                self.copyright = copyright
                self.debug = debug
                self.results = results
                self.status = status
            }
        }
    }
}

extension Paths {
    public static var urljson: URLJSON {
        URLJSON(path: "/user-content/url.json")
    }

    public struct URLJSON {
        /// Path: `/user-content/url.json`
        public let path: String

        /// Comments by URL
        public func get(url: String? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(url))
        }

        public struct GetResponse: Decodable {
            public var copyright: String?
            public var debug: Debug?
            public var results: Results?
            public var status: String?

            public struct Debug: Decodable {
                public var version: Double?

                public init(version: Double? = nil) {
                    self.version = version
                }
            }

            public struct Results: Decodable {
                public var apiTimestamp: String?
                public var callerID: AnyJSON?
                public var comments: [Commants]?
                public var depthLimit: Int?
                public var filter: String?
                public var page: Int?
                public var replyLimit: Int?
                public var sort: String?
                public var totalCommentsFound: Int?
                public var totalCommentsReturned: Int?
                public var totalEditorsSelectionFound: Int?
                public var totalEditorsSelectionReturned: Int?
                public var totalParentCommentsFound: Int?
                public var totalParentCommentsReturned: Int?
                public var totalRecommendationsFound: Int?
                public var totalRecommendationsReturned: Int?
                public var totalReplyCommentsFound: Int?
                public var totalReplyCommentsReturned: Int?
                public var totalReporterReplyCommentsFound: Int?
                public var totalReporterReplyCommentsReturned: Int?

                public struct Commants: Decodable {
                    public var approveDate: String?
                    public var commentBody: String?
                    public var commentID: Int?
                    public var commentSequence: Int?
                    public var commentTitle: String?
                    public var commentType: String?
                    public var createDate: String?
                    public var depth: Int?
                    public var isEditorsSelection: Bool?
                    public var parentID: AnyJSON?
                    public var parentUserDisplayName: AnyJSON?
                    public var permID: String?
                    public var picURL: String?
                    public var recommendations: Int?
                    public var recommendedFlag: AnyJSON?
                    public var replies: [AnyJSON]?
                    public var replyCount: Int?
                    public var reportAbuseFlag: AnyJSON?
                    public var sharing: Int?
                    public var status: String?
                    public var timespeople: Int?
                    public var trusted: Int?
                    public var updateDate: String?
                    public var userDisplayName: String?
                    public var userID: Int?
                    public var userLocation: String?
                    public var userTitle: AnyJSON?
                    public var userURL: AnyJSON?

                    public init(approveDate: String? = nil, commentBody: String? = nil, commentID: Int? = nil, commentSequence: Int? = nil, commentTitle: String? = nil, commentType: String? = nil, createDate: String? = nil, depth: Int? = nil, isEditorsSelection: Bool? = nil, parentID: AnyJSON? = nil, parentUserDisplayName: AnyJSON? = nil, permID: String? = nil, picURL: String? = nil, recommendations: Int? = nil, recommendedFlag: AnyJSON? = nil, replies: [AnyJSON]? = nil, replyCount: Int? = nil, reportAbuseFlag: AnyJSON? = nil, sharing: Int? = nil, status: String? = nil, timespeople: Int? = nil, trusted: Int? = nil, updateDate: String? = nil, userDisplayName: String? = nil, userID: Int? = nil, userLocation: String? = nil, userTitle: AnyJSON? = nil, userURL: AnyJSON? = nil) {
                        self.approveDate = approveDate
                        self.commentBody = commentBody
                        self.commentID = commentID
                        self.commentSequence = commentSequence
                        self.commentTitle = commentTitle
                        self.commentType = commentType
                        self.createDate = createDate
                        self.depth = depth
                        self.isEditorsSelection = isEditorsSelection
                        self.parentID = parentID
                        self.parentUserDisplayName = parentUserDisplayName
                        self.permID = permID
                        self.picURL = picURL
                        self.recommendations = recommendations
                        self.recommendedFlag = recommendedFlag
                        self.replies = replies
                        self.replyCount = replyCount
                        self.reportAbuseFlag = reportAbuseFlag
                        self.sharing = sharing
                        self.status = status
                        self.timespeople = timespeople
                        self.trusted = trusted
                        self.updateDate = updateDate
                        self.userDisplayName = userDisplayName
                        self.userID = userID
                        self.userLocation = userLocation
                        self.userTitle = userTitle
                        self.userURL = userURL
                    }

                    private enum CodingKeys: String, CodingKey {
                        case approveDate
                        case commentBody
                        case commentID
                        case commentSequence
                        case commentTitle
                        case commentType
                        case createDate
                        case depth
                        case isEditorsSelection = "editorsSelection"
                        case parentID
                        case parentUserDisplayName
                        case permID
                        case picURL
                        case recommendations
                        case recommendedFlag
                        case replies
                        case replyCount
                        case reportAbuseFlag
                        case sharing
                        case status
                        case timespeople
                        case trusted
                        case updateDate
                        case userDisplayName
                        case userID
                        case userLocation
                        case userTitle
                        case userURL
                    }
                }

                public init(apiTimestamp: String? = nil, callerID: AnyJSON? = nil, comments: [Commants]? = nil, depthLimit: Int? = nil, filter: String? = nil, page: Int? = nil, replyLimit: Int? = nil, sort: String? = nil, totalCommentsFound: Int? = nil, totalCommentsReturned: Int? = nil, totalEditorsSelectionFound: Int? = nil, totalEditorsSelectionReturned: Int? = nil, totalParentCommentsFound: Int? = nil, totalParentCommentsReturned: Int? = nil, totalRecommendationsFound: Int? = nil, totalRecommendationsReturned: Int? = nil, totalReplyCommentsFound: Int? = nil, totalReplyCommentsReturned: Int? = nil, totalReporterReplyCommentsFound: Int? = nil, totalReporterReplyCommentsReturned: Int? = nil) {
                    self.apiTimestamp = apiTimestamp
                    self.callerID = callerID
                    self.comments = comments
                    self.depthLimit = depthLimit
                    self.filter = filter
                    self.page = page
                    self.replyLimit = replyLimit
                    self.sort = sort
                    self.totalCommentsFound = totalCommentsFound
                    self.totalCommentsReturned = totalCommentsReturned
                    self.totalEditorsSelectionFound = totalEditorsSelectionFound
                    self.totalEditorsSelectionReturned = totalEditorsSelectionReturned
                    self.totalParentCommentsFound = totalParentCommentsFound
                    self.totalParentCommentsReturned = totalParentCommentsReturned
                    self.totalRecommendationsFound = totalRecommendationsFound
                    self.totalRecommendationsReturned = totalRecommendationsReturned
                    self.totalReplyCommentsFound = totalReplyCommentsFound
                    self.totalReplyCommentsReturned = totalReplyCommentsReturned
                    self.totalReporterReplyCommentsFound = totalReporterReplyCommentsFound
                    self.totalReporterReplyCommentsReturned = totalReporterReplyCommentsReturned
                }

                private enum CodingKeys: String, CodingKey {
                    case apiTimestamp = "api_timestamp"
                    case callerID
                    case comments
                    case depthLimit
                    case filter
                    case page
                    case replyLimit
                    case sort
                    case totalCommentsFound
                    case totalCommentsReturned
                    case totalEditorsSelectionFound
                    case totalEditorsSelectionReturned
                    case totalParentCommentsFound
                    case totalParentCommentsReturned
                    case totalRecommendationsFound
                    case totalRecommendationsReturned
                    case totalReplyCommentsFound
                    case totalReplyCommentsReturned
                    case totalReporterReplyCommentsFound
                    case totalReporterReplyCommentsReturned
                }
            }

            public init(copyright: String? = nil, debug: Debug? = nil, results: Results? = nil, status: String? = nil) {
                self.copyright = copyright
                self.debug = debug
                self.results = results
                self.status = status
            }
        }

        private func makeGetQuery(_ url: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(url, forKey: "url")
            return encoder.items
        }
    }
}

extension Paths {
    public static var userJSON: UserJSON {
        UserJSON(path: "/user-content/user.json")
    }

    public struct UserJSON {
        /// Path: `/user-content/user.json`
        public let path: String

        /// Comments by User
        public func get(userID: Int? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(userID))
        }

        public struct GetResponse: Decodable {
            public var copyright: String?
            public var debug: Debug?
            public var results: Results?
            public var status: String?

            public struct Debug: Decodable {
                public var version: Double?

                public init(version: Double? = nil) {
                    self.version = version
                }
            }

            public struct Results: Decodable {
                public var apiTimestamp: String?
                public var comments: [Commants]?
                public var totalCommentsFound: Int?
                public var totalCommentsReturned: Int?

                public struct Commants: Decodable {
                    public var approveDate: String?
                    public var asset: Asset?
                    public var commentBody: String?
                    public var commentID: Int?
                    public var commentSequence: Int?
                    public var commentTitle: String?
                    public var commentType: String?
                    public var createDate: String?
                    public var isEditorsSelection: Bool?
                    public var labels: [[String: AnyJSON]]?
                    public var parentID: AnyJSON?
                    public var permid: Int?
                    public var picURL: String?
                    public var recommendations: Int?
                    public var replies: [[String: AnyJSON]]?
                    public var replyCount: Int?
                    public var status: String?
                    public var updateDate: String?
                    public var userDisplayName: AnyJSON?
                    public var userID: Int?
                    public var userLocation: AnyJSON?
                    public var userSubmittedDisplayName: String?
                    public var userSubmittedLocation: String?
                    public var userSubmittedTitle: AnyJSON?
                    public var userSubmittedURL: AnyJSON?
                    public var userTitle: AnyJSON?
                    public var userURL: AnyJSON?

                    public struct Asset: Decodable {
                        public var allProperties: [AllProperty]?
                        public var assetID: Int?
                        public var assetTitle: String?
                        public var assetURL: String?
                        public var createDate: String?
                        public var labels: [Label]?
                        public var properties: Properties?
                        public var source: String?
                        public var taxonomy: String?
                        public var text: [[String: AnyJSON]]?
                        public var updateDate: String?
                        public var vendorID: String?

                        public struct AllProperty: Decodable {
                            public var description: String?
                            public var name: String?
                            public var properties: [[String: AnyJSON]]?

                            public init(description: String? = nil, name: String? = nil, properties: [[String: AnyJSON]]? = nil) {
                                self.description = description
                                self.name = name
                                self.properties = properties
                            }
                        }

                        public struct Label: Decodable {
                            public var labelID: Int?
                            public var labelName: String?

                            public init(labelID: Int? = nil, labelName: String? = nil) {
                                self.labelID = labelID
                                self.labelName = labelName
                            }
                        }

                        public struct Properties: Decodable {
                            public var automoderationOff: AutomoderationOff?
                            public var commentListSortApprovedateDesc: CommentListSortApprovedateDesc?
                            public var reachedMaxComOn: ReachedMaxComOn?

                            public struct AutomoderationOff: Decodable {
                                public var groupID: Int?
                                public var taxonomyID: Int?

                                public init(groupID: Int? = nil, taxonomyID: Int? = nil) {
                                    self.groupID = groupID
                                    self.taxonomyID = taxonomyID
                                }
                            }

                            public struct CommentListSortApprovedateDesc: Decodable {
                                public var groupID: Int?
                                public var taxonomyID: Int?

                                public init(groupID: Int? = nil, taxonomyID: Int? = nil) {
                                    self.groupID = groupID
                                    self.taxonomyID = taxonomyID
                                }
                            }

                            public struct ReachedMaxComOn: Decodable {
                                public var groupID: Int?
                                public var taxonomyID: Int?

                                public init(groupID: Int? = nil, taxonomyID: Int? = nil) {
                                    self.groupID = groupID
                                    self.taxonomyID = taxonomyID
                                }
                            }

                            public init(automoderationOff: AutomoderationOff? = nil, commentListSortApprovedateDesc: CommentListSortApprovedateDesc? = nil, reachedMaxComOn: ReachedMaxComOn? = nil) {
                                self.automoderationOff = automoderationOff
                                self.commentListSortApprovedateDesc = commentListSortApprovedateDesc
                                self.reachedMaxComOn = reachedMaxComOn
                            }

                            private enum CodingKeys: String, CodingKey {
                                case automoderationOff = "automoderation-off"
                                case commentListSortApprovedateDesc = "comment-list-sort-approvedate-desc"
                                case reachedMaxComOn = "reached-max-com-on"
                            }
                        }

                        public init(allProperties: [AllProperty]? = nil, assetID: Int? = nil, assetTitle: String? = nil, assetURL: String? = nil, createDate: String? = nil, labels: [Label]? = nil, properties: Properties? = nil, source: String? = nil, taxonomy: String? = nil, text: [[String: AnyJSON]]? = nil, updateDate: String? = nil, vendorID: String? = nil) {
                            self.allProperties = allProperties
                            self.assetID = assetID
                            self.assetTitle = assetTitle
                            self.assetURL = assetURL
                            self.createDate = createDate
                            self.labels = labels
                            self.properties = properties
                            self.source = source
                            self.taxonomy = taxonomy
                            self.text = text
                            self.updateDate = updateDate
                            self.vendorID = vendorID
                        }

                        private enum CodingKeys: String, CodingKey {
                            case allProperties = "all-properties"
                            case assetID
                            case assetTitle
                            case assetURL
                            case createDate
                            case labels
                            case properties
                            case source
                            case taxonomy
                            case text
                            case updateDate
                            case vendorID
                        }
                    }

                    public init(approveDate: String? = nil, asset: Asset? = nil, commentBody: String? = nil, commentID: Int? = nil, commentSequence: Int? = nil, commentTitle: String? = nil, commentType: String? = nil, createDate: String? = nil, isEditorsSelection: Bool? = nil, labels: [[String: AnyJSON]]? = nil, parentID: AnyJSON? = nil, permid: Int? = nil, picURL: String? = nil, recommendations: Int? = nil, replies: [[String: AnyJSON]]? = nil, replyCount: Int? = nil, status: String? = nil, updateDate: String? = nil, userDisplayName: AnyJSON? = nil, userID: Int? = nil, userLocation: AnyJSON? = nil, userSubmittedDisplayName: String? = nil, userSubmittedLocation: String? = nil, userSubmittedTitle: AnyJSON? = nil, userSubmittedURL: AnyJSON? = nil, userTitle: AnyJSON? = nil, userURL: AnyJSON? = nil) {
                        self.approveDate = approveDate
                        self.asset = asset
                        self.commentBody = commentBody
                        self.commentID = commentID
                        self.commentSequence = commentSequence
                        self.commentTitle = commentTitle
                        self.commentType = commentType
                        self.createDate = createDate
                        self.isEditorsSelection = isEditorsSelection
                        self.labels = labels
                        self.parentID = parentID
                        self.permid = permid
                        self.picURL = picURL
                        self.recommendations = recommendations
                        self.replies = replies
                        self.replyCount = replyCount
                        self.status = status
                        self.updateDate = updateDate
                        self.userDisplayName = userDisplayName
                        self.userID = userID
                        self.userLocation = userLocation
                        self.userSubmittedDisplayName = userSubmittedDisplayName
                        self.userSubmittedLocation = userSubmittedLocation
                        self.userSubmittedTitle = userSubmittedTitle
                        self.userSubmittedURL = userSubmittedURL
                        self.userTitle = userTitle
                        self.userURL = userURL
                    }

                    private enum CodingKeys: String, CodingKey {
                        case approveDate
                        case asset
                        case commentBody
                        case commentID
                        case commentSequence
                        case commentTitle
                        case commentType
                        case createDate
                        case isEditorsSelection = "editorsSelection"
                        case labels
                        case parentID
                        case permid
                        case picURL
                        case recommendations
                        case replies
                        case replyCount
                        case status
                        case updateDate
                        case userDisplayName
                        case userID
                        case userLocation
                        case userSubmittedDisplayName
                        case userSubmittedLocation
                        case userSubmittedTitle
                        case userSubmittedURL
                        case userTitle
                        case userURL
                    }
                }

                public init(apiTimestamp: String? = nil, comments: [Commants]? = nil, totalCommentsFound: Int? = nil, totalCommentsReturned: Int? = nil) {
                    self.apiTimestamp = apiTimestamp
                    self.comments = comments
                    self.totalCommentsFound = totalCommentsFound
                    self.totalCommentsReturned = totalCommentsReturned
                }

                private enum CodingKeys: String, CodingKey {
                    case apiTimestamp = "api_timestamp"
                    case comments
                    case totalCommentsFound
                    case totalCommentsReturned
                }
            }

            public init(copyright: String? = nil, debug: Debug? = nil, results: Results? = nil, status: String? = nil) {
                self.copyright = copyright
                self.debug = debug
                self.results = results
                self.status = status
            }
        }

        private func makeGetQuery(_ userID: Int?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(userID, forKey: "userID")
            return encoder.items
        }
    }
}

public enum Paths {}
