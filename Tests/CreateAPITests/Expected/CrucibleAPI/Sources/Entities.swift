// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import NaiveDate

/// Form Version Object
///
/// Information about a Form Version
public struct SingleFormVersionObject: Codable {
    /// The Crucible-generated identifier for the Form Version.
    public var id: Int?
    /// The name of the Form Version.
    public var name: String?
    /// The client-supplied identifier for the Form Version.
    public var clientID: String?
    /// The Crucible-generated identifier of the Exam Event
    public var examEventID: Int?
    /// The number of stacks associated with the Form Version
    public var stackCount: Int?
    /// The minimum aggregate score for which candidates are exempted from the auto-close mechanism.
    ///     
    /// Any candidate whose aggregated procedure score for an event falls inside the exemption range (inclusive) will not be auto-closed, and will continue to be evaluated until the appropriate number of evaluations have been completed for each procedure.
    ///     
    /// Conversely, a candidate whose aggregated procedure score is less than this value will be auto-closed once they have a first evaluation for every item they should be graded on.  They will not receive any second evaluations.
    ///     
    /// If an exemption minimum is not set, then the auto-close feature will be effectively disabled.
    public var autoCloseExemptionMinimum: Double?
    /// The maximum aggregate score for which candidates are exempted from the auto-close mechanism.
    ///     
    /// Any candidate whose aggregated procedure score for an event falls inside the exemption range (inclusive) will not be auto-closed, and will continue to be evaluated until the appropriate number of evaluations have been completed for each procedure.
    ///     
    /// Conversely, a candidate whose aggregated procedure score is greater than this value will be auto-closed once they have a first evaluation for every item they should be graded on.  They will not receive any second evaluations.
    ///     
    /// If an exemption maximum is not set, then the auto-close feature will be effectively disabled.
    public var autoCloseExemptionMaximum: Double?
    /// A list of items associated with the form version
    public var items: [Item]?

    public struct Item: Codable {
        /// The name and abbreviation of the item
        public var designator: String?
        /// The name of the item
        public var name: String?
        /// The Crucible generated identifier of the item
        public var id: Int?
        /// Teams that are associated with the items
        public var teams: [Team]?

        public struct Team: Codable {
            /// The name of the team
            public var name: String?
            /// The client supplied identifier of the team
            public var clientID: String?
            /// The Crucible generated identifier of the team
            public var id: Int?

            public init(name: String? = nil, clientID: String? = nil, id: Int? = nil) {
                self.name = name
                self.clientID = clientID
                self.id = id
            }

            private enum CodingKeys: String, CodingKey {
                case name
                case clientID = "client_id"
                case id
            }
        }

        public init(designator: String? = nil, name: String? = nil, id: Int? = nil, teams: [Team]? = nil) {
            self.designator = designator
            self.name = name
            self.id = id
            self.teams = teams
        }
    }

    public init(id: Int? = nil, name: String? = nil, clientID: String? = nil, examEventID: Int? = nil, stackCount: Int? = nil, autoCloseExemptionMinimum: Double? = nil, autoCloseExemptionMaximum: Double? = nil, items: [Item]? = nil) {
        self.id = id
        self.name = name
        self.clientID = clientID
        self.examEventID = examEventID
        self.stackCount = stackCount
        self.autoCloseExemptionMinimum = autoCloseExemptionMinimum
        self.autoCloseExemptionMaximum = autoCloseExemptionMaximum
        self.items = items
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case name
        case clientID = "client_id"
        case examEventID = "exam_event_id"
        case stackCount = "stack_count"
        case autoCloseExemptionMinimum = "auto_close_exemption_minimum"
        case autoCloseExemptionMaximum = "auto_close_exemption_maximum"
        case items
    }
}

/// Information about a Form Version
public struct FormVersionObject: Codable {
    /// The Crucible-generated identifier for the Form Version.
    public var id: Int?
    /// The name of the Form Version.
    public var name: String?
    /// The client-supplied identifier for the Form Version.
    public var clientID: String?
    /// The Crucible-generated identifier of the Exam Event
    public var examEventID: Int?
    /// The number of stacks associated with the Form Version
    public var stackCount: Int?
    /// The minimum aggregate score for which candidates are exempted from the auto-close mechanism.
    ///     
    /// Any candidate whose aggregated procedure score for an event falls inside the exemption range (inclusive) will not be auto-closed, and will continue to be evaluated until the appropriate number of evaluations have been completed for each procedure.
    ///     
    /// Conversely, a candidate whose aggregated procedure score is less than this value will be auto-closed once they have a first evaluation for every item they should be graded on.  They will not receive any second evaluations.
    ///     
    /// If an exemption minimum is not set, then the auto-close feature will be effectively disabled.
    public var autoCloseExemptionMinimum: Double?
    /// The maximum aggregate score for which candidates are exempted from the auto-close mechanism.
    ///     
    /// Any candidate whose aggregated procedure score for an event falls inside the exemption range (inclusive) will not be auto-closed, and will continue to be evaluated until the appropriate number of evaluations have been completed for each procedure.
    ///     
    /// Conversely, a candidate whose aggregated procedure score is greater than this value will be auto-closed once they have a first evaluation for every item they should be graded on.  They will not receive any second evaluations.
    ///     
    /// If an exemption maximum is not set, then the auto-close feature will be effectively disabled.
    public var autoCloseExemptionMaximum: Double?
    /// A list of items associated with the form version
    public var items: [Item]?

    public struct Item: Codable {
        /// The name and abbreviation of the item
        public var designator: String?
        /// The name of the item
        public var name: String?
        /// The Crucible generated identifier of the item
        public var id: Int?

        public init(designator: String? = nil, name: String? = nil, id: Int? = nil) {
            self.designator = designator
            self.name = name
            self.id = id
        }
    }

    public init(id: Int? = nil, name: String? = nil, clientID: String? = nil, examEventID: Int? = nil, stackCount: Int? = nil, autoCloseExemptionMinimum: Double? = nil, autoCloseExemptionMaximum: Double? = nil, items: [Item]? = nil) {
        self.id = id
        self.name = name
        self.clientID = clientID
        self.examEventID = examEventID
        self.stackCount = stackCount
        self.autoCloseExemptionMinimum = autoCloseExemptionMinimum
        self.autoCloseExemptionMaximum = autoCloseExemptionMaximum
        self.items = items
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case name
        case clientID = "client_id"
        case examEventID = "exam_event_id"
        case stackCount = "stack_count"
        case autoCloseExemptionMinimum = "auto_close_exemption_minimum"
        case autoCloseExemptionMaximum = "auto_close_exemption_maximum"
        case items
    }
}

/// Object that holds an array of digital evidence documents successfully uploaded
public struct EvidenceArrayObject: Codable {
    public var files: [File]?

    public struct File: Codable {
        /// Name of the document
        public var name: String?
        /// Size of the document
        public var size: Int?
        /// URL to retrieve document
        public var url: String?

        public init(name: String? = nil, size: Int? = nil, url: String? = nil) {
            self.name = name
            self.size = size
            self.url = url
        }
    }

    public init(files: [File]? = nil) {
        self.files = files
    }
}

/// The digital evidence document that was successfully uploaded
public struct EvidenceObject: Codable {
    public var data: Data?

    public struct Data: Codable {
        /// The client-supplied identifier for the candidate
        public var candidateClientID: String?
        /// The Crucible-generated identifier for the candidate
        public var candidateID: Int?
        /// Date of creation of the document. Formatted as ISO-8601 timestamps.
        public var created: String?
        /// The Crucible-generated identifier for the item
        public var itemID: Int?
        /// The Crucible-generated identifier for the document
        public var id: Int?
        /// The media type of document uploaded
        public var mimeType: String?
        /// The client-supplied name for the document
        public var filename: String?

        public init(candidateClientID: String? = nil, candidateID: Int? = nil, created: String? = nil, itemID: Int? = nil, id: Int? = nil, mimeType: String? = nil, filename: String? = nil) {
            self.candidateClientID = candidateClientID
            self.candidateID = candidateID
            self.created = created
            self.itemID = itemID
            self.id = id
            self.mimeType = mimeType
            self.filename = filename
        }

        private enum CodingKeys: String, CodingKey {
            case candidateClientID = "candidate_client_id"
            case candidateID = "candidate_id"
            case created
            case itemID = "item_id"
            case id
            case mimeType = "mime_type"
            case filename
        }
    }

    public init(data: Data? = nil) {
        self.data = data
    }
}

/// Updated Exam Event Object
///
/// The returned updated exam event
public struct ExamEventUpdatedObject: Codable {
    public var data: Data?
    public var isSuccess: Bool?
    public var error: String?

    public struct Data: Codable {
        /// The Crucible-generated identifier of the exam event
        public var id: Int?
        /// The name of the event
        public var name: String?
        /// Status of the exam event
        public var status: Status?
        /// The maximum number of examiners to grade an item
        public var maxExaminersPerItem: Int?
        /// Can examiners be prohibited from continuing to grade
        public var allowExaminerHolds: Bool?
        /// The type of exam event
        public var eventType: EventType?
        /// Time the event started. Formatted as ISO-8601 timestamps. If not started, it will be null
        public var started: String?
        /// The type of assignment method (external, auto_assign, self_assign)
        public var assignmentMethod: AssignmentMethod?
        /// Time the event closed. Formatted as ISO-8601 timestamps. If not closed, it will be null
        public var closed: String?

        /// Status of the exam event
        public enum Status: String, Codable, CaseIterable {
            case pending = "Pending"
            case published = "Published"
            case finalized = "Finalized"
            case running = "Running"
            case paused = "Paused"
            case closed = "Closed"
        }

        /// The type of exam event
        public enum EventType: String, Codable, CaseIterable {
            case independentLists = "independent_lists"
            case osce
        }

        /// The type of assignment method (external, auto_assign, self_assign)
        public enum AssignmentMethod: String, Codable, CaseIterable {
            case external
            case autoAssign = "auto_assign"
            case selfAssign = "self_assign"
        }

        public init(id: Int? = nil, name: String? = nil, status: Status? = nil, maxExaminersPerItem: Int? = nil, allowExaminerHolds: Bool? = nil, eventType: EventType? = nil, started: String? = nil, assignmentMethod: AssignmentMethod? = nil, closed: String? = nil) {
            self.id = id
            self.name = name
            self.status = status
            self.maxExaminersPerItem = maxExaminersPerItem
            self.allowExaminerHolds = allowExaminerHolds
            self.eventType = eventType
            self.started = started
            self.assignmentMethod = assignmentMethod
            self.closed = closed
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case name
            case status
            case maxExaminersPerItem = "max_examiners_per_item"
            case allowExaminerHolds = "allow_examiner_holds"
            case eventType = "event_type"
            case started
            case assignmentMethod = "assignment_method"
            case closed
        }
    }

    public init(data: Data? = nil, isSuccess: Bool? = nil, error: String? = nil) {
        self.data = data
        self.isSuccess = isSuccess
        self.error = error
    }

    private enum CodingKeys: String, CodingKey {
        case data
        case isSuccess = "success"
        case error
    }
}

/// The results from an evaluation by a single examiner.
public struct ResultsObject: Codable {
    /// The end time of the evaluation. Formatted as ISO-8601 timestamp.
    public var evalEnd: NaiveDate?
    /// The description of the item that was evaluated.
    public var item: Item?
    /// The score earned for the item.
    public var score: Int?
    /// The examiner that performed this evaluation.
    public var examiner: Examiner?
    /// The candidate that was examined.
    public var candidate: Candidate?
    /// The start time of the evaluation. Formatted as ISO-8601 timestamp.
    public var evalStart: NaiveDate?
    /// The Crucible-generated identifier for this evaluation.
    public var id: Int?
    /// The description of the stack assignment.
    public var stackAssignment: StackAssignment?

    /// The description of the item that was evaluated.
    public struct Item: Codable {
        /// A specific client described grouping of items.
        public var contentDomain: String?
        /// The abbreviated name of the item.
        public var abbreviation: String?
        /// The full name of the item.
        public var name: String?
        /// The Crucible-generated identifier for the item.
        public var id: Int?

        public init(contentDomain: String? = nil, abbreviation: String? = nil, name: String? = nil, id: Int? = nil) {
            self.contentDomain = contentDomain
            self.abbreviation = abbreviation
            self.name = name
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case contentDomain = "content_domain"
            case abbreviation
            case name
            case id
        }
    }

    /// The examiner that performed this evaluation.
    public struct Examiner: Codable {
        /// The Crucible-generated identifier for this examiner.
        public var id: Int?
        /// The client-supplied identifier for this examiner.
        public var clientID: String?

        public init(id: Int? = nil, clientID: String? = nil) {
            self.id = id
            self.clientID = clientID
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case clientID = "client_id"
        }
    }

    /// The candidate that was examined.
    public struct Candidate: Codable {
        /// The Crucible-generated identifier for this candidate.
        public var id: Int?
        /// The client-supplied identifier for this candidate.
        public var clientID: String?

        public init(id: Int? = nil, clientID: String? = nil) {
            self.id = id
            self.clientID = clientID
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case clientID = "client_id"
        }
    }

    /// The description of the stack assignment.
    public struct StackAssignment: Codable {
        /// Tags associated with the examiner when they began the evaluation.
        public var examinerTags: [String]?
        /// The client-supplied identifier for this stack assignment.
        public var clientID: String?
        /// The Crucible-generated identifier for this stack assignment.
        public var id: Int?

        public init(examinerTags: [String]? = nil, clientID: String? = nil, id: Int? = nil) {
            self.examinerTags = examinerTags
            self.clientID = clientID
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case examinerTags = "examiner_tags"
            case clientID = "client_id"
            case id
        }
    }

    public init(evalEnd: NaiveDate? = nil, item: Item? = nil, score: Int? = nil, examiner: Examiner? = nil, candidate: Candidate? = nil, evalStart: NaiveDate? = nil, id: Int? = nil, stackAssignment: StackAssignment? = nil) {
        self.evalEnd = evalEnd
        self.item = item
        self.score = score
        self.examiner = examiner
        self.candidate = candidate
        self.evalStart = evalStart
        self.id = id
        self.stackAssignment = stackAssignment
    }

    private enum CodingKeys: String, CodingKey {
        case evalEnd = "eval_end"
        case item
        case score
        case examiner
        case candidate
        case evalStart = "eval_start"
        case id
        case stackAssignment = "stack_assignment"
    }
}

/// Exam event was successfully created.
public struct ExamEventCreateObject: Codable {
    /// The Crucible-generated identifier of the exam event
    public var results: Int?

    public init(results: Int? = nil) {
        self.results = results
    }
}

/// Information about a single stack assignment.
public struct AssignmentObject: Codable {
    /// The time the stack assignment was completed. Formatted as ISO-8601 timestamps.
    public var completed: NaiveDate?
    /// The Crucible-generated identifier for this stack assignment.
    public var stackAssignmentID: String?
    /// The time the stack assignment was assigned. Formatted as ISO-8601 timestamps.
    public var assigned: NaiveDate?
    /// The client-supplied identifier for the user.
    public var clientID: String?
    /// The Crucible-generated identifier for this exam event.
    public var examEventID: String?
    /// The Crucible-generated identifier for the user.
    public var examinerUserID: String?

    public init(completed: NaiveDate? = nil, stackAssignmentID: String? = nil, assigned: NaiveDate? = nil, clientID: String? = nil, examEventID: String? = nil, examinerUserID: String? = nil) {
        self.completed = completed
        self.stackAssignmentID = stackAssignmentID
        self.assigned = assigned
        self.clientID = clientID
        self.examEventID = examEventID
        self.examinerUserID = examinerUserID
    }

    private enum CodingKeys: String, CodingKey {
        case completed
        case stackAssignmentID = "stack_assignment_id"
        case assigned
        case clientID = "client_id"
        case examEventID = "exam_event_id"
        case examinerUserID = "examiner_user_id"
    }
}

/// The information returned when a user is of user type Administrator.
public struct UserObject: Codable {
    /// The first name of the user.
    public var firstName: String?
    /// The last name of the user.
    public var lastName: String?
    /// The client-supplied identifier for the user.
    public var clientID: String?
    /// All the tags associated with the user.
    public var tags: [String]?
    /// The user name of the user.
    public var userName: String?
    /// A string comprised of "last_name, first_name"
    public var categorizationName: String?
    /// A list of all content domains with which the user is associated.
    public var contentDomains: [String]?
    /// Indicates if the examiner is a captain.
    public var isCaptain: Bool?
    /// The URL which defines this resource.
    public var url: String?
    /// The perission groups to which the user belngs.
    public var groups: [[GroupObjectItem]]?
    /// The user type
    public var type: String?
    /// The Crucible-generated identifier for the user.
    public var id: Int?

    public init(firstName: String? = nil, lastName: String? = nil, clientID: String? = nil, tags: [String]? = nil, userName: String? = nil, categorizationName: String? = nil, contentDomains: [String]? = nil, isCaptain: Bool? = nil, url: String? = nil, groups: [[GroupObjectItem]]? = nil, type: String? = nil, id: Int? = nil) {
        self.firstName = firstName
        self.lastName = lastName
        self.clientID = clientID
        self.tags = tags
        self.userName = userName
        self.categorizationName = categorizationName
        self.contentDomains = contentDomains
        self.isCaptain = isCaptain
        self.url = url
        self.groups = groups
        self.type = type
        self.id = id
    }

    private enum CodingKeys: String, CodingKey {
        case firstName = "first_name"
        case lastName = "last_name"
        case clientID = "client_id"
        case tags
        case userName = "user_name"
        case categorizationName = "categorization_name"
        case contentDomains = "content_domains"
        case isCaptain = "is_captain"
        case url
        case groups
        case type
        case id
    }
}

/// User Object
///
/// The information returned when a user is of user type Examiner or RolePlayer.
public struct UserExaminerObject: Codable {
    /// The first name of the user.
    public var firstName: String?
    /// The last name of the user.
    public var lastName: String?
    /// The client-supplied identifier for the user.
    public var clientID: String?
    /// A list of all tags with which the user is associated.
    public var tags: [String]?
    /// The user name of the user.
    public var userName: String?
    /// A string comprised of "last_name, first_name"
    public var categorizationName: String?
    /// A list of all the stack assignments with which the user has ever been assigned.
    public var stackAssignments: [StackAssignmentUserObject]?
    /// A list of all content domains with which the user is associated.
    public var contentDomains: [String]?
    /// Indicates if the examiner is a captain.
    public var isCaptain: Bool?
    /// The URL which defines this resource.
    public var url: String?
    /// The perission groups to which the user belngs.
    public var groups: [[GroupObjectItem]]?
    /// Current roles the user is associated with. Roles can be Administrator, Examiner or Role Player.
    public var activeRoles: [String]?
    /// Any role the user has ever been associated with.
    public var allRoles: [String]?
    /// The Crucible-generated identifier for the user.
    public var id: Int?

    public init(firstName: String? = nil, lastName: String? = nil, clientID: String? = nil, tags: [String]? = nil, userName: String? = nil, categorizationName: String? = nil, stackAssignments: [StackAssignmentUserObject]? = nil, contentDomains: [String]? = nil, isCaptain: Bool? = nil, url: String? = nil, groups: [[GroupObjectItem]]? = nil, activeRoles: [String]? = nil, allRoles: [String]? = nil, id: Int? = nil) {
        self.firstName = firstName
        self.lastName = lastName
        self.clientID = clientID
        self.tags = tags
        self.userName = userName
        self.categorizationName = categorizationName
        self.stackAssignments = stackAssignments
        self.contentDomains = contentDomains
        self.isCaptain = isCaptain
        self.url = url
        self.groups = groups
        self.activeRoles = activeRoles
        self.allRoles = allRoles
        self.id = id
    }

    private enum CodingKeys: String, CodingKey {
        case firstName = "first_name"
        case lastName = "last_name"
        case clientID = "client_id"
        case tags
        case userName = "user_name"
        case categorizationName = "categorization_name"
        case stackAssignments = "stack_assignments"
        case contentDomains = "content_domains"
        case isCaptain = "is_captain"
        case url
        case groups
        case activeRoles = "active_roles"
        case allRoles = "all_roles"
        case id
    }
}

/// The information about a users status.
public struct UserStatusObject: Codable {
    /// The status of the running event the examiner is associated with. Pending - The exam has not started. Published - For use with scheduled exams. The exam has been published and can recieve examiner requests. Finalized - For use with scheduled exams. The examiner assignments for the exam have been finalized. Running - The exam is running. Paused - For use with OSCE exams. The exam is paused and examiners and roleplayers can be swapped. Closed - The exam is closed.
    public var status: Status?
    /// Information about the user's active stack assignment. If the user does not have an active stack assignment then this will be null.
    public var assignment: Assignment?
    /// The team the user is currently assigned.
    public var team: Team?
    /// The Crucible-generated identifier for the event.
    public var id: String?
    /// The name of the event.
    public var name: String?

    /// The status of the running event the examiner is associated with. Pending - The exam has not started. Published - For use with scheduled exams. The exam has been published and can recieve examiner requests. Finalized - For use with scheduled exams. The examiner assignments for the exam have been finalized. Running - The exam is running. Paused - For use with OSCE exams. The exam is paused and examiners and roleplayers can be swapped. Closed - The exam is closed.
    public enum Status: String, Codable, CaseIterable {
        case pending = "Pending"
        case published = "Published"
        case finalized = "Finalized"
        case running = "Running"
        case paused = "Paused"
        case closed = "Closed"
    }

    /// Information about the user's active stack assignment. If the user does not have an active stack assignment then this will be null.
    public struct Assignment: Codable {
        /// Stack Object
        ///
        /// Information about the stack.
        public var stack: StackObject?
        /// The client-supplied identifier for the stack assignment.
        public var clientID: String?
        /// The Crucible-generated identifier for the stack assignment.
        public var id: Int?

        public init(stack: StackObject? = nil, clientID: String? = nil, id: Int? = nil) {
            self.stack = stack
            self.clientID = clientID
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case stack
            case clientID = "client_id"
            case id
        }
    }

    /// The team the user is currently assigned.
    public struct Team: Codable {
        /// The name of the team.
        public var name: String?
        /// The client-supplied identifier for the team.
        public var clientID: String?
        /// The Crucible-generated identifier for the team.
        public var id: Int?

        public init(name: String? = nil, clientID: String? = nil, id: Int? = nil) {
            self.name = name
            self.clientID = clientID
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case clientID = "client_id"
            case id
        }
    }

    public init(status: Status? = nil, assignment: Assignment? = nil, team: Team? = nil, id: String? = nil, name: String? = nil) {
        self.status = status
        self.assignment = assignment
        self.team = team
        self.id = id
        self.name = name
    }
}

/// User Object
///
/// The information about a users when assigned to a team.
public struct UserTeamObject: Codable {
    /// The first name of the user.
    public var firstName: String?
    /// The last name of the user.
    public var lastName: String?
    /// The URL which defines this resource.
    public var url: String?
    /// A string comprised of "last_name, first_name"
    public var categorizationName: String?
    /// A list of all content domains with which the user is associated.
    public var contentDomains: [String]?
    /// The client-supplied identifier for the user.
    public var clientID: String?
    /// The user name of the user.
    public var userName: String?
    /// The Crucible-generated identifier for the user.
    public var id: Int?

    public init(firstName: String? = nil, lastName: String? = nil, url: String? = nil, categorizationName: String? = nil, contentDomains: [String]? = nil, clientID: String? = nil, userName: String? = nil, id: Int? = nil) {
        self.firstName = firstName
        self.lastName = lastName
        self.url = url
        self.categorizationName = categorizationName
        self.contentDomains = contentDomains
        self.clientID = clientID
        self.userName = userName
        self.id = id
    }

    private enum CodingKeys: String, CodingKey {
        case firstName = "first_name"
        case lastName = "last_name"
        case url
        case categorizationName = "categorization_name"
        case contentDomains = "content_domains"
        case clientID = "client_id"
        case userName = "user_name"
        case id
    }
}

/// Information of the team added to an exam event
public struct TeamObject: Codable {
    /// Allows an examiner to be held or paused during an event. Default is 'True'
    public var allowExaminerHolds: Bool?
    /// The name of the team
    public var name: String?
    /// An list of item ids associated to that team
    public var itemIDs: [Int]?
    /// An list of tags associated to that team
    public var tags: [String]?
    /// The name of the exam event that team is on
    public var examEventName: String?
    /// The Crucible-generated ID of the exam event that team is on
    public var examEventID: Int?
    /// An array of Crucible-generated examiner IDs associated with that team
    public var examinerIDs: [Int]?
    /// The client-supplied ID associated with that team
    public var teamID: String?
    /// The Crucible-generated id of that team
    public var id: Int?
    /// The maximum number of examiners that can grade an item on an exam event
    public var examEventMaxExaminers: Int?
    /// Additional client supplied data to be associated with this team
    public var customData: [String: AnyJSON]?

    public init(allowExaminerHolds: Bool? = nil, name: String? = nil, itemIDs: [Int]? = nil, tags: [String]? = nil, examEventName: String? = nil, examEventID: Int? = nil, examinerIDs: [Int]? = nil, teamID: String? = nil, id: Int? = nil, examEventMaxExaminers: Int? = nil, customData: [String: AnyJSON]? = nil) {
        self.allowExaminerHolds = allowExaminerHolds
        self.name = name
        self.itemIDs = itemIDs
        self.tags = tags
        self.examEventName = examEventName
        self.examEventID = examEventID
        self.examinerIDs = examinerIDs
        self.teamID = teamID
        self.id = id
        self.examEventMaxExaminers = examEventMaxExaminers
        self.customData = customData
    }

    private enum CodingKeys: String, CodingKey {
        case allowExaminerHolds = "allow_examiner_holds"
        case name
        case itemIDs = "item_ids"
        case tags
        case examEventName = "exam_event_name"
        case examEventID = "exam_event_id"
        case examinerIDs = "examiner_ids"
        case teamID = "team_id"
        case id
        case examEventMaxExaminers = "exam_event_max_examiners"
        case customData = "custom_data"
    }
}

/// A list of examiner information for a specific team
public struct TeamExaminersObject: Codable {
    /// A list of Crucible-generated identifiers for Permission Groups that examiner belongs to
    public var groupIDs: [Int]?
    /// A list of Crucible-generated identifiers for Tags that examiner is associated with
    public var tags: [Int]?
    /// The url directing to the examiner
    public var url: String?
    /// The name of the examiner formatted as "{last_name}, {first_name}"
    public var categorizationName: String?
    /// Flag for designating an examiner to be a captain. If true and if they have the correct permissions, an examiner may interact with the captain interface within Crucible. If false, an examiner will only be able to view the examiner interface
    public var isCaptain: Bool?
    /// Flag for designating an examiner active. If false, an examiner may not log into the system
    public var isActive: Bool?
    /// The Crucible-generated identifier of the examiner
    public var id: Int?
    /// Flag for designating an examiner may not grade
    public var isOnHold: Bool?

    public init(groupIDs: [Int]? = nil, tags: [Int]? = nil, url: String? = nil, categorizationName: String? = nil, isCaptain: Bool? = nil, isActive: Bool? = nil, id: Int? = nil, isOnHold: Bool? = nil) {
        self.groupIDs = groupIDs
        self.tags = tags
        self.url = url
        self.categorizationName = categorizationName
        self.isCaptain = isCaptain
        self.isActive = isActive
        self.id = id
        self.isOnHold = isOnHold
    }

    private enum CodingKeys: String, CodingKey {
        case groupIDs = "group_ids"
        case tags
        case url
        case categorizationName = "categorization_name"
        case isCaptain = "is_captain"
        case isActive = "active"
        case id
        case isOnHold = "on_hold"
    }
}

/// Information of the item added to a team on an exam event
public struct ItemsObject: Codable {
    /// Flag for requiring confirmation. If true, item confirmation page will display after an item has been graded prompting the examiner to review and confirm their marks
    public var isConfirmationRequired: Bool?
    /// Flag to archive the item. If true, an item is unavailable to grade
    public var isArchived: Bool?
    /// The number of pages of the item
    public var numPages: Int?
    /// The name of the item
    public var name: String?
    /// The passing score of an evaluation for an item
    public var cutScore: Int?
    /// The URL directing to the item
    public var url: String?
    /// The name and abbreviation of the item
    public var designator: String?
    /// A list of teams the item is associated with
    public var teams: [Team]?
    /// The abbreviation of the item
    public var abbreviation: String?
    /// The content domain associated with the item
    public var contentDomain: ContentDomain?
    /// The maximum number of points that can be scored on an item
    public var maxPoints: Int?
    /// The Crucible-generated identifier of the item
    public var id: Int?
    /// Flag to indicate if the item is a pilot item
    public var isPilot: Bool?

    public struct Team: Codable {
        /// The name of the team
        public var name: String?
        /// The client-supplied identifier of the team
        public var clientID: String?
        /// The Crucible-generated identifier of the team
        public var id: Int?

        public init(name: String? = nil, clientID: String? = nil, id: Int? = nil) {
            self.name = name
            self.clientID = clientID
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case clientID = "client_id"
            case id
        }
    }

    /// The content domain associated with the item
    public struct ContentDomain: Codable {
        /// The name of the content domain
        public var name: String?
        /// The Crucible generated id of the content domain
        public var id: Int?

        public init(name: String? = nil, id: Int? = nil) {
            self.name = name
            self.id = id
        }
    }

    public init(isConfirmationRequired: Bool? = nil, isArchived: Bool? = nil, numPages: Int? = nil, name: String? = nil, cutScore: Int? = nil, url: String? = nil, designator: String? = nil, teams: [Team]? = nil, abbreviation: String? = nil, contentDomain: ContentDomain? = nil, maxPoints: Int? = nil, id: Int? = nil, isPilot: Bool? = nil) {
        self.isConfirmationRequired = isConfirmationRequired
        self.isArchived = isArchived
        self.numPages = numPages
        self.name = name
        self.cutScore = cutScore
        self.url = url
        self.designator = designator
        self.teams = teams
        self.abbreviation = abbreviation
        self.contentDomain = contentDomain
        self.maxPoints = maxPoints
        self.id = id
        self.isPilot = isPilot
    }

    private enum CodingKeys: String, CodingKey {
        case isConfirmationRequired = "confirmation_required"
        case isArchived = "archived"
        case numPages = "num_pages"
        case name
        case cutScore = "cut_score"
        case url
        case designator
        case teams
        case abbreviation
        case contentDomain = "content_domain"
        case maxPoints = "max_points"
        case id
        case isPilot = "pilot"
    }
}

/// Information about the current stack.
public struct StackInfoObject: Codable {
    public var data: Data?

    public struct Data: Codable {
        /// The name of the stack.
        public var name: String?
        /// Indicates if the stack is a calibration stack.
        public var isCalibration: Bool?
        /// The total number of candidates on the stack.
        public var totalCandidates: Int?
        /// Information about each of the candidates on the stack.
        public var candidates: [StackCandidateObject]?
        /// The client-supplied identifier for the stack.
        public var clientID: String?
        /// Information about all the exam events the stack is associated with.
        public var examEvents: [ExamEventObject]?
        /// The Crucible-generated identifier for the stack.
        public var id: String?

        public init(name: String? = nil, isCalibration: Bool? = nil, totalCandidates: Int? = nil, candidates: [StackCandidateObject]? = nil, clientID: String? = nil, examEvents: [ExamEventObject]? = nil, id: String? = nil) {
            self.name = name
            self.isCalibration = isCalibration
            self.totalCandidates = totalCandidates
            self.candidates = candidates
            self.clientID = clientID
            self.examEvents = examEvents
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case isCalibration = "calibration"
            case totalCandidates = "total_candidates"
            case candidates
            case clientID = "client_id"
            case examEvents = "exam_events"
            case id
        }
    }

    public init(data: Data? = nil) {
        self.data = data
    }
}

/// Information about the stack assignment.
public struct StackAssignmentObject: Codable {
    /// The current status of the stack assignment.
    public var status: String?
    /// The examiner assigned to the stack.
    public var examiner: Examiner?
    /// The URL which defines this resource.
    public var url: String?
    /// A list of all the items on the stack assignment.
    public var items: [NameIDObject]?
    /// The time the stack assignment was completed. Formatted as ISO-8601 timestamps.
    public var completed: NaiveDate?
    /// Generic Name and Id Object
    public var examEvent: NameIDObject?
    /// Stack Object
    ///
    /// Information about the stack.
    public var stack: StackObject?
    /// The time the stack was assigned. Formatted as ISO-8601 timestamps.
    public var assigned: NaiveDate?
    /// A list of all the candidates and their evaluations on the stack.
    public var candidates: [CandidatesObject]?
    /// Indicates if the stack is out of order.
    public var isOrderSuspect: Bool?
    /// The Crucible-generated identifier for the stack assignment.
    public var id: Int?

    /// The examiner assigned to the stack.
    public struct Examiner: Codable {
        /// The user name of the examiner.
        public var userName: String?
        /// The name of the examiner.
        public var name: String?
        /// The client-supplied identifier for the examiner.
        public var clientID: String?
        /// The Crucible-generated identifier for the examiner.
        public var id: Int?

        public init(userName: String? = nil, name: String? = nil, clientID: String? = nil, id: Int? = nil) {
            self.userName = userName
            self.name = name
            self.clientID = clientID
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case userName = "user_name"
            case name
            case clientID = "client_id"
            case id
        }
    }

    public init(status: String? = nil, examiner: Examiner? = nil, url: String? = nil, items: [NameIDObject]? = nil, completed: NaiveDate? = nil, examEvent: NameIDObject? = nil, stack: StackObject? = nil, assigned: NaiveDate? = nil, candidates: [CandidatesObject]? = nil, isOrderSuspect: Bool? = nil, id: Int? = nil) {
        self.status = status
        self.examiner = examiner
        self.url = url
        self.items = items
        self.completed = completed
        self.examEvent = examEvent
        self.stack = stack
        self.assigned = assigned
        self.candidates = candidates
        self.isOrderSuspect = isOrderSuspect
        self.id = id
    }

    private enum CodingKeys: String, CodingKey {
        case status
        case examiner
        case url
        case items
        case completed
        case examEvent = "exam_event"
        case stack
        case assigned
        case candidates
        case isOrderSuspect = "order_suspect"
        case id
    }
}

/// Information about the users stack assignment.
public struct StackAssignmentUserObject: Codable {
    /// The current status of the stack assignment.
    public var status: String?
    /// The examiner assigned to the stack.
    public var examiner: Examiner?
    /// The URL which defines this resource.
    public var url: String?
    /// A list of all the items on the stack assignment.
    public var items: [NameIDObject]?
    /// The time the stack assignment was completed. Formatted as ISO-8601 timestamps.
    public var completed: NaiveDate?
    /// Generic Name and Id Object
    public var examEvent: NameIDObject?
    /// Stack Object
    ///
    /// Information about the stack.
    public var stack: StackObject?
    /// The time the stack was assigned. Formatted as ISO-8601 timestamps.
    public var assigned: NaiveDate?
    /// Indicates if the stack is out of order.
    public var isOrderSuspect: Bool?
    /// The Crucible-generated identifier for the stack assignment.
    public var id: Int?

    /// The examiner assigned to the stack.
    public struct Examiner: Codable {
        /// The user name of the examiner.
        public var userName: String?
        /// The name of the examiner.
        public var name: String?
        /// The client-supplied identifier for the examiner.
        public var clientID: String?
        /// The Crucible-generated identifier for the examiner.
        public var id: Int?

        public init(userName: String? = nil, name: String? = nil, clientID: String? = nil, id: Int? = nil) {
            self.userName = userName
            self.name = name
            self.clientID = clientID
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case userName = "user_name"
            case name
            case clientID = "client_id"
            case id
        }
    }

    public init(status: String? = nil, examiner: Examiner? = nil, url: String? = nil, items: [NameIDObject]? = nil, completed: NaiveDate? = nil, examEvent: NameIDObject? = nil, stack: StackObject? = nil, assigned: NaiveDate? = nil, isOrderSuspect: Bool? = nil, id: Int? = nil) {
        self.status = status
        self.examiner = examiner
        self.url = url
        self.items = items
        self.completed = completed
        self.examEvent = examEvent
        self.stack = stack
        self.assigned = assigned
        self.isOrderSuspect = isOrderSuspect
        self.id = id
    }

    private enum CodingKeys: String, CodingKey {
        case status
        case examiner
        case url
        case items
        case completed
        case examEvent = "exam_event"
        case stack
        case assigned
        case isOrderSuspect = "order_suspect"
        case id
    }
}

public enum GroupObjectItem: Codable, Hashable {
    case int(Int)
    case string(String)

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(Int.self) {
            self = .int(value)
        } else if let value = try? container.decode(String.self) {
            self = .string(value)
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Failed to intialize `oneOf`")
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .int(let value): try container.encode(value)
        case .string(let value): try container.encode(value)
        }
    }
}

/// Information about the stack.
public struct StackObject: Codable {
    /// The Crucible-generated identifier for the stack.
    public var id: Int?
    /// The client-supplied identifier for the stack.
    public var clientID: String?
    /// The name of the stack.
    public var name: String?

    public init(id: Int? = nil, clientID: String? = nil, name: String? = nil) {
        self.id = id
        self.clientID = clientID
        self.name = name
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case clientID = "client_id"
        case name
    }
}

/// Exam Event
///
/// Information about the exam event.
public struct ExamEventObject: Codable {
    /// The name of the event.
    public var examName: String?
    /// The Crucible-generated identifier for the exam event.
    public var id: Int?

    public init(examName: String? = nil, id: Int? = nil) {
        self.examName = examName
        self.id = id
    }

    private enum CodingKeys: String, CodingKey {
        case examName = "exam_name"
        case id
    }
}

/// Generic Name and Id Object
public struct NameIDObject: Codable {
    /// The name
    public var name: String?
    /// The Crucible-generated identifier.
    public var id: Int?

    public init(name: String? = nil, id: Int? = nil) {
        self.name = name
        self.id = id
    }
}

/// Information about the candidate.
public struct StackCandidateObject: Codable {
    /// The evaluation status of the candidate.
    public var status: String?
    /// The position in the stack for the candidiate.
    public var stackPosition: String?
    /// The client-supplied identifier for the candidate.
    public var clientID: String?
    /// The photo of the candidate.
    public var photo: String?
    /// The candidate number for the candidate.
    public var number: String?
    /// The Crucible-generated identifier for the candidate.
    public var id: Int?

    public init(status: String? = nil, stackPosition: String? = nil, clientID: String? = nil, photo: String? = nil, number: String? = nil, id: Int? = nil) {
        self.status = status
        self.stackPosition = stackPosition
        self.clientID = clientID
        self.photo = photo
        self.number = number
        self.id = id
    }

    private enum CodingKeys: String, CodingKey {
        case status
        case stackPosition = "stack_position"
        case clientID = "client_id"
        case photo
        case number
        case id
    }
}

/// Candidate Object
///
/// The response when creating a new candidate
public struct CandidateUpdateObject: Codable {
    /// Description of the candidate
    public var description: String?
    /// An array of tags associated with the candidate
    public var tags: [String]?
    /// The max number of points possible across all evaluated items
    public var possiblePoints: Int?
    /// The client-supplied number for the candidate
    public var number: String?
    /// The sum of the scores for all evaluations for the candidate
    public var totalPointsEarned: Int?
    /// The client-supplied identifier for the candidate
    public var clientID: String?
    /// An object storing additional data fields
    public var customData: CustomData?
    /// An array of evaluation data
    public var evaluations: [EvaluationDataObject]?
    /// The Crucible-generated identifier for the candidate
    public var id: Int?
    /// The number of items evaluated for a candidate
    public var numberItemsEvaluated: Int?

    /// An object storing additional data fields
    public struct CustomData: Codable {
        public var name: String?
        public var additionalData: Int?
        public var additionalData2: String?

        public init(name: String? = nil, additionalData: Int? = nil, additionalData2: String? = nil) {
            self.name = name
            self.additionalData = additionalData
            self.additionalData2 = additionalData2
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case additionalData = "additional_data"
            case additionalData2 = "additional_data2"
        }
    }

    public init(description: String? = nil, tags: [String]? = nil, possiblePoints: Int? = nil, number: String? = nil, totalPointsEarned: Int? = nil, clientID: String? = nil, customData: CustomData? = nil, evaluations: [EvaluationDataObject]? = nil, id: Int? = nil, numberItemsEvaluated: Int? = nil) {
        self.description = description
        self.tags = tags
        self.possiblePoints = possiblePoints
        self.number = number
        self.totalPointsEarned = totalPointsEarned
        self.clientID = clientID
        self.customData = customData
        self.evaluations = evaluations
        self.id = id
        self.numberItemsEvaluated = numberItemsEvaluated
    }

    private enum CodingKeys: String, CodingKey {
        case description
        case tags
        case possiblePoints = "possible_points"
        case number
        case totalPointsEarned = "total_points_earned"
        case clientID = "client_id"
        case customData = "custom_data"
        case evaluations
        case id
        case numberItemsEvaluated = "number_items_evaluated"
    }
}

/// The response when creating a new candidate
public struct CandidateObject: Codable {
    /// The candidate's client-supplied identifier
    public var description: String?
    /// An array of tags associated with the candidate
    public var tags: [String]?
    /// The max number of points possible across all evaluated items
    public var possiblePoints: Int?
    /// The client-supplied number for the candidate
    public var number: String?
    /// The sum of the scores for all evaluations for the candidate
    public var totalPointsEarned: Int?
    /// The client-supplied identifier for the candidate
    public var clientID: String?
    /// An array of evaluation data
    public var evaluations: [EvaluationDataObject]?
    /// The Crucible-generated identifier for the candidate
    public var id: Int?
    /// The number of items evaluated for a candidate
    public var numberItemsEvaluated: Int?

    public init(description: String? = nil, tags: [String]? = nil, possiblePoints: Int? = nil, number: String? = nil, totalPointsEarned: Int? = nil, clientID: String? = nil, evaluations: [EvaluationDataObject]? = nil, id: Int? = nil, numberItemsEvaluated: Int? = nil) {
        self.description = description
        self.tags = tags
        self.possiblePoints = possiblePoints
        self.number = number
        self.totalPointsEarned = totalPointsEarned
        self.clientID = clientID
        self.evaluations = evaluations
        self.id = id
        self.numberItemsEvaluated = numberItemsEvaluated
    }

    private enum CodingKeys: String, CodingKey {
        case description
        case tags
        case possiblePoints = "possible_points"
        case number
        case totalPointsEarned = "total_points_earned"
        case clientID = "client_id"
        case evaluations
        case id
        case numberItemsEvaluated = "number_items_evaluated"
    }
}

/// Information about the evaluation
public struct EvaluationDataObject: Codable {
    /// The Crucible-generated identifier of the evaluation
    public var id: Int?
    /// The start time of the evaluation. Formatted as ISO-8601 timestamp.
    public var start: String?
    /// The end time of the evaluation. Formatted as ISO-8601 timestamp.
    public var end: String?
    /// The score of the evaluation
    public var score: Int?
    /// The url directing to the evaluation
    public var url: String?
    /// An object of items on the procedure
    public var item: Item?
    /// Stack assignment data
    public var stackAssignment: StackAssignment?

    /// An object of items on the procedure
    public struct Item: Codable {
        /// The Crucible-generated identifier for the item
        public var id: Int?
        /// The name of the item
        public var name: String?
        /// The maximum number of points on the item
        public var maxPoints: Int?

        public init(id: Int? = nil, name: String? = nil, maxPoints: Int? = nil) {
            self.id = id
            self.name = name
            self.maxPoints = maxPoints
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case name
            case maxPoints = "max_points"
        }
    }

    /// Stack assignment data
    public struct StackAssignment: Codable {
        /// The Crucible-generated identifier of the stack assignment
        public var id: Int?
        /// Stack data
        public var stack: Stack?
        /// Examiner data
        public var examiner: Examiner?

        /// Stack data
        public struct Stack: Codable {
            /// The Crucible-generated identifier of the stack
            public var id: Int?
            /// The name of the stack
            public var name: String?

            public init(id: Int? = nil, name: String? = nil) {
                self.id = id
                self.name = name
            }
        }

        /// Examiner data
        public struct Examiner: Codable {
            /// The Crucible-generated identifier of the examiner
            public var id: Int?
            /// The pin of the examiner
            public var pin: String?
            /// The name of the examiner
            public var name: String?

            public init(id: Int? = nil, pin: String? = nil, name: String? = nil) {
                self.id = id
                self.pin = pin
                self.name = name
            }
        }

        public init(id: Int? = nil, stack: Stack? = nil, examiner: Examiner? = nil) {
            self.id = id
            self.stack = stack
            self.examiner = examiner
        }
    }

    public init(id: Int? = nil, start: String? = nil, end: String? = nil, score: Int? = nil, url: String? = nil, item: Item? = nil, stackAssignment: StackAssignment? = nil) {
        self.id = id
        self.start = start
        self.end = end
        self.score = score
        self.url = url
        self.item = item
        self.stackAssignment = stackAssignment
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case start
        case end
        case score
        case url
        case item
        case stackAssignment = "stack_assignment"
    }
}

/// A retrieval of a single candidate or multiple candidates
public struct GetCandidatesObject: Codable {
    /// The name of the candidate
    public var name: String?
    /// The total number of evaluations completed on the candidate
    public var totalCompletedEvaluations: Int?
    /// A list of tags associated with the candidate
    public var tags: [String]?
    /// The candidate number associated with the candidate
    public var number: String?
    /// The email associated with the candidate
    public var email: String?
    /// The client-supplied identifier of the canddidate
    public var clientID: String?
    /// The Crucible-generated identifier of the candidate
    public var id: Int?

    public init(name: String? = nil, totalCompletedEvaluations: Int? = nil, tags: [String]? = nil, number: String? = nil, email: String? = nil, clientID: String? = nil, id: Int? = nil) {
        self.name = name
        self.totalCompletedEvaluations = totalCompletedEvaluations
        self.tags = tags
        self.number = number
        self.email = email
        self.clientID = clientID
        self.id = id
    }

    private enum CodingKeys: String, CodingKey {
        case name
        case totalCompletedEvaluations = "total_completed_evaluations"
        case tags
        case number
        case email
        case clientID = "client_id"
        case id
    }
}

/// Information about the candidate.
public struct CandidatesObject: Codable {
    /// The Crucible-generated identifier for the candidate on this stack assignment.
    public var assignmentCandidateID: String?
    /// The client-supplied identifier for the candidate.
    public var clientID: Int?
    /// The URL which defines this resource.
    public var url: String?
    /// The candidate's position in the stack.
    public var position: Int?
    /// An array of all the evaluations on the stack.
    public var evaluations: [EvaluationsObject]?
    /// The candidiate number
    public var number: String?
    /// The Crucible-generated identifier for the candidate.
    public var id: Int?

    public init(assignmentCandidateID: String? = nil, clientID: Int? = nil, url: String? = nil, position: Int? = nil, evaluations: [EvaluationsObject]? = nil, number: String? = nil, id: Int? = nil) {
        self.assignmentCandidateID = assignmentCandidateID
        self.clientID = clientID
        self.url = url
        self.position = position
        self.evaluations = evaluations
        self.number = number
        self.id = id
    }

    private enum CodingKeys: String, CodingKey {
        case assignmentCandidateID = "assignment_candidate_id"
        case clientID = "client_id"
        case url
        case position
        case evaluations
        case number
        case id
    }
}

/// Information about the evaluation.
public struct EvaluationsObject: Codable {
    /// The Crucible-generated identifier for the item.
    public var itemID: String?
    /// The median score of all evaluations for this candidate on this item.
    public var procedureScore: Int?
    /// The score for the examiner associated with this stack assignment.
    public var score: Int?
    /// The name of the item.
    public var itemName: String?

    public init(itemID: String? = nil, procedureScore: Int? = nil, score: Int? = nil, itemName: String? = nil) {
        self.itemID = itemID
        self.procedureScore = procedureScore
        self.score = score
        self.itemName = itemName
    }

    private enum CodingKeys: String, CodingKey {
        case itemID = "item_id"
        case procedureScore = "procedure_score"
        case score
        case itemName = "item_name"
    }
}

/// Information about each permission group.
public struct PermissionSearchObject: Codable {
    /// The client-supplied description for the permission group.
    public var description: String?
    /// When the permission group was created. Formatted as ISO-8601 timestamp.
    public var created: NaiveDate?
    /// The client-supplied name for the permission group.
    public var groupName: String?
    /// Indicates if the permission group can be deleted from the UI.
    public var permanent: String?
    /// Indicates if the permission group is displayed in the UI.
    public var hidden: String?
    /// The Crucible-generated identifier for the candidate.
    public var id: Int?

    public init(description: String? = nil, created: NaiveDate? = nil, groupName: String? = nil, permanent: String? = nil, hidden: String? = nil, id: Int? = nil) {
        self.description = description
        self.created = created
        self.groupName = groupName
        self.permanent = permanent
        self.hidden = hidden
        self.id = id
    }

    private enum CodingKeys: String, CodingKey {
        case description
        case created
        case groupName = "group_name"
        case permanent
        case hidden
        case id
    }
}

public enum AnyJSON: Equatable, Codable {
    case string(String)
    case number(Double)
    case object([String: AnyJSON])
    case array([AnyJSON])
    case bool(Bool)

    var value: Any {
        switch self {
        case .string(let string): return string
        case .number(let double): return double
        case .object(let dictionary): return dictionary
        case .array(let array): return array
        case .bool(let bool): return bool
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .array(array): try container.encode(array)
        case let .object(object): try container.encode(object)
        case let .string(string): try container.encode(string)
        case let .number(number): try container.encode(number)
        case let .bool(bool): try container.encode(bool)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let object = try? container.decode([String: AnyJSON].self) {
            self = .object(object)
        } else if let array = try? container.decode([AnyJSON].self) {
            self = .array(array)
        } else if let string = try? container.decode(String.self) {
            self = .string(string)
        } else if let bool = try? container.decode(Bool.self) {
            self = .bool(bool)
        } else if let number = try? container.decode(Double.self) {
            self = .number(number)
        } else {
            throw DecodingError.dataCorrupted(
                .init(codingPath: decoder.codingPath, debugDescription: "Invalid JSON value.")
            )
        }
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
