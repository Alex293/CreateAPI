// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation

public struct Problem: Codable {
    public var type: String
    public var title: String?
    public var detail: String?
    public var instance: String?
    public var status: Int?
    public var method: String?
    public var uri: String?

    public init(type: String, title: String? = nil, detail: String? = nil, instance: String? = nil, status: Int? = nil, method: String? = nil, uri: String? = nil) {
        self.type = type
        self.title = title
        self.detail = detail
        self.instance = instance
        self.status = status
        self.method = method
        self.uri = uri
    }
}

public struct Originalimage: Codable {
    /// Original image URI
    public var source: String
    /// Original image width
    public var width: Int
    /// Original image height
    public var height: Int

    public init(source: String, width: Int, height: Int) {
        self.source = source
        self.width = width
        self.height = height
    }
}

public struct Thumbnail: Codable {
    /// Thumbnail image URI
    public var source: String
    /// Thumbnail width
    public var width: Int
    /// Thumnail height
    public var height: Int

    public init(source: String, width: Int, height: Int) {
        self.source = source
        self.width = width
        self.height = height
    }
}

/// A good example of the differences can be seen in https://en.wikipedia.org/api/rest_v1/page/summary/IOS_13
public struct TitlesSet: Codable {
    /// The DB key (non-prefixed), e.g. may have _ instead of spaces, best for making request URIs, still requires Percent-encoding
    public var canonical: String
    /// The normalized title (https://www.mediawiki.org/wiki/API:Query#Example_2:_Title_normalization), e.g. may have spaces instead of _
    public var normalized: String
    /// The title as it should be displayed to the user
    public var display: String

    public init(canonical: String, normalized: String, display: String) {
        self.canonical = canonical
        self.normalized = normalized
        self.display = display
    }
}

public struct Summary: Codable {
    /// A good example of the differences can be seen in https://en.wikipedia.org/api/rest_v1/page/summary/IOS_13
    public var titles: TitlesSet
    /// The page title.
    /// Deprecated: Use `titles.normalized` instead.
    ///
    /// - warning: Deprecated.
    public var title: String?
    /// The page title how it should be shown to the user.
    /// Deprecated: Use `titles.display` instead.
    ///
    /// - warning: Deprecated.
    public var displaytitle: String?
    /// The page ID
    public var pageid: Int?
    /// First several sentences of an article in plain text
    public var extract: String
    /// First several sentences of an article in simple HTML format
    public var extractHTML: String?
    public var thumbnail: Thumbnail?
    public var originalimage: Originalimage?
    /// The page language code
    ///
    /// Example: "en"
    public var lang: String
    /// The page language direction code
    ///
    /// Example: "ltr"
    public var dir: String
    /// The time when the page was last edited in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format
    ///
    /// Example:
    ///
    /// {
    /// 
    /// }
    public var timestamp: String?
    /// Wikidata description for the page
    ///
    /// Example: "American poet"
    public var description: String?
    /// The coordinates of the item
    public var coordinates: Coordinates?

    /// The coordinates of the item
    public struct Coordinates: Codable {
        /// The latitude
        public var lat: Double
        /// The longitude
        public var lon: Double

        public init(lat: Double, lon: Double) {
            self.lat = lat
            self.lon = lon
        }
    }

    public init(titles: TitlesSet, title: String? = nil, displaytitle: String? = nil, pageid: Int? = nil, extract: String, extractHTML: String? = nil, thumbnail: Thumbnail? = nil, originalimage: Originalimage? = nil, lang: String, dir: String, timestamp: String? = nil, description: String? = nil, coordinates: Coordinates? = nil) {
        self.titles = titles
        self.title = title
        self.displaytitle = displaytitle
        self.pageid = pageid
        self.extract = extract
        self.extractHTML = extractHTML
        self.thumbnail = thumbnail
        self.originalimage = originalimage
        self.lang = lang
        self.dir = dir
        self.timestamp = timestamp
        self.description = description
        self.coordinates = coordinates
    }

    private enum CodingKeys: String, CodingKey {
        case titles
        case title
        case displaytitle
        case pageid
        case extract
        case extractHTML = "extract_html"
        case thumbnail
        case originalimage
        case lang
        case dir
        case timestamp
        case description
        case coordinates
    }
}

public struct CxMt: Codable {
    /// The translated content
    public var contents: String?

    public init(contents: String? = nil) {
        self.contents = contents
    }
}

public struct CxDict: Codable {
    /// The original word to look up
    public var source: String?
    /// The translations found
    public var translations: [Translation]?

    public struct Translation: Codable {
        /// The translated phrase
        public var phrase: String?
        /// Extra information about the phrase
        public var info: String?
        /// The source dictionary used for the translation
        public var sources: String?

        public init(phrase: String? = nil, info: String? = nil, sources: String? = nil) {
            self.phrase = phrase
            self.info = info
            self.sources = sources
        }
    }

    public init(source: String? = nil, translations: [Translation]? = nil) {
        self.source = source
        self.translations = translations
    }
}

/// The result format for listings
public struct Listing: Codable {
    public var items: [String]

    public init(items: [String]) {
        self.items = items
    }
}

public struct PageviewArticle: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var access: String?
        public var article: String?
        public var agent: String?
        public var granularity: String?
        public var timestamp: String?
        public var views: Int?

        public init(project: String? = nil, access: String? = nil, article: String? = nil, agent: String? = nil, granularity: String? = nil, timestamp: String? = nil, views: Int? = nil) {
            self.project = project
            self.access = access
            self.article = article
            self.agent = agent
            self.granularity = granularity
            self.timestamp = timestamp
            self.views = views
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct PageviewProject: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var access: String?
        public var agent: String?
        public var granularity: String?
        public var timestamp: String?
        public var views: Int?

        public init(project: String? = nil, access: String? = nil, agent: String? = nil, granularity: String? = nil, timestamp: String? = nil, views: Int? = nil) {
            self.project = project
            self.access = access
            self.agent = agent
            self.granularity = granularity
            self.timestamp = timestamp
            self.views = views
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct PageviewTops: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var access: String?
        public var year: String?
        public var month: String?
        public var day: String?
        public var articles: [Article]?

        public struct Article: Codable {
            public var rank: Int?
            public var article: String?
            public var views: Int?

            public init(rank: Int? = nil, article: String? = nil, views: Int? = nil) {
                self.rank = rank
                self.article = article
                self.views = views
            }
        }

        public init(project: String? = nil, access: String? = nil, year: String? = nil, month: String? = nil, day: String? = nil, articles: [Article]? = nil) {
            self.project = project
            self.access = access
            self.year = year
            self.month = month
            self.day = day
            self.articles = articles
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct ByCountry: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var access: String?
        public var year: String?
        public var month: String?
        public var countries: [Country]?

        public struct Country: Codable {
            public var rank: Int?
            public var country: String?
            public var views: Int?

            public init(rank: Int? = nil, country: String? = nil, views: Int? = nil) {
                self.rank = rank
                self.country = country
                self.views = views
            }
        }

        public init(project: String? = nil, access: String? = nil, year: String? = nil, month: String? = nil, countries: [Country]? = nil) {
            self.project = project
            self.access = access
            self.year = year
            self.month = month
            self.countries = countries
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct PerCountry: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var country: String?
        public var access: String?
        public var year: String?
        public var month: String?
        public var day: String?
        public var articles: [Article]?

        public struct Article: Codable {
            public var rank: Int?
            public var article: String?
            public var project: String?
            public var viewsCeil: Int?

            public init(rank: Int? = nil, article: String? = nil, project: String? = nil, viewsCeil: Int? = nil) {
                self.rank = rank
                self.article = article
                self.project = project
                self.viewsCeil = viewsCeil
            }

            private enum CodingKeys: String, CodingKey {
                case rank
                case article
                case project
                case viewsCeil = "views_ceil"
            }
        }

        public init(country: String? = nil, access: String? = nil, year: String? = nil, month: String? = nil, day: String? = nil, articles: [Article]? = nil) {
            self.country = country
            self.access = access
            self.year = year
            self.month = month
            self.day = day
            self.articles = articles
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct UniqueDevices: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var accessSite: String?
        public var granularity: String?
        public var timestamp: String?
        public var devices: Int?

        public init(project: String? = nil, accessSite: String? = nil, granularity: String? = nil, timestamp: String? = nil, devices: Int? = nil) {
            self.project = project
            self.accessSite = accessSite
            self.granularity = granularity
            self.timestamp = timestamp
            self.devices = devices
        }

        private enum CodingKeys: String, CodingKey {
            case project
            case accessSite = "access-site"
            case granularity
            case timestamp
            case devices
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct PagecountsProject: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var accessSite: String?
        public var granularity: String?
        public var timestamp: String?
        public var count: Int?

        public init(project: String? = nil, accessSite: String? = nil, granularity: String? = nil, timestamp: String? = nil, count: Int? = nil) {
            self.project = project
            self.accessSite = accessSite
            self.granularity = granularity
            self.timestamp = timestamp
            self.count = count
        }

        private enum CodingKeys: String, CodingKey {
            case project
            case accessSite = "access-site"
            case granularity
            case timestamp
            case count
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct NewPages: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var editorType: String?
        public var pageType: String?
        public var granularity: String?
        public var results: [Result]?

        public struct Result: Codable {
            public var timestamp: String?
            public var newPages: Int?

            public init(timestamp: String? = nil, newPages: Int? = nil) {
                self.timestamp = timestamp
                self.newPages = newPages
            }

            private enum CodingKeys: String, CodingKey {
                case timestamp
                case newPages = "new_pages"
            }
        }

        public init(project: String? = nil, editorType: String? = nil, pageType: String? = nil, granularity: String? = nil, results: [Result]? = nil) {
            self.project = project
            self.editorType = editorType
            self.pageType = pageType
            self.granularity = granularity
            self.results = results
        }

        private enum CodingKeys: String, CodingKey {
            case project
            case editorType = "editor-type"
            case pageType = "page-type"
            case granularity
            case results
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct EditedPages: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var editorType: String?
        public var pageType: String?
        public var activityLevel: String?
        public var granularity: String?
        public var results: [Result]?

        public struct Result: Codable {
            public var timestamp: String?
            public var editedPages: Int?

            public init(timestamp: String? = nil, editedPages: Int? = nil) {
                self.timestamp = timestamp
                self.editedPages = editedPages
            }

            private enum CodingKeys: String, CodingKey {
                case timestamp
                case editedPages = "edited_pages"
            }
        }

        public init(project: String? = nil, editorType: String? = nil, pageType: String? = nil, activityLevel: String? = nil, granularity: String? = nil, results: [Result]? = nil) {
            self.project = project
            self.editorType = editorType
            self.pageType = pageType
            self.activityLevel = activityLevel
            self.granularity = granularity
            self.results = results
        }

        private enum CodingKeys: String, CodingKey {
            case project
            case editorType = "editor-type"
            case pageType = "page-type"
            case activityLevel = "activity-level"
            case granularity
            case results
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct TopEditedPagesByEdits: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var editorType: String?
        public var pageType: String?
        public var granularity: String?
        public var results: [Result]?

        public struct Result: Codable {
            public var timestamp: String?
            public var top: [TopItem]?

            public struct TopItem: Codable {
                public var rank: Int?
                public var pageTitle: String?
                public var edits: Int?

                public init(rank: Int? = nil, pageTitle: String? = nil, edits: Int? = nil) {
                    self.rank = rank
                    self.pageTitle = pageTitle
                    self.edits = edits
                }

                private enum CodingKeys: String, CodingKey {
                    case rank
                    case pageTitle = "page_title"
                    case edits
                }
            }

            public init(timestamp: String? = nil, top: [TopItem]? = nil) {
                self.timestamp = timestamp
                self.top = top
            }
        }

        public init(project: String? = nil, editorType: String? = nil, pageType: String? = nil, granularity: String? = nil, results: [Result]? = nil) {
            self.project = project
            self.editorType = editorType
            self.pageType = pageType
            self.granularity = granularity
            self.results = results
        }

        private enum CodingKeys: String, CodingKey {
            case project
            case editorType = "editor-type"
            case pageType = "page-type"
            case granularity
            case results
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct TopEditedPagesByNetBytesDiff: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var editorType: String?
        public var pageType: String?
        public var granularity: String?
        public var results: [Result]?

        public struct Result: Codable {
            public var timestamp: String?
            public var top: [TopItem]?

            public struct TopItem: Codable {
                public var rank: Int?
                public var pageTitle: String?
                public var netBytesDiff: Int?

                public init(rank: Int? = nil, pageTitle: String? = nil, netBytesDiff: Int? = nil) {
                    self.rank = rank
                    self.pageTitle = pageTitle
                    self.netBytesDiff = netBytesDiff
                }

                private enum CodingKeys: String, CodingKey {
                    case rank
                    case pageTitle = "page_title"
                    case netBytesDiff = "net_bytes_diff"
                }
            }

            public init(timestamp: String? = nil, top: [TopItem]? = nil) {
                self.timestamp = timestamp
                self.top = top
            }
        }

        public init(project: String? = nil, editorType: String? = nil, pageType: String? = nil, granularity: String? = nil, results: [Result]? = nil) {
            self.project = project
            self.editorType = editorType
            self.pageType = pageType
            self.granularity = granularity
            self.results = results
        }

        private enum CodingKeys: String, CodingKey {
            case project
            case editorType = "editor-type"
            case pageType = "page-type"
            case granularity
            case results
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct TopEditedPagesByAbsBytesDiff: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var editorType: String?
        public var pageType: String?
        public var granularity: String?
        public var results: [Result]?

        public struct Result: Codable {
            public var timestamp: String?
            public var top: [TopItem]?

            public struct TopItem: Codable {
                public var rank: Int?
                public var pageTitle: String?
                public var absBytesDiff: Int?

                public init(rank: Int? = nil, pageTitle: String? = nil, absBytesDiff: Int? = nil) {
                    self.rank = rank
                    self.pageTitle = pageTitle
                    self.absBytesDiff = absBytesDiff
                }

                private enum CodingKeys: String, CodingKey {
                    case rank
                    case pageTitle = "page_title"
                    case absBytesDiff = "abs_bytes_diff"
                }
            }

            public init(timestamp: String? = nil, top: [TopItem]? = nil) {
                self.timestamp = timestamp
                self.top = top
            }
        }

        public init(project: String? = nil, editorType: String? = nil, pageType: String? = nil, granularity: String? = nil, results: [Result]? = nil) {
            self.project = project
            self.editorType = editorType
            self.pageType = pageType
            self.granularity = granularity
            self.results = results
        }

        private enum CodingKeys: String, CodingKey {
            case project
            case editorType = "editor-type"
            case pageType = "page-type"
            case granularity
            case results
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct Editors: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var editorType: String?
        public var pageType: String?
        public var activityLevel: String?
        public var granularity: String?
        public var results: [Result]?

        public struct Result: Codable {
            public var timestamp: String?
            public var editors: Int?

            public init(timestamp: String? = nil, editors: Int? = nil) {
                self.timestamp = timestamp
                self.editors = editors
            }
        }

        public init(project: String? = nil, editorType: String? = nil, pageType: String? = nil, activityLevel: String? = nil, granularity: String? = nil, results: [Result]? = nil) {
            self.project = project
            self.editorType = editorType
            self.pageType = pageType
            self.activityLevel = activityLevel
            self.granularity = granularity
            self.results = results
        }

        private enum CodingKeys: String, CodingKey {
            case project
            case editorType = "editor-type"
            case pageType = "page-type"
            case activityLevel = "activity-level"
            case granularity
            case results
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct TopEditorsByEdits: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var editorType: String?
        public var pageType: String?
        public var granularity: String?
        public var results: [Result]?

        public struct Result: Codable {
            public var timestamp: String?
            public var top: [TopItem]?

            public struct TopItem: Codable {
                public var rank: Int?
                public var userText: String?
                public var edits: Int?

                public init(rank: Int? = nil, userText: String? = nil, edits: Int? = nil) {
                    self.rank = rank
                    self.userText = userText
                    self.edits = edits
                }

                private enum CodingKeys: String, CodingKey {
                    case rank
                    case userText = "user_text"
                    case edits
                }
            }

            public init(timestamp: String? = nil, top: [TopItem]? = nil) {
                self.timestamp = timestamp
                self.top = top
            }
        }

        public init(project: String? = nil, editorType: String? = nil, pageType: String? = nil, granularity: String? = nil, results: [Result]? = nil) {
            self.project = project
            self.editorType = editorType
            self.pageType = pageType
            self.granularity = granularity
            self.results = results
        }

        private enum CodingKeys: String, CodingKey {
            case project
            case editorType = "editor-type"
            case pageType = "page-type"
            case granularity
            case results
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct TopEditorsByNetBytesDiff: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var editorType: String?
        public var pageType: String?
        public var granularity: String?
        public var results: [Result]?

        public struct Result: Codable {
            public var timestamp: String?
            public var top: [TopItem]?

            public struct TopItem: Codable {
                public var rank: Int?
                public var userText: String?
                public var netBytesDiff: Int?

                public init(rank: Int? = nil, userText: String? = nil, netBytesDiff: Int? = nil) {
                    self.rank = rank
                    self.userText = userText
                    self.netBytesDiff = netBytesDiff
                }

                private enum CodingKeys: String, CodingKey {
                    case rank
                    case userText = "user_text"
                    case netBytesDiff = "net_bytes_diff"
                }
            }

            public init(timestamp: String? = nil, top: [TopItem]? = nil) {
                self.timestamp = timestamp
                self.top = top
            }
        }

        public init(project: String? = nil, editorType: String? = nil, pageType: String? = nil, granularity: String? = nil, results: [Result]? = nil) {
            self.project = project
            self.editorType = editorType
            self.pageType = pageType
            self.granularity = granularity
            self.results = results
        }

        private enum CodingKeys: String, CodingKey {
            case project
            case editorType = "editor-type"
            case pageType = "page-type"
            case granularity
            case results
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct TopEditorsByAbsBytesDiff: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var editorType: String?
        public var pageType: String?
        public var granularity: String?
        public var results: [Result]?

        public struct Result: Codable {
            public var timestamp: String?
            public var top: [TopItem]?

            public struct TopItem: Codable {
                public var rank: Int?
                public var userText: String?
                public var absBytesDiff: Int?

                public init(rank: Int? = nil, userText: String? = nil, absBytesDiff: Int? = nil) {
                    self.rank = rank
                    self.userText = userText
                    self.absBytesDiff = absBytesDiff
                }

                private enum CodingKeys: String, CodingKey {
                    case rank
                    case userText = "user_text"
                    case absBytesDiff = "abs_bytes_diff"
                }
            }

            public init(timestamp: String? = nil, top: [TopItem]? = nil) {
                self.timestamp = timestamp
                self.top = top
            }
        }

        public init(project: String? = nil, editorType: String? = nil, pageType: String? = nil, granularity: String? = nil, results: [Result]? = nil) {
            self.project = project
            self.editorType = editorType
            self.pageType = pageType
            self.granularity = granularity
            self.results = results
        }

        private enum CodingKeys: String, CodingKey {
            case project
            case editorType = "editor-type"
            case pageType = "page-type"
            case granularity
            case results
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct Edits: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var editorType: String?
        public var pageType: String?
        public var granularity: String?
        public var results: [Result]?

        public struct Result: Codable {
            public var timestamp: String?
            public var edits: Int?

            public init(timestamp: String? = nil, edits: Int? = nil) {
                self.timestamp = timestamp
                self.edits = edits
            }
        }

        public init(project: String? = nil, editorType: String? = nil, pageType: String? = nil, granularity: String? = nil, results: [Result]? = nil) {
            self.project = project
            self.editorType = editorType
            self.pageType = pageType
            self.granularity = granularity
            self.results = results
        }

        private enum CodingKeys: String, CodingKey {
            case project
            case editorType = "editor-type"
            case pageType = "page-type"
            case granularity
            case results
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct EditsPerPage: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var pageTitle: String?
        public var editorType: String?
        public var granularity: String?
        public var results: [Result]?

        public struct Result: Codable {
            public var timestamp: String?
            public var edits: Int?

            public init(timestamp: String? = nil, edits: Int? = nil) {
                self.timestamp = timestamp
                self.edits = edits
            }
        }

        public init(project: String? = nil, pageTitle: String? = nil, editorType: String? = nil, granularity: String? = nil, results: [Result]? = nil) {
            self.project = project
            self.pageTitle = pageTitle
            self.editorType = editorType
            self.granularity = granularity
            self.results = results
        }

        private enum CodingKeys: String, CodingKey {
            case project
            case pageTitle = "page-title"
            case editorType = "editor-type"
            case granularity
            case results
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct EditsPerEditor: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var userText: String?
        public var pageType: String?
        public var granularity: String?
        public var results: [Result]?

        public struct Result: Codable {
            public var timestamp: String?
            public var edits: Int?

            public init(timestamp: String? = nil, edits: Int? = nil) {
                self.timestamp = timestamp
                self.edits = edits
            }
        }

        public init(project: String? = nil, userText: String? = nil, pageType: String? = nil, granularity: String? = nil, results: [Result]? = nil) {
            self.project = project
            self.userText = userText
            self.pageType = pageType
            self.granularity = granularity
            self.results = results
        }

        private enum CodingKeys: String, CodingKey {
            case project
            case userText = "user-text"
            case pageType = "page-type"
            case granularity
            case results
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct NewRegisteredUsers: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var granularity: String?
        public var results: [Result]?

        public struct Result: Codable {
            public var timestamp: String?
            public var newRegisteredUsers: Int?

            public init(timestamp: String? = nil, newRegisteredUsers: Int? = nil) {
                self.timestamp = timestamp
                self.newRegisteredUsers = newRegisteredUsers
            }

            private enum CodingKeys: String, CodingKey {
                case timestamp
                case newRegisteredUsers = "new_registered_users"
            }
        }

        public init(project: String? = nil, granularity: String? = nil, results: [Result]? = nil) {
            self.project = project
            self.granularity = granularity
            self.results = results
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct NetBytesDifference: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var editorType: String?
        public var pageType: String?
        public var granularity: String?
        public var results: [Result]?

        public struct Result: Codable {
            public var timestamp: String?
            public var netBytesDiff: Int?

            public init(timestamp: String? = nil, netBytesDiff: Int? = nil) {
                self.timestamp = timestamp
                self.netBytesDiff = netBytesDiff
            }

            private enum CodingKeys: String, CodingKey {
                case timestamp
                case netBytesDiff = "net_bytes_diff"
            }
        }

        public init(project: String? = nil, editorType: String? = nil, pageType: String? = nil, granularity: String? = nil, results: [Result]? = nil) {
            self.project = project
            self.editorType = editorType
            self.pageType = pageType
            self.granularity = granularity
            self.results = results
        }

        private enum CodingKeys: String, CodingKey {
            case project
            case editorType = "editor-type"
            case pageType = "page-type"
            case granularity
            case results
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct NetBytesDifferencePerPage: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var pageTitle: String?
        public var editorType: String?
        public var granularity: String?
        public var results: [Result]?

        public struct Result: Codable {
            public var timestamp: String?
            public var netBytesDiff: Int?

            public init(timestamp: String? = nil, netBytesDiff: Int? = nil) {
                self.timestamp = timestamp
                self.netBytesDiff = netBytesDiff
            }

            private enum CodingKeys: String, CodingKey {
                case timestamp
                case netBytesDiff = "net_bytes_diff"
            }
        }

        public init(project: String? = nil, pageTitle: String? = nil, editorType: String? = nil, granularity: String? = nil, results: [Result]? = nil) {
            self.project = project
            self.pageTitle = pageTitle
            self.editorType = editorType
            self.granularity = granularity
            self.results = results
        }

        private enum CodingKeys: String, CodingKey {
            case project
            case pageTitle = "page-title"
            case editorType = "editor-type"
            case granularity
            case results
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct NetBytesDifferencePerEditor: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var userText: String?
        public var pageType: String?
        public var granularity: String?
        public var results: [Result]?

        public struct Result: Codable {
            public var timestamp: String?
            public var netBytesDiff: Int?

            public init(timestamp: String? = nil, netBytesDiff: Int? = nil) {
                self.timestamp = timestamp
                self.netBytesDiff = netBytesDiff
            }

            private enum CodingKeys: String, CodingKey {
                case timestamp
                case netBytesDiff = "net_bytes_diff"
            }
        }

        public init(project: String? = nil, userText: String? = nil, pageType: String? = nil, granularity: String? = nil, results: [Result]? = nil) {
            self.project = project
            self.userText = userText
            self.pageType = pageType
            self.granularity = granularity
            self.results = results
        }

        private enum CodingKeys: String, CodingKey {
            case project
            case userText = "user-text"
            case pageType = "page-type"
            case granularity
            case results
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct AbsoluteBytesDifference: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var editorType: String?
        public var pageType: String?
        public var granularity: String?
        public var results: [Result]?

        public struct Result: Codable {
            public var timestamp: String?
            public var absBytesDiff: Int?

            public init(timestamp: String? = nil, absBytesDiff: Int? = nil) {
                self.timestamp = timestamp
                self.absBytesDiff = absBytesDiff
            }

            private enum CodingKeys: String, CodingKey {
                case timestamp
                case absBytesDiff = "abs_bytes_diff"
            }
        }

        public init(project: String? = nil, editorType: String? = nil, pageType: String? = nil, granularity: String? = nil, results: [Result]? = nil) {
            self.project = project
            self.editorType = editorType
            self.pageType = pageType
            self.granularity = granularity
            self.results = results
        }

        private enum CodingKeys: String, CodingKey {
            case project
            case editorType = "editor-type"
            case pageType = "page-type"
            case granularity
            case results
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct AbsoluteBytesDifferencePerPage: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var pageTitle: String?
        public var editorType: String?
        public var granularity: String?
        public var results: [Result]?

        public struct Result: Codable {
            public var timestamp: String?
            public var absBytesDiff: Int?

            public init(timestamp: String? = nil, absBytesDiff: Int? = nil) {
                self.timestamp = timestamp
                self.absBytesDiff = absBytesDiff
            }

            private enum CodingKeys: String, CodingKey {
                case timestamp
                case absBytesDiff = "abs_bytes_diff"
            }
        }

        public init(project: String? = nil, pageTitle: String? = nil, editorType: String? = nil, granularity: String? = nil, results: [Result]? = nil) {
            self.project = project
            self.pageTitle = pageTitle
            self.editorType = editorType
            self.granularity = granularity
            self.results = results
        }

        private enum CodingKeys: String, CodingKey {
            case project
            case pageTitle = "page-title"
            case editorType = "editor-type"
            case granularity
            case results
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct AbsoluteBytesDifferencePerEditor: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var userText: String?
        public var pageType: String?
        public var granularity: String?
        public var results: [Result]?

        public struct Result: Codable {
            public var timestamp: String?
            public var absBytesDiff: Int?

            public init(timestamp: String? = nil, absBytesDiff: Int? = nil) {
                self.timestamp = timestamp
                self.absBytesDiff = absBytesDiff
            }

            private enum CodingKeys: String, CodingKey {
                case timestamp
                case absBytesDiff = "abs_bytes_diff"
            }
        }

        public init(project: String? = nil, userText: String? = nil, pageType: String? = nil, granularity: String? = nil, results: [Result]? = nil) {
            self.project = project
            self.userText = userText
            self.pageType = pageType
            self.granularity = granularity
            self.results = results
        }

        private enum CodingKeys: String, CodingKey {
            case project
            case userText = "user-text"
            case pageType = "page-type"
            case granularity
            case results
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct MediarequestReferer: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var referer: String?
        public var mediaType: String?
        public var agent: String?
        public var granularity: String?
        public var timestamp: String?
        public var requests: Int?

        public init(referer: String? = nil, mediaType: String? = nil, agent: String? = nil, granularity: String? = nil, timestamp: String? = nil, requests: Int? = nil) {
            self.referer = referer
            self.mediaType = mediaType
            self.agent = agent
            self.granularity = granularity
            self.timestamp = timestamp
            self.requests = requests
        }

        private enum CodingKeys: String, CodingKey {
            case referer
            case mediaType = "media_type"
            case agent
            case granularity
            case timestamp
            case requests
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct MediarequestFile: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var referer: String?
        public var filePath: String?
        public var agent: String?
        public var granularity: String?
        public var timestamp: String?
        public var requests: Int?

        public init(referer: String? = nil, filePath: String? = nil, agent: String? = nil, granularity: String? = nil, timestamp: String? = nil, requests: Int? = nil) {
            self.referer = referer
            self.filePath = filePath
            self.agent = agent
            self.granularity = granularity
            self.timestamp = timestamp
            self.requests = requests
        }

        private enum CodingKeys: String, CodingKey {
            case referer
            case filePath = "file_path"
            case agent
            case granularity
            case timestamp
            case requests
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct MediarequestTops: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var referer: String?
        public var mediaType: String?
        public var year: String?
        public var month: String?
        public var day: String?
        public var files: [File]?

        public struct File: Codable {
            public var rank: Int?
            public var filePath: String?
            public var requests: Int?

            public init(rank: Int? = nil, filePath: String? = nil, requests: Int? = nil) {
                self.rank = rank
                self.filePath = filePath
                self.requests = requests
            }

            private enum CodingKeys: String, CodingKey {
                case rank
                case filePath = "file_path"
                case requests
            }
        }

        public init(referer: String? = nil, mediaType: String? = nil, year: String? = nil, month: String? = nil, day: String? = nil, files: [File]? = nil) {
            self.referer = referer
            self.mediaType = mediaType
            self.year = year
            self.month = month
            self.day = day
            self.files = files
        }

        private enum CodingKeys: String, CodingKey {
            case referer
            case mediaType = "media-type"
            case year
            case month
            case day
            case files
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct EditorsByCountry: Codable {
    public var items: [Item]?

    public struct Item: Codable {
        public var project: String?
        public var activityLevel: String?
        public var year: String?
        public var month: String?
        public var results: [Result]?

        public struct Result: Codable {
            public var country: String?
            public var editorsCeil: Int?

            public init(country: String? = nil, editorsCeil: Int? = nil) {
                self.country = country
                self.editorsCeil = editorsCeil
            }

            private enum CodingKeys: String, CodingKey {
                case country
                case editorsCeil = "editors-ceil"
            }
        }

        public init(project: String? = nil, activityLevel: String? = nil, year: String? = nil, month: String? = nil, results: [Result]? = nil) {
            self.project = project
            self.activityLevel = activityLevel
            self.year = year
            self.month = month
            self.results = results
        }

        private enum CodingKeys: String, CodingKey {
            case project
            case activityLevel = "activity-level"
            case year
            case month
            case results
        }
    }

    public init(items: [Item]? = nil) {
        self.items = items
    }
}

public struct CxListTools: Codable {
    /// The list of tools available for the given language pair
    public var tools: [String]?

    public init(tools: [String]? = nil) {
        self.tools = tools
    }
}

public struct CxListPairsForTool: Codable {
    public init() {}
}

public struct CxLanguagepairs: Codable {
    /// The list of available source languages
    public var source: [String]?
    /// The list of available destination languages
    public var target: [String]?

    public init(source: [String]? = nil, target: [String]? = nil) {
        self.source = source
        self.target = target
    }
}

public struct Availability: Codable {
    /// Domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project
    public var todaysFeaturedArticle: [String]
    /// Domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project
    public var mostRead: [String]
    /// Domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project
    public var pictureOfTheDay: [String]
    /// Domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project
    public var inTheNews: [String]
    /// Domains for wikis with this feature enabled, or [ '*.<project>.org' ] for all wikis in a project
    public var onThisDay: [String]

    public init(todaysFeaturedArticle: [String], mostRead: [String], pictureOfTheDay: [String], inTheNews: [String], onThisDay: [String]) {
        self.todaysFeaturedArticle = todaysFeaturedArticle
        self.mostRead = mostRead
        self.pictureOfTheDay = pictureOfTheDay
        self.inTheNews = inTheNews
        self.onThisDay = onThisDay
    }

    private enum CodingKeys: String, CodingKey {
        case todaysFeaturedArticle = "todays_featured_article"
        case mostRead = "most_read"
        case pictureOfTheDay = "picture_of_the_day"
        case inTheNews = "in_the_news"
        case onThisDay = "on_this_day"
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
