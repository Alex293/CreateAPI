// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import NaiveDate
import Get

extension Paths {
    public static var attachments: Attachments {
        Attachments(path: "/attachments")
    }

    public struct Attachments {
        /// Path: `/attachments`
        public let path: String
    }
}

extension Paths.Attachments {
    public func attachmentGid(_ attachmentGid: String) -> WithAttachmentGid {
        WithAttachmentGid(path: "\(path)/\(attachmentGid)")
    }

    public struct WithAttachmentGid {
        /// Path: `/attachments/{attachment_gid}`
        public let path: String

        /// Get an attachment
        ///
        /// Get the full record for a single attachment.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: AsanaAPI.AttachmentResponse?

            public init(data: AsanaAPI.AttachmentResponse? = nil) {
                self.data = data
            }
        }

        /// Delete an attachment
        ///
        /// Deletes a specific, existing attachment.
        /// 
        /// Returns an empty data record.
        public var delete: Request<DeleteResponse> {
            .delete(path)
        }

        public struct DeleteResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Tasks.WithTaskGid {
    public var attachments: Attachments {
        Attachments(path: path + "/attachments")
    }

    public struct Attachments {
        /// Path: `/tasks/{task_gid}/attachments`
        public let path: String

        /// Get attachments for a task
        ///
        /// Returns the compact records for all attachments on the task.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.AttachmentCompact]?

            public init(data: [AsanaAPI.AttachmentCompact]? = nil) {
                self.data = data
            }
        }

        /// Upload an attachment
        ///
        /// Upload an attachment.
        /// 
        /// This method uploads an attachment to a task and returns the compact
        /// record for the created attachment object. This is possible by either:
        /// 
        /// - Providing the URL of the external resource being attached, or
        /// - Downloading the file content first and then uploading it as any other attachment. Note that it is not possible to attach
        /// files from third party services such as Dropbox, Box, Vimeo & Google Drive via the API
        /// 
        /// The 100MB size limit on attachments in Asana is enforced on this endpoint.
        /// 
        /// This endpoint expects a multipart/form-data encoded request containing
        /// the full contents of the file to be uploaded.
        /// 
        /// Requests made should follow the HTTP/1.1 specification that line
        /// terminators are of the form `CRLF` or `\r\n` outlined
        /// [here](http://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01#Basic-Rules)
        /// in order for the server to reliably and properly handle the request.
        public func post(_ body: Data) -> Request<PostResponse> {
            .post(path, body: body)
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.AttachmentResponse?

            public init(data: AsanaAPI.AttachmentResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Workspaces.WithWorkspaceGid {
    public var auditLogEvents: AuditLogEvents {
        AuditLogEvents(path: path + "/audit_log_events")
    }

    public struct AuditLogEvents {
        /// Path: `/workspaces/{workspace_gid}/audit_log_events`
        public let path: String

        /// Get audit log events
        ///
        /// Retrieve the audit log events that have been captured in your domain.
        /// 
        /// This endpoint will return a list of [AuditLogEvent](/docs/audit-log-event) objects, sorted by creation time in ascending order. Note that the Audit Log API captures events from October 8th, 2021 and later. Queries for events before this date will not return results.
        /// 
        /// There are a number of query parameters (below) that can be used to filter the set of [AuditLogEvent](/docs/audit-log-event) objects that are returned in the response. Any combination of query parameters is valid. When no filters are provided, all of the events that have been captured in your domain will match.
        /// 
        /// The list of events will always be [paginated](/docs/pagination). The default limit is 1000 events. The next set of events can be retrieved using the `offset` from the previous response. If there are no events that match the provided filters in your domain, the endpoint will return `null` for the `next_page` field. Querying again with the same filters may return new events if they were captured after the last request. Once a response includes a `next_page` with an `offset`, subsequent requests can be made with the latest `offset` to poll for new events that match the provided filters.
        /// 
        /// When no `offset` is provided, the response will begin with the oldest events that match the provided filters. It is important to note that [AuditLogEvent](/docs/audit-log-event) objects will be permanently deleted from our systems after 90 days. If you wish to keep a permanent record of these events, we recommend using a SIEM tool to ingest and store these logs.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.AuditLogEvent]?

            public init(data: [AsanaAPI.AuditLogEvent]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths {
    public static var batch: Batch {
        Batch(path: "/batch")
    }

    public struct Batch {
        /// Path: `/batch`
        public let path: String

        /// Submit parallel requests
        ///
        /// Make multiple requests in parallel to Asana's API.
        public func post(data: AsanaAPI.BatchRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: [AsanaAPI.BatchResponse]?

            public init(data: [AsanaAPI.BatchResponse]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Projects.WithProjectGid {
    public var customFieldSettings: CustomFieldSettings {
        CustomFieldSettings(path: path + "/custom_field_settings")
    }

    public struct CustomFieldSettings {
        /// Path: `/projects/{project_gid}/custom_field_settings`
        public let path: String

        /// Get a project's custom fields
        ///
        /// Returns a list of all of the custom fields settings on a project, in compact form. Note that, as in all queries to collections which return compact representation, `opt_fields` can be used to include more data than is returned in the compact representation. See the [getting started guide on input/output options](https://developers.asana.com/docs/#input-output-options) for more information.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.CustomFieldSettingResponse]?

            public init(data: [AsanaAPI.CustomFieldSettingResponse]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Portfolios.WithPortfolioGid {
    public var customFieldSettings: CustomFieldSettings {
        CustomFieldSettings(path: path + "/custom_field_settings")
    }

    public struct CustomFieldSettings {
        /// Path: `/portfolios/{portfolio_gid}/custom_field_settings`
        public let path: String

        /// Get a portfolio's custom fields
        ///
        /// Returns a list of all of the custom fields settings on a portfolio, in compact form.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.CustomFieldSettingResponse]?

            public init(data: [AsanaAPI.CustomFieldSettingResponse]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths {
    public static var customFields: CustomFields {
        CustomFields(path: "/custom_fields")
    }

    public struct CustomFields {
        /// Path: `/custom_fields`
        public let path: String

        /// Create a custom field
        ///
        /// Creates a new custom field in a workspace. Every custom field is required
        /// to be created in a specific workspace, and this workspace cannot be
        /// changed once set.
        /// 
        /// A custom field’s name must be unique within a workspace and not conflict
        /// with names of existing task properties such as ‘Due Date’ or ‘Assignee’.
        /// A custom field’s type must be one of ‘text’, ‘enum’, or ‘number’.
        /// 
        /// Returns the full record of the newly created custom field.
        public func post(data: AsanaAPI.CustomFieldRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.CustomFieldResponse?

            public init(data: AsanaAPI.CustomFieldResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.CustomFields {
    public func customFieldGid(_ customFieldGid: String) -> WithCustomFieldGid {
        WithCustomFieldGid(path: "\(path)/\(customFieldGid)")
    }

    public struct WithCustomFieldGid {
        /// Path: `/custom_fields/{custom_field_gid}`
        public let path: String

        /// Get a custom field
        ///
        /// Get the complete definition of a custom field’s metadata.
        /// 
        /// Since custom fields can be defined for one of a number of types, and
        /// these types have different data and behaviors, there are fields that are
        /// relevant to a particular type. For instance, as noted above, enum_options
        /// is only relevant for the enum type and defines the set of choices that
        /// the enum could represent. The examples below show some of these
        /// type-specific custom field definitions.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: AsanaAPI.CustomFieldResponse?

            public init(data: AsanaAPI.CustomFieldResponse? = nil) {
                self.data = data
            }
        }

        /// Update a custom field
        ///
        /// A specific, existing custom field can be updated by making a PUT request on the URL for that custom field. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged
        /// When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the custom field.
        /// A custom field’s `type` cannot be updated.
        /// An enum custom field’s `enum_options` cannot be updated with this endpoint. Instead see “Work With Enum Options” for information on how to update `enum_options`.
        /// Locked custom fields can only be updated by the user who locked the field.
        /// Returns the complete updated custom field record.
        public func put(data: AsanaAPI.CustomFieldRequest? = nil) -> Request<PutResponse> {
            .put(path, body: ["data": data])
        }

        public struct PutResponse: Decodable {
            public var data: AsanaAPI.CustomFieldResponse?

            public init(data: AsanaAPI.CustomFieldResponse? = nil) {
                self.data = data
            }
        }

        /// Delete a custom field
        ///
        /// A specific, existing custom field can be deleted by making a DELETE request on the URL for that custom field.
        /// Locked custom fields can only be deleted by the user who locked the field.
        /// Returns an empty data record.
        public var delete: Request<DeleteResponse> {
            .delete(path)
        }

        public struct DeleteResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Workspaces.WithWorkspaceGid {
    public var customFields: CustomFields {
        CustomFields(path: path + "/custom_fields")
    }

    public struct CustomFields {
        /// Path: `/workspaces/{workspace_gid}/custom_fields`
        public let path: String

        /// Get a workspace's custom fields
        ///
        /// Returns a list of the compact representation of all of the custom fields in a workspace.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.CustomFieldResponse]?

            public init(data: [AsanaAPI.CustomFieldResponse]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.CustomFields.WithCustomFieldGid {
    public var enumOptions: EnumOptions {
        EnumOptions(path: path + "/enum_options")
    }

    public struct EnumOptions {
        /// Path: `/custom_fields/{custom_field_gid}/enum_options`
        public let path: String

        /// Create an enum option
        ///
        /// Creates an enum option and adds it to this custom field’s list of enum options. A custom field can have at most 50 enum options (including disabled options). By default new enum options are inserted at the end of a custom field’s list.
        /// Locked custom fields can only have enum options added by the user who locked the field.
        /// Returns the full record of the newly created enum option.
        public func post(data: AsanaAPI.EnumOptionRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.EnumOption?

            public init(data: AsanaAPI.EnumOption? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.CustomFields.WithCustomFieldGid.EnumOptions {
    public var insert: Insert {
        Insert(path: path + "/insert")
    }

    public struct Insert {
        /// Path: `/custom_fields/{custom_field_gid}/enum_options/insert`
        public let path: String

        /// Reorder a custom field's enum
        ///
        /// Moves a particular enum option to be either before or after another specified enum option in the custom field.
        /// Locked custom fields can only be reordered by the user who locked the field.
        public func post(data: AsanaAPI.EnumOptionInsertRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.EnumOption?

            public init(data: AsanaAPI.EnumOption? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths {
    public static var enumOptions: EnumOptions {
        EnumOptions(path: "/enum_options")
    }

    public struct EnumOptions {
        /// Path: `/enum_options`
        public let path: String
    }
}

extension Paths.EnumOptions {
    public func enumOptionGid(_ enumOptionGid: String) -> WithEnumOptionGid {
        WithEnumOptionGid(path: "\(path)/\(enumOptionGid)")
    }

    public struct WithEnumOptionGid {
        /// Path: `/enum_options/{enum_option_gid}`
        public let path: String

        /// Update an enum option
        ///
        /// Updates an existing enum option. Enum custom fields require at least one enabled enum option.
        /// Locked custom fields can only be updated by the user who locked the field.
        /// Returns the full record of the updated enum option.
        public func put(data: AsanaAPI.EnumOptionRequest? = nil) -> Request<PutResponse> {
            .put(path, body: ["data": data])
        }

        public struct PutResponse: Decodable {
            public var data: AsanaAPI.EnumOption?

            public init(data: AsanaAPI.EnumOption? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths {
    public static var events: Events {
        Events(path: "/events")
    }

    public struct Events {
        /// Path: `/events`
        public let path: String

        /// Get events on a resource
        ///
        /// Returns the full record for all events that have occurred since the sync
        /// token was created.
        /// 
        /// A GET request to the endpoint /[path_to_resource]/events can be made in
        /// lieu of including the resource ID in the data for the request.
        /// 
        /// *Note: The resource returned will be the resource that triggered the
        /// event. This may be different from the one that the events were requested
        /// for. For example, a subscription to a project will contain events for
        /// tasks contained within the project.*
        public var get: Request<GetResponse> {
            .get(path)
        }

        /// The full record for all events that have occurred since the sync token was created.
        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.EventResponse]?
            /// A sync token to be used with the next call to the /events endpoint.
            ///
            /// Example: "de4774f6915eae04714ca93bb2f5ee81"
            public var sync: String?
            /// Indicates whether there are more events to pull.
            ///
            /// Example: true
            public var hasMore: Bool?

            public init(data: [AsanaAPI.EventResponse]? = nil, sync: String? = nil, hasMore: Bool? = nil) {
                self.data = data
                self.sync = sync
                self.hasMore = hasMore
            }

            private enum CodingKeys: String, CodingKey {
                case data
                case sync
                case hasMore = "has_more"
            }
        }
    }
}

extension Paths.Goals {
    public func goalGid(_ goalGid: String) -> WithGoalGid {
        WithGoalGid(path: "\(path)/\(goalGid)")
    }

    public struct WithGoalGid {
        /// Path: `/goals/{goal_gid}`
        public let path: String

        /// Get a goal
        ///
        /// Returns the complete goal record for a single goal.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: AsanaAPI.GoalResponse?

            public init(data: AsanaAPI.GoalResponse? = nil) {
                self.data = data
            }
        }

        /// Update a goal
        ///
        /// An existing goal can be updated by making a PUT request on the URL for
        /// that goal. Only the fields provided in the `data` block will be updated;
        /// any unspecified fields will remain unchanged.
        /// 
        /// Returns the complete updated goal record.
        public func put(data: AsanaAPI.GoalRequest? = nil) -> Request<PutResponse> {
            .put(path, body: ["data": data])
        }

        public struct PutResponse: Decodable {
            public var data: AsanaAPI.GoalResponse?

            public init(data: AsanaAPI.GoalResponse? = nil) {
                self.data = data
            }
        }

        /// Delete a goal
        ///
        /// A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.
        /// 
        /// Returns an empty data record.
        public var delete: Request<DeleteResponse> {
            .delete(path)
        }

        public struct DeleteResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths {
    public static var goals: Goals {
        Goals(path: "/goals")
    }

    public struct Goals {
        /// Path: `/goals`
        public let path: String

        /// Get goals
        ///
        /// Returns compact goal records.
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.GoalCompact]?

            public init(data: [AsanaAPI.GoalCompact]? = nil) {
                self.data = data
            }
        }

        public struct GetParameters {
            public var portfolio: String?
            public var project: String?
            public var isWorkspaceLevel: Bool?
            public var team: String?
            public var workspace: String?
            public var timePeriods: [String]?

            public init(portfolio: String? = nil, project: String? = nil, isWorkspaceLevel: Bool? = nil, team: String? = nil, workspace: String? = nil, timePeriods: [String]? = nil) {
                self.portfolio = portfolio
                self.project = project
                self.isWorkspaceLevel = isWorkspaceLevel
                self.team = team
                self.workspace = workspace
                self.timePeriods = timePeriods
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("portfolio", portfolio)
                query.addQueryItem("project", project)
                query.addQueryItem("is_workspace_level", isWorkspaceLevel)
                query.addQueryItem("team", team)
                query.addQueryItem("workspace", workspace)
                timePeriods?.forEach { query.addQueryItem("time_periods", $0) }
                return query
            }
        }

        /// Create a goal
        ///
        /// Creates a new goal in a workspace or team.
        /// 
        /// Returns the full record of the newly created goal.
        public func post(data: AsanaAPI.GoalRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.GoalResponse?

            public init(data: AsanaAPI.GoalResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Goals.WithGoalGid {
    public var setMetric: SetMetric {
        SetMetric(path: path + "/setMetric")
    }

    public struct SetMetric {
        /// Path: `/goals/{goal_gid}/setMetric`
        public let path: String

        /// Create a goal metric
        ///
        /// Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
        public func post(data: AsanaAPI.GoalMetricBase? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.GoalResponse?

            public init(data: AsanaAPI.GoalResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Goals.WithGoalGid {
    public var setMetricCurrentValue: SetMetricCurrentValue {
        SetMetricCurrentValue(path: path + "/setMetricCurrentValue")
    }

    public struct SetMetricCurrentValue {
        /// Path: `/goals/{goal_gid}/setMetricCurrentValue`
        public let path: String

        /// Update a goal metric
        ///
        /// Updates a goal's existing metric's `current_number_value` if one exists,
        /// otherwise responds with a 400 status code.
        /// 
        /// Returns the complete updated goal metric record.
        public func post(data: AsanaAPI.GoalMetricCurrentValueRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.GoalResponse?

            public init(data: AsanaAPI.GoalResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Goals.WithGoalGid {
    public var addSubgoal: AddSubgoal {
        AddSubgoal(path: path + "/addSubgoal")
    }

    public struct AddSubgoal {
        /// Path: `/goals/{goal_gid}/addSubgoal`
        public let path: String

        /// Add a subgoal to a parent goal
        ///
        /// Adds a subgoal to a parent goal. *A goal can have at most 100 subgoals, and a subgoal can have at most 4 parent goals.
        /// 
        /// Returns an empty data block.
        public func post(data: AsanaAPI.GoalAddSubgoalRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Goals.WithGoalGid {
    public var removeSubgoal: RemoveSubgoal {
        RemoveSubgoal(path: path + "/removeSubgoal")
    }

    public struct RemoveSubgoal {
        /// Path: `/goals/{goal_gid}/removeSubgoal`
        public let path: String

        /// Remove a subgoal from a goal
        ///
        /// Removes a goal as a subgoal of a specified parent goal.
        public func post(data: AsanaAPI.GoalRemoveSubgoalRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Goals.WithGoalGid {
    public var addFollowers: AddFollowers {
        AddFollowers(path: path + "/addFollowers")
    }

    public struct AddFollowers {
        /// Path: `/goals/{goal_gid}/addFollowers`
        public let path: String

        /// Add a collaborator to a goal
        ///
        /// Adds followers to a goal. Returns the goal the followers were added to.
        /// Each goal can be associated with zero or more followers in the system.
        /// Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
        public func post(data: AsanaAPI.TaskAddFollowersRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.GoalResponse?

            public init(data: AsanaAPI.GoalResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Goals.WithGoalGid {
    public var removeFollowers: RemoveFollowers {
        RemoveFollowers(path: path + "/removeFollowers")
    }

    public struct RemoveFollowers {
        /// Path: `/goals/{goal_gid}/removeFollowers`
        public let path: String

        /// Remove a collaborator from a goal
        ///
        /// Removes followers from a goal. Returns the goal the followers were removed from.
        /// Each goal can be associated with zero or more followers in the system.
        /// Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
        public func post(data: AsanaAPI.TaskAddFollowersRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.GoalResponse?

            public init(data: AsanaAPI.GoalResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Goals.WithGoalGid {
    public var addSupportingWork: AddSupportingWork {
        AddSupportingWork(path: path + "/addSupportingWork")
    }

    public struct AddSupportingWork {
        /// Path: `/goals/{goal_gid}/addSupportingWork`
        public let path: String

        /// Add a project/portfolio as supporting work for a goal.
        ///
        /// Adds a project or portfolio as supporting work for a goal. *A goal can have at most 10 supporting projects/portfolios, and a project/portfolio can support at most 10 goals*.
        public func post(data: AsanaAPI.GoalAddSupportingWorkRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Goals.WithGoalGid {
    public var removeSupportingWork: RemoveSupportingWork {
        RemoveSupportingWork(path: path + "/removeSupportingWork")
    }

    public struct RemoveSupportingWork {
        /// Path: `/goals/{goal_gid}/removeSupportingWork`
        public let path: String

        /// Remove a project/portfolio as supporting work for a goal.
        ///
        /// Removes a project or portfolio as supporting work for a goal.
        public func post(data: AsanaAPI.GoalAddSupportingWorkRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Goals.WithGoalGid {
    public var subgoals: Subgoals {
        Subgoals(path: path + "/subgoals")
    }

    public struct Subgoals {
        /// Path: `/goals/{goal_gid}/subgoals`
        public let path: String

        /// Get subgoals from a goal
        ///
        /// Returns a compact representation of all of the subgoals of a goal.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.GoalCompact]?

            public init(data: [AsanaAPI.GoalCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Goals.WithGoalGid {
    public var supportingWork: SupportingWork {
        SupportingWork(path: path + "/supportingWork")
    }

    public struct SupportingWork {
        /// Path: `/goals/{goal_gid}/supportingWork`
        public let path: String

        /// Get supporting work from a goal
        ///
        /// Returns any portfolios or projects associated with specified goal.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.ProjectCompact]?

            public init(data: [AsanaAPI.ProjectCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Goals.WithGoalGid {
    public var parentGoals: ParentGoals {
        ParentGoals(path: path + "/parentGoals")
    }

    public struct ParentGoals {
        /// Path: `/goals/{goal_gid}/parentGoals`
        public let path: String

        /// Get parent goals from a goal
        ///
        /// Returns a compact representation of all of the parent goals of a goal.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.GoalCompact]?

            public init(data: [AsanaAPI.GoalCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths {
    public static var jobs: Jobs {
        Jobs(path: "/jobs")
    }

    public struct Jobs {
        /// Path: `/jobs`
        public let path: String
    }
}

extension Paths.Jobs {
    public func jobGid(_ jobGid: String) -> WithJobGid {
        WithJobGid(path: "\(path)/\(jobGid)")
    }

    public struct WithJobGid {
        /// Path: `/jobs/{job_gid}`
        public let path: String

        /// Get a job by id
        ///
        /// Returns the full record for a job.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: AsanaAPI.JobCompact?

            public init(data: AsanaAPI.JobCompact? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths {
    public static var organizationExports: OrganizationExports {
        OrganizationExports(path: "/organization_exports")
    }

    public struct OrganizationExports {
        /// Path: `/organization_exports`
        public let path: String

        /// Create an organization export request
        ///
        /// This method creates a request to export an Organization. Asana will complete the export at some point after you create the request.
        public func post(data: AsanaAPI.OrganizationExportRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.OrganizationExportCompact?

            public init(data: AsanaAPI.OrganizationExportCompact? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.OrganizationExports {
    public func organizationExportGid(_ organizationExportGid: String) -> WithOrganizationExportGid {
        WithOrganizationExportGid(path: "\(path)/\(organizationExportGid)")
    }

    public struct WithOrganizationExportGid {
        /// Path: `/organization_exports/{organization_export_gid}`
        public let path: String

        /// Get details on an org export request
        ///
        /// Returns details of a previously-requested Organization export.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: AsanaAPI.OrganizationExportCompact?

            public init(data: AsanaAPI.OrganizationExportCompact? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths {
    public static var portfolioMemberships: PortfolioMemberships {
        PortfolioMemberships(path: "/portfolio_memberships")
    }

    public struct PortfolioMemberships {
        /// Path: `/portfolio_memberships`
        public let path: String

        /// Get multiple portfolio memberships
        ///
        /// Returns a list of portfolio memberships in compact representation. You must specify `portfolio`, `portfolio` and `user`, or `workspace` and `user`.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.PortfolioMembershipCompact]?

            public init(data: [AsanaAPI.PortfolioMembershipCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.PortfolioMemberships {
    public func portfolioMembershipGid(_ portfolioMembershipGid: String) -> WithPortfolioMembershipGid {
        WithPortfolioMembershipGid(path: "\(path)/\(portfolioMembershipGid)")
    }

    public struct WithPortfolioMembershipGid {
        /// Path: `/portfolio_memberships/{portfolio_membership_gid}`
        public let path: String

        /// Get a portfolio membership
        ///
        /// Returns the complete portfolio record for a single portfolio membership.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: AsanaAPI.PortfolioMembershipCompact?

            public init(data: AsanaAPI.PortfolioMembershipCompact? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Portfolios.WithPortfolioGid {
    public var portfolioMemberships: PortfolioMemberships {
        PortfolioMemberships(path: path + "/portfolio_memberships")
    }

    public struct PortfolioMemberships {
        /// Path: `/portfolios/{portfolio_gid}/portfolio_memberships`
        public let path: String

        /// Get memberships from a portfolio
        ///
        /// Returns the compact portfolio membership records for the portfolio.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.PortfolioMembershipCompact]?

            public init(data: [AsanaAPI.PortfolioMembershipCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths {
    public static var portfolios: Portfolios {
        Portfolios(path: "/portfolios")
    }

    public struct Portfolios {
        /// Path: `/portfolios`
        public let path: String

        /// Get multiple portfolios
        ///
        /// Returns a list of the portfolios in compact representation that are owned by the current API user.
        public func get(parameters: GetParameters) -> Request<GetResponse> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.PortfolioCompact]?

            public init(data: [AsanaAPI.PortfolioCompact]? = nil) {
                self.data = data
            }
        }

        public struct GetParameters {
            public var limit: Int?
            public var offset: String?
            public var workspace: String
            public var owner: String

            public init(limit: Int? = nil, offset: String? = nil, workspace: String, owner: String) {
                self.limit = limit
                self.offset = offset
                self.workspace = workspace
                self.owner = owner
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("limit", limit)
                query.addQueryItem("offset", offset)
                query.addQueryItem("workspace", workspace)
                query.addQueryItem("owner", owner)
                return query
            }
        }

        /// Create a portfolio
        ///
        /// Creates a new portfolio in the given workspace with the supplied name.
        /// 
        /// Note that portfolios created in the Asana UI may have some state
        /// (like the “Priority” custom field) which is automatically added
        /// to the portfolio when it is created. Portfolios created via our
        /// API will *not* be created with the same initial state to allow
        /// integrations to create their own starting state on a portfolio.
        public func post(data: AsanaAPI.PortfolioRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.PortfolioResponse?

            public init(data: AsanaAPI.PortfolioResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Portfolios {
    public func portfolioGid(_ portfolioGid: String) -> WithPortfolioGid {
        WithPortfolioGid(path: "\(path)/\(portfolioGid)")
    }

    public struct WithPortfolioGid {
        /// Path: `/portfolios/{portfolio_gid}`
        public let path: String

        /// Get a portfolio
        ///
        /// Returns the complete portfolio record for a single portfolio.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: AsanaAPI.PortfolioResponse?

            public init(data: AsanaAPI.PortfolioResponse? = nil) {
                self.data = data
            }
        }

        /// Update a portfolio
        ///
        /// An existing portfolio can be updated by making a PUT request on the URL for
        /// that portfolio. Only the fields provided in the `data` block will be updated;
        /// any unspecified fields will remain unchanged.
        /// 
        /// Returns the complete updated portfolio record.
        public func put(data: AsanaAPI.PortfolioRequest? = nil) -> Request<PutResponse> {
            .put(path, body: ["data": data])
        }

        public struct PutResponse: Decodable {
            public var data: AsanaAPI.PortfolioResponse?

            public init(data: AsanaAPI.PortfolioResponse? = nil) {
                self.data = data
            }
        }

        /// Delete a portfolio
        ///
        /// An existing portfolio can be deleted by making a DELETE request on
        /// the URL for that portfolio.
        /// 
        /// Returns an empty data record.
        public var delete: Request<DeleteResponse> {
            .delete(path)
        }

        public struct DeleteResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Portfolios.WithPortfolioGid {
    public var items: Items {
        Items(path: path + "/items")
    }

    public struct Items {
        /// Path: `/portfolios/{portfolio_gid}/items`
        public let path: String

        /// Get portfolio items
        ///
        /// Get a list of the items in compact form in a portfolio.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.ProjectCompact]?

            public init(data: [AsanaAPI.ProjectCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Portfolios.WithPortfolioGid {
    public var addItem: AddItem {
        AddItem(path: path + "/addItem")
    }

    public struct AddItem {
        /// Path: `/portfolios/{portfolio_gid}/addItem`
        public let path: String

        /// Add a portfolio item
        ///
        /// Add an item to a portfolio.
        /// Returns an empty data block.
        public func post(data: AsanaAPI.PortfolioAddItemRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Portfolios.WithPortfolioGid {
    public var removeItem: RemoveItem {
        RemoveItem(path: path + "/removeItem")
    }

    public struct RemoveItem {
        /// Path: `/portfolios/{portfolio_gid}/removeItem`
        public let path: String

        /// Remove a portfolio item
        ///
        /// Remove an item from a portfolio.
        /// Returns an empty data block.
        public func post(data: AsanaAPI.PortfolioRemoveItemRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Portfolios.WithPortfolioGid {
    public var addCustomFieldSetting: AddCustomFieldSetting {
        AddCustomFieldSetting(path: path + "/addCustomFieldSetting")
    }

    public struct AddCustomFieldSetting {
        /// Path: `/portfolios/{portfolio_gid}/addCustomFieldSetting`
        public let path: String

        /// Add a custom field to a portfolio
        ///
        /// Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio.
        public func post(data: AsanaAPI.AddCustomFieldSettingRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Portfolios.WithPortfolioGid {
    public var removeCustomFieldSetting: RemoveCustomFieldSetting {
        RemoveCustomFieldSetting(path: path + "/removeCustomFieldSetting")
    }

    public struct RemoveCustomFieldSetting {
        /// Path: `/portfolios/{portfolio_gid}/removeCustomFieldSetting`
        public let path: String

        /// Remove a custom field from a portfolio
        ///
        /// Removes a custom field setting from a portfolio.
        public func post(data: AsanaAPI.RemoveCustomFieldSettingRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Portfolios.WithPortfolioGid {
    public var addMembers: AddMembers {
        AddMembers(path: path + "/addMembers")
    }

    public struct AddMembers {
        /// Path: `/portfolios/{portfolio_gid}/addMembers`
        public let path: String

        /// Add users to a portfolio
        ///
        /// Adds the specified list of users as members of the portfolio.
        /// Returns the updated portfolio record.
        public func post(data: AsanaAPI.AddMembersRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Portfolios.WithPortfolioGid {
    public var removeMembers: RemoveMembers {
        RemoveMembers(path: path + "/removeMembers")
    }

    public struct RemoveMembers {
        /// Path: `/portfolios/{portfolio_gid}/removeMembers`
        public let path: String

        /// Remove users from a portfolio
        ///
        /// Removes the specified list of users from members of the portfolio.
        /// Returns the updated portfolio record.
        public func post(data: AsanaAPI.RemoveMembersRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths {
    public static var projectMemberships: ProjectMemberships {
        ProjectMemberships(path: "/project_memberships")
    }

    public struct ProjectMemberships {
        /// Path: `/project_memberships`
        public let path: String
    }
}

extension Paths.ProjectMemberships {
    public func projectMembershipGid(_ projectMembershipGid: String) -> WithProjectMembershipGid {
        WithProjectMembershipGid(path: "\(path)/\(projectMembershipGid)")
    }

    public struct WithProjectMembershipGid {
        /// Path: `/project_memberships/{project_membership_gid}`
        public let path: String

        /// Get a project membership
        ///
        /// Returns the complete project record for a single project membership.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: AsanaAPI.ProjectMembershipResponse?

            public init(data: AsanaAPI.ProjectMembershipResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Projects.WithProjectGid {
    public var projectMemberships: ProjectMemberships {
        ProjectMemberships(path: path + "/project_memberships")
    }

    public struct ProjectMemberships {
        /// Path: `/projects/{project_gid}/project_memberships`
        public let path: String

        /// Get memberships from a project
        ///
        /// Returns the compact project membership records for the project.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.ProjectMembershipCompact]?

            public init(data: [AsanaAPI.ProjectMembershipCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths {
    public static var projectStatuses: ProjectStatuses {
        ProjectStatuses(path: "/project_statuses")
    }

    public struct ProjectStatuses {
        /// Path: `/project_statuses`
        public let path: String
    }
}

extension Paths.ProjectStatuses {
    public func projectStatusGid(_ projectStatusGid: String) -> WithProjectStatusGid {
        WithProjectStatusGid(path: "\(path)/\(projectStatusGid)")
    }

    public struct WithProjectStatusGid {
        /// Path: `/project_statuses/{project_status_gid}`
        public let path: String

        /// Get a project status
        ///
        /// Returns the complete record for a single status update.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: AsanaAPI.ProjectStatusResponse?

            public init(data: AsanaAPI.ProjectStatusResponse? = nil) {
                self.data = data
            }
        }

        /// Delete a project status
        ///
        /// Deletes a specific, existing project status update.
        /// 
        /// Returns an empty data record.
        public var delete: Request<DeleteResponse> {
            .delete(path)
        }

        public struct DeleteResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Projects.WithProjectGid {
    public var projectStatuses: ProjectStatuses {
        ProjectStatuses(path: path + "/project_statuses")
    }

    public struct ProjectStatuses {
        /// Path: `/projects/{project_gid}/project_statuses`
        public let path: String

        /// Get statuses from a project
        ///
        /// Returns the compact project status update records for all updates on the project.
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.ProjectStatusCompact]?

            public init(data: [AsanaAPI.ProjectStatusCompact]? = nil) {
                self.data = data
            }
        }

        public struct GetParameters {
            public var isOptPretty: Bool?
            public var optFields: [String]?
            public var limit: Int?
            public var offset: String?

            public init(isOptPretty: Bool? = nil, optFields: [String]? = nil, limit: Int? = nil, offset: String? = nil) {
                self.isOptPretty = isOptPretty
                self.optFields = optFields
                self.limit = limit
                self.offset = offset
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("opt_pretty", isOptPretty)
                query.addQueryItem("opt_fields", optFields?.map(\.asQueryValue).joined(separator: ","))
                query.addQueryItem("limit", limit)
                query.addQueryItem("offset", offset)
                return query
            }
        }

        /// Create a project status
        ///
        /// Creates a new status update on the project.
        /// Returns the full record of the newly created project status update.
        public func post(data: AsanaAPI.ProjectStatusBase? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.ProjectStatusResponse?

            public init(data: AsanaAPI.ProjectStatusResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths {
    public static var projects: Projects {
        Projects(path: "/projects")
    }

    public struct Projects {
        /// Path: `/projects`
        public let path: String

        /// Get multiple projects
        ///
        /// Returns the compact project records for some filtered set of projects. Use one or more of the parameters provided to filter the projects returned.
        /// *Note: This endpoint may timeout for large domains. Try filtering by team!*
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.ProjectCompact]?

            public init(data: [AsanaAPI.ProjectCompact]? = nil) {
                self.data = data
            }
        }

        public struct GetParameters {
            public var limit: Int?
            public var offset: String?
            public var workspace: String?
            public var team: String?
            public var isArchived: Bool?

            public init(limit: Int? = nil, offset: String? = nil, workspace: String? = nil, team: String? = nil, isArchived: Bool? = nil) {
                self.limit = limit
                self.offset = offset
                self.workspace = workspace
                self.team = team
                self.isArchived = isArchived
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("limit", limit)
                query.addQueryItem("offset", offset)
                query.addQueryItem("workspace", workspace)
                query.addQueryItem("team", team)
                query.addQueryItem("archived", isArchived)
                return query
            }
        }

        /// Create a project
        ///
        /// Create a new project in a workspace or team.
        /// 
        /// Every project is required to be created in a specific workspace or
        /// organization, and this cannot be changed once set. Note that you can use
        /// the `workspace` parameter regardless of whether or not it is an
        /// organization.
        /// 
        /// If the workspace for your project is an organization, you must also
        /// supply a `team` to share the project with.
        /// 
        /// Returns the full record of the newly created project.
        public func post(data: AsanaAPI.ProjectRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.ProjectResponse?

            public init(data: AsanaAPI.ProjectResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Projects {
    public func projectGid(_ projectGid: String) -> WithProjectGid {
        WithProjectGid(path: "\(path)/\(projectGid)")
    }

    public struct WithProjectGid {
        /// Path: `/projects/{project_gid}`
        public let path: String

        /// Get a project
        ///
        /// Returns the complete project record for a single project.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: AsanaAPI.ProjectResponse?

            public init(data: AsanaAPI.ProjectResponse? = nil) {
                self.data = data
            }
        }

        /// Update a project
        ///
        /// A specific, existing project can be updated by making a PUT request on
        /// the URL for that project. Only the fields provided in the `data` block
        /// will be updated; any unspecified fields will remain unchanged.
        /// 
        /// When using this method, it is best to specify only those fields you wish
        /// to change, or else you may overwrite changes made by another user since
        /// you last retrieved the task.
        /// 
        /// Returns the complete updated project record.
        public func put(data: AsanaAPI.ProjectRequest? = nil) -> Request<PutResponse> {
            .put(path, body: ["data": data])
        }

        public struct PutResponse: Decodable {
            public var data: AsanaAPI.ProjectResponse?

            public init(data: AsanaAPI.ProjectResponse? = nil) {
                self.data = data
            }
        }

        /// Delete a project
        ///
        /// A specific, existing project can be deleted by making a DELETE request on
        /// the URL for that project.
        /// 
        /// Returns an empty data record.
        public var delete: Request<DeleteResponse> {
            .delete(path)
        }

        public struct DeleteResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Projects.WithProjectGid {
    public var duplicate: Duplicate {
        Duplicate(path: path + "/duplicate")
    }

    public struct Duplicate {
        /// Path: `/projects/{project_gid}/duplicate`
        public let path: String

        /// Duplicate a project
        ///
        /// Creates and returns a job that will asynchronously handle the duplication.
        public func post(data: AsanaAPI.ProjectDuplicateRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.JobCompact?

            public init(data: AsanaAPI.JobCompact? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Tasks.WithTaskGid {
    public var projects: Projects {
        Projects(path: path + "/projects")
    }

    public struct Projects {
        /// Path: `/tasks/{task_gid}/projects`
        public let path: String

        /// Get projects a task is in
        ///
        /// Returns a compact representation of all of the projects the task is in.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.ProjectCompact]?

            public init(data: [AsanaAPI.ProjectCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Teams.WithTeamGid {
    public var projects: Projects {
        Projects(path: path + "/projects")
    }

    public struct Projects {
        /// Path: `/teams/{team_gid}/projects`
        public let path: String

        /// Get a team's projects
        ///
        /// Returns the compact project records for all projects in the team.
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.ProjectCompact]?

            public init(data: [AsanaAPI.ProjectCompact]? = nil) {
                self.data = data
            }
        }

        public struct GetParameters {
            public var limit: Int?
            public var offset: String?
            public var isArchived: Bool?

            public init(limit: Int? = nil, offset: String? = nil, isArchived: Bool? = nil) {
                self.limit = limit
                self.offset = offset
                self.isArchived = isArchived
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("limit", limit)
                query.addQueryItem("offset", offset)
                query.addQueryItem("archived", isArchived)
                return query
            }
        }

        /// Create a project in a team
        ///
        /// Creates a project shared with the given team.
        /// 
        /// Returns the full record of the newly created project.
        public func post(data: AsanaAPI.ProjectRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.ProjectResponse?

            public init(data: AsanaAPI.ProjectResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Workspaces.WithWorkspaceGid {
    public var projects: Projects {
        Projects(path: path + "/projects")
    }

    public struct Projects {
        /// Path: `/workspaces/{workspace_gid}/projects`
        public let path: String

        /// Get all projects in a workspace
        ///
        /// Returns the compact project records for all projects in the workspace.
        /// *Note: This endpoint may timeout for large domains. Prefer the `/teams/{team_gid}/projects` endpoint.*
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.ProjectCompact]?

            public init(data: [AsanaAPI.ProjectCompact]? = nil) {
                self.data = data
            }
        }

        public struct GetParameters {
            public var limit: Int?
            public var offset: String?
            public var isArchived: Bool?

            public init(limit: Int? = nil, offset: String? = nil, isArchived: Bool? = nil) {
                self.limit = limit
                self.offset = offset
                self.isArchived = isArchived
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("limit", limit)
                query.addQueryItem("offset", offset)
                query.addQueryItem("archived", isArchived)
                return query
            }
        }

        /// Create a project in a workspace
        ///
        /// Returns the compact project records for all projects in the workspace.
        /// 
        /// If the workspace for your project is an organization, you must also
        /// supply a team to share the project with.
        /// 
        /// Returns the full record of the newly created project.
        public func post(data: AsanaAPI.ProjectRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.ProjectResponse?

            public init(data: AsanaAPI.ProjectResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Projects.WithProjectGid {
    public var addCustomFieldSetting: AddCustomFieldSetting {
        AddCustomFieldSetting(path: path + "/addCustomFieldSetting")
    }

    public struct AddCustomFieldSetting {
        /// Path: `/projects/{project_gid}/addCustomFieldSetting`
        public let path: String

        /// Add a custom field to a project
        ///
        /// Custom fields are associated with projects by way of custom field settings.  This method creates a setting for the project.
        public func post(data: AsanaAPI.AddCustomFieldSettingRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.CustomFieldSettingResponse?

            public init(data: AsanaAPI.CustomFieldSettingResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Projects.WithProjectGid {
    public var removeCustomFieldSetting: RemoveCustomFieldSetting {
        RemoveCustomFieldSetting(path: path + "/removeCustomFieldSetting")
    }

    public struct RemoveCustomFieldSetting {
        /// Path: `/projects/{project_gid}/removeCustomFieldSetting`
        public let path: String

        /// Remove a custom field from a project
        ///
        /// Removes a custom field setting from a project.
        public func post(data: AsanaAPI.RemoveCustomFieldSettingRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Projects.WithProjectGid {
    public var taskCounts: TaskCounts {
        TaskCounts(path: path + "/task_counts")
    }

    public struct TaskCounts {
        /// Path: `/projects/{project_gid}/task_counts`
        public let path: String

        /// Get task count of a project
        ///
        /// Get an object that holds task count fields. **All fields are excluded by default**. You must [opt in](/docs/input-output-options) using `opt_fields` to get any information from this endpoint.
        /// 
        /// This endpoint has an additional [rate limit](/docs/standard-rate-limits) and each field counts especially high against our [cost limits](/docs/cost-limits).
        /// 
        /// Milestones are just tasks, so they are included in the `num_tasks`, `num_incomplete_tasks`, and `num_completed_tasks` counts.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            /// A response object returned from the task count endpoint.
            public var data: AsanaAPI.TaskCountResponse?

            public init(data: AsanaAPI.TaskCountResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Projects.WithProjectGid {
    public var addMembers: AddMembers {
        AddMembers(path: path + "/addMembers")
    }

    public struct AddMembers {
        /// Path: `/projects/{project_gid}/addMembers`
        public let path: String

        /// Add users to a project
        ///
        /// Adds the specified list of users as members of the project. Note that a user being added as a member may also be added as a *follower* as a result of this operation. This is because the user's default notification settings (i.e., in the "Notifcations" tab of "My Profile Settings") will override this endpoint's default behavior of setting "Tasks added" notifications to `false`.
        /// Returns the updated project record.
        public func post(data: AsanaAPI.AddMembersRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Projects.WithProjectGid {
    public var removeMembers: RemoveMembers {
        RemoveMembers(path: path + "/removeMembers")
    }

    public struct RemoveMembers {
        /// Path: `/projects/{project_gid}/removeMembers`
        public let path: String

        /// Remove users from a project
        ///
        /// Removes the specified list of users from members of the project.
        /// Returns the updated project record.
        public func post(data: AsanaAPI.RemoveMembersRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Projects.WithProjectGid {
    public var addFollowers: AddFollowers {
        AddFollowers(path: path + "/addFollowers")
    }

    public struct AddFollowers {
        /// Path: `/projects/{project_gid}/addFollowers`
        public let path: String

        /// Add followers to a project
        ///
        /// Adds the specified list of users as followers to the project. Followers are a subset of members who have opted in to receive "tasks added"  notifications for a project. Therefore, if the users are not already members of the project, they will also become members as a result of this operation.
        /// Returns the updated project record.
        public func post(data: AsanaAPI.AddFollowersRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Projects.WithProjectGid {
    public var removeFollowers: RemoveFollowers {
        RemoveFollowers(path: path + "/removeFollowers")
    }

    public struct RemoveFollowers {
        /// Path: `/projects/{project_gid}/removeFollowers`
        public let path: String

        /// Remove followers from a project
        ///
        /// Removes the specified list of users from following the project, this will not affect project membership status.
        /// Returns the updated project record.
        public func post(data: AsanaAPI.RemoveFollowersRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths {
    public static var sections: Sections {
        Sections(path: "/sections")
    }

    public struct Sections {
        /// Path: `/sections`
        public let path: String
    }
}

extension Paths.Sections {
    public func sectionGid(_ sectionGid: String) -> WithSectionGid {
        WithSectionGid(path: "\(path)/\(sectionGid)")
    }

    public struct WithSectionGid {
        /// Path: `/sections/{section_gid}`
        public let path: String

        /// Get a section
        ///
        /// Returns the complete record for a single section.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: AsanaAPI.SectionResponse?

            public init(data: AsanaAPI.SectionResponse? = nil) {
                self.data = data
            }
        }

        /// Update a section
        ///
        /// A specific, existing section can be updated by making a PUT request on
        /// the URL for that project. Only the fields provided in the `data` block
        /// will be updated; any unspecified fields will remain unchanged. (note that
        /// at this time, the only field that can be updated is the `name` field.)
        /// 
        /// When using this method, it is best to specify only those fields you wish
        /// to change, or else you may overwrite changes made by another user since
        /// you last retrieved the task.
        /// 
        /// Returns the complete updated section record.
        public func put(data: AsanaAPI.SectionRequest? = nil) -> Request<PutResponse> {
            .put(path, body: ["data": data])
        }

        public struct PutResponse: Decodable {
            public var data: AsanaAPI.SectionResponse?

            public init(data: AsanaAPI.SectionResponse? = nil) {
                self.data = data
            }
        }

        /// Delete a section
        ///
        /// A specific, existing section can be deleted by making a DELETE request on
        /// the URL for that section.
        /// 
        /// Note that sections must be empty to be deleted.
        /// 
        /// The last remaining section cannot be deleted.
        /// 
        /// Returns an empty data block.
        public var delete: Request<DeleteResponse> {
            .delete(path)
        }

        public struct DeleteResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Projects.WithProjectGid {
    public var sections: Sections {
        Sections(path: path + "/sections")
    }

    public struct Sections {
        /// Path: `/projects/{project_gid}/sections`
        public let path: String

        /// Get sections in a project
        ///
        /// Returns the compact records for all sections in the specified project.
        public func get(limit: Int? = nil, offset: String? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(limit, offset))
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.SectionCompact]?

            public init(data: [AsanaAPI.SectionCompact]? = nil) {
                self.data = data
            }
        }

        private func makeGetQuery(_ limit: Int?, _ offset: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("limit", limit)
            query.addQueryItem("offset", offset)
            return query
        }

        /// Create a section in a project
        ///
        /// Creates a new section in a project.
        /// Returns the full record of the newly created section.
        public func post(data: AsanaAPI.SectionRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.SectionResponse?

            public init(data: AsanaAPI.SectionResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Sections.WithSectionGid {
    public var addTask: AddTask {
        AddTask(path: path + "/addTask")
    }

    public struct AddTask {
        /// Path: `/sections/{section_gid}/addTask`
        public let path: String

        /// Add task to section
        ///
        /// Add a task to a specific, existing section. This will remove the task from other sections of the project.
        /// 
        /// The task will be inserted at the top of a section unless an insert_before or insert_after parameter is declared.
        /// 
        /// This does not work for separators (tasks with the resource_subtype of section).
        public func post(data: AsanaAPI.SectionTaskInsertRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Projects.WithProjectGid.Sections {
    public var insert: Insert {
        Insert(path: path + "/insert")
    }

    public struct Insert {
        /// Path: `/projects/{project_gid}/sections/insert`
        public let path: String

        /// Move or Insert sections
        ///
        /// Move sections relative to each other. One of
        /// `before_section` or `after_section` is required.
        /// 
        /// Sections cannot be moved between projects.
        /// 
        /// Returns an empty data block.
        public func post(data: AsanaAPI.ProjectSectionInsertRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths {
    public static var stories: Stories {
        Stories(path: "/stories")
    }

    public struct Stories {
        /// Path: `/stories`
        public let path: String
    }
}

extension Paths.Stories {
    public func storyGid(_ storyGid: String) -> WithStoryGid {
        WithStoryGid(path: "\(path)/\(storyGid)")
    }

    public struct WithStoryGid {
        /// Path: `/stories/{story_gid}`
        public let path: String

        /// Get a story
        ///
        /// Returns the full record for a single story.
        public func get(limit: Int? = nil, offset: String? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(limit, offset))
        }

        public struct GetResponse: Decodable {
            public var data: AsanaAPI.StoryResponse?

            public init(data: AsanaAPI.StoryResponse? = nil) {
                self.data = data
            }
        }

        private func makeGetQuery(_ limit: Int?, _ offset: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("limit", limit)
            query.addQueryItem("offset", offset)
            return query
        }

        /// Update a story
        ///
        /// Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of `text` and `html_text` can be specified.
        public func put(data: AsanaAPI.StoryBase? = nil) -> Request<PutResponse> {
            .put(path, body: ["data": data])
        }

        public struct PutResponse: Decodable {
            public var data: AsanaAPI.StoryResponse?

            public init(data: AsanaAPI.StoryResponse? = nil) {
                self.data = data
            }
        }

        /// Delete a story
        ///
        /// Deletes a story. A user can only delete stories they have created.
        /// 
        /// Returns an empty data record.
        public var delete: Request<DeleteResponse> {
            .delete(path)
        }

        public struct DeleteResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Tasks.WithTaskGid {
    public var stories: Stories {
        Stories(path: path + "/stories")
    }

    public struct Stories {
        /// Path: `/tasks/{task_gid}/stories`
        public let path: String

        /// Get stories from a task
        ///
        /// Returns the compact records for all stories on the task.
        public func get(limit: Int? = nil, offset: String? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(limit, offset))
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.StoryCompact]?

            public init(data: [AsanaAPI.StoryCompact]? = nil) {
                self.data = data
            }
        }

        private func makeGetQuery(_ limit: Int?, _ offset: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("limit", limit)
            query.addQueryItem("offset", offset)
            return query
        }

        /// Create a story on a task
        ///
        /// Adds a story to a task. This endpoint currently only allows for comment
        /// stories to be created. The comment will be authored by the currently
        /// authenticated user, and timestamped when the server receives the request.
        /// 
        /// Returns the full record for the new story added to the task.
        public func post(data: AsanaAPI.StoryBase? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.StoryResponse?

            public init(data: AsanaAPI.StoryResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths {
    public static var tags: Tags {
        Tags(path: "/tags")
    }

    public struct Tags {
        /// Path: `/tags`
        public let path: String

        /// Get multiple tags
        ///
        /// Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned.
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.TagCompact]?

            public init(data: [AsanaAPI.TagCompact]? = nil) {
                self.data = data
            }
        }

        public struct GetParameters {
            public var limit: Int?
            public var offset: String?
            public var workspace: String?

            public init(limit: Int? = nil, offset: String? = nil, workspace: String? = nil) {
                self.limit = limit
                self.offset = offset
                self.workspace = workspace
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("limit", limit)
                query.addQueryItem("offset", offset)
                query.addQueryItem("workspace", workspace)
                return query
            }
        }

        /// Create a tag
        ///
        /// Creates a new tag in a workspace or organization.
        /// 
        /// Every tag is required to be created in a specific workspace or
        /// organization, and this cannot be changed once set. Note that you can use
        /// the workspace parameter regardless of whether or not it is an
        /// organization.
        /// 
        /// Returns the full record of the newly created tag.
        public func post(data: AsanaAPI.TagRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.TagResponse?

            public init(data: AsanaAPI.TagResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Tags {
    public func tagGid(_ tagGid: String) -> WithTagGid {
        WithTagGid(path: "\(path)/\(tagGid)")
    }

    public struct WithTagGid {
        /// Path: `/tags/{tag_gid}`
        public let path: String

        /// Get a tag
        ///
        /// Returns the complete tag record for a single tag.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: AsanaAPI.TagResponse?

            public init(data: AsanaAPI.TagResponse? = nil) {
                self.data = data
            }
        }

        /// Update a tag
        ///
        /// Updates the properties of a tag. Only the fields provided in the `data`
        /// block will be updated; any unspecified fields will remain unchanged.
        /// 
        /// When using this method, it is best to specify only those fields you wish
        /// to change, or else you may overwrite changes made by another user since
        /// you last retrieved the tag.
        /// 
        /// Returns the complete updated tag record.
        public var put: Request<PutResponse> {
            .put(path)
        }

        public struct PutResponse: Decodable {
            public var data: AsanaAPI.TagResponse?

            public init(data: AsanaAPI.TagResponse? = nil) {
                self.data = data
            }
        }

        /// Delete a tag
        ///
        /// A specific, existing tag can be deleted by making a DELETE request on
        /// the URL for that tag.
        /// 
        /// Returns an empty data record.
        public var delete: Request<DeleteResponse> {
            .delete(path)
        }

        public struct DeleteResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Tasks.WithTaskGid {
    public var tags: Tags {
        Tags(path: path + "/tags")
    }

    public struct Tags {
        /// Path: `/tasks/{task_gid}/tags`
        public let path: String

        /// Get a task's tags
        ///
        /// Get a compact representation of all of the tags the task has.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.TagCompact]?

            public init(data: [AsanaAPI.TagCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Workspaces.WithWorkspaceGid {
    public var tags: Tags {
        Tags(path: path + "/tags")
    }

    public struct Tags {
        /// Path: `/workspaces/{workspace_gid}/tags`
        public let path: String

        /// Get tags in a workspace
        ///
        /// Returns the compact tag records for some filtered set of tags. Use one or more of the parameters provided to filter the tags returned.
        public func get(limit: Int? = nil, offset: String? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(limit, offset))
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.TagCompact]?

            public init(data: [AsanaAPI.TagCompact]? = nil) {
                self.data = data
            }
        }

        private func makeGetQuery(_ limit: Int?, _ offset: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("limit", limit)
            query.addQueryItem("offset", offset)
            return query
        }

        /// Create a tag in a workspace
        ///
        /// Creates a new tag in a workspace or organization.
        /// 
        /// Every tag is required to be created in a specific workspace or
        /// organization, and this cannot be changed once set. Note that you can use
        /// the workspace parameter regardless of whether or not it is an
        /// organization.
        /// 
        /// Returns the full record of the newly created tag.
        public func post(data: AsanaAPI.TagResponse? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.TagResponse?

            public init(data: AsanaAPI.TagResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths {
    public static var tasks: Tasks {
        Tasks(path: "/tasks")
    }

    public struct Tasks {
        /// Path: `/tasks`
        public let path: String

        /// Get multiple tasks
        ///
        /// Returns the compact task records for some filtered set of tasks. Use one or more of the parameters provided to filter the tasks returned. You must specify a `project` or `tag` if you do not specify `assignee` and `workspace`.
        /// 
        /// For more complex task retrieval, use [workspaces/{workspace_gid}/tasks/search](/docs/search-tasks-in-a-workspace).
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.TaskCompact]?

            public init(data: [AsanaAPI.TaskCompact]? = nil) {
                self.data = data
            }
        }

        public struct GetParameters {
            public var limit: Int?
            public var offset: String?
            public var assignee: String?
            public var project: String?
            public var section: String?
            public var workspace: String?
            /// Example: "2012-02-22T02:06:58.158Z"
            public var completedSince: Date?
            public var modifiedSince: Date?

            public init(limit: Int? = nil, offset: String? = nil, assignee: String? = nil, project: String? = nil, section: String? = nil, workspace: String? = nil, completedSince: Date? = nil, modifiedSince: Date? = nil) {
                self.limit = limit
                self.offset = offset
                self.assignee = assignee
                self.project = project
                self.section = section
                self.workspace = workspace
                self.completedSince = completedSince
                self.modifiedSince = modifiedSince
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("limit", limit)
                query.addQueryItem("offset", offset)
                query.addQueryItem("assignee", assignee)
                query.addQueryItem("project", project)
                query.addQueryItem("section", section)
                query.addQueryItem("workspace", workspace)
                query.addQueryItem("completed_since", completedSince)
                query.addQueryItem("modified_since", modifiedSince)
                return query
            }
        }

        /// Create a task
        ///
        /// Creating a new task is as easy as POSTing to the `/tasks` endpoint with a
        /// data block containing the fields you’d like to set on the task. Any
        /// unspecified fields will take on default values.
        /// 
        /// Every task is required to be created in a specific workspace, and this
        /// workspace cannot be changed once set. The workspace need not be set
        /// explicitly if you specify `projects` or a `parent` task instead.
        public func post(data: AsanaAPI.TaskRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.TaskResponse?

            public init(data: AsanaAPI.TaskResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Tasks {
    public func taskGid(_ taskGid: String) -> WithTaskGid {
        WithTaskGid(path: "\(path)/\(taskGid)")
    }

    public struct WithTaskGid {
        /// Path: `/tasks/{task_gid}`
        public let path: String

        /// Get a task
        ///
        /// Returns the complete task record for a single task.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: AsanaAPI.TaskResponse?

            public init(data: AsanaAPI.TaskResponse? = nil) {
                self.data = data
            }
        }

        /// Update a task
        ///
        /// A specific, existing task can be updated by making a PUT request on the
        /// URL for that task. Only the fields provided in the `data` block will be
        /// updated; any unspecified fields will remain unchanged.
        /// 
        /// When using this method, it is best to specify only those fields you wish
        /// to change, or else you may overwrite changes made by another user since
        /// you last retrieved the task.
        /// 
        /// Returns the complete updated task record.
        public func put(data: AsanaAPI.TaskRequest? = nil) -> Request<PutResponse> {
            .put(path, body: ["data": data])
        }

        public struct PutResponse: Decodable {
            public var data: AsanaAPI.TaskResponse?

            public init(data: AsanaAPI.TaskResponse? = nil) {
                self.data = data
            }
        }

        /// Delete a task
        ///
        /// A specific, existing task can be deleted by making a DELETE request on
        /// the URL for that task. Deleted tasks go into the “trash” of the user
        /// making the delete request. Tasks can be recovered from the trash within a
        /// period of 30 days; afterward they are completely removed from the system.
        /// 
        /// Returns an empty data record.
        public var delete: Request<DeleteResponse> {
            .delete(path)
        }

        public struct DeleteResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Tasks.WithTaskGid {
    public var duplicate: Duplicate {
        Duplicate(path: path + "/duplicate")
    }

    public struct Duplicate {
        /// Path: `/tasks/{task_gid}/duplicate`
        public let path: String

        /// Duplicate a task
        ///
        /// Creates and returns a job that will asynchronously handle the duplication.
        public func post(data: AsanaAPI.TaskDuplicateRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.JobCompact?

            public init(data: AsanaAPI.JobCompact? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Projects.WithProjectGid {
    public var tasks: Tasks {
        Tasks(path: path + "/tasks")
    }

    public struct Tasks {
        /// Path: `/projects/{project_gid}/tasks`
        public let path: String

        /// Get tasks from a project
        ///
        /// Returns the compact task records for all tasks within the given project, ordered by their priority within the project. Tasks can exist in more than one project at a time.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.TaskCompact]?

            public init(data: [AsanaAPI.TaskCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Sections.WithSectionGid {
    public var tasks: Tasks {
        Tasks(path: path + "/tasks")
    }

    public struct Tasks {
        /// Path: `/sections/{section_gid}/tasks`
        public let path: String

        /// Get tasks from a section
        ///
        /// *Board view only*: Returns the compact section records for all tasks within the given section.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.TaskCompact]?

            public init(data: [AsanaAPI.TaskCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Tags.WithTagGid {
    public var tasks: Tasks {
        Tasks(path: path + "/tasks")
    }

    public struct Tasks {
        /// Path: `/tags/{tag_gid}/tasks`
        public let path: String

        /// Get tasks from a tag
        ///
        /// Returns the compact task records for all tasks with the given tag. Tasks can have more than one tag at a time.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.TaskCompact]?

            public init(data: [AsanaAPI.TaskCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths {
    public static var userTaskLists: UserTaskLists {
        UserTaskLists(path: "/user_task_lists")
    }

    public struct UserTaskLists {
        /// Path: `/user_task_lists`
        public let path: String
    }
}

extension Paths.UserTaskLists.WithUserTaskListGid {
    public var tasks: Tasks {
        Tasks(path: path + "/tasks")
    }

    public struct Tasks {
        /// Path: `/user_task_lists/{user_task_list_gid}/tasks`
        public let path: String

        /// Get tasks from a user task list
        ///
        /// Returns the compact list of tasks in a user’s My Tasks list.
        /// *Note: Access control is enforced for this endpoint as with all Asana API endpoints, meaning a user’s private tasks will be filtered out if the API-authenticated user does not have access to them.*
        /// *Note: Both complete and incomplete tasks are returned by default unless they are filtered out (for example, setting `completed_since=now` will return only incomplete tasks, which is the default view for “My Tasks” in Asana.)*
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.TaskCompact]?

            public init(data: [AsanaAPI.TaskCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Tasks.WithTaskGid {
    public var subtasks: Subtasks {
        Subtasks(path: path + "/subtasks")
    }

    public struct Subtasks {
        /// Path: `/tasks/{task_gid}/subtasks`
        public let path: String

        /// Get subtasks from a task
        ///
        /// Returns a compact representation of all of the subtasks of a task.
        public func get(limit: Int? = nil, offset: String? = nil) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(limit, offset))
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.TaskCompact]?

            public init(data: [AsanaAPI.TaskCompact]? = nil) {
                self.data = data
            }
        }

        private func makeGetQuery(_ limit: Int?, _ offset: String?) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("limit", limit)
            query.addQueryItem("offset", offset)
            return query
        }

        /// Create a subtask
        ///
        /// Creates a new subtask and adds it to the parent task. Returns the full record for the newly created subtask.
        public func post(data: AsanaAPI.TaskRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.TaskResponse?

            public init(data: AsanaAPI.TaskResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Tasks.WithTaskGid {
    public var setParent: SetParent {
        SetParent(path: path + "/setParent")
    }

    public struct SetParent {
        /// Path: `/tasks/{task_gid}/setParent`
        public let path: String

        /// Set the parent of a task
        ///
        /// Parent, or no parent task at all. Returns an empty data block. When using `insert_before` and `insert_after`, at most one of those two options can be specified, and they must already be subtasks of the parent.
        public func post(data: AsanaAPI.TaskSetParentRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.TaskResponse?

            public init(data: AsanaAPI.TaskResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Tasks.WithTaskGid {
    public var dependencies: Dependencies {
        Dependencies(path: path + "/dependencies")
    }

    public struct Dependencies {
        /// Path: `/tasks/{task_gid}/dependencies`
        public let path: String

        /// Get dependencies from a task
        ///
        /// Returns the compact representations of all of the dependencies of a task.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.TaskCompact]?

            public init(data: [AsanaAPI.TaskCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Tasks.WithTaskGid {
    public var addDependencies: AddDependencies {
        AddDependencies(path: path + "/addDependencies")
    }

    public struct AddDependencies {
        /// Path: `/tasks/{task_gid}/addDependencies`
        public let path: String

        /// Set dependencies for a task
        ///
        /// Marks a set of tasks as dependencies of this task, if they are not already dependencies. *A task can have at most 15 dependencies*.
        public func post(data: AsanaAPI.ModifyDependenciesRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Tasks.WithTaskGid {
    public var removeDependencies: RemoveDependencies {
        RemoveDependencies(path: path + "/removeDependencies")
    }

    public struct RemoveDependencies {
        /// Path: `/tasks/{task_gid}/removeDependencies`
        public let path: String

        /// Unlink dependencies from a task
        ///
        /// Unlinks a set of dependencies from this task.
        public func post(data: AsanaAPI.ModifyDependenciesRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: [[String: AnyJSON]]?

            public init(data: [[String: AnyJSON]]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Tasks.WithTaskGid {
    public var dependents: Dependents {
        Dependents(path: path + "/dependents")
    }

    public struct Dependents {
        /// Path: `/tasks/{task_gid}/dependents`
        public let path: String

        /// Get dependents from a task
        ///
        /// Returns the compact representations of all of the dependents of a task.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.TaskCompact]?

            public init(data: [AsanaAPI.TaskCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Tasks.WithTaskGid {
    public var addDependents: AddDependents {
        AddDependents(path: path + "/addDependents")
    }

    public struct AddDependents {
        /// Path: `/tasks/{task_gid}/addDependents`
        public let path: String

        /// Set dependents for a task
        ///
        /// Marks a set of tasks as dependents of this task, if they are not already dependents. *A task can have at most 30 dependents*.
        public func post(data: AsanaAPI.ModifyDependentsRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: [AsanaAPI.TaskCompact]?

            public init(data: [AsanaAPI.TaskCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Tasks.WithTaskGid {
    public var removeDependents: RemoveDependents {
        RemoveDependents(path: path + "/removeDependents")
    }

    public struct RemoveDependents {
        /// Path: `/tasks/{task_gid}/removeDependents`
        public let path: String

        /// Unlink dependents from a task
        ///
        /// Unlinks a set of dependents from this task.
        public func post(data: AsanaAPI.ModifyDependentsRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: [[String: AnyJSON]]?

            public init(data: [[String: AnyJSON]]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Tasks.WithTaskGid {
    public var addProject: AddProject {
        AddProject(path: path + "/addProject")
    }

    public struct AddProject {
        /// Path: `/tasks/{task_gid}/addProject`
        public let path: String

        /// Add a project to a task
        ///
        /// Adds the task to the specified project, in the optional location
        /// specified. If no location arguments are given, the task will be added to
        /// the end of the project.
        /// 
        /// `addProject` can also be used to reorder a task within a project or
        /// section that already contains it.
        /// 
        /// At most one of `insert_before`, `insert_after`, or `section` should be
        /// specified. Inserting into a section in an non-order-dependent way can be
        /// done by specifying section, otherwise, to insert within a section in a
        /// particular place, specify `insert_before` or `insert_after` and a task
        /// within the section to anchor the position of this task.
        /// 
        /// Returns an empty data block.
        public func post(data: AsanaAPI.TaskAddProjectRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Tasks.WithTaskGid {
    public var removeProject: RemoveProject {
        RemoveProject(path: path + "/removeProject")
    }

    public struct RemoveProject {
        /// Path: `/tasks/{task_gid}/removeProject`
        public let path: String

        /// Remove a project from a task
        ///
        /// Removes the task from the specified project. The task will still exist in
        /// the system, but it will not be in the project anymore.
        /// 
        /// Returns an empty data block.
        public func post(data: AsanaAPI.TaskRemoveProjectRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Tasks.WithTaskGid {
    public var addTag: AddTag {
        AddTag(path: path + "/addTag")
    }

    public struct AddTag {
        /// Path: `/tasks/{task_gid}/addTag`
        public let path: String

        /// Add a tag to a task
        ///
        /// Adds a tag to a task. Returns an empty data block.
        public func post(data: AsanaAPI.TaskAddTagRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Tasks.WithTaskGid {
    public var removeTag: RemoveTag {
        RemoveTag(path: path + "/removeTag")
    }

    public struct RemoveTag {
        /// Path: `/tasks/{task_gid}/removeTag`
        public let path: String

        /// Remove a tag from a task
        ///
        /// Removes a tag from a task. Returns an empty data block.
        public func post(data: AsanaAPI.TaskRemoveTagRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Tasks.WithTaskGid {
    public var addFollowers: AddFollowers {
        AddFollowers(path: path + "/addFollowers")
    }

    public struct AddFollowers {
        /// Path: `/tasks/{task_gid}/addFollowers`
        public let path: String

        /// Add followers to a task
        ///
        /// Adds followers to a task. Returns an empty data block.
        /// Each task can be associated with zero or more followers in the system.
        /// Requests to add/remove followers, if successful, will return the complete updated task record, described above.
        public func post(data: AsanaAPI.TaskAddFollowersRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Tasks.WithTaskGid {
    public var removeFollowers: RemoveFollowers {
        RemoveFollowers(path: path + "/removeFollowers")
    }

    public struct RemoveFollowers {
        /// Path: `/tasks/{task_gid}/removeFollowers`
        public let path: String

        /// Remove followers from a task
        ///
        /// Removes each of the specified followers from the task if they are following. Returns the complete, updated record for the affected task.
        public func post(data: AsanaAPI.TaskRemoveFollowersRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Workspaces.WithWorkspaceGid {
    public var tasks: Tasks {
        Tasks(path: path + "/tasks")
    }

    public struct Tasks {
        /// Path: `/workspaces/{workspace_gid}/tasks`
        public let path: String
    }
}

extension Paths.Workspaces.WithWorkspaceGid.Tasks {
    public var search: Search {
        Search(path: path + "/search")
    }

    public struct Search {
        /// Path: `/workspaces/{workspace_gid}/tasks/search`
        public let path: String

        /// Search tasks in a workspace
        ///
        /// To mirror the functionality of the Asana web app's advanced search feature, the Asana API has a task search endpoint that allows you to build complex filters to find and retrieve the exact data you need.
        /// #### Premium access
        /// Like the Asana web product's advance search feature, this search endpoint will only be available to premium Asana users. A user is premium if any of the following is true:
        /// 
        /// - The workspace in which the search is being performed is a premium workspace - The user is a member of a premium team inside the workspace
        /// 
        /// Even if a user is only a member of a premium team inside a non-premium workspace, search will allow them to find data anywhere in the workspace, not just inside the premium team. Making a search request using credentials of a non-premium user will result in a `402 Payment Required` error.
        /// #### Pagination
        /// Search results are not stable; repeating the same query multiple times may return the data in a different order, even if the data do not change. Because of this, the traditional [pagination](https://developers.asana.com/docs/#pagination) available elsewhere in the Asana API is not available here. However, you can paginate manually by sorting the search results by their creation time and then modifying each subsequent query to exclude data you have already seen. Page sizes are limited to a maximum of 100 items, and can be specified by the `limit` query parameter.
        /// #### Eventual consistency
        /// Changes in Asana (regardless of whether they’re made though the web product or the API) are forwarded to our search infrastructure to be indexed. This process can take between 10 and 60 seconds to complete under normal operation, and longer during some production incidents. Making a change to a task that would alter its presence in a particular search query will not be reflected immediately. This is also true of the advanced search feature in the web product.
        /// #### Rate limits
        /// You may receive a `429 Too Many Requests` response if you hit any of our [rate limits](https://developers.asana.com/docs/#rate-limits).
        /// #### Custom field parameters
        /// | Parameter name | Custom field type | Accepted type |
        /// |---|---|---|
        /// | custom_fields.{gid}.is_set | All | Boolean |
        /// | custom_fields.{gid}.value | Text | String |
        /// | custom_fields.{gid}.value | Number | Number |
        /// | custom_fields.{gid}.value | Enum | Enum option ID |
        /// | custom_fields.{gid}.starts_with | Text only | String |
        /// | custom_fields.{gid}.ends_with | Text only | String |
        /// | custom_fields.{gid}.contains | Text only | String |
        /// | custom_fields.{gid}.less_than | Number only | Number |
        /// | custom_fields.{gid}.greater_than | Number only | Number |
        /// 
        /// 
        /// For example, if the gid of the custom field is 12345, these query parameter to find tasks where it is set would be `custom_fields.12345.is_set=true`. To match an exact value for an enum custom field, use the gid of the desired enum option and not the name of the enum option: `custom_fields.12345.value=67890`.
        /// 
        /// Searching for multiple exact matches of a custom field is not supported.
        /// 
        /// *Note: If you specify `projects.any` and `sections.any`, you will receive tasks for the project **and** tasks for the section. If you're looking for only tasks in a section, omit the `projects.any` from the request.*
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.TaskCompact]?

            public init(data: [AsanaAPI.TaskCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.TeamMemberships {
    public func teamMembershipGid(_ teamMembershipGid: String) -> WithTeamMembershipGid {
        WithTeamMembershipGid(path: "\(path)/\(teamMembershipGid)")
    }

    public struct WithTeamMembershipGid {
        /// Path: `/team_memberships/{team_membership_gid}`
        public let path: String

        /// Get a team membership
        ///
        /// Returns the complete team membership record for a single team membership.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: AsanaAPI.TeamMembershipCompact?

            public init(data: AsanaAPI.TeamMembershipCompact? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths {
    public static var teamMemberships: TeamMemberships {
        TeamMemberships(path: "/team_memberships")
    }

    public struct TeamMemberships {
        /// Path: `/team_memberships`
        public let path: String

        /// Get team memberships
        ///
        /// Returns compact team membership records.
        public func get(parameters: GetParameters? = nil) -> Request<GetResponse> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.TeamMembershipCompact]?

            public init(data: [AsanaAPI.TeamMembershipCompact]? = nil) {
                self.data = data
            }
        }

        public struct GetParameters {
            public var team: String?
            public var user: String?
            public var workspace: String?

            public init(team: String? = nil, user: String? = nil, workspace: String? = nil) {
                self.team = team
                self.user = user
                self.workspace = workspace
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("team", team)
                query.addQueryItem("user", user)
                query.addQueryItem("workspace", workspace)
                return query
            }
        }
    }
}

extension Paths.Teams.WithTeamGid {
    public var teamMemberships: TeamMemberships {
        TeamMemberships(path: path + "/team_memberships")
    }

    public struct TeamMemberships {
        /// Path: `/teams/{team_gid}/team_memberships`
        public let path: String

        /// Get memberships from a team
        ///
        /// Returns the compact team memberships for the team.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.TeamMembershipCompact]?

            public init(data: [AsanaAPI.TeamMembershipCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Users.WithUserGid {
    public var teamMemberships: TeamMemberships {
        TeamMemberships(path: path + "/team_memberships")
    }

    public struct TeamMemberships {
        /// Path: `/users/{user_gid}/team_memberships`
        public let path: String

        /// Get memberships from a user
        ///
        /// Returns the compact team membership records for the user.
        public func get(workspace: String) -> Request<GetResponse> {
            .get(path, query: makeGetQuery(workspace))
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.TeamMembershipCompact]?

            public init(data: [AsanaAPI.TeamMembershipCompact]? = nil) {
                self.data = data
            }
        }

        private func makeGetQuery(_ workspace: String) -> [(String, String?)] {
            var query: [(String, String?)] = []
            query.addQueryItem("workspace", workspace)
            return query
        }
    }
}

extension Paths {
    public static var teams: Teams {
        Teams(path: "/teams")
    }

    public struct Teams {
        /// Path: `/teams`
        public let path: String

        /// Create a team
        ///
        /// Creates a team within the current workspace.
        public func post(data: AsanaAPI.TeamRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.TeamResponse?

            public init(data: AsanaAPI.TeamResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Teams {
    public func teamGid(_ teamGid: String) -> WithTeamGid {
        WithTeamGid(path: "\(path)/\(teamGid)")
    }

    public struct WithTeamGid {
        /// Path: `/teams/{team_gid}`
        public let path: String

        /// Get a team
        ///
        /// Returns the full record for a single team.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: AsanaAPI.TeamResponse?

            public init(data: AsanaAPI.TeamResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths {
    public static var organizations: Organizations {
        Organizations(path: "/organizations")
    }

    public struct Organizations {
        /// Path: `/organizations`
        public let path: String
    }
}

extension Paths.Organizations {
    public func workspaceGid(_ workspaceGid: String) -> WithWorkspaceGid {
        WithWorkspaceGid(path: "\(path)/\(workspaceGid)")
    }

    public struct WithWorkspaceGid {
        /// Path: `/organizations/{workspace_gid}`
        public let path: String
    }
}

extension Paths.Organizations.WithWorkspaceGid {
    public var teams: Teams {
        Teams(path: path + "/teams")
    }

    public struct Teams {
        /// Path: `/organizations/{workspace_gid}/teams`
        public let path: String

        /// Get teams in an organization
        ///
        /// Returns the compact records for all teams in the organization visible to the authorized user.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.TeamCompact]?

            public init(data: [AsanaAPI.TeamCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Users.WithUserGid {
    public var teams: Teams {
        Teams(path: path + "/teams")
    }

    public struct Teams {
        /// Path: `/users/{user_gid}/teams`
        public let path: String

        /// Get teams for a user
        ///
        /// Returns the compact records for all teams to which the given user is assigned.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.TeamCompact]?

            public init(data: [AsanaAPI.TeamCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Teams.WithTeamGid {
    public var addUser: AddUser {
        AddUser(path: path + "/addUser")
    }

    public struct AddUser {
        /// Path: `/teams/{team_gid}/addUser`
        public let path: String

        /// Add a user to a team
        ///
        /// The user making this call must be a member of the team in order to add others. The user being added must exist in the same organization as the team.
        /// 
        /// Returns the complete team membership record for the newly added user.
        public func post(data: AsanaAPI.TeamAddUserRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.TeamMembershipCompact?

            public init(data: AsanaAPI.TeamMembershipCompact? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Teams.WithTeamGid {
    public var removeUser: RemoveUser {
        RemoveUser(path: path + "/removeUser")
    }

    public struct RemoveUser {
        /// Path: `/teams/{team_gid}/removeUser`
        public let path: String

        /// Remove a user from a team
        ///
        /// The user making this call must be a member of the team in order to remove themselves or others.
        public func post(data: AsanaAPI.TeamRemoveUserRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.TimePeriods {
    public func timePeriodGid(_ timePeriodGid: String) -> WithTimePeriodGid {
        WithTimePeriodGid(path: "\(path)/\(timePeriodGid)")
    }

    public struct WithTimePeriodGid {
        /// Path: `/time_periods/{time_period_gid}`
        public let path: String

        /// Get a time period
        ///
        /// Returns the full record for a single time period.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: AsanaAPI.TimePeriodBase?

            public init(data: AsanaAPI.TimePeriodBase? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths {
    public static var timePeriods: TimePeriods {
        TimePeriods(path: "/time_periods")
    }

    public struct TimePeriods {
        /// Path: `/time_periods`
        public let path: String

        /// Get time periods
        ///
        /// Returns compact time period records.
        public func get(parameters: GetParameters) -> Request<GetResponse> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.TimePeriodCompact]?

            public init(data: [AsanaAPI.TimePeriodCompact]? = nil) {
                self.data = data
            }
        }

        public struct GetParameters {
            public var startOn: NaiveDate?
            public var endOn: NaiveDate?
            public var workspace: String

            public init(startOn: NaiveDate? = nil, endOn: NaiveDate? = nil, workspace: String) {
                self.startOn = startOn
                self.endOn = endOn
                self.workspace = workspace
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("start_on", startOn)
                query.addQueryItem("end_on", endOn)
                query.addQueryItem("workspace", workspace)
                return query
            }
        }
    }
}

extension Paths.Workspaces.WithWorkspaceGid {
    public var typeahead: Typeahead {
        Typeahead(path: path + "/typeahead")
    }

    public struct Typeahead {
        /// Path: `/workspaces/{workspace_gid}/typeahead`
        public let path: String

        /// Get objects via typeahead
        ///
        /// Retrieves objects in the workspace based via an auto-completion/typeahead
        /// search algorithm. This feature is meant to provide results quickly, so do
        /// not rely on this API to provide extremely accurate search results. The
        /// result set is limited to a single page of results with a maximum size, so
        /// you won’t be able to fetch large numbers of results.
        /// 
        /// The typeahead search API provides search for objects from a single
        /// workspace. This endpoint should be used to query for objects when
        /// creating an auto-completion/typeahead search feature. This API is meant
        /// to provide results quickly and should not be relied upon for accurate or
        /// exhaustive search results. The results sets are limited in size and
        /// cannot be paginated.
        /// 
        /// Queries return a compact representation of each object which is typically
        /// the gid and name fields. Interested in a specific set of fields or all of
        /// the fields?! Of course you are. Use field selectors to manipulate what
        /// data is included in a response.
        /// 
        /// Resources with type `user` are returned in order of most contacted to
        /// least contacted. This is determined by task assignments, adding the user
        /// to projects, and adding the user as a follower to tasks, messages,
        /// etc.
        /// 
        /// Resources with type `project` are returned in order of recency. This is
        /// determined when the user visits the project, is added to the project, and
        /// completes tasks in the project.
        /// 
        /// Resources with type `task` are returned with priority placed on tasks
        /// the user is following, but no guarantee on the order of those tasks.
        /// 
        /// Leaving the `query` string empty or omitted will give you results, still
        /// following the resource ordering above. This could be used to list users or
        /// projects that are relevant for the requesting user's api token.
        public var get: Request<GetResponse> {
            .get(path)
        }

        /// A generic list of objects, such as those returned by the typeahead search endpoint.
        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.AsanaNamedResource]?

            public init(data: [AsanaAPI.AsanaNamedResource]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.UserTaskLists {
    public func userTaskListGid(_ userTaskListGid: String) -> WithUserTaskListGid {
        WithUserTaskListGid(path: "\(path)/\(userTaskListGid)")
    }

    public struct WithUserTaskListGid {
        /// Path: `/user_task_lists/{user_task_list_gid}`
        public let path: String

        /// Get a user task list
        ///
        /// Returns the full record for a user task list.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: AsanaAPI.UserTaskListCompact?

            public init(data: AsanaAPI.UserTaskListCompact? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Users.WithUserGid {
    public var userTaskList: UserTaskList {
        UserTaskList(path: path + "/user_task_list")
    }

    public struct UserTaskList {
        /// Path: `/users/{user_gid}/user_task_list`
        public let path: String

        /// Get a user's task list
        ///
        /// Returns the full record for a user's task list.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: AsanaAPI.UserTaskListCompact?

            public init(data: AsanaAPI.UserTaskListCompact? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths {
    public static var users: Users {
        Users(path: "/users")
    }

    public struct Users {
        /// Path: `/users`
        public let path: String

        /// Get multiple users
        ///
        /// Returns the user records for all users in all workspaces and organizations accessible to the authenticated user. Accepts an optional workspace ID parameter.
        /// Results are sorted by user ID.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.UserCompact]?

            public init(data: [AsanaAPI.UserCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Users {
    public func userGid(_ userGid: String) -> WithUserGid {
        WithUserGid(path: "\(path)/\(userGid)")
    }

    public struct WithUserGid {
        /// Path: `/users/{user_gid}`
        public let path: String

        /// Get a user
        ///
        /// Returns the full user record for the single user with the provided ID.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: AsanaAPI.UserResponse?

            public init(data: AsanaAPI.UserResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Users.WithUserGid {
    public var favorites: Favorites {
        Favorites(path: path + "/favorites")
    }

    public struct Favorites {
        /// Path: `/users/{user_gid}/favorites`
        public let path: String

        /// Get a user's favorites
        ///
        /// Returns all of a user's favorites in the given workspace, of the given type.
        /// Results are given in order (The same order as Asana's sidebar).
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.AsanaNamedResource]?

            public init(data: [AsanaAPI.AsanaNamedResource]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Teams.WithTeamGid {
    public var users: Users {
        Users(path: path + "/users")
    }

    public struct Users {
        /// Path: `/teams/{team_gid}/users`
        public let path: String

        /// Get users in a team
        ///
        /// Returns the compact records for all users that are members of the team.
        /// Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.UserCompact]?

            public init(data: [AsanaAPI.UserCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Workspaces.WithWorkspaceGid {
    public var users: Users {
        Users(path: path + "/users")
    }

    public struct Users {
        /// Path: `/workspaces/{workspace_gid}/users`
        public let path: String

        /// Get users in a workspace or organization
        ///
        /// Returns the compact records for all users in the specified workspace or organization.
        /// Results are sorted alphabetically and limited to 2000. For more results use the `/users` endpoint.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.UserCompact]?

            public init(data: [AsanaAPI.UserCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths {
    public static var webhooks: Webhooks {
        Webhooks(path: "/webhooks")
    }

    public struct Webhooks {
        /// Path: `/webhooks`
        public let path: String

        /// Get multiple webhooks
        ///
        /// Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace.
        public func get(parameters: GetParameters) -> Request<GetResponse> {
            .get(path, query: parameters.asQuery)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.WebhookResponse]?

            public init(data: [AsanaAPI.WebhookResponse]? = nil) {
                self.data = data
            }
        }

        public struct GetParameters {
            public var limit: Int?
            public var offset: String?
            public var workspace: String
            public var resource: String?

            public init(limit: Int? = nil, offset: String? = nil, workspace: String, resource: String? = nil) {
                self.limit = limit
                self.offset = offset
                self.workspace = workspace
                self.resource = resource
            }

            public var asQuery: [(String, String?)] {
                var query: [(String, String?)] = []
                query.addQueryItem("limit", limit)
                query.addQueryItem("offset", offset)
                query.addQueryItem("workspace", workspace)
                query.addQueryItem("resource", resource)
                return query
            }
        }

        /// Establish a webhook
        ///
        /// Establishing a webhook is a two-part process. First, a simple HTTP POST
        /// request initiates the creation similar to creating any other resource.
        /// 
        /// Next, in the middle of this request comes the confirmation handshake.
        /// When a webhook is created, we will send a test POST to the target with an
        /// `X-Hook-Secret` header. The target must respond with a `200 OK` or `204
        /// No Content` and a matching `X-Hook-Secret` header to confirm that this
        /// webhook subscription is indeed expected. We strongly recommend storing
        /// this secret to be used to verify future webhook event signatures.
        /// 
        /// The POST request to create the webhook will then return with the status
        /// of the request. If you do not acknowledge the webhook’s confirmation
        /// handshake it will fail to setup, and you will receive an error in
        /// response to your attempt to create it. This means you need to be able to
        /// receive and complete the webhook *while* the POST request is in-flight
        /// (in other words, have a server that can handle requests asynchronously).
        /// 
        /// Invalid hostnames like localhost will recieve a 403 Forbidden status code.
        /// 
        /// ```
        /// # Request
        /// curl -H "Authorization: Bearer <personal_access_token>" \
        /// -X POST https://app.asana.com/api/1.0/webhooks \
        /// -d "resource=8675309" \
        /// -d "target=https://example.com/receive-webhook/7654"
        /// ```
        /// 
        /// ```
        /// # Handshake sent to https://example.com/
        /// POST /receive-webhook/7654
        /// X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81
        /// ```
        /// 
        /// ```
        /// # Handshake response sent by example.com
        /// HTTP/1.1 200
        /// X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81
        /// ```
        /// 
        /// ```
        /// # Response
        /// HTTP/1.1 201
        /// {
        ///   "data": {
        ///     "gid": "43214",
        ///     "resource": {
        ///       "gid": "8675309",
        ///       "name": "Bugs"
        ///     },
        ///     "target": "https://example.com/receive-webhook/7654",
        ///     "active": false,
        ///     "last_success_at": null,
        ///     "last_failure_at": null,
        ///     "last_failure_content": null
        ///   }
        /// }
        /// ```
        public func post(data: AsanaAPI.WebhookRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.WebhookResponse?

            public init(data: AsanaAPI.WebhookResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Webhooks {
    public func webhookGid(_ webhookGid: String) -> WithWebhookGid {
        WithWebhookGid(path: "\(path)/\(webhookGid)")
    }

    public struct WithWebhookGid {
        /// Path: `/webhooks/{webhook_gid}`
        public let path: String

        /// Get a webhook
        ///
        /// Returns the full record for the given webhook.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: AsanaAPI.WebhookResponse?

            public init(data: AsanaAPI.WebhookResponse? = nil) {
                self.data = data
            }
        }

        /// Update a webhook
        ///
        /// An existing webhook's filters can be updated by making a PUT request on the URL for that webhook. Note that the webhook's previous `filters` array will be completely overwritten by the `filters` sent in the PUT request.
        public func put(data: AsanaAPI.WebhookUpdateRequest? = nil) -> Request<PutResponse> {
            .put(path, body: ["data": data])
        }

        public struct PutResponse: Decodable {
            public var data: AsanaAPI.WebhookResponse?

            public init(data: AsanaAPI.WebhookResponse? = nil) {
                self.data = data
            }
        }

        /// Delete a webhook
        ///
        /// This method *permanently* removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued.
        public var delete: Request<DeleteResponse> {
            .delete(path)
        }

        public struct DeleteResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths {
    public static var workspaceMemberships: WorkspaceMemberships {
        WorkspaceMemberships(path: "/workspace_memberships")
    }

    public struct WorkspaceMemberships {
        /// Path: `/workspace_memberships`
        public let path: String
    }
}

extension Paths.WorkspaceMemberships {
    public func workspaceMembershipGid(_ workspaceMembershipGid: String) -> WithWorkspaceMembershipGid {
        WithWorkspaceMembershipGid(path: "\(path)/\(workspaceMembershipGid)")
    }

    public struct WithWorkspaceMembershipGid {
        /// Path: `/workspace_memberships/{workspace_membership_gid}`
        public let path: String

        /// Get a workspace membership
        ///
        /// Returns the complete workspace record for a single workspace membership.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: AsanaAPI.WorkspaceMembershipResponse?

            public init(data: AsanaAPI.WorkspaceMembershipResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Users.WithUserGid {
    public var workspaceMemberships: WorkspaceMemberships {
        WorkspaceMemberships(path: path + "/workspace_memberships")
    }

    public struct WorkspaceMemberships {
        /// Path: `/users/{user_gid}/workspace_memberships`
        public let path: String

        /// Get workspace memberships for a user
        ///
        /// Returns the compact workspace membership records for the user.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.WorkspaceMembershipCompact]?

            public init(data: [AsanaAPI.WorkspaceMembershipCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Workspaces.WithWorkspaceGid {
    public var workspaceMemberships: WorkspaceMemberships {
        WorkspaceMemberships(path: path + "/workspace_memberships")
    }

    public struct WorkspaceMemberships {
        /// Path: `/workspaces/{workspace_gid}/workspace_memberships`
        public let path: String

        /// Get the workspace memberships for a workspace
        ///
        /// Returns the compact workspace membership records for the workspace.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.WorkspaceMembershipCompact]?

            public init(data: [AsanaAPI.WorkspaceMembershipCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths {
    public static var workspaces: Workspaces {
        Workspaces(path: "/workspaces")
    }

    public struct Workspaces {
        /// Path: `/workspaces`
        public let path: String

        /// Get multiple workspaces
        ///
        /// Returns the compact records for all workspaces visible to the authorized user.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: [AsanaAPI.WorkspaceCompact]?

            public init(data: [AsanaAPI.WorkspaceCompact]? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Workspaces {
    public func workspaceGid(_ workspaceGid: String) -> WithWorkspaceGid {
        WithWorkspaceGid(path: "\(path)/\(workspaceGid)")
    }

    public struct WithWorkspaceGid {
        /// Path: `/workspaces/{workspace_gid}`
        public let path: String

        /// Get a workspace
        ///
        /// Returns the full workspace record for a single workspace.
        public var get: Request<GetResponse> {
            .get(path)
        }

        public struct GetResponse: Decodable {
            public var data: AsanaAPI.WorkspaceResponse?

            public init(data: AsanaAPI.WorkspaceResponse? = nil) {
                self.data = data
            }
        }

        /// Update a workspace
        ///
        /// A specific, existing workspace can be updated by making a PUT request on the URL for that workspace. Only the fields provided in the data block will be updated; any unspecified fields will remain unchanged.
        /// Currently the only field that can be modified for a workspace is its name.
        /// Returns the complete, updated workspace record.
        public func put(data: AsanaAPI.WorkspaceCompact? = nil) -> Request<PutResponse> {
            .put(path, body: ["data": data])
        }

        public struct PutResponse: Decodable {
            public var data: AsanaAPI.WorkspaceResponse?

            public init(data: AsanaAPI.WorkspaceResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Workspaces.WithWorkspaceGid {
    public var addUser: AddUser {
        AddUser(path: path + "/addUser")
    }

    public struct AddUser {
        /// Path: `/workspaces/{workspace_gid}/addUser`
        public let path: String

        /// Add a user to a workspace or organization
        ///
        /// Add a user to a workspace or organization.
        /// The user can be referenced by their globally unique user ID or their email address. Returns the full user record for the invited user.
        public func post(data: AsanaAPI.WorkspaceAddUserRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            public var data: AsanaAPI.UserResponse?

            public init(data: AsanaAPI.UserResponse? = nil) {
                self.data = data
            }
        }
    }
}

extension Paths.Workspaces.WithWorkspaceGid {
    public var removeUser: RemoveUser {
        RemoveUser(path: path + "/removeUser")
    }

    public struct RemoveUser {
        /// Path: `/workspaces/{workspace_gid}/removeUser`
        public let path: String

        /// Remove a user from a workspace or organization
        ///
        /// Remove a user from a workspace or organization.
        /// The user making this call must be an admin in the workspace. The user can be referenced by their globally unique user ID or their email address.
        /// Returns an empty data record.
        public func post(data: AsanaAPI.WorkspaceRemoveUserRequest? = nil) -> Request<PostResponse> {
            .post(path, body: ["data": data])
        }

        public struct PostResponse: Decodable {
            /// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
            public var data: [String: AnyJSON]?

            public init(data: [String: AnyJSON]? = nil) {
                self.data = data
            }
        }
    }
}

public enum Paths {}

protocol QueryEncodable {
    var asQueryValue: String { get }
}

extension Bool: QueryEncodable {
    var asQueryValue: String {
        self ? "true" : "false"
    }
}

extension Date: QueryEncodable {
    var asQueryValue: String {
        ISO8601DateFormatter().string(from: self)
    }
}

extension Double: QueryEncodable {
    var asQueryValue: String {
        String(self)
    }
}

extension Int: QueryEncodable {
    var asQueryValue: String {
        String(self)
    }
}

extension Int32: QueryEncodable {
    var asQueryValue: String {
        String(self)
    }
}

extension Int64: QueryEncodable {
    var asQueryValue: String {
        String(self)
    }
}

extension NaiveDate: QueryEncodable {
    var asQueryValue: String {
        String(self)
    }
}

extension String: QueryEncodable {
    var asQueryValue: String {
        self
    }
}

extension URL: QueryEncodable {
    var asQueryValue: String {
        absoluteString
    }
}

extension RawRepresentable where RawValue == String {
    var asQueryValue: String {
        rawValue
    }
}

extension Array where Element == (String, String?) {
    mutating func addQueryItem<T: RawRepresentable>(_ name: String, _ value: T?) where T.RawValue == String {
        addQueryItem(name, value?.rawValue)
    }
    
    mutating func addQueryItem(_ name: String, _ value: QueryEncodable?) {
        guard let value = value?.asQueryValue, !value.isEmpty else { return }
        append((name, value))
    }
    
    mutating func addDeepObject(_ name: String, _ query: [(String, String?)]?) {
        for (key, value) in query ?? [] {
            addQueryItem("\(name)[\(key)]", value)
        }
    }

    var asPercentEncodedQuery: String {
        var components = URLComponents()
        components.queryItems = self.map(URLQueryItem.init)
        return components.percentEncodedQuery ?? ""
    }
    
    // [("role", "admin"), ("name": "kean)] -> "role,admin,name,kean"
    var asCompactQuery: String {
        flatMap { [$0, $1] }.compactMap { $0 }.joined(separator: ",")
    }
}
