// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import NaiveDate

/// A generic Asana Resource, containing a globally unique identifier.
public struct AsanaResource: Codable {
    /// Globally unique identifier of the resource, as a string.
    ///
    /// Example: "12345"
    public var gid: String?
    /// The base type of this resource.
    ///
    /// Example: "task"
    public var resourceType: String?

    public init(gid: String? = nil, resourceType: String? = nil) {
        self.gid = gid
        self.resourceType = resourceType
    }

    private enum CodingKeys: String, CodingKey {
        case gid
        case resourceType = "resource_type"
    }
}

public struct AsanaNamedResource: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    /// The name of the object.
    ///
    /// Example: "Bug Task"
    public var name: String?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.asanaResource = try AsanaResource(from: decoder)
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(name, forKey: "name")
    }
}

public struct AttachmentRequest: Codable {
    /// The type of the attachment. Must be one of the [given values](/docs/attachment). If not specified, a file attachment of type `asana_file_attachments` will be assumed. Note that if the value of `resource_subtype` is `external`, a `parent`, `name`, and `url` must also be provided.
    ///
    /// Example: "external"
    public var resourceSubtype: ResourceSubtype?
    /// Required for file attachments.
    public var file: String?
    /// Globally unique identifier of the parent task, as a string. Required for attachments of type `external`.
    public var parent: String?
    /// The URL of the external resource being attached. Required for attachments of type `external`.
    public var url: String?
    /// The name of the external resource being attached. Required for attachments of type `external`.
    public var name: String?

    /// The type of the attachment. Must be one of the [given values](/docs/attachment). If not specified, a file attachment of type `asana_file_attachments` will be assumed. Note that if the value of `resource_subtype` is `external`, a `parent`, `name`, and `url` must also be provided.
    ///
    /// Example: "external"
    public enum ResourceSubtype: String, Codable, CaseIterable {
        case asanaFileAttachments = "asana_file_attachments"
        case external
    }

    public init(resourceSubtype: ResourceSubtype? = nil, file: String? = nil, parent: String? = nil, url: String? = nil, name: String? = nil) {
        self.resourceSubtype = resourceSubtype
        self.file = file
        self.parent = parent
        self.url = url
        self.name = name
    }

    private enum CodingKeys: String, CodingKey {
        case resourceSubtype = "resource_subtype"
        case file
        case parent
        case url
        case name
    }
}

public struct AttachmentResponse: Codable {
    public var attachmentBase: AttachmentBase
    /// The time at which this resource was created.
    ///
    /// Example: "2012-02-22T02:06:58.147Z"
    public var createdAt: Date?
    /// The URL containing the content of the attachment.
    /// *Note:* May be null if the attachment is hosted by [Box](https://www.box.com/) and will be null if the attachment is a Video Message hosted by [Vimeo](https://vimeo.com/). If present, this URL may only be valid for two minutes from the time of retrieval. You should avoid persisting this URL somewhere and just refresh it on demand to ensure you do not keep stale URLs.
    ///
    /// Example: "https://s3.amazonaws.com/assets/123/Screenshot.png"
    public var downloadURL: URL?
    /// The service hosting the attachment. Valid values are `asana`, `dropbox`, `gdrive`, `box`, and `vimeo`.
    ///
    /// Example: "dropbox"
    public var host: String?
    public var parent: Parent?
    /// The URL where the attachment can be viewed, which may be friendlier to users in a browser than just directing them to a raw file. May be null if no view URL exists for the service.
    ///
    /// Example: "https://www.dropbox.com/s/123/Screenshot.png"
    public var viewURL: URL?

    public struct Parent: Codable {
        public var taskCompact: TaskCompact

        public init(from decoder: Decoder) throws {
            self.taskCompact = try TaskCompact(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(taskCompact, forKey: "taskCompact")
        }
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.attachmentBase = try AttachmentBase(from: decoder)
        self.createdAt = try values.decodeIfPresent(Date.self, forKey: "created_at")
        self.downloadURL = try values.decodeIfPresent(URL.self, forKey: "download_url")
        self.host = try values.decodeIfPresent(String.self, forKey: "host")
        self.parent = try Parent(from: decoder)
        self.viewURL = try values.decodeIfPresent(URL.self, forKey: "view_url")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(attachmentBase, forKey: "attachmentBase")
        try values.encodeIfPresent(createdAt, forKey: "created_at")
        try values.encodeIfPresent(downloadURL, forKey: "download_url")
        try values.encodeIfPresent(host, forKey: "host")
        try values.encodeIfPresent(parent, forKey: "parent")
        try values.encodeIfPresent(viewURL, forKey: "view_url")
    }
}

public typealias AttachmentBase = AttachmentCompact

public struct AttachmentCompact: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    /// The name of the file.
    ///
    /// Example: "Screenshot.png"
    public var name: String?
    /// The service hosting the attachment. Valid values are `asana`, `dropbox`, `gdrive`, `onedrive`, `box`, `vimeo`, and `external`.
    ///
    /// Example: "dropbox"
    public var resourceSubtype: String?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.asanaResource = try AsanaResource(from: decoder)
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.resourceSubtype = try values.decodeIfPresent(String.self, forKey: "resource_subtype")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(resourceSubtype, forKey: "resource_subtype")
    }
}

/// The entity that triggered the event. Will typically be a user.
public struct AuditLogEventActor: Codable {
    /// The type of actor.
    /// Can be one of `user`, `asana`, `asana_support`, `anonymous`, or `external_administrator`.
    ///
    /// Example: "user"
    public var actorType: ActorType?
    /// Globally unique identifier of the actor, if it is a user.
    ///
    /// Example: "1111"
    public var gid: String?
    /// The name of the actor, if it is a user.
    ///
    /// Example: "Greg Sanchez"
    public var name: String?
    /// The email of the actor, if it is a user.
    ///
    /// Example: "gregsanchez@example.com"
    public var email: String?

    /// The type of actor.
    /// Can be one of `user`, `asana`, `asana_support`, `anonymous`, or `external_administrator`.
    ///
    /// Example: "user"
    public enum ActorType: String, Codable, CaseIterable {
        case user
        case asana
        case asanaSupport = "asana_support"
        case anonymous
        case externalAdministrator = "external_administrator"
    }

    public init(actorType: ActorType? = nil, gid: String? = nil, name: String? = nil, email: String? = nil) {
        self.actorType = actorType
        self.gid = gid
        self.name = name
        self.email = email
    }

    private enum CodingKeys: String, CodingKey {
        case actorType = "actor_type"
        case gid
        case name
        case email
    }
}

/// The context from which this event originated.
public struct AuditLogEventContext: Codable {
    /// The type of context.
    /// Can be one of `web`, `desktop`, `mobile`, `asana_support`, `asana`, `email`, or `api`.
    ///
    /// Example: "web"
    public var contextType: ContextType?
    /// The authentication method used in the context of an API request.
    /// Only present if the `context_type` is `api`. Can be one of `cookie`, `oauth`, `personal_access_token`, or `service_account`.
    public var apiAuthenticationMethod: APIAuthenticationMethod?
    /// The IP address of the client that initiated the event, if applicable.
    ///
    /// Example: "1.1.1.1"
    public var clientIpAddress: String?
    /// The user agent of the client that initiated the event, if applicable.
    ///
    /// Example: "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36"
    public var userAgent: String?
    /// The name of the OAuth App that initiated the event.
    /// Only present if the `api_authentication_method` is `oauth`.
    public var oauthAppName: String?

    /// The type of context.
    /// Can be one of `web`, `desktop`, `mobile`, `asana_support`, `asana`, `email`, or `api`.
    ///
    /// Example: "web"
    public enum ContextType: String, Codable, CaseIterable {
        case web
        case desktop
        case mobile
        case asanaSupport = "asana_support"
        case asana
        case email
        case api
    }

    /// The authentication method used in the context of an API request.
    /// Only present if the `context_type` is `api`. Can be one of `cookie`, `oauth`, `personal_access_token`, or `service_account`.
    public enum APIAuthenticationMethod: String, Codable, CaseIterable {
        case cookie
        case oauth
        case personalAccessToken = "personal_access_token"
        case serviceAccount = "service_account"
    }

    public init(contextType: ContextType? = nil, apiAuthenticationMethod: APIAuthenticationMethod? = nil, clientIpAddress: String? = nil, userAgent: String? = nil, oauthAppName: String? = nil) {
        self.contextType = contextType
        self.apiAuthenticationMethod = apiAuthenticationMethod
        self.clientIpAddress = clientIpAddress
        self.userAgent = userAgent
        self.oauthAppName = oauthAppName
    }

    private enum CodingKeys: String, CodingKey {
        case contextType = "context_type"
        case apiAuthenticationMethod = "api_authentication_method"
        case clientIpAddress = "client_ip_address"
        case userAgent = "user_agent"
        case oauthAppName = "oauth_app_name"
    }
}

/// Event specific details. The schema will vary depending on the `event_type`.
public struct AuditLogEventDetails: Codable {
    public init() {}
}

/// The primary object that was affected by this event.
public struct AuditLogEventResource: Codable {
    /// The type of resource.
    ///
    /// Example: "task"
    public var resourceType: String?
    /// The subtype of resource. Most resources will not have a subtype.
    ///
    /// Example: "milestone"
    public var resourceSubtype: String?
    /// Globally unique identifier of the resource.
    ///
    /// Example: "1111"
    public var gid: String?
    /// The name of the resource.
    ///
    /// Example: "Example Task"
    public var name: String?
    /// The email of the resource, if applicable.
    public var email: String?

    public init(resourceType: String? = nil, resourceSubtype: String? = nil, gid: String? = nil, name: String? = nil, email: String? = nil) {
        self.resourceType = resourceType
        self.resourceSubtype = resourceSubtype
        self.gid = gid
        self.name = name
        self.email = email
    }

    private enum CodingKeys: String, CodingKey {
        case resourceType = "resource_type"
        case resourceSubtype = "resource_subtype"
        case gid
        case name
        case email
    }
}

/// An object representing a single event within an Asana domain.
/// 
/// Every audit log event is comprised of an `event_type`, `actor`, `resource`, and `context`. Some events will include additional metadata about the event under `details`. See our [currently supported list of events](/docs/supported-auditlogevents) for more details.
public struct AuditLogEvent: Codable {
    /// Globally unique identifier of the `AuditLogEvent`, as a string.
    ///
    /// Example: "12345"
    public var gid: String?
    /// The time the event was created.
    ///
    /// Example: "2021-01-01T00:00:00.000Z"
    public var createdAt: Date?
    /// The type of the event.
    ///
    /// Example: "task_deleted"
    public var eventType: String?
    /// The category that this `event_type` belongs to.
    ///
    /// Example: "deletion"
    public var eventCategory: String?
    public var actor: Actor?
    public var resource: Resource?
    public var details: Details?
    public var context: Context?

    public struct Actor: Codable {
        /// The entity that triggered the event. Will typically be a user.
        public var auditLogEventActor: AuditLogEventActor

        public init(from decoder: Decoder) throws {
            self.auditLogEventActor = try AuditLogEventActor(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(auditLogEventActor, forKey: "auditLogEventActor")
        }
    }

    public struct Resource: Codable {
        /// The primary object that was affected by this event.
        public var auditLogEventResource: AuditLogEventResource

        public init(from decoder: Decoder) throws {
            self.auditLogEventResource = try AuditLogEventResource(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(auditLogEventResource, forKey: "auditLogEventResource")
        }
    }

    public struct Details: Codable {
        /// Event specific details. The schema will vary depending on the `event_type`.
        public var auditLogEventDetails: AuditLogEventDetails

        public init(from decoder: Decoder) throws {
            self.auditLogEventDetails = try AuditLogEventDetails(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(auditLogEventDetails, forKey: "auditLogEventDetails")
        }
    }

    public struct Context: Codable {
        /// The context from which this event originated.
        public var auditLogEventContext: AuditLogEventContext

        public init(from decoder: Decoder) throws {
            self.auditLogEventContext = try AuditLogEventContext(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(auditLogEventContext, forKey: "auditLogEventContext")
        }
    }

    public init(gid: String? = nil, createdAt: Date? = nil, eventType: String? = nil, eventCategory: String? = nil, actor: Actor? = nil, resource: Resource? = nil, details: Details? = nil, context: Context? = nil) {
        self.gid = gid
        self.createdAt = createdAt
        self.eventType = eventType
        self.eventCategory = eventCategory
        self.actor = actor
        self.resource = resource
        self.details = details
        self.context = context
    }

    private enum CodingKeys: String, CodingKey {
        case gid
        case createdAt = "created_at"
        case eventType = "event_type"
        case eventCategory = "event_category"
        case actor
        case resource
        case details
        case context
    }
}

/// A request object for use in a batch request.
public struct BatchRequest: Codable {
    public var actions: [BatchRequestAction]?

    public init(actions: [BatchRequestAction]? = nil) {
        self.actions = actions
    }
}

/// An action object for use in a batch request.
public struct BatchRequestAction: Codable {
    /// The path of the desired endpoint relative to the API’s base URL. Query parameters are not accepted here; put them in `data` instead.
    ///
    /// Example: "/tasks/123"
    public var relativePath: String
    /// The HTTP method you wish to emulate for the action.
    ///
    /// Example: "get"
    public var method: Method
    /// For `GET` requests, this should be a map of query parameters you would have normally passed in the URL. Options and pagination are not accepted here; put them in `options` instead. For `POST`, `PATCH`, and `PUT` methods, this should be the content you would have normally put in the data field of the body.
    ///
    /// Example:
    ///
    /// {
    ///   "assignee" : "me",
    ///   "workspace" : "1337"
    /// }
    public var data: Data?
    /// Pagination (`limit` and `offset`) and output options (`fields` or `expand`) for the action. “Pretty” JSON output is not an available option on individual actions; if you want pretty output, specify that option on the parent request.
    ///
    /// Example:
    ///
    /// {
    ///   "fields" : [
    ///     "name",
    ///     "notes",
    ///     "completed"
    ///   ],
    ///   "limit" : 3
    /// }
    public var options: Options?

    /// The HTTP method you wish to emulate for the action.
    ///
    /// Example: "get"
    public enum Method: String, Codable, CaseIterable {
        case get
        case post
        case put
        case delete
        case patch
        case head
    }

    /// For `GET` requests, this should be a map of query parameters you would have normally passed in the URL. Options and pagination are not accepted here; put them in `options` instead. For `POST`, `PATCH`, and `PUT` methods, this should be the content you would have normally put in the data field of the body.
    ///
    /// Example:
    ///
    /// {
    ///   "assignee" : "me",
    ///   "workspace" : "1337"
    /// }
    public struct Data: Codable {
        public init() {}
    }

    /// Pagination (`limit` and `offset`) and output options (`fields` or `expand`) for the action. “Pretty” JSON output is not an available option on individual actions; if you want pretty output, specify that option on the parent request.
    ///
    /// Example:
    ///
    /// {
    ///   "fields" : [
    ///     "name",
    ///     "notes",
    ///     "completed"
    ///   ],
    ///   "limit" : 3
    /// }
    public struct Options: Codable {
        /// Pagination limit for the request.
        ///
        /// Example: 50
        public var limit: Int?
        /// Pagination offset for the request.
        ///
        /// Example: "eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9"
        public var offset: Int?
        /// The fields to retrieve in the request.
        ///
        /// Example: ["name", "gid", "notes", "completed"]
        public var fields: [String]?

        public init(limit: Int? = nil, offset: Int? = nil, fields: [String]? = nil) {
            self.limit = limit
            self.offset = offset
            self.fields = fields
        }
    }

    public init(relativePath: String, method: Method, data: Data? = nil, options: Options? = nil) {
        self.relativePath = relativePath
        self.method = method
        self.data = data
        self.options = options
    }

    private enum CodingKeys: String, CodingKey {
        case relativePath = "relative_path"
        case method
        case data
        case options
    }
}

/// A response object returned from a batch request.
public struct BatchResponse: Codable {
    /// The HTTP status code that the invoked endpoint returned.
    ///
    /// Example: 200
    public var statusCode: Int?
    /// A map of HTTP headers specific to this result. This is primarily used for returning a `Location` header to accompany a `201 Created` result.  The parent HTTP response will contain all common headers.
    ///
    /// Example:
    ///
    /// {
    ///   "location" : "\/tasks\/1234"
    /// }
    public var headers: Headers?
    /// The JSON body that the invoked endpoint returned.
    ///
    /// Example:
    ///
    /// {
    ///   "data" : {
    ///     "completed" : false,
    ///     "gid" : "1967",
    ///     "name" : "Hello, world!",
    ///     "notes" : "How are you today?"
    ///   }
    /// }
    public var body: Body?

    /// A map of HTTP headers specific to this result. This is primarily used for returning a `Location` header to accompany a `201 Created` result.  The parent HTTP response will contain all common headers.
    ///
    /// Example:
    ///
    /// {
    ///   "location" : "\/tasks\/1234"
    /// }
    public struct Headers: Codable {
        public init() {}
    }

    /// The JSON body that the invoked endpoint returned.
    ///
    /// Example:
    ///
    /// {
    ///   "data" : {
    ///     "completed" : false,
    ///     "gid" : "1967",
    ///     "name" : "Hello, world!",
    ///     "notes" : "How are you today?"
    ///   }
    /// }
    public struct Body: Codable {
        public init() {}
    }

    public init(statusCode: Int? = nil, headers: Headers? = nil, body: Body? = nil) {
        self.statusCode = statusCode
        self.headers = headers
        self.body = body
    }

    private enum CodingKeys: String, CodingKey {
        case statusCode = "status_code"
        case headers
        case body
    }
}

public struct CustomFieldResponse: Codable {
    public var customFieldBase: CustomFieldBase
    public var enumValue: EnumValue?
    /// *Conditional*. Only relevant for custom fields of type `multi_enum`. This object is the chosen values of a multi_enum custom field.
    public var multiEnumValues: [EnumOption]?
    public var createdBy: UserCompact?

    public struct EnumValue: Codable {
        public var enumOption: EnumOption

        public init(from decoder: Decoder) throws {
            self.enumOption = try EnumOption(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(enumOption, forKey: "enumOption")
        }
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.customFieldBase = try CustomFieldBase(from: decoder)
        self.enumValue = try EnumValue(from: decoder)
        self.multiEnumValues = try values.decodeIfPresent([EnumOption].self, forKey: "multi_enum_values")
        self.createdBy = try UserCompact(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(customFieldBase, forKey: "customFieldBase")
        try values.encodeIfPresent(enumValue, forKey: "enum_value")
        try values.encodeIfPresent(multiEnumValues, forKey: "multi_enum_values")
        try values.encodeIfPresent(createdBy, forKey: "created_by")
    }
}

public struct CustomFieldRequest: Codable {
    public var customFieldBase: CustomFieldBase
    /// *Create-Only* The workspace to create a custom field in.
    ///
    /// Example: "1331"
    public var workspace: String

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.customFieldBase = try CustomFieldBase(from: decoder)
        self.workspace = try values.decode(String.self, forKey: "workspace")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(customFieldBase, forKey: "customFieldBase")
        try values.encode(workspace, forKey: "workspace")
    }
}

public struct CustomFieldBase: Codable {
    public var customFieldCompact: CustomFieldCompact
    /// [Opt In](/docs/input-output-options). The description of the custom field.
    ///
    /// Example: "Development team priority"
    public var description: String?
    /// *Conditional*. Only relevant for custom fields of type `enum`. This array specifies the possible values which an `enum` custom field can adopt. To modify the enum options, refer to [working with enum options](/docs/create-an-enum-option).
    public var enumOptions: [EnumOption]?
    /// Only relevant for custom fields of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive.
    /// For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%.
    /// The identifier format will always have a precision of 0.
    public var precision: Int?
    /// The format of this custom field.
    ///
    /// Example: "custom"
    public var format: Format?
    /// ISO 4217 currency code to format this custom field. This will be null if the `format` is not `currency`.
    ///
    /// Example: "EUR"
    public var currencyCode: String?
    /// This is the string that appears next to the custom field value. This will be null if the `format` is not `custom`.
    ///
    /// Example: "gold pieces"
    public var customLabel: String?
    /// Only relevant for custom fields with `custom` format. This depicts where to place the custom label. This will be null if the `format` is not `custom`.
    ///
    /// Example: "suffix"
    public var customLabelPosition: CustomLabelPosition?
    /// This flag describes whether this custom field is available to every container in the workspace. Before project-specific custom fields, this field was always true.
    ///
    /// Example: true
    public var isGlobalToWorkspace: Bool?
    /// *Conditional*. This flag describes whether a follower of a task with this field should receive inbox notifications from changes to this field.
    ///
    /// Example: true
    public var hasNotificationsEnabled: Bool?

    /// The format of this custom field.
    ///
    /// Example: "custom"
    public enum Format: String, Codable, CaseIterable {
        case currency
        case identifier
        case percentage
        case custom
        case `none`
    }

    /// Only relevant for custom fields with `custom` format. This depicts where to place the custom label. This will be null if the `format` is not `custom`.
    ///
    /// Example: "suffix"
    public enum CustomLabelPosition: String, Codable, CaseIterable {
        case prefix
        case suffix
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.customFieldCompact = try CustomFieldCompact(from: decoder)
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.enumOptions = try values.decodeIfPresent([EnumOption].self, forKey: "enum_options")
        self.precision = try values.decodeIfPresent(Int.self, forKey: "precision")
        self.format = try Format(from: decoder)
        self.currencyCode = try values.decodeIfPresent(String.self, forKey: "currency_code")
        self.customLabel = try values.decodeIfPresent(String.self, forKey: "custom_label")
        self.customLabelPosition = try CustomLabelPosition(from: decoder)
        self.isGlobalToWorkspace = try values.decodeIfPresent(Bool.self, forKey: "is_global_to_workspace")
        self.hasNotificationsEnabled = try values.decodeIfPresent(Bool.self, forKey: "has_notifications_enabled")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(customFieldCompact, forKey: "customFieldCompact")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(enumOptions, forKey: "enum_options")
        try values.encodeIfPresent(precision, forKey: "precision")
        try values.encodeIfPresent(format, forKey: "format")
        try values.encodeIfPresent(currencyCode, forKey: "currency_code")
        try values.encodeIfPresent(customLabel, forKey: "custom_label")
        try values.encodeIfPresent(customLabelPosition, forKey: "custom_label_position")
        try values.encodeIfPresent(isGlobalToWorkspace, forKey: "is_global_to_workspace")
        try values.encodeIfPresent(hasNotificationsEnabled, forKey: "has_notifications_enabled")
    }
}

public struct CustomFieldCompact: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    /// The name of the custom field.
    ///
    /// Example: "Status"
    public var name: String?
    /// The type of the custom field. Must be one of the given values.
    ///
    /// Example: "text"
    public var resourceSubtype: ResourceSubtype?
    /// *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values.
    public var type: `Type`?
    /// *Conditional*. Only relevant for custom fields of type `enum`. This array specifies the possible values which an `enum` custom field can adopt. To modify the enum options, refer to [working with enum options](/docs/create-an-enum-option).
    public var enumOptions: [EnumOption]?
    /// *Conditional*. Determines if the custom field is enabled or not.
    ///
    /// Example: true
    public var isEnabled: Bool?
    /// *Conditional*. This number is the value of a number custom field.
    ///
    /// Example: 5.2
    public var numberValue: Double?
    /// *Conditional*. This string is the value of a text custom field.
    ///
    /// Example: "Some Value"
    public var textValue: String?
    /// A string representation for the value of the custom field. Integrations that don't require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.
    ///
    /// Example: "blue"
    public var displayValue: String?

    /// The type of the custom field. Must be one of the given values.
    ///
    /// Example: "text"
    public enum ResourceSubtype: String, Codable, CaseIterable {
        case text
        case `enum`
        case multiEnum = "multi_enum"
        case number
    }

    /// *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values.
    public enum `Type`: String, Codable, CaseIterable {
        case text
        case `enum`
        case multiEnum = "multi_enum"
        case number
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.asanaResource = try AsanaResource(from: decoder)
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.resourceSubtype = try ResourceSubtype(from: decoder)
        self.type = try `Type`(from: decoder)
        self.enumOptions = try values.decodeIfPresent([EnumOption].self, forKey: "enum_options")
        self.isEnabled = try values.decodeIfPresent(Bool.self, forKey: "enabled")
        self.numberValue = try values.decodeIfPresent(Double.self, forKey: "number_value")
        self.textValue = try values.decodeIfPresent(String.self, forKey: "text_value")
        self.displayValue = try values.decodeIfPresent(String.self, forKey: "display_value")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(resourceSubtype, forKey: "resource_subtype")
        try values.encodeIfPresent(type, forKey: "type")
        try values.encodeIfPresent(enumOptions, forKey: "enum_options")
        try values.encodeIfPresent(isEnabled, forKey: "enabled")
        try values.encodeIfPresent(numberValue, forKey: "number_value")
        try values.encodeIfPresent(textValue, forKey: "text_value")
        try values.encodeIfPresent(displayValue, forKey: "display_value")
    }
}

public struct CustomFieldSettingResponse: Codable {
    public var customFieldSettingBase: CustomFieldSettingBase
    public var project: Project?
    /// `is_important` is used in the Asana web application to determine if this custom field is displayed in the list/grid view of a project or portfolio.
    ///
    /// Example: false
    public var isImportant: Bool?
    public var parent: Parent?
    public var customField: CustomField?

    public struct Project: Codable {
        public var projectCompact: ProjectCompact

        public init(from decoder: Decoder) throws {
            self.projectCompact = try ProjectCompact(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(projectCompact, forKey: "projectCompact")
        }
    }

    public struct Parent: Codable {
        public var projectCompact: ProjectCompact

        public init(from decoder: Decoder) throws {
            self.projectCompact = try ProjectCompact(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(projectCompact, forKey: "projectCompact")
        }
    }

    public struct CustomField: Codable {
        public var customFieldResponse: CustomFieldResponse

        public init(from decoder: Decoder) throws {
            self.customFieldResponse = try CustomFieldResponse(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(customFieldResponse, forKey: "customFieldResponse")
        }
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.customFieldSettingBase = try CustomFieldSettingBase(from: decoder)
        self.project = try Project(from: decoder)
        self.isImportant = try values.decodeIfPresent(Bool.self, forKey: "is_important")
        self.parent = try Parent(from: decoder)
        self.customField = try CustomField(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(customFieldSettingBase, forKey: "customFieldSettingBase")
        try values.encodeIfPresent(project, forKey: "project")
        try values.encodeIfPresent(isImportant, forKey: "is_important")
        try values.encodeIfPresent(parent, forKey: "parent")
        try values.encodeIfPresent(customField, forKey: "custom_field")
    }
}

public typealias CustomFieldSettingBase = CustomFieldSettingCompact

public struct CustomFieldSettingCompact: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource

    public init(from decoder: Decoder) throws {
        self.asanaResource = try AsanaResource(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
    }
}

/// Example:
///
/// {
///   "dependencies" : [
///     "133713",
///     "184253"
///   ]
/// }
public struct ModifyDependenciesRequest: Codable {
    /// An array of task gids that a task depends on.
    public var dependencies: [String]?

    public init(dependencies: [String]? = nil) {
        self.dependencies = dependencies
    }
}

/// A set of dependent tasks.
///
/// Example:
///
/// {
///   "dependents" : [
///     "133713",
///     "184253"
///   ]
/// }
public struct ModifyDependentsRequest: Codable {
    /// An array of task gids that are dependents of the given task.
    public var dependents: [String]?

    public init(dependents: [String]? = nil) {
        self.dependents = dependents
    }
}

/// An empty object. Some endpoints do not return an object on success. The success is conveyed through a 2-- status code and returning an empty object.
public struct EmptyResponse: Codable {
    public init() {}
}

public struct EnumOptionRequest: Codable {
    public var enumOptionBase: EnumOptionBase
    /// An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.
    ///
    /// Example: "12345"
    public var insertBefore: String?
    /// An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.
    ///
    /// Example: "12345"
    public var insertAfter: String?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.enumOptionBase = try EnumOptionBase(from: decoder)
        self.insertBefore = try values.decodeIfPresent(String.self, forKey: "insert_before")
        self.insertAfter = try values.decodeIfPresent(String.self, forKey: "insert_after")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(enumOptionBase, forKey: "enumOptionBase")
        try values.encodeIfPresent(insertBefore, forKey: "insert_before")
        try values.encodeIfPresent(insertAfter, forKey: "insert_after")
    }
}

public typealias EnumOptionBase = EnumOption

public struct EnumOption: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    /// The name of the enum option.
    ///
    /// Example: "Low"
    public var name: String?
    /// Whether or not the enum option is a selectable value for the custom field.
    ///
    /// Example: true
    public var isEnabled: Bool?
    /// The color of the enum option. Defaults to ‘none’.
    ///
    /// Example: "blue"
    public var color: String?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.asanaResource = try AsanaResource(from: decoder)
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.isEnabled = try values.decodeIfPresent(Bool.self, forKey: "enabled")
        self.color = try values.decodeIfPresent(String.self, forKey: "color")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(isEnabled, forKey: "enabled")
        try values.encodeIfPresent(color, forKey: "color")
    }
}

public struct EnumOptionInsertRequest: Codable {
    /// The gid of the enum option to relocate.
    ///
    /// Example: "97285"
    public var enumOption: String
    /// An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.
    ///
    /// Example: "12345"
    public var beforeEnumOption: String?
    /// An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.
    ///
    /// Example: "12345"
    public var afterEnumOption: String?

    public init(enumOption: String, beforeEnumOption: String? = nil, afterEnumOption: String? = nil) {
        self.enumOption = enumOption
        self.beforeEnumOption = beforeEnumOption
        self.afterEnumOption = afterEnumOption
    }

    private enum CodingKeys: String, CodingKey {
        case enumOption = "enum_option"
        case beforeEnumOption = "before_enum_option"
        case afterEnumOption = "after_enum_option"
    }
}

/// Sadly, sometimes requests to the API are not successful. Failures can
/// occur for a wide range of reasons. In all cases, the API should return
/// an HTTP Status Code that indicates the nature of the failure,
/// with a response body in JSON format containing additional information.
/// 
/// 
/// In the event of a server error the response body will contain an error
/// phrase. These phrases are automatically generated using the
/// [node-asana-phrase
/// library](https://github.com/Asana/node-asana-phrase) and can be used by
/// Asana support to quickly look up the incident that caused the server
/// error.
public struct ErrorResponse: Codable {
    public var errors: [Error]?

    public init(errors: [Error]? = nil) {
        self.errors = errors
    }
}

public struct Error: Codable {
    /// Message providing more detail about the error that occurred, if available.
    ///
    /// Example: "project: Missing input"
    public var message: String?
    /// Additional information directing developers to resources on how to address and fix the problem, if available.
    ///
    /// Example: "For more information on API status codes and how to handle them, read the docs on errors: https://asana.github.io/developer-docs/#errors'"
    public var help: String?
    /// *500 errors only*. A unique error phrase which can be used when contacting developer support to help identify the exact occurrence of the problem in Asana’s logs.
    ///
    /// Example: "6 sad squid snuggle softly"
    public var phrase: String?

    public init(message: String? = nil, help: String? = nil, phrase: String? = nil) {
        self.message = message
        self.help = help
        self.phrase = phrase
    }
}

/// An *event* is an object representing a change to a resource that was
/// observed by an event subscription or delivered asynchronously to
/// the target location of an active webhook.
/// 
/// The event may be triggered by a different `user` than the
/// subscriber. For example, if user A subscribes to a task and user B
/// modified it, the event’s user will be user B. Note: Some events
/// are generated by the system, and will have `null` as the user. API
/// consumers should make sure to handle this case.
/// 
/// The `resource` that triggered the event may be different from the one
/// that the events were requested for or the webhook is subscribed to. For
/// example, a subscription to a project will contain events for tasks
/// contained within the project.
/// 
/// **Note:** pay close attention to the relationship between the fields
/// `Event.action` and `Event.change.action`.
/// `Event.action` represents the action taken on the resource
/// itself, and `Event.change.action` represents how the information
/// within the resource's fields have been modified.
/// 
/// For instance, consider these scenarios:
/// 
/// 
/// * When at task is added to a project, `Event.action` will be
/// `added`, `Event.parent` will be on object with the `id` and
/// `type` of the project, and there will be no `change` field.
/// 
/// 
/// * When an assignee is set on the task, `Event.parent` will be
/// `null`, `Event.action` will be `changed`,
/// `Event.change.action` will be `changed`, and `changed_value` will
/// be an object with the user's `id` and `type`.
/// 
/// 
/// * When a collaborator is added to the task, `Event.parent` will
/// be `null`, `Event.action` will be `changed`,
/// `Event.change.action` will be `added`, and `added_value` will be
/// an object with the user's `id` and `type`.
public struct EventResponse: Codable {
    public var user: User?
    public var resource: Resource?
    /// *Deprecated: Refer to the resource_type of the resource.* The type of the resource that generated the event.
    ///
    /// Example: "task"
    public var type: String?
    /// The type of action taken on the **resource** that triggered the event.  This can be one of `changed`, `added`, `removed`, `deleted`, or `undeleted` depending on the nature of the event.
    ///
    /// Example: "changed"
    public var action: String?
    public var parent: Parent?
    /// The timestamp when the event occurred.
    ///
    /// Example: "2012-02-22T02:06:58.147Z"
    public var createdAt: Date?
    /// Information about the type of change that has occurred. This field is only present when the value of the property `action`, describing the action taken on the **resource**, is `changed`.
    public var change: Change?

    public struct User: Codable {
        public var userCompact: UserCompact
        /// The user who triggered the event.
        public var anyJSON: AnyJSON

        public init(from decoder: Decoder) throws {
            self.userCompact = try UserCompact(from: decoder)
            self.anyJSON = try AnyJSON(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(userCompact, forKey: "userCompact")
            try values.encode(anyJSON, forKey: "anyJSON")
        }
    }

    public struct Resource: Codable {
        public var asanaNamedResource: AsanaNamedResource
        /// The resource which has triggered the event by being modified in some way.
        public var anyJSON: AnyJSON

        public init(from decoder: Decoder) throws {
            self.asanaNamedResource = try AsanaNamedResource(from: decoder)
            self.anyJSON = try AnyJSON(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(asanaNamedResource, forKey: "asanaNamedResource")
            try values.encode(anyJSON, forKey: "anyJSON")
        }
    }

    public struct Parent: Codable {
        public var asanaNamedResource: AsanaNamedResource
        /// For added/removed events, the parent object that resource was added to or removed from. The parent will be `null` for other event types.
        public var anyJSON: AnyJSON

        public init(from decoder: Decoder) throws {
            self.asanaNamedResource = try AsanaNamedResource(from: decoder)
            self.anyJSON = try AnyJSON(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(asanaNamedResource, forKey: "asanaNamedResource")
            try values.encode(anyJSON, forKey: "anyJSON")
        }
    }

    /// Information about the type of change that has occurred. This field is only present when the value of the property `action`, describing the action taken on the **resource**, is `changed`.
    public struct Change: Codable {
        /// The name of the field that has changed in the resource.
        ///
        /// Example: "assignee"
        public var field: String?
        /// The type of action taken on the **field** which has been changed.  This can be one of `changed`, `added`, or `removed` depending on the nature of the change.
        ///
        /// Example: "changed"
        public var action: String?
        /// *Conditional.* This property is only present when the **field's** `action` is `changed` and the `new_value` is an Asana resource. This will be only the `gid` and `resource_type` of the resource when the events come from webhooks; this will be the compact representation (and can have fields expanded with [opt_fields](/docs/input-output-options)) when using the [Events](/docs/asana-events) resource.
        ///
        /// Example:
        ///
        /// {
        ///   "gid" : "12345",
        ///   "resource_type" : "user"
        /// }
        public var newValue: AnyJSON?
        /// *Conditional.* This property is only present when the **field's** `action` is `added` and the `added_value` is an Asana resource. This will be only the `gid` and `resource_type` of the resource when the events come from webhooks; this will be the compact representation (and can have fields expanded with [opt_fields](/docs/input-output-options)) when using the [Events](/docs/asana-events) resource.
        ///
        /// Example:
        ///
        /// {
        ///   "gid" : "12345",
        ///   "resource_type" : "user"
        /// }
        public var addedValue: AnyJSON?
        /// *Conditional.* This property is only present when the **field's** `action` is `removed` and the `removed_value` is an Asana resource. This will be only the `gid` and `resource_type` of the resource when the events come from webhooks; this will be the compact representation (and can have fields expanded with [opt_fields](/docs/input-output-options)) when using the [Events](/docs/asana-events) resource.
        ///
        /// Example:
        ///
        /// {
        ///   "gid" : "12345",
        ///   "resource_type" : "user"
        /// }
        public var removedValue: AnyJSON?

        public init(field: String? = nil, action: String? = nil, newValue: AnyJSON? = nil, addedValue: AnyJSON? = nil, removedValue: AnyJSON? = nil) {
            self.field = field
            self.action = action
            self.newValue = newValue
            self.addedValue = addedValue
            self.removedValue = removedValue
        }

        private enum CodingKeys: String, CodingKey {
            case field
            case action
            case newValue = "new_value"
            case addedValue = "added_value"
            case removedValue = "removed_value"
        }
    }

    public init(user: User? = nil, resource: Resource? = nil, type: String? = nil, action: String? = nil, parent: Parent? = nil, createdAt: Date? = nil, change: Change? = nil) {
        self.user = user
        self.resource = resource
        self.type = type
        self.action = action
        self.parent = parent
        self.createdAt = createdAt
        self.change = change
    }

    private enum CodingKeys: String, CodingKey {
        case user
        case resource
        case type
        case action
        case parent
        case createdAt = "created_at"
        case change
    }
}

public struct GoalResponse: Codable {
    public var goalBase: GoalBase
    /// Array of likes for users who have liked this goal.
    public var likes: [Like]?
    /// The number of users who have liked this goal.
    public var numLikes: Int?
    /// *Conditional*. This property is only present when the `workspace` provided is an organization.
    public var team: Team?
    public var workspace: Workspace?
    /// Array of users following this goal.
    public var followers: [UserCompact]?
    public var timePeriod: TimePeriod?
    public var metric: Metric?
    public var owner: Owner?

    public struct Team: Codable {
        public var teamCompact: TeamCompact

        public init(from decoder: Decoder) throws {
            self.teamCompact = try TeamCompact(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(teamCompact, forKey: "teamCompact")
        }
    }

    public struct Workspace: Codable {
        public var workspaceCompact: WorkspaceCompact

        public init(from decoder: Decoder) throws {
            self.workspaceCompact = try WorkspaceCompact(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(workspaceCompact, forKey: "workspaceCompact")
        }
    }

    public struct TimePeriod: Codable {
        public var timePeriodCompact: TimePeriodCompact

        public init(from decoder: Decoder) throws {
            self.timePeriodCompact = try TimePeriodCompact(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(timePeriodCompact, forKey: "timePeriodCompact")
        }
    }

    public struct Metric: Codable {
        public var goalMetricBase: GoalMetricBase

        public init(from decoder: Decoder) throws {
            self.goalMetricBase = try GoalMetricBase(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(goalMetricBase, forKey: "goalMetricBase")
        }
    }

    public struct Owner: Codable {
        public var userCompact: UserCompact

        public init(from decoder: Decoder) throws {
            self.userCompact = try UserCompact(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(userCompact, forKey: "userCompact")
        }
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.goalBase = try GoalBase(from: decoder)
        self.likes = try values.decodeIfPresent([Like].self, forKey: "likes")
        self.numLikes = try values.decodeIfPresent(Int.self, forKey: "num_likes")
        self.team = try Team(from: decoder)
        self.workspace = try Workspace(from: decoder)
        self.followers = try values.decodeIfPresent([UserCompact].self, forKey: "followers")
        self.timePeriod = try TimePeriod(from: decoder)
        self.metric = try Metric(from: decoder)
        self.owner = try Owner(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(goalBase, forKey: "goalBase")
        try values.encodeIfPresent(likes, forKey: "likes")
        try values.encodeIfPresent(numLikes, forKey: "num_likes")
        try values.encodeIfPresent(team, forKey: "team")
        try values.encodeIfPresent(workspace, forKey: "workspace")
        try values.encodeIfPresent(followers, forKey: "followers")
        try values.encodeIfPresent(timePeriod, forKey: "time_period")
        try values.encodeIfPresent(metric, forKey: "metric")
        try values.encodeIfPresent(owner, forKey: "owner")
    }
}

public struct GoalRequest: Codable {
    public var goalBase: GoalBase
    /// *Conditional*. This property is only present when the `workspace` provided is an organization.
    ///
    /// Example: "12345"
    public var team: String?
    /// The `gid` of a workspace.
    ///
    /// Example: "12345"
    public var workspace: String?
    /// Example: ["12345"]
    public var followers: [String]?
    /// The `gid` of a time period.
    ///
    /// Example: "12345"
    public var timePeriod: String?
    /// The `gid` of a user.
    ///
    /// Example: "12345"
    public var owner: String?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.goalBase = try GoalBase(from: decoder)
        self.team = try values.decodeIfPresent(String.self, forKey: "team")
        self.workspace = try values.decodeIfPresent(String.self, forKey: "workspace")
        self.followers = try values.decodeIfPresent([String].self, forKey: "followers")
        self.timePeriod = try values.decodeIfPresent(String.self, forKey: "time_period")
        self.owner = try values.decodeIfPresent(String.self, forKey: "owner")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(goalBase, forKey: "goalBase")
        try values.encodeIfPresent(team, forKey: "team")
        try values.encodeIfPresent(workspace, forKey: "workspace")
        try values.encodeIfPresent(followers, forKey: "followers")
        try values.encodeIfPresent(timePeriod, forKey: "time_period")
        try values.encodeIfPresent(owner, forKey: "owner")
    }
}

public struct GoalBase: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    /// The name of the goal.
    ///
    /// Example: "Grow web traffic by 30%"
    public var name: String?
    /// The notes of the goal with formatting as HTML.
    ///
    /// Example: "<body>Start building brand awareness.</body>"
    public var htmlNotes: String?
    /// Free-form textual information associated with the goal (i.e. its description).
    ///
    /// Example: "Start building brand awareness."
    public var notes: String?
    /// The localized day on which this goal is due. This takes a date with format `YYYY-MM-DD`.
    ///
    /// Example: "2019-09-15"
    public var dueOn: String?
    /// The day on which work for this goal begins, or null if the goal has no start date. This takes a date with `YYYY-MM-DD` format, and cannot be set unless there is an accompanying due date.
    ///
    /// Example: "2019-09-14"
    public var startOn: String?
    /// The current status of this goal. When the goal is open, its status can be `green`, `yellow`, and `red` to reflect "On Track", "At Risk", and "Off Track", respectively. When the goal is closed, the value can be `missed`, `achieved`, `partial`, or `dropped`.
    /// *Note* you can only write to this property if `metric` is set.
    ///
    /// Example: "green"
    public var status: String?
    /// *Conditional*. This property is only present when the `workspace` provided is an organization. Whether the goal belongs to the `workspace` (and is listed as part of the workspace’s goals) or not. If it isn’t a workspace-level goal, it is a team-level goal, and is associated with the goal’s team.
    ///
    /// Example: true
    public var isWorkspaceLevel: Bool?
    /// True if the goal is liked by the authorized user, false if not.
    ///
    /// Example: false
    public var isLiked: Bool?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.asanaResource = try AsanaResource(from: decoder)
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.htmlNotes = try values.decodeIfPresent(String.self, forKey: "html_notes")
        self.notes = try values.decodeIfPresent(String.self, forKey: "notes")
        self.dueOn = try values.decodeIfPresent(String.self, forKey: "due_on")
        self.startOn = try values.decodeIfPresent(String.self, forKey: "start_on")
        self.status = try values.decodeIfPresent(String.self, forKey: "status")
        self.isWorkspaceLevel = try values.decodeIfPresent(Bool.self, forKey: "is_workspace_level")
        self.isLiked = try values.decodeIfPresent(Bool.self, forKey: "liked")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(htmlNotes, forKey: "html_notes")
        try values.encodeIfPresent(notes, forKey: "notes")
        try values.encodeIfPresent(dueOn, forKey: "due_on")
        try values.encodeIfPresent(startOn, forKey: "start_on")
        try values.encodeIfPresent(status, forKey: "status")
        try values.encodeIfPresent(isWorkspaceLevel, forKey: "is_workspace_level")
        try values.encodeIfPresent(isLiked, forKey: "liked")
    }
}

public struct GoalCompact: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    /// The name of the goal.
    ///
    /// Example: "Grow web traffic by 30%"
    public var name: String?
    public var owner: Owner?

    public struct Owner: Codable {
        public var userCompact: UserCompact

        public init(from decoder: Decoder) throws {
            self.userCompact = try UserCompact(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(userCompact, forKey: "userCompact")
        }
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.asanaResource = try AsanaResource(from: decoder)
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.owner = try Owner(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(owner, forKey: "owner")
    }
}

public struct GoalMetricCurrentValueRequest: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    /// *Conditional*. This number is the current value of a goal metric of type number.
    ///
    /// Example: 8.12
    public var currentNumberValue: Double?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.asanaResource = try AsanaResource(from: decoder)
        self.currentNumberValue = try values.decodeIfPresent(Double.self, forKey: "current_number_value")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(currentNumberValue, forKey: "current_number_value")
    }
}

public typealias GoalMetricRequest = GoalMetricBase

public struct GoalMetricBase: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    /// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
    ///
    /// Example: "number"
    public var resourceSubtype: ResourceSubtype?
    /// *Conditional*. Only relevant for goal metrics of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive.
    /// For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%.
    public var precision: Int?
    /// A supported unit of measure for the goal metric, or none.
    public var unit: Unit?
    /// ISO 4217 currency code to format this custom field. This will be null if the `unit` is not `currency`.
    ///
    /// Example: "EUR"
    public var currencyCode: String?
    /// This number is the start value of a goal metric of type number.
    ///
    /// Example: 5.2
    public var initialNumberValue: Double?
    /// This number is the end value of a goal metric of type number. This number cannot equal `initial_number_value`.
    ///
    /// Example: 10.2
    public var targetNumberValue: Double?
    /// This number is the current value of a goal metric of type number.
    ///
    /// Example: 8.12
    public var currentNumberValue: Double?
    /// This string is the current value of a goal metric of type string.
    ///
    /// Example: "8.12"
    public var currentDisplayValue: String?

    /// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
    ///
    /// Example: "number"
    public enum ResourceSubtype: String, Codable, CaseIterable {
        case number
    }

    /// A supported unit of measure for the goal metric, or none.
    public enum Unit: String, Codable, CaseIterable {
        case `none`
        case currency
        case percentage
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.asanaResource = try AsanaResource(from: decoder)
        self.resourceSubtype = try ResourceSubtype(from: decoder)
        self.precision = try values.decodeIfPresent(Int.self, forKey: "precision")
        self.unit = try Unit(from: decoder)
        self.currencyCode = try values.decodeIfPresent(String.self, forKey: "currency_code")
        self.initialNumberValue = try values.decodeIfPresent(Double.self, forKey: "initial_number_value")
        self.targetNumberValue = try values.decodeIfPresent(Double.self, forKey: "target_number_value")
        self.currentNumberValue = try values.decodeIfPresent(Double.self, forKey: "current_number_value")
        self.currentDisplayValue = try values.decodeIfPresent(String.self, forKey: "current_display_value")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(resourceSubtype, forKey: "resource_subtype")
        try values.encodeIfPresent(precision, forKey: "precision")
        try values.encodeIfPresent(unit, forKey: "unit")
        try values.encodeIfPresent(currencyCode, forKey: "currency_code")
        try values.encodeIfPresent(initialNumberValue, forKey: "initial_number_value")
        try values.encodeIfPresent(targetNumberValue, forKey: "target_number_value")
        try values.encodeIfPresent(currentNumberValue, forKey: "current_number_value")
        try values.encodeIfPresent(currentDisplayValue, forKey: "current_display_value")
    }
}

public struct GoalAddSubgoalRequest: Codable {
    /// The goal gid to add as subgoal to a parent goal
    ///
    /// Example: "1331"
    public var subgoal: String
    /// An id of a subgoal of this parent goal. The new subgoal will be added before the one specified here. `insert_before` and `insert_after` parameters cannot both be specified.
    ///
    /// Example: "1331"
    public var insertBefore: String?
    /// An id of a subgoal of this parent goal. The new subgoal will be added after the one specified here. `insert_before` and `insert_after` parameters cannot both be specified.
    ///
    /// Example: "1331"
    public var insertAfter: String?

    public init(subgoal: String, insertBefore: String? = nil, insertAfter: String? = nil) {
        self.subgoal = subgoal
        self.insertBefore = insertBefore
        self.insertAfter = insertAfter
    }

    private enum CodingKeys: String, CodingKey {
        case subgoal
        case insertBefore = "insert_before"
        case insertAfter = "insert_after"
    }
}

public struct GoalRemoveSubgoalRequest: Codable {
    /// The goal gid to remove as subgoal from the parent goal
    ///
    /// Example: "1331"
    public var subgoal: String

    public init(subgoal: String) {
        self.subgoal = subgoal
    }
}

public struct GoalAddSupportingWorkRequest: Codable {
    /// The project/portfolio gid to add as supporting work for a goal
    ///
    /// Example: "1331"
    public var supportingWork: String

    public init(supportingWork: String) {
        self.supportingWork = supportingWork
    }

    private enum CodingKeys: String, CodingKey {
        case supportingWork = "supporting_work"
    }
}

public typealias JobResponse = JobBase

public typealias JobBase = JobCompact

public struct JobCompact: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    /// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
    ///
    /// Example: "duplicate_task"
    public var resourceSubtype: String?
    /// The current status of this job. The value is one of: `not_started`, `in_progress`, `completed`, or `failed`.
    ///
    /// Example: "in_progress"
    public var status: Status?
    public var newProject: ProjectCompact?
    public var newTask: TaskCompact?

    /// The current status of this job. The value is one of: `not_started`, `in_progress`, `completed`, or `failed`.
    ///
    /// Example: "in_progress"
    public enum Status: String, Codable, CaseIterable {
        case notStarted = "not_started"
        case inProgress = "in_progress"
        case completed
        case failed
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.asanaResource = try AsanaResource(from: decoder)
        self.resourceSubtype = try values.decodeIfPresent(String.self, forKey: "resource_subtype")
        self.status = try Status(from: decoder)
        self.newProject = try ProjectCompact(from: decoder)
        self.newTask = try TaskCompact(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(resourceSubtype, forKey: "resource_subtype")
        try values.encodeIfPresent(status, forKey: "status")
        try values.encodeIfPresent(newProject, forKey: "new_project")
        try values.encodeIfPresent(newTask, forKey: "new_task")
    }
}

/// An object to represent a user's like.
public struct Like: Codable {
    /// Globally unique identifier of the object, as a string.
    ///
    /// Example: "12345"
    public var gid: String?
    public var user: UserCompact?

    public init(gid: String? = nil, user: UserCompact? = nil) {
        self.gid = gid
        self.user = user
    }
}

/// An *organization_export* request starts a job to export the complete data of the given Organization.
public struct OrganizationExportRequest: Codable {
    /// Globally unique identifier for the workspace or organization.
    ///
    /// Example: "1331"
    public var organization: String?

    public init(organization: String? = nil) {
        self.organization = organization
    }
}

public typealias OrganizationExportResponse = OrganizationExportBase

public typealias OrganizationExportBase = OrganizationExportCompact

public struct OrganizationExportCompact: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    /// The time at which this resource was created.
    ///
    /// Example: "2012-02-22T02:06:58.147Z"
    public var createdAt: Date?
    /// Download this URL to retreive the full export of the organization
    /// in JSON format. It will be compressed in a gzip (.gz) container.
    /// 
    /// *Note: May be null if the export is still in progress or
    /// failed.  If present, this URL may only be valid for 1 hour from
    /// the time of retrieval. You should avoid persisting this URL
    /// somewhere and rather refresh on demand to ensure you do not keep
    /// stale URLs.*
    ///
    /// Example: "https://asana-export.s3.amazonaws.com/export-4632784536274-20170127-43246.json.gz?AWSAccessKeyId=xxxxxxxx"
    public var downloadURL: URL?
    /// The current state of the export.
    ///
    /// Example: "started"
    public var state: State?
    public var organization: WorkspaceCompact?

    /// The current state of the export.
    ///
    /// Example: "started"
    public enum State: String, Codable, CaseIterable {
        case pending
        case started
        case finished
        case error
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.asanaResource = try AsanaResource(from: decoder)
        self.createdAt = try values.decodeIfPresent(Date.self, forKey: "created_at")
        self.downloadURL = try values.decodeIfPresent(URL.self, forKey: "download_url")
        self.state = try State(from: decoder)
        self.organization = try WorkspaceCompact(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(createdAt, forKey: "created_at")
        try values.encodeIfPresent(downloadURL, forKey: "download_url")
        try values.encodeIfPresent(state, forKey: "state")
        try values.encodeIfPresent(organization, forKey: "organization")
    }
}

public struct PortfolioResponse: Codable {
    public var portfolioBase: PortfolioBase
    /// The time at which this resource was created.
    ///
    /// Example: "2012-02-22T02:06:58.147Z"
    public var createdAt: Date?
    public var createdBy: UserCompact?
    /// Array of custom field settings applied to the portfolio.
    public var customFieldSettings: [CustomFieldSettingResponse]?
    /// The localized day on which this portfolio is due. This takes a date with format YYYY-MM-DD.
    ///
    /// Example: "2019-09-15"
    public var dueOn: Date?
    public var members: [UserCompact]?
    public var owner: UserCompact?
    /// The day on which work for this portfolio begins, or null if the portfolio has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, start_on and due_on cannot be the same date.*
    ///
    /// Example: "2019-09-14"
    public var startOn: NaiveDate?
    public var workspace: Workspace?
    /// A url that points directly to the object within Asana.
    ///
    /// Example: "https://app.asana.com/0/resource/123456789/list"
    public var permalinkURL: String?

    public struct Workspace: Codable {
        public var workspaceCompact: WorkspaceCompact

        public init(from decoder: Decoder) throws {
            self.workspaceCompact = try WorkspaceCompact(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(workspaceCompact, forKey: "workspaceCompact")
        }
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.portfolioBase = try PortfolioBase(from: decoder)
        self.createdAt = try values.decodeIfPresent(Date.self, forKey: "created_at")
        self.createdBy = try UserCompact(from: decoder)
        self.customFieldSettings = try values.decodeIfPresent([CustomFieldSettingResponse].self, forKey: "custom_field_settings")
        self.dueOn = try values.decodeIfPresent(Date.self, forKey: "due_on")
        self.members = try values.decodeIfPresent([UserCompact].self, forKey: "members")
        self.owner = try UserCompact(from: decoder)
        self.startOn = try values.decodeIfPresent(NaiveDate.self, forKey: "start_on")
        self.workspace = try Workspace(from: decoder)
        self.permalinkURL = try values.decodeIfPresent(String.self, forKey: "permalink_url")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(portfolioBase, forKey: "portfolioBase")
        try values.encodeIfPresent(createdAt, forKey: "created_at")
        try values.encodeIfPresent(createdBy, forKey: "created_by")
        try values.encodeIfPresent(customFieldSettings, forKey: "custom_field_settings")
        try values.encodeIfPresent(dueOn, forKey: "due_on")
        try values.encodeIfPresent(members, forKey: "members")
        try values.encodeIfPresent(owner, forKey: "owner")
        try values.encodeIfPresent(startOn, forKey: "start_on")
        try values.encodeIfPresent(workspace, forKey: "workspace")
        try values.encodeIfPresent(permalinkURL, forKey: "permalink_url")
    }
}

public struct PortfolioRequest: Codable {
    public var portfolioBase: PortfolioBase
    /// An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
    ///
    /// Example: ["52164", "15363"]
    public var members: [String]?
    /// Gid of an object.
    ///
    /// Example: "167589"
    public var workspace: String?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.portfolioBase = try PortfolioBase(from: decoder)
        self.members = try values.decodeIfPresent([String].self, forKey: "members")
        self.workspace = try values.decodeIfPresent(String.self, forKey: "workspace")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(portfolioBase, forKey: "portfolioBase")
        try values.encodeIfPresent(members, forKey: "members")
        try values.encodeIfPresent(workspace, forKey: "workspace")
    }
}

public struct PortfolioBase: Codable {
    public var portfolioCompact: PortfolioCompact
    /// Color of the portfolio.
    ///
    /// Example: "light-green"
    public var color: Color?

    /// Color of the portfolio.
    ///
    /// Example: "light-green"
    public enum Color: String, Codable, CaseIterable {
        case darkPink = "dark-pink"
        case darkGreen = "dark-green"
        case darkBlue = "dark-blue"
        case darkRed = "dark-red"
        case darkTeal = "dark-teal"
        case darkBrown = "dark-brown"
        case darkOrange = "dark-orange"
        case darkPurple = "dark-purple"
        case darkWarmGray = "dark-warm-gray"
        case lightPink = "light-pink"
        case lightGreen = "light-green"
        case lightBlue = "light-blue"
        case lightRed = "light-red"
        case lightTeal = "light-teal"
        case lightBrown = "light-brown"
        case lightOrange = "light-orange"
        case lightPurple = "light-purple"
        case lightWarmGray = "light-warm-gray"
    }

    public init(from decoder: Decoder) throws {
        self.portfolioCompact = try PortfolioCompact(from: decoder)
        self.color = try Color(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(portfolioCompact, forKey: "portfolioCompact")
        try values.encodeIfPresent(color, forKey: "color")
    }
}

public struct PortfolioCompact: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    /// The name of the portfolio.
    ///
    /// Example: "Bug Portfolio"
    public var name: String?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.asanaResource = try AsanaResource(from: decoder)
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(name, forKey: "name")
    }
}

public struct PortfolioAddItemRequest: Codable {
    /// The item to add to the portfolio.
    ///
    /// Example: "1331"
    public var item: String
    /// An id of an item in this portfolio. The new item will be added before the one specified here. `insert_before` and `insert_after` parameters cannot both be specified.
    ///
    /// Example: "1331"
    public var insertBefore: String?
    /// An id of an item in this portfolio. The new item will be added after the one specified here. `insert_before` and `insert_after` parameters cannot both be specified.
    ///
    /// Example: "1331"
    public var insertAfter: String?

    public init(item: String, insertBefore: String? = nil, insertAfter: String? = nil) {
        self.item = item
        self.insertBefore = insertBefore
        self.insertAfter = insertAfter
    }

    private enum CodingKeys: String, CodingKey {
        case item
        case insertBefore = "insert_before"
        case insertAfter = "insert_after"
    }
}

public struct PortfolioRemoveItemRequest: Codable {
    /// The item to remove from the portfolio.
    ///
    /// Example: "1331"
    public var item: String

    public init(item: String) {
        self.item = item
    }
}

public struct AddMembersRequest: Codable {
    /// An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
    ///
    /// Example: "521621,621373"
    public var members: String

    public init(members: String) {
        self.members = members
    }
}

public struct RemoveMembersRequest: Codable {
    /// An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
    ///
    /// Example: "521621,621373"
    public var members: String

    public init(members: String) {
        self.members = members
    }
}

public struct AddFollowersRequest: Codable {
    /// An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
    ///
    /// Example: "521621,621373"
    public var followers: String

    public init(followers: String) {
        self.followers = followers
    }
}

public struct RemoveFollowersRequest: Codable {
    /// An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
    ///
    /// Example: "521621,621373"
    public var followers: String

    public init(followers: String) {
        self.followers = followers
    }
}

public typealias PortfolioMembershipResponse = PortfolioMembershipBase

public typealias PortfolioMembershipBase = PortfolioMembershipCompact

public struct PortfolioMembershipCompact: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    public var portfolio: PortfolioCompact?
    public var user: UserCompact?

    public init(from decoder: Decoder) throws {
        self.asanaResource = try AsanaResource(from: decoder)
        self.portfolio = try PortfolioCompact(from: decoder)
        self.user = try UserCompact(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(portfolio, forKey: "portfolio")
        try values.encodeIfPresent(user, forKey: "user")
    }
}

/// A collection of rich text that will be displayed as a preview to another app.
/// 
/// This is read-only except for a small group of whitelisted apps.
public struct Preview: Codable {
    /// Some fallback text to display if unable to display the full preview.
    ///
    /// Example: "Greg: Great! I like this idea.\n\nhttps//a_company.slack.com/archives/ABCDEFG/12345678"
    public var fallback: String?
    /// Text to display in the footer.
    ///
    /// Example: "Mar 17, 2019 1:25 PM"
    public var footer: String?
    /// Text to display in the header.
    ///
    /// Example: "Asana for Slack"
    public var header: String?
    /// Where the header will link to.
    ///
    /// Example: "https://asana.comn/apps/slack"
    public var headerLink: String?
    /// HTML formatted text for the body of the preview.
    ///
    /// Example: "<body>Great! I like this idea.</body>"
    public var htmlText: String?
    /// Text for the body of the preview.
    ///
    /// Example: "Great! I like this idea."
    public var text: String?
    /// Text to display as the title.
    ///
    /// Example: "Greg"
    public var title: String?
    /// Where to title will link to.
    ///
    /// Example: "https://asana.slack.com/archives/ABCDEFG/12345678"
    public var titleLink: String?

    public init(fallback: String? = nil, footer: String? = nil, header: String? = nil, headerLink: String? = nil, htmlText: String? = nil, text: String? = nil, title: String? = nil, titleLink: String? = nil) {
        self.fallback = fallback
        self.footer = footer
        self.header = header
        self.headerLink = headerLink
        self.htmlText = htmlText
        self.text = text
        self.title = title
        self.titleLink = titleLink
    }

    private enum CodingKeys: String, CodingKey {
        case fallback
        case footer
        case header
        case headerLink = "header_link"
        case htmlText = "html_text"
        case text
        case title
        case titleLink = "title_link"
    }
}

public struct ProjectResponse: Codable {
    public var projectBase: ProjectBase
    /// Array of Custom Fields.
    public var customFields: [CustomFieldCompact]?
    /// Array of users following this project. Followers are a subset of members who have opted in to receive "tasks added" notifications for a project.
    public var followers: [UserCompact]?
    /// The current owner of the project, may be null.
    public var owner: Owner?
    public var team: Team?
    /// The icon for a project.
    ///
    /// Example: "chat_bubbles"
    public var icon: Icon?
    /// A url that points directly to the object within Asana.
    ///
    /// Example: "https://app.asana.com/0/resource/123456789/list"
    public var permalinkURL: String?

    public struct Owner: Codable {
        public var userCompact: UserCompact

        public init(from decoder: Decoder) throws {
            self.userCompact = try UserCompact(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(userCompact, forKey: "userCompact")
        }
    }

    public struct Team: Codable {
        public var teamCompact: TeamCompact

        public init(from decoder: Decoder) throws {
            self.teamCompact = try TeamCompact(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(teamCompact, forKey: "teamCompact")
        }
    }

    /// The icon for a project.
    ///
    /// Example: "chat_bubbles"
    public enum Icon: String, Codable, CaseIterable {
        case list
        case board
        case timeline
        case calendar
        case rocket
        case people
        case graph
        case star
        case bug
        case lightBulb = "light_bulb"
        case globe
        case gear
        case notebook
        case computer
        case check
        case target
        case html
        case megaphone
        case chatBubbles = "chat_bubbles"
        case briefcase
        case pageLayout = "page_layout"
        case mountainFlag = "mountain_flag"
        case puzzle
        case presentation
        case lineAndSymbols = "line_and_symbols"
        case speedDial = "speed_dial"
        case ribbon
        case shoe
        case shoppingBasket = "shopping_basket"
        case map
        case ticket
        case coins
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.projectBase = try ProjectBase(from: decoder)
        self.customFields = try values.decodeIfPresent([CustomFieldCompact].self, forKey: "custom_fields")
        self.followers = try values.decodeIfPresent([UserCompact].self, forKey: "followers")
        self.owner = try Owner(from: decoder)
        self.team = try Team(from: decoder)
        self.icon = try Icon(from: decoder)
        self.permalinkURL = try values.decodeIfPresent(String.self, forKey: "permalink_url")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(projectBase, forKey: "projectBase")
        try values.encodeIfPresent(customFields, forKey: "custom_fields")
        try values.encodeIfPresent(followers, forKey: "followers")
        try values.encodeIfPresent(owner, forKey: "owner")
        try values.encodeIfPresent(team, forKey: "team")
        try values.encodeIfPresent(icon, forKey: "icon")
        try values.encodeIfPresent(permalinkURL, forKey: "permalink_url")
    }
}

public struct ProjectRequest: Codable {
    public var projectBase: ProjectBase
    /// An object where each key is a Custom Field gid and each value is an enum gid, string, or number.
    ///
    /// Example:
    ///
    /// {
    ///   "4578152156" : "Not Started",
    ///   "5678904321" : "On Hold"
    /// }
    public var customFields: [String: String]?
    /// *Create-only*. Comma separated string of users. Followers are a subset of members who have opted in to receive "tasks added" notifications for a project.
    ///
    /// Example: "12345,23456"
    public var followers: String?
    /// The current owner of the project, may be null.
    ///
    /// Example: "12345"
    public var owner: String?
    /// *Create-only*. The team that this project is shared with. This field only exists for projects in organizations.
    ///
    /// Example: "12345"
    public var team: String?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.projectBase = try ProjectBase(from: decoder)
        self.customFields = try values.decodeIfPresent([String: String].self, forKey: "custom_fields")
        self.followers = try values.decodeIfPresent(String.self, forKey: "followers")
        self.owner = try values.decodeIfPresent(String.self, forKey: "owner")
        self.team = try values.decodeIfPresent(String.self, forKey: "team")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(projectBase, forKey: "projectBase")
        try values.encodeIfPresent(customFields, forKey: "custom_fields")
        try values.encodeIfPresent(followers, forKey: "followers")
        try values.encodeIfPresent(owner, forKey: "owner")
        try values.encodeIfPresent(team, forKey: "team")
    }
}

public struct ProjectBase: Codable {
    public var projectCompact: ProjectCompact
    /// True if the project is archived, false if not. Archived projects do not show in the UI by default and may be treated differently for queries.
    ///
    /// Example: false
    public var isArchived: Bool?
    /// Color of the project.
    ///
    /// Example: "light-green"
    public var color: Color?
    /// The time at which this resource was created.
    ///
    /// Example: "2012-02-22T02:06:58.147Z"
    public var createdAt: Date?
    public var currentStatus: CurrentStatus?
    /// Array of Custom Field Settings (in compact form).
    public var customFieldSettings: [CustomFieldSettingCompact]?
    /// The default view (list, board, calendar, or timeline) of a project.
    ///
    /// Example: "calendar"
    public var defaultView: DefaultView?
    /// *Deprecated: new integrations should prefer the due_on field.*
    ///
    /// Example: "2019-09-15"
    public var dueDate: Date?
    /// The day on which this project is due. This takes a date with format YYYY-MM-DD.
    ///
    /// Example: "2019-09-15"
    public var dueOn: Date?
    /// [Opt In](/docs/input-output-options). The notes of the project with formatting as HTML.
    ///
    /// Example: "<body>These are things we need to purchase.</body>"
    public var htmlNotes: String?
    /// [Opt In](/docs/input-output-options). Determines if the project is a template.
    ///
    /// Example: false
    public var isTemplate: Bool?
    /// Array of users who are members of this project.
    public var members: [UserCompact]?
    /// The time at which this project was last modified.
    /// *Note: This does not currently reflect any changes in associations such as tasks or comments that may have been added or removed from the project.*
    ///
    /// Example: "2012-02-22T02:06:58.147Z"
    public var modifiedAt: Date?
    /// Free-form textual information associated with the project (ie., its description).
    ///
    /// Example: "These are things we need to purchase."
    public var notes: String?
    /// True if the project is public to its team.
    ///
    /// Example: false
    public var isPublic: Bool?
    /// The day on which work for this project begins, or null if the project has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, start_on and due_on cannot be the same date.*
    ///
    /// Example: "2019-09-14"
    public var startOn: NaiveDate?
    public var workspace: Workspace?

    /// Color of the project.
    ///
    /// Example: "light-green"
    public enum Color: String, Codable, CaseIterable {
        case darkPink = "dark-pink"
        case darkGreen = "dark-green"
        case darkBlue = "dark-blue"
        case darkRed = "dark-red"
        case darkTeal = "dark-teal"
        case darkBrown = "dark-brown"
        case darkOrange = "dark-orange"
        case darkPurple = "dark-purple"
        case darkWarmGray = "dark-warm-gray"
        case lightPink = "light-pink"
        case lightGreen = "light-green"
        case lightBlue = "light-blue"
        case lightRed = "light-red"
        case lightTeal = "light-teal"
        case lightBrown = "light-brown"
        case lightOrange = "light-orange"
        case lightPurple = "light-purple"
        case lightWarmGray = "light-warm-gray"
    }

    public struct CurrentStatus: Codable {
        public var projectStatusResponse: ProjectStatusResponse

        public init(from decoder: Decoder) throws {
            self.projectStatusResponse = try ProjectStatusResponse(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(projectStatusResponse, forKey: "projectStatusResponse")
        }
    }

    /// The default view (list, board, calendar, or timeline) of a project.
    ///
    /// Example: "calendar"
    public enum DefaultView: String, Codable, CaseIterable {
        case list
        case board
        case calendar
        case timeline
    }

    public struct Workspace: Codable {
        public var workspaceCompact: WorkspaceCompact

        public init(from decoder: Decoder) throws {
            self.workspaceCompact = try WorkspaceCompact(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(workspaceCompact, forKey: "workspaceCompact")
        }
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.projectCompact = try ProjectCompact(from: decoder)
        self.isArchived = try values.decodeIfPresent(Bool.self, forKey: "archived")
        self.color = try Color(from: decoder)
        self.createdAt = try values.decodeIfPresent(Date.self, forKey: "created_at")
        self.currentStatus = try CurrentStatus(from: decoder)
        self.customFieldSettings = try values.decodeIfPresent([CustomFieldSettingCompact].self, forKey: "custom_field_settings")
        self.defaultView = try DefaultView(from: decoder)
        self.dueDate = try values.decodeIfPresent(Date.self, forKey: "due_date")
        self.dueOn = try values.decodeIfPresent(Date.self, forKey: "due_on")
        self.htmlNotes = try values.decodeIfPresent(String.self, forKey: "html_notes")
        self.isTemplate = try values.decodeIfPresent(Bool.self, forKey: "is_template")
        self.members = try values.decodeIfPresent([UserCompact].self, forKey: "members")
        self.modifiedAt = try values.decodeIfPresent(Date.self, forKey: "modified_at")
        self.notes = try values.decodeIfPresent(String.self, forKey: "notes")
        self.isPublic = try values.decodeIfPresent(Bool.self, forKey: "public")
        self.startOn = try values.decodeIfPresent(NaiveDate.self, forKey: "start_on")
        self.workspace = try Workspace(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(projectCompact, forKey: "projectCompact")
        try values.encodeIfPresent(isArchived, forKey: "archived")
        try values.encodeIfPresent(color, forKey: "color")
        try values.encodeIfPresent(createdAt, forKey: "created_at")
        try values.encodeIfPresent(currentStatus, forKey: "current_status")
        try values.encodeIfPresent(customFieldSettings, forKey: "custom_field_settings")
        try values.encodeIfPresent(defaultView, forKey: "default_view")
        try values.encodeIfPresent(dueDate, forKey: "due_date")
        try values.encodeIfPresent(dueOn, forKey: "due_on")
        try values.encodeIfPresent(htmlNotes, forKey: "html_notes")
        try values.encodeIfPresent(isTemplate, forKey: "is_template")
        try values.encodeIfPresent(members, forKey: "members")
        try values.encodeIfPresent(modifiedAt, forKey: "modified_at")
        try values.encodeIfPresent(notes, forKey: "notes")
        try values.encodeIfPresent(isPublic, forKey: "public")
        try values.encodeIfPresent(startOn, forKey: "start_on")
        try values.encodeIfPresent(workspace, forKey: "workspace")
    }
}

public struct ProjectCompact: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    /// Name of the project. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
    ///
    /// Example: "Stuff to buy"
    public var name: String?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.asanaResource = try AsanaResource(from: decoder)
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(name, forKey: "name")
    }
}

public struct ProjectDuplicateRequest: Codable {
    /// The name of the new project.
    ///
    /// Example: "New Project Name"
    public var name: String
    /// Sets the team of the new project. If team is not defined, the new project will be in the same team as the the original project.
    ///
    /// Example: "12345"
    public var team: String?
    /// The elements that will be duplicated to the new project. Tasks are always included.
    ///
    /// Example: ["members", "task_notes"]
    public var include: Include?
    /// A dictionary of options to auto-shift dates. `task_dates` must be included to use this option. Requires either `start_on` or `due_on`, but not both.
    public var scheduleDates: ScheduleDates?

    /// The elements that will be duplicated to the new project. Tasks are always included.
    ///
    /// Example: ["members", "task_notes"]
    public enum Include: String, Codable, CaseIterable {
        case members
        case notes
        case forms
        case taskNotes = "task_notes"
        case taskAssignee = "task_assignee"
        case taskSubtasks = "task_subtasks"
        case taskAttachments = "task_attachments"
        case taskDates = "task_dates"
        case taskDependencies = "task_dependencies"
        case taskFollowers = "task_followers"
        case taskTags = "task_tags"
        case taskProjects = "task_projects"
    }

    /// A dictionary of options to auto-shift dates. `task_dates` must be included to use this option. Requires either `start_on` or `due_on`, but not both.
    public struct ScheduleDates: Codable {
        /// Determines if the auto-shifted dates should skip weekends.
        ///
        /// Example: true
        public var shouldSkipWeekends: Bool
        /// Sets the last due date in the duplicated project to the given date. The rest of the due dates will be offset by the same amount as the due dates in the original project.
        ///
        /// Example: "2019-05-21"
        public var dueOn: String?
        /// Sets the first start date in the duplicated project to the given date. The rest of the start dates will be offset by the same amount as the start dates in the original project.
        ///
        /// Example: "2019-05-21"
        public var startOn: String?

        public init(shouldSkipWeekends: Bool, dueOn: String? = nil, startOn: String? = nil) {
            self.shouldSkipWeekends = shouldSkipWeekends
            self.dueOn = dueOn
            self.startOn = startOn
        }

        private enum CodingKeys: String, CodingKey {
            case shouldSkipWeekends = "should_skip_weekends"
            case dueOn = "due_on"
            case startOn = "start_on"
        }
    }

    public init(name: String, team: String? = nil, include: Include? = nil, scheduleDates: ScheduleDates? = nil) {
        self.name = name
        self.team = team
        self.include = include
        self.scheduleDates = scheduleDates
    }

    private enum CodingKeys: String, CodingKey {
        case name
        case team
        case include
        case scheduleDates = "schedule_dates"
    }
}

public struct AddCustomFieldSettingRequest: Codable {
    /// The custom field to associate with this container.
    ///
    /// Example: "14916"
    public var customField: String
    /// Whether this field should be considered important to this container (for instance, to display in the list view of items in the container).
    ///
    /// Example: true
    public var isImportant: Bool?
    /// A gid of a Custom Field Setting on this container, before which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified.
    ///
    /// Example: "1331"
    public var insertBefore: String?
    /// A gid of a Custom Field Setting on this container, after which the new Custom Field Setting will be added.  `insert_before` and `insert_after` parameters cannot both be specified.
    ///
    /// Example: "1331"
    public var insertAfter: String?

    public init(customField: String, isImportant: Bool? = nil, insertBefore: String? = nil, insertAfter: String? = nil) {
        self.customField = customField
        self.isImportant = isImportant
        self.insertBefore = insertBefore
        self.insertAfter = insertAfter
    }

    private enum CodingKeys: String, CodingKey {
        case customField = "custom_field"
        case isImportant = "is_important"
        case insertBefore = "insert_before"
        case insertAfter = "insert_after"
    }
}

public struct RemoveCustomFieldSettingRequest: Codable {
    /// The custom field to remove from this portfolio.
    ///
    /// Example: "14916"
    public var customField: String

    public init(customField: String) {
        self.customField = customField
    }

    private enum CodingKeys: String, CodingKey {
        case customField = "custom_field"
    }
}

public struct ProjectMembershipResponse: Codable {
    public var projectMembershipBase: ProjectMembershipBase
    public var project: ProjectCompact?
    /// Whether the user has full access to the project or has comment-only access.
    ///
    /// Example: "full_write"
    public var writeAccess: WriteAccess?

    /// Whether the user has full access to the project or has comment-only access.
    ///
    /// Example: "full_write"
    public enum WriteAccess: String, Codable, CaseIterable {
        case fullWrite = "full_write"
        case commentOnly = "comment_only"
    }

    public init(from decoder: Decoder) throws {
        self.projectMembershipBase = try ProjectMembershipBase(from: decoder)
        self.project = try ProjectCompact(from: decoder)
        self.writeAccess = try WriteAccess(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(projectMembershipBase, forKey: "projectMembershipBase")
        try values.encodeIfPresent(project, forKey: "project")
        try values.encodeIfPresent(writeAccess, forKey: "write_access")
    }
}

public typealias ProjectMembershipBase = ProjectMembershipCompact

public struct ProjectMembershipCompact: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    public var user: UserCompact?

    public init(from decoder: Decoder) throws {
        self.asanaResource = try AsanaResource(from: decoder)
        self.user = try UserCompact(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(user, forKey: "user")
    }
}

public struct ProjectStatusResponse: Codable {
    public var projectStatusBase: ProjectStatusBase
    public var author: UserCompact?
    /// The time at which this resource was created.
    ///
    /// Example: "2012-02-22T02:06:58.147Z"
    public var createdAt: Date?
    public var createdBy: UserCompact?
    /// The time at which this project status was last modified.
    /// *Note: This does not currently reflect any changes in associations such as comments that may have been added or removed from the project status.*
    ///
    /// Example: "2012-02-22T02:06:58.147Z"
    public var modifiedAt: Date?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.projectStatusBase = try ProjectStatusBase(from: decoder)
        self.author = try UserCompact(from: decoder)
        self.createdAt = try values.decodeIfPresent(Date.self, forKey: "created_at")
        self.createdBy = try UserCompact(from: decoder)
        self.modifiedAt = try values.decodeIfPresent(Date.self, forKey: "modified_at")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(projectStatusBase, forKey: "projectStatusBase")
        try values.encodeIfPresent(author, forKey: "author")
        try values.encodeIfPresent(createdAt, forKey: "created_at")
        try values.encodeIfPresent(createdBy, forKey: "created_by")
        try values.encodeIfPresent(modifiedAt, forKey: "modified_at")
    }
}

public typealias ProjectStatusRequest = ProjectStatusBase

public struct ProjectStatusBase: Codable {
    public var projectStatusCompact: ProjectStatusCompact
    /// The text content of the status update.
    ///
    /// Example: "The project is moving forward according to plan..."
    public var text: String
    /// [Opt In](/docs/input-output-options). The text content of the status update with formatting as HTML.
    ///
    /// Example: "<body>The project <strong>is</strong> moving forward according to plan...</body>"
    public var htmlText: String?
    /// The color associated with the status update.
    public var color: Color

    /// The color associated with the status update.
    public enum Color: String, Codable, CaseIterable {
        case green
        case yellow
        case red
        case blue
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.projectStatusCompact = try ProjectStatusCompact(from: decoder)
        self.text = try values.decode(String.self, forKey: "text")
        self.htmlText = try values.decodeIfPresent(String.self, forKey: "html_text")
        self.color = try Color(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(projectStatusCompact, forKey: "projectStatusCompact")
        try values.encode(text, forKey: "text")
        try values.encodeIfPresent(htmlText, forKey: "html_text")
        try values.encode(color, forKey: "color")
    }
}

public struct ProjectStatusCompact: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    /// The title of the project status update.
    ///
    /// Example: "Status Update - Jun 15"
    public var title: String?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.asanaResource = try AsanaResource(from: decoder)
        self.title = try values.decodeIfPresent(String.self, forKey: "title")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(title, forKey: "title")
    }
}

public struct SectionResponse: Codable {
    public var sectionBase: SectionBase
    /// The time at which this resource was created.
    ///
    /// Example: "2012-02-22T02:06:58.147Z"
    public var createdAt: Date?
    public var project: ProjectCompact?
    /// *Deprecated - please use project instead*
    public var projects: [ProjectCompact]?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.sectionBase = try SectionBase(from: decoder)
        self.createdAt = try values.decodeIfPresent(Date.self, forKey: "created_at")
        self.project = try ProjectCompact(from: decoder)
        self.projects = try values.decodeIfPresent([ProjectCompact].self, forKey: "projects")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(sectionBase, forKey: "sectionBase")
        try values.encodeIfPresent(createdAt, forKey: "created_at")
        try values.encodeIfPresent(project, forKey: "project")
        try values.encodeIfPresent(projects, forKey: "projects")
    }
}

public struct SectionRequest: Codable {
    /// *Create-Only* The project to create the section in
    ///
    /// Example: "13579"
    public var project: String
    /// The text to be displayed as the section name. This cannot be an empty string.
    ///
    /// Example: "Next Actions"
    public var name: String
    /// An existing section within this project before which the added section should be inserted. Cannot be provided together with insert_after.
    ///
    /// Example: "86420"
    public var insertBefore: String?
    /// An existing section within this project after which the added section should be inserted. Cannot be provided together with insert_before.
    ///
    /// Example: "987654"
    public var insertAfter: String?

    public init(project: String, name: String, insertBefore: String? = nil, insertAfter: String? = nil) {
        self.project = project
        self.name = name
        self.insertBefore = insertBefore
        self.insertAfter = insertAfter
    }

    private enum CodingKeys: String, CodingKey {
        case project
        case name
        case insertBefore = "insert_before"
        case insertAfter = "insert_after"
    }
}

public typealias SectionBase = SectionCompact

public struct SectionCompact: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    /// The name of the section (i.e. the text displayed as the section header).
    ///
    /// Example: "Next Actions"
    public var name: String?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.asanaResource = try AsanaResource(from: decoder)
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(name, forKey: "name")
    }
}

public struct ProjectSectionInsertRequest: Codable {
    /// The project in which to reorder the given section.
    ///
    /// Example: "123456"
    public var project: String
    /// The section to reorder.
    ///
    /// Example: "321654"
    public var section: String
    /// Insert the given section immediately before the section specified by this parameter.
    ///
    /// Example: "86420"
    public var beforeSection: String?
    /// Insert the given section immediately after the section specified by this parameter.
    ///
    /// Example: "987654"
    public var afterSection: String?

    public init(project: String, section: String, beforeSection: String? = nil, afterSection: String? = nil) {
        self.project = project
        self.section = section
        self.beforeSection = beforeSection
        self.afterSection = afterSection
    }

    private enum CodingKeys: String, CodingKey {
        case project
        case section
        case beforeSection = "before_section"
        case afterSection = "after_section"
    }
}

public struct SectionTaskInsertRequest: Codable {
    /// The task to add to this section.
    ///
    /// Example: "123456"
    public var task: String
    /// An existing task within this section before which the added task should be inserted. Cannot be provided together with insert_after.
    ///
    /// Example: "86420"
    public var insertBefore: String?
    /// An existing task within this section after which the added task should be inserted. Cannot be provided together with insert_before.
    ///
    /// Example: "987654"
    public var insertAfter: String?

    public init(task: String, insertBefore: String? = nil, insertAfter: String? = nil) {
        self.task = task
        self.insertBefore = insertBefore
        self.insertAfter = insertAfter
    }

    private enum CodingKeys: String, CodingKey {
        case task
        case insertBefore = "insert_before"
        case insertAfter = "insert_after"
    }
}

public struct StoryResponse: Codable {
    public var storyBase: StoryBase
    public var createdBy: UserCompact?
    /// *Conditional*. Whether the text of the story has been edited after creation.
    ///
    /// Example: false
    public var isEdited: Bool?
    /// *Deprecated - please use likes instead*
    /// *Conditional*. True if the story is hearted by the authorized user, false if not.
    ///
    /// Example: false
    public var isHearted: Bool?
    /// *Deprecated - please use likes instead*
    /// 
    /// *Conditional*. Array of likes for users who have hearted this story.
    public var hearts: [Like]?
    /// *Deprecated - please use likes instead*
    /// 
    /// *Conditional*. The number of users who have hearted this story.
    public var numHearts: Int?
    /// *Conditional*. True if the story is liked by the authorized user, false if not.
    ///
    /// Example: false
    public var isLiked: Bool?
    /// *Conditional*. Array of likes for users who have liked this story.
    public var likes: [Like]?
    /// *Conditional*. The number of users who have liked this story.
    public var numLikes: Int?
    /// *Conditional*. A collection of previews to be displayed in the story.
    /// 
    /// *Note: This property only exists for comment stories.*
    public var previews: [Preview]?
    /// *Conditional*'
    ///
    /// Example: "This was the Old Name"
    public var oldName: String?
    /// *Conditional*
    ///
    /// Example: "This is the New Name"
    public var newName: String?
    /// *Conditional*
    public var oldDates: StoryResponseDates?
    /// *Conditional*
    public var newDates: StoryResponseDates?
    /// *Conditional*
    ///
    /// Example: "default_task"
    public var oldResourceSubtype: String?
    /// *Conditional*
    ///
    /// Example: "milestone"
    public var newResourceSubtype: String?
    public var story: StoryCompact?
    public var assignee: UserCompact?
    public var follower: UserCompact?
    public var oldSection: SectionCompact?
    public var newSection: SectionCompact?
    public var task: TaskCompact?
    public var project: ProjectCompact?
    public var tag: TagCompact?
    public var customField: CustomFieldCompact?
    /// *Conditional*
    ///
    /// Example: "This was the Old Text"
    public var oldTextValue: String?
    /// *Conditional*
    ///
    /// Example: "This is the New Text"
    public var newTextValue: String?
    /// *Conditional*
    public var oldNumberValue: Int?
    /// *Conditional*
    public var newNumberValue: Int?
    public var oldEnumValue: EnumOption?
    public var newEnumValue: EnumOption?
    /// *Conditional*
    public var oldMultiEnumValues: [EnumOption]?
    /// *Conditional*
    public var newMultiEnumValues: [EnumOption]?
    /// *Conditional*
    ///
    /// Example: "approved"
    public var newApprovalStatus: String?
    /// *Conditional*
    ///
    /// Example: "pending"
    public var oldApprovalStatus: String?
    public var duplicateOf: TaskCompact?
    public var duplicatedFrom: TaskCompact?
    public var dependency: TaskCompact?
    /// The component of the Asana product the user used to trigger the story.
    ///
    /// Example: "web"
    public var source: Source?
    /// The object this story is associated with. Currently may only be a task.
    public var target: Target?

    /// The component of the Asana product the user used to trigger the story.
    ///
    /// Example: "web"
    public enum Source: String, Codable, CaseIterable {
        case web
        case email
        case mobile
        case api
        case unknown
    }

    /// The object this story is associated with. Currently may only be a task.
    public struct Target: Codable {
        /// Example: "1234"
        public var gid: String?
        /// Example: "Bug Task"
        public var name: String?

        public init(gid: String? = nil, name: String? = nil) {
            self.gid = gid
            self.name = name
        }
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.storyBase = try StoryBase(from: decoder)
        self.createdBy = try UserCompact(from: decoder)
        self.isEdited = try values.decodeIfPresent(Bool.self, forKey: "is_edited")
        self.isHearted = try values.decodeIfPresent(Bool.self, forKey: "hearted")
        self.hearts = try values.decodeIfPresent([Like].self, forKey: "hearts")
        self.numHearts = try values.decodeIfPresent(Int.self, forKey: "num_hearts")
        self.isLiked = try values.decodeIfPresent(Bool.self, forKey: "liked")
        self.likes = try values.decodeIfPresent([Like].self, forKey: "likes")
        self.numLikes = try values.decodeIfPresent(Int.self, forKey: "num_likes")
        self.previews = try values.decodeIfPresent([Preview].self, forKey: "previews")
        self.oldName = try values.decodeIfPresent(String.self, forKey: "old_name")
        self.newName = try values.decodeIfPresent(String.self, forKey: "new_name")
        self.oldDates = try StoryResponseDates(from: decoder)
        self.newDates = try StoryResponseDates(from: decoder)
        self.oldResourceSubtype = try values.decodeIfPresent(String.self, forKey: "old_resource_subtype")
        self.newResourceSubtype = try values.decodeIfPresent(String.self, forKey: "new_resource_subtype")
        self.story = try StoryCompact(from: decoder)
        self.assignee = try UserCompact(from: decoder)
        self.follower = try UserCompact(from: decoder)
        self.oldSection = try SectionCompact(from: decoder)
        self.newSection = try SectionCompact(from: decoder)
        self.task = try TaskCompact(from: decoder)
        self.project = try ProjectCompact(from: decoder)
        self.tag = try TagCompact(from: decoder)
        self.customField = try CustomFieldCompact(from: decoder)
        self.oldTextValue = try values.decodeIfPresent(String.self, forKey: "old_text_value")
        self.newTextValue = try values.decodeIfPresent(String.self, forKey: "new_text_value")
        self.oldNumberValue = try values.decodeIfPresent(Int.self, forKey: "old_number_value")
        self.newNumberValue = try values.decodeIfPresent(Int.self, forKey: "new_number_value")
        self.oldEnumValue = try EnumOption(from: decoder)
        self.newEnumValue = try EnumOption(from: decoder)
        self.oldMultiEnumValues = try values.decodeIfPresent([EnumOption].self, forKey: "old_multi_enum_values")
        self.newMultiEnumValues = try values.decodeIfPresent([EnumOption].self, forKey: "new_multi_enum_values")
        self.newApprovalStatus = try values.decodeIfPresent(String.self, forKey: "new_approval_status")
        self.oldApprovalStatus = try values.decodeIfPresent(String.self, forKey: "old_approval_status")
        self.duplicateOf = try TaskCompact(from: decoder)
        self.duplicatedFrom = try TaskCompact(from: decoder)
        self.dependency = try TaskCompact(from: decoder)
        self.source = try Source(from: decoder)
        self.target = try Target(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(storyBase, forKey: "storyBase")
        try values.encodeIfPresent(createdBy, forKey: "created_by")
        try values.encodeIfPresent(isEdited, forKey: "is_edited")
        try values.encodeIfPresent(isHearted, forKey: "hearted")
        try values.encodeIfPresent(hearts, forKey: "hearts")
        try values.encodeIfPresent(numHearts, forKey: "num_hearts")
        try values.encodeIfPresent(isLiked, forKey: "liked")
        try values.encodeIfPresent(likes, forKey: "likes")
        try values.encodeIfPresent(numLikes, forKey: "num_likes")
        try values.encodeIfPresent(previews, forKey: "previews")
        try values.encodeIfPresent(oldName, forKey: "old_name")
        try values.encodeIfPresent(newName, forKey: "new_name")
        try values.encodeIfPresent(oldDates, forKey: "old_dates")
        try values.encodeIfPresent(newDates, forKey: "new_dates")
        try values.encodeIfPresent(oldResourceSubtype, forKey: "old_resource_subtype")
        try values.encodeIfPresent(newResourceSubtype, forKey: "new_resource_subtype")
        try values.encodeIfPresent(story, forKey: "story")
        try values.encodeIfPresent(assignee, forKey: "assignee")
        try values.encodeIfPresent(follower, forKey: "follower")
        try values.encodeIfPresent(oldSection, forKey: "old_section")
        try values.encodeIfPresent(newSection, forKey: "new_section")
        try values.encodeIfPresent(task, forKey: "task")
        try values.encodeIfPresent(project, forKey: "project")
        try values.encodeIfPresent(tag, forKey: "tag")
        try values.encodeIfPresent(customField, forKey: "custom_field")
        try values.encodeIfPresent(oldTextValue, forKey: "old_text_value")
        try values.encodeIfPresent(newTextValue, forKey: "new_text_value")
        try values.encodeIfPresent(oldNumberValue, forKey: "old_number_value")
        try values.encodeIfPresent(newNumberValue, forKey: "new_number_value")
        try values.encodeIfPresent(oldEnumValue, forKey: "old_enum_value")
        try values.encodeIfPresent(newEnumValue, forKey: "new_enum_value")
        try values.encodeIfPresent(oldMultiEnumValues, forKey: "old_multi_enum_values")
        try values.encodeIfPresent(newMultiEnumValues, forKey: "new_multi_enum_values")
        try values.encodeIfPresent(newApprovalStatus, forKey: "new_approval_status")
        try values.encodeIfPresent(oldApprovalStatus, forKey: "old_approval_status")
        try values.encodeIfPresent(duplicateOf, forKey: "duplicate_of")
        try values.encodeIfPresent(duplicatedFrom, forKey: "duplicated_from")
        try values.encodeIfPresent(dependency, forKey: "dependency")
        try values.encodeIfPresent(source, forKey: "source")
        try values.encodeIfPresent(target, forKey: "target")
    }
}

public typealias StoryRequest = StoryBase

public struct StoryBase: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    /// The time at which this resource was created.
    ///
    /// Example: "2012-02-22T02:06:58.147Z"
    public var createdAt: Date?
    /// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
    ///
    /// Example: "comment_added"
    public var resourceSubtype: String?
    /// The plain text of the comment to add. Cannot be used with html_text.
    ///
    /// Example: "This is a comment."
    public var text: String?
    /// [Opt In](/docs/input-output-options). HTML formatted text for a comment. This will not include the name of the creator.
    ///
    /// Example: "<body>This is a comment.<body>"
    public var htmlText: String?
    /// *Conditional*. Whether the story should be pinned on the resource.
    ///
    /// Example: false
    public var isPinned: Bool?
    /// The name of the sticker in this story. `null` if there is no sticker.
    ///
    /// Example: "dancing_unicorn"
    public var stickerName: StickerName?

    /// The name of the sticker in this story. `null` if there is no sticker.
    ///
    /// Example: "dancing_unicorn"
    public enum StickerName: String, Codable, CaseIterable {
        case greenCheckmark = "green_checkmark"
        case peopleDancing = "people_dancing"
        case dancingUnicorn = "dancing_unicorn"
        case heart
        case partyPopper = "party_popper"
        case peopleWavingFlags = "people_waving_flags"
        case splashingNarwhal = "splashing_narwhal"
        case trophy
        case yetiRidingUnicorn = "yeti_riding_unicorn"
        case celebratingPeople = "celebrating_people"
        case determinedClimbers = "determined_climbers"
        case phoenixSpreadingLove = "phoenix_spreading_love"
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.asanaResource = try AsanaResource(from: decoder)
        self.createdAt = try values.decodeIfPresent(Date.self, forKey: "created_at")
        self.resourceSubtype = try values.decodeIfPresent(String.self, forKey: "resource_subtype")
        self.text = try values.decodeIfPresent(String.self, forKey: "text")
        self.htmlText = try values.decodeIfPresent(String.self, forKey: "html_text")
        self.isPinned = try values.decodeIfPresent(Bool.self, forKey: "is_pinned")
        self.stickerName = try StickerName(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(createdAt, forKey: "created_at")
        try values.encodeIfPresent(resourceSubtype, forKey: "resource_subtype")
        try values.encodeIfPresent(text, forKey: "text")
        try values.encodeIfPresent(htmlText, forKey: "html_text")
        try values.encodeIfPresent(isPinned, forKey: "is_pinned")
        try values.encodeIfPresent(stickerName, forKey: "sticker_name")
    }
}

public struct StoryCompact: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    /// The time at which this resource was created.
    ///
    /// Example: "2012-02-22T02:06:58.147Z"
    public var createdAt: Date?
    public var createdBy: UserCompact?
    /// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
    ///
    /// Example: "comment_added"
    public var resourceSubtype: String?
    /// *Create-only*. Human-readable text for the story or comment.
    /// This will not include the name of the creator.
    /// *Note: This is not guaranteed to be stable for a given type of story. For example, text for a reassignment may not always say “assigned to …” as the text for a story can both be edited and change based on the language settings of the user making the request.*
    /// Use the `resource_subtype` property to discover the action that created the story.
    ///
    /// Example: "marked today"
    public var text: String?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.asanaResource = try AsanaResource(from: decoder)
        self.createdAt = try values.decodeIfPresent(Date.self, forKey: "created_at")
        self.createdBy = try UserCompact(from: decoder)
        self.resourceSubtype = try values.decodeIfPresent(String.self, forKey: "resource_subtype")
        self.text = try values.decodeIfPresent(String.self, forKey: "text")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(createdAt, forKey: "created_at")
        try values.encodeIfPresent(createdBy, forKey: "created_by")
        try values.encodeIfPresent(resourceSubtype, forKey: "resource_subtype")
        try values.encodeIfPresent(text, forKey: "text")
    }
}

/// *Conditional*
public struct StoryResponseDates: Codable {
    /// Example: "2019-09-14"
    public var startOn: NaiveDate?
    /// Example: "2019-09-15T02:06:58.158Z"
    public var dueAt: Date?
    /// Example: "2019-09-15"
    public var dueOn: NaiveDate?

    public init(startOn: NaiveDate? = nil, dueAt: Date? = nil, dueOn: NaiveDate? = nil) {
        self.startOn = startOn
        self.dueAt = dueAt
        self.dueOn = dueOn
    }

    private enum CodingKeys: String, CodingKey {
        case startOn = "start_on"
        case dueAt = "due_at"
        case dueOn = "due_on"
    }
}

public struct TagResponse: Codable {
    public var tagBase: TagBase
    /// The time at which this resource was created.
    ///
    /// Example: "2012-02-22T02:06:58.147Z"
    public var createdAt: Date?
    /// Array of users following this tag.
    public var followers: [UserCompact]?
    public var workspace: WorkspaceCompact?
    /// A url that points directly to the object within Asana.
    ///
    /// Example: "https://app.asana.com/0/resource/123456789/list"
    public var permalinkURL: String?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.tagBase = try TagBase(from: decoder)
        self.createdAt = try values.decodeIfPresent(Date.self, forKey: "created_at")
        self.followers = try values.decodeIfPresent([UserCompact].self, forKey: "followers")
        self.workspace = try WorkspaceCompact(from: decoder)
        self.permalinkURL = try values.decodeIfPresent(String.self, forKey: "permalink_url")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(tagBase, forKey: "tagBase")
        try values.encodeIfPresent(createdAt, forKey: "created_at")
        try values.encodeIfPresent(followers, forKey: "followers")
        try values.encodeIfPresent(workspace, forKey: "workspace")
        try values.encodeIfPresent(permalinkURL, forKey: "permalink_url")
    }
}

public struct TagRequest: Codable {
    public var tagBase: TagBase
    /// An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
    ///
    /// Example: ["12345", "42563"]
    public var followers: [String]?
    /// Gid of an object.
    ///
    /// Example: "12345"
    public var workspace: String?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.tagBase = try TagBase(from: decoder)
        self.followers = try values.decodeIfPresent([String].self, forKey: "followers")
        self.workspace = try values.decodeIfPresent(String.self, forKey: "workspace")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(tagBase, forKey: "tagBase")
        try values.encodeIfPresent(followers, forKey: "followers")
        try values.encodeIfPresent(workspace, forKey: "workspace")
    }
}

public struct TagBase: Codable {
    public var tagCompact: TagCompact
    /// Color of the tag.
    ///
    /// Example: "light-green"
    public var color: Color?
    /// Free-form textual information associated with the tag (i.e. its description).
    ///
    /// Example: "Mittens really likes the stuff from Humboldt."
    public var notes: String?

    /// Color of the tag.
    ///
    /// Example: "light-green"
    public enum Color: String, Codable, CaseIterable {
        case darkPink = "dark-pink"
        case darkGreen = "dark-green"
        case darkBlue = "dark-blue"
        case darkRed = "dark-red"
        case darkTeal = "dark-teal"
        case darkBrown = "dark-brown"
        case darkOrange = "dark-orange"
        case darkPurple = "dark-purple"
        case darkWarmGray = "dark-warm-gray"
        case lightPink = "light-pink"
        case lightGreen = "light-green"
        case lightBlue = "light-blue"
        case lightRed = "light-red"
        case lightTeal = "light-teal"
        case lightBrown = "light-brown"
        case lightOrange = "light-orange"
        case lightPurple = "light-purple"
        case lightWarmGray = "light-warm-gray"
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.tagCompact = try TagCompact(from: decoder)
        self.color = try Color(from: decoder)
        self.notes = try values.decodeIfPresent(String.self, forKey: "notes")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(tagCompact, forKey: "tagCompact")
        try values.encodeIfPresent(color, forKey: "color")
        try values.encodeIfPresent(notes, forKey: "notes")
    }
}

public struct TagCompact: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    /// Name of the tag. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
    ///
    /// Example: "Stuff to buy"
    public var name: String?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.asanaResource = try AsanaResource(from: decoder)
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(name, forKey: "name")
    }
}

public struct TaskResponse: Codable {
    public var taskBase: TaskBase
    public var assignee: Assignee?
    public var assigneeSection: AssigneeSection?
    /// Array of custom field values applied to the task. These represent the custom field values recorded on this project for a particular custom field. For example, these custom field values will contain an `enum_value` property for custom fields of type `enum`, a `text_value` property for custom fields of type `text`, and so on. Please note that the `gid` returned on each custom field value *is identical* to the `gid` of the custom field, which allows referencing the custom field metadata through the `/custom_fields/custom_field-gid` endpoint.
    public var customFields: [CustomFieldResponse]?
    /// Array of users following this task.
    public var followers: [UserCompact]?
    public var parent: Parent?
    /// *Create-only.* Array of projects this task is associated with. At task creation time, this array can be used to add the task to many projects at once. After task creation, these associations can be modified using the addProject and removeProject endpoints.
    public var projects: [ProjectCompact]?
    /// Array of tags associated with this task. In order to change tags on an existing task use `addTag` and `removeTag`.
    ///
    /// Example:
    ///
    /// [
    ///   {
    ///     "gid" : "59746",
    ///     "name" : "Grade A"
    ///   }
    /// ]
    public var tags: [TagCompact]?
    public var workspace: Workspace?
    /// A url that points directly to the object within Asana.
    ///
    /// Example: "https://app.asana.com/0/resource/123456789/list"
    public var permalinkURL: String?

    public struct Assignee: Codable {
        public var userCompact: UserCompact

        public init(from decoder: Decoder) throws {
            self.userCompact = try UserCompact(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(userCompact, forKey: "userCompact")
        }
    }

    public struct AssigneeSection: Codable {
        public var sectionCompact: SectionCompact
        /// The *assignee section* is a subdivision of a project that groups tasks together in the assignee's "My Tasks" list. It can either be a header above a list of tasks in a list view or a column in a board view of "My Tasks."
        /// The `assignee_section` property will be returned in the response only if the request was sent by the user who is the assignee of the task. Note that you can only write to `assignee_section` with the gid of an existing section visible in the user's "My Tasks" list.
        public var anyJSON: AnyJSON

        public init(from decoder: Decoder) throws {
            self.sectionCompact = try SectionCompact(from: decoder)
            self.anyJSON = try AnyJSON(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(sectionCompact, forKey: "sectionCompact")
            try values.encode(anyJSON, forKey: "anyJSON")
        }
    }

    public struct Parent: Codable {
        public var taskCompact: TaskCompact

        public init(from decoder: Decoder) throws {
            self.taskCompact = try TaskCompact(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(taskCompact, forKey: "taskCompact")
        }
    }

    public struct Workspace: Codable {
        public var workspaceCompact: WorkspaceCompact

        public init(from decoder: Decoder) throws {
            self.workspaceCompact = try WorkspaceCompact(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(workspaceCompact, forKey: "workspaceCompact")
        }
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.taskBase = try TaskBase(from: decoder)
        self.assignee = try Assignee(from: decoder)
        self.assigneeSection = try AssigneeSection(from: decoder)
        self.customFields = try values.decodeIfPresent([CustomFieldResponse].self, forKey: "custom_fields")
        self.followers = try values.decodeIfPresent([UserCompact].self, forKey: "followers")
        self.parent = try Parent(from: decoder)
        self.projects = try values.decodeIfPresent([ProjectCompact].self, forKey: "projects")
        self.tags = try values.decodeIfPresent([TagCompact].self, forKey: "tags")
        self.workspace = try Workspace(from: decoder)
        self.permalinkURL = try values.decodeIfPresent(String.self, forKey: "permalink_url")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(taskBase, forKey: "taskBase")
        try values.encodeIfPresent(assignee, forKey: "assignee")
        try values.encodeIfPresent(assigneeSection, forKey: "assignee_section")
        try values.encodeIfPresent(customFields, forKey: "custom_fields")
        try values.encodeIfPresent(followers, forKey: "followers")
        try values.encodeIfPresent(parent, forKey: "parent")
        try values.encodeIfPresent(projects, forKey: "projects")
        try values.encodeIfPresent(tags, forKey: "tags")
        try values.encodeIfPresent(workspace, forKey: "workspace")
        try values.encodeIfPresent(permalinkURL, forKey: "permalink_url")
    }
}

public struct TaskRequest: Codable {
    public var taskBase: TaskBase
    /// Gid of a user.
    ///
    /// Example: "12345"
    public var assignee: String?
    /// The *assignee section* is a subdivision of a project that groups tasks together in the assignee's "My Tasks" list. It can either be a header above a list of tasks in a list view or a column in a board view of "My Tasks."
    /// The `assignee_section` property will be returned in the response only if the request was sent by the user who is the assignee of the task. Note that you can only write to `assignee_section` with the gid of an existing section visible in the user's "My Tasks" list.
    ///
    /// Example: "12345"
    public var assigneeSection: String?
    /// An object where each key is a Custom Field gid and each value is an enum gid, string, or number.
    ///
    /// Example:
    ///
    /// {
    ///   "4578152156" : "Not Started",
    ///   "5678904321" : "On Hold"
    /// }
    public var customFields: [String: String]?
    /// *Create-Only* An array of strings identifying users. These can either be the string "me", an email, or the gid of a user. In order to change followers on an existing task use `addFollowers` and `removeFollowers`.
    ///
    /// Example: ["12345"]
    public var followers: [String]?
    /// Gid of a task.
    ///
    /// Example: "12345"
    public var parent: String?
    /// *Create-Only* Array of project gids. In order to change projects on an existing task use `addProject` and `removeProject`.
    ///
    /// Example: ["12345"]
    public var projects: [String]?
    /// *Create-Only* Array of tag gids. In order to change tags on an existing task use `addTag` and `removeTag`.
    ///
    /// Example: ["12345"]
    public var tags: [String]?
    /// Gid of a workspace.
    ///
    /// Example: "12345"
    public var workspace: String?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.taskBase = try TaskBase(from: decoder)
        self.assignee = try values.decodeIfPresent(String.self, forKey: "assignee")
        self.assigneeSection = try values.decodeIfPresent(String.self, forKey: "assignee_section")
        self.customFields = try values.decodeIfPresent([String: String].self, forKey: "custom_fields")
        self.followers = try values.decodeIfPresent([String].self, forKey: "followers")
        self.parent = try values.decodeIfPresent(String.self, forKey: "parent")
        self.projects = try values.decodeIfPresent([String].self, forKey: "projects")
        self.tags = try values.decodeIfPresent([String].self, forKey: "tags")
        self.workspace = try values.decodeIfPresent(String.self, forKey: "workspace")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(taskBase, forKey: "taskBase")
        try values.encodeIfPresent(assignee, forKey: "assignee")
        try values.encodeIfPresent(assigneeSection, forKey: "assignee_section")
        try values.encodeIfPresent(customFields, forKey: "custom_fields")
        try values.encodeIfPresent(followers, forKey: "followers")
        try values.encodeIfPresent(parent, forKey: "parent")
        try values.encodeIfPresent(projects, forKey: "projects")
        try values.encodeIfPresent(tags, forKey: "tags")
        try values.encodeIfPresent(workspace, forKey: "workspace")
    }
}

public struct TaskBase: Codable {
    public var taskCompact: TaskCompact
    /// *Conditional* Reflects the approval status of this task. This field is kept in sync with `completed`, meaning `pending` translates to false while `approved`, `rejected`, and `changes_requested` translate to true. If you set completed to true, this field will be set to `approved`.
    ///
    /// Example: "pending"
    public var approvalStatus: ApprovalStatus?
    /// *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to "inbox" or "upcoming" inserts it at the top of the section, while the other options will insert at the bottom.
    ///
    /// Example: "upcoming"
    public var assigneeStatus: AssigneeStatus?
    /// True if the task is currently marked complete, false if not.
    ///
    /// Example: false
    public var isCompleted: Bool?
    /// The time at which this task was completed, or null if the task is incomplete.
    ///
    /// Example: "2012-02-22T02:06:58.147Z"
    public var completedAt: Date?
    public var completedBy: UserCompact?
    /// The time at which this resource was created.
    ///
    /// Example: "2012-02-22T02:06:58.147Z"
    public var createdAt: Date?
    /// [Opt In](/docs/input-output-options). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency.
    public var dependencies: [AsanaResource]?
    /// [Opt In](/docs/input-output-options). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.
    public var dependents: [AsanaResource]?
    /// The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with `due_on`.
    ///
    /// Example: "2019-09-15T02:06:58.147Z"
    public var dueAt: NaiveDate?
    /// The localized date on which this task is due, or null if the task has no due date. This takes a date with `YYYY-MM-DD` format and should not be used together with due_at.
    ///
    /// Example: "2019-09-15"
    public var dueOn: NaiveDate?
    /// *OAuth Required*. *Conditional*. This field is returned only if external values are set or included by using [Opt In] (/docs/input-output-options).
    /// The external field allows you to store app-specific metadata on tasks, including a gid that can be used to retrieve tasks and a data blob that can store app-specific character strings. Note that you will need to authenticate with Oauth to access or modify this data. Once an external gid is set, you can use the notation `external:custom_gid` to reference your object anywhere in the API where you may use the original object gid. See the page on Custom External Data for more details.
    ///
    /// Example:
    ///
    /// {
    ///   "data" : "A blob of information",
    ///   "gid" : "my_gid"
    /// }
    public var external: External?
    /// [Opt In](/docs/input-output-options). The notes of the text with formatting as HTML.
    ///
    /// Example: "<body>Mittens <em>really</em> likes the stuff from Humboldt.</body>"
    public var htmlNotes: String?
    /// *Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.
    ///
    /// Example: true
    public var isHearted: Bool?
    /// *Deprecated - please use likes instead* Array of likes for users who have hearted this task.
    public var hearts: [Like]?
    /// [Opt In](/docs/input-output-options). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](/docs/asana-sections) without being true `section` objects. If a `task` object is rendered this way in any context it will have the property `is_rendered_as_separator` set to `true`.
    ///
    /// Example: false
    public var isRenderedAsSeparator: Bool?
    /// True if the task is liked by the authorized user, false if not.
    ///
    /// Example: true
    public var isLiked: Bool?
    /// Array of likes for users who have liked this task.
    public var likes: [Like]?
    /// *Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the `addProject` and `removeProject` endpoints. Note that over time, more types of memberships may be added to this property.
    public var memberships: [Membership]?
    /// The time at which this task was last modified.
    /// 
    /// *Note: This does not currently reflect any changes in
    /// associations such as projects or comments that may have been
    /// added or removed from the task.*
    ///
    /// Example: "2012-02-22T02:06:58.147Z"
    public var modifiedAt: Date?
    /// Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
    ///
    /// Example: "Buy catnip"
    public var name: String?
    /// Free-form textual information associated with the task (i.e. its description).
    ///
    /// Example: "Mittens really likes the stuff from Humboldt."
    public var notes: String?
    /// *Deprecated - please use likes instead* The number of users who have hearted this task.
    public var numHearts: Int?
    /// The number of users who have liked this task.
    public var numLikes: Int?
    /// [Opt In](/docs/input-output-options). The number of subtasks on this task.
    public var numSubtasks: Int?
    /// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
    /// The resource_subtype `milestone` represent a single moment in time. This means tasks with this subtype cannot have a start_date.
    ///
    /// Example: "default_task"
    public var resourceSubtype: ResourceSubtype?
    /// The day on which work begins for the task , or null if the task has no start date. This takes a date with `YYYY-MM-DD` format.
    /// *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter.*
    ///
    /// Example: "2019-09-14"
    public var startOn: NaiveDate?

    /// *Conditional* Reflects the approval status of this task. This field is kept in sync with `completed`, meaning `pending` translates to false while `approved`, `rejected`, and `changes_requested` translate to true. If you set completed to true, this field will be set to `approved`.
    ///
    /// Example: "pending"
    public enum ApprovalStatus: String, Codable, CaseIterable {
        case pending
        case approved
        case rejected
        case changesRequested = "changes_requested"
    }

    /// *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to "inbox" or "upcoming" inserts it at the top of the section, while the other options will insert at the bottom.
    ///
    /// Example: "upcoming"
    public enum AssigneeStatus: String, Codable, CaseIterable {
        case today
        case upcoming
        case later
        case new
        case inbox
    }

    /// *OAuth Required*. *Conditional*. This field is returned only if external values are set or included by using [Opt In] (/docs/input-output-options).
    /// The external field allows you to store app-specific metadata on tasks, including a gid that can be used to retrieve tasks and a data blob that can store app-specific character strings. Note that you will need to authenticate with Oauth to access or modify this data. Once an external gid is set, you can use the notation `external:custom_gid` to reference your object anywhere in the API where you may use the original object gid. See the page on Custom External Data for more details.
    ///
    /// Example:
    ///
    /// {
    ///   "data" : "A blob of information",
    ///   "gid" : "my_gid"
    /// }
    public struct External: Codable {
        /// Example: "1234"
        public var gid: String?
        /// Example: "A blob of information."
        public var data: String?

        public init(gid: String? = nil, data: String? = nil) {
            self.gid = gid
            self.data = data
        }
    }

    public struct Membership: Codable {
        public var project: ProjectCompact?
        public var section: SectionCompact?

        public init(project: ProjectCompact? = nil, section: SectionCompact? = nil) {
            self.project = project
            self.section = section
        }
    }

    /// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
    /// The resource_subtype `milestone` represent a single moment in time. This means tasks with this subtype cannot have a start_date.
    ///
    /// Example: "default_task"
    public enum ResourceSubtype: String, Codable, CaseIterable {
        case defaultTask = "default_task"
        case milestone
        case section
        case approval
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.taskCompact = try TaskCompact(from: decoder)
        self.approvalStatus = try ApprovalStatus(from: decoder)
        self.assigneeStatus = try AssigneeStatus(from: decoder)
        self.isCompleted = try values.decodeIfPresent(Bool.self, forKey: "completed")
        self.completedAt = try values.decodeIfPresent(Date.self, forKey: "completed_at")
        self.completedBy = try UserCompact(from: decoder)
        self.createdAt = try values.decodeIfPresent(Date.self, forKey: "created_at")
        self.dependencies = try values.decodeIfPresent([AsanaResource].self, forKey: "dependencies")
        self.dependents = try values.decodeIfPresent([AsanaResource].self, forKey: "dependents")
        self.dueAt = try values.decodeIfPresent(NaiveDate.self, forKey: "due_at")
        self.dueOn = try values.decodeIfPresent(NaiveDate.self, forKey: "due_on")
        self.external = try External(from: decoder)
        self.htmlNotes = try values.decodeIfPresent(String.self, forKey: "html_notes")
        self.isHearted = try values.decodeIfPresent(Bool.self, forKey: "hearted")
        self.hearts = try values.decodeIfPresent([Like].self, forKey: "hearts")
        self.isRenderedAsSeparator = try values.decodeIfPresent(Bool.self, forKey: "is_rendered_as_separator")
        self.isLiked = try values.decodeIfPresent(Bool.self, forKey: "liked")
        self.likes = try values.decodeIfPresent([Like].self, forKey: "likes")
        self.memberships = try values.decodeIfPresent([Membership].self, forKey: "memberships")
        self.modifiedAt = try values.decodeIfPresent(Date.self, forKey: "modified_at")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.notes = try values.decodeIfPresent(String.self, forKey: "notes")
        self.numHearts = try values.decodeIfPresent(Int.self, forKey: "num_hearts")
        self.numLikes = try values.decodeIfPresent(Int.self, forKey: "num_likes")
        self.numSubtasks = try values.decodeIfPresent(Int.self, forKey: "num_subtasks")
        self.resourceSubtype = try ResourceSubtype(from: decoder)
        self.startOn = try values.decodeIfPresent(NaiveDate.self, forKey: "start_on")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(taskCompact, forKey: "taskCompact")
        try values.encodeIfPresent(approvalStatus, forKey: "approval_status")
        try values.encodeIfPresent(assigneeStatus, forKey: "assignee_status")
        try values.encodeIfPresent(isCompleted, forKey: "completed")
        try values.encodeIfPresent(completedAt, forKey: "completed_at")
        try values.encodeIfPresent(completedBy, forKey: "completed_by")
        try values.encodeIfPresent(createdAt, forKey: "created_at")
        try values.encodeIfPresent(dependencies, forKey: "dependencies")
        try values.encodeIfPresent(dependents, forKey: "dependents")
        try values.encodeIfPresent(dueAt, forKey: "due_at")
        try values.encodeIfPresent(dueOn, forKey: "due_on")
        try values.encodeIfPresent(external, forKey: "external")
        try values.encodeIfPresent(htmlNotes, forKey: "html_notes")
        try values.encodeIfPresent(isHearted, forKey: "hearted")
        try values.encodeIfPresent(hearts, forKey: "hearts")
        try values.encodeIfPresent(isRenderedAsSeparator, forKey: "is_rendered_as_separator")
        try values.encodeIfPresent(isLiked, forKey: "liked")
        try values.encodeIfPresent(likes, forKey: "likes")
        try values.encodeIfPresent(memberships, forKey: "memberships")
        try values.encodeIfPresent(modifiedAt, forKey: "modified_at")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(notes, forKey: "notes")
        try values.encodeIfPresent(numHearts, forKey: "num_hearts")
        try values.encodeIfPresent(numLikes, forKey: "num_likes")
        try values.encodeIfPresent(numSubtasks, forKey: "num_subtasks")
        try values.encodeIfPresent(resourceSubtype, forKey: "resource_subtype")
        try values.encodeIfPresent(startOn, forKey: "start_on")
    }
}

public struct TaskCompact: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    /// The name of the task.
    ///
    /// Example: "Bug Task"
    public var name: String?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.asanaResource = try AsanaResource(from: decoder)
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(name, forKey: "name")
    }
}

public struct TaskDuplicateRequest: Codable {
    /// The name of the new task.
    ///
    /// Example: "New Task Name"
    public var name: String?
    /// The fields that will be duplicated to the new task.
    ///
    /// Example: ["notes", "assignee"]
    public var include: Include?

    /// The fields that will be duplicated to the new task.
    ///
    /// Example: ["notes", "assignee"]
    public enum Include: String, Codable, CaseIterable {
        case notes
        case assignee
        case subtasks
        case attachments
        case tags
        case followers
        case projects
        case dates
        case dependencies
        case parent
    }

    public init(name: String? = nil, include: Include? = nil) {
        self.name = name
        self.include = include
    }
}

public struct TaskSetParentRequest: Codable {
    /// The new parent of the task, or `null` for no parent.
    ///
    /// Example: "987654"
    public var parent: String
    /// A subtask of the parent to insert the task after, or `null` to insert at the beginning of the list.
    public var insertAfter: String?
    /// A subtask of the parent to insert the task before, or `null` to insert at the end of the list.
    ///
    /// Example: "124816"
    public var insertBefore: String?

    public init(parent: String, insertAfter: String? = nil, insertBefore: String? = nil) {
        self.parent = parent
        self.insertAfter = insertAfter
        self.insertBefore = insertBefore
    }

    private enum CodingKeys: String, CodingKey {
        case parent
        case insertAfter = "insert_after"
        case insertBefore = "insert_before"
    }
}

public struct TaskAddProjectRequest: Codable {
    /// The project to add the task to.
    ///
    /// Example: "13579"
    public var project: String
    /// A task in the project to insert the task after, or `null` to insert at the beginning of the list.
    ///
    /// Example: "124816"
    public var insertAfter: String?
    /// A task in the project to insert the task before, or `null` to insert at the end of the list.
    ///
    /// Example: "432134"
    public var insertBefore: String?
    /// A section in the project to insert the task into. The task will be inserted at the bottom of the section.
    ///
    /// Example: "987654"
    public var section: String?

    public init(project: String, insertAfter: String? = nil, insertBefore: String? = nil, section: String? = nil) {
        self.project = project
        self.insertAfter = insertAfter
        self.insertBefore = insertBefore
        self.section = section
    }

    private enum CodingKeys: String, CodingKey {
        case project
        case insertAfter = "insert_after"
        case insertBefore = "insert_before"
        case section
    }
}

public struct TaskRemoveProjectRequest: Codable {
    /// The project to remove the task from.
    ///
    /// Example: "13579"
    public var project: String

    public init(project: String) {
        self.project = project
    }
}

public struct TaskAddTagRequest: Codable {
    /// The tag to add to the task.
    ///
    /// Example: "13579"
    public var tag: String

    public init(tag: String) {
        self.tag = tag
    }
}

public struct TaskRemoveTagRequest: Codable {
    /// The tag to remove from the task.
    ///
    /// Example: "13579"
    public var tag: String

    public init(tag: String) {
        self.tag = tag
    }
}

public struct TaskAddFollowersRequest: Codable {
    /// An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
    ///
    /// Example: ["13579", "321654"]
    public var followers: [String]

    public init(followers: [String]) {
        self.followers = followers
    }
}

public struct TaskRemoveFollowersRequest: Codable {
    /// An array of strings identifying users. These can either be the string "me", an email, or the gid of a user.
    ///
    /// Example: ["13579", "321654"]
    public var followers: [String]

    public init(followers: [String]) {
        self.followers = followers
    }
}

/// A response object returned from the task count endpoint.
public struct TaskCountResponse: Codable {
    /// The number of tasks in a project.
    ///
    /// Example: 200
    public var numTasks: Int?
    /// The number of incomplete tasks in a project.
    ///
    /// Example: 50
    public var numIncompleteTasks: Int?
    /// The number of completed tasks in a project.
    ///
    /// Example: 150
    public var numCompletedTasks: Int?
    /// The number of milestones in a project.
    ///
    /// Example: 10
    public var numMilestones: Int?
    /// The number of incomplete milestones in a project.
    public var numIncompleteMilestones: Int?
    /// The number of completed milestones in a project.
    public var numCompletedMilestones: Int?

    public init(numTasks: Int? = nil, numIncompleteTasks: Int? = nil, numCompletedTasks: Int? = nil, numMilestones: Int? = nil, numIncompleteMilestones: Int? = nil, numCompletedMilestones: Int? = nil) {
        self.numTasks = numTasks
        self.numIncompleteTasks = numIncompleteTasks
        self.numCompletedTasks = numCompletedTasks
        self.numMilestones = numMilestones
        self.numIncompleteMilestones = numIncompleteMilestones
        self.numCompletedMilestones = numCompletedMilestones
    }

    private enum CodingKeys: String, CodingKey {
        case numTasks = "num_tasks"
        case numIncompleteTasks = "num_incomplete_tasks"
        case numCompletedTasks = "num_completed_tasks"
        case numMilestones = "num_milestones"
        case numIncompleteMilestones = "num_incomplete_milestones"
        case numCompletedMilestones = "num_completed_milestones"
    }
}

public struct TeamResponse: Codable {
    public var teamBase: TeamBase
    /// [Opt In](/docs/input-output-options). The description of the team.
    ///
    /// Example: "All developers should be members of this team."
    public var description: String?
    /// [Opt In](/docs/input-output-options). The description of the team with formatting as HTML.
    ///
    /// Example: "<body><em>All</em> developers should be members of this team.</body>"
    public var htmlDescription: String?
    public var organization: Organization?
    /// A url that points directly to the object within Asana.
    ///
    /// Example: "https://app.asana.com/0/resource/123456789/list"
    public var permalinkURL: String?
    /// The visibility of the team to users in the same organization
    public var visibility: Visibility?

    public struct Organization: Codable {
        public var workspaceCompact: WorkspaceCompact

        public init(from decoder: Decoder) throws {
            self.workspaceCompact = try WorkspaceCompact(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(workspaceCompact, forKey: "workspaceCompact")
        }
    }

    /// The visibility of the team to users in the same organization
    public enum Visibility: String, Codable, CaseIterable {
        case secret
        case requestToJoin = "request_to_join"
        case `public`
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.teamBase = try TeamBase(from: decoder)
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.htmlDescription = try values.decodeIfPresent(String.self, forKey: "html_description")
        self.organization = try Organization(from: decoder)
        self.permalinkURL = try values.decodeIfPresent(String.self, forKey: "permalink_url")
        self.visibility = try Visibility(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(teamBase, forKey: "teamBase")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(htmlDescription, forKey: "html_description")
        try values.encodeIfPresent(organization, forKey: "organization")
        try values.encodeIfPresent(permalinkURL, forKey: "permalink_url")
        try values.encodeIfPresent(visibility, forKey: "visibility")
    }
}

public struct TeamRequest: Codable {
    public var teamBase: TeamBase
    /// The description of the team.
    ///
    /// Example: "All developers should be members of this team."
    public var description: String?
    /// The description of the team with formatting as HTML.
    ///
    /// Example: "<body><em>All</em> developers should be members of this team.</body>"
    public var htmlDescription: String?
    /// The organization/workspace the team belongs to.
    ///
    /// Example: "123456789"
    public var organization: String?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.teamBase = try TeamBase(from: decoder)
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.htmlDescription = try values.decodeIfPresent(String.self, forKey: "html_description")
        self.organization = try values.decodeIfPresent(String.self, forKey: "organization")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(teamBase, forKey: "teamBase")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(htmlDescription, forKey: "html_description")
        try values.encodeIfPresent(organization, forKey: "organization")
    }
}

public typealias TeamBase = TeamCompact

public struct TeamCompact: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    /// The name of the team.
    ///
    /// Example: "Marketing"
    public var name: String?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.asanaResource = try AsanaResource(from: decoder)
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(name, forKey: "name")
    }
}

public typealias TeamMembershipResponse = TeamMembershipBase

public typealias TeamMembershipBase = TeamMembershipCompact

public struct TeamMembershipCompact: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    public var user: UserCompact?
    public var team: TeamCompact?
    /// Describes if the user is a guest in the team.
    ///
    /// Example: false
    public var isGuest: Bool?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.asanaResource = try AsanaResource(from: decoder)
        self.user = try UserCompact(from: decoder)
        self.team = try TeamCompact(from: decoder)
        self.isGuest = try values.decodeIfPresent(Bool.self, forKey: "is_guest")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(user, forKey: "user")
        try values.encodeIfPresent(team, forKey: "team")
        try values.encodeIfPresent(isGuest, forKey: "is_guest")
    }
}

public struct TimePeriodResponse: Codable {
    public var timePeriodBase: TimePeriodBase

    public init(from decoder: Decoder) throws {
        self.timePeriodBase = try TimePeriodBase(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(timePeriodBase, forKey: "timePeriodBase")
    }
}

public struct TimePeriodBase: Codable {
    public var timePeriodCompact: TimePeriodCompact
    public var parent: TimePeriodCompact?

    public init(from decoder: Decoder) throws {
        self.timePeriodCompact = try TimePeriodCompact(from: decoder)
        self.parent = try TimePeriodCompact(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(timePeriodCompact, forKey: "timePeriodCompact")
        try values.encodeIfPresent(parent, forKey: "parent")
    }
}

public struct TimePeriodCompact: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    /// The localized end date of the time period in `YYYY-MM-DD` format.
    ///
    /// Example: "2019-09-14"
    public var endOn: String?
    /// The localized start date of the time period in `YYYY-MM-DD` format.
    ///
    /// Example: "2019-09-13"
    public var startOn: String?
    /// The cadence and index of the time period. The value is one of: `FY`, `H1`, `H2`, `Q1`, `Q2`, `Q3`, or `Q4`.
    ///
    /// Example: "Q1"
    public var period: Period?
    /// A string representing the cadence code and the fiscal year.
    ///
    /// Example: "Q1 FY22"
    public var displayName: String?

    /// The cadence and index of the time period. The value is one of: `FY`, `H1`, `H2`, `Q1`, `Q2`, `Q3`, or `Q4`.
    ///
    /// Example: "Q1"
    public enum Period: String, Codable, CaseIterable {
        case fy = "FY"
        case h1 = "H1"
        case h2 = "H2"
        case q1 = "Q1"
        case q2 = "Q2"
        case q3 = "Q3"
        case q4 = "Q4"
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.asanaResource = try AsanaResource(from: decoder)
        self.endOn = try values.decodeIfPresent(String.self, forKey: "end_on")
        self.startOn = try values.decodeIfPresent(String.self, forKey: "start_on")
        self.period = try Period(from: decoder)
        self.displayName = try values.decodeIfPresent(String.self, forKey: "display_name")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(endOn, forKey: "end_on")
        try values.encodeIfPresent(startOn, forKey: "start_on")
        try values.encodeIfPresent(period, forKey: "period")
        try values.encodeIfPresent(displayName, forKey: "display_name")
    }
}

public struct UserResponse: Codable {
    public var userBase: UserBase
    /// The user's email address.
    ///
    /// Example: "gsanchez@example.com"
    public var email: String?
    /// A map of the user’s profile photo in various sizes, or null if no photo is set. Sizes provided are 21, 27, 36, 60, 128, and 1024. All images are in PNG format, except for 1024 (which is in JPEG format).
    ///
    /// Example:
    ///
    /// {
    ///   "image_21x21" : "https:\/\/...",
    ///   "image_27x27" : "https:\/\/...",
    ///   "image_36x36" : "https:\/\/...",
    ///   "image_60x60" : "https:\/\/...",
    ///   "image_128x128" : "https:\/\/...",
    ///   "image_1024x1024" : "https:\/\/..."
    /// }
    public var photo: Photo?
    /// Workspaces and organizations this user may access.
    /// Note\: The API will only return workspaces and organizations that also contain the authenticated user.
    public var workspaces: [WorkspaceCompact]?

    /// A map of the user’s profile photo in various sizes, or null if no photo is set. Sizes provided are 21, 27, 36, 60, 128, and 1024. All images are in PNG format, except for 1024 (which is in JPEG format).
    ///
    /// Example:
    ///
    /// {
    ///   "image_21x21" : "https:\/\/...",
    ///   "image_27x27" : "https:\/\/...",
    ///   "image_36x36" : "https:\/\/...",
    ///   "image_60x60" : "https:\/\/...",
    ///   "image_128x128" : "https:\/\/...",
    ///   "image_1024x1024" : "https:\/\/..."
    /// }
    public struct Photo: Codable {
        public var image21x21: URL?
        public var image27x27: URL?
        public var image36x36: URL?
        public var image60x60: URL?
        public var image128x128: URL?
        public var image1024x1024: URL?

        public init(image21x21: URL? = nil, image27x27: URL? = nil, image36x36: URL? = nil, image60x60: URL? = nil, image128x128: URL? = nil, image1024x1024: URL? = nil) {
            self.image21x21 = image21x21
            self.image27x27 = image27x27
            self.image36x36 = image36x36
            self.image60x60 = image60x60
            self.image128x128 = image128x128
            self.image1024x1024 = image1024x1024
        }

        private enum CodingKeys: String, CodingKey {
            case image21x21 = "image_21x21"
            case image27x27 = "image_27x27"
            case image36x36 = "image_36x36"
            case image60x60 = "image_60x60"
            case image128x128 = "image_128x128"
            case image1024x1024 = "image_1024x1024"
        }
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.userBase = try UserBase(from: decoder)
        self.email = try values.decodeIfPresent(String.self, forKey: "email")
        self.photo = try Photo(from: decoder)
        self.workspaces = try values.decodeIfPresent([WorkspaceCompact].self, forKey: "workspaces")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(userBase, forKey: "userBase")
        try values.encodeIfPresent(email, forKey: "email")
        try values.encodeIfPresent(photo, forKey: "photo")
        try values.encodeIfPresent(workspaces, forKey: "workspaces")
    }
}

public typealias UserRequest = UserBase

public typealias UserBase = UserCompact

public struct UserCompact: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    /// *Read-only except when same user as requester*. The user’s name.
    ///
    /// Example: "Greg Sanchez"
    public var name: String?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.asanaResource = try AsanaResource(from: decoder)
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(name, forKey: "name")
    }
}

/// A user identification object for specification with the addUser/removeUser endpoints.
public struct TeamAddUserRequest: Codable {
    /// A string identifying a user. This can either be the string "me", an email, or the gid of a user.
    ///
    /// Example: "12345"
    public var user: String?

    public init(user: String? = nil) {
        self.user = user
    }
}

/// A user identification object for specification with the addUser/removeUser endpoints.
public struct TeamRemoveUserRequest: Codable {
    /// A string identifying a user. This can either be the string "me", an email, or the gid of a user.
    ///
    /// Example: "12345"
    public var user: String?

    public init(user: String? = nil) {
        self.user = user
    }
}

public typealias UserTaskListResponse = UserTaskListBase

public typealias UserTaskListRequest = UserTaskListBase

public typealias UserTaskListBase = UserTaskListCompact

public struct UserTaskListCompact: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    /// The name of the user task list.
    ///
    /// Example: "My Tasks in My Workspace"
    public var name: String?
    /// The owner of the user task list, i.e. the person whose My Tasks is represented by this resource.
    public var owner: Owner?
    /// The workspace in which the user task list is located.
    public var workspace: Workspace?

    public struct Owner: Codable {
        public var userCompact: UserCompact

        public init(from decoder: Decoder) throws {
            self.userCompact = try UserCompact(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(userCompact, forKey: "userCompact")
        }
    }

    public struct Workspace: Codable {
        public var workspaceCompact: WorkspaceCompact

        public init(from decoder: Decoder) throws {
            self.workspaceCompact = try WorkspaceCompact(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(workspaceCompact, forKey: "workspaceCompact")
        }
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.asanaResource = try AsanaResource(from: decoder)
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.owner = try Owner(from: decoder)
        self.workspace = try Workspace(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(owner, forKey: "owner")
        try values.encodeIfPresent(workspace, forKey: "workspace")
    }
}

public struct WebhookResponse: Codable {
    public var webhookCompact: WebhookCompact
    /// The time at which this resource was created.
    ///
    /// Example: "2012-02-22T02:06:58.147Z"
    public var createdAt: Date?
    /// The timestamp when the webhook last received an error when sending an event to the target.
    ///
    /// Example: "2012-02-22T02:06:58.147Z"
    public var lastFailureAt: Date?
    /// The contents of the last error response sent to the webhook when attempting to deliver events to the target.
    ///
    /// Example: "500 Server Error\n\nCould not complete the request"
    public var lastFailureContent: String?
    /// The timestamp when the webhook last successfully sent an event to the target.
    ///
    /// Example: "2012-02-22T02:06:58.147Z"
    public var lastSuccessAt: Date?
    /// Whitelist of filters to apply to events from this webhook. If a webhook event passes any of the filters the event will be delivered; otherwise no event will be sent to the receiving server.
    public var filters: [Filter]?

    public struct Filter: Codable {
        /// A WebhookFilter can be passed on creation of a webhook in order to filter the types of actions that trigger delivery of an [Event](/docs/tocS_Event)
        public var webhookFilter: WebhookFilter
        /// A set of filters to specify a whitelist for what types of events will be delivered.
        public var anyJSON: AnyJSON

        public init(from decoder: Decoder) throws {
            self.webhookFilter = try WebhookFilter(from: decoder)
            self.anyJSON = try AnyJSON(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(webhookFilter, forKey: "webhookFilter")
            try values.encode(anyJSON, forKey: "anyJSON")
        }
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.webhookCompact = try WebhookCompact(from: decoder)
        self.createdAt = try values.decodeIfPresent(Date.self, forKey: "created_at")
        self.lastFailureAt = try values.decodeIfPresent(Date.self, forKey: "last_failure_at")
        self.lastFailureContent = try values.decodeIfPresent(String.self, forKey: "last_failure_content")
        self.lastSuccessAt = try values.decodeIfPresent(Date.self, forKey: "last_success_at")
        self.filters = try values.decodeIfPresent([Filter].self, forKey: "filters")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(webhookCompact, forKey: "webhookCompact")
        try values.encodeIfPresent(createdAt, forKey: "created_at")
        try values.encodeIfPresent(lastFailureAt, forKey: "last_failure_at")
        try values.encodeIfPresent(lastFailureContent, forKey: "last_failure_content")
        try values.encodeIfPresent(lastSuccessAt, forKey: "last_success_at")
        try values.encodeIfPresent(filters, forKey: "filters")
    }
}

public struct WebhookRequest: Codable {
    /// A resource ID to subscribe to. Many Asana resources are valid to create webhooks on, but higher-level resources require filters.
    ///
    /// Example: "12345"
    public var resource: String
    /// The URL to receive the HTTP POST. The full URL will be used to deliver events from this webhook (including parameters) which allows encoding of application-specific state when the webhook is created.
    ///
    /// Example: "https://example.com/receive-webhook/7654?app_specific_param=app_specific_value"
    public var target: URL
    /// An array of WebhookFilter objects to specify a whitelist of filters to apply to events from this webhook. If a webhook event passes any of the filters the event will be delivered; otherwise no event will be sent to the receiving server.
    public var filters: [Filter]?

    public struct Filter: Codable {
        /// A WebhookFilter can be passed on creation of a webhook in order to filter the types of actions that trigger delivery of an [Event](/docs/tocS_Event)
        public var webhookFilter: WebhookFilter
        /// A set of filters to specify a whitelist for what types of events will be delivered.
        public var anyJSON: AnyJSON

        public init(from decoder: Decoder) throws {
            self.webhookFilter = try WebhookFilter(from: decoder)
            self.anyJSON = try AnyJSON(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(webhookFilter, forKey: "webhookFilter")
            try values.encode(anyJSON, forKey: "anyJSON")
        }
    }

    public init(resource: String, target: URL, filters: [Filter]? = nil) {
        self.resource = resource
        self.target = target
        self.filters = filters
    }
}

public struct WebhookUpdateRequest: Codable {
    /// An array of WebhookFilter objects to specify a whitelist of filters to apply to events from this webhook. If a webhook event passes any of the filters the event will be delivered; otherwise no event will be sent to the receiving server.
    public var filters: [Filter]?

    public struct Filter: Codable {
        /// A WebhookFilter can be passed on creation of a webhook in order to filter the types of actions that trigger delivery of an [Event](/docs/tocS_Event)
        public var webhookFilter: WebhookFilter
        /// A set of filters to specify a whitelist for what types of events will be delivered.
        public var anyJSON: AnyJSON

        public init(from decoder: Decoder) throws {
            self.webhookFilter = try WebhookFilter(from: decoder)
            self.anyJSON = try AnyJSON(from: decoder)
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encode(webhookFilter, forKey: "webhookFilter")
            try values.encode(anyJSON, forKey: "anyJSON")
        }
    }

    public init(filters: [Filter]? = nil) {
        self.filters = filters
    }
}

public struct WebhookCompact: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    /// If true, the webhook will send events - if false it is considered inactive and will not generate events.
    ///
    /// Example: false
    public var isActive: Bool?
    public var resource: AsanaNamedResource?
    /// The URL to receive the HTTP POST.
    ///
    /// Example: "https://example.com/receive-webhook/7654"
    public var target: URL?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.asanaResource = try AsanaResource(from: decoder)
        self.isActive = try values.decodeIfPresent(Bool.self, forKey: "active")
        self.resource = try AsanaNamedResource(from: decoder)
        self.target = try values.decodeIfPresent(URL.self, forKey: "target")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(isActive, forKey: "active")
        try values.encodeIfPresent(resource, forKey: "resource")
        try values.encodeIfPresent(target, forKey: "target")
    }
}

/// A WebhookFilter can be passed on creation of a webhook in order to filter the types of actions that trigger delivery of an [Event](/docs/tocS_Event)
public struct WebhookFilter: Codable {
    /// The type of the resource which created the event when modified; for example, to filter to changes on regular tasks this field should be set to `task`.
    ///
    /// Example: "task"
    public var resourceType: String?
    /// The resource subtype of the resource that the filter applies to. This should be set to the same value as is returned on the `resource_subtype` field on the resources themselves.
    ///
    /// Example: "milestone"
    public var resourceSubtype: String?
    /// The type of change on the **resource** to pass through the filter. For more information refer to `Event.action` in the [Event](/docs/tocS_Event) schema. This can be one of `changed`, `added`, `removed`, `deleted`, and `undeleted` depending on the nature of what has occurred on the resource.
    ///
    /// Example: "changed"
    public var action: String?
    /// *Conditional.* A whitelist of fields for events which will pass the filter when the resource is changed. These can be any combination of the fields on the resources themselves. This field is only valid for `action` of type `changed`
    ///
    /// Example: ["due_at", "due_on", "dependencies"]
    public var fields: [String]?

    public init(resourceType: String? = nil, resourceSubtype: String? = nil, action: String? = nil, fields: [String]? = nil) {
        self.resourceType = resourceType
        self.resourceSubtype = resourceSubtype
        self.action = action
        self.fields = fields
    }

    private enum CodingKeys: String, CodingKey {
        case resourceType = "resource_type"
        case resourceSubtype = "resource_subtype"
        case action
        case fields
    }
}

public struct WorkspaceResponse: Codable {
    public var workspaceBase: WorkspaceBase
    /// The email domains that are associated with this workspace.
    ///
    /// Example: ["asana.com"]
    public var emailDomains: [URL]?
    /// Whether the workspace is an *organization*.
    ///
    /// Example: false
    public var isOrganization: Bool?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.workspaceBase = try WorkspaceBase(from: decoder)
        self.emailDomains = try values.decodeIfPresent([URL].self, forKey: "email_domains")
        self.isOrganization = try values.decodeIfPresent(Bool.self, forKey: "is_organization")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(workspaceBase, forKey: "workspaceBase")
        try values.encodeIfPresent(emailDomains, forKey: "email_domains")
        try values.encodeIfPresent(isOrganization, forKey: "is_organization")
    }
}

public typealias WorkspaceRequest = WorkspaceBase

public typealias WorkspaceBase = WorkspaceCompact

public struct WorkspaceCompact: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    /// The name of the workspace.
    ///
    /// Example: "My Company Workspace"
    public var name: String?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.asanaResource = try AsanaResource(from: decoder)
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(name, forKey: "name")
    }
}

/// A user identification object for specification with the addUser/removeUser endpoints.
public struct WorkspaceAddUserRequest: Codable {
    /// A string identifying a user. This can either be the string "me", an email, or the gid of a user.
    ///
    /// Example: "12345"
    public var user: String?

    public init(user: String? = nil) {
        self.user = user
    }
}

/// A user identification object for specification with the addUser/removeUser endpoints.
public struct WorkspaceRemoveUserRequest: Codable {
    /// A string identifying a user. This can either be the string "me", an email, or the gid of a user.
    ///
    /// Example: "12345"
    public var user: String?

    public init(user: String? = nil) {
        self.user = user
    }
}

public struct WorkspaceMembershipResponse: Codable {
    public var workspaceMembershipBase: WorkspaceMembershipBase
    public var userTaskList: UserTaskListResponse?
    /// Reflects if this user still a member of the workspace.
    public var isActive: Bool?
    /// Reflects if this user is an admin of the workspace.
    public var isAdmin: Bool?
    /// Reflects if this user is a guest of the workspace.
    public var isGuest: Bool?

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.workspaceMembershipBase = try WorkspaceMembershipBase(from: decoder)
        self.userTaskList = try UserTaskListResponse(from: decoder)
        self.isActive = try values.decodeIfPresent(Bool.self, forKey: "is_active")
        self.isAdmin = try values.decodeIfPresent(Bool.self, forKey: "is_admin")
        self.isGuest = try values.decodeIfPresent(Bool.self, forKey: "is_guest")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(workspaceMembershipBase, forKey: "workspaceMembershipBase")
        try values.encodeIfPresent(userTaskList, forKey: "user_task_list")
        try values.encodeIfPresent(isActive, forKey: "is_active")
        try values.encodeIfPresent(isAdmin, forKey: "is_admin")
        try values.encodeIfPresent(isGuest, forKey: "is_guest")
    }
}

public typealias WorkspaceMembershipRequest = WorkspaceMembershipBase

public typealias WorkspaceMembershipBase = WorkspaceMembershipCompact

public struct WorkspaceMembershipCompact: Codable {
    /// A generic Asana Resource, containing a globally unique identifier.
    public var asanaResource: AsanaResource
    public var user: UserCompact?
    public var workspace: WorkspaceCompact?

    public init(from decoder: Decoder) throws {
        self.asanaResource = try AsanaResource(from: decoder)
        self.user = try UserCompact(from: decoder)
        self.workspace = try WorkspaceCompact(from: decoder)
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encode(asanaResource, forKey: "asanaResource")
        try values.encodeIfPresent(user, forKey: "user")
        try values.encodeIfPresent(workspace, forKey: "workspace")
    }
}

public enum AnyJSON: Equatable, Codable {
    case string(String)
    case number(Double)
    case object([String: AnyJSON])
    case array([AnyJSON])
    case bool(Bool)

    var value: Any {
        switch self {
        case .string(let string): return string
        case .number(let double): return double
        case .object(let dictionary): return dictionary
        case .array(let array): return array
        case .bool(let bool): return bool
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .array(array): try container.encode(array)
        case let .object(object): try container.encode(object)
        case let .string(string): try container.encode(string)
        case let .number(number): try container.encode(number)
        case let .bool(bool): try container.encode(bool)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let object = try? container.decode([String: AnyJSON].self) {
            self = .object(object)
        } else if let array = try? container.decode([AnyJSON].self) {
            self = .array(array)
        } else if let string = try? container.decode(String.self) {
            self = .string(string)
        } else if let bool = try? container.decode(Bool.self) {
            self = .bool(bool)
        } else if let number = try? container.decode(Double.self) {
            self = .number(number)
        } else {
            throw DecodingError.dataCorrupted(
                .init(codingPath: decoder.codingPath, debugDescription: "Invalid JSON value.")
            )
        }
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
