// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation
import Get
import URLQueryEncoder

extension Paths.Products.WithProductID {
    public var auditlogs: Auditlogs {
        Auditlogs(path: path + "/auditlogs")
    }

    public struct Auditlogs {
        /// Path: `/v1/products/{productId}/auditlogs`
        public let path: String

        /// List Audit log items for Product
        ///
        /// This endpoint returns the list of Audit log items for a given Product 
        /// and the result can be optionally filtered by Config and/or Environment.
        public func get(parameters: GetParameters? = nil) -> Request<[ConfigCatAPI.AuditLogItemModel]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var configID: String?
            public var environmentID: String?
            public var auditLogType: AuditLogType?
            public var fromUtcDateTime: Date?
            public var toUtcDateTime: Date?

            public typealias AuditLogType = ConfigCatAPI.AuditLogType

            public init(configID: String? = nil, environmentID: String? = nil, auditLogType: AuditLogType? = nil, fromUtcDateTime: Date? = nil, toUtcDateTime: Date? = nil) {
                self.configID = configID
                self.environmentID = environmentID
                self.auditLogType = auditLogType
                self.fromUtcDateTime = fromUtcDateTime
                self.toUtcDateTime = toUtcDateTime
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(configID, forKey: "configId")
                encoder.encode(environmentID, forKey: "environmentId")
                encoder.encode(auditLogType, forKey: "auditLogType")
                encoder.encode(fromUtcDateTime, forKey: "fromUtcDateTime")
                encoder.encode(toUtcDateTime, forKey: "toUtcDateTime")
                return encoder.items
            }
        }
    }
}

extension Paths.Organizations {
    public func organizationID(_ organizationID: String) -> WithOrganizationID {
        WithOrganizationID(path: "\(path)/\(organizationID)")
    }

    public struct WithOrganizationID {
        /// Path: `/v1/organizations/{organizationId}`
        public let path: String
    }
}

extension Paths.Organizations.WithOrganizationID {
    public var auditlogs: Auditlogs {
        Auditlogs(path: path + "/auditlogs")
    }

    public struct Auditlogs {
        /// Path: `/v1/organizations/{organizationId}/auditlogs`
        public let path: String

        /// List Audit log items for Organization
        ///
        /// This endpoint returns the list of Audit log items for a given Organization 
        /// and the result can be optionally filtered by Product and/or Config and/or Environment.
        public func get(parameters: GetParameters? = nil) -> Request<[ConfigCatAPI.AuditLogItemModel]> {
            .get(path, query: parameters?.asQuery)
        }

        public struct GetParameters {
            public var productID: String?
            public var configID: String?
            public var environmentID: String?
            public var auditLogType: AuditLogType?
            public var fromUtcDateTime: Date?
            public var toUtcDateTime: Date?

            public typealias AuditLogType = ConfigCatAPI.AuditLogType

            public init(productID: String? = nil, configID: String? = nil, environmentID: String? = nil, auditLogType: AuditLogType? = nil, fromUtcDateTime: Date? = nil, toUtcDateTime: Date? = nil) {
                self.productID = productID
                self.configID = configID
                self.environmentID = environmentID
                self.auditLogType = auditLogType
                self.fromUtcDateTime = fromUtcDateTime
                self.toUtcDateTime = toUtcDateTime
            }

            public var asQuery: [(String, String?)] {
                let encoder = URLQueryEncoder()
                encoder.encode(productID, forKey: "productId")
                encoder.encode(configID, forKey: "configId")
                encoder.encode(environmentID, forKey: "environmentId")
                encoder.encode(auditLogType, forKey: "auditLogType")
                encoder.encode(fromUtcDateTime, forKey: "fromUtcDateTime")
                encoder.encode(toUtcDateTime, forKey: "toUtcDateTime")
                return encoder.items
            }
        }
    }
}

extension Paths {
    public static var configs: Configs {
        Configs(path: "/v1/configs")
    }

    public struct Configs {
        /// Path: `/v1/configs`
        public let path: String
    }
}

extension Paths.Configs.WithConfigID {
    public var deletedSettings: DeletedSettings {
        DeletedSettings(path: path + "/deleted-settings")
    }

    public struct DeletedSettings {
        /// Path: `/v1/configs/{configId}/deleted-settings`
        public let path: String

        /// List Deleted Settings
        ///
        /// This endpoint returns the list of Feature Flags and Settings that were deleted from the given Config.
        public var get: Request<[ConfigCatAPI.SettingModel]> {
            .get(path)
        }
    }
}

extension Paths.Products.WithProductID {
    public var configs: Configs {
        Configs(path: path + "/configs")
    }

    public struct Configs {
        /// Path: `/v1/products/{productId}/configs`
        public let path: String

        /// List Configs
        ///
        /// This endpoint returns the list of the Configs that belongs to the given Product identified by the
        /// `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
        public var get: Request<[ConfigCatAPI.ConfigModel]> {
            .get(path)
        }

        /// Create Config
        ///
        /// This endpoint creates a new Config in a specified Product 
        /// identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
        public func post(_ body: ConfigCatAPI.CreateConfigRequest) -> Request<ConfigCatAPI.ConfigModel> {
            .post(path, body: body)
        }
    }
}

extension Paths.Configs {
    public func configID(_ configID: String) -> WithConfigID {
        WithConfigID(path: "\(path)/\(configID)")
    }

    public struct WithConfigID {
        /// Path: `/v1/configs/{configId}`
        public let path: String

        /// Get Config
        ///
        /// This endpoint returns the metadata of a Config
        /// identified by the `configId`.
        public var get: Request<ConfigCatAPI.ConfigModel> {
            .get(path)
        }

        /// Update Config
        ///
        /// This endpoint updates a Config identified by the `configId` parameter.
        public func put(_ body: ConfigCatAPI.UpdateConfigRequest) -> Request<ConfigCatAPI.ConfigModel> {
            .put(path, body: body)
        }

        /// Delete Config
        ///
        /// This endpoint removes a Config identified by the `configId` parameter.
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Products.WithProductID {
    public var environments: Environments {
        Environments(path: path + "/environments")
    }

    public struct Environments {
        /// Path: `/v1/products/{productId}/environments`
        public let path: String

        /// List Environments
        ///
        /// This endpoint returns the list of the Environments that belongs to the given Product identified by the
        /// `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
        public var get: Request<[ConfigCatAPI.EnvironmentModel]> {
            .get(path)
        }

        /// Create Environment
        ///
        /// This endpoint creates a new Environment in a specified Product 
        /// identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
        public func post(_ body: ConfigCatAPI.CreateEnvironmentModel) -> Request<ConfigCatAPI.EnvironmentModel> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var environments: Environments {
        Environments(path: "/v1/environments")
    }

    public struct Environments {
        /// Path: `/v1/environments`
        public let path: String
    }
}

extension Paths.Environments {
    public func environmentID(_ environmentID: String) -> WithEnvironmentID {
        WithEnvironmentID(path: "\(path)/\(environmentID)")
    }

    public struct WithEnvironmentID {
        /// Path: `/v1/environments/{environmentId}`
        public let path: String

        /// Get Environment
        ///
        /// This endpoint returns the metadata of an Environment 
        /// identified by the `environmentId`.
        public var get: Request<ConfigCatAPI.EnvironmentModel> {
            .get(path)
        }

        /// Update Environment
        ///
        /// This endpoint updates an Environment identified by the `environmentId` parameter.
        public func put(_ body: ConfigCatAPI.UpdateEnvironmentModel) -> Request<ConfigCatAPI.EnvironmentModel> {
            .put(path, body: body)
        }

        /// Delete Environment
        ///
        /// This endpoint removes an Environment identified by the `environmentId` parameter.
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Environments.WithEnvironmentID {
    public var settings: Settings {
        Settings(path: path + "/settings")
    }

    public struct Settings {
        /// Path: `/v1/environments/{environmentId}/settings`
        public let path: String
    }
}

extension Paths.Environments.WithEnvironmentID.Settings {
    public func settingID(_ settingID: Int) -> WithSettingID {
        WithSettingID(path: "\(path)/\(settingID)")
    }

    public struct WithSettingID {
        /// Path: `/v1/environments/{environmentId}/settings/{settingId}`
        public let path: String
    }
}

extension Paths.Environments.WithEnvironmentID.Settings.WithSettingID {
    public var value: Value {
        Value(path: path + "/value")
    }

    public struct Value {
        /// Path: `/v1/environments/{environmentId}/settings/{settingId}/value`
        public let path: String

        /// Get value
        ///
        /// This endpoint returns the value of a Feature Flag or Setting 
        /// in a specified Environment identified by the `environmentId` parameter.
        /// 
        /// The most important attributes in the response are the `value`, `rolloutRules` and `percentageRules`.
        /// The `value` represents what the clients will get when the evaluation requests of our SDKs 
        /// are not matching to any of the defined Targeting or Percentage Rules, or when there are no additional rules to evaluate.
        /// 
        /// The `rolloutRules` and `percentageRules` attributes are representing the current 
        /// Targeting and Percentage Rules configuration of the actual Feature Flag or Setting 
        /// in an **ordered** collection, which means the order of the returned rules is matching to the
        /// evaluation order. You can read more about these rules [here](https://configcat.com/docs/advanced/targeting/).
        public var get: Request<ConfigCatAPI.SettingValueModel> {
            .get(path)
        }

        /// Replace value
        ///
        /// This endpoint replaces the whole value of a Feature Flag or Setting in a specified Environment.
        /// 
        /// Only the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.
        /// 
        /// **Important:** As this endpoint is doing a complete replace, it's important to set every other attribute that you don't 
        /// want to change in its original state. Not listing one means that it will reset.
        /// 
        /// For example: We have the following resource.
        /// ```
        /// {
        /// 	"rolloutPercentageItems": [
        /// 		{
        /// 			"percentage": 30,
        /// 			"value": true
        /// 		},
        /// 		{
        /// 			"percentage": 70,
        /// 			"value": false
        /// 		}
        /// 	],
        /// 	"rolloutRules": [],
        /// 	"value": false
        /// }
        /// ```
        /// If we send a replace request body as below:
        /// ```
        /// {
        /// 	"value": true
        /// }
        /// ```
        /// Then besides that the default value is set to `true`, all the Percentage Rules are deleted. 
        /// So we get a response like this:
        /// ```
        /// {
        /// 	"rolloutPercentageItems": [],
        /// 	"rolloutRules": [],
        /// 	"value": true
        /// }
        /// ```
        public func put(reason: String? = nil, _ body: ConfigCatAPI.UpdateSettingValueModel) -> Request<ConfigCatAPI.SettingValueModel> {
            .put(path, query: makePutQuery(reason), body: body)
        }

        private func makePutQuery(_ reason: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(reason, forKey: "reason")
            return encoder.items
        }

        /// Update value
        ///
        /// This endpoint updates the value of a Feature Flag or Setting 
        /// with a collection of [JSON Patch](http://jsonpatch.com) operations in a specified Environment.
        /// 
        /// Only the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.
        /// 
        /// The advantage of using JSON Patch is that you can describe individual update operations on a resource
        /// without touching attributes that you don't want to change. It supports collection reordering, so it also 
        /// can be used for reordering the targeting rules of a Feature Flag or Setting.
        /// 
        /// For example: We have the following resource.
        /// ```
        /// {
        /// 	"rolloutPercentageItems": [
        /// 		{
        /// 			"percentage": 30,
        /// 			"value": true
        /// 		},
        /// 		{
        /// 			"percentage": 70,
        /// 			"value": false
        /// 		}
        /// 	],
        /// 	"rolloutRules": [],
        /// 	"value": false
        /// }
        /// ```
        /// If we send an update request body as below:
        /// ```
        /// [
        /// 	{
        /// 		"op": "replace",
        /// 		"path": "/value",
        /// 		"value": true
        /// 	}
        /// ]
        /// ```
        /// Only the default value is going to be set to `true` and all the Percentage Rules are remaining unchanged.
        /// So we get a response like this:
        /// ```
        /// {
        /// 	"rolloutPercentageItems": [
        /// 		{
        /// 			"percentage": 30,
        /// 			"value": true
        /// 		},
        /// 		{
        /// 			"percentage": 70,
        /// 			"value": false
        /// 		}
        /// 	],
        /// 	"rolloutRules": [],
        /// 	"value": true
        /// }
        /// ```
        public func patch(reason: String? = nil, _ body: [ConfigCatAPI.Operation]) -> Request<ConfigCatAPI.SettingValueModel> {
            .patch(path, query: makePatchQuery(reason), body: body)
        }

        private func makePatchQuery(_ reason: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(reason, forKey: "reason")
            return encoder.items
        }
    }
}

extension Paths.Configs.WithConfigID {
    public var environments: Environments {
        Environments(path: path + "/environments")
    }

    public struct Environments {
        /// Path: `/v1/configs/{configId}/environments`
        public let path: String
    }
}

extension Paths.Configs.WithConfigID.Environments.WithEnvironmentID {
    public var values: Values {
        Values(path: path + "/values")
    }

    public struct Values {
        /// Path: `/v1/configs/{configId}/environments/{environmentId}/values`
        public let path: String

        /// Get values
        ///
        /// This endpoint returns the value of a specified Config's Feature Flags or Settings identified by the `configId` parameter
        /// in a specified Environment identified by the `environmentId` parameter.
        /// 
        /// The most important attributes in the response are the `value`, `rolloutRules` and `percentageRules`.
        /// The `value` represents what the clients will get when the evaluation requests of our SDKs 
        /// are not matching to any of the defined Targeting or Percentage Rules, or when there are no additional rules to evaluate.
        /// 
        /// The `rolloutRules` and `percentageRules` attributes are representing the current 
        /// Targeting and Percentage Rules configuration of the actual Feature Flag or Setting 
        /// in an **ordered** collection, which means the order of the returned rules is matching to the
        /// evaluation order. You can read more about these rules [here](https://configcat.com/docs/advanced/targeting/).
        public var get: Request<ConfigCatAPI.ConfigSettingValuesModel> {
            .get(path)
        }
    }
}

extension Paths {
    public static var settings: Settings {
        Settings(path: "/v1/settings")
    }

    public struct Settings {
        /// Path: `/v1/settings`
        public let path: String
    }
}

extension Paths.Settings {
    public func settingKeyOrID(_ settingKeyOrID: String) -> WithSettingKeyOrID {
        WithSettingKeyOrID(path: "\(path)/\(settingKeyOrID)")
    }

    public struct WithSettingKeyOrID {
        /// Path: `/v1/settings/{settingKeyOrId}`
        public let path: String
    }
}

extension Paths.Settings.WithSettingKeyOrID {
    public var value: Value {
        Value(path: path + "/value")
    }

    public struct Value {
        /// Path: `/v1/settings/{settingKeyOrId}/value`
        public let path: String

        /// Get value
        ///
        /// This endpoint returns the value of a Feature Flag or Setting 
        /// in a specified Environment identified by the <a target="_blank" rel="noopener noreferrer" href="https://app.configcat.com/sdkkey">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.
        /// 
        /// The most important attributes in the response are the `value`, `rolloutRules` and `percentageRules`.
        /// The `value` represents what the clients will get when the evaluation requests of our SDKs 
        /// are not matching to any of the defined Targeting or Percentage Rules, or when there are no additional rules to evaluate.
        /// 
        /// The `rolloutRules` and `percentageRules` attributes are representing the current 
        /// Targeting and Percentage Rules configuration of the actual Feature Flag or Setting 
        /// in an **ordered** collection, which means the order of the returned rules is matching to the
        /// evaluation order. You can read more about these rules [here](https://configcat.com/docs/advanced/targeting/).
        public var get: Request<ConfigCatAPI.SettingValueModel> {
            .get(path)
        }

        /// Replace value
        ///
        /// This endpoint replaces the value of a Feature Flag or Setting 
        /// in a specified Environment identified by the <a target="_blank" rel="noopener noreferrer" href="https://app.configcat.com/sdkkey">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.
        /// 
        /// Only the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.
        /// 
        /// **Important:** As this endpoint is doing a complete replace, it's important to set every other attribute that you don't 
        /// want to change to its original state. Not listing one means that it will reset.
        /// 
        /// For example: We have the following resource.
        /// ```
        /// {
        /// 	"rolloutPercentageItems": [
        /// 		{
        /// 			"percentage": 30,
        /// 			"value": true
        /// 		},
        /// 		{
        /// 			"percentage": 70,
        /// 			"value": false
        /// 		}
        /// 	],
        /// 	"rolloutRules": [],
        /// 	"value": false
        /// }
        /// ```
        /// If we send a replace request body as below:
        /// ```
        /// {
        /// 	"value": true
        /// }
        /// ```
        /// Then besides that the default served value is set to `true`, all the Percentage Rules are deleted. 
        /// So we get a response like this:
        /// ```
        /// {
        /// 	"rolloutPercentageItems": [],
        /// 	"rolloutRules": [],
        /// 	"value": true
        /// }
        /// ```
        public func put(reason: String? = nil, _ body: ConfigCatAPI.UpdateSettingValueModel) -> Request<ConfigCatAPI.SettingValueModel> {
            .put(path, query: makePutQuery(reason), body: body)
        }

        private func makePutQuery(_ reason: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(reason, forKey: "reason")
            return encoder.items
        }

        /// Update value
        ///
        /// This endpoint updates the value of a Feature Flag or Setting 
        /// with a collection of [JSON Patch](http://jsonpatch.com) operations in a specified Environment
        /// identified by the <a target="_blank" rel="noopener noreferrer" href="https://app.configcat.com/sdkkey">SDK key</a> passed in the `X-CONFIGCAT-SDKKEY` header.
        /// 
        /// Only the `value`, `rolloutRules` and `percentageRules` attributes are modifiable by this endpoint.
        /// 
        /// The advantage of using JSON Patch is that you can describe individual update operations on a resource
        /// without touching attributes that you don't want to change. It supports collection reordering, so it also 
        /// can be used for reordering the targeting rules of a Feature Flag or Setting.
        /// 
        /// For example: We have the following resource.
        /// ```
        /// {
        /// 	"rolloutPercentageItems": [
        /// 		{
        /// 			"percentage": 30,
        /// 			"value": true
        /// 		},
        /// 		{
        /// 			"percentage": 70,
        /// 			"value": false
        /// 		}
        /// 	],
        /// 	"rolloutRules": [],
        /// 	"value": false
        /// }
        /// ```
        /// If we send an update request body as below:
        /// ```
        /// [
        /// 	{
        /// 		"op": "replace",
        /// 		"path": "/value",
        /// 		"value": true
        /// 	}
        /// ]
        /// ```
        /// Only the default served value is going to be set to `true` and all the Percentage Rules are remaining unchanged.
        /// So we get a response like this:
        /// ```
        /// {
        /// 	"rolloutPercentageItems": [
        /// 		{
        /// 			"percentage": 30,
        /// 			"value": true
        /// 		},
        /// 		{
        /// 			"percentage": 70,
        /// 			"value": false
        /// 		}
        /// 	],
        /// 	"rolloutRules": [],
        /// 	"value": true
        /// }
        /// ```
        public func patch(reason: String? = nil, _ body: [ConfigCatAPI.Operation]) -> Request<ConfigCatAPI.SettingValueModel> {
            .patch(path, query: makePatchQuery(reason), body: body)
        }

        private func makePatchQuery(_ reason: String?) -> [(String, String?)] {
            let encoder = URLQueryEncoder()
            encoder.encode(reason, forKey: "reason")
            return encoder.items
        }
    }
}

extension Paths.Configs.WithConfigID {
    public var settings: Settings {
        Settings(path: path + "/settings")
    }

    public struct Settings {
        /// Path: `/v1/configs/{configId}/settings`
        public let path: String

        /// List Flags
        ///
        /// This endpoint returns the list of the Feature Flags and Settings defined in a 
        /// specified Config, identified by the `configId` parameter.
        public var get: Request<[ConfigCatAPI.SettingModel]> {
            .get(path)
        }

        /// Create Flag
        ///
        /// This endpoint creates a new Feature Flag or Setting in a specified Config
        /// identified by the `configId` parameter.
        /// 
        /// **Important:** The `key` attribute must be unique within the given Config.
        public func post(_ body: ConfigCatAPI.CreateSettingModel) -> Request<ConfigCatAPI.SettingModel> {
            .post(path, body: body)
        }
    }
}

extension Paths.Settings {
    public func settingID(_ settingID: Int) -> WithSettingID {
        WithSettingID(path: "\(path)/\(settingID)")
    }

    public struct WithSettingID {
        /// Path: `/v1/settings/{settingId}`
        public let path: String

        /// Get Flag
        ///
        /// This endpoint returns the metadata attributes of a Feature Flag or Setting 
        /// identified by the `settingId` parameter.
        public var get: Request<ConfigCatAPI.SettingModel> {
            .get(path)
        }

        /// Update Flag
        ///
        /// This endpoint updates the metadata of a Feature Flag or Setting 
        /// with a collection of [JSON Patch](http://jsonpatch.com) operations in a specified Config.
        /// 
        /// Only the `name`, `hint` and `tags` attributes are modifiable by this endpoint.
        /// The `tags` attribute is a simple collection of the [tag IDs](#operation/get-tags) attached to the given setting.
        /// 
        /// The advantage of using JSON Patch is that you can describe individual update operations on a resource
        /// without touching attributes that you don't want to change.
        /// 
        /// For example: We have the following resource.
        /// ```
        /// {
        /// 	"settingId": 5345,
        /// 	"key": "myGrandFeature",
        /// 	"name": "Tihs is a naem with soem typos.",
        /// 	"hint": "This flag controls my grandioso feature.",
        /// 	"settingType": "boolean",
        /// 	"tags": [
        /// 		{
        /// 			"tagId": 0,
        /// 			"name": "sample tag",
        /// 			"color": "whale"
        /// 		}
        /// 	]
        /// }
        /// ```
        /// If we send an update request body as below (it changes the name and adds the already existing tag with the id 2):
        /// ```
        /// [
        /// 	{
        /// 		"op": "replace",
        /// 		"path": "/name",
        /// 		"value": "This is the name without typos."
        /// 	},
        /// 	{
        /// 		"op": "add",
        /// 		"path": "/tags/-",
        /// 		"value": 2
        /// 	}
        /// ]
        /// ```
        /// Only the `name` and `tags` are going to be updated and all the other attributes are remaining unchanged.
        /// So we get a response like this:
        /// ```
        /// {
        /// 	"settingId": 5345,
        /// 	"key": "myGrandFeature",
        /// 	"name": "This is the name without typos.",
        /// 	"hint": "This flag controls my grandioso feature.",
        /// 	"settingType": "boolean",
        /// 	"tags": [
        /// 		{
        /// 			"tagId": 0,
        /// 			"name": "sample tag",
        /// 			"color": "whale"
        /// 		},
        /// 		{
        /// 			"tagId": 2,
        /// 			"name": "another tag",
        /// 			"color": "koala"
        /// 		}
        /// 	]
        /// }
        /// ```
        public func patch(_ body: [ConfigCatAPI.Operation]) -> Request<ConfigCatAPI.SettingModel> {
            .patch(path, body: body)
        }

        /// Delete Flag
        ///
        /// This endpoint removes a Feature Flag or Setting from a specified Config, 
        /// identified by the `configId` parameter.
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var integrationLink: IntegrationLink {
        IntegrationLink(path: "/v1/integrationLink")
    }

    public struct IntegrationLink {
        /// Path: `/v1/integrationLink`
        public let path: String
    }
}

extension Paths.IntegrationLink {
    public func integrationLinkType(_ integrationLinkType: String) -> WithIntegrationLinkType {
        WithIntegrationLinkType(path: "\(path)/\(integrationLinkType)")
    }

    public struct WithIntegrationLinkType {
        /// Path: `/v1/integrationLink/{integrationLinkType}`
        public let path: String
    }
}

extension Paths.IntegrationLink.WithIntegrationLinkType {
    public func key(_ key: String) -> WithKey {
        WithKey(path: "\(path)/\(key)")
    }

    public struct WithKey {
        /// Path: `/v1/integrationLink/{integrationLinkType}/{key}`
        public let path: String
    }
}

extension Paths.IntegrationLink.WithIntegrationLinkType.WithKey {
    public var details: Details {
        Details(path: path + "/details")
    }

    public struct Details {
        /// Path: `/v1/integrationLink/{integrationLinkType}/{key}/details`
        public let path: String

        /// Get Integration link
        public var get: Request<ConfigCatAPI.IntegrationLinkDetailsModel> {
            .get(path)
        }
    }
}

extension Paths.Environments.WithEnvironmentID.Settings.WithSettingID {
    public var integrationLinks: IntegrationLinks {
        IntegrationLinks(path: path + "/integrationLinks")
    }

    public struct IntegrationLinks {
        /// Path: `/v1/environments/{environmentId}/settings/{settingId}/integrationLinks`
        public let path: String
    }
}

extension Paths.Environments.WithEnvironmentID.Settings.WithSettingID.IntegrationLinks {
    public func integrationLinkType(_ integrationLinkType: String) -> WithIntegrationLinkType {
        WithIntegrationLinkType(path: "\(path)/\(integrationLinkType)")
    }

    public struct WithIntegrationLinkType {
        /// Path: `/v1/environments/{environmentId}/settings/{settingId}/integrationLinks/{integrationLinkType}`
        public let path: String
    }
}

extension Paths.Environments.WithEnvironmentID.Settings.WithSettingID.IntegrationLinks.WithIntegrationLinkType {
    public func key(_ key: String) -> WithKey {
        WithKey(path: "\(path)/\(key)")
    }

    public struct WithKey {
        /// Path: `/v1/environments/{environmentId}/settings/{settingId}/integrationLinks/{integrationLinkType}/{key}`
        public let path: String

        /// Add or update Integration link
        public func post(_ body: ConfigCatAPI.AddOrUpdateIntegrationLinkModel? = nil) -> Request<ConfigCatAPI.IntegrationLinkModel> {
            .post(path, body: body)
        }

        /// Delete Integration link
        public var delete: Request<ConfigCatAPI.DeleteIntegrationLinkModel> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var jira: Jira {
        Jira(path: "/v1/jira")
    }

    public struct Jira {
        /// Path: `/v1/jira`
        public let path: String
    }
}

extension Paths.Jira {
    public var connect: Connect {
        Connect(path: path + "/Connect")
    }

    public struct Connect {
        /// Path: `/v1/jira/Connect`
        public let path: String

        public func post(_ body: ConfigCatAPI.ConnectRequest? = nil) -> Request<Void> {
            .post(path, body: body)
        }
    }
}

extension Paths.Jira {
    public var environments: Environments {
        Environments(path: path + "/environments")
    }

    public struct Environments {
        /// Path: `/v1/jira/environments`
        public let path: String
    }
}

extension Paths.Jira.Environments {
    public func environmentID(_ environmentID: String) -> WithEnvironmentID {
        WithEnvironmentID(path: "\(path)/\(environmentID)")
    }

    public struct WithEnvironmentID {
        /// Path: `/v1/jira/environments/{environmentId}`
        public let path: String
    }
}

extension Paths.Jira.Environments.WithEnvironmentID {
    public var settings: Settings {
        Settings(path: path + "/settings")
    }

    public struct Settings {
        /// Path: `/v1/jira/environments/{environmentId}/settings`
        public let path: String
    }
}

extension Paths.Jira.Environments.WithEnvironmentID.Settings {
    public func settingID(_ settingID: Int) -> WithSettingID {
        WithSettingID(path: "\(path)/\(settingID)")
    }

    public struct WithSettingID {
        /// Path: `/v1/jira/environments/{environmentId}/settings/{settingId}`
        public let path: String
    }
}

extension Paths.Jira.Environments.WithEnvironmentID.Settings.WithSettingID {
    public var integrationLinks: IntegrationLinks {
        IntegrationLinks(path: path + "/integrationLinks")
    }

    public struct IntegrationLinks {
        /// Path: `/v1/jira/environments/{environmentId}/settings/{settingId}/integrationLinks`
        public let path: String
    }
}

extension Paths.Jira.Environments.WithEnvironmentID.Settings.WithSettingID.IntegrationLinks {
    public func key(_ key: String) -> WithKey {
        WithKey(path: "\(path)/\(key)")
    }

    public struct WithKey {
        /// Path: `/v1/jira/environments/{environmentId}/settings/{settingId}/integrationLinks/{key}`
        public let path: String

        public func post(_ body: ConfigCatAPI.AddOrUpdateJiraIntegrationLinkModel? = nil) -> Request<ConfigCatAPI.IntegrationLinkModel> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var me: Me {
        Me(path: "/v1/me")
    }

    public struct Me {
        /// Path: `/v1/me`
        public let path: String

        /// Get authenticated user details
        public var get: Request<ConfigCatAPI.MeModel> {
            .get(path)
        }
    }
}

extension Paths.Organizations.WithOrganizationID {
    public var members: Members {
        Members(path: path + "/members")
    }

    public struct Members {
        /// Path: `/v1/organizations/{organizationId}/members`
        public let path: String

        /// List Organization Members
        ///
        /// This endpoint returns the list of Members that belongs 
        /// to the given Organization, identified by the `organizationId` parameter.
        public var get: Request<[ConfigCatAPI.UserModel]> {
            .get(path)
        }
    }
}

extension Paths.Products.WithProductID {
    public var members: Members {
        Members(path: path + "/members")
    }

    public struct Members {
        /// Path: `/v1/products/{productId}/members`
        public let path: String

        /// List Product Members
        ///
        /// This endpoint returns the list of Members that belongs 
        /// to the given Product, identified by the `productId` parameter.
        public var get: Request<[ConfigCatAPI.MemberModel]> {
            .get(path)
        }
    }
}

extension Paths.Organizations.WithOrganizationID.Members {
    public func userID(_ userID: String) -> WithUserID {
        WithUserID(path: "\(path)/\(userID)")
    }

    public struct WithUserID {
        /// Path: `/v1/organizations/{organizationId}/members/{userId}`
        public let path: String

        /// Delete Member from Organization
        ///
        /// This endpoint removes a Member identified by the `userId` from the 
        /// given Organization identified by the `organizationId` parameter.
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Products.WithProductID.Members {
    public func userID(_ userID: String) -> WithUserID {
        WithUserID(path: "\(path)/\(userID)")
    }

    public struct WithUserID {
        /// Path: `/v1/products/{productId}/members/{userId}`
        public let path: String

        /// Delete Member from Product
        ///
        /// This endpoint removes a Member identified by the `userId` from the 
        /// given Product identified by the `productId` parameter.
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Products.WithProductID.Members {
    public var invite: Invite {
        Invite(path: path + "/invite")
    }

    public struct Invite {
        /// Path: `/v1/products/{productId}/members/invite`
        public let path: String

        /// Invite Member
        ///
        /// This endpoint invites a Member into the given Product identified by the `productId` parameter.
        public func post(_ body: ConfigCatAPI.InviteMembersRequest) -> Request<Void> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var organizations: Organizations {
        Organizations(path: "/v1/organizations")
    }

    public struct Organizations {
        /// Path: `/v1/organizations`
        public let path: String

        /// List Organizations
        ///
        /// This endpoint returns the list of the Organizations that belongs to the user.
        public var get: Request<[ConfigCatAPI.OrganizationModel]> {
            .get(path)
        }
    }
}

extension Paths.Products.WithProductID {
    public var permissions: Permissions {
        Permissions(path: path + "/permissions")
    }

    public struct Permissions {
        /// Path: `/v1/products/{productId}/permissions`
        public let path: String

        /// List Permission Groups
        ///
        /// This endpoint returns the list of the Permission Groups that belongs to the given Product identified by the
        /// `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
        public var get: Request<[ConfigCatAPI.PermissionGroupModel]> {
            .get(path)
        }

        /// Create Permission Group
        ///
        /// This endpoint creates a new Permission Group in a specified Product 
        /// identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
        public func post(_ body: ConfigCatAPI.CreatePermissionGroupRequest) -> Request<ConfigCatAPI.PermissionGroupModel> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var permissions: Permissions {
        Permissions(path: "/v1/permissions")
    }

    public struct Permissions {
        /// Path: `/v1/permissions`
        public let path: String
    }
}

extension Paths.Permissions {
    public func permissionGroupID(_ permissionGroupID: Int) -> WithPermissionGroupID {
        WithPermissionGroupID(path: "\(path)/\(permissionGroupID)")
    }

    public struct WithPermissionGroupID {
        /// Path: `/v1/permissions/{permissionGroupId}`
        public let path: String

        /// Get Permission Group
        ///
        /// This endpoint returns the metadata of a Permission Group 
        /// identified by the `permissionGroupId`.
        public var get: Request<ConfigCatAPI.PermissionGroupModel> {
            .get(path)
        }

        /// Update Permission Group
        ///
        /// This endpoint updates a Permission Group identified by the `permissionGroupId` parameter.
        public func put(_ body: ConfigCatAPI.UpdatePermissionGroupRequest) -> Request<ConfigCatAPI.PermissionGroupModel> {
            .put(path, body: body)
        }

        /// Delete Permission Group
        ///
        /// This endpoint removes a Permission Group identified by the `permissionGroupId` parameter.
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths {
    public static var products: Products {
        Products(path: "/v1/products")
    }

    public struct Products {
        /// Path: `/v1/products`
        public let path: String

        /// List Products
        ///
        /// This endpoint returns the list of the Products that belongs to the user.
        public var get: Request<[ConfigCatAPI.ProductModel]> {
            .get(path)
        }
    }
}

extension Paths.Organizations.WithOrganizationID {
    public var products: Products {
        Products(path: path + "/products")
    }

    public struct Products {
        /// Path: `/v1/organizations/{organizationId}/products`
        public let path: String

        /// Create Product
        ///
        /// This endpoint creates a new Product in a specified Organization 
        /// identified by the `organizationId` parameter, which can be obtained from the [List Organizations](#operation/get-organizations) endpoint.
        public func post(_ body: ConfigCatAPI.CreateProductRequest) -> Request<ConfigCatAPI.ProductModel> {
            .post(path, body: body)
        }
    }
}

extension Paths.Products {
    public func productID(_ productID: String) -> WithProductID {
        WithProductID(path: "\(path)/\(productID)")
    }

    public struct WithProductID {
        /// Path: `/v1/products/{productId}`
        public let path: String

        /// Get Product
        ///
        /// This endpoint returns the metadata of a Product 
        /// identified by the `productId`.
        public var get: Request<ConfigCatAPI.ProductModel> {
            .get(path)
        }

        /// Update Product
        ///
        /// This endpoint updates a Product identified by the `productId` parameter.
        public func put(_ body: ConfigCatAPI.UpdateProductRequest) -> Request<ConfigCatAPI.ProductModel> {
            .put(path, body: body)
        }

        /// Delete Product
        ///
        /// This endpoint removes a Product identified by the `productId` parameter.
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Configs.WithConfigID.Environments {
    public func environmentID(_ environmentID: String) -> WithEnvironmentID {
        WithEnvironmentID(path: "\(path)/\(environmentID)")
    }

    public struct WithEnvironmentID {
        /// Path: `/v1/configs/{configId}/environments/{environmentId}`
        public let path: String

        /// Get SDK Key
        ///
        /// This endpoint returns the SDK Key for your Config in a specified Environment.
        public var get: Request<ConfigCatAPI.SdkKeysModel> {
            .get(path)
        }
    }
}

extension Paths.Products.WithProductID {
    public var tags: Tags {
        Tags(path: path + "/tags")
    }

    public struct Tags {
        /// Path: `/v1/products/{productId}/tags`
        public let path: String

        /// List Tags
        ///
        /// This endpoint returns the list of the Tags in a 
        /// specified Product, identified by the `productId` parameter.
        public var get: Request<[ConfigCatAPI.TagModel]> {
            .get(path)
        }

        /// Create Tag
        ///
        /// This endpoint creates a new Tag in a specified Product 
        /// identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
        public func post(_ body: ConfigCatAPI.CreateTagModel) -> Request<ConfigCatAPI.TagModel> {
            .post(path, body: body)
        }
    }
}

extension Paths {
    public static var tags: Tags {
        Tags(path: "/v1/tags")
    }

    public struct Tags {
        /// Path: `/v1/tags`
        public let path: String
    }
}

extension Paths.Tags {
    public func tagID(_ tagID: Int) -> WithTagID {
        WithTagID(path: "\(path)/\(tagID)")
    }

    public struct WithTagID {
        /// Path: `/v1/tags/{tagId}`
        public let path: String

        /// Get Tag
        ///
        /// This endpoint returns the metadata of a Tag 
        /// identified by the `tagId`.
        public var get: Request<ConfigCatAPI.TagModel> {
            .get(path)
        }

        /// Update Tag
        ///
        /// This endpoint updates a Tag identified by the `tagId` parameter.
        public func put(_ body: ConfigCatAPI.UpdateTagModel) -> Request<ConfigCatAPI.TagModel> {
            .put(path, body: body)
        }

        /// Delete Tag
        ///
        /// This endpoint deletes a Tag identified by the `tagId` parameter. To remove a Tag from a Feature Flag or Setting use the [Update Flag](#operation/update-setting) endpoint.
        public var delete: Request<Void> {
            .delete(path)
        }
    }
}

extension Paths.Tags.WithTagID {
    public var settings: Settings {
        Settings(path: path + "/settings")
    }

    public struct Settings {
        /// Path: `/v1/tags/{tagId}/settings`
        public let path: String

        /// List Settings by Tag
        ///
        /// This endpoint returns the list of the Settings that 
        /// has the specified Tag, identified by the `tagId` parameter.
        public var get: Request<[ConfigCatAPI.SettingModel]> {
            .get(path)
        }
    }
}

public enum Paths {}
