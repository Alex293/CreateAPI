// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation

public enum AccessType: String, Codable, CaseIterable {
    case readOnly
    case full
    case custom
}

public struct AddOrUpdateIntegrationLinkModel: Codable {
    public var description: String?
    public var url: String?

    public init(description: String? = nil, url: String? = nil) {
        self.description = description
        self.url = url
    }
}

public struct AddOrUpdateJiraIntegrationLinkModel: Codable {
    public var jiraJwtToken: String
    public var clientKey: String
    public var description: String?
    public var url: String?

    public init(jiraJwtToken: String, clientKey: String, description: String? = nil, url: String? = nil) {
        self.jiraJwtToken = jiraJwtToken
        self.clientKey = clientKey
        self.description = description
        self.url = url
    }
}

public struct AuditLogItemModel: Codable {
    public var auditLogID: Int?
    public var auditLogDateTime: Date?
    public var auditLogType: String?
    public var userEmail: String?
    public var userName: String?
    public var `where`: String?
    public var why: String?
    public var actionTarget: String?
    public var details: String?

    public init(auditLogID: Int? = nil, auditLogDateTime: Date? = nil, auditLogType: String? = nil, userEmail: String? = nil, userName: String? = nil, `where`: String? = nil, why: String? = nil, actionTarget: String? = nil, details: String? = nil) {
        self.auditLogID = auditLogID
        self.auditLogDateTime = auditLogDateTime
        self.auditLogType = auditLogType
        self.userEmail = userEmail
        self.userName = userName
        self.where = `where`
        self.why = why
        self.actionTarget = actionTarget
        self.details = details
    }

    private enum CodingKeys: String, CodingKey {
        case auditLogID = "auditLogId"
        case auditLogDateTime
        case auditLogType
        case userEmail
        case userName
        case `where` = "where"
        case why
        case actionTarget
        case details
    }
}

public enum AuditLogType: String, Codable, CaseIterable {
    case productCreated
    case productChanged
    case productOwnershipTransferred
    case productDeleted
    case teamMemberInvited
    case teamMemberInvitationRevoked
    case teamMemberJoined
    case teamMemberPermissionGroupChanged
    case teamMemberRemoved
    case teamMemberLeft
    case teamMemberInvitationChanged
    case teamMemberInvitationResent
    case teamMemberInvitationRejected
    case configCreated
    case configChanged
    case configDeleted
    case environmentCreated
    case environmentChanged
    case environmentDeleted
    case settingCreated
    case settingChanged
    case settingDeleted
    case settingValueChanged
    case webHookCreated
    case webHookChanged
    case webHookDeleted
    case subscriptionChanged
    case permissionGroupCreated
    case permissionGroupChanged
    case permissionGroupDeleted
    case permissionGroupDefault
    case apiKeyAdded
    case apiKeyRemoved
    case integrationAdded
    case integrationChanged
    case integrationRemoved
    case apiKeyConnected
    case integrationLinkAdded
    case integrationLinkRemoved
    case organizationAdded
    case organizationRemoved
    case organizationChanged
    case organizationSubscriptionTypeChanged
    case organizationAdminAdded
    case organizationAdminChanged
    case organizationAdminRemoved
    case organizationAdminLeft
    case organizationAdminDisabled2FA
    case tagAdded
    case tagChanged
    case tagRemoved
    case settingTagAdded
    case settingTagRemoved
    case publicAPIAccessTokenAdded = "publicApiAccessTokenAdded"
    case publicAPIAccessTokenRemoved = "publicApiAccessTokenRemoved"
    case domainAdded
    case domainVerified
    case domainRemoved
    case domainSamlConfigured
    case domainSamlDeleted
    case autoProvisioningConfigurationChanged
    case organizationMemberJoined
    case organizationMemberProductJoinRequested
    case organizationMemberProductJoinRequestRejected
    case organizationMemberProductJoinRequestApproved
    case codeReferencesUploaded
    case codeReferenceDeleted
    case codeReferenceStaleBrancheDeleted
}

public struct ConfigModel: Codable {
    public var product: ProductModel?
    public var configID: String?
    public var name: String?
    public var description: String?

    public init(product: ProductModel? = nil, configID: String? = nil, name: String? = nil, description: String? = nil) {
        self.product = product
        self.configID = configID
        self.name = name
        self.description = description
    }

    private enum CodingKeys: String, CodingKey {
        case product
        case configID = "configId"
        case name
        case description
    }
}

public struct ConfigModelHaljson: Codable {
    public var embedded: Embedded?
    public var configID: String?
    public var name: String?
    public var description: String?
    public var links: Links?

    public struct Embedded: Codable {
        public var product: Product?

        public struct Product: Codable {
            public var embedded: Embedded?
            public var productID: String?
            public var name: String?
            public var description: String?
            public var links: Links?

            public struct Embedded: Codable {
                public var organization: Organization?

                public struct Organization: Codable {
                    public var organizationID: String?
                    public var name: String?
                    public var links: Links?

                    public struct Links: Codable {
                        public var products: String?
                        public var members: String?

                        public init(products: String? = nil, members: String? = nil) {
                            self.products = products
                            self.members = members
                        }
                    }

                    public init(organizationID: String? = nil, name: String? = nil, links: Links? = nil) {
                        self.organizationID = organizationID
                        self.name = name
                        self.links = links
                    }

                    private enum CodingKeys: String, CodingKey {
                        case organizationID = "organizationId"
                        case name
                        case links = "_links"
                    }
                }

                public init(organization: Organization? = nil) {
                    self.organization = organization
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var configs: String?
                public var environments: String?
                public var tags: String?
                public var permissionGroups: String?
                public var members: String?

                public init(this: String? = nil, configs: String? = nil, environments: String? = nil, tags: String? = nil, permissionGroups: String? = nil, members: String? = nil) {
                    self.this = this
                    self.configs = configs
                    self.environments = environments
                    self.tags = tags
                    self.permissionGroups = permissionGroups
                    self.members = members
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case configs
                    case environments
                    case tags
                    case permissionGroups = "permission-groups"
                    case members
                }
            }

            public init(embedded: Embedded? = nil, productID: String? = nil, name: String? = nil, description: String? = nil, links: Links? = nil) {
                self.embedded = embedded
                self.productID = productID
                self.name = name
                self.description = description
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case embedded = "_embedded"
                case productID = "productId"
                case name
                case description
                case links = "_links"
            }
        }

        public init(product: Product? = nil) {
            self.product = product
        }
    }

    public struct Links: Codable {
        public var this: String?
        public var settings: String?

        public init(this: String? = nil, settings: String? = nil) {
            self.this = this
            self.settings = settings
        }

        private enum CodingKeys: String, CodingKey {
            case this = "self"
            case settings
        }
    }

    public init(embedded: Embedded? = nil, configID: String? = nil, name: String? = nil, description: String? = nil, links: Links? = nil) {
        self.embedded = embedded
        self.configID = configID
        self.name = name
        self.description = description
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case embedded = "_embedded"
        case configID = "configId"
        case name
        case description
        case links = "_links"
    }
}

public struct ConfigSettingValueModel: Codable {
    public var setting: SettingDataModel?
    public var updatedAt: Date?
    public var lastUpdaterUserEmail: String?
    public var lastUpdaterUserFullName: String?
    public var integrationLinks: [IntegrationLinkModel]?
    public var settingTags: [SettingTagModel]?
    /// The targeting rule collection.
    public var rolloutRules: [RolloutRuleModel]?
    /// The percentage rule collection.
    public var rolloutPercentageItems: [RolloutPercentageItemModel]?
    /// The value to serve. It must respect the setting type.
    public var value: AnyJSON?

    public init(setting: SettingDataModel? = nil, updatedAt: Date? = nil, lastUpdaterUserEmail: String? = nil, lastUpdaterUserFullName: String? = nil, integrationLinks: [IntegrationLinkModel]? = nil, settingTags: [SettingTagModel]? = nil, rolloutRules: [RolloutRuleModel]? = nil, rolloutPercentageItems: [RolloutPercentageItemModel]? = nil, value: AnyJSON? = nil) {
        self.setting = setting
        self.updatedAt = updatedAt
        self.lastUpdaterUserEmail = lastUpdaterUserEmail
        self.lastUpdaterUserFullName = lastUpdaterUserFullName
        self.integrationLinks = integrationLinks
        self.settingTags = settingTags
        self.rolloutRules = rolloutRules
        self.rolloutPercentageItems = rolloutPercentageItems
        self.value = value
    }
}

public struct ConfigSettingValuesModel: Codable {
    public var config: ConfigModel?
    public var environment: EnvironmentModel?
    public var isReadOnly: Bool?
    public var settingValues: [ConfigSettingValueModel]?

    public init(config: ConfigModel? = nil, environment: EnvironmentModel? = nil, isReadOnly: Bool? = nil, settingValues: [ConfigSettingValueModel]? = nil) {
        self.config = config
        self.environment = environment
        self.isReadOnly = isReadOnly
        self.settingValues = settingValues
    }

    private enum CodingKeys: String, CodingKey {
        case config
        case environment
        case isReadOnly = "readOnly"
        case settingValues
    }
}

public struct ConnectRequest: Codable {
    public var clientKey: String
    public var jiraJwtToken: String

    public init(clientKey: String, jiraJwtToken: String) {
        self.clientKey = clientKey
        self.jiraJwtToken = jiraJwtToken
    }
}

public struct CreateConfigRequest: Codable {
    public var name: String
    public var description: String?

    public init(name: String, description: String? = nil) {
        self.name = name
        self.description = description
    }
}

public struct CreateEnvironmentModel: Codable {
    public var name: String
    public var color: String?
    public var description: String?

    public init(name: String, color: String? = nil, description: String? = nil) {
        self.name = name
        self.color = color
        self.description = description
    }
}

public struct CreatePermissionGroupRequest: Codable {
    public var name: String
    public var canManageMembers: Bool?
    public var canCreateOrUpdateConfig: Bool?
    public var canDeleteConfig: Bool?
    public var canCreateOrUpdateEnvironment: Bool?
    public var canDeleteEnvironment: Bool?
    public var canCreateOrUpdateSetting: Bool?
    public var canTagSetting: Bool?
    public var canDeleteSetting: Bool?
    public var canCreateOrUpdateTag: Bool?
    public var canDeleteTag: Bool?
    public var canManageWebhook: Bool?
    public var canUseExportImport: Bool?
    public var canManageProductPreferences: Bool?
    public var canManageIntegrations: Bool?
    public var canViewSdkKey: Bool?
    public var canRotateSdkKey: Bool?
    public var canViewProductStatistics: Bool?
    public var canViewProductAuditLog: Bool?
    public var accessType: AccessType?
    public var newEnvironmentAccessType: EnvironmentAccessType?
    public var environmentAccesses: [EnvironmentAccessModel]?

    public init(name: String, canManageMembers: Bool? = nil, canCreateOrUpdateConfig: Bool? = nil, canDeleteConfig: Bool? = nil, canCreateOrUpdateEnvironment: Bool? = nil, canDeleteEnvironment: Bool? = nil, canCreateOrUpdateSetting: Bool? = nil, canTagSetting: Bool? = nil, canDeleteSetting: Bool? = nil, canCreateOrUpdateTag: Bool? = nil, canDeleteTag: Bool? = nil, canManageWebhook: Bool? = nil, canUseExportImport: Bool? = nil, canManageProductPreferences: Bool? = nil, canManageIntegrations: Bool? = nil, canViewSdkKey: Bool? = nil, canRotateSdkKey: Bool? = nil, canViewProductStatistics: Bool? = nil, canViewProductAuditLog: Bool? = nil, accessType: AccessType? = nil, newEnvironmentAccessType: EnvironmentAccessType? = nil, environmentAccesses: [EnvironmentAccessModel]? = nil) {
        self.name = name
        self.canManageMembers = canManageMembers
        self.canCreateOrUpdateConfig = canCreateOrUpdateConfig
        self.canDeleteConfig = canDeleteConfig
        self.canCreateOrUpdateEnvironment = canCreateOrUpdateEnvironment
        self.canDeleteEnvironment = canDeleteEnvironment
        self.canCreateOrUpdateSetting = canCreateOrUpdateSetting
        self.canTagSetting = canTagSetting
        self.canDeleteSetting = canDeleteSetting
        self.canCreateOrUpdateTag = canCreateOrUpdateTag
        self.canDeleteTag = canDeleteTag
        self.canManageWebhook = canManageWebhook
        self.canUseExportImport = canUseExportImport
        self.canManageProductPreferences = canManageProductPreferences
        self.canManageIntegrations = canManageIntegrations
        self.canViewSdkKey = canViewSdkKey
        self.canRotateSdkKey = canRotateSdkKey
        self.canViewProductStatistics = canViewProductStatistics
        self.canViewProductAuditLog = canViewProductAuditLog
        self.accessType = accessType
        self.newEnvironmentAccessType = newEnvironmentAccessType
        self.environmentAccesses = environmentAccesses
    }
}

public struct CreateProductRequest: Codable {
    public var name: String
    public var description: String?

    public init(name: String, description: String? = nil) {
        self.name = name
        self.description = description
    }
}

public struct CreateSettingModel: Codable {
    /// The key of the setting.
    public var key: String
    /// The name of the setting, shown on the Dashboard UI.
    public var name: String
    public var settingType: SettingType
    /// A short description for the setting, shown on the Dashboard UI.
    public var hint: String?
    /// The IDs of the tags which are attached to the setting.
    public var tags: [Int]?

    public init(key: String, name: String, settingType: SettingType, hint: String? = nil, tags: [Int]? = nil) {
        self.key = key
        self.name = name
        self.settingType = settingType
        self.hint = hint
        self.tags = tags
    }
}

public struct CreateTagModel: Codable {
    public var name: String
    public var color: String?

    public init(name: String, color: String? = nil) {
        self.name = name
        self.color = color
    }
}

public struct DeleteIntegrationLinkModel: Codable {
    public var hasRemainingIntegrationLink: Bool?

    public init(hasRemainingIntegrationLink: Bool? = nil) {
        self.hasRemainingIntegrationLink = hasRemainingIntegrationLink
    }
}

public struct EnvironmentAccessModel: Codable {
    public var environmentID: String?
    public var name: String?
    public var color: String?
    public var description: String?
    public var environmentAccessType: EnvironmentAccessType?

    public init(environmentID: String? = nil, name: String? = nil, color: String? = nil, description: String? = nil, environmentAccessType: EnvironmentAccessType? = nil) {
        self.environmentID = environmentID
        self.name = name
        self.color = color
        self.description = description
        self.environmentAccessType = environmentAccessType
    }

    private enum CodingKeys: String, CodingKey {
        case environmentID = "environmentId"
        case name
        case color
        case description
        case environmentAccessType
    }
}

public enum EnvironmentAccessType: String, Codable, CaseIterable {
    case full
    case readOnly
    case `none`
}

public struct EnvironmentModel: Codable {
    public var product: ProductModel?
    public var environmentID: String?
    public var name: String?
    public var color: String?
    public var description: String?

    public init(product: ProductModel? = nil, environmentID: String? = nil, name: String? = nil, color: String? = nil, description: String? = nil) {
        self.product = product
        self.environmentID = environmentID
        self.name = name
        self.color = color
        self.description = description
    }

    private enum CodingKeys: String, CodingKey {
        case product
        case environmentID = "environmentId"
        case name
        case color
        case description
    }
}

public struct EnvironmentModelHaljson: Codable {
    public var embedded: Embedded?
    public var environmentID: String?
    public var name: String?
    public var color: String?
    public var description: String?
    public var links: Links?

    public struct Embedded: Codable {
        public var product: Product?

        public struct Product: Codable {
            public var embedded: Embedded?
            public var productID: String?
            public var name: String?
            public var description: String?
            public var links: Links?

            public struct Embedded: Codable {
                public var organization: Organization?

                public struct Organization: Codable {
                    public var organizationID: String?
                    public var name: String?
                    public var links: Links?

                    public struct Links: Codable {
                        public var products: String?
                        public var members: String?

                        public init(products: String? = nil, members: String? = nil) {
                            self.products = products
                            self.members = members
                        }
                    }

                    public init(organizationID: String? = nil, name: String? = nil, links: Links? = nil) {
                        self.organizationID = organizationID
                        self.name = name
                        self.links = links
                    }

                    private enum CodingKeys: String, CodingKey {
                        case organizationID = "organizationId"
                        case name
                        case links = "_links"
                    }
                }

                public init(organization: Organization? = nil) {
                    self.organization = organization
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var configs: String?
                public var environments: String?
                public var tags: String?
                public var permissionGroups: String?
                public var members: String?

                public init(this: String? = nil, configs: String? = nil, environments: String? = nil, tags: String? = nil, permissionGroups: String? = nil, members: String? = nil) {
                    self.this = this
                    self.configs = configs
                    self.environments = environments
                    self.tags = tags
                    self.permissionGroups = permissionGroups
                    self.members = members
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case configs
                    case environments
                    case tags
                    case permissionGroups = "permission-groups"
                    case members
                }
            }

            public init(embedded: Embedded? = nil, productID: String? = nil, name: String? = nil, description: String? = nil, links: Links? = nil) {
                self.embedded = embedded
                self.productID = productID
                self.name = name
                self.description = description
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case embedded = "_embedded"
                case productID = "productId"
                case name
                case description
                case links = "_links"
            }
        }

        public init(product: Product? = nil) {
            self.product = product
        }
    }

    public struct Links: Codable {
        public var this: String?

        public init(this: String? = nil) {
            self.this = this
        }

        private enum CodingKeys: String, CodingKey {
            case this = "self"
        }
    }

    public init(embedded: Embedded? = nil, environmentID: String? = nil, name: String? = nil, color: String? = nil, description: String? = nil, links: Links? = nil) {
        self.embedded = embedded
        self.environmentID = environmentID
        self.name = name
        self.color = color
        self.description = description
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case embedded = "_embedded"
        case environmentID = "environmentId"
        case name
        case color
        case description
        case links = "_links"
    }
}

public struct IntegrationLinkDetail: Codable {
    public var product: ProductModel?
    public var config: ConfigModel?
    public var environment: EnvironmentModel?
    public var setting: SettingDataModel?
    public var isReadOnly: Bool?
    public var status: String?

    public init(product: ProductModel? = nil, config: ConfigModel? = nil, environment: EnvironmentModel? = nil, setting: SettingDataModel? = nil, isReadOnly: Bool? = nil, status: String? = nil) {
        self.product = product
        self.config = config
        self.environment = environment
        self.setting = setting
        self.isReadOnly = isReadOnly
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case product
        case config
        case environment
        case setting
        case isReadOnly = "readOnly"
        case status
    }
}

public struct IntegrationLinkDetailsModel: Codable {
    public var details: [IntegrationLinkDetail]?
    public var allIntegrationLinkCount: Int?

    public init(details: [IntegrationLinkDetail]? = nil, allIntegrationLinkCount: Int? = nil) {
        self.details = details
        self.allIntegrationLinkCount = allIntegrationLinkCount
    }
}

public struct IntegrationLinkModel: Codable {
    public var key: String?
    public var description: String?
    public var integrationLinkType: IntegrationLinkType?
    public var url: String?

    public init(key: String? = nil, description: String? = nil, integrationLinkType: IntegrationLinkType? = nil, url: String? = nil) {
        self.key = key
        self.description = description
        self.integrationLinkType = integrationLinkType
        self.url = url
    }
}

public enum IntegrationLinkType: String, Codable, CaseIterable {
    case trello
    case jira
}

public struct InviteMembersRequest: Codable {
    public var emails: [String]
    public var permissionGroupID: Int

    public init(emails: [String], permissionGroupID: Int) {
        self.emails = emails
        self.permissionGroupID = permissionGroupID
    }

    private enum CodingKeys: String, CodingKey {
        case emails
        case permissionGroupID = "permissionGroupId"
    }
}

public struct MemberModel: Codable {
    public var userID: String?
    public var productID: String?
    public var permissionGroupID: Int?
    public var fullName: String?
    public var email: String?

    public init(userID: String? = nil, productID: String? = nil, permissionGroupID: Int? = nil, fullName: String? = nil, email: String? = nil) {
        self.userID = userID
        self.productID = productID
        self.permissionGroupID = permissionGroupID
        self.fullName = fullName
        self.email = email
    }

    private enum CodingKeys: String, CodingKey {
        case userID = "userId"
        case productID = "productId"
        case permissionGroupID = "permissionGroupId"
        case fullName
        case email
    }
}

public struct MeModel: Codable {
    public var email: String?
    public var fullName: String?

    public init(email: String? = nil, fullName: String? = nil) {
        self.email = email
        self.fullName = fullName
    }
}

public struct Operation: Codable {
    public var value: AnyJSON?
    public var path: String?
    public var op: String?
    public var from: String?

    public init(value: AnyJSON? = nil, path: String? = nil, op: String? = nil, from: String? = nil) {
        self.value = value
        self.path = path
        self.op = op
        self.from = from
    }
}

public struct OrganizationModel: Codable {
    public var organizationID: String?
    public var name: String?

    public init(organizationID: String? = nil, name: String? = nil) {
        self.organizationID = organizationID
        self.name = name
    }

    private enum CodingKeys: String, CodingKey {
        case organizationID = "organizationId"
        case name
    }
}

public struct OrganizationModelHaljson: Codable {
    public var organizationID: String?
    public var name: String?
    public var links: Links?

    public struct Links: Codable {
        public var products: String?
        public var members: String?

        public init(products: String? = nil, members: String? = nil) {
            self.products = products
            self.members = members
        }
    }

    public init(organizationID: String? = nil, name: String? = nil, links: Links? = nil) {
        self.organizationID = organizationID
        self.name = name
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case organizationID = "organizationId"
        case name
        case links = "_links"
    }
}

public struct PermissionGroupModel: Codable {
    public var permissionGroupID: Int?
    public var name: String?
    public var canManageMembers: Bool?
    public var canCreateOrUpdateConfig: Bool?
    public var canDeleteConfig: Bool?
    public var canCreateOrUpdateEnvironment: Bool?
    public var canDeleteEnvironment: Bool?
    public var canCreateOrUpdateSetting: Bool?
    public var canTagSetting: Bool?
    public var canDeleteSetting: Bool?
    public var canCreateOrUpdateTag: Bool?
    public var canDeleteTag: Bool?
    public var canManageWebhook: Bool?
    public var canUseExportImport: Bool?
    public var canManageProductPreferences: Bool?
    public var canManageIntegrations: Bool?
    public var canViewSdkKey: Bool?
    public var canRotateSdkKey: Bool?
    public var accessType: AccessType?
    public var newEnvironmentAccessType: EnvironmentAccessType?
    public var environmentAccesses: [EnvironmentAccessModel]?

    public init(permissionGroupID: Int? = nil, name: String? = nil, canManageMembers: Bool? = nil, canCreateOrUpdateConfig: Bool? = nil, canDeleteConfig: Bool? = nil, canCreateOrUpdateEnvironment: Bool? = nil, canDeleteEnvironment: Bool? = nil, canCreateOrUpdateSetting: Bool? = nil, canTagSetting: Bool? = nil, canDeleteSetting: Bool? = nil, canCreateOrUpdateTag: Bool? = nil, canDeleteTag: Bool? = nil, canManageWebhook: Bool? = nil, canUseExportImport: Bool? = nil, canManageProductPreferences: Bool? = nil, canManageIntegrations: Bool? = nil, canViewSdkKey: Bool? = nil, canRotateSdkKey: Bool? = nil, accessType: AccessType? = nil, newEnvironmentAccessType: EnvironmentAccessType? = nil, environmentAccesses: [EnvironmentAccessModel]? = nil) {
        self.permissionGroupID = permissionGroupID
        self.name = name
        self.canManageMembers = canManageMembers
        self.canCreateOrUpdateConfig = canCreateOrUpdateConfig
        self.canDeleteConfig = canDeleteConfig
        self.canCreateOrUpdateEnvironment = canCreateOrUpdateEnvironment
        self.canDeleteEnvironment = canDeleteEnvironment
        self.canCreateOrUpdateSetting = canCreateOrUpdateSetting
        self.canTagSetting = canTagSetting
        self.canDeleteSetting = canDeleteSetting
        self.canCreateOrUpdateTag = canCreateOrUpdateTag
        self.canDeleteTag = canDeleteTag
        self.canManageWebhook = canManageWebhook
        self.canUseExportImport = canUseExportImport
        self.canManageProductPreferences = canManageProductPreferences
        self.canManageIntegrations = canManageIntegrations
        self.canViewSdkKey = canViewSdkKey
        self.canRotateSdkKey = canRotateSdkKey
        self.accessType = accessType
        self.newEnvironmentAccessType = newEnvironmentAccessType
        self.environmentAccesses = environmentAccesses
    }

    private enum CodingKeys: String, CodingKey {
        case permissionGroupID = "permissionGroupId"
        case name
        case canManageMembers
        case canCreateOrUpdateConfig
        case canDeleteConfig
        case canCreateOrUpdateEnvironment
        case canDeleteEnvironment
        case canCreateOrUpdateSetting
        case canTagSetting
        case canDeleteSetting
        case canCreateOrUpdateTag
        case canDeleteTag
        case canManageWebhook
        case canUseExportImport
        case canManageProductPreferences
        case canManageIntegrations
        case canViewSdkKey
        case canRotateSdkKey
        case accessType
        case newEnvironmentAccessType
        case environmentAccesses
    }
}

public struct ProductModel: Codable {
    public var organization: OrganizationModel?
    public var productID: String?
    public var name: String?
    public var description: String?

    public init(organization: OrganizationModel? = nil, productID: String? = nil, name: String? = nil, description: String? = nil) {
        self.organization = organization
        self.productID = productID
        self.name = name
        self.description = description
    }

    private enum CodingKeys: String, CodingKey {
        case organization
        case productID = "productId"
        case name
        case description
    }
}

public struct ProductModelHaljson: Codable {
    public var embedded: Embedded?
    public var productID: String?
    public var name: String?
    public var description: String?
    public var links: Links?

    public struct Embedded: Codable {
        public var organization: Organization?

        public struct Organization: Codable {
            public var organizationID: String?
            public var name: String?
            public var links: Links?

            public struct Links: Codable {
                public var products: String?
                public var members: String?

                public init(products: String? = nil, members: String? = nil) {
                    self.products = products
                    self.members = members
                }
            }

            public init(organizationID: String? = nil, name: String? = nil, links: Links? = nil) {
                self.organizationID = organizationID
                self.name = name
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case organizationID = "organizationId"
                case name
                case links = "_links"
            }
        }

        public init(organization: Organization? = nil) {
            self.organization = organization
        }
    }

    public struct Links: Codable {
        public var this: String?
        public var configs: String?
        public var environments: String?
        public var tags: String?
        public var permissionGroups: String?
        public var members: String?

        public init(this: String? = nil, configs: String? = nil, environments: String? = nil, tags: String? = nil, permissionGroups: String? = nil, members: String? = nil) {
            self.this = this
            self.configs = configs
            self.environments = environments
            self.tags = tags
            self.permissionGroups = permissionGroups
            self.members = members
        }

        private enum CodingKeys: String, CodingKey {
            case this = "self"
            case configs
            case environments
            case tags
            case permissionGroups = "permission-groups"
            case members
        }
    }

    public init(embedded: Embedded? = nil, productID: String? = nil, name: String? = nil, description: String? = nil, links: Links? = nil) {
        self.embedded = embedded
        self.productID = productID
        self.name = name
        self.description = description
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case embedded = "_embedded"
        case productID = "productId"
        case name
        case description
        case links = "_links"
    }
}

public struct RolloutPercentageItemModel: Codable {
    /// The percentage value for the rule.
    public var percentage: Int
    /// The value to serve when the user falls in the percentage rule. It must respect the setting type.
    public var value: AnyJSON?

    public init(percentage: Int, value: AnyJSON? = nil) {
        self.percentage = percentage
        self.value = value
    }
}

public enum RolloutRuleComparator: String, Codable, CaseIterable {
    case isOneOf
    case isNotOneOf
    case contains
    case doesNotContain
    case semVerIsOneOf
    case semVerIsNotOneOf
    case semVerLess
    case semVerLessOrEquals
    case semVerGreater
    case semVerGreaterOrEquals
    case numberEquals
    case numberDoesNotEqual
    case numberLess
    case numberLessOrEquals
    case numberGreater
    case numberGreaterOrEquals
    case sensitiveIsOneOf
    case sensitiveIsNotOneOf
}

public struct RolloutRuleModel: Codable {
    /// The user attribute to compare.
    public var comparisonAttribute: String
    public var comparator: RolloutRuleComparator?
    /// The value to compare against.
    public var comparisonValue: String
    /// The value to serve when the comparison matches. It must respect the setting type.
    public var value: AnyJSON?

    public init(comparisonAttribute: String, comparator: RolloutRuleComparator? = nil, comparisonValue: String, value: AnyJSON? = nil) {
        self.comparisonAttribute = comparisonAttribute
        self.comparator = comparator
        self.comparisonValue = comparisonValue
        self.value = value
    }
}

public struct SdkKeysModel: Codable {
    public var primary: String?
    public var secondary: String?

    public init(primary: String? = nil, secondary: String? = nil) {
        self.primary = primary
        self.secondary = secondary
    }
}

public struct SettingDataModel: Codable {
    public var settingID: Int?
    public var key: String?
    public var name: String?
    public var hint: String?
    public var settingType: SettingType?
    public var createdAt: Date?
    public var creatorEmail: String?
    public var creatorFullName: String?
    public var ownerFullName: String?
    public var ownerEmail: String?
    public var isWatching: Bool?

    public init(settingID: Int? = nil, key: String? = nil, name: String? = nil, hint: String? = nil, settingType: SettingType? = nil, createdAt: Date? = nil, creatorEmail: String? = nil, creatorFullName: String? = nil, ownerFullName: String? = nil, ownerEmail: String? = nil, isWatching: Bool? = nil) {
        self.settingID = settingID
        self.key = key
        self.name = name
        self.hint = hint
        self.settingType = settingType
        self.createdAt = createdAt
        self.creatorEmail = creatorEmail
        self.creatorFullName = creatorFullName
        self.ownerFullName = ownerFullName
        self.ownerEmail = ownerEmail
        self.isWatching = isWatching
    }

    private enum CodingKeys: String, CodingKey {
        case settingID = "settingId"
        case key
        case name
        case hint
        case settingType
        case createdAt
        case creatorEmail
        case creatorFullName
        case ownerFullName
        case ownerEmail
        case isWatching
    }
}

public struct SettingModel: Codable {
    public var settingID: Int?
    public var key: String?
    public var name: String?
    public var hint: String?
    public var settingType: SettingType?
    public var ownerUserEmail: String?
    public var ownerUserFullName: String?
    public var configID: String?
    public var configName: String?
    public var tags: [TagModel]?

    public init(settingID: Int? = nil, key: String? = nil, name: String? = nil, hint: String? = nil, settingType: SettingType? = nil, ownerUserEmail: String? = nil, ownerUserFullName: String? = nil, configID: String? = nil, configName: String? = nil, tags: [TagModel]? = nil) {
        self.settingID = settingID
        self.key = key
        self.name = name
        self.hint = hint
        self.settingType = settingType
        self.ownerUserEmail = ownerUserEmail
        self.ownerUserFullName = ownerUserFullName
        self.configID = configID
        self.configName = configName
        self.tags = tags
    }

    private enum CodingKeys: String, CodingKey {
        case settingID = "settingId"
        case key
        case name
        case hint
        case settingType
        case ownerUserEmail
        case ownerUserFullName
        case configID = "configId"
        case configName
        case tags
    }
}

public struct SettingModelHaljson: Codable {
    public var settingID: Int?
    public var key: String?
    public var name: String?
    public var hint: String?
    public var settingType: SettingType?
    public var ownerUserEmail: String?
    public var ownerUserFullName: String?
    public var configID: String?
    public var configName: String?
    public var embedded: Embedded?
    public var links: Links?

    public struct Embedded: Codable {
        public var tags: [Tag]?

        public struct Tag: Codable {
            public var embedded: Embedded?
            public var tagID: Int?
            public var name: String?
            public var color: String?
            public var links: Links?

            public struct Embedded: Codable {
                public var product: Product?

                public struct Product: Codable {
                    public var embedded: Embedded?
                    public var productID: String?
                    public var name: String?
                    public var description: String?
                    public var links: Links?

                    public struct Embedded: Codable {
                        public var organization: Organization?

                        public struct Organization: Codable {
                            public var organizationID: String?
                            public var name: String?
                            public var links: Links?

                            public struct Links: Codable {
                                public var products: String?
                                public var members: String?

                                public init(products: String? = nil, members: String? = nil) {
                                    self.products = products
                                    self.members = members
                                }
                            }

                            public init(organizationID: String? = nil, name: String? = nil, links: Links? = nil) {
                                self.organizationID = organizationID
                                self.name = name
                                self.links = links
                            }

                            private enum CodingKeys: String, CodingKey {
                                case organizationID = "organizationId"
                                case name
                                case links = "_links"
                            }
                        }

                        public init(organization: Organization? = nil) {
                            self.organization = organization
                        }
                    }

                    public struct Links: Codable {
                        public var this: String?
                        public var configs: String?
                        public var environments: String?
                        public var tags: String?
                        public var permissionGroups: String?
                        public var members: String?

                        public init(this: String? = nil, configs: String? = nil, environments: String? = nil, tags: String? = nil, permissionGroups: String? = nil, members: String? = nil) {
                            self.this = this
                            self.configs = configs
                            self.environments = environments
                            self.tags = tags
                            self.permissionGroups = permissionGroups
                            self.members = members
                        }

                        private enum CodingKeys: String, CodingKey {
                            case this = "self"
                            case configs
                            case environments
                            case tags
                            case permissionGroups = "permission-groups"
                            case members
                        }
                    }

                    public init(embedded: Embedded? = nil, productID: String? = nil, name: String? = nil, description: String? = nil, links: Links? = nil) {
                        self.embedded = embedded
                        self.productID = productID
                        self.name = name
                        self.description = description
                        self.links = links
                    }

                    private enum CodingKeys: String, CodingKey {
                        case embedded = "_embedded"
                        case productID = "productId"
                        case name
                        case description
                        case links = "_links"
                    }
                }

                public init(product: Product? = nil) {
                    self.product = product
                }
            }

            public struct Links: Codable {
                public var this: String?

                public init(this: String? = nil) {
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                }
            }

            public init(embedded: Embedded? = nil, tagID: Int? = nil, name: String? = nil, color: String? = nil, links: Links? = nil) {
                self.embedded = embedded
                self.tagID = tagID
                self.name = name
                self.color = color
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case embedded = "_embedded"
                case tagID = "tagId"
                case name
                case color
                case links = "_links"
            }
        }

        public init(tags: [Tag]? = nil) {
            self.tags = tags
        }
    }

    public struct Links: Codable {
        public var this: String?

        public init(this: String? = nil) {
            self.this = this
        }

        private enum CodingKeys: String, CodingKey {
            case this = "self"
        }
    }

    public init(settingID: Int? = nil, key: String? = nil, name: String? = nil, hint: String? = nil, settingType: SettingType? = nil, ownerUserEmail: String? = nil, ownerUserFullName: String? = nil, configID: String? = nil, configName: String? = nil, embedded: Embedded? = nil, links: Links? = nil) {
        self.settingID = settingID
        self.key = key
        self.name = name
        self.hint = hint
        self.settingType = settingType
        self.ownerUserEmail = ownerUserEmail
        self.ownerUserFullName = ownerUserFullName
        self.configID = configID
        self.configName = configName
        self.embedded = embedded
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case settingID = "settingId"
        case key
        case name
        case hint
        case settingType
        case ownerUserEmail
        case ownerUserFullName
        case configID = "configId"
        case configName
        case embedded = "_embedded"
        case links = "_links"
    }
}

public struct SettingTagModel: Codable {
    public var settingTagID: Int?
    public var tagID: Int?
    public var name: String?
    public var color: String?

    public init(settingTagID: Int? = nil, tagID: Int? = nil, name: String? = nil, color: String? = nil) {
        self.settingTagID = settingTagID
        self.tagID = tagID
        self.name = name
        self.color = color
    }

    private enum CodingKeys: String, CodingKey {
        case settingTagID = "settingTagId"
        case tagID = "tagId"
        case name
        case color
    }
}

public enum SettingType: String, Codable, CaseIterable {
    case boolean
    case string
    case int
    case double
}

public struct SettingValueModel: Codable {
    public var config: ConfigModel?
    public var environment: EnvironmentModel?
    public var isReadOnly: Bool?
    public var setting: SettingDataModel?
    public var updatedAt: Date?
    public var lastUpdaterUserEmail: String?
    public var lastUpdaterUserFullName: String?
    public var integrationLinks: [IntegrationLinkModel]?
    public var settingTags: [SettingTagModel]?
    /// The targeting rule collection.
    public var rolloutRules: [RolloutRuleModel]?
    /// The percentage rule collection.
    public var rolloutPercentageItems: [RolloutPercentageItemModel]?
    /// The value to serve. It must respect the setting type.
    public var value: AnyJSON?

    public init(config: ConfigModel? = nil, environment: EnvironmentModel? = nil, isReadOnly: Bool? = nil, setting: SettingDataModel? = nil, updatedAt: Date? = nil, lastUpdaterUserEmail: String? = nil, lastUpdaterUserFullName: String? = nil, integrationLinks: [IntegrationLinkModel]? = nil, settingTags: [SettingTagModel]? = nil, rolloutRules: [RolloutRuleModel]? = nil, rolloutPercentageItems: [RolloutPercentageItemModel]? = nil, value: AnyJSON? = nil) {
        self.config = config
        self.environment = environment
        self.isReadOnly = isReadOnly
        self.setting = setting
        self.updatedAt = updatedAt
        self.lastUpdaterUserEmail = lastUpdaterUserEmail
        self.lastUpdaterUserFullName = lastUpdaterUserFullName
        self.integrationLinks = integrationLinks
        self.settingTags = settingTags
        self.rolloutRules = rolloutRules
        self.rolloutPercentageItems = rolloutPercentageItems
        self.value = value
    }

    private enum CodingKeys: String, CodingKey {
        case config
        case environment
        case isReadOnly = "readOnly"
        case setting
        case updatedAt
        case lastUpdaterUserEmail
        case lastUpdaterUserFullName
        case integrationLinks
        case settingTags
        case rolloutRules
        case rolloutPercentageItems
        case value
    }
}

public struct SettingValueModelHaljson: Codable {
    public var isReadOnly: Bool?
    public var updatedAt: Date?
    public var lastUpdaterUserEmail: String?
    public var lastUpdaterUserFullName: String?
    public var embedded: Embedded?
    /// The targeting rule collection.
    public var rolloutRules: [RolloutRuleModel]?
    /// The percentage rule collection.
    public var rolloutPercentageItems: [RolloutPercentageItemModel]?
    /// The value to serve. It must respect the setting type.
    public var value: AnyJSON?
    public var links: Links?

    public struct Embedded: Codable {
        public var setting: Setting?
        public var config: Config?
        public var environment: Environment?
        public var integrationLinks: [IntegrationLink]?
        public var settingTags: [SettingTag]?

        public struct Setting: Codable {
            public var settingID: Int?
            public var key: String?
            public var name: String?
            public var hint: String?
            public var settingType: SettingType?
            public var createdAt: Date?
            public var creatorEmail: String?
            public var creatorFullName: String?
            public var ownerFullName: String?
            public var ownerEmail: String?
            public var isWatching: Bool?

            public init(settingID: Int? = nil, key: String? = nil, name: String? = nil, hint: String? = nil, settingType: SettingType? = nil, createdAt: Date? = nil, creatorEmail: String? = nil, creatorFullName: String? = nil, ownerFullName: String? = nil, ownerEmail: String? = nil, isWatching: Bool? = nil) {
                self.settingID = settingID
                self.key = key
                self.name = name
                self.hint = hint
                self.settingType = settingType
                self.createdAt = createdAt
                self.creatorEmail = creatorEmail
                self.creatorFullName = creatorFullName
                self.ownerFullName = ownerFullName
                self.ownerEmail = ownerEmail
                self.isWatching = isWatching
            }

            private enum CodingKeys: String, CodingKey {
                case settingID = "settingId"
                case key
                case name
                case hint
                case settingType
                case createdAt
                case creatorEmail
                case creatorFullName
                case ownerFullName
                case ownerEmail
                case isWatching
            }
        }

        public struct Config: Codable {
            public var embedded: Embedded?
            public var configID: String?
            public var name: String?
            public var description: String?
            public var links: Links?

            public struct Embedded: Codable {
                public var product: Product?

                public struct Product: Codable {
                    public var embedded: Embedded?
                    public var productID: String?
                    public var name: String?
                    public var description: String?
                    public var links: Links?

                    public struct Embedded: Codable {
                        public var organization: Organization?

                        public struct Organization: Codable {
                            public var organizationID: String?
                            public var name: String?
                            public var links: Links?

                            public struct Links: Codable {
                                public var products: String?
                                public var members: String?

                                public init(products: String? = nil, members: String? = nil) {
                                    self.products = products
                                    self.members = members
                                }
                            }

                            public init(organizationID: String? = nil, name: String? = nil, links: Links? = nil) {
                                self.organizationID = organizationID
                                self.name = name
                                self.links = links
                            }

                            private enum CodingKeys: String, CodingKey {
                                case organizationID = "organizationId"
                                case name
                                case links = "_links"
                            }
                        }

                        public init(organization: Organization? = nil) {
                            self.organization = organization
                        }
                    }

                    public struct Links: Codable {
                        public var this: String?
                        public var configs: String?
                        public var environments: String?
                        public var tags: String?
                        public var permissionGroups: String?
                        public var members: String?

                        public init(this: String? = nil, configs: String? = nil, environments: String? = nil, tags: String? = nil, permissionGroups: String? = nil, members: String? = nil) {
                            self.this = this
                            self.configs = configs
                            self.environments = environments
                            self.tags = tags
                            self.permissionGroups = permissionGroups
                            self.members = members
                        }

                        private enum CodingKeys: String, CodingKey {
                            case this = "self"
                            case configs
                            case environments
                            case tags
                            case permissionGroups = "permission-groups"
                            case members
                        }
                    }

                    public init(embedded: Embedded? = nil, productID: String? = nil, name: String? = nil, description: String? = nil, links: Links? = nil) {
                        self.embedded = embedded
                        self.productID = productID
                        self.name = name
                        self.description = description
                        self.links = links
                    }

                    private enum CodingKeys: String, CodingKey {
                        case embedded = "_embedded"
                        case productID = "productId"
                        case name
                        case description
                        case links = "_links"
                    }
                }

                public init(product: Product? = nil) {
                    self.product = product
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var settings: String?

                public init(this: String? = nil, settings: String? = nil) {
                    self.this = this
                    self.settings = settings
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case settings
                }
            }

            public init(embedded: Embedded? = nil, configID: String? = nil, name: String? = nil, description: String? = nil, links: Links? = nil) {
                self.embedded = embedded
                self.configID = configID
                self.name = name
                self.description = description
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case embedded = "_embedded"
                case configID = "configId"
                case name
                case description
                case links = "_links"
            }
        }

        public struct Environment: Codable {
            public var embedded: Embedded?
            public var environmentID: String?
            public var name: String?
            public var color: String?
            public var description: String?
            public var links: Links?

            public struct Embedded: Codable {
                public var product: Product?

                public struct Product: Codable {
                    public var embedded: Embedded?
                    public var productID: String?
                    public var name: String?
                    public var description: String?
                    public var links: Links?

                    public struct Embedded: Codable {
                        public var organization: Organization?

                        public struct Organization: Codable {
                            public var organizationID: String?
                            public var name: String?
                            public var links: Links?

                            public struct Links: Codable {
                                public var products: String?
                                public var members: String?

                                public init(products: String? = nil, members: String? = nil) {
                                    self.products = products
                                    self.members = members
                                }
                            }

                            public init(organizationID: String? = nil, name: String? = nil, links: Links? = nil) {
                                self.organizationID = organizationID
                                self.name = name
                                self.links = links
                            }

                            private enum CodingKeys: String, CodingKey {
                                case organizationID = "organizationId"
                                case name
                                case links = "_links"
                            }
                        }

                        public init(organization: Organization? = nil) {
                            self.organization = organization
                        }
                    }

                    public struct Links: Codable {
                        public var this: String?
                        public var configs: String?
                        public var environments: String?
                        public var tags: String?
                        public var permissionGroups: String?
                        public var members: String?

                        public init(this: String? = nil, configs: String? = nil, environments: String? = nil, tags: String? = nil, permissionGroups: String? = nil, members: String? = nil) {
                            self.this = this
                            self.configs = configs
                            self.environments = environments
                            self.tags = tags
                            self.permissionGroups = permissionGroups
                            self.members = members
                        }

                        private enum CodingKeys: String, CodingKey {
                            case this = "self"
                            case configs
                            case environments
                            case tags
                            case permissionGroups = "permission-groups"
                            case members
                        }
                    }

                    public init(embedded: Embedded? = nil, productID: String? = nil, name: String? = nil, description: String? = nil, links: Links? = nil) {
                        self.embedded = embedded
                        self.productID = productID
                        self.name = name
                        self.description = description
                        self.links = links
                    }

                    private enum CodingKeys: String, CodingKey {
                        case embedded = "_embedded"
                        case productID = "productId"
                        case name
                        case description
                        case links = "_links"
                    }
                }

                public init(product: Product? = nil) {
                    self.product = product
                }
            }

            public struct Links: Codable {
                public var this: String?

                public init(this: String? = nil) {
                    self.this = this
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                }
            }

            public init(embedded: Embedded? = nil, environmentID: String? = nil, name: String? = nil, color: String? = nil, description: String? = nil, links: Links? = nil) {
                self.embedded = embedded
                self.environmentID = environmentID
                self.name = name
                self.color = color
                self.description = description
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case embedded = "_embedded"
                case environmentID = "environmentId"
                case name
                case color
                case description
                case links = "_links"
            }
        }

        public struct IntegrationLink: Codable {
            public var key: String?
            public var description: String?
            public var integrationLinkType: IntegrationLinkType?
            public var url: String?

            public init(key: String? = nil, description: String? = nil, integrationLinkType: IntegrationLinkType? = nil, url: String? = nil) {
                self.key = key
                self.description = description
                self.integrationLinkType = integrationLinkType
                self.url = url
            }
        }

        public struct SettingTag: Codable {
            public var settingTagID: Int?
            public var tagID: Int?
            public var name: String?
            public var color: String?

            public init(settingTagID: Int? = nil, tagID: Int? = nil, name: String? = nil, color: String? = nil) {
                self.settingTagID = settingTagID
                self.tagID = tagID
                self.name = name
                self.color = color
            }

            private enum CodingKeys: String, CodingKey {
                case settingTagID = "settingTagId"
                case tagID = "tagId"
                case name
                case color
            }
        }

        public init(setting: Setting? = nil, config: Config? = nil, environment: Environment? = nil, integrationLinks: [IntegrationLink]? = nil, settingTags: [SettingTag]? = nil) {
            self.setting = setting
            self.config = config
            self.environment = environment
            self.integrationLinks = integrationLinks
            self.settingTags = settingTags
        }
    }

    public struct Links: Codable {
        public var this: String?

        public init(this: String? = nil) {
            self.this = this
        }

        private enum CodingKeys: String, CodingKey {
            case this = "self"
        }
    }

    public init(isReadOnly: Bool? = nil, updatedAt: Date? = nil, lastUpdaterUserEmail: String? = nil, lastUpdaterUserFullName: String? = nil, embedded: Embedded? = nil, rolloutRules: [RolloutRuleModel]? = nil, rolloutPercentageItems: [RolloutPercentageItemModel]? = nil, value: AnyJSON? = nil, links: Links? = nil) {
        self.isReadOnly = isReadOnly
        self.updatedAt = updatedAt
        self.lastUpdaterUserEmail = lastUpdaterUserEmail
        self.lastUpdaterUserFullName = lastUpdaterUserFullName
        self.embedded = embedded
        self.rolloutRules = rolloutRules
        self.rolloutPercentageItems = rolloutPercentageItems
        self.value = value
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case isReadOnly = "readOnly"
        case updatedAt
        case lastUpdaterUserEmail
        case lastUpdaterUserFullName
        case embedded = "_embedded"
        case rolloutRules
        case rolloutPercentageItems
        case value
        case links = "_links"
    }
}

public struct TagModel: Codable {
    public var product: ProductModel?
    public var tagID: Int?
    public var name: String?
    public var color: String?

    public init(product: ProductModel? = nil, tagID: Int? = nil, name: String? = nil, color: String? = nil) {
        self.product = product
        self.tagID = tagID
        self.name = name
        self.color = color
    }

    private enum CodingKeys: String, CodingKey {
        case product
        case tagID = "tagId"
        case name
        case color
    }
}

public struct TagModelHaljson: Codable {
    public var embedded: Embedded?
    public var tagID: Int?
    public var name: String?
    public var color: String?
    public var links: Links?

    public struct Embedded: Codable {
        public var product: Product?

        public struct Product: Codable {
            public var embedded: Embedded?
            public var productID: String?
            public var name: String?
            public var description: String?
            public var links: Links?

            public struct Embedded: Codable {
                public var organization: Organization?

                public struct Organization: Codable {
                    public var organizationID: String?
                    public var name: String?
                    public var links: Links?

                    public struct Links: Codable {
                        public var products: String?
                        public var members: String?

                        public init(products: String? = nil, members: String? = nil) {
                            self.products = products
                            self.members = members
                        }
                    }

                    public init(organizationID: String? = nil, name: String? = nil, links: Links? = nil) {
                        self.organizationID = organizationID
                        self.name = name
                        self.links = links
                    }

                    private enum CodingKeys: String, CodingKey {
                        case organizationID = "organizationId"
                        case name
                        case links = "_links"
                    }
                }

                public init(organization: Organization? = nil) {
                    self.organization = organization
                }
            }

            public struct Links: Codable {
                public var this: String?
                public var configs: String?
                public var environments: String?
                public var tags: String?
                public var permissionGroups: String?
                public var members: String?

                public init(this: String? = nil, configs: String? = nil, environments: String? = nil, tags: String? = nil, permissionGroups: String? = nil, members: String? = nil) {
                    self.this = this
                    self.configs = configs
                    self.environments = environments
                    self.tags = tags
                    self.permissionGroups = permissionGroups
                    self.members = members
                }

                private enum CodingKeys: String, CodingKey {
                    case this = "self"
                    case configs
                    case environments
                    case tags
                    case permissionGroups = "permission-groups"
                    case members
                }
            }

            public init(embedded: Embedded? = nil, productID: String? = nil, name: String? = nil, description: String? = nil, links: Links? = nil) {
                self.embedded = embedded
                self.productID = productID
                self.name = name
                self.description = description
                self.links = links
            }

            private enum CodingKeys: String, CodingKey {
                case embedded = "_embedded"
                case productID = "productId"
                case name
                case description
                case links = "_links"
            }
        }

        public init(product: Product? = nil) {
            self.product = product
        }
    }

    public struct Links: Codable {
        public var this: String?

        public init(this: String? = nil) {
            self.this = this
        }

        private enum CodingKeys: String, CodingKey {
            case this = "self"
        }
    }

    public init(embedded: Embedded? = nil, tagID: Int? = nil, name: String? = nil, color: String? = nil, links: Links? = nil) {
        self.embedded = embedded
        self.tagID = tagID
        self.name = name
        self.color = color
        self.links = links
    }

    private enum CodingKeys: String, CodingKey {
        case embedded = "_embedded"
        case tagID = "tagId"
        case name
        case color
        case links = "_links"
    }
}

public struct UpdateConfigRequest: Codable {
    public var name: String?
    public var description: String?

    public init(name: String? = nil, description: String? = nil) {
        self.name = name
        self.description = description
    }
}

public struct UpdateEnvironmentModel: Codable {
    public var name: String?
    public var color: String?
    public var description: String?

    public init(name: String? = nil, color: String? = nil, description: String? = nil) {
        self.name = name
        self.color = color
        self.description = description
    }
}

public struct UpdatePermissionGroupRequest: Codable {
    public var name: String?
    public var canManageMembers: Bool?
    public var canCreateOrUpdateConfig: Bool?
    public var canDeleteConfig: Bool?
    public var canCreateOrUpdateEnvironment: Bool?
    public var canDeleteEnvironment: Bool?
    public var canCreateOrUpdateSetting: Bool?
    public var canTagSetting: Bool?
    public var canDeleteSetting: Bool?
    public var canCreateOrUpdateTag: Bool?
    public var canDeleteTag: Bool?
    public var canManageWebhook: Bool?
    public var canUseExportImport: Bool?
    public var canManageProductPreferences: Bool?
    public var canManageIntegrations: Bool?
    public var canViewSdkKey: Bool?
    public var canRotateSdkKey: Bool?
    public var canViewProductStatistics: Bool?
    public var canViewProductAuditLog: Bool?
    public var accessType: AccessType?
    public var newEnvironmentAccessType: EnvironmentAccessType?
    public var environmentAccesses: [EnvironmentAccessModel]?

    public init(name: String? = nil, canManageMembers: Bool? = nil, canCreateOrUpdateConfig: Bool? = nil, canDeleteConfig: Bool? = nil, canCreateOrUpdateEnvironment: Bool? = nil, canDeleteEnvironment: Bool? = nil, canCreateOrUpdateSetting: Bool? = nil, canTagSetting: Bool? = nil, canDeleteSetting: Bool? = nil, canCreateOrUpdateTag: Bool? = nil, canDeleteTag: Bool? = nil, canManageWebhook: Bool? = nil, canUseExportImport: Bool? = nil, canManageProductPreferences: Bool? = nil, canManageIntegrations: Bool? = nil, canViewSdkKey: Bool? = nil, canRotateSdkKey: Bool? = nil, canViewProductStatistics: Bool? = nil, canViewProductAuditLog: Bool? = nil, accessType: AccessType? = nil, newEnvironmentAccessType: EnvironmentAccessType? = nil, environmentAccesses: [EnvironmentAccessModel]? = nil) {
        self.name = name
        self.canManageMembers = canManageMembers
        self.canCreateOrUpdateConfig = canCreateOrUpdateConfig
        self.canDeleteConfig = canDeleteConfig
        self.canCreateOrUpdateEnvironment = canCreateOrUpdateEnvironment
        self.canDeleteEnvironment = canDeleteEnvironment
        self.canCreateOrUpdateSetting = canCreateOrUpdateSetting
        self.canTagSetting = canTagSetting
        self.canDeleteSetting = canDeleteSetting
        self.canCreateOrUpdateTag = canCreateOrUpdateTag
        self.canDeleteTag = canDeleteTag
        self.canManageWebhook = canManageWebhook
        self.canUseExportImport = canUseExportImport
        self.canManageProductPreferences = canManageProductPreferences
        self.canManageIntegrations = canManageIntegrations
        self.canViewSdkKey = canViewSdkKey
        self.canRotateSdkKey = canRotateSdkKey
        self.canViewProductStatistics = canViewProductStatistics
        self.canViewProductAuditLog = canViewProductAuditLog
        self.accessType = accessType
        self.newEnvironmentAccessType = newEnvironmentAccessType
        self.environmentAccesses = environmentAccesses
    }
}

public struct UpdateProductRequest: Codable {
    public var name: String?
    public var description: String?

    public init(name: String? = nil, description: String? = nil) {
        self.name = name
        self.description = description
    }
}

public struct UpdateSettingValueModel: Codable {
    /// The targeting rule collection.
    public var rolloutRules: [RolloutRuleModel]?
    /// The percentage rule collection.
    public var rolloutPercentageItems: [RolloutPercentageItemModel]?
    /// The value to serve. It must respect the setting type.
    public var value: AnyJSON?

    public init(rolloutRules: [RolloutRuleModel]? = nil, rolloutPercentageItems: [RolloutPercentageItemModel]? = nil, value: AnyJSON? = nil) {
        self.rolloutRules = rolloutRules
        self.rolloutPercentageItems = rolloutPercentageItems
        self.value = value
    }
}

public struct UpdateTagModel: Codable {
    public var name: String?
    public var color: String?

    public init(name: String? = nil, color: String? = nil) {
        self.name = name
        self.color = color
    }
}

public struct UserModel: Codable {
    public var userID: String?
    public var fullName: String?
    public var email: String?

    public init(userID: String? = nil, fullName: String? = nil, email: String? = nil) {
        self.userID = userID
        self.fullName = fullName
        self.email = email
    }

    private enum CodingKeys: String, CodingKey {
        case userID = "userId"
        case fullName
        case email
    }
}

public enum AnyJSON: Equatable, Codable {
    case string(String)
    case number(Double)
    case object([String: AnyJSON])
    case array([AnyJSON])
    case bool(Bool)

    var value: Any {
        switch self {
        case .string(let string): return string
        case .number(let double): return double
        case .object(let dictionary): return dictionary
        case .array(let array): return array
        case .bool(let bool): return bool
        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .array(array): try container.encode(array)
        case let .object(object): try container.encode(object)
        case let .string(string): try container.encode(string)
        case let .number(number): try container.encode(number)
        case let .bool(bool): try container.encode(bool)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let object = try? container.decode([String: AnyJSON].self) {
            self = .object(object)
        } else if let array = try? container.decode([AnyJSON].self) {
            self = .array(array)
        } else if let string = try? container.decode(String.self) {
            self = .string(string)
        } else if let bool = try? container.decode(Bool.self) {
            self = .bool(bool)
        } else if let number = try? container.decode(Double.self) {
            self = .number(number)
        } else {
            throw DecodingError.dataCorrupted(
                .init(codingPath: decoder.codingPath, debugDescription: "Invalid JSON value.")
            )
        }
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
