// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation

/// Describes an attendee of a meeting instance held by an organizer within a specified group.
public struct AttendeeByGroup: Codable {
    /// The attendee's email address
    public var attendeeEmail: String
    /// The full name of the attendee
    public var attendeeName: String
    /// Audio options for the attended meeting
    public var conferenceCallInfo: String
    /// The duration of attendance in minutes
    public var duration: Int
    /// The email address of the meeting organizer
    public var email: String
    /// The time the meeting instance ended
    public var endTime: Date
    /// The first name of the organizer of the attended meeting
    public var firstName: String
    /// The name of the group
    public var groupName: String
    /// The time the attendee joined the meeting instance
    public var joinTime: Date
    /// The surname of the meeting organizer
    public var lastName: String
    /// The time the attendee left the meeting instance
    public var leaveTime: Date
    /// The meeting ID
    public var meetingID: String
    /// The key of the attended meeting instance
    public var meetingInstanceKey: Int
    /// The meeting type
    public var meetingType: MeetingType
    /// The number of attendees at the attended meeting instance
    public var numAttendees: Int
    /// The key of the meeting organizer
    public var organizerKey: String
    /// The key of the meeting organizer. Field retained for backwards compatibility reasons
    public var organizerkey: Int
    /// The time the meeting instance started
    public var startTime: Date
    /// The subject of the attended meeting
    public var subject: String

    public init(attendeeEmail: String, attendeeName: String, conferenceCallInfo: String, duration: Int, email: String, endTime: Date, firstName: String, groupName: String, joinTime: Date, lastName: String, leaveTime: Date, meetingID: String, meetingInstanceKey: Int, meetingType: MeetingType, numAttendees: Int, organizerKey: String, organizerkey: Int, startTime: Date, subject: String) {
        self.attendeeEmail = attendeeEmail
        self.attendeeName = attendeeName
        self.conferenceCallInfo = conferenceCallInfo
        self.duration = duration
        self.email = email
        self.endTime = endTime
        self.firstName = firstName
        self.groupName = groupName
        self.joinTime = joinTime
        self.lastName = lastName
        self.leaveTime = leaveTime
        self.meetingID = meetingID
        self.meetingInstanceKey = meetingInstanceKey
        self.meetingType = meetingType
        self.numAttendees = numAttendees
        self.organizerKey = organizerKey
        self.organizerkey = organizerkey
        self.startTime = startTime
        self.subject = subject
    }

    private enum CodingKeys: String, CodingKey {
        case attendeeEmail
        case attendeeName
        case conferenceCallInfo
        case duration
        case email
        case endTime
        case firstName
        case groupName
        case joinTime
        case lastName
        case leaveTime
        case meetingID = "meetingId"
        case meetingInstanceKey
        case meetingType
        case numAttendees
        case organizerKey
        case organizerkey
        case startTime
        case subject
    }
}

/// Describes an attendee of a specified meeting instance.
public struct AttendeeByMeeting: Codable {
    /// The attendee's email address
    public var attendeeEmail: String
    /// The attendee's full name
    public var attendeeName: String
    /// Audio options for the meeting
    public var conferenceCallInfo: String
    /// The meeting duration in minutes
    public var duration: Int
    /// The email address of the meeting organizer
    public var email: String
    /// The ending time of the meeting instance
    public var endTime: Date
    /// The first name of the meeting organizer
    public var firstName: String
    /// DEPRECATED. Returns 'NA'
    public var groupName: String
    /// The time the attendee joined the meeting instance
    public var joinTime: Date
    /// The surname of the meeting organizer
    public var lastName: String
    /// The time the attendee left the meeting instance
    public var leaveTime: Date
    /// The meeting ID
    public var meetingID: Int
    /// The key of the unique meeting instance
    public var meetingInstanceKey: Int
    /// The meeting type
    public var meetingType: MeetingType
    /// The attendee's full name
    public var name: String
    /// The number of attendees at the meeting instance
    public var numAttendees: Int
    /// The key of the meeting organizer
    public var organizerkey: Int
    /// The starting time of the meeting instance
    public var startTime: Date
    /// The subject of the meeting
    public var subject: String

    public init(attendeeEmail: String, attendeeName: String, conferenceCallInfo: String, duration: Int, email: String, endTime: Date, firstName: String, groupName: String, joinTime: Date, lastName: String, leaveTime: Date, meetingID: Int, meetingInstanceKey: Int, meetingType: MeetingType, name: String, numAttendees: Int, organizerkey: Int, startTime: Date, subject: String) {
        self.attendeeEmail = attendeeEmail
        self.attendeeName = attendeeName
        self.conferenceCallInfo = conferenceCallInfo
        self.duration = duration
        self.email = email
        self.endTime = endTime
        self.firstName = firstName
        self.groupName = groupName
        self.joinTime = joinTime
        self.lastName = lastName
        self.leaveTime = leaveTime
        self.meetingID = meetingID
        self.meetingInstanceKey = meetingInstanceKey
        self.meetingType = meetingType
        self.name = name
        self.numAttendees = numAttendees
        self.organizerkey = organizerkey
        self.startTime = startTime
        self.subject = subject
    }

    private enum CodingKeys: String, CodingKey {
        case attendeeEmail
        case attendeeName
        case conferenceCallInfo
        case duration
        case email
        case endTime
        case firstName
        case groupName
        case joinTime
        case lastName
        case leaveTime
        case meetingID = "meetingId"
        case meetingInstanceKey
        case meetingType
        case name
        case numAttendees
        case organizerkey
        case startTime
        case subject
    }
}

/// Describes an attendee of a meeting instance held by a specified organizer.
public struct AttendeeByOrganizer: Codable {
    /// The attendee's email address
    public var attendeeEmail: String
    /// The full name of the attendee
    public var attendeeName: String
    /// Audio options for the attended meeting
    public var conferenceCallInfo: String
    /// The duration of attendance in minutes
    public var duration: Int
    /// The email address of the meeting organizer
    public var email: String
    /// The time the meeting instance ended
    public var endTime: Date
    /// The first name of the meeting organizer
    public var firstName: String
    /// The name of the group the organizer is assigned to
    public var groupName: String
    /// The time the attendee joined the meeting instance
    public var joinTime: Date
    /// The surname of the meeting organizer
    public var lastName: String
    /// The time the attendee left the meeting instance
    public var leaveTime: Date
    /// The meeting ID
    public var meetingID: Int
    /// The key of the attended meeting instance
    public var meetingInstanceKey: Int
    /// The meeting type
    public var meetingType: MeetingType
    /// The full name of the meeting organizer
    public var name: String
    /// The formatted meeting ID
    public var newMeetingID: String
    /// The number of attendees at the attended meeting instance
    public var numAttendees: Int
    /// The key of the meeting organizer. Field retained for backwards compatibility reasons
    public var organizerkey: Int
    /// The time the meeting instance started
    public var startTime: Date
    /// The subject of the attended meeting
    public var subject: String

    public init(attendeeEmail: String, attendeeName: String, conferenceCallInfo: String, duration: Int, email: String, endTime: Date, firstName: String, groupName: String, joinTime: Date, lastName: String, leaveTime: Date, meetingID: Int, meetingInstanceKey: Int, meetingType: MeetingType, name: String, newMeetingID: String, numAttendees: Int, organizerkey: Int, startTime: Date, subject: String) {
        self.attendeeEmail = attendeeEmail
        self.attendeeName = attendeeName
        self.conferenceCallInfo = conferenceCallInfo
        self.duration = duration
        self.email = email
        self.endTime = endTime
        self.firstName = firstName
        self.groupName = groupName
        self.joinTime = joinTime
        self.lastName = lastName
        self.leaveTime = leaveTime
        self.meetingID = meetingID
        self.meetingInstanceKey = meetingInstanceKey
        self.meetingType = meetingType
        self.name = name
        self.newMeetingID = newMeetingID
        self.numAttendees = numAttendees
        self.organizerkey = organizerkey
        self.startTime = startTime
        self.subject = subject
    }

    private enum CodingKeys: String, CodingKey {
        case attendeeEmail
        case attendeeName
        case conferenceCallInfo
        case duration
        case email
        case endTime
        case firstName
        case groupName
        case joinTime
        case lastName
        case leaveTime
        case meetingID = "meetingId"
        case meetingInstanceKey
        case meetingType
        case name
        case newMeetingID = "newMeetingId"
        case numAttendees
        case organizerkey
        case startTime
        case subject
    }
}

/// Describes a collection of organizers categorized by department or job function, for example. Can be a subgroup of a larger group.
public struct Group: Codable {
    /// The name of this group
    public var groupName: String
    /// The key of this group
    public var groupkey: Int
    /// The number of organizers assigned to this group
    public var numOrganizers: Int
    /// The key of the parent group this group belongs to. Identical with the groupkey if this group is not a subgroup
    public var parentKey: Int
    /// The status of an organizer (or group), i.e. whether the organizer (or the members of the group respectively) are able to host meetings
    public var status: Status

    public init(groupName: String, groupkey: Int, numOrganizers: Int, parentKey: Int, status: Status) {
        self.groupName = groupName
        self.groupkey = groupkey
        self.numOrganizers = numOrganizers
        self.parentKey = parentKey
        self.status = status
    }
}

/// Describes a historical meeting within specified dates.
public struct HistoricalMeeting: Codable {
    /// The key of the company account
    public var accountKey: String
    /// Audio options for the meeting
    public var conferenceCallInfo: String
    /// The duration of the meeting session in minutes
    public var duration: String
    /// The meeting organizer's email address
    public var email: String
    /// The time the meeting instance ended
    public var endTime: Date
    /// The meeting organizer's first name
    public var firstName: String
    /// The surname of the meeting organizer
    public var lastName: String
    /// The current language setting of the organizer in the web portal
    public var locale: String
    /// The meeting ID
    public var meetingID: String
    /// The meeting type
    public var meetingType: MeetingType
    /// The number of attendees at the meeting instance
    public var numAttendees: String
    /// The key of the meeting organizer
    public var organizerKey: String
    /// The ID of the meeting session
    public var sessionID: String
    /// The time the meeting instance started
    public var startTime: Date
    /// The subject of the meeting
    public var subject: String

    public init(accountKey: String, conferenceCallInfo: String, duration: String, email: String, endTime: Date, firstName: String, lastName: String, locale: String, meetingID: String, meetingType: MeetingType, numAttendees: String, organizerKey: String, sessionID: String, startTime: Date, subject: String) {
        self.accountKey = accountKey
        self.conferenceCallInfo = conferenceCallInfo
        self.duration = duration
        self.email = email
        self.endTime = endTime
        self.firstName = firstName
        self.lastName = lastName
        self.locale = locale
        self.meetingID = meetingID
        self.meetingType = meetingType
        self.numAttendees = numAttendees
        self.organizerKey = organizerKey
        self.sessionID = sessionID
        self.startTime = startTime
        self.subject = subject
    }

    private enum CodingKeys: String, CodingKey {
        case accountKey
        case conferenceCallInfo
        case duration
        case email
        case endTime
        case firstName
        case lastName
        case locale
        case meetingID = "meetingId"
        case meetingType
        case numAttendees
        case organizerKey
        case sessionID = "sessionId"
        case startTime
        case subject
    }
}

/// Describes a historical meeting within specified dates for a specified group.
public struct HistoricalMeetingByGroup: Codable {
    /// The key of the company account
    public var accountKey: String
    /// The duration of the meeting session in minutes
    public var duration: String
    /// The meeting organizer's email address
    public var email: String
    /// The time the meeting instance ended
    public var endTime: Date
    /// The meeting organizer's first name
    public var firstName: String
    /// The name of the group
    public var groupName: String
    /// The surname of the meeting organizer
    public var lastName: String
    /// The current language setting of the organizer in the web portal
    public var locale: String
    /// The meeting ID
    public var meetingID: String
    /// The meeting type
    public var meetingType: MeetingType
    /// The number of attendees at the meeting instance
    public var numAttendees: String
    /// The key of the meeting organizer
    public var organizerKey: String
    /// The time the meeting instance started
    public var startTime: Date
    /// The subject of the meeting
    public var subject: String

    public init(accountKey: String, duration: String, email: String, endTime: Date, firstName: String, groupName: String, lastName: String, locale: String, meetingID: String, meetingType: MeetingType, numAttendees: String, organizerKey: String, startTime: Date, subject: String) {
        self.accountKey = accountKey
        self.duration = duration
        self.email = email
        self.endTime = endTime
        self.firstName = firstName
        self.groupName = groupName
        self.lastName = lastName
        self.locale = locale
        self.meetingID = meetingID
        self.meetingType = meetingType
        self.numAttendees = numAttendees
        self.organizerKey = organizerKey
        self.startTime = startTime
        self.subject = subject
    }

    private enum CodingKeys: String, CodingKey {
        case accountKey
        case duration
        case email
        case endTime
        case firstName
        case groupName
        case lastName
        case locale
        case meetingID = "meetingId"
        case meetingType
        case numAttendees
        case organizerKey
        case startTime
        case subject
    }
}

/// Describes past meeting instance(s) held by an organizer within a specified group.
public struct HistoryMeetingByGroup: Codable {
    /// Audio options for the meeting
    public var conferenceCallInfo: String
    /// The duration of this meeting instance in minutes
    public var duration: String
    /// The email address of the meeting organizer
    public var email: String
    /// The time this meeting instance ended
    public var endTime: Date
    /// The first name of the meeting organizer
    public var firstName: String
    /// The name of the group
    public var groupName: String
    /// The surname of the meeting organizer
    public var lastName: String
    /// The meeting ID
    public var meetingID: String
    /// The key of this meeting instance
    public var meetingInstanceKey: Int
    /// The meeting type
    public var meetingType: MeetingType
    /// The number of attendees at this meeting instance
    public var numAttendees: Int
    /// The key of the meeting organizer
    public var organizerKey: String
    /// The key of the meeting organizer. Field retained for backwards compatibility reasons
    public var organizerkey: Int
    /// The time this meeting instance started
    public var startTime: Date
    /// The subject of the meeting
    public var subject: String

    public init(conferenceCallInfo: String, duration: String, email: String, endTime: Date, firstName: String, groupName: String, lastName: String, meetingID: String, meetingInstanceKey: Int, meetingType: MeetingType, numAttendees: Int, organizerKey: String, organizerkey: Int, startTime: Date, subject: String) {
        self.conferenceCallInfo = conferenceCallInfo
        self.duration = duration
        self.email = email
        self.endTime = endTime
        self.firstName = firstName
        self.groupName = groupName
        self.lastName = lastName
        self.meetingID = meetingID
        self.meetingInstanceKey = meetingInstanceKey
        self.meetingType = meetingType
        self.numAttendees = numAttendees
        self.organizerKey = organizerKey
        self.organizerkey = organizerkey
        self.startTime = startTime
        self.subject = subject
    }

    private enum CodingKeys: String, CodingKey {
        case conferenceCallInfo
        case duration
        case email
        case endTime
        case firstName
        case groupName
        case lastName
        case meetingID = "meetingId"
        case meetingInstanceKey
        case meetingType
        case numAttendees
        case organizerKey
        case organizerkey
        case startTime
        case subject
    }
}

/// Describes a given meeting.
public struct MeetingByID: Codable {
    /// Audio options of the meeting
    public var conferenceCallInfo: String
    /// DEPRECATED. Returns an empty string ''
    public var createTime: Date
    /// The duration of the meeting in minutes
    public var duration: Int
    /// The ending time of the meeting
    public var endTime: Date
    /// The maximum number of participants allowed at the meeting
    public var maxParticipants: Int
    /// The meeting ID
    public var meetingID: Int
    /// The meeting ID. Field retained for backwards compatibility reasons
    public var meetingKey: Int
    /// The meeting type
    public var meetingType: MeetingType
    /// Indicates whether a password is required to join the meeting
    public var isPasswordRequired: Bool
    /// The meeting starting time
    public var startTime: Date
    /// The meeting status, i.e whether the meeting is running or not
    public var status: MeetingStatus
    /// The subject of the meeting
    public var subject: String
    /// The meeting ID. Field retained for backwards compatibility reasons
    public var uniqueMeetingID: Int

    public init(conferenceCallInfo: String, createTime: Date, duration: Int, endTime: Date, maxParticipants: Int, meetingID: Int, meetingKey: Int, meetingType: MeetingType, isPasswordRequired: Bool, startTime: Date, status: MeetingStatus, subject: String, uniqueMeetingID: Int) {
        self.conferenceCallInfo = conferenceCallInfo
        self.createTime = createTime
        self.duration = duration
        self.endTime = endTime
        self.maxParticipants = maxParticipants
        self.meetingID = meetingID
        self.meetingKey = meetingKey
        self.meetingType = meetingType
        self.isPasswordRequired = isPasswordRequired
        self.startTime = startTime
        self.status = status
        self.subject = subject
        self.uniqueMeetingID = uniqueMeetingID
    }

    private enum CodingKeys: String, CodingKey {
        case conferenceCallInfo
        case createTime
        case duration
        case endTime
        case maxParticipants
        case meetingID = "meetingId"
        case meetingKey
        case meetingType
        case isPasswordRequired = "passwordRequired"
        case startTime
        case status
        case subject
        case uniqueMeetingID = "uniqueMeetingId"
    }
}

/// Describes a meeting scheduled by a specified organizer
public struct MeetingByOrganizer: Codable {
    /// Audio options for the meeting
    public var conferenceCallInfo: String
    /// DEPRECATED. Returns an empty string ''
    public var createTime: Date
    /// The ending time of the meeting
    public var endTime: Date
    /// The maximum number of participants allowed at the meeting
    public var maxParticipants: Int
    /// The meeting type
    public var meetingType: MeetingType
    /// The meeting ID
    public var meetingid: Int
    /// Indicates whether a password is required to join the meeting
    public var isPasswordRequired: Bool
    /// The starting time of the meeting
    public var startTime: Date
    /// The meeting status, i.e whether the meeting is running or not
    public var status: MeetingStatus
    /// The subject of the meeting
    public var subject: String
    /// A unique ID for the meeting
    public var uniqueMeetingID: Int

    public init(conferenceCallInfo: String, createTime: Date, endTime: Date, maxParticipants: Int, meetingType: MeetingType, meetingid: Int, isPasswordRequired: Bool, startTime: Date, status: MeetingStatus, subject: String, uniqueMeetingID: Int) {
        self.conferenceCallInfo = conferenceCallInfo
        self.createTime = createTime
        self.endTime = endTime
        self.maxParticipants = maxParticipants
        self.meetingType = meetingType
        self.meetingid = meetingid
        self.isPasswordRequired = isPasswordRequired
        self.startTime = startTime
        self.status = status
        self.subject = subject
        self.uniqueMeetingID = uniqueMeetingID
    }

    private enum CodingKeys: String, CodingKey {
        case conferenceCallInfo
        case createTime
        case endTime
        case maxParticipants
        case meetingType
        case meetingid
        case isPasswordRequired = "passwordRequired"
        case startTime
        case status
        case subject
        case uniqueMeetingID = "uniqueMeetingId"
    }
}

/// Describes a newly created meeting.
public struct MeetingCreated: Codable {
    /// Audio options for the meeting
    public var conferenceCallInfo: String
    /// The URL the meeting participants will use to join the meeting
    public var joinURL: String
    /// The maximum number of participants allowed in the meeting
    public var maxParticipants: Int
    /// The meeting ID
    public var meetingid: Int
    /// The meeting ID. Field retained for backwards compatibility reasons
    public var uniqueMeetingID: Int

    public init(conferenceCallInfo: String, joinURL: String, maxParticipants: Int, meetingid: Int, uniqueMeetingID: Int) {
        self.conferenceCallInfo = conferenceCallInfo
        self.joinURL = joinURL
        self.maxParticipants = maxParticipants
        self.meetingid = meetingid
        self.uniqueMeetingID = uniqueMeetingID
    }

    private enum CodingKeys: String, CodingKey {
        case conferenceCallInfo
        case joinURL
        case maxParticipants
        case meetingid
        case uniqueMeetingID = "uniqueMeetingId"
    }
}

/// Describes a unique past meeting instance.
public struct MeetingHistory: Codable {
    /// Audio options for the meeting
    public var conferenceCallInfo: String
    /// The time the meeting instance started. Field retained for backwards compatibility reasons
    public var date: Date
    /// The duration of the meeting session in minutes
    public var duration: Int
    /// The meeting organizer's email address
    public var email: String
    /// The time the meeting instance ended
    public var endTime: Date
    /// The meeting organizer's first name
    public var firstName: String
    /// DEPRECATED. An empty string '' is returned
    public var groupName: String
    /// The surname of the meeting organizer
    public var lastName: String
    /// The meeting ID
    public var meetingID: Int
    /// The key of the unique meeting instance
    public var meetingInstanceKey: Int
    /// The meeting ID. Field retained for backwards compatibility reasons
    public var meetingKey: Int
    /// The meeting type
    public var meetingType: MeetingType
    /// Formatted meeting ID
    public var newMeetingID: String
    /// The key of the meeting organizer. Field introduced for compatibility reasons
    public var newOrganizerKey: String
    /// The number of attendees at the meeting instance
    public var numAttendees: Int
    /// The key of the meeting organizer
    public var organizerKey: String
    /// The key of the meeting organizer. Field retained for backwards compatibility reasons
    public var organizerkey: String
    /// DEPRECATED. An empty string '' is returned
    public var isPasswordRequired: Bool
    /// The ID of the meeting session
    public var sessionID: Int
    /// The time the meeting instance started
    public var startTime: Date
    /// DEPRECATED. An empty string '' is returned
    public var status: String
    /// The subject of the meeting
    public var subject: String
    /// The meeting ID. Field retained for backwards compatibility reasons
    public var uniqueMeetingID: Int

    public init(conferenceCallInfo: String, date: Date, duration: Int, email: String, endTime: Date, firstName: String, groupName: String, lastName: String, meetingID: Int, meetingInstanceKey: Int, meetingKey: Int, meetingType: MeetingType, newMeetingID: String, newOrganizerKey: String, numAttendees: Int, organizerKey: String, organizerkey: String, isPasswordRequired: Bool, sessionID: Int, startTime: Date, status: String, subject: String, uniqueMeetingID: Int) {
        self.conferenceCallInfo = conferenceCallInfo
        self.date = date
        self.duration = duration
        self.email = email
        self.endTime = endTime
        self.firstName = firstName
        self.groupName = groupName
        self.lastName = lastName
        self.meetingID = meetingID
        self.meetingInstanceKey = meetingInstanceKey
        self.meetingKey = meetingKey
        self.meetingType = meetingType
        self.newMeetingID = newMeetingID
        self.newOrganizerKey = newOrganizerKey
        self.numAttendees = numAttendees
        self.organizerKey = organizerKey
        self.organizerkey = organizerkey
        self.isPasswordRequired = isPasswordRequired
        self.sessionID = sessionID
        self.startTime = startTime
        self.status = status
        self.subject = subject
        self.uniqueMeetingID = uniqueMeetingID
    }

    private enum CodingKeys: String, CodingKey {
        case conferenceCallInfo
        case date
        case duration
        case email
        case endTime
        case firstName
        case groupName
        case lastName
        case meetingID = "meetingId"
        case meetingInstanceKey
        case meetingKey
        case meetingType
        case newMeetingID = "newMeetingId"
        case newOrganizerKey
        case numAttendees
        case organizerKey
        case organizerkey
        case isPasswordRequired = "passwordRequired"
        case sessionID = "sessionId"
        case startTime
        case status
        case subject
        case uniqueMeetingID = "uniqueMeetingId"
    }
}

/// Describes the information required to create a meeting.
public struct MeetingReqCreate: Codable {
    /// A required string. Can be one of the following options: <br>PSTN (PSTN only), <br>Free (PSTN and VoIP), <br>Hybrid, (PSTN and VoIP), <br>Private (you provide numbers and access code), or <br>VoIP (VoIP only). <br>You may also enter plain text for numbers and access codes with a limit of 255 characters
    public var conferencecallinfo: String
    /// The ending time of the meeting. Required ISO8601 UTC string, e.g. 2015-07-01T23:00:00Z
    public var endtime: Date
    /// The meeting type
    public var meetingtype: MeetingType
    /// Indicates whether a password is required to join the meeting. Required parameter
    public var isPasswordrequired: Bool
    /// The starting time of the meeting. Required ISO8601 UTC string, e.g. 2015-07-01T22:00:00Z
    public var starttime: Date
    /// The subject of the meeting. 100 characters maximum. The characters '&gt;' and '&lt;' have to be replaced with the corresponding html character code (&amp;gt; for &#39;&gt;&#39; and &amp;lt; for &#39;&lt;&#39;)
    public var subject: String
    /// DEPRECATED. Must be provided and set to empty string ''
    public var timezonekey: String

    public init(conferencecallinfo: String, endtime: Date, meetingtype: MeetingType, isPasswordrequired: Bool, starttime: Date, subject: String, timezonekey: String) {
        self.conferencecallinfo = conferencecallinfo
        self.endtime = endtime
        self.meetingtype = meetingtype
        self.isPasswordrequired = isPasswordrequired
        self.starttime = starttime
        self.subject = subject
        self.timezonekey = timezonekey
    }

    private enum CodingKeys: String, CodingKey {
        case conferencecallinfo
        case endtime
        case meetingtype
        case isPasswordrequired = "passwordrequired"
        case starttime
        case subject
        case timezonekey
    }
}

/// Describes the information required to update a meeting.
public struct MeetingReqUpdate: Codable {
    /// A required string. Can be one of the following options: <br>PSTN (PSTN only), <br>Free (PSTN and VoIP), <br>Hybrid, (PSTN and VoIP), <br>Private (you provide numbers and access code), or <br>VoIP (VoIP only). <br>You may also enter plain text for numbers and access codes with a limit of 255 characters
    public var conferencecallinfo: String
    /// The ending time of the meeting. A required ISO8601 UTC string, e.g. 2015-07-01T22:00:00Z
    public var endtime: Date
    /// The meeting type
    public var meetingtype: MeetingType
    /// Indicates whether a password is required to join the meeting. Required parameter
    public var isPasswordrequired: Bool
    /// The starting time of the meeting. A required ISO8601 UTC string, e.g. 2015-07-01T22:00:00Z
    public var starttime: Date
    /// A description of the meeting. 100 characters maximum. The characters '&gt;' and '&lt;' have to be replaced with the corresponding html character code (&amp;gt; for &#39;&gt;&#39; and &amp;lt; for &#39;&lt;&#39;)
    public var subject: String
    /// DEPRECATED. Must be provided and set to empty string ''
    public var timezonekey: String

    public init(conferencecallinfo: String, endtime: Date, meetingtype: MeetingType, isPasswordrequired: Bool, starttime: Date, subject: String, timezonekey: String) {
        self.conferencecallinfo = conferencecallinfo
        self.endtime = endtime
        self.meetingtype = meetingtype
        self.isPasswordrequired = isPasswordrequired
        self.starttime = starttime
        self.subject = subject
        self.timezonekey = timezonekey
    }

    private enum CodingKeys: String, CodingKey {
        case conferencecallinfo
        case endtime
        case meetingtype
        case isPasswordrequired = "passwordrequired"
        case starttime
        case subject
        case timezonekey
    }
}

/// Describes a scheduled meeting.
public struct MeetingScheduled: Codable {
    /// Audio options for the meeting.
    public var conferenceCallInfo: String
    /// The time the meeting was created.
    public var createTime: Date
    /// The ending time of the meeting.
    public var endTime: Date
    /// The maximum number of participants allowed at the meeting.
    public var maxParticipants: Int
    /// The meeting type
    public var meetingType: MeetingType
    /// The meeting ID.
    public var meetingid: Int
    /// Indicates whether a password is required to join the meeting.
    public var isPasswordRequired: Bool
    /// The starting time of the meeting.
    public var startTime: Date
    /// The meeting status, i.e whether the meeting is running or not
    public var status: MeetingStatus
    /// The subject of the meeting.
    public var subject: String
    /// The meeting ID. Field retained for backwards compatibility reasons.
    public var uniqueMeetingID: Int

    public init(conferenceCallInfo: String, createTime: Date, endTime: Date, maxParticipants: Int, meetingType: MeetingType, meetingid: Int, isPasswordRequired: Bool, startTime: Date, status: MeetingStatus, subject: String, uniqueMeetingID: Int) {
        self.conferenceCallInfo = conferenceCallInfo
        self.createTime = createTime
        self.endTime = endTime
        self.maxParticipants = maxParticipants
        self.meetingType = meetingType
        self.meetingid = meetingid
        self.isPasswordRequired = isPasswordRequired
        self.startTime = startTime
        self.status = status
        self.subject = subject
        self.uniqueMeetingID = uniqueMeetingID
    }

    private enum CodingKeys: String, CodingKey {
        case conferenceCallInfo
        case createTime
        case endTime
        case maxParticipants
        case meetingType
        case meetingid
        case isPasswordRequired = "passwordRequired"
        case startTime
        case status
        case subject
        case uniqueMeetingID = "uniqueMeetingId"
    }
}

/// The meeting status, i.e whether the meeting is running or not
public enum MeetingStatus: String, Codable, CaseIterable {
    case active = "ACTIVE"
    case inactive = "INACTIVE"
}

/// The meeting type
public enum MeetingType: String, Codable, CaseIterable {
    case immediate
    case recurring
    case scheduled
}

/// Describes an organizer.
public struct Organizer: Codable {
    /// The organizer's email address
    public var email: String
    /// The organizer's first name
    public var firstName: String
    /// The key of the group this organizer is assigned to
    public var groupID: Int
    /// The name of the group this organizer is assigned to
    public var groupName: String
    /// The organizer's surname
    public var lastName: String
    /// The maximum number of attendees allowed at sessions hosted by this organizer.
    public var maxNumAttendeesAllowed: Int
    /// The key of the organizer
    public var organizerKey: Int
    /// The products the organizer has access to, can be 'G2M', 'G2W', 'G2T' or 'OPENVOICE'
    public var products: [Product]
    /// The status of an organizer (or group), i.e. whether the organizer (or the members of the group respectively) are able to host meetings
    public var status: Status

    public init(email: String, firstName: String, groupID: Int, groupName: String, lastName: String, maxNumAttendeesAllowed: Int, organizerKey: Int, products: [Product], status: Status) {
        self.email = email
        self.firstName = firstName
        self.groupID = groupID
        self.groupName = groupName
        self.lastName = lastName
        self.maxNumAttendeesAllowed = maxNumAttendeesAllowed
        self.organizerKey = organizerKey
        self.products = products
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case email
        case firstName
        case groupID = "groupId"
        case groupName
        case lastName
        case maxNumAttendeesAllowed
        case organizerKey
        case products
        case status
    }
}

/// Describes an organizer within a specified group.
public struct OrganizerByGroup: Codable {
    /// The organizer's email address
    public var email: String
    /// The organizer's first name
    public var firstName: String
    /// The key of the group
    public var groupID: Int
    /// The name of the group
    public var groupName: String
    /// The organizer's surname
    public var lastName: String
    /// The maximum number of attendees allowed at sessions held by this organizer
    public var maxNumAttendeesAllowed: Int
    /// The key of the organizer
    public var organizerKey: Int
    /// The products the organizer has access to, can be 'G2M', 'G2W', 'G2T' or 'OPENVOICE'
    public var products: [Product]
    /// The status of an organizer (or group), i.e. whether the organizer (or the members of the group respectively) are able to host meetings
    public var status: Status

    public init(email: String, firstName: String, groupID: Int, groupName: String, lastName: String, maxNumAttendeesAllowed: Int, organizerKey: Int, products: [Product], status: Status) {
        self.email = email
        self.firstName = firstName
        self.groupID = groupID
        self.groupName = groupName
        self.lastName = lastName
        self.maxNumAttendeesAllowed = maxNumAttendeesAllowed
        self.organizerKey = organizerKey
        self.products = products
        self.status = status
    }

    private enum CodingKeys: String, CodingKey {
        case email
        case firstName
        case groupID = "groupId"
        case groupName
        case lastName
        case maxNumAttendeesAllowed
        case organizerKey
        case products
        case status
    }
}

/// Describes the information required to create an organizer, with or without assigning a group.
public struct OrganizerReq: Codable {
    /// The first name of the organizer
    public var firstName: String
    /// The surname of the organizer
    public var lastName: String
    /// The email address of the organizer
    public var organizerEmail: String
    /// The products the organizer has access to, can be 'G2M', 'G2W', 'G2T' or 'OPENVOICE'
    public var productType: Product

    public init(firstName: String, lastName: String, organizerEmail: String, productType: Product) {
        self.firstName = firstName
        self.lastName = lastName
        self.organizerEmail = organizerEmail
        self.productType = productType
    }
}

/// Describes a newly created organizer.
public struct OrganizerShort: Codable {
    /// The organizer's email address
    public var email: String
    /// The organizer's key
    public var key: Int

    public init(email: String, key: Int) {
        self.email = email
        self.key = key
    }
}

/// Describes the status of an organizer, i.e. whether they are able to host meetings.
public struct OrganizerStatus: Codable {
    /// The products the organizer has access to, can be 'G2M', 'G2W', 'G2T' or 'OPENVOICE'
    public var productType: Product?
    /// The status of the organizer can be set to. Use 'suspended' to remove all products. The formerly used status 'active' is now DEPRECATED for this call. To activate the organizer please assign a product. In this case do not pass this parameter
    public var status: Status?

    /// The status of the organizer can be set to. Use 'suspended' to remove all products. The formerly used status 'active' is now DEPRECATED for this call. To activate the organizer please assign a product. In this case do not pass this parameter
    public enum Status: String, Codable, CaseIterable {
        case suspended
    }

    public init(productType: Product? = nil, status: Status? = nil) {
        self.productType = productType
        self.status = status
    }
}

/// The products the organizer has access to, can be 'G2M', 'G2W', 'G2T' or 'OPENVOICE'
public enum Product: String, Codable, CaseIterable {
    case g2m = "G2M"
    case g2t = "G2T"
    case g2w = "G2W"
    case openvoice = "OPENVOICE"
}

/// Describes a meeting scheduled by an organizer within a specified group.
public struct ScheduledMeetingByGroup: Codable {
    /// Not in use.
    public var attendees: String
    /// Audio options for the meeting.
    public var conferenceCallInfo: String
    /// The email address of the meeting organizer.
    public var email: String
    /// The first name of the meeting organizer.
    public var firstName: String
    /// The name of the group.
    public var groupName: String
    /// The surname of the meeting organizer.
    public var lastName: String
    /// The meeting ID.
    public var meetingID: String
    /// The meeting type
    public var meetingType: MeetingType
    /// The key of the meeting organizer.
    public var organizerKey: String
    /// The key of the meeting organizer. Field retained for backwards compatibility reasons.
    public var organizerkey: Int
    /// Indicates whether a password is required to join the meeting.
    public var isPasswordRequired: Bool
    /// The subject of the meeting.
    public var subject: String

    public init(attendees: String, conferenceCallInfo: String, email: String, firstName: String, groupName: String, lastName: String, meetingID: String, meetingType: MeetingType, organizerKey: String, organizerkey: Int, isPasswordRequired: Bool, subject: String) {
        self.attendees = attendees
        self.conferenceCallInfo = conferenceCallInfo
        self.email = email
        self.firstName = firstName
        self.groupName = groupName
        self.lastName = lastName
        self.meetingID = meetingID
        self.meetingType = meetingType
        self.organizerKey = organizerKey
        self.organizerkey = organizerkey
        self.isPasswordRequired = isPasswordRequired
        self.subject = subject
    }

    private enum CodingKeys: String, CodingKey {
        case attendees
        case conferenceCallInfo
        case email
        case firstName
        case groupName
        case lastName
        case meetingID = "meetingId"
        case meetingType
        case organizerKey
        case organizerkey
        case isPasswordRequired = "passwordRequired"
        case subject
    }
}

/// Host URL that can be used to start a meeting
public struct StartURL: Codable {
    /// The host URL that can be used to start a meeting.
    public var hostURL: String

    public init(hostURL: String) {
        self.hostURL = hostURL
    }
}

/// The status of an organizer (or group), i.e. whether the organizer (or the members of the group respectively) are able to host meetings
public enum Status: String, Codable, CaseIterable {
    case active
    case suspended
}

/// Describes an upcoming meeting.
public struct UpcomingMeeting: Codable {
    /// The key of the company account
    public var accountKey: String
    /// Audio options for the meeting
    public var conferenceCallInfo: String
    /// The meeting organizer's email address
    public var email: String
    /// The time the meeting instance ended
    public var endTime: Date
    /// The meeting organizer's first name
    public var firstName: String
    /// The surname of the meeting organizer
    public var lastName: String
    /// The current language setting of the organizer in the web portal
    public var locale: String
    /// The meeting ID
    public var meetingID: String
    /// The meeting type
    public var meetingType: MeetingType
    /// The key of the meeting organizer
    public var organizerKey: String
    /// Indicates whether a password is required to join the meeting or not
    public var isPasswordRequired: Bool
    /// The time the meeting instance will start
    public var startTime: Date
    /// The meeting status, i.e whether the meeting is running or not
    public var status: MeetingStatus
    /// The subject of the meeting
    public var subject: String

    public init(accountKey: String, conferenceCallInfo: String, email: String, endTime: Date, firstName: String, lastName: String, locale: String, meetingID: String, meetingType: MeetingType, organizerKey: String, isPasswordRequired: Bool, startTime: Date, status: MeetingStatus, subject: String) {
        self.accountKey = accountKey
        self.conferenceCallInfo = conferenceCallInfo
        self.email = email
        self.endTime = endTime
        self.firstName = firstName
        self.lastName = lastName
        self.locale = locale
        self.meetingID = meetingID
        self.meetingType = meetingType
        self.organizerKey = organizerKey
        self.isPasswordRequired = isPasswordRequired
        self.startTime = startTime
        self.status = status
        self.subject = subject
    }

    private enum CodingKeys: String, CodingKey {
        case accountKey
        case conferenceCallInfo
        case email
        case endTime
        case firstName
        case lastName
        case locale
        case meetingID = "meetingId"
        case meetingType
        case organizerKey
        case isPasswordRequired = "passwordRequired"
        case startTime
        case status
        case subject
    }
}

/// Describes an upcoming meeting of a group.
public struct UpcomingMeetingByGroup: Codable {
    /// The key of the company account
    public var accountKey: String
    /// The meeting organizer's email address
    public var email: String
    /// The time the meeting instance ended
    public var endTime: Date
    /// The meeting organizer's first name
    public var firstName: String
    /// The name of the group the meeting belongs to
    public var groupName: String
    /// The surname of the meeting organizer
    public var lastName: String
    /// The current language setting of the organizer in the web portal
    public var locale: String
    /// The meeting ID
    public var meetingID: String
    /// The meeting type
    public var meetingType: MeetingType
    /// The key of the meeting organizer
    public var organizerKey: String
    /// Indicates whether a password is required to join the meeting or not
    public var isPasswordRequired: Bool
    /// The time the meeting instance will start
    public var startTime: Date
    /// The meeting status, i.e whether the meeting is running or not
    public var status: MeetingStatus?
    /// The subject of the meeting
    public var subject: String

    public init(accountKey: String, email: String, endTime: Date, firstName: String, groupName: String, lastName: String, locale: String, meetingID: String, meetingType: MeetingType, organizerKey: String, isPasswordRequired: Bool, startTime: Date, status: MeetingStatus? = nil, subject: String) {
        self.accountKey = accountKey
        self.email = email
        self.endTime = endTime
        self.firstName = firstName
        self.groupName = groupName
        self.lastName = lastName
        self.locale = locale
        self.meetingID = meetingID
        self.meetingType = meetingType
        self.organizerKey = organizerKey
        self.isPasswordRequired = isPasswordRequired
        self.startTime = startTime
        self.status = status
        self.subject = subject
    }

    private enum CodingKeys: String, CodingKey {
        case accountKey
        case email
        case endTime
        case firstName
        case groupName
        case lastName
        case locale
        case meetingID = "meetingId"
        case meetingType
        case organizerKey
        case isPasswordRequired = "passwordRequired"
        case startTime
        case status
        case subject
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
